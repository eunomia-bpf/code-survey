commit_id,commit_hash,author_name,author_email,author_date,committer_name,committer_email,commit_date_timestamp,tree_hash,parent_hashes,commit_message,refs,summary,keywords,commit_classification,commit_complexity,Major related component,program_types_related
b831f83e40a24f07c8dcba5be408d93beedc820f,b831f83e40a24f07c8dcba5be408d93beedc820f,Linus Torvalds,torvalds@linux-foundation.org,1725592253,Linus Torvalds,torvalds@linux-foundation.org,1725592253,45d37c24cbcde7ceb198bebd4ad8719b11a3c640,d759ee240d3c0c4a19f4d984eb21c36da76bc6ce 5390f315fc8c9b9f48105a0d88b56bc59fa2b3e0,"Merge tag 'bpf-6.11-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Pull bpf fixes from Alexei Starovoitov:

 - Fix crash when btf_parse_base() returns an error (Martin Lau)

 - Fix out of bounds access in btf_name_valid_section() (Jeongjun Park)

* tag 'bpf-6.11-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:
  selftests/bpf: Add a selftest to check for incorrect names
  bpf: add check for invalid name in btf_name_valid_section()
  bpf: Fix a crash when btf_parse_base() returns an error pointer
",,This commit is a merge containing bug fixes related to BTF parsing in the eBPF subsystem.,"BTF,crash,fix",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d759ee240d3c0c4a19f4d984eb21c36da76bc6ce,d759ee240d3c0c4a19f4d984eb21c36da76bc6ce,Linus Torvalds,torvalds@linux-foundation.org,1725581281,Linus Torvalds,torvalds@linux-foundation.org,1725581281,8fb0d7425b8516069f11128f32a869c395b21a1b,f95359996ac35206ff24e378052ce564d5bfdc94 031ae72825cef43e4650140b800ad58bf7a6a466,"Merge tag 'net-6.11-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 ""Including fixes from can"," bluetooth and wireless.

  No known regressions at this point. Another calm week","[' but chances are\n  that has more to do with vacation season than the quality of our work.\n\n  Current release - new code bugs:\n\n   - smc: prevent NULL pointer dereference in txopt_get\n\n   - eth: ti: am65-cpsw: number of XDP-related fixes\n\n  Previous releases - regressions:\n\n   - Revert ""Bluetooth: MGMT/SMP: Fix address type when using SMP over\n     BREDR/LE""', "" it breaks existing user space\n\n   - Bluetooth: qca: if memdump doesn't work"", ' re-enable IBS to avoid\n     later problems with suspend\n\n   - can: mcp251x: fix deadlock if an interrupt occurs during\n     mcp251x_open\n\n   - eth: r8152: fix the firmware communication error due to use of bulk\n     write\n\n   - ptp: ocp: fix serial port information export\n\n   - eth: igb: fix not clearing TimeSync interrupts for 82580\n\n   - Revert ""wifi: ath11k: support hibernation""', ' fix suspend on Lenovo\n\n  Previous releases - always broken:\n\n   - eth: intel: fix crashes and bugs when reconfiguration and resets\n     happening in parallel\n\n   - wifi: ath11k: fix NULL dereference in ath11k_mac_get_eirp_power()\n\n  Misc:\n\n   - docs: netdev: document guidance on cleanup.h""\n\n* tag \'net-6.11-rc7\' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (61 commits)\n  ila: call nf_unregister_net_hooks() sooner\n  tools/net/ynl: fix cli.py --subscribe feature\n  MAINTAINERS: fix ptp ocp driver maintainers address\n  selftests: net: enable bind tests\n  net: dsa: vsc73xx: fix possible subblocks range of CAPT block\n  sched: sch_cake: fix bulk flow accounting logic for host fairness\n  docs: netdev: document guidance on cleanup.h\n  net: xilinx: axienet: Fix race in axienet_stop\n  net: bridge: br_fdb_external_learn_add(): always set EXT_LEARN\n  r8152: fix the firmware doesn\'t work\n  fou: Fix null-ptr-deref in GRO.\n  bareudp: Fix device stats updates.\n  net: mana: Fix error handling in mana_create_txq/rxq\'s NAPI cleanup\n  bpf', ' net: Fix a potential race in do_sock_getsockopt()\n  net: dqs: Do not use extern for unused dql_group\n  sch/netem: fix use after free in netem_dequeue\n  usbnet: modern method to get random MAC\n  MAINTAINERS: wifi: cw1200: add net-cw1200.h\n  ice: do not bring the VSI up', ' if it was down before the XDP setup\n  ice: remove ICE_CFG_BUSY locking from AF_XDP code\n  ...\n', '']",Merge networking fixes from Jakub Kicinski into Linux kernel by Linus Torvalds.,"networking, fixes, merge",It's other type of commit.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
f0417c50fddd628e534c336d87932e7e1e883df3,f0417c50fddd628e534c336d87932e7e1e883df3,Jakub Kicinski,kuba@kernel.org,1725496657,Jakub Kicinski,kuba@kernel.org,1725496657,7b607a1a5f8adc6796cfc2771dc1f01fd62bde6e,2603d3152b1f646b0ef81a748fb703b799fcf9c3 04c7e14e5b0b6227e7b00d7a96ca2f2426ab9171,"Merge branch '100GbE' of git://git.kernel.org/pub/scm/linux/kernel/git/tnguy/net-queue

Tony Nguyen says:

====================
ice: fix synchronization between .ndo_bpf() and reset

Larysa Zaremba says:

PF reset can be triggered asynchronously"," by tx_timeout or by a user. With some
unfortunate timings both ice_vsi_rebuild() and .ndo_bpf will try to access and
modify XDP rings at the same time","["" causing system crash.\n\nThe first patch factors out rtnl-locked code from VSI rebuild code to avoid\ndeadlock. The following changes lock rebuild and .ndo_bpf() critical sections\nwith an internal mutex as well and provide complementary fixes.\n\n* '100GbE' of git://git.kernel.org/pub/scm/linux/kernel/git/tnguy/net-queue:\n  ice: do not bring the VSI up"", ' if it was down before the XDP setup\n  ice: remove ICE_CFG_BUSY locking from AF_XDP code\n  ice: check ICE_VSI_DOWN under rtnl_lock when preparing for reset\n  ice: check for XDP rings instead of bpf program when unconfiguring\n  ice: protect XDP configuration with a mutex\n  ice: move netif_queue_set_napi to rtnl-protected sections\n====================\n\nLink: https://patch.msgid.link/20240903183034.3530411-1-anthony.l.nguyen@intel.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",Fix synchronization issue between .ndo_bpf() and reset in the ice driver due to async PF resets.,"synchronization, reset, ice",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['xdp like programs']
5390f315fc8c9b9f48105a0d88b56bc59fa2b3e0,5390f315fc8c9b9f48105a0d88b56bc59fa2b3e0,Alexei Starovoitov,ast@kernel.org,1725476194,Alexei Starovoitov,ast@kernel.org,1725478504,324cbb6757e625a5079894ce62f9c0e4bc0f4eb9,b408473ea01b2e499d23503e2bf898416da9d7ac 743070894724bf5ee0b2c77a28f838f6244d19bd,"Merge branch 'bpf-fix-incorrect-name-check-pass-logic-in-btf_name_valid_section'

Jeongjun Park says:

====================
bpf: fix incorrect name check pass logic in btf_name_valid_section

This patch was written to fix an issue where btf_name_valid_section() would
not properly check names with certain conditions and would throw an OOB vuln.
And selftest was added to verify this patch.
====================

Link: https://lore.kernel.org/r/20240831054525.364353-1-aha310510@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Fixes incorrect name check logic in btf_name_valid_section and adds a selftest.,"fix, name check, btf",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
743070894724bf5ee0b2c77a28f838f6244d19bd,743070894724bf5ee0b2c77a28f838f6244d19bd,Jeongjun Park,aha310510@gmail.com,1725083262,Alexei Starovoitov,ast@kernel.org,1725478459,324cbb6757e625a5079894ce62f9c0e4bc0f4eb9,bb6705c3f93bed2af03d43691743d4c43e3c8e6f,"selftests/bpf: Add a selftest to check for incorrect names

Add selftest for cases where btf_name_valid_section() does not properly
check for certain types of names.

Suggested-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Jeongjun Park <aha310510@gmail.com>
Link: https://lore.kernel.org/r/20240831054742.364585-1-aha310510@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
",,Added a selftest to verify btf_name_valid_section() function for incorrect names.,"selftest, btf_name_valid_section, names",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
bb6705c3f93bed2af03d43691743d4c43e3c8e6f,bb6705c3f93bed2af03d43691743d4c43e3c8e6f,Jeongjun Park,aha310510@gmail.com,1725083222,Alexei Starovoitov,ast@kernel.org,1725476194,930dce457cb48dc146e4fadd65db839cdb2487d4,b408473ea01b2e499d23503e2bf898416da9d7ac,"bpf: add check for invalid name in btf_name_valid_section()

If the length of the name string is 1 and the value of name[0] is NULL
byte"," an OOB vulnerability occurs in btf_name_valid_section() and the
return value is true","[' so the invalid name passes the check.\n\nTo solve this', ' you need to check if the first position is NULL byte and\nif the first character is printable.\n\nSuggested-by: Eduard Zingerman <eddyz87@gmail.com>\nFixes: bd70a8fb7ca4 (""bpf: Allow all printable characters in BTF DATASEC names"")\nSigned-off-by: Jeongjun Park <aha310510@gmail.com>\nLink: https://lore.kernel.org/r/20240831054702.364455-1-aha310510@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\n', '']",The commit adds a check for invalid names in btf_name_valid_section to prevent an OOB vulnerability.,"check, invalid, btf_name_valid_section",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
33f339a1ba54e56bba57ee9a77c71e385ab4825c,33f339a1ba54e56bba57ee9a77c71e385ab4825c,Tze-nan Wu,Tze-nan.Wu@mediatek.com,1725006317,Jakub Kicinski,kuba@kernel.org,1725390384,66713861c1b04e6459e0e652925f112e4bfafeb5,77461c10819103eaee7b33c744174b32a8c78b40,bpf," net: Fix a potential race in do_sock_getsockopt()

There's a potential race when `cgroup_bpf_enabled(CGROUP_GETSOCKOPT)` is
false during the execution of `BPF_CGROUP_GETSOCKOPT_MAX_OPTLEN`","[' but\nbecomes true when `BPF_CGROUP_RUN_PROG_GETSOCKOPT` is called.\nThis inconsistency can lead to `BPF_CGROUP_RUN_PROG_GETSOCKOPT` receiving\nan ""-EFAULT"" from `__cgroup_bpf_run_filter_getsockopt(max_optlen=0)`.\nScenario shown as below:\n\n           `process A`                      `process B`\n           -----------                      ------------\n  BPF_CGROUP_GETSOCKOPT_MAX_OPTLEN\n                                            enable CGROUP_GETSOCKOPT\n  BPF_CGROUP_RUN_PROG_GETSOCKOPT (-EFAULT)\n\nTo resolve this', ' remove the `BPF_CGROUP_GETSOCKOPT_MAX_OPTLEN` macro and\ndirectly uses `copy_from_sockptr` to ensure that `max_optlen` is always\nset before `BPF_CGROUP_RUN_PROG_GETSOCKOPT` is invoked.\n\nFixes: 0d01da6afc54 (""bpf: implement getsockopt and setsockopt hooks"")\nCo-developed-by: Yanghui Li <yanghui.li@mediatek.com>\nSigned-off-by: Yanghui Li <yanghui.li@mediatek.com>\nCo-developed-by: Cheng-Jui Wang <cheng-jui.wang@mediatek.com>\nSigned-off-by: Cheng-Jui Wang <cheng-jui.wang@mediatek.com>\nSigned-off-by: Tze-nan Wu <Tze-nan.Wu@mediatek.com>\nAcked-by: Stanislav Fomichev <sdf@fomichev.me>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nLink: https://patch.msgid.link/20240830082518.23243-1-Tze-nan.Wu@mediatek.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",Fix potential race condition in do_sock_getsockopt when cgroup_bpf_enabled is false for CGROUP_GETSOCKOPT.,"race condition,cgroup_bpf_enabled,sock_getsockopt",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['cgroup like programs']
04c7e14e5b0b6227e7b00d7a96ca2f2426ab9171,04c7e14e5b0b6227e7b00d7a96ca2f2426ab9171,Larysa Zaremba,larysa.zaremba@intel.com,1724407171,Tony Nguyen,anthony.l.nguyen@intel.com,1725379540,c8aaeea8a842d3f1f39d548860fd0572a4566824,7e3b407ccbea3259b8583ccc34807622025e390f,ice: do not bring the VSI up," if it was down before the XDP setup

After XDP configuration is completed","[' we bring the interface up\nunconditionally', ' regardless of its state before the call to .ndo_bpf().\n\nPreserve the information whether the interface had to be brought down and\nlater bring it up only in such case.\n\nFixes: efc2214b6047 (""ice: Add support for XDP"")\nReviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>\nReviewed-by: Jacob Keller <jacob.e.keller@intel.com>\nTested-by: Chandan Kumar Rout <chandanx.rout@intel.com>\nAcked-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>\nSigned-off-by: Larysa Zaremba <larysa.zaremba@intel.com>\nSigned-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>\n', '']",Prevent bringing up VSI if it was down before XDP setup.,"VSI,XDP,setup",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['xdp like programs']
d8c40b9d3a6cef61eb5a0c58c34a3090ea938d89,d8c40b9d3a6cef61eb5a0c58c34a3090ea938d89,Larysa Zaremba,larysa.zaremba@intel.com,1724407169,Tony Nguyen,anthony.l.nguyen@intel.com,1725379268,21dad620b2ca83810ec362edb35e0652991a24a1,f50c68763436bc8f805712a7c5ceaf58cfcf5f07,"ice: check ICE_VSI_DOWN under rtnl_lock when preparing for reset

Consider the following scenario:

.ndo_bpf()		| ice_prepare_for_reset()		|
________________________|_______________________________________|
rtnl_lock()		|					|
ice_down()		|					|
			| test_bit(ICE_VSI_DOWN) - true		|
			| ice_dis_vsi() returns			|
ice_up()		|					|
			| proceeds to rebuild a running VSI	|

.ndo_bpf() is not the only rtnl-locked callback that toggles the interface
to apply new configuration. Another example is .set_channels().

To avoid the race condition above"," act only after reading ICE_VSI_DOWN
under rtnl_lock.

Fixes: 0f9d5027a749 (""ice: Refactor VSI allocation","[' deletion and rebuild flow"")\nReviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>\nReviewed-by: Jacob Keller <jacob.e.keller@intel.com>\nTested-by: Chandan Kumar Rout <chandanx.rout@intel.com>\nSigned-off-by: Larysa Zaremba <larysa.zaremba@intel.com>\nReviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>\nSigned-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>\n', '']",The commit resolves a race condition by ensuring ICE_VSI_DOWN is checked under rtnl_lock before proceeding with reset preparation.,"race, rtnl_lock, ICE_VSI_DOWN",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['other']
f50c68763436bc8f805712a7c5ceaf58cfcf5f07,f50c68763436bc8f805712a7c5ceaf58cfcf5f07,Larysa Zaremba,larysa.zaremba@intel.com,1724407168,Tony Nguyen,anthony.l.nguyen@intel.com,1725379100,5647d47eedba407e96e30475e06fa1f54e33b823,2504b8405768a57a71e660dbfd5abd59f679a03f,"ice: check for XDP rings instead of bpf program when unconfiguring

If VSI rebuild is pending"," .ndo_bpf() can attach/detach the XDP program on
VSI without applying new ring configuration. When unconfiguring the VSI","[' we\ncan encounter the state in which there is an XDP program but no XDP rings\nto destroy or there will be XDP rings that need to be destroyed', ' but no XDP\nprogram to indicate their presence.\n\nWhen unconfiguring', ' rely on the presence of XDP rings rather then XDP\nprogram', ' as they better represent the current state that has to be\ndestroyed.\n\nReviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>\nReviewed-by: Jacob Keller <jacob.e.keller@intel.com>\nTested-by: Chandan Kumar Rout <chandanx.rout@intel.com>\nAcked-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>\nSigned-off-by: Larysa Zaremba <larysa.zaremba@intel.com>\nSigned-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>\n', '']",The commit checks XDP rings presence instead of bpf program during unconfiguration if VSI rebuild is pending.,"XDP rings,VSI rebuild,unconfiguration",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['xdp like programs']
2a5dc090b92cfa5270e20056074241c6db5c9cdd,2a5dc090b92cfa5270e20056074241c6db5c9cdd,Larysa Zaremba,larysa.zaremba@intel.com,1724407166,Tony Nguyen,anthony.l.nguyen@intel.com,1725378496,4954f7521457bbb6625a630a5191b72016c75083,cfd433cecef929b4d92685f570f1a480762ec260,"ice: move netif_queue_set_napi to rtnl-protected sections

Currently"," netif_queue_set_napi() is called from ice_vsi_rebuild() that is
not rtnl-locked when called from the reset. This creates the need to take
the rtnl_lock just for a single function and complicates the
synchronization with .ndo_bpf. At the same time","[' there no actual need to\nfill napi-to-queue information at this exact point.\n\nFill napi-to-queue information when opening the VSI and clear it when the\nVSI is being closed. Those routines are already rtnl-locked.\n\nAlso', ' rewrite napi-to-queue assignment in a way that prevents inclusion of\nXDP queues', ' as this leads to out-of-bounds writes', ' such as one below.\n\n[  +0.000004] BUG: KASAN: slab-out-of-bounds in netif_queue_set_napi+0x1c2/0x1e0\n[  +0.000012] Write of size 8 at addr ffff889881727c80 by task bash/7047\n[  +0.000006] CPU: 24 PID: 7047 Comm: bash Not tainted 6.10.0-rc2+ #2\n[  +0.000004] Hardware name: Intel Corporation S2600WFT/S2600WFT', ' BIOS SE5C620.86B.02.01.0014.082620210524 08/26/2021\n[  +0.000003] Call Trace:\n[  +0.000003]  <TASK>\n[  +0.000002]  dump_stack_lvl+0x60/0x80\n[  +0.000007]  print_report+0xce/0x630\n[  +0.000007]  ? __pfx__raw_spin_lock_irqsave+0x10/0x10\n[  +0.000007]  ? __virt_addr_valid+0x1c9/0x2c0\n[  +0.000005]  ? netif_queue_set_napi+0x1c2/0x1e0\n[  +0.000003]  kasan_report+0xe9/0x120\n[  +0.000004]  ? netif_queue_set_napi+0x1c2/0x1e0\n[  +0.000004]  netif_queue_set_napi+0x1c2/0x1e0\n[  +0.000005]  ice_vsi_close+0x161/0x670 [ice]\n[  +0.000114]  ice_dis_vsi+0x22f/0x270 [ice]\n[  +0.000095]  ice_pf_dis_all_vsi.constprop.0+0xae/0x1c0 [ice]\n[  +0.000086]  ice_prepare_for_reset+0x299/0x750 [ice]\n[  +0.000087]  pci_dev_save_and_disable+0x82/0xd0\n[  +0.000006]  pci_reset_function+0x12d/0x230\n[  +0.000004]  reset_store+0xa0/0x100\n[  +0.000006]  ? __pfx_reset_store+0x10/0x10\n[  +0.000002]  ? __pfx_mutex_lock+0x10/0x10\n[  +0.000004]  ? __check_object_size+0x4c1/0x640\n[  +0.000007]  kernfs_fop_write_iter+0x30b/0x4a0\n[  +0.000006]  vfs_write+0x5d6/0xdf0\n[  +0.000005]  ? fd_install+0x180/0x350\n[  +0.000005]  ? __pfx_vfs_write+0x10/0xA10\n[  +0.000004]  ? do_fcntl+0x52c/0xcd0\n[  +0.000004]  ? kasan_save_track+0x13/0x60\n[  +0.000003]  ? kasan_save_free_info+0x37/0x60\n[  +0.000006]  ksys_write+0xfa/0x1d0\n[  +0.000003]  ? __pfx_ksys_write+0x10/0x10\n[  +0.000002]  ? __x64_sys_fcntl+0x121/0x180\n[  +0.000004]  ? _raw_spin_lock+0x87/0xe0\n[  +0.000005]  do_syscall_64+0x80/0x170\n[  +0.000007]  ? _raw_spin_lock+0x87/0xe0\n[  +0.000004]  ? __pfx__raw_spin_lock+0x10/0x10\n[  +0.000003]  ? file_close_fd_locked+0x167/0x230\n[  +0.000005]  ? syscall_exit_to_user_mode+0x7d/0x220\n[  +0.000005]  ? do_syscall_64+0x8c/0x170\n[  +0.000004]  ? do_syscall_64+0x8c/0x170\n[  +0.000003]  ? do_syscall_64+0x8c/0x170\n[  +0.000003]  ? fput+0x1a/0x2c0\n[  +0.000004]  ? filp_close+0x19/0x30\n[  +0.000004]  ? do_dup2+0x25a/0x4c0\n[  +0.000004]  ? __x64_sys_dup2+0x6e/0x2e0\n[  +0.000002]  ? syscall_exit_to_user_mode+0x7d/0x220\n[  +0.000004]  ? do_syscall_64+0x8c/0x170\n[  +0.000003]  ? __count_memcg_events+0x113/0x380\n[  +0.000005]  ? handle_mm_fault+0x136/0x820\n[  +0.000005]  ? do_user_addr_fault+0x444/0xa80\n[  +0.000004]  ? clear_bhb_loop+0x25/0x80\n[  +0.000004]  ? clear_bhb_loop+0x25/0x80\n[  +0.000002]  entry_SYSCALL_64_after_hwframe+0x76/0x7e\n[  +0.000005] RIP: 0033:0x7f2033593154\n\nFixes: 080b0c8d6d26 (""ice: Fix ASSERT_RTNL() warning during certain scenarios"")\nFixes: 91fdbce7e8d6 (""ice: Add support in the driver for associating queue with napi"")\nReviewed-by: Wojciech Drewek <wojciech.drewek@intel.com>\nReviewed-by: Jacob Keller <jacob.e.keller@intel.com>\nReviewed-by: Amritha Nambiar <amritha.nambiar@intel.com>\nSigned-off-by: Larysa Zaremba <larysa.zaremba@intel.com>\nReviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>\nTested-by: George Kuruvinakunnel <george.kuruvinakunnel@intel.com>\nSigned-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>\n', '']",The commit moves netif_queue_set_napi to rtnl-protected sections for better synchronization.,"netif_queue_set_napi,rtnl_lock,synchronization",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
287bd5cf06e0f2c02293ce942777ad1f18059ed3,287bd5cf06e0f2c02293ce942777ad1f18059ed3,Namhyung Kim,namhyung@kernel.org,1724822993,Namhyung Kim,namhyung@kernel.org,1725303564,bb8bd6ad399b7b5dbf1e06024e44825d84bbdcbb,1c7fb536e899a2f66f9b1719a0234570dda2e634,"perf lock contention: Fix spinlock and rwlock accounting

The spinlock and rwlock use a single-element per-cpu array to track
current locks due to performance reason.  But this means the key is
always available and it cannot simply account lock stats in the array
because some of them are invalid.

In fact"," the contention_end() program in the BPF invalidates the entry
by setting the 'lock' value to 0 instead of deleting the entry for the
hashmap.  So it should skip entries with the lock value of 0 in the
account_end_timestamp().

Otherwise","["" it'd have spurious high contention on an idle machine:\n\n  $ sudo perf lock con -ab -Y spinlock sleep 3\n   contended   total wait     max wait     avg wait         type   caller\n\n           8      4.72 s       1.84 s     590.46 ms     spinlock   rcu_core+0xc7\n           8      1.87 s       1.87 s     233.48 ms     spinlock   process_one_work+0x1b5\n           2      1.87 s       1.87 s     933.92 ms     spinlock   worker_thread+0x1a2\n           3      1.81 s       1.81 s     603.93 ms     spinlock   tmigr_update_events+0x13c\n           2      1.72 s       1.72 s     861.98 ms     spinlock   tick_do_update_jiffies64+0x25\n           6     42.48 us     13.02 us      7.08 us     spinlock   futex_q_lock+0x2a\n           1     13.03 us     13.03 us     13.03 us     spinlock   futex_wake+0xce\n           1     11.61 us     11.61 us     11.61 us     spinlock   rcu_core+0xc7\n\nI don't believe it has contention on a spinlock longer than 1 second.\nAfter this change"", ' it only reports some small contentions.\n\n  $ sudo perf lock con -ab -Y spinlock sleep 3\n   contended   total wait     max wait     avg wait         type   caller\n\n           4    133.51 us     43.29 us     33.38 us     spinlock   tick_do_update_jiffies64+0x25\n           4     69.06 us     31.82 us     17.27 us     spinlock   process_one_work+0x1b5\n           2     50.66 us     25.77 us     25.33 us     spinlock   rcu_core+0xc7\n           1     28.45 us     28.45 us     28.45 us     spinlock   rcu_core+0xc7\n           1     24.77 us     24.77 us     24.77 us     spinlock   tmigr_update_events+0x13c\n           1     23.34 us     23.34 us     23.34 us     spinlock   raw_spin_rq_lock_nested+0x15\n\nFixes: b5711042a1c8 (""perf lock contention: Use per-cpu array map for spinlocks"")\nReported-by: Xi Wang <xii@google.com>\nCc: Song Liu <song@kernel.org>\nCc: bpf@vger.kernel.org\nLink: https://lore.kernel.org/r/20240828052953.1445862-1-namhyung@kernel.org\nSigned-off-by: Namhyung Kim <namhyung@kernel.org>\n', '']",Fixes accounting issues in spinlock and rwlock usage for perf lock contention related to BPF program.,spinlock rwlock accounting,It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['tracepoints like programs']
fe1910f9337bd46a9343967b547ccab26b4b2c6e,fe1910f9337bd46a9343967b547ccab26b4b2c6e,Cong Wang,cong.wang@bytedance.com,1724209664,Jakub Kicinski,kuba@kernel.org,1725041350,9818279ed57aba1c5e2ce6d018ea14f6d6620d50,98d4435efcbf37801a3246fb53856c4b934a2613,"tcp_bpf: fix return value of tcp_bpf_sendmsg()

When we cork messages in psock->cork"," the last message triggers the
flushing will result in sending a sk_msg larger than the current
message size. In this case","[' in tcp_bpf_send_verdict()', "" 'copied' becomes\nnegative at least in the following case:\n\n468         case __SK_DROP:\n469         default:\n470                 sk_msg_free_partial(sk"", ' msg', ' tosend);\n471                 sk_msg_apply_bytes(psock', ' tosend);\n472                 *copied -= (tosend + delta); // <==== HERE\n473                 return -EACCES;\n\nTherefore', "" it could lead to the following BUG with a proper value of\n'copied' (thanks to syzbot). We should not use negative 'copied' as a\nreturn value here.\n\n  ------------[ cut here ]------------\n  kernel BUG at net/socket.c:733!\n  Internal error: Oops - BUG: 00000000f2000800 [#1] PREEMPT SMP\n  Modules linked in:\n  CPU: 0 UID: 0 PID: 3265 Comm: syz-executor510 Not tainted 6.11.0-rc3-syzkaller-00060-gd07b43284ab3 #0\n  Hardware name: linux"", 'dummy-virt (DT)\n  pstate: 61400009 (nZCv daif +PAN -UAO -TCO +DIT -SSBS BTYPE=--)\n  pc : sock_sendmsg_nosec net/socket.c:733 [inline]\n  pc : sock_sendmsg_nosec net/socket.c:728 [inline]\n  pc : __sock_sendmsg+0x5c/0x60 net/socket.c:745\n  lr : sock_sendmsg_nosec net/socket.c:730 [inline]\n  lr : __sock_sendmsg+0x54/0x60 net/socket.c:745\n  sp : ffff800088ea3b30\n  x29: ffff800088ea3b30 x28: fbf00000062bc900 x27: 0000000000000000\n  x26: ffff800088ea3bc0 x25: ffff800088ea3bc0 x24: 0000000000000000\n  x23: f9f00000048dc000 x22: 0000000000000000 x21: ffff800088ea3d90\n  x20: f9f00000048dc000 x19: ffff800088ea3d90 x18: 0000000000000001\n  x17: 0000000000000000 x16: 0000000000000000 x15: 000000002002ffaf\n  x14: 0000000000000000 x13: 0000000000000000 x12: 0000000000000000\n  x11: 0000000000000000 x10: ffff8000815849c0 x9 : ffff8000815b49c0\n  x8 : 0000000000000000 x7 : 000000000000003f x6 : 0000000000000000\n  x5 : 00000000000007e0 x4 : fff07ffffd239000 x3 : fbf00000062bc900\n  x2 : 0000000000000000 x1 : 0000000000000000 x0 : 00000000fffffdef\n  Call trace:\n   sock_sendmsg_nosec net/socket.c:733 [inline]\n   __sock_sendmsg+0x5c/0x60 net/socket.c:745\n   ____sys_sendmsg+0x274/0x2ac net/socket.c:2597\n   ___sys_sendmsg+0xac/0x100 net/socket.c:2651\n   __sys_sendmsg+0x84/0xe0 net/socket.c:2680\n   __do_sys_sendmsg net/socket.c:2689 [inline]\n   __se_sys_sendmsg net/socket.c:2687 [inline]\n   __arm64_sys_sendmsg+0x24/0x30 net/socket.c:2687\n   __invoke_syscall arch/arm64/kernel/syscall.c:35 [inline]\n   invoke_syscall+0x48/0x110 arch/arm64/kernel/syscall.c:49\n   el0_svc_common.constprop.0+0x40/0xe0 arch/arm64/kernel/syscall.c:132\n   do_el0_svc+0x1c/0x28 arch/arm64/kernel/syscall.c:151\n   el0_svc+0x34/0xec arch/arm64/kernel/entry-common.c:712\n   el0t_64_sync_handler+0x100/0x12c arch/arm64/kernel/entry-common.c:730\n   el0t_64_sync+0x19c/0x1a0 arch/arm64/kernel/entry.S:598\n  Code: f9404463 d63f0060 3108441f 54fffe81 (d4210000)\n  ---[ end trace 0000000000000000 ]---\n\nFixes: 4f738adba30a (""bpf: create tcp_bpf_ulp allowing BPF to monitor socket TX/RX data"")\nReported-by: syzbot+58c03971700330ce14d8@syzkaller.appspotmail.com\nCc: Jakub Sitnicki <jakub@cloudflare.com>\nSigned-off-by: Cong Wang <cong.wang@bytedance.com>\nReviewed-by: John Fastabend <john.fastabend@gmail.com>\nAcked-by: Martin KaFai Lau <martin.lau@kernel.org>\nLink: https://patch.msgid.link/20240821030744.320934-1-xiyou.wangcong@gmail.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",Fix return value issue in tcp_bpf_sendmsg function when corking messages.,"tcp_bpf,fix,sendmsg",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['socket like programs']
b408473ea01b2e499d23503e2bf898416da9d7ac,b408473ea01b2e499d23503e2bf898416da9d7ac,Martin KaFai Lau,martin.lau@kernel.org,1724980934,Andrii Nakryiko,andrii@kernel.org,1725039287,70c517cb3976788548d24c9af4d968f311166ac6,872cf28b8df9c5c3a1e71a88ee750df7c2513971,"bpf: Fix a crash when btf_parse_base() returns an error pointer

The pointer returned by btf_parse_base could be an error pointer.
IS_ERR() check is needed before calling btf_free(base_btf).

Fixes: 8646db238997 (""libbpf","bpf: Share BTF relocate-related code with kernel"")
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Alan Maguire <alan.maguire@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240830012214.1646005-1-martin.lau@linux.dev
",[''],Fixes a crash caused by error pointer returned from btf_parse_base by adding IS_ERR() check before calling btf_free.,"crash,error pointer,btf_parse_base",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2aeeef906d5a526dc60cf4af92eda69836c39b1f,2aeeef906d5a526dc60cf4af92eda69836c39b1f,Jianbo Liu,jianbol@nvidia.com,1724382656,Jakub Kicinski,kuba@kernel.org,1724789497,1843c88b7e4389cc5f9c255a14746df945419649,907ed83a7583e8ffede88c5ac088392701a7d458,"bonding: change ipsec_lock from spin lock to mutex

In the cited commit", bond->ipsec_lock is added to protect ipsec_list,"['\nhence xdo_dev_state_add and xdo_dev_state_delete are called inside\nthis lock. As ipsec_lock is a spin lock and such xfrmdev ops may sleep', '\n""scheduling while atomic"" will be triggered when changing bond\'s\nactive slave.\n\n[  101.055189] BUG: scheduling while atomic: bash/902/0x00000200\n[  101.055726] Modules linked in:\n[  101.058211] CPU: 3 PID: 902 Comm: bash Not tainted 6.9.0-rc4+ #1\n[  101.058760] Hardware name:\n[  101.059434] Call Trace:\n[  101.059436]  <TASK>\n[  101.060873]  dump_stack_lvl+0x51/0x60\n[  101.061275]  __schedule_bug+0x4e/0x60\n[  101.061682]  __schedule+0x612/0x7c0\n[  101.062078]  ? __mod_timer+0x25c/0x370\n[  101.062486]  schedule+0x25/0xd0\n[  101.062845]  schedule_timeout+0x77/0xf0\n[  101.063265]  ? asm_common_interrupt+0x22/0x40\n[  101.063724]  ? __bpf_trace_itimer_state+0x10/0x10\n[  101.064215]  __wait_for_common+0x87/0x190\n[  101.064648]  ? usleep_range_state+0x90/0x90\n[  101.065091]  cmd_exec+0x437/0xb20 [mlx5_core]\n[  101.065569]  mlx5_cmd_do+0x1e/0x40 [mlx5_core]\n[  101.066051]  mlx5_cmd_exec+0x18/0x30 [mlx5_core]\n[  101.066552]  mlx5_crypto_create_dek_key+0xea/0x120 [mlx5_core]\n[  101.067163]  ? bonding_sysfs_store_option+0x4d/0x80 [bonding]\n[  101.067738]  ? kmalloc_trace+0x4d/0x350\n[  101.068156]  mlx5_ipsec_create_sa_ctx+0x33/0x100 [mlx5_core]\n[  101.068747]  mlx5e_xfrm_add_state+0x47b/0xaa0 [mlx5_core]\n[  101.069312]  bond_change_active_slave+0x392/0x900 [bonding]\n[  101.069868]  bond_option_active_slave_set+0x1c2/0x240 [bonding]\n[  101.070454]  __bond_opt_set+0xa6/0x430 [bonding]\n[  101.070935]  __bond_opt_set_notify+0x2f/0x90 [bonding]\n[  101.071453]  bond_opt_tryset_rtnl+0x72/0xb0 [bonding]\n[  101.071965]  bonding_sysfs_store_option+0x4d/0x80 [bonding]\n[  101.072567]  kernfs_fop_write_iter+0x10c/0x1a0\n[  101.073033]  vfs_write+0x2d8/0x400\n[  101.073416]  ? alloc_fd+0x48/0x180\n[  101.073798]  ksys_write+0x5f/0xe0\n[  101.074175]  do_syscall_64+0x52/0x110\n[  101.074576]  entry_SYSCALL_64_after_hwframe+0x4b/0x53\n\nAs bond_ipsec_add_sa_all and bond_ipsec_del_sa_all are only called\nfrom bond_change_active_slave', ' which requires holding the RTNL lock.\nAnd bond_ipsec_add_sa and bond_ipsec_del_sa are xfrm state\nxdo_dev_state_add and xdo_dev_state_delete APIs', "" which are in user\ncontext. So ipsec_lock doesn't have to be spin lock"", ' change it to\nmutex', ' and thus the above issue can be resolved.\n\nFixes: 9a5605505d9c (""bonding: Add struct bond_ipesc to manage SA"")\nSigned-off-by: Jianbo Liu <jianbol@nvidia.com>\nSigned-off-by: Tariq Toukan <tariqt@nvidia.com>\nReviewed-by: Hangbin Liu <liuhangbin@gmail.com>\nAcked-by: Jay Vosburgh <jv@jvosburgh.net>\nLink: https://patch.msgid.link/20240823031056.110999-4-jianbol@nvidia.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",The commit changes the ipsec_lock from a spin lock to a mutex for better protection of ipsec_list.,"ipsec_lock, mutex, bonding",It's other type of commit.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['other']
8baeef7616d5194045c5a6b97fd1246b87c55b13,8baeef7616d5194045c5a6b97fd1246b87c55b13,Somnath Kotur,somnath.kotur@broadcom.com,1724186055,Jakub Kicinski,kuba@kernel.org,1724287016,95a7a37cd3a4e43fc55f9add66c18ccc5dd2ec01,58652e2422a7407e77ee50fcaaf4bf1885de8753,"bnxt_en: Fix double DMA unmapping for XDP_REDIRECT

Remove the dma_unmap_page_attrs() call in the driver's XDP_REDIRECT
code path.  This should have been removed when we let the page pool
handle the DMA mapping.  This bug causes the warning:

WARNING: CPU: 7 PID: 59 at drivers/iommu/dma-iommu.c:1198 iommu_dma_unmap_page+0xd5/0x100
CPU: 7 PID: 59 Comm: ksoftirqd/7 Tainted: G        W          6.8.0-1010-gcp #11-Ubuntu
Hardware name: Dell Inc. PowerEdge R7525/0PYVT1"," BIOS 2.15.2 04/02/2024
RIP: 0010:iommu_dma_unmap_page+0xd5/0x100
Code: 89 ee 48 89 df e8 cb f2 69 ff 48 83 c4 08 5b 41 5c 41 5d 41 5e 41 5f 5d 31 c0 31 d2 31 c9 31 f6 31 ff 45 31 c0 e9 ab 17 71 00 <0f> 0b 48 83 c4 08 5b 41 5c 41 5d 41 5e 41 5f 5d 31 c0 31 d2 31 c9
RSP: 0018:ffffab1fc0597a48 EFLAGS: 00010246
RAX: 0000000000000000 RBX: ffff99ff838280c8 RCX: 0000000000000000
RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
RBP: ffffab1fc0597a78 R08: 0000000000000002 R09: ffffab1fc0597c1c
R10: ffffab1fc0597cd3 R11: ffff99ffe375acd8 R12: 00000000e65b9000
R13: 0000000000000050 R14: 0000000000001000 R15: 0000000000000002
FS:  0000000000000000(0000) GS:ffff9a06efb80000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 0000565c34c37210 CR3: 00000005c7e3e000 CR4: 0000000000350ef0
? show_regs+0x6d/0x80
? __warn+0x89/0x150
? iommu_dma_unmap_page+0xd5/0x100
? report_bug+0x16a/0x190
? handle_bug+0x51/0xa0
? exc_invalid_op+0x18/0x80
? iommu_dma_unmap_page+0xd5/0x100
? iommu_dma_unmap_page+0x35/0x100
dma_unmap_page_attrs+0x55/0x220
? bpf_prog_4d7e87c0d30db711_xdp_dispatcher+0x64/0x9f
bnxt_rx_xdp+0x237/0x520 [bnxt_en]
bnxt_rx_pkt+0x640/0xdd0 [bnxt_en]
__bnxt_poll_work+0x1a1/0x3d0 [bnxt_en]
bnxt_poll+0xaa/0x1e0 [bnxt_en]
__napi_poll+0x33/0x1e0
net_rx_action+0x18a/0x2f0

Fixes: 578fcfd26e2a (""bnxt_en: Let the page pool manage the DMA mapping"")
Reviewed-by: Andy Gospodarek <andrew.gospodarek@broadcom.com>
Reviewed-by: Kalesh AP <kalesh-anakkur.purayil@broadcom.com>
Signed-off-by: Somnath Kotur <somnath.kotur@broadcom.com>
Signed-off-by: Michael Chan <michael.chan@broadcom.com>
Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
Link: https://patch.msgid.link/20240820203415.168178-1-michael.chan@broadcom.com
Signed-off-by: Jakub Kicinski <kuba@kernel.org>
",[''],Fix to remove unnecessary DMA unmapping in bnxt_en driver for XDP_REDIRECT.,"bnxt_en,DMA unmapping,XDP_REDIRECT",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.","It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.",['xdp like programs']
a069a22f391019e84390f4e8c1a9c531ba4fb28f,a069a22f391019e84390f4e8c1a9c531ba4fb28f,Masami Hiramatsu (Google),mhiramat@kernel.org,1723985283,Steven Rostedt (Google),rostedt@goodmis.org,1724262599,71783f4f8b8d11ba0ec2af9f7cea53511253b3c7,47ac09b91befbb6a235ab620c32af719f8208399,"tracing: fgraph: Fix to add new fgraph_ops to array after ftrace_startup_subops()

Since the register_ftrace_graph() assigns a new fgraph_ops to
fgraph_array before registring it by ftrace_startup_subops()"," the new
fgraph_ops can be used in function_graph_enter().

In most cases","["" it is still OK because those fgraph_ops's hashtable is\nalready initialized by ftrace_set_filter*() etc.\n\nBut if a user registers a new fgraph_ops which does not initialize the\nhash list"", "" ftrace_ops_test() in function_graph_enter() causes a NULL\npointer dereference BUG because fgraph_ops->ops.func_hash is NULL.\n\nThis can be reproduced by the below commands because function profiler's\nfgraph_ops does not initialize the hash list;\n\n # cd /sys/kernel/tracing\n # echo function_graph > current_tracer\n # echo 1 > function_profile_enabled\n\nTo fix this problem"", ' add a new fgraph_ops to fgraph_array after\nftrace_startup_subops(). Thus', ' until the new fgraph_ops is initialized', '\nwe will see fgraph_stub on the corresponding fgraph_array entry.\n\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nCc: Florent Revest <revest@chromium.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: bpf <bpf@vger.kernel.org>\nCc: Sven Schnelle <svens@linux.ibm.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Arnaldo Carvalho de Melo <acme@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Alan Maguire <alan.maguire@oracle.com>\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Guo Ren <guoren@kernel.org>\nLink: https://lore.kernel.org/172398528350.293426.8347220120333730248.stgit@devnote2\nFixes: c132be2c4fcc (""function_graph: Have the instances use their own ftrace_ops for filtering"")\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>\n', '']",Fix the order of operations when adding new fgraph ops to the array for ftrace graph functionality.,"fgraph_ops,ftrace,tracing",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
f8cde9805981c50d0c029063dc7d82821806fc44,f8cde9805981c50d0c029063dc7d82821806fc44,Nikolay Aleksandrov,razor@blackwall.org,1723808892,Paolo Abeni,pabeni@redhat.com,1724160569,7a9ee1dc199ede7f15683dbaa13d1c6967435e27,95c90e4ad89d493a7a14fa200082e466e2548f9d,"bonding: fix xfrm real_dev null pointer dereference

We shouldn't set real_dev to NULL because packets can be in transit and
xfrm might call xdo_dev_offload_ok() in parallel. All callbacks assume
real_dev is set.

 Example trace:
 kernel: BUG: unable to handle page fault for address: 0000000000001030
 kernel: bond0: (slave eni0np1): making interface the new active one
 kernel: #PF: supervisor write access in kernel mode
 kernel: #PF: error_code(0x0002) - not-present page
 kernel: PGD 0 P4D 0
 kernel: Oops: 0002 [#1] PREEMPT SMP
 kernel: CPU: 4 PID: 2237 Comm: ping Not tainted 6.7.7+ #12
 kernel: Hardware name: QEMU Standard PC (Q35 + ICH9", 2009),"[' BIOS 1.16.3-2.fc40 04/01/2014\n kernel: RIP: 0010:nsim_ipsec_offload_ok+0xc/0x20 [netdevsim]\n kernel: bond0: (slave eni0np1): bond_ipsec_add_sa_all: failed to add SA\n kernel: Code: e0 0f 0b 48 83 7f 38 00 74 de 0f 0b 48 8b 47 08 48 8b 37 48 8b 78 40 e9 b2 e5 9a d7 66 90 0f 1f 44 00 00 48 8b 86 80 02 00 00 <83> 80 30 10 00 00 01 b8 01 00 00 00 c3 0f 1f 80 00 00 00 00 0f 1f\n kernel: bond0: (slave eni0np1): making interface the new active one\n kernel: RSP: 0018:ffffabde81553b98 EFLAGS: 00010246\n kernel: bond0: (slave eni0np1): bond_ipsec_add_sa_all: failed to add SA\n kernel:\n kernel: RAX: 0000000000000000 RBX: ffff9eb404e74900 RCX: ffff9eb403d97c60\n kernel: RDX: ffffffffc090de10 RSI: ffff9eb404e74900 RDI: ffff9eb3c5de9e00\n kernel: RBP: ffff9eb3c0a42000 R08: 0000000000000010 R09: 0000000000000014\n kernel: R10: 7974203030303030 R11: 3030303030303030 R12: 0000000000000000\n kernel: R13: ffff9eb3c5de9e00 R14: ffffabde81553cc8 R15: ffff9eb404c53000\n kernel: FS:  00007f2a77a3ad00(0000) GS:ffff9eb43bd00000(0000) knlGS:0000000000000000\n kernel: CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n kernel: CR2: 0000000000001030 CR3: 00000001122ab000 CR4: 0000000000350ef0\n kernel: bond0: (slave eni0np1): making interface the new active one\n kernel: Call Trace:\n kernel:  <TASK>\n kernel:  ? __die+0x1f/0x60\n kernel: bond0: (slave eni0np1): bond_ipsec_add_sa_all: failed to add SA\n kernel:  ? page_fault_oops+0x142/0x4c0\n kernel:  ? do_user_addr_fault+0x65/0x670\n kernel:  ? kvm_read_and_reset_apf_flags+0x3b/0x50\n kernel: bond0: (slave eni0np1): making interface the new active one\n kernel:  ? exc_page_fault+0x7b/0x180\n kernel:  ? asm_exc_page_fault+0x22/0x30\n kernel:  ? nsim_bpf_uninit+0x50/0x50 [netdevsim]\n kernel: bond0: (slave eni0np1): bond_ipsec_add_sa_all: failed to add SA\n kernel:  ? nsim_ipsec_offload_ok+0xc/0x20 [netdevsim]\n kernel: bond0: (slave eni0np1): making interface the new active one\n kernel:  bond_ipsec_offload_ok+0x7b/0x90 [bonding]\n kernel:  xfrm_output+0x61/0x3b0\n kernel: bond0: (slave eni0np1): bond_ipsec_add_sa_all: failed to add SA\n kernel:  ip_push_pending_frames+0x56/0x80\n\nFixes: 18cb261afd7b (""bonding: support hardware encryption offload to slaves"")\nSigned-off-by: Nikolay Aleksandrov <razor@blackwall.org>\nReviewed-by: Hangbin Liu <liuhangbin@gmail.com>\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>\n\n', '']",Fixes a null pointer dereference in bonding related to xfrm's real_dev setting during packet transit.,"bonding,null-pointer,xfrm",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
69139d2919dd4aa9a553c8245e7c63e82613e3fc,69139d2919dd4aa9a553c8245e7c63e82613e3fc,Cong Wang,cong.wang@bytedance.com,1723429313,Paolo Abeni,pabeni@redhat.com,1723716424,072eafbdd97a3d7ed4981ac2f89eef90974a8582,b2ca1661c7db9693095cee7991c55d67c3b5d346,"vsock: fix recursive ->recvmsg calls

After a vsock socket has been added to a BPF sockmap"," its prot->recvmsg
has been replaced with vsock_bpf_recvmsg(). Thus the following
recursiion could happen:

vsock_bpf_recvmsg()
 -> __vsock_recvmsg()
  -> vsock_connectible_recvmsg()
   -> prot->recvmsg()
    -> vsock_bpf_recvmsg() again

We need to fix it by calling the original ->recvmsg() without any BPF
sockmap logic in __vsock_recvmsg().

Fixes: 634f1a7110b4 (""vsock: support sockmap"")
Reported-by: syzbot+bdb4bd87b5e22058e2a4@syzkaller.appspotmail.com
Tested-by: syzbot+bdb4bd87b5e22058e2a4@syzkaller.appspotmail.com
Cc: Bobby Eshleman <bobby.eshleman@bytedance.com>
Cc: Michael S. Tsirkin <mst@redhat.com>
Cc: Stefano Garzarella <sgarzare@redhat.com>
Signed-off-by: Cong Wang <cong.wang@bytedance.com>
Acked-by: Michael S. Tsirkin <mst@redhat.com>
Link: https://patch.msgid.link/20240812022153.86512-1-xiyou.wangcong@gmail.com
Signed-off-by: Paolo Abeni <pabeni@redhat.com>

",[''],Fixes recursive calls in vsock recvmsg function after integration with BPF sockmap.,"vsock,BPF,recvmsg",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The syscall interface,"['socket like programs', 'tracepoints like programs']"
02f8ca3d49055788f112c17052a3da65feb01835,02f8ca3d49055788f112c17052a3da65feb01835,Linus Torvalds,torvalds@linux-foundation.org,1723651044,Linus Torvalds,torvalds@linux-foundation.org,1723651044,2a6deda6c8f5faac94fe4d0cc15ae13d972e8acd,6b0f8db921abf0520081d779876d3a41069dab95 100bff23818eb61751ed05d64a7df36ce9728a4d,"Merge tag 'bpf-6.11-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Pull bpf fixes from Alexei Starovoitov:

 - Fix bpftrace regression from Kyle Huey.

   Tracing bpf prog was called with perf_event input arguments causing
   bpftrace produce garbage output.

 - Fix verifier crash in stacksafe() from Yonghong Song.

   Daniel Hodges reported verifier crash when playing with sched-ext.
   The stack depth in the known verifier state was larger than stack
   depth in being explored state causing out-of-bounds access.

 - Fix update of freplace prog in prog_array from Leon Hwang.

   freplace prog type wasn't recognized correctly.

* tag 'bpf-6.11-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:
  perf/bpf: Don't call bpf_overflow_handler() for tracing events
  selftests/bpf: Add a test to verify previous stacksafe() fix
  bpf: Fix a kernel verifier crash in stacksafe()
  bpf: Fix updating attached freplace prog in prog_array map
",,"The commit merges bpf fixes including regression fixes, verifier crash fix, and update issues for the freplace prog in prog_array.","bpf, regression, verifier",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
100bff23818eb61751ed05d64a7df36ce9728a4d,100bff23818eb61751ed05d64a7df36ce9728a4d,Kyle Huey,me@kylehuey.com,1723562247,Alexei Starovoitov,ast@kernel.org,1723569928,0fd72c4af5e3f07407caffd2003617df180cdcbe,662c3e2db00f92e50c26e9dc4fe47c52223d9982,"perf/bpf: Don't call bpf_overflow_handler() for tracing events

The regressing commit is new in 6.10. It assumed that anytime event->prog
is set bpf_overflow_handler() should be invoked to execute the attached bpf
program. This assumption is false for tracing events"," and as a result the
regressing commit broke bpftrace by invoking the bpf handler with garbage
inputs on overflow.

Prior to the regression the overflow handlers formed a chain (of length 0","['\n1', ' or 2) and perf_event_set_bpf_handler() (the !tracing case) added\nbpf_overflow_handler() to that chain', ' while perf_event_attach_bpf_prog()\n(the tracing case) did not. Both set event->prog. The chain of overflow\nhandlers was replaced by a single overflow handler slot and a fixed call to\nbpf_overflow_handler() when appropriate. This modifies the condition there\nto check event->prog->type == BPF_PROG_TYPE_PERF_EVENT', ' restoring the\nprevious behavior and fixing bpftrace.\n\nSigned-off-by: Kyle Huey <khuey@kylehuey.com>\nSuggested-by: Andrii Nakryiko <andrii.nakryiko@gmail.com>\nReported-by: Joe Damato <jdamato@fastly.com>\nCloses: https://lore.kernel.org/lkml/ZpFfocvyF3KHaSzF@LQ3V64L9R2/\nFixes: f11f10bfa1ca (""perf/bpf: Call BPF handler directly', ' not through overflow machinery"")\nCc: stable@vger.kernel.org\nTested-by: Joe Damato <jdamato@fastly.com> # bpftrace\nAcked-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20240813151727.28797-1-jdamato@fastly.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fixes incorrect invocation of bpf_overflow_handler() for tracing events causing regression in bpftrace.,"perf,BPF,tracing",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.","['tracepoints like programs', 'kprobe/uprobe/ftrace like programs']"
6252690f7e1b173b86a4c27dfc046b351ab423e7,6252690f7e1b173b86a4c27dfc046b351ab423e7,Naohiro Aota,naohiro.aota@wdc.com,1723190062,David Sterba,dsterba@suse.com,1723556217,11f04900c6a0070aa13a5cf0515c58304e8de060,46a6e10a1ab16cc71d4a3cab73e79aabadd6b8ea,"btrfs: fix invalid mapping of extent xarray state

In __extent_writepage_io()"," we call btrfs_set_range_writeback() ->
folio_start_writeback()","[' which clears PAGECACHE_TAG_DIRTY mark from the\nmapping xarray if the folio is not dirty. This worked fine before commit\n97713b1a2ced (""btrfs: do not clear page dirty inside\nextent_write_locked_range()"").\n\nAfter the commit', ' however', ' the folio is still dirty at this point', ' so the\nmapping DIRTY tag is not cleared anymore. Then', ' __extent_writepage_io()\ncalls btrfs_folio_clear_dirty() to clear the folio\'s dirty flag. That\nresults in the page being unlocked with a ""strange"" state. The page is not\nPageDirty', "" but the mapping tag is set as PAGECACHE_TAG_DIRTY.\n\nThis strange state looks like causing a hang with a call trace below when\nrunning fstests generic/091 on a null_blk device. It is waiting for a folio\nlock.\n\nWhile I don't have an exact relation between this hang and the strange\nstate"", ' fixing the state also fixes the hang. And', ' that state is worth\nfixing anyway.\n\nThis commit reorders btrfs_folio_clear_dirty() and\nbtrfs_set_range_writeback() in __extent_writepage_io()', ' so that the\nPAGECACHE_TAG_DIRTY tag is properly removed from the xarray.\n\n  [464.274] task:fsx             state:D stack:0     pid:3034  tgid:3034  ppid:2853   flags:0x00004002\n  [464.286] Call Trace:\n  [464.291]  <TASK>\n  [464.295]  __schedule+0x10ed/0x6260\n  [464.301]  ? __pfx___blk_flush_plug+0x10/0x10\n  [464.308]  ? __submit_bio+0x37c/0x450\n  [464.314]  ? __pfx___schedule+0x10/0x10\n  [464.321]  ? lock_release+0x567/0x790\n  [464.327]  ? __pfx_lock_acquire+0x10/0x10\n  [464.334]  ? __pfx_lock_release+0x10/0x10\n  [464.340]  ? __pfx_lock_acquire+0x10/0x10\n  [464.347]  ? __pfx_lock_release+0x10/0x10\n  [464.353]  ? do_raw_spin_lock+0x12e/0x270\n  [464.360]  schedule+0xdf/0x3b0\n  [464.365]  io_schedule+0x8f/0xf0\n  [464.371]  folio_wait_bit_common+0x2ca/0x6d0\n  [464.378]  ? folio_wait_bit_common+0x1cc/0x6d0\n  [464.385]  ? __pfx_folio_wait_bit_common+0x10/0x10\n  [464.392]  ? __pfx_filemap_get_folios_tag+0x10/0x10\n  [464.400]  ? __pfx_wake_page_function+0x10/0x10\n  [464.407]  ? __pfx___might_resched+0x10/0x10\n  [464.414]  ? do_raw_spin_unlock+0x58/0x1f0\n  [464.420]  extent_write_cache_pages+0xe49/0x1620 [btrfs]\n  [464.428]  ? lock_acquire+0x435/0x500\n  [464.435]  ? __pfx_extent_write_cache_pages+0x10/0x10 [btrfs]\n  [464.443]  ? btrfs_do_write_iter+0x493/0x640 [btrfs]\n  [464.451]  ? orc_find.part.0+0x1d4/0x380\n  [464.457]  ? __pfx_lock_release+0x10/0x10\n  [464.464]  ? __pfx_lock_release+0x10/0x10\n  [464.471]  ? btrfs_do_write_iter+0x493/0x640 [btrfs]\n  [464.478]  btrfs_writepages+0x1cc/0x460 [btrfs]\n  [464.485]  ? __pfx_btrfs_writepages+0x10/0x10 [btrfs]\n  [464.493]  ? is_bpf_text_address+0x6e/0x100\n  [464.500]  ? kernel_text_address+0x145/0x160\n  [464.507]  ? unwind_get_return_address+0x5e/0xa0\n  [464.514]  ? arch_stack_walk+0xac/0x100\n  [464.521]  do_writepages+0x176/0x780\n  [464.527]  ? lock_release+0x567/0x790\n  [464.533]  ? __pfx_do_writepages+0x10/0x10\n  [464.540]  ? __pfx_lock_acquire+0x10/0x10\n  [464.546]  ? __pfx_stack_trace_save+0x10/0x10\n  [464.553]  ? do_raw_spin_lock+0x12e/0x270\n  [464.560]  ? do_raw_spin_unlock+0x58/0x1f0\n  [464.566]  ? _raw_spin_unlock+0x23/0x40\n  [464.573]  ? wbc_attach_and_unlock_inode+0x3da/0x7d0\n  [464.580]  filemap_fdatawrite_wbc+0x113/0x180\n  [464.587]  ? prepare_pages.constprop.0+0x13c/0x5c0 [btrfs]\n  [464.596]  __filemap_fdatawrite_range+0xaf/0xf0\n  [464.603]  ? __pfx___filemap_fdatawrite_range+0x10/0x10\n  [464.611]  ? trace_irq_enable.constprop.0+0xce/0x110\n  [464.618]  ? kasan_quarantine_put+0xd7/0x1e0\n  [464.625]  btrfs_start_ordered_extent+0x46f/0x570 [btrfs]\n  [464.633]  ? __pfx_btrfs_start_ordered_extent+0x10/0x10 [btrfs]\n  [464.642]  ? __clear_extent_bit+0x2c0/0x9d0 [btrfs]\n  [464.650]  btrfs_lock_and_flush_ordered_range+0xc6/0x180 [btrfs]\n  [464.659]  ? __pfx_btrfs_lock_and_flush_ordered_range+0x10/0x10 [btrfs]\n  [464.669]  btrfs_read_folio+0x12a/0x1d0 [btrfs]\n  [464.676]  ? __pfx_btrfs_read_folio+0x10/0x10 [btrfs]\n  [464.684]  ? __pfx_filemap_add_folio+0x10/0x10\n  [464.691]  ? __pfx___might_resched+0x10/0x10\n  [464.698]  ? __filemap_get_folio+0x1c5/0x450\n  [464.705]  prepare_uptodate_page+0x12e/0x4d0 [btrfs]\n  [464.713]  prepare_pages.constprop.0+0x13c/0x5c0 [btrfs]\n  [464.721]  ? fault_in_iov_iter_readable+0xd2/0x240\n  [464.729]  btrfs_buffered_write+0x5bd/0x12f0 [btrfs]\n  [464.737]  ? __pfx_btrfs_buffered_write+0x10/0x10 [btrfs]\n  [464.745]  ? __pfx_lock_release+0x10/0x10\n  [464.752]  ? generic_write_checks+0x275/0x400\n  [464.759]  ? down_write+0x118/0x1f0\n  [464.765]  ? up_write+0x19b/0x500\n  [464.770]  btrfs_direct_write+0x731/0xba0 [btrfs]\n  [464.778]  ? __pfx_btrfs_direct_write+0x10/0x10 [btrfs]\n  [464.785]  ? __pfx___might_resched+0x10/0x10\n  [464.792]  ? lock_acquire+0x435/0x500\n  [464.798]  ? lock_acquire+0x435/0x500\n  [464.804]  btrfs_do_write_iter+0x494/0x640 [btrfs]\n  [464.811]  ? __pfx_btrfs_do_write_iter+0x10/0x10 [btrfs]\n  [464.819]  ? __pfx___might_resched+0x10/0x10\n  [464.825]  ? rw_verify_area+0x6d/0x590\n  [464.831]  vfs_write+0x5d7/0xf50\n  [464.837]  ? __might_fault+0x9d/0x120\n  [464.843]  ? __pfx_vfs_write+0x10/0x10\n  [464.849]  ? btrfs_file_llseek+0xb1/0xfb0 [btrfs]\n  [464.856]  ? lock_release+0x567/0x790\n  [464.862]  ksys_write+0xfb/0x1d0\n  [464.867]  ? __pfx_ksys_write+0x10/0x10\n  [464.873]  ? _raw_spin_unlock+0x23/0x40\n  [464.879]  ? btrfs_getattr+0x4af/0x670 [btrfs]\n  [464.886]  ? vfs_getattr_nosec+0x79/0x340\n  [464.892]  do_syscall_64+0x95/0x180\n  [464.898]  ? __do_sys_newfstat+0xde/0xf0\n  [464.904]  ? __pfx___do_sys_newfstat+0x10/0x10\n  [464.911]  ? trace_irq_enable.constprop.0+0xce/0x110\n  [464.918]  ? syscall_exit_to_user_mode+0xac/0x2a0\n  [464.925]  ? do_syscall_64+0xa1/0x180\n  [464.931]  ? trace_irq_enable.constprop.0+0xce/0x110\n  [464.939]  ? trace_irq_enable.constprop.0+0xce/0x110\n  [464.946]  ? syscall_exit_to_user_mode+0xac/0x2a0\n  [464.953]  ? btrfs_file_llseek+0xb1/0xfb0 [btrfs]\n  [464.960]  ? do_syscall_64+0xa1/0x180\n  [464.966]  ? btrfs_file_llseek+0xb1/0xfb0 [btrfs]\n  [464.973]  ? trace_irq_enable.constprop.0+0xce/0x110\n  [464.980]  ? syscall_exit_to_user_mode+0xac/0x2a0\n  [464.987]  ? __pfx_btrfs_file_llseek+0x10/0x10 [btrfs]\n  [464.995]  ? trace_irq_enable.constprop.0+0xce/0x110\n  [465.002]  ? __pfx_btrfs_file_llseek+0x10/0x10 [btrfs]\n  [465.010]  ? do_syscall_64+0xa1/0x180\n  [465.016]  ? lock_release+0x567/0x790\n  [465.022]  ? __pfx_lock_acquire+0x10/0x10\n  [465.028]  ? __pfx_lock_release+0x10/0x10\n  [465.034]  ? trace_irq_enable.constprop.0+0xce/0x110\n  [465.042]  ? syscall_exit_to_user_mode+0xac/0x2a0\n  [465.049]  ? do_syscall_64+0xa1/0x180\n  [465.055]  ? syscall_exit_to_user_mode+0xac/0x2a0\n  [465.062]  ? do_syscall_64+0xa1/0x180\n  [465.068]  ? syscall_exit_to_user_mode+0xac/0x2a0\n  [465.075]  ? do_syscall_64+0xa1/0x180\n  [465.081]  ? clear_bhb_loop+0x25/0x80\n  [465.087]  ? clear_bhb_loop+0x25/0x80\n  [465.093]  ? clear_bhb_loop+0x25/0x80\n  [465.099]  entry_SYSCALL_64_after_hwframe+0x76/0x7e\n  [465.106] RIP: 0033:0x7f093b8ee784\n  [465.111] RSP: 002b:00007ffc29d31b28 EFLAGS: 00000202 ORIG_RAX: 0000000000000001\n  [465.122] RAX: ffffffffffffffda RBX: 0000000000006000 RCX: 00007f093b8ee784\n  [465.131] RDX: 000000000001de00 RSI: 00007f093b6ed200 RDI: 0000000000000003\n  [465.141] RBP: 000000000001de00 R08: 0000000000006000 R09: 0000000000000000\n  [465.150] R10: 0000000000023e00 R11: 0000000000000202 R12: 0000000000006000\n  [465.160] R13: 0000000000023e00 R14: 0000000000023e00 R15: 0000000000000001\n  [465.170]  </TASK>\n  [465.174] INFO: lockdep is turned off.\n\nReported-by: Shinichiro Kawasaki <shinichiro.kawasaki@wdc.com>\nFixes: 97713b1a2ced (""btrfs: do not clear page dirty inside extent_write_locked_range()"")\nReviewed-by: Qu Wenruo <wqu@suse.com>\nSigned-off-by: Naohiro Aota <naohiro.aota@wdc.com>\nSigned-off-by: David Sterba <dsterba@suse.com>\n', '']",Fixes invalid extent xarray state mapping in btrfs during writepage IO operation.,"btrfs,fix,xarray",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
662c3e2db00f92e50c26e9dc4fe47c52223d9982,662c3e2db00f92e50c26e9dc4fe47c52223d9982,Yonghong Song,yonghong.song@linux.dev,1723499332,Alexei Starovoitov,ast@kernel.org,1723511733,a60298d4cfa5f0ab4f10e081fc2fb31f28655b20,bed2eb964c70b780fb55925892a74f26cb590b25,"selftests/bpf: Add a test to verify previous stacksafe() fix

A selftest is added such that without the previous patch","
a crash can happen. With the previous patch","[' the test can\nrun successfully. The new test is written in a way which\nmimics original crash case:\n  main_prog\n    static_prog_1\n      static_prog_2\nwhere static_prog_1 has different paths to static_prog_2\nand some path has stack allocated and some other path\ndoes not. A stacksafe() checking in static_prog_2()\ntriggered the crash.\n\nSigned-off-by: Yonghong Song <yonghong.song@linux.dev>\nLink: https://lore.kernel.org/r/20240812214852.214037-1-yonghong.song@linux.dev\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Add selftest to verify the previous stacksafe() bug fix in bpf.,"selftest, stacksafe, verify",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
bed2eb964c70b780fb55925892a74f26cb590b25,bed2eb964c70b780fb55925892a74f26cb590b25,Yonghong Song,yonghong.song@linux.dev,1723499327,Alexei Starovoitov,ast@kernel.org,1723511388,6b3b06cd087a165a9985ba6a859f43b7684291f7,fdad456cbcca739bae1849549c7a999857c56f88,"bpf: Fix a kernel verifier crash in stacksafe()

Daniel Hodges reported a kernel verifier crash when playing with sched-ext.
Further investigation shows that the crash is due to invalid memory access
in stacksafe(). More specifically"," it is the following code:

    if (exact != NOT_EXACT &&
        old->stack[spi].slot_type[i % BPF_REG_SIZE] !=
        cur->stack[spi].slot_type[i % BPF_REG_SIZE])
            return false;

The 'i' iterates old->allocated_stack.
If cur->allocated_stack < old->allocated_stack the out-of-bound
access will happen.

To fix the issue add 'i >= cur->allocated_stack' check such that if
the condition is true","[' stacksafe() should fail. Otherwise', '\ncur->stack[spi].slot_type[i % BPF_REG_SIZE] memory access is legal.\n\nFixes: 2793a8b015f7 (""bpf: exact states comparison for iterator convergence checks"")\nCc: Eduard Zingerman <eddyz87@gmail.com>\nReported-by: Daniel Hodges <hodgesd@meta.com>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nSigned-off-by: Yonghong Song <yonghong.song@linux.dev>\nLink: https://lore.kernel.org/r/20240812214847.213612-1-yonghong.song@linux.dev\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fixes a kernel verifier crash caused by invalid memory access in the stacksafe function.,"kernel verifier, stacksafe, crash",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,['scheduler like programs']
fdad456cbcca739bae1849549c7a999857c56f88,fdad456cbcca739bae1849549c7a999857c56f88,Leon Hwang,leon.hwang@linux.dev,1722167171,Alexei Starovoitov,ast@kernel.org,1723501549,f6184a52a06eae30720b7bb1acc88997536c39c0,d74da846046aeec9333e802f5918bd3261fb5509,"bpf: Fix updating attached freplace prog in prog_array map

The commit f7866c358733 (""bpf: Fix null pointer dereference in resolve_prog_type() for BPF_PROG_TYPE_EXT"")
fixed a NULL pointer dereference panic"," but didn't fix the issue that
fails to update attached freplace prog to prog_array map.

Since commit 1c123c567fb1 (""bpf: Resolve fext program type when checking map compatibility"")","['\nfreplace prog and its target prog are able to tail call each other.\n\nAnd the commit 3aac1ead5eb6 (""bpf: Move prog->aux->linked_prog and trampoline into bpf_link on attach"")\nsets prog->aux->dst_prog as NULL after attaching freplace prog to its\ntarget prog.\n\nAfter loading freplace the prog_array\'s owner type is BPF_PROG_TYPE_SCHED_CLS.\nThen', ' after attaching freplace its prog->aux->dst_prog is NULL.\nThen', ' while updating freplace in prog_array the bpf_prog_map_compatible()\nincorrectly returns false because resolve_prog_type() returns\nBPF_PROG_TYPE_EXT instead of BPF_PROG_TYPE_SCHED_CLS.\nAfter this patch the resolve_prog_type() returns BPF_PROG_TYPE_SCHED_CLS\nand update to prog_array can succeed.\n\nFixes: f7866c358733 (""bpf: Fix null pointer dereference in resolve_prog_type() for BPF_PROG_TYPE_EXT"")\nCc: Toke Høiland-Jørgensen <toke@redhat.com>\nCc: Martin KaFai Lau <martin.lau@kernel.org>\nAcked-by: Yonghong Song <yonghong.song@linux.dev>\nSigned-off-by: Leon Hwang <leon.hwang@linux.dev>\nLink: https://lore.kernel.org/r/20240728114612.48486-2-leon.hwang@linux.dev\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fix issue with updating attached freplace prog in prog_array map.,"bpf, fix, prog_array",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
1fc2021941241bf32728a198bc0a7f38669e44a5,1fc2021941241bf32728a198bc0a7f38669e44a5,David S. Miller,davem@davemloft.net,1723459616,David S. Miller,davem@davemloft.net,1723459616,a51e036b9ac7d7908303f05b5ec5900bd449f66f,9ff2f816e2aa65ca9a1cdf0954842f8173c0f48d de7a670f8defe4ed2115552ad23dea0f432f7be4,"Merge branch 'vsc73xx-fix-mdio-and-phy'

Pawel Dembicki says:

====================
net: dsa: vsc73xx: fix MDIO bus access and PHY opera

This series are extracted patches from net-next series [0].

The VSC73xx driver has issues with PHY configuration. This patch series
fixes most of them.

The first patch synchronizes the register configuration routine with the
datasheet recommendations.

Patches 2-3 restore proper communication on the MDIO bus. Currently","
the write value isn't sent to the MDIO register","[' and without a busy check', '\ncommunication with the PHY can be interrupted. This causes the PHY to\nreceive improper configuration and autonegotiation could fail.\n\nThe fourth patch removes the PHY reset blockade', ' as it is no longer\nrequired.\n\nAfter fixing the MDIO operations', ' autonegotiation became possible.\nThe last patch removes the blockade', ' which became unnecessary after\nthe MDIO operations fix.\n\n[0] https://patchwork.kernel.org/project/netdevbpf/list/?series=874739&state=%2A&archive=both\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>\n', '']",Fixes issues in the VSC73xx driver for MDIO bus access and PHY operations.,"VSC73xx, MDIO, PHY",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
146430a0c26eb7b515abb04664e1a516078ec5c2,146430a0c26eb7b515abb04664e1a516078ec5c2,Linus Torvalds,torvalds@linux-foundation.org,1723221826,Linus Torvalds,torvalds@linux-foundation.org,1723221826,fb2e101fc6b771bf5d7eb38530d9debb2b62cc50,b7768c4881d1b69bd95dad149d3b558c8e7de91a 8c8acb8f26cbde665b233dd1b9bbcbb9b86822dc,"Merge tag 'probes-fixes-v6.11-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace

Pull kprobe fixes from Masami Hiramatsu:

 - Fix misusing str_has_prefix() parameter order to check symbol prefix
   correctly

 - bpf: remove unused declaring of bpf_kprobe_override

* tag 'probes-fixes-v6.11-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace:
  kprobes: Fix to check symbol prefixes correctly
  bpf: kprobe: remove unused declaring of bpf_kprobe_override
",,"Merge fixes for kprobes, including correcting symbol prefix checks and removing unused bpf_kprobe_override declaration.","kprobes, symbol prefix, bpf_kprobe_override",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['kprobe/uprobe/ftrace like programs']
0e8b53979ac86eddb3fd76264025a70071a25574,0e8b53979ac86eddb3fd76264025a70071a25574,Menglong Dong,menglong8.dong@gmail.com,1722834081,Masami Hiramatsu (Google),mhiramat@kernel.org,1722834081,09f41d8841d2e4e3e39435726b7d26c74c05dc6c,de9c2c66ad8e787abec7c9d7eff4f8c3cdd28aed,"bpf: kprobe: remove unused declaring of bpf_kprobe_override

After the commit 66665ad2f102 (""tracing/kprobe: bpf: Compare instruction
pointer with original one"")"," ""bpf_kprobe_override"" is not used anywhere
anymore","[' and we can remove it now.\n\nLink: https://lore.kernel.org/all/20240710085939.11520-1-dongml2@chinatelecom.cn/\n\nFixes: 66665ad2f102 (""tracing/kprobe: bpf: Compare instruction pointer with original one"")\nSigned-off-by: Menglong Dong <dongml2@chinatelecom.cn>\nAcked-by: Jiri Olsa <jolsa@kernel.org>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\n', '']",The commit removes the unused declaration of bpf_kprobe_override after a related change.,"kprobe, unused, bpf",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['kprobe/uprobe/ftrace like programs']
183d46ff422ef9f3d755b6808ef3faa6d009ba3a,183d46ff422ef9f3d755b6808ef3faa6d009ba3a,Linus Torvalds,torvalds@linux-foundation.org,1722530529,Linus Torvalds,torvalds@linux-foundation.org,1722530529,8405b88ef447994f3eafd40e8e3aa5f47d3fa33f,21b136cc63d2a9ddd60d4699552b69c214b32964 25010bfdf8bbedc64c5c04d18f846412f5367d26,"Merge tag 'net-6.11-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 ""Including fixes from wireless", bleutooth,"[' BPF and netfilter.\n\n  Current release - regressions:\n\n   - core: drop bad gso csum_start and offset in virtio_net_hdr\n\n   - wifi: mt76: fix null pointer access in mt792x_mac_link_bss_remove\n\n   - eth: tun: add missing bpf_net_ctx_clear() in do_xdp_generic()\n\n   - phy: aquantia: only poll GLOBAL_CFG regs on aqr113', ' aqr113c and\n     aqr115c\n\n  Current release - new code bugs:\n\n   - smc: prevent UAF in inet_create()\n\n   - bluetooth: btmtk: fix kernel crash when entering btmtk_usb_suspend\n\n   - eth: bnxt: reject unsupported hash functions\n\n  Previous releases - regressions:\n\n   - sched: act_ct: take care of padding in struct zones_ht_key\n\n   - netfilter: fix null-ptr-deref in iptable_nat_table_init().\n\n   - tcp: adjust clamping window for applications specifying SO_RCVBUF\n\n  Previous releases - always broken:\n\n   - ethtool: rss: small fixes to spec and GET\n\n   - mptcp:\n      - fix signal endpoint re-add\n      - pm: fix backup support in signal endpoints\n\n   - wifi: ath12k: fix soft lockup on suspend\n\n   - eth: bnxt_en: fix RSS logic in __bnxt_reserve_rings()\n\n   - eth: ice: fix AF_XDP ZC timeout and concurrency issues\n\n   - eth: mlx5:\n      - fix missing lock on sync reset reload\n      - fix error handling in irq_pool_request_irq""\n\n* tag \'net-6.11-rc2\' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (76 commits)\n  mptcp: fix duplicate data handling\n  mptcp: fix bad RCVPRUNED mib accounting\n  ipv6: fix ndisc_is_useropt() handling for PIO\n  igc: Fix double reset adapter triggered from a single taprio cmd\n  net: MAINTAINERS: Demote Qualcomm IPA to ""maintained""\n  net: wan: fsl_qmc_hdlc: Discard received CRC\n  net: wan: fsl_qmc_hdlc: Convert carrier_lock spinlock to a mutex\n  net/mlx5e: Add a check for the return value from mlx5_port_set_eth_ptys\n  net/mlx5e: Fix CT entry update leaks of modify header context\n  net/mlx5e: Require mlx5 tc classifier action support for IPsec prio capability\n  net/mlx5: Fix missing lock on sync reset reload\n  net/mlx5: Lag', "" don't use the hardcoded value of the first port\n  net/mlx5: DR"", "" Fix 'stack guard page was hit' error in dr_rule\n  net/mlx5: Fix error handling in irq_pool_request_irq\n  net/mlx5: Always drain health in shutdown callback\n  net: Add skbuff.h to MAINTAINERS\n  r8169: don't increment tx_dropped in case of NETDEV_TX_BUSY\n  netfilter: iptables: Fix potential null-ptr-deref in ip6table_nat_table_init().\n  netfilter: iptables: Fix null-ptr-deref in iptable_nat_table_init().\n  net: drop bad gso csum_start and offset in virtio_net_hdr\n  ...\n"", '']",Merge networking fixes from Paolo Abeni including wireless fixes for Linux kernel.,"networking, wireless, fixes",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
601df205896da88e654d7c97d4579fa4af0b4adf,601df205896da88e654d7c97d4579fa4af0b4adf,Jakub Kicinski,kuba@kernel.org,1722473340,Jakub Kicinski,kuba@kernel.org,1722473340,33ff821d073b60a589ff9dbf7289291845d328c1,0bf50cead4c4710d9f704778c32ab8af47ddf070 7764b9622db4382b2797b54a70f292c8da6ef417,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-07-31

We've added 2 non-merge commits during the last 2 day(s) which contain
a total of 2 files changed", 2 insertions(+),"[' 2 deletions(-).\n\nThe main changes are:\n\n1) Fix BPF selftest build after tree sync with regards to a _GNU_SOURCE\n   macro redefined compilation error', ' from Stanislav Fomichev.\n\n2) Fix a wrong test in the ASSERT_OK() check in uprobe_syscall BPF selftest', ""\n   from Jiri Olsa.\n\n* tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:\n  bpf/selftests: Fix ASSERT_OK condition check in uprobe_syscall test\n  selftests/bpf: Filter out _GNU_SOURCE when compiling test_cpp\n====================\n\nLink: https://patch.msgid.link/20240731115706.19677-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n"", '']",Merge pull request for 'bpf' changes with 2 non-merge commits impacting 2 files.,"merge,pull request,commits",It's other type of commit.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
5830aa863981d43560748aa93589c0695191d95d,5830aa863981d43560748aa93589c0695191d95d,Kuniyuki Iwashima,kuniyu@amazon.com,1721935700,Pablo Neira Ayuso,pablo@netfilter.org,1722460850,771314e701a319dbd17ee3069619662517c04d1b,0bf50cead4c4710d9f704778c32ab8af47ddf070,"netfilter: iptables: Fix null-ptr-deref in iptable_nat_table_init().

We had a report that iptables-restore sometimes triggered null-ptr-deref
at boot time. [0]

The problem is that iptable_nat_table_init() is exposed to user space
before the kernel fully initialises netns.

In the small race window"," a user could call iptable_nat_table_init()
that accesses net_generic(net","[' iptable_nat_net_id)', "" which is available\nonly after registering iptable_nat_net_ops.\n\nLet's call register_pernet_subsys() before xt_register_template().\n\n[0]:\nbpfilter: Loaded bpfilter_umh pid 11702\nStarted bpfilter\nBUG: kernel NULL pointer dereference"", ' address: 0000000000000013\n PF: supervisor write access in kernel mode\n PF: error_code(0x0002) - not-present page\nPGD 0 P4D 0\nPREEMPT SMP NOPTI\nCPU: 2 PID: 11879 Comm: iptables-restor Not tainted 6.1.92-99.174.amzn2023.x86_64 #1\nHardware name: Amazon EC2 c6i.4xlarge/', ' BIOS 1.0 10/16/2017\nRIP: 0010:iptable_nat_table_init (net/ipv4/netfilter/iptable_nat.c:87 net/ipv4/netfilter/iptable_nat.c:121) iptable_nat\nCode: 10 4c 89 f6 48 89 ef e8 0b 19 bb ff 41 89 c4 85 c0 75 38 41 83 c7 01 49 83 c6 28 41 83 ff 04 75 dc 48 8b 44 24 08 48 8b 0c 24 <48> 89 08 4c 89 ef e8 a2 3b a2 cf 48 83 c4 10 44 89 e0 5b 5d 41 5c\nRSP: 0018:ffffbef902843cd0 EFLAGS: 00010246\nRAX: 0000000000000013 RBX: ffff9f4b052caa20 RCX: ffff9f4b20988d80\nRDX: 0000000000000000 RSI: 0000000000000064 RDI: ffffffffc04201c0\nRBP: ffff9f4b29394000 R08: ffff9f4b07f77258 R09: ffff9f4b07f77240\nR10: 0000000000000000 R11: ffff9f4b09635388 R12: 0000000000000000\nR13: ffff9f4b1a3c6c00 R14: ffff9f4b20988e20 R15: 0000000000000004\nFS:  00007f6284340000(0000) GS:ffff9f51fe280000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000013 CR3: 00000001d10a6005 CR4: 00000000007706e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nPKRU: 55555554\nCall Trace:\n <TASK>\n ? show_trace_log_lvl (arch/x86/kernel/dumpstack.c:259)\n ? show_trace_log_lvl (arch/x86/kernel/dumpstack.c:259)\n ? xt_find_table_lock (net/netfilter/x_tables.c:1259)\n ? __die_body.cold (arch/x86/kernel/dumpstack.c:478 arch/x86/kernel/dumpstack.c:420)\n ? page_fault_oops (arch/x86/mm/fault.c:727)\n ? exc_page_fault (./arch/x86/include/asm/irqflags.h:40 ./arch/x86/include/asm/irqflags.h:75 arch/x86/mm/fault.c:1470 arch/x86/mm/fault.c:1518)\n ? asm_exc_page_fault (./arch/x86/include/asm/idtentry.h:570)\n ? iptable_nat_table_init (net/ipv4/netfilter/iptable_nat.c:87 net/ipv4/netfilter/iptable_nat.c:121) iptable_nat\n xt_find_table_lock (net/netfilter/x_tables.c:1259)\n xt_request_find_table_lock (net/netfilter/x_tables.c:1287)\n get_info (net/ipv4/netfilter/ip_tables.c:965)\n ? security_capable (security/security.c:809 (discriminator 13))\n ? ns_capable (kernel/capability.c:376 kernel/capability.c:397)\n ? do_ipt_get_ctl (net/ipv4/netfilter/ip_tables.c:1656)\n ? bpfilter_send_req (net/bpfilter/bpfilter_kern.c:52) bpfilter\n nf_getsockopt (net/netfilter/nf_sockopt.c:116)\n ip_getsockopt (net/ipv4/ip_sockglue.c:1827)\n __sys_getsockopt (net/socket.c:2327)\n __x64_sys_getsockopt (net/socket.c:2342 net/socket.c:2339 net/socket.c:2339)\n do_syscall_64 (arch/x86/entry/common.c:51 arch/x86/entry/common.c:81)\n entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:121)\nRIP: 0033:0x7f62844685ee\nCode: 48 8b 0d 45 28 0f 00 f7 d8 64 89 01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa 49 89 ca b8 37 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 0a c3 66 0f 1f 84 00 00 00 00 00 48 8b 15 09\nRSP: 002b:00007ffd1f83d638 EFLAGS: 00000246 ORIG_RAX: 0000000000000037\nRAX: ffffffffffffffda RBX: 00007ffd1f83d680 RCX: 00007f62844685ee\nRDX: 0000000000000040 RSI: 0000000000000000 RDI: 0000000000000004\nRBP: 0000000000000004 R08: 00007ffd1f83d670 R09: 0000558798ffa2a0\nR10: 00007ffd1f83d680 R11: 0000000000000246 R12: 00007ffd1f83e3b2\nR13: 00007f628455baa0 R14: 00007ffd1f83d7b0 R15: 00007f628457a008\n </TASK>\nModules linked in: iptable_nat(+) bpfilter rpcsec_gss_krb5 auth_rpcgss nfsv4 dns_resolver nfs lockd grace fscache veth xt_state xt_connmark xt_nat xt_statistic xt_MASQUERADE xt_mark xt_addrtype ipt_REJECT nf_reject_ipv4 nft_chain_nat nf_nat xt_conntrack nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 xt_comment nft_compat nf_tables nfnetlink overlay nls_ascii nls_cp437 vfat fat ghash_clmulni_intel aesni_intel ena crypto_simd ptp cryptd i8042 pps_core serio button sunrpc sch_fq_codel configfs loop dm_mod fuse dax dmi_sysfs crc32_pclmul crc32c_intel efivarfs\nCR2: 0000000000000013\n\nFixes: fdacd57c79b7 (""netfilter: x_tables: never register tables by default"")\nReported-by: Takahiro Kawahara <takawaha@amazon.co.jp>\nSigned-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>\nReviewed-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>\n', '']",Fix null pointer dereference issue in iptable_nat_table_init() during kernel initialization sequence.,"null-ptr-deref, iptables, netfilter",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.","[""It's not related to any of the above.""]"
0bf50cead4c4710d9f704778c32ab8af47ddf070,0bf50cead4c4710d9f704778c32ab8af47ddf070,Jakub Kicinski,kuba@kernel.org,1722390070,Jakub Kicinski,kuba@kernel.org,1722390070,dc1ccc485a0d7f77dbafb9724dc23c2ca39d51e0,89add40066f9ed9abe5f7f886fe5789ff7e0c50e 963fb4612295a5c35b1b89c8bff3bdd4f9127af6,"Merge branch '100GbE' of git://git.kernel.org/pub/scm/linux/kernel/git/tnguy/net-queue

Tony Nguyen says:

====================
ice: fix AF_XDP ZC timeout and concurrency issues

Maciej Fijalkowski says:

Changes included in this patchset address an issue that customer has
been facing when AF_XDP ZC Tx sockets were used in combination with flow
control and regular Tx traffic.

After executing:
ethtool --set-priv-flags $dev link-down-on-close on
ethtool -A $dev rx on tx on

launching multiple ZC Tx sockets on $dev + pinging remote interface (so
that regular Tx traffic is present) and then going through down/up of
$dev"," Tx timeout occurred and then most of the time ice driver was unable
to recover from that state.

These patches combined together solve the described above issue on
customer side. Main focus here is to forbid producing Tx descriptors when
either carrier is not yet initialized or process of bringing interface
down has already started.

v1: https://lore.kernel.org/netdev/20240708221416.625850-1-anthony.l.nguyen@intel.com/

* '100GbE' of git://git.kernel.org/pub/scm/linux/kernel/git/tnguy/net-queue:
  ice: xsk: fix txq interrupt mapping
  ice: add missing WRITE_ONCE when clearing ice_rx_ring::xdp_prog
  ice: improve updating ice_{t","[""r}x_ring::xsk_pool\n  ice: toggle netif_carrier when setting up XSK pool\n  ice: modify error handling when setting XSK pool in ndo_bpf\n  ice: replace synchronize_rcu with synchronize_net\n  ice: don't busy wait for Rx queue disable in ice_qp_dis()\n  ice: respect netif readiness in AF_XDP ZC related ndo's\n====================\n\nLink: https://patch.msgid.link/20240729200716.681496-1-anthony.l.nguyen@intel.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n"", '']",Fixes concurrency and timeout issues for AF_XDP ZC in the ice driver during network interface up/down cycles.,"AF_XDP, ice driver, concurrency",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['socket like programs']
7764b9622db4382b2797b54a70f292c8da6ef417,7764b9622db4382b2797b54a70f292c8da6ef417,Jiri Olsa,jolsa@kernel.org,1722017327,Andrii Nakryiko,andrii@kernel.org,1722372144,849b01b4dc7b6094ed79beb752130f697dc24088,41c24102af7b6236277a214428b203d51a3462df,"bpf/selftests: Fix ASSERT_OK condition check in uprobe_syscall test

Fixing ASSERT_OK condition check in uprobe_syscall test","
otherwise we return from test on pipe success.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240726180847.684584-1-jolsa@kernel.org
",[''],Fixes the ASSERT_OK condition in the uprobe_syscall test of the bpf selftests.,"fix, ASSERT_OK, uprobe_syscall",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['kprobe/uprobe/ftrace like programs']
41c24102af7b6236277a214428b203d51a3462df,41c24102af7b6236277a214428b203d51a3462df,Stanislav Fomichev,sdf@fomichev.me,1721943629,Andrii Nakryiko,andrii@kernel.org,1722285811,88899ab944af9bac21c481a0130ddc8277801cc2,039564d2fd37b122ec0d268e2ee6334e7169e225,"selftests/bpf: Filter out _GNU_SOURCE when compiling test_cpp

Jakub reports build failures when merging linux/master with net tree:

CXX      test_cpp
In file included from <built-in>:454:
<command line>:2:9: error: '_GNU_SOURCE' macro redefined [-Werror","-Wmacro-redefined]
    2 | #define _GNU_SOURCE
      |         ^
<built-in>:445:9: note: previous definition is here
  445 | #define _GNU_SOURCE 1

The culprit is commit cc937dad85ae (""selftests: centralize -D_GNU_SOURCE= to
CFLAGS in lib.mk"") which unconditionally added -D_GNU_SOUCE to CLFAGS.
Apparently clang++ also unconditionally adds it for the C++ targets [0]
which causes a conflict. Add small change in the selftests makefile
to filter it out for test_cpp.

Not sure which tree it should go via","[' targeting bpf for now', ' but net\nmight be better?\n\n0: https://stackoverflow.com/questions/11670581/why-is-gnu-source-defined-by-default-and-how-to-turn-it-off\n\nSigned-off-by: Stanislav Fomichev <sdf@fomichev.me>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Jiri Olsa <jolsa@kernel.org>\nLink: https://lore.kernel.org/bpf/20240725214029.1760809-1-sdf@fomichev.me\n', '']",Fixes build failure by filtering out _GNU_SOURCE for test_cpp in selftests makefile.,"build failure, _GNU_SOURCE, makefile",It's a build system or CI/CD change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
6b5faec9f564ea627c66064a4a6a5904fe5a07dd,6b5faec9f564ea627c66064a4a6a5904fe5a07dd,Linus Torvalds,torvalds@linux-foundation.org,1722283625,Linus Torvalds,torvalds@linux-foundation.org,1722283625,a6981158a16b59d7effbac1fdb2c887a293a364a,10826505f52357c7c9e12358db97a3acbe82e958 facdbdfe0e6202d74758387ae9189c39f7b4b16c,"Merge tag 'for-linus-2024072901' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid

Pull HID fixes from Benjamin Tissoires:

 - fixes for HID-BPF after the merge with the bpf tree (Arnd Bergmann
   and Benjamin Tissoires)

 - some tool type fix for the Wacom driver (Tatsunosuke Tobita)

 - a reorder of the sensor discovery to ensure the HID AMD SFH is
   removed when no sensors are available (Basavaraj Natikar)

* tag 'for-linus-2024072901' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid:
  selftests/hid: add test for attaching multiple time the same struct_ops
  HID: bpf: prevent the same struct_ops to be attached more than once
  selftests/hid: disable struct_ops auto-attach
  selftests/hid: fix bpf_wq new API
  HID: amd_sfh: Move sensor discovery before HID device initialization
  hid: bpf: add BPF_JIT dependency
  HID: wacom: more appropriate tool type categorization
  HID: wacom: Modify pen IDs
",,"Merge of HID fixes including HID-BPF, sensor discovery reordering, and Wacom driver tool type update.","HID, fixes, HID-BPF",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
478574370bef7951fbd9ef5155537d6cbed49472,478574370bef7951fbd9ef5155537d6cbed49472,Boris Burkov,boris@bur.io,1721692185,David Sterba,dsterba@suse.com,1722273651,c5c69d24a4b3a4db0e0910b88bf130c54bb1f806,de9f46cb0044a9b9f825d7695ae235863461dc00,"btrfs: make cow_file_range_inline() honor locked_page on error

The btrfs buffered write path runs through __extent_writepage() which
has some tricky return value handling for writepage_delalloc().
Specifically", when that returns 1,"[' we exit', ' but for other return values\nwe continue and end up calling btrfs_folio_end_all_writers(). If the\nfolio has been unlocked (note that we check the PageLocked bit at the\nstart of __extent_writepage())', ' this results in an assert panic like\nthis one from syzbot:\n\n  BTRFS: error (device loop0 state EAL) in free_log_tree:3267: errno=-5 IO failure\n  BTRFS warning (device loop0 state EAL): Skipping commit of aborted transaction.\n  BTRFS: error (device loop0 state EAL) in cleanup_transaction:2018: errno=-5 IO failure\n  assertion failed: folio_test_locked(folio)', ' in fs/btrfs/subpage.c:871\n  ------------[ cut here ]------------\n  kernel BUG at fs/btrfs/subpage.c:871!\n  Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI\n  CPU: 1 PID: 5090 Comm: syz-executor225 Not tainted\n  6.10.0-syzkaller-05505-gb1bc554e009e #0\n  Hardware name: Google Google Compute Engine/Google Compute Engine', ' BIOS\n  Google 06/27/2024\n  RIP: 0010:btrfs_folio_end_all_writers+0x55b/0x610 fs/btrfs/subpage.c:871\n  Code: e9 d3 fb ff ff e8 25 22 c2 fd 48 c7 c7 c0 3c 0e 8c 48 c7 c6 80 3d\n  0e 8c 48 c7 c2 60 3c 0e 8c b9 67 03 00 00 e8 66 47 ad 07 90 <0f> 0b e8\n  6e 45 b0 07 4c 89 ff be 08 00 00 00 e8 21 12 25 fe 4c 89\n  RSP: 0018:ffffc900033d72e0 EFLAGS: 00010246\n  RAX: 0000000000000045 RBX: 00fff0000000402c RCX: 663b7a08c50a0a00\n  RDX: 0000000000000000 RSI: 0000000080000000 RDI: 0000000000000000\n  RBP: ffffc900033d73b0 R08: ffffffff8176b98c R09: 1ffff9200067adfc\n  R10: dffffc0000000000 R11: fffff5200067adfd R12: 0000000000000001\n  R13: dffffc0000000000 R14: 0000000000000000 R15: ffffea0001cbee80\n  FS:  0000000000000000(0000) GS:ffff8880b9500000(0000)\n  knlGS:0000000000000000\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: 00007f5f076012f8 CR3: 000000000e134000 CR4: 00000000003506f0\n  DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n  Call Trace:\n  <TASK>\n  __extent_writepage fs/btrfs/extent_io.c:1597 [inline]\n  extent_write_cache_pages fs/btrfs/extent_io.c:2251 [inline]\n  btrfs_writepages+0x14d7/0x2760 fs/btrfs/extent_io.c:2373\n  do_writepages+0x359/0x870 mm/page-writeback.c:2656\n  filemap_fdatawrite_wbc+0x125/0x180 mm/filemap.c:397\n  __filemap_fdatawrite_range mm/filemap.c:430 [inline]\n  __filemap_fdatawrite mm/filemap.c:436 [inline]\n  filemap_flush+0xdf/0x130 mm/filemap.c:463\n  btrfs_release_file+0x117/0x130 fs/btrfs/file.c:1547\n  __fput+0x24a/0x8a0 fs/file_table.c:422\n  task_work_run+0x24f/0x310 kernel/task_work.c:222\n  exit_task_work include/linux/task_work.h:40 [inline]\n  do_exit+0xa2f/0x27f0 kernel/exit.c:877\n  do_group_exit+0x207/0x2c0 kernel/exit.c:1026\n  __do_sys_exit_group kernel/exit.c:1037 [inline]\n  __se_sys_exit_group kernel/exit.c:1035 [inline]\n  __x64_sys_exit_group+0x3f/0x40 kernel/exit.c:1035\n  x64_sys_call+0x2634/0x2640\n  arch/x86/include/generated/asm/syscalls_64.h:232\n  do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n  do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83\n  entry_SYSCALL_64_after_hwframe+0x77/0x7f\n  RIP: 0033:0x7f5f075b70c9\n  Code: Unable to access opcode bytes at\n  0x7f5f075b709f.\n\nI was hitting the same issue by doing hundreds of accelerated runs of\ngeneric/475', ' which also hits IO errors by design.\n\nI instrumented that reproducer with bpftrace and found that the\nundesirable folio_unlock was coming from the following callstack:\n\n  folio_unlock+5\n  __process_pages_contig+475\n  cow_file_range_inline.constprop.0+230\n  cow_file_range+803\n  btrfs_run_delalloc_range+566\n  writepage_delalloc+332\n  __extent_writepage # inlined in my stacktrace', ' but I added it here\n  extent_write_cache_pages+622\n\nLooking at the bisected-to patch in the syzbot report', ' Josef realized\nthat the logic of the cow_file_range_inline error path subtly changing.\nIn the past', ' on error', ' it jumped to out_unlock in cow_file_range()', '\nwhich honors the locked_page', ' so when we ultimately call\nfolio_end_all_writers()', ' the folio of interest is still locked. After\nthe change', ' we always unlocked ignoring the locked_page', ' on both success\nand error. On the success path', ' this all results in returning 1 to\n__extent_writepage()', ' which skips the folio_end_all_writers() call', '\nwhich makes it OK to have unlocked.\n\nFix the bug by wiring the locked_page into cow_file_range_inline() and\nonly setting locked_page to NULL on success.\n\nReported-by: syzbot+a14d8ac9af3a2a4fd0c8@syzkaller.appspotmail.com\nFixes: 0586d0a89e77 (""btrfs: move extent bit and page cleanup into cow_file_range_inline"")\nCC: stable@vger.kernel.org # 6.10+\nReviewed-by: Qu Wenruo <wqu@suse.com>\nSigned-off-by: Boris Burkov <boris@bur.io>\nSigned-off-by: David Sterba <dsterba@suse.com>\n', '']",This commit adjusts cow_file_range_inline() in btrfs to respect locked_page on errors in the buffered write path.,"btrfs,cow_file_range_inline,locked_page",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
ebc33a3f8d0aeddf19fd5827add24b82ae171829,ebc33a3f8d0aeddf19fd5827add24b82ae171829,Maciej Fijalkowski,maciej.fijalkowski@intel.com,1722017834,Tony Nguyen,anthony.l.nguyen@intel.com,1722268349,e8c1a5d320752997cc73df853be09098c04ef672,9da75a511c5558fa3da56759984fd1fa859186f0,ice: improve updating ice_{t,"r}x_ring::xsk_pool

xsk_buff_pool pointers that ice ring structs hold are updated via
ndo_bpf that is executed in process context while it can be read by
remote CPU at the same time within NAPI poll. Use synchronize_net()
after pointer update and {READ","['WRITE}_ONCE() when working with mentioned\npointer.\n\nFixes: 2d4238f55697 (""ice: Add support for AF_XDP"")\nReviewed-by: Shannon Nelson <shannon.nelson@amd.com>\nTested-by: Chandan Kumar Rout <chandanx.rout@intel.com> (A Contingent Worker at Intel)\nSigned-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>\nSigned-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>\n', '']",This commit improves pointer updating mechanism for ice ring structures to prevent issues during concurrent read operations.,"pointer, update, synchronize_net",It's a performance optimization.,"Simple, can be used without much configuration. For example, a simple helper function.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['tc/netfilter like programs']
d5922717994911e8f0eab736f3ba0d968c158823,d5922717994911e8f0eab736f3ba0d968c158823,Maciej Fijalkowski,maciej.fijalkowski@intel.com,1722017832,Tony Nguyen,anthony.l.nguyen@intel.com,1722268349,cbddecc20715a80cececc165701dbe35a1ce69ab,405d9999aa0b4ae467ef391d1d9c7e0d30ad0841,"ice: modify error handling when setting XSK pool in ndo_bpf

Don't bail out right when spotting an error within ice_qp_{dis","ena}()
but rather track error and go through whole flow of disabling and
enabling queue pair.

Fixes: 2d4238f55697 (""ice: Add support for AF_XDP"")
Reviewed-by: Shannon Nelson <shannon.nelson@amd.com>
Tested-by: Chandan Kumar Rout <chandanx.rout@intel.com> (A Contingent Worker at Intel)
Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
",[''],Updates error handling to track errors and ensure full flow execution in setting XSK pool in ndo_bpf on ice driver.,"error, XSK pool, ice driver",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['xdp like programs']
1fd2c10acb7b35d72101a4619ee5b2cddb9efd3a,1fd2c10acb7b35d72101a4619ee5b2cddb9efd3a,Mikulas Patocka,mpatocka@redhat.com,1722075062,Helge Deller,deller@gmx.de,1722262747,196c73d9fd2a9da72ecdc355ef7755a57ce1aa09,8400291e289ee6b2bf9779ff1c83a291501f017b,"parisc: fix unaligned accesses in BPF

There were spurious unaligned access warnings when calling BPF code.
Sometimes", the warnings were triggered with any incoming packet,"[' making\nthe machine hard to use.\n\nThe reason for the warnings is this: on parisc64', ' pointers to functions\nare not really pointers to functions', ' they are pointers to 16-byte\ndescriptor. The first 8 bytes of the descriptor is a pointer to the\nfunction and the next 8 bytes of the descriptor is the content of the\n""dp"" register. This descriptor is generated in the function\nbpf_jit_build_prologue.\n\nThe problem is that the function bpf_int_jit_compile advertises 4-byte\nalignment when calling bpf_jit_binary_alloc', ' bpf_jit_binary_alloc\nrandomizes the returned array and if the array happens to be not aligned\non 8-byte boundary', ' the descriptor generated in bpf_jit_build_prologue is\nalso not aligned and this triggers the unaligned access warning.\n\nFix this by advertising 8-byte alignment on parisc64 when calling\nbpf_jit_binary_alloc.\n\nSigned-off-by: Mikulas Patocka <mpatocka@redhat.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Helge Deller <deller@gmx.de>\n', '']",Fix unaligned access warnings in BPF on parisc architecture.,"unaligned,access,parisc",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
9da49aa80d686582bc3a027112a30484c9be6b6e,9da49aa80d686582bc3a027112a30484c9be6b6e,Jeongjun Park,aha310510@gmail.com,1721943649,David S. Miller,davem@davemloft.net,1722246915,6ac72bf26a011a6d42b1fbba48233bb86bba59d3,301927d2d2eb8e541357ba850bc7a1a74dbbd670,"tun: Add missing bpf_net_ctx_clear() in do_xdp_generic()

There are cases where do_xdp_generic returns bpf_net_context without
clearing it. This causes various memory corruptions"," so the missing
bpf_net_ctx_clear must be added.

Reported-by: syzbot+44623300f057a28baf1e@syzkaller.appspotmail.com
Fixes: fecef4cd42c6 (""tun: Assign missing bpf_net_context."")
Signed-off-by: Jeongjun Park <aha310510@gmail.com>
Acked-by: Jason Wang <jasowang@redhat.com>
Reviewed-by: Willem de Bruijn <willemb@google.com>
Reported-by: syzbot+3c2b6d5d4bec3b904933@syzkaller.appspotmail.com
Reported-by: syzbot+707d98c8649695eaf329@syzkaller.appspotmail.com
Reported-by: syzbot+c226757eb784a9da3e8b@syzkaller.appspotmail.com
Reported-by: syzbot+61a1cfc2b6632363d319@syzkaller.appspotmail.com
Reported-by: syzbot+709e4c85c904bcd62735@syzkaller.appspotmail.com
Signed-off-by: David S. Miller <davem@davemloft.net>
",[''],Add missing bpf_net_ctx_clear() in do_xdp_generic to prevent memory corruption.,"bpf_net_ctx_clear, do_xdp_generic, memory corruption",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['xdp like programs']
6557a28f3e3a54cff4f0dcdd1dfa649b26557ab3,6557a28f3e3a54cff4f0dcdd1dfa649b26557ab3,Sean Wang,sean.wang@mediatek.com,1721346393,Johannes Berg,johannes.berg@intel.com,1721990060,1550b3dde9255235b01c853c9c73b2e8f76f3d14,189d7aae8f5a100b0db8b302debbd445475d01e6,"wifi: mt76: mt7921: fix null pointer access in mt792x_mac_link_bss_remove

Fix null pointer access in mt792x_mac_link_bss_remove.

To prevent null pointer access"," we should assign the vif to bss_conf in
mt7921_add_interface. This ensures that subsequent operations on the BSS
can properly reference the correct vif.

[  T843] Call Trace:
[  T843]  <TASK>
[  T843]  ? __die+0x1e/0x60
[  T843]  ? page_fault_oops+0x157/0x450
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? search_bpf_extables+0x5a/0x80
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? exc_page_fault+0x2bb/0x670
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? lock_timer_base+0x71/0x90
[  T843]  ? asm_exc_page_fault+0x26/0x30
[  T843]  ? mt792x_mac_link_bss_remove+0x24/0x110 [mt792x_lib]
[  T843]  ? mt792x_remove_interface+0x6e/0x90 [mt792x_lib]
[  T843]  ? ieee80211_do_stop+0x507/0x7e0 [mac80211]
[  T843]  ? ieee80211_stop+0x53/0x190 [mac80211]
[  T843]  ? __dev_close_many+0xa5/0x120
[  T843]  ? __dev_change_flags+0x18c/0x220
[  T843]  ? dev_change_flags+0x21/0x60
[  T843]  ? do_setlink+0xdf9/0x11d0
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? security_sock_rcv_skb+0x33/0x50
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? __nla_validate_parse+0x61/0xd10
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? genl_done+0x53/0x80
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? netlink_dump+0x357/0x410
[  T843]  ? __rtnl_newlink+0x5d6/0x980
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? genl_family_rcv_msg_dumpit+0xdf/0xf0
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? __kmalloc_cache_noprof+0x44/0x210
[  T843]  ? rtnl_newlink+0x42/0x60
[  T843]  ? rtnetlink_rcv_msg+0x152/0x3f0
[  T843]  ? mptcp_pm_nl_dump_addr+0x180/0x180
[  T843]  ? rtnl_calcit.isra.0+0x130/0x130
[  T843]  ? netlink_rcv_skb+0x56/0x100
[  T843]  ? netlink_unicast+0x199/0x290
[  T843]  ? netlink_sendmsg+0x21d/0x490
[  T843]  ? __sock_sendmsg+0x78/0x80
[  T843]  ? ____sys_sendmsg+0x23f/0x2e0
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? copy_msghdr_from_user+0x68/0xa0
[  T843]  ? ___sys_sendmsg+0x81/0xd0
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? crng_fast_key_erasure+0xbc/0xf0
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? get_random_bytes_user+0x126/0x140
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? __fdget+0xb1/0xe0
[  T843]  ? __sys_sendmsg+0x56/0xa0
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? do_syscall_64+0x5f/0x170
[  T843]  ? entry_SYSCALL_64_after_hwframe+0x55/0x5d
[  T843]  </TASK>

Fixes: 1541d63c5fe2 (""wifi: mt76: mt7925: add mt7925_mac_link_bss_remove to remove per-link BSS"")
Reported-by: Bert Karwatzki <spasswolf@web.de>
Closes: https://lore.kernel.org/linux-wireless/2fee61f8c903d02a900ca3188c3742c7effd102e.camel@web.de/#b
Signed-off-by: Sean Wang <sean.wang@mediatek.com>
Tested-by: Bert Karwatzki <spasswolf@web.de>
Link: https://patch.msgid.link/20240718234633.12737-1-sean.wang@kernel.org
Signed-off-by: Johannes Berg <johannes.berg@intel.com>
",[''],Fix null pointer access issue in mt792x_mac_link_bss_remove in the wifi mt76 driver.,null pointer fix wifi,It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
1722389b0d863056d78287a120a1d6cadb8d4f7b,1722389b0d863056d78287a120a1d6cadb8d4f7b,Linus Torvalds,torvalds@linux-foundation.org,1721939545,Linus Torvalds,torvalds@linux-foundation.org,1721939545,95c3c3b1ca6213eecbfc584b58b7676673e3696e,8bf100092d60bf586bbc1a3a2cd833bb212d9d53 af65ea42bd1d28d818b74b9b3b4f8da7ada9f88b,"Merge tag 'net-6.11-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 ""Including fixes from bpf and netfilter.

  A lot of networking people were at a conference last week"," busy
  catching COVID","[' so relatively short PR.\n\n  Current release - regressions:\n\n   - tcp: process the 3rd ACK with sk_socket for TFO and MPTCP\n\n  Current release - new code bugs:\n\n   - l2tp: protect session IDR and tunnel session list with one lock', '\n     make sure the state is coherent to avoid a warning\n\n   - eth: bnxt_en: update xdp_rxq_info in queue restart logic\n\n   - eth: airoha: fix location of the MBI_RX_AGE_SEL_MASK field\n\n  Previous releases - regressions:\n\n   - xsk: require XDP_UMEM_TX_METADATA_LEN to actuate tx_metadata_len', '\n     the field reuses previously un-validated pad\n\n  Previous releases - always broken:\n\n   - tap/tun: drop short frames to prevent crashes later in the stack\n\n   - eth: ice: add a per-VF limit on number of FDIR filters\n\n   - af_unix: disable MSG_OOB handling for sockets in sockmap/sockhash""\n\n* tag \'net-6.11-rc1\' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (34 commits)\n  tun: add missing verification for short frame\n  tap: add missing verification for short frame\n  mISDN: Fix a use after free in hfcmulti_tx()\n  gve: Fix an edge case for TSO skb validity check\n  bnxt_en: update xdp_rxq_info in queue restart logic\n  tcp: process the 3rd ACK with sk_socket for TFO/MPTCP\n  selftests/bpf: Add XDP_UMEM_TX_METADATA_LEN to XSK TX metadata test\n  xsk: Require XDP_UMEM_TX_METADATA_LEN to actuate tx_metadata_len\n  bpf: Fix a segment issue when downgrading gso_size\n  net: mediatek: Fix potential NULL pointer dereference in dummy net_device handling\n  MAINTAINERS: make Breno the netconsole maintainer\n  MAINTAINERS: Update bonding entry\n  net: nexthop: Initialize all fields in dumped nexthops\n  net: stmmac: Correct byte order of perfect_match\n  selftests: forwarding: skip if kernel not support setting bridge fdb learning limit\n  tipc: Return non-zero value from tipc_udp_addr2str() on error\n  netfilter: nft_set_pipapo_avx2: disable softinterrupts\n  ice: Fix recipe read procedure\n  ice: Add a per-VF limit on number of FDIR filters\n  net: bonding: correctly annotate RCU in bond_should_notify_peers()\n  ...\n', '']",Merge networking fixes from netdev including bpf and netfilter updates.,"networking, bpf, netfilter",It's other type of commit.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",Other component related to eBPF but not listed above.,"['tc/netfilter like programs', 'tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
f7578df913041f08b680aac2c660ebd71f35af3a,f7578df913041f08b680aac2c660ebd71f35af3a,Jakub Kicinski,kuba@kernel.org,1721918424,Jakub Kicinski,kuba@kernel.org,1721918425,aabd7d57a3c183d3f391d8fa38c7d280d3524004,c1668292689ad2ee16c9c1750a8044b0b0aad663 9b9969c40b0d63a8fca434d4ea01c60a39699aa3,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-07-25

We've added 14 non-merge commits during the last 8 day(s) which contain
a total of 19 files changed", 177 insertions(+),"[' 70 deletions(-).\n\nThe main changes are:\n\n1) Fix af_unix to disable MSG_OOB handling for sockets in BPF sockmap and\n   BPF sockhash. Also add test coverage for this case', ' from Michal Luczaj.\n\n2) Fix a segmentation issue when downgrading gso_size in the BPF helper\n   bpf_skb_adjust_room()', ' from Fred Li.\n\n3) Fix a compiler warning in resolve_btfids due to a missing type cast', '\n   from Liwei Song.\n\n4) Fix stack allocation for arm64 to align the stack pointer at a 16 byte\n   boundary in the fexit_sleep BPF selftest', ' from Puranjay Mohan.\n\n5) Fix a xsk regression to require a flag when actuating tx_metadata_len', '\n   from Stanislav Fomichev.\n\n6) Fix function prototype BTF dumping in libbpf for prototypes that have\n   no input arguments', ' from Andrii Nakryiko.\n\n7) Fix stacktrace symbol resolution in perf script for BPF programs\n   containing subprograms', "" from Hou Tao.\n\n* tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:\n  selftests/bpf: Add XDP_UMEM_TX_METADATA_LEN to XSK TX metadata test\n  xsk: Require XDP_UMEM_TX_METADATA_LEN to actuate tx_metadata_len\n  bpf: Fix a segment issue when downgrading gso_size\n  tools/resolve_btfids: Fix comparison of distinct pointer types warning in resolve_btfids\n  bpf"", ' events: Use prog to emit ksymbol event for main program\n  selftests/bpf: Test sockmap redirect for AF_UNIX MSG_OOB\n  selftests/bpf: Parametrize AF_UNIX redir functions to accept send() flags\n  selftests/bpf: Support SOCK_STREAM in unix_inet_redir_to_connected()\n  af_unix: Disable MSG_OOB handling for sockets in sockmap/sockhash\n  bpftool: Fix typo in usage help\n  libbpf: Fix no-args func prototype BTF dumping syntax\n  MAINTAINERS: Update powerpc BPF JIT maintainers\n  MAINTAINERS: Update email address of Naveen\n  selftests/bpf: fexit_sleep: Fix stack allocation for arm64\n====================\n\nLink: https://patch.msgid.link/20240725114312.32197-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",Merged changes from 'for-netdev' branch in the Linux bpf repository.,"merge,for-netdev,bpf",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
9b9969c40b0d63a8fca434d4ea01c60a39699aa3,9b9969c40b0d63a8fca434d4ea01c60a39699aa3,Stanislav Fomichev,sdf@fomichev.me,1720835572,Daniel Borkmann,daniel@iogearbox.net,1721901453,e45ea5ac0de4581211d6f77b054faaf2accdb965,d5e726d9143c5624135f5dc9e4069799adeef734,"selftests/bpf: Add XDP_UMEM_TX_METADATA_LEN to XSK TX metadata test

This flag is now required to use tx_metadata_len.

Fixes: 40808a237d9c (""selftests/bpf: Add TX side to xdp_metadata"")
Reported-by: Julian Schindel <mail@arctic-alpaca.de>
Signed-off-by: Stanislav Fomichev <sdf@fomichev.me>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Link: https://lore.kernel.org/bpf/20240713015253.121248-3-sdf@fomichev.me
",,Add XDP_UMEM_TX_METADATA_LEN flag to XSK TX metadata test for compliance.,"XDP_UMEM_TX_METADATA_LEN,XSK,metadata",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['xdp like programs']
d5e726d9143c5624135f5dc9e4069799adeef734,d5e726d9143c5624135f5dc9e4069799adeef734,Stanislav Fomichev,sdf@fomichev.me,1720835571,Daniel Borkmann,daniel@iogearbox.net,1721901447,d24f61de8cd5af48ecedeecac656669eb4a8019f,fa5ef655615a01533035c6139248c5b33aa27028,"xsk: Require XDP_UMEM_TX_METADATA_LEN to actuate tx_metadata_len

Julian reports that commit 341ac980eab9 (""xsk: Support tx_metadata_len"")
can break existing use cases which don't zero-initialize xdp_umem_reg
padding. Introduce new XDP_UMEM_TX_METADATA_LEN to make sure we
interpret the padding as tx_metadata_len only when being explicitly
asked.

Fixes: 341ac980eab9 (""xsk: Support tx_metadata_len"")
Reported-by: Julian Schindel <mail@arctic-alpaca.de>
Signed-off-by: Stanislav Fomichev <sdf@fomichev.me>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Link: https://lore.kernel.org/bpf/20240713015253.121248-2-sdf@fomichev.me
",,Introduce XDP_UMEM_TX_METADATA_LEN to ensure explicit tx_metadata_len interpretation in XDP sockets.,"XDP, tx_metadata_len, xsk",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF maps,['xdp like programs']
fa5ef655615a01533035c6139248c5b33aa27028,fa5ef655615a01533035c6139248c5b33aa27028,Fred Li,dracodingfly@gmail.com,1721357213,Daniel Borkmann,daniel@iogearbox.net,1721901014,66603a87fa8f8580a21a182af1da71adab1bc9b7,13c9b702e6cb8e406d5fa6b2dca422fa42d2f13e,"bpf: Fix a segment issue when downgrading gso_size

Linearize the skb when downgrading gso_size because it may trigger a
BUG_ON() later when the skb is segmented as described in [1","2].

Fixes: 2be7e212d5419 (""bpf: add bpf_skb_adjust_room helper"")
Signed-off-by: Fred Li <dracodingfly@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Willem de Bruijn <willemb@google.com>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/all/20240626065555.35460-2-dracodingfly@gmail.com [1]
Link: https://lore.kernel.org/all/668d5cf1ec330_1c18c32947@willemb.c.googlers.com.notmuch [2]
Link: https://lore.kernel.org/bpf/20240719024653.77006-1-dracodingfly@gmail.com
",[''],Fixes a segment issue in eBPF by linearizing skb when downgrading gso_size to prevent potential BUG_ON errors.,"bpf, segment issue, gso_size",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
facdbdfe0e6202d74758387ae9189c39f7b4b16c,facdbdfe0e6202d74758387ae9189c39f7b4b16c,Benjamin Tissoires,bentiss@kernel.org,1721751714,Benjamin Tissoires,bentiss@kernel.org,1721838442,6f99efe47551af6644b5f81d5b9e6ea54bf9c7bf,acd34cfc48b3dd46e5e4c4bdc99cc0c15568bac0,"selftests/hid: add test for attaching multiple time the same struct_ops

Turns out that we would en up in a bad state if we attempt to attach
twice the same HID-BPF struct_ops"," so have a test for it.

Link: https://patch.msgid.link/20240723-fix-6-11-bpf-v1-4-b9d770346784@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Add selftests for attaching HID-BPF struct_ops multiple times to prevent bad state.,"selftests,HID-BPF,struct_ops",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['HID driver like programs']
acd34cfc48b3dd46e5e4c4bdc99cc0c15568bac0,acd34cfc48b3dd46e5e4c4bdc99cc0c15568bac0,Benjamin Tissoires,bentiss@kernel.org,1721751713,Benjamin Tissoires,bentiss@kernel.org,1721838441,849436a46a6031b01a8d3c212240e77e0010477e,f64c1a4593391c57accf32693a14ef45f8162b5c,"HID: bpf: prevent the same struct_ops to be attached more than once

If the struct_ops is already attached"," we should bail out or we will
end up in various locks and pointer issues while unregistering.

Link: https://patch.msgid.link/20240723-fix-6-11-bpf-v1-3-b9d770346784@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Prevent attaching the same struct_ops multiple times to avoid locks and pointer issues.,"HID,struct_ops,unregistering",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
f64c1a4593391c57accf32693a14ef45f8162b5c,f64c1a4593391c57accf32693a14ef45f8162b5c,Benjamin Tissoires,bentiss@kernel.org,1721751712,Benjamin Tissoires,bentiss@kernel.org,1721838441,1934086f2f586eb84fd81be3997b10e1d22082e4,ff9fbcafbaf13346c742c0d672a22f5ac20b9d92,"selftests/hid: disable struct_ops auto-attach

Since commit 08ac454e258e (""libbpf: Auto-attach struct_ops BPF maps in
BPF skeleton"")"," libbpf automatically calls bpf_map__attach_struct_ops()
on every struct_ops it sees in the bpf object. The problem is that
our test bpf object has many of them but only one should be manually
loaded at a time","[' or we end up locking the syscall.\n\nLink: https://patch.msgid.link/20240723-fix-6-11-bpf-v1-2-b9d770346784@kernel.org\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Disable automatic struct_ops attachment in eBPF selftests for HID due to multiple struct_ops in a test bpf object.,"selftests,hid,struct_ops",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', 'HID driver like programs']"
ff9fbcafbaf13346c742c0d672a22f5ac20b9d92,ff9fbcafbaf13346c742c0d672a22f5ac20b9d92,Benjamin Tissoires,bentiss@kernel.org,1721751711,Benjamin Tissoires,bentiss@kernel.org,1721838441,969db8dc0d41e2766a9f0a8fb6b39d0f7b1c2193,8031b001da700474c11d28629581480b12a0d8d4,"selftests/hid: fix bpf_wq new API

Since commit f56f4d541eab (""bpf: helpers: fix bpf_wq_set_callback_impl
signature"")"," the API for bpf_wq changed a bit.

We need to update the selftests/hid code to reflect that or the
bpf program will not load.

Link: https://patch.msgid.link/20240723-fix-6-11-bpf-v1-1-b9d770346784@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Update selftests/hid code for compatibility with new bpf_wq API changes.,"selftests, bpf_wq, API",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['HID driver like programs']
bacc15e010fc5a235fb2020b06a29a9961b5db82,bacc15e010fc5a235fb2020b06a29a9961b5db82,Arnd Bergmann,arnd@arndb.de,1721382667,Benjamin Tissoires,bentiss@kernel.org,1721659925,8d75d364e3501d3d4863efc3bcb2009dba9a80bf,9c2913b962daf3e5a947babf93f2125765eeca09,"hid: bpf: add BPF_JIT dependency

The module does not do anything when the JIT is disabled"," but instead
causes a warning:

In file included from include/linux/bpf_verifier.h:7","[""\n                 from drivers/hid/bpf/hid_bpf_struct_ops.c:10:\ndrivers/hid/bpf/hid_bpf_struct_ops.c: In function 'hid_bpf_struct_ops_init':\ninclude/linux/bpf.h:1853:50: error: statement with no effect [-Werror=unused-value]\n 1853 | #define register_bpf_struct_ops(st_ops"", "" type) ({ (void *)(st_ops); 0; })\n      |                                                  ^~~~~~~~~~~~~~~~\ndrivers/hid/bpf/hid_bpf_struct_ops.c:305:16: note: in expansion of macro 'register_bpf_struct_ops'\n  305 |         return register_bpf_struct_ops(&bpf_hid_bpf_ops"", ' hid_bpf_ops);\n      |                ^~~~~~~~~~~~~~~~~~~~~~~\n\nAdd a Kconfig dependency to only allow building the HID-BPF support\nwhen a JIT is enabled.\n\nFixes: ebc0d8093e8c (""HID: bpf: implement HID-BPF through bpf_struct_ops"")\nSigned-off-by: Arnd Bergmann <arnd@arndb.de>\nLink: https://patch.msgid.link/96a00b6f-eb81-4c67-8c4b-6b1f3f045034@app.fastmail.com\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",The commit adds a BPF_JIT dependency to the HID module to prevent warnings when the JIT is disabled.,"BPF_JIT, HID, dependency",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
13c9b702e6cb8e406d5fa6b2dca422fa42d2f13e,13c9b702e6cb8e406d5fa6b2dca422fa42d2f13e,Liwei Song,liwei.song.lsong@gmail.com,1721637179,Daniel Borkmann,daniel@iogearbox.net,1721658930,649319e8d9e842ebc8abe3b7041a81a0cd197fe9,0be9ae5486cd9e767138c13638820d240713f5f1,"tools/resolve_btfids: Fix comparison of distinct pointer types warning in resolve_btfids

Add a type cast for set8->pairs to fix below compile warning:

main.c: In function 'sets_patch':
main.c:699:50: warning: comparison of distinct pointer types lacks a cast
  699 |        BUILD_BUG_ON(set8->pairs != &set8->pairs[0].id);
      |                                 ^~

Fixes: 9707ac4fe2f5 (""tools/resolve_btfids: Refactor set sorting with types from btf_ids.h"")
Signed-off-by: Liwei Song <liwei.song.lsong@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240722083305.4009723-1-liwei.song.lsong@gmail.com
",,This commit fixes a warning by adding a type cast in resolve_btfids for distinct pointer types comparison.,"type cast, pointer, warning",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
527eff227d4321c6ea453db1083bc4fdd4d3a3e8,527eff227d4321c6ea453db1083bc4fdd4d3a3e8,Linus Torvalds,torvalds@linux-foundation.org,1721609782,Linus Torvalds,torvalds@linux-foundation.org,1721609782,b8a3ac07f4ea34d19ef740487d06be6bfacaacf7,fbc90c042cd1dc7258ebfebe6d226017e5b5ac8c 67856f44da381973caf4eb692ad2cca1de7b2d37,"Merge tag 'mm-nonmm-stable-2024-07-21-15-07' of git://git.kernel.org/pub/scm/linux/kernel/git/akpm/mm

Pull non-MM updates from Andrew Morton:

 - In the series ""treewide: Refactor heap related implementation""","
   Kuan-Wei Chiu has significantly reworked the min_heap library code
   and has taught bcachefs to use the new more generic implementation.

 - Yury Norov's series ""Cleanup cpumask.h inclusion in core headers""
   reworks the cpumask and nodemask headers to make things generally
   more rational.

 - Kuan-Wei Chiu has sent along some maintenance work against our
   sorting library code in the series ""lib/sort: Optimizations and
   cleanups"".

 - More library maintainance work from Christophe Jaillet in the series
   ""Remove usage of the deprecated ida_simple_xx() API"".

 - Ryusuke Konishi continues with the nilfs2 fixes and clanups in the
   series ""nilfs2: eliminate the call to inode_attach_wb()"".

 - Kuan-Ying Lee has some fixes to the gdb scripts in the series ""Fix
   GDB command error"".

 - Plus the usual shower of singleton patches all over the place. Please
   see the relevant changelogs for details.

* tag 'mm-nonmm-stable-2024-07-21-15-07' of git://git.kernel.org/pub/scm/linux/kernel/git/akpm/mm: (98 commits)
  ia64: scrub ia64 from poison.h
  watchdog/perf: properly initialize the turbo mode timestamp and rearm counter
  tsacct: replace strncpy() with strscpy()
  lib/bch.c: use swap() to improve code
  test_bpf: convert comma to semicolon
  init/modpost: conditionally check section mismatch to __meminit*
  init: remove unused __MEMINIT* macros
  nilfs2: Constify struct kobj_type
  nilfs2: avoid undefined behavior in nilfs_cnt32_ge macro
  math: rational: add missing MODULE_DESCRIPTION() macro
  lib/zlib: add missing MODULE_DESCRIPTION() macro
  fs: ufs: add MODULE_DESCRIPTION()
  lib/rbtree.c: fix the example typo
  ocfs2: add bounds checking to ocfs2_check_dir_entry()
  fs: add kernel-doc comments to ocfs2_prepare_orphan_dir()
  coredump: simplify zap_process()
  selftests/fpu: add missing MODULE_DESCRIPTION() macro
  compiler.h: simplify data_race() macro
  build-id: require program headers to be right after ELF header
  resource: add missing MODULE_DESCRIPTION()
  ...
",[''],Merge non-MM updates including refactoring and maintenance work across various kernel components.,"refactor, maintenance, updates",It's other type of commit.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
7697a0fe0154468f5df35c23ebd7aa48994c2cdc,7697a0fe0154468f5df35c23ebd7aa48994c2cdc,Huacai Chen,chenhuacai@loongson.cn,1721486458,Huacai Chen,chenhuacai@loongson.cn,1721486458,ee025c756ca826b09b31d2bbd034d3fd7dda5829,256a6f430562c163f1fa07576c4cd4e996e953dd,"LoongArch: Define __ARCH_WANT_NEW_STAT in unistd.h

Chromium sandbox apparently wants to deny statx [1] so it could properly
inspect arguments after the sandboxed process later falls back to fstat.
Because there's currently not a ""fd-only"" version of statx"," so that the
sandbox has no way to ensure the path argument is empty without being
able to peek into the sandboxed process's memory. For architectures able
to do newfstatat though","[' glibc falls back to newfstatat after getting\n-ENOSYS for statx', ' then the respective SIGSYS handler [2] takes care of\ninspecting the path argument', "" transforming allowed newfstatat's into\nfstat instead which is allowed and has the same type of return value.\n\nBut"", ' as LoongArch is the first architecture to not have fstat nor\nnewfstatat', ' the LoongArch glibc does not attempt falling back at all\nwhen it gets -ENOSYS for statx -- and you see the problem there!\n\nActually', ' back when the LoongArch port was under review', ' people were\naware of the same problem with sandboxing clone3 [3]', ' so clone was\neventually kept. Unfortunately it seemed at that time no one had noticed\nstatx', ' so besides restoring fstat/newfstatat to LoongArch uapi (and\npostponing the problem further)', ' it seems inevitable that we would need\nto tackle seccomp deep argument inspection.\n\nHowever', "" this is obviously a decision that shouldn't be taken lightly"", '\nso we just restore fstat/newfstatat by defining __ARCH_WANT_NEW_STAT\nin unistd.h. This is the simplest solution for now', ' and so we hope the\ncommunity will tackle the long-standing problem of seccomp deep argument\ninspection in the future [4][5].\n\nAlso add ""newstat"" to syscall_abis_64 in Makefile.syscalls due to\nupstream asm-generic changes.\n\nMore infomation please reading this thread [6].\n\n[1] https://chromium-review.googlesource.com/c/chromium/src/+/2823150\n[2] https://chromium.googlesource.com/chromium/src/sandbox/+/c085b51940bd/linux/seccomp-bpf-helpers/sigsys_handlers.cc#355\n[3] https://lore.kernel.org/linux-arch/20220511211231.GG7074@brightrain.aerifal.cx/\n[4] https://lwn.net/Articles/799557/\n[5] https://lpc.events/event/4/contributions/560/attachments/397/640/deep-arg-inspection.pdf\n[6] https://lore.kernel.org/loongarch/20240226-granit-seilschaft-eccc2433014d@brauner/T/#t\n\nCc: stable@vger.kernel.org\nSigned-off-by: Huacai Chen <chenhuacai@loongson.cn>\n', '']",The commit defines __ARCH_WANT_NEW_STAT in unistd.h for LoongArch to address issues with Chromium sandbox and statx.,"LoongArch, statx, unistd.h",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
3c3ff7be9729959699eb6cbc7fd7303566d74069,3c3ff7be9729959699eb6cbc7fd7303566d74069,Linus Torvalds,torvalds@linux-foundation.org,1721448033,Linus Torvalds,torvalds@linux-foundation.org,1721448033,78bd6bd59acc53b47cb91883121b805f0e4fe8e7,3f386cb8ee9f04ff4be164ca7a1d0ef3f81f7374 9ff0251b2eb54d17fbe4f6aff50f6edfd837adb6,"Merge tag 'powerpc-6.11-1' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux

Pull powerpc updates from Michael Ellerman:

 - Remove support for 40x CPUs & platforms

 - Add support to the 64-bit BPF JIT for cpu v4 instructions

 - Fix PCI hotplug driver crash on powernv

 - Fix doorbell emulation for KVM on PAPR guests (nestedv2)

 - Fix KVM nested guest handling of some less used SPRs

 - Online NUMA nodes with no CPU/memory if they have a PCI device
   attached

 - Reduce memory overhead of enabling kfence on 64-bit Radix MMU kernels

 - Reimplement the iommu table_group_ops for pseries for VFIO SPAPR TCE

Thanks to: Anjali K", Artem Savkov,"[' Athira Rajeev', ' Breno Leitao', ' Brian\nKing', ' Celeste Liu', ' Christophe Leroy', ' Esben Haabendal', ' Gaurav Batra', '\nGautam Menghani', ' Haren Myneni', ' Hari Bathini', ' Jeff Johnson', ' Krishna\nKumar', ' Krzysztof Kozlowski', ' Nathan Lynch', ' Nicholas Piggin', ' Nick Bowler', '\nNilay Shroff', ' Rob Herring (Arm)', ' Shawn Anastasio', ' Shivaprasad G Bhat', '\nSourabh Jain', ' Srikar Dronamraju', ' Timothy Pearson', ' Uwe Kleine-König', "" and\nVaibhav Jain.\n\n* tag 'powerpc-6.11-1' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux: (57 commits)\n  Documentation/powerpc: Mention 40x is removed\n  powerpc: Remove 40x leftovers\n  macintosh/therm_windtunnel: fix module unload.\n  powerpc: Check only single values are passed to CPU/MMU feature checks\n  powerpc/xmon: Fix disassembly CPU feature checks\n  powerpc: Drop clang workaround for builtin constant checks\n  powerpc64/bpf: jit support for signed division and modulo\n  powerpc64/bpf: jit support for sign extended mov\n  powerpc64/bpf: jit support for sign extended load\n  powerpc64/bpf: jit support for unconditional byte swap\n  powerpc64/bpf: jit support for 32bit offset jmp instruction\n  powerpc/pci: Hotplug driver bridge support\n  pci/hotplug/pnv_php: Fix hotplug driver crash on Powernv\n  powerpc/configs: Update defconfig with now user-visible CONFIG_FSL_IFC\n  powerpc: add missing MODULE_DESCRIPTION() macros\n  macintosh/mac_hid: add MODULE_DESCRIPTION()\n  KVM: PPC: add missing MODULE_DESCRIPTION() macros\n  powerpc/kexec: Use of_property_read_reg()\n  powerpc/64s/radix/kfence: map __kfence_pool at page granularity\n  powerpc/pseries/iommu: Define spapr_tce_table_group_ops only with CONFIG_IOMMU_API\n  ...\n"", '']",Merge powerpc updates including removal of 40x support and improvements to 64-bit BPF JIT.,"powerpc,BPF JIT,40x CPUs",It's other type of commit.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
0be9ae5486cd9e767138c13638820d240713f5f1,0be9ae5486cd9e767138c13638820d240713f5f1,Hou Tao,houtao1@huawei.com,1720940133,Daniel Borkmann,daniel@iogearbox.net,1721402796,a8578cf3b89c777270a45c0d89697ec1f3c550a5,6caf9efaa169faea10a369dd6b36806ae6842584,bpf," events: Use prog to emit ksymbol event for main program

Since commit 0108a4e9f358 (""bpf: ensure main program has an extable"")","['\nprog->aux->func[0]->kallsyms is left as uninitialized. For BPF programs\nwith subprogs', ' the symbol for the main program is missing just as shown\nin the output of perf script below:\n\n ffffffff81284b69 qp_trie_lookup_elem+0xb9 ([kernel.kallsyms])\n ffffffffc0011125 bpf_prog_a4a0eb0651e6af8b_lookup_qp_trie+0x5d (bpf...)\n ffffffff8127bc2b bpf_for_each_array_elem+0x7b ([kernel.kallsyms])\n ffffffffc00110a1 +0x25 ()\n ffffffff8121a89a trace_call_bpf+0xca ([kernel.kallsyms])\n\nFix it by always using prog instead prog->aux->func[0] to emit ksymbol\nevent for the main program. After the fix', ' the output of perf script\nwill be correct:\n\n ffffffff81284b96 qp_trie_lookup_elem+0xe6 ([kernel.kallsyms])\n ffffffffc001382d bpf_prog_a4a0eb0651e6af8b_lookup_qp_trie+0x5d (bpf...)\n ffffffff8127bc2b bpf_for_each_array_elem+0x7b ([kernel.kallsyms])\n ffffffffc0013779 bpf_prog_245c55ab25cfcf40_qp_trie_lookup+0x25 (bpf...)\n ffffffff8121a89a trace_call_bpf+0xca ([kernel.kallsyms])\n\nFixes: 0108a4e9f358 (""bpf: ensure main program has an extable"")\nSigned-off-by: Hou Tao <houtao1@huawei.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nTested-by: Yonghong Song <yonghong.song@linux.dev>\nReviewed-by: Krister Johansen <kjlx@templeofstupid.com>\nReviewed-by: Jiri Olsa <jolsa@kernel.org>\nLink: https://lore.kernel.org/bpf/20240714065533.1112616-1-houtao@huaweicloud.com\n', '']",The commit ensures the main eBPF program emits ksymbol events using 'prog'.,"ksymbol, events, prog",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.","['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
91bd008d4e2b4962ecb9a10e40c2fb666b0aeb92,91bd008d4e2b4962ecb9a10e40c2fb666b0aeb92,Linus Torvalds,torvalds@linux-foundation.org,1721330360,Linus Torvalds,torvalds@linux-foundation.org,1721330360,c63456ce31eef7c07c1313715a0e24242bf4c92e,cb273eb7c8390c70a484db6c79a797e377db09b5 c26b1b89b8a9fd8665e79cd798bd970e233772b6,"Merge tag 'probes-v6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace

Pull probes updates from Masami Hiramatsu:
 ""Uprobes:

   - x86/shstk: Make return uprobe work with shadow stack

   - Add uretprobe syscall which speeds up the uretprobe 10-30% faster.
     This syscall is automatically used from user-space trampolines
     which are generated by the uretprobe. If this syscall is used by
     normal user program"," it will cause SIGILL. Note that this is
     currently only implemented on x86_64.

     (This also has two fixes for adjusting the syscall number to avoid
     conflict with new *attrat syscalls.)

   - uprobes/perf: fix user stack traces in the presence of pending
     uretprobe. This corrects the uretprobe's trampoline address in the
     stacktrace with correct return address

   - selftests/x86: Add a return uprobe with shadow stack test

   - selftests/bpf: Add uretprobe syscall related tests.
      - test case for register integrity check
      - test case with register changing case
      - test case for uretprobe syscall without uprobes (expected to fail)
      - test case for uretprobe with shadow stack

   - selftests/bpf: add test validating uprobe/uretprobe stack traces

   - MAINTAINERS: Add uprobes entry. This does not specify the tree but
     to clarify who maintains and reviews the uprobes

  Kprobes:

   - tracing/kprobes: Test case cleanups.

     Replace redundant WARN_ON_ONCE() + pr_warn() with WARN_ONCE() and
     remove unnecessary code from selftest

   - tracing/kprobes: Add symbol counting check when module loads.

     This checks the uniqueness of the probed symbol on modules. The
     same check has already done for kernel symbols

     (This also has a fix for build error with CONFIG_MODULES=n)

  Cleanup:

   - Add MODULE_DESCRIPTION() macros for fprobe and kprobe examples""

* tag 'probes-v6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace:
  MAINTAINERS: Add uprobes entry
  selftests/bpf: Change uretprobe syscall number in uprobe_syscall test
  uprobe: Change uretprobe syscall scope and number
  tracing/kprobes: Fix build error when find_module() is not available
  tracing/kprobes: Add symbol counting check when module loads
  selftests/bpf: add test validating uprobe/uretprobe stack traces
  perf","['uprobes: fix user stack traces in the presence of pending uretprobes\n  tracing/kprobe: Remove cleanup code unrelated to selftest\n  tracing/kprobe: Integrate test warnings into WARN_ONCE\n  selftests/bpf: Add uretprobe shadow stack test\n  selftests/bpf: Add uretprobe syscall call from user space test\n  selftests/bpf: Add uretprobe syscall test for regs changes\n  selftests/bpf: Add uretprobe syscall test for regs integrity\n  selftests/x86: Add return uprobe shadow stack test\n  uprobe: Add uretprobe syscall to speed up return probe\n  uprobe: Wire up uretprobe system call\n  x86/shstk: Make return uprobe work with shadow stack\n  samples: kprobes: add missing MODULE_DESCRIPTION() macros\n  fprobe: add missing MODULE_DESCRIPTION() macro\n', '']","Merge and update uprobes, including performance improvements and test cases, while fixing related issues on x86 architecture.","uprobes,x86_64,performance",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['kprobe/uprobe/ftrace like programs']
120f1c857a73e52132e473dee89b340440cb692b,120f1c857a73e52132e473dee89b340440cb692b,Pablo Neira Ayuso,pablo@netfilter.org,1721052882,Paolo Abeni,pabeni@redhat.com,1721292737,5effe47ddb1dd2cd68e49b975b161347bdcb705a,c14112a5574ff5cf3de198ab6eeff53ac1234068,"net: flow_dissector: use DEBUG_NET_WARN_ON_ONCE

The following splat is easy to reproduce upstream as well as in -stable
kernels. Florian Westphal provided the following commit:

  d1dab4f71d37 (""net: add and use __skb_get_hash_symmetric_net"")

but this complementary fix has been also suggested by Willem de Bruijn
and it can be easily backported to -stable kernel which consists in
using DEBUG_NET_WARN_ON_ONCE instead to silence the following splat
given __skb_get_hash() is used by the nftables tracing infrastructure to
to identify packets in traces.

[69133.561393] ------------[ cut here ]------------
[69133.561404] WARNING: CPU: 0 PID: 43576 at net/core/flow_dissector.c:1104 __skb_flow_dissect+0x134f/
[...]
[69133.561944] CPU: 0 PID: 43576 Comm: socat Not tainted 6.10.0-rc7+ #379
[69133.561959] RIP: 0010:__skb_flow_dissect+0x134f/0x2ad0
[69133.561970] Code: 83 f9 04 0f 84 b3 00 00 00 45 85 c9 0f 84 aa 00 00 00 41 83 f9 02 0f 84 81 fc ff
ff 44 0f b7 b4 24 80 00 00 00 e9 8b f9 ff ff <0f> 0b e9 20 f3 ff ff 41 f6 c6 20 0f 84 e4 ef ff ff 48 8d 7b 12 e8
[69133.561979] RSP: 0018:ffffc90000006fc0 EFLAGS: 00010246
[69133.561988] RAX: 0000000000000000 RBX: ffffffff82f33e20 RCX: ffffffff81ab7e19
[69133.561994] RDX: dffffc0000000000 RSI: ffffc90000007388 RDI: ffff888103a1b418
[69133.562001] RBP: ffffc90000007310 R08: 0000000000000000 R09: 0000000000000000
[69133.562007] R10: ffffc90000007388 R11: ffffffff810cface R12: ffff888103a1b400
[69133.562013] R13: 0000000000000000 R14: ffffffff82f33e2a R15: ffffffff82f33e28
[69133.562020] FS:  00007f40f7131740(0000) GS:ffff888390800000(0000) knlGS:0000000000000000
[69133.562027] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[69133.562033] CR2: 00007f40f7346ee0 CR3: 000000015d200001 CR4: 00000000001706f0
[69133.562040] Call Trace:
[69133.562044]  <IRQ>
[69133.562049]  ? __warn+0x9f/0x1a0
[ 1211.841384]  ? __skb_flow_dissect+0x107e/0x2860
[...]
[ 1211.841496]  ? bpf_flow_dissect+0x160/0x160
[ 1211.841753]  __skb_get_hash+0x97/0x280
[ 1211.841765]  ? __skb_get_hash_symmetric+0x230/0x230
[ 1211.841776]  ? mod_find+0xbf/0xe0
[ 1211.841786]  ? get_stack_info_noinstr+0x12/0xe0
[ 1211.841798]  ? bpf_ksym_find+0x56/0xe0
[ 1211.841807]  ? __rcu_read_unlock+0x2a/0x70
[ 1211.841819]  nft_trace_init+0x1b9/0x1c0 [nf_tables]
[ 1211.841895]  ? nft_trace_notify+0x830/0x830 [nf_tables]
[ 1211.841964]  ? get_stack_info+0x2b/0x80
[ 1211.841975]  ? nft_do_chain_arp+0x80/0x80 [nf_tables]
[ 1211.842044]  nft_do_chain+0x79c/0x850 [nf_tables]

Fixes: 9b52e3f267a6 (""flow_dissector: handle no-skb use case"")
Suggested-by: Willem de Bruijn <willemb@google.com>
Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
Reviewed-by: Willem de Bruijn <willemb@google.com>
Link: https://patch.msgid.link/20240715141442.43775-1-pablo@netfilter.org
Signed-off-by: Paolo Abeni <pabeni@redhat.com>

",,Fix net flow dissector to silence warnings by using DEBUG_NET_WARN_ON_ONCE.,"flow_dissector, DEBUG_NET_WARN_ON_ONCE, nftables",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['other']
a7526fe8b94eced7d82aa00b2bcca44e39ae0769,a7526fe8b94eced7d82aa00b2bcca44e39ae0769,Vlastimil Babka,vbabka@suse.cz,1720715730,Andrew Morton,akpm@linux-foundation.org,1721275518,9fc2d028248b9243902f34af6f5614d17f5f1e1f,7b7aca6d7c0f9b2d9400bfc57cb2b23cfbd5134d,mm," slab: put should_failslab() back behind CONFIG_SHOULD_FAILSLAB

Patch series ""revert unconditional slab and page allocator fault injection
calls"".

These two patches largely revert commits that added function call overhead
into slab and page allocation hotpaths and that cannot be currently
disabled even though related CONFIG_ options do exist.

A much more involved solution that can keep the callsites always existing
but hidden behind a static key if unused","["" is possible [1] and can be\npursued by anyone who believes it's necessary.  Meanwhile the fact the\nshould_failslab() error injection is already not functional on kernels\nbuilt with current gcc without anyone noticing [2]"", ' and lukewarm response\nto [1] suggests the need is not there.  I believe it will be more fair to\nhave the state after this series as a baseline for possible further\noptimisation', ' instead of the unconditional overhead.\n\nFor example a possible compromise for anyone who\'s fine with an empty\nfunction call overhead but not the full CONFIG_FAILSLAB /\nCONFIG_FAIL_PAGE_ALLOC overhead is to reuse patch 1 from [1] but insert a\nstatic key check only inside should_failslab() and\nshould_fail_alloc_page() before performing the more expensive checks.\n\n[1] https://lore.kernel.org/all/20240620-fault-injection-statickeys-v2-0-e23947d3d84b@suse.cz/#t\n[2] https://github.com/bpftrace/bpftrace/issues/3258\n\n\nThis patch (of 2):\n\nThis mostly reverts commit 4f6923fbb352 (""mm: make should_failslab always\navailable for fault injection"").  The commit made should_failslab() a\nnoinline function that\'s always called from the slab allocation hotpath', ""\neven if it's empty because CONFIG_SHOULD_FAILSLAB is not enabled"", ' and\nthere is no option to disable that call.  This is visible in profiles and\nthe function call overhead can be noticeable especially with cpu\nmitigations.\n\nMeanwhile the bpftrace program example in the commit silently does not\nwork without CONFIG_SHOULD_FAILSLAB anyway with a recent gcc', ' because the\nempty function gets a .constprop clone that is actually being called\n(uselessly) from the slab hotpath', "" while the error injection is hooked to\nthe original function that's not being called at all [1].\n\nThus put the whole should_failslab() function back behind\nCONFIG_SHOULD_FAILSLAB.  It's not a complete revert of 4f6923fbb352 - the\nint return type that returns -ENOMEM on failure is preserved"", ' as well\nALLOW_ERROR_INJECTION annotation.  The BTF_ID() record that was meanwhile\nadded is also guarded by CONFIG_SHOULD_FAILSLAB.\n\n[1] https://github.com/bpftrace/bpftrace/issues/3258\n\nLink: https://lkml.kernel.org/r/20240711-b4-fault-injection-reverts-v1-0-9e2651945d68@suse.cz\nLink: https://lkml.kernel.org/r/20240711-b4-fault-injection-reverts-v1-1-9e2651945d68@suse.cz\nSigned-off-by: Vlastimil Babka <vbabka@suse.cz>\nCc: Akinobu Mita <akinobu.mita@gmail.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Andrii Nakryiko <andrii@kernel.org>\nCc: Christoph Lameter <cl@linux.com>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: David Rientjes <rientjes@google.com>\nCc: Eduard Zingerman <eddyz87@gmail.com>\nCc: Hao Luo <haoluo@google.com>\nCc: Hyeonggon Yoo <42.hyeyoo@gmail.com>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: John Fastabend <john.fastabend@gmail.com>\nCc: KP Singh <kpsingh@kernel.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: Mateusz Guzik <mjguzik@gmail.com>\nCc: Roman Gushchin <roman.gushchin@linux.dev>\nCc: Song Liu <song@kernel.org>\nCc: Stanislav Fomichev <sdf@fomichev.me>\nCc: Yonghong Song <yonghong.song@linux.dev>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\n', '']",Revert slab and page allocator fault injection function call overhead to improve performance by using static key solution.,"revert, allocator, static key",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
6e504d2c61244a01226c5100c835e44fb9b85ca8,6e504d2c61244a01226c5100c835e44fb9b85ca8,Linus Torvalds,torvalds@linux-foundation.org,1721262511,Linus Torvalds,torvalds@linux-foundation.org,1721262511,cc11be99475aa130e1081a4df2608e815fb9a6ef,221fd1e154ee533c529280bd3866570c086ec792 30b866413e7bdd507a79854b5931528d3f6f438f,"Merge tag 'for-linus-2024071601' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid

Pull HID updates from Benjamin Tissoires:

 - rewrite of the HID-BPF internal implementation to use bpf struct_ops
   instead of a tracing endpoint (Benjamin Tissoires)

 - add two new HID-BPF hooks to be able to intercept userspace calls
   targeting a HID device and filtering them (Benjamin Tissoires)

 - add support for various new devices through HID-BPF filters (Benjamin
   Tissoires)

 - add support for the magic keyboard backlight (Orlando Chamberlain)

 - add the missing MODULE_DESCRIPTION() macros in HID drivers (Jeff
   Johnson)

 - use of kvzalloc in case memory gets too fragmented (Hailong Liu)

 - retrieve the device firmware node in the child HID device (Danny
   Kaehn)

 - some hid-uclogic improvements (José Expósito)

 - some more typos", trivial fixes,"[' kernel doctext and unused functions\n   cleanups\n\n* tag \'for-linus-2024071601\' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid: (60 commits)\n  HID: hid-steam: Fix typo in goto label\n  HID: mcp2221: Remove unnecessary semicolon\n  HID: Fix spelling mistakes ""Kensigton"" -> ""Kensington""\n  HID: add more missing MODULE_DESCRIPTION() macros\n  HID: samples: fix the 2 struct_ops definitions\n  HID: fix for amples in for-6.11/bpf\n  HID: apple: Add support for magic keyboard backlight on T2 Macs\n  HID: bpf: Thrustmaster TCA Yoke Boeing joystick fix\n  HID: bpf: Add Huion Dial 2 bpf fixup\n  HID: bpf: Add support for the XP-PEN Deco Mini 4\n  HID: bpf: move the BIT() macro to hid_bpf_helpers.h\n  HID: bpf: add a driver for the Huion Inspiroy 2S (H641P)\n  HID: bpf: Add a HID report composition helper macros\n  HID: bpf: doc fixes for hid_hw_request() hooks\n  HID: bpf: doc fixes for hid_hw_request() hooks\n  HID: bpf: fix gcc warning and unify __u64 into u64\n  selftests/hid: ensure CKI can compile our new tests on old kernels\n  selftests/hid: add an infinite loop test for hid_bpf_try_input_report\n  selftests/hid: add another test for injecting an event from an event hook\n  HID: bpf: allow hid_device_event hooks to inject input reports on self\n  ...\n', '']",Merge HID updates including HID-BPF implementation changes and device support additions.,"HID-BPF, hooks, struct_ops",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
6caf9efaa169faea10a369dd6b36806ae6842584,6caf9efaa169faea10a369dd6b36806ae6842584,Michal Luczaj,mhal@rbox.co,1720899701,Daniel Borkmann,daniel@iogearbox.net,1721249515,6f122634b50b53b7585557f080bd02946cb006b3,0befb349c4cdcc4e3c2f4aff81259a3a58c3b33e,"selftests/bpf: Test sockmap redirect for AF_UNIX MSG_OOB

Verify that out-of-band packets are silently dropped before they reach the
redirection logic.

The idea is to test with a 2 byte long send(). Should a MSG_OOB flag be in
use"," only the last byte will be treated as out-of-band. Test fails if
verd_mapfd indicates a wrong number of packets processed (e.g. if OOB
wasn't dropped at the source) or if it was possible to recv() MSG_OOB from
the mapped socket","[' or if any stale OOB data have been left reachable from\nthe unmapped socket.\n\nSigned-off-by: Michal Luczaj <mhal@rbox.co>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nTested-by: Jakub Sitnicki <jakub@cloudflare.com>\nReviewed-by: Jakub Sitnicki <jakub@cloudflare.com>\nLink: https://lore.kernel.org/bpf/20240713200218.2140950-5-mhal@rbox.co\n', '']",Add a test to verify MSG_OOB packet handling in sockmap redirection for AF_UNIX.,"sockmap, MSG_OOB, AF_UNIX",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
0befb349c4cdcc4e3c2f4aff81259a3a58c3b33e,0befb349c4cdcc4e3c2f4aff81259a3a58c3b33e,Michal Luczaj,mhal@rbox.co,1720899700,Daniel Borkmann,daniel@iogearbox.net,1721249510,73223992fce2ab03811538885eff6320e234a070,1b0ad43177c097d38b967b99c2b71d8be28b0223,"selftests/bpf: Parametrize AF_UNIX redir functions to accept send() flags

Extend pairs_redir_to_connected() and unix_inet_redir_to_connected() with a
send_flags parameter. Replace write() with send() allowing packets to be
sent as MSG_OOB.

Signed-off-by: Michal Luczaj <mhal@rbox.co>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
Link: https://lore.kernel.org/bpf/20240713200218.2140950-4-mhal@rbox.co
",,"The commit parametrizes AF_UNIX redirection functions to accept send() flags, allowing packets to be sent as MSG_OOB.","AF_UNIX,send_flags,selftests",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
1b0ad43177c097d38b967b99c2b71d8be28b0223,1b0ad43177c097d38b967b99c2b71d8be28b0223,Michal Luczaj,mhal@rbox.co,1720899699,Daniel Borkmann,daniel@iogearbox.net,1721249505,d761807f5083c5ee76e7ade2d22fc81d146d8b0f,638f32604385fd23059985da8de918e9c18f0b98,"selftests/bpf: Support SOCK_STREAM in unix_inet_redir_to_connected()

Function ignores the AF_UNIX socket type argument"," SOCK_DGRAM is hardcoded.
Fix to respect the argument provided.

Fixes: 75e0e27db6cf (""selftest/bpf: Change udp to inet in some function names"")
Suggested-by: Jakub Sitnicki <jakub@cloudflare.com>
Signed-off-by: Michal Luczaj <mhal@rbox.co>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
Link: https://lore.kernel.org/bpf/20240713200218.2140950-3-mhal@rbox.co
",[''],The commit modifies selftests to support both SOCK_STREAM and SOCK_DGRAM types in unix_inet_redir_to_connected().,"SOCK_STREAM, selftests, bpf",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
638f32604385fd23059985da8de918e9c18f0b98,638f32604385fd23059985da8de918e9c18f0b98,Michal Luczaj,mhal@rbox.co,1720899698,Daniel Borkmann,daniel@iogearbox.net,1721249340,0359b72764f0b588b15cf7f4d11bc0d89fb79ed1,3c870059e9f8897c032f4256f90c41ee822218a8,"af_unix: Disable MSG_OOB handling for sockets in sockmap/sockhash

AF_UNIX socket tracks the most recent OOB packet (in its receive queue)
with an `oob_skb` pointer. BPF redirecting does not account for that: when
an OOB packet is moved between sockets"," `oob_skb` is left outdated. This
results in a single skb that may be accessed from two different sockets.

Take the easy way out: silently drop MSG_OOB data targeting any socket that
is in a sockmap or a sockhash. Note that such silent drop is akin to the
fate of redirected skb's scm_fp_list (SCM_RIGHTS","[' SCM_CREDENTIALS).\n\nFor symmetry', ' forbid MSG_OOB in unix_bpf_recvmsg().\n\nFixes: 314001f0bf92 (""af_unix: Add OOB support"")\nSuggested-by: Kuniyuki Iwashima <kuniyu@amazon.com>\nSigned-off-by: Michal Luczaj <mhal@rbox.co>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nTested-by: Jakub Sitnicki <jakub@cloudflare.com>\nReviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>\nReviewed-by: Jakub Sitnicki <jakub@cloudflare.com>\nLink: https://lore.kernel.org/bpf/20240713200218.2140950-2-mhal@rbox.co\n', '']",The commit disables MSG_OOB handling for sockets in sockmap/sockhash to prevent outdated data issues.,"MSG_OOB, sockmap, sockhash",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF maps,['socket like programs']
3c870059e9f8897c032f4256f90c41ee822218a8,3c870059e9f8897c032f4256f90c41ee822218a8,Donald Hunter,donald.hunter@gmail.com,1721223908,Daniel Borkmann,daniel@iogearbox.net,1721249158,47ea1aa6a40ff57e46f7ce300b2ae8bb545ae0cb,189f1a976e426011e6a5588f1d3ceedf71fe2965,"bpftool: Fix typo in usage help

The usage help for ""bpftool prog help"" contains a ° instead of the _
symbol for cgroup/sendmsg_unix. Fix the typo.

Fixes: 8b3cba987e6d (""bpftool: Add support for cgroup unix socket address hooks"")
Signed-off-by: Donald Hunter <donald.hunter@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Quentin Monnet <qmo@kernel.org>
Link: https://lore.kernel.org/bpf/20240717134508.77488-1-donald.hunter@gmail.com
",,Fix typo in bpftool usage help for cgroup/sendmsg_unix by replacing ° with _ symbol.,"bpftool, typo, cgroup",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The bpftool utility,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
189f1a976e426011e6a5588f1d3ceedf71fe2965,189f1a976e426011e6a5588f1d3ceedf71fe2965,Andrii Nakryiko,andrii@kernel.org,1720824282,Daniel Borkmann,daniel@iogearbox.net,1721248967,80d4fa37a7984a61ed3911cf4e6043bc797b2c66,c638b130e83e4aa47031c0e51455ecc961dfdc3d,"libbpf: Fix no-args func prototype BTF dumping syntax

For all these years libbpf's BTF dumper has been emitting not strictly
valid syntax for function prototypes that have no input arguments.

Instead of `int (*blah)()` we should emit `int (*blah)(void)`.

This is not normally a problem"," but it manifests when we get kfuncs in
vmlinux.h that have no input arguments. Due to compiler internal
specifics","[' we get no BTF information for such kfuncs', ' if they are not\ndeclared with proper `(void)`.\n\nThe fix is trivial. We also need to adjust a few ancient tests that\nhappily assumed `()` is correct.\n\nFixes: 351131b51c7a (""libbpf: add btf_dump API for BTF-to-C conversion"")\nReported-by: Tejun Heo <tj@kernel.org>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Stanislav Fomichev <sdf@fomichev.me>\nLink: https://lore.kernel.org/bpf/20240712224442.282823-1-andrii@kernel.org\n', '']",Fixes BTF dumping syntax for no-args function prototypes in libbpf.,"BTF,idump,syntax",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
c638b130e83e4aa47031c0e51455ecc961dfdc3d,c638b130e83e4aa47031c0e51455ecc961dfdc3d,Naveen N Rao,naveen@kernel.org,1720946064,Daniel Borkmann,daniel@iogearbox.net,1721237238,b7f7a41e935c6b888d92f9c3f4e528a1acf8f1e9,afcc8e1ef7bb5c14100ba3e6ccfd4baebc80242e,"MAINTAINERS: Update powerpc BPF JIT maintainers

Hari Bathini has been updating and maintaining the powerpc BPF JIT since
a while now. Christophe Leroy has been doing the same for 32-bit
powerpc. Add them as maintainers for the powerpc BPF JIT.

I am no longer actively looking into the powerpc BPF JIT. Change my role
to that of a reviewer so that I can help with the odd query.

Signed-off-by: Naveen N Rao <naveen@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Acked-by: Christophe Leroy <christophe.leroy@csgroup.eu>
Acked-by: Hari Bathini <hbathini@linux.ibm.com>
Link: https://lore.kernel.org/bpf/24fea21d9d4458973aadd6a02bb1bf558b8bd0b2.1720944897.git.naveen@kernel.org
",,The commit updates maintainers for the powerpc BPF JIT in the MAINTAINERS file.,"powerpc BPF JIT, maintainers, MAINTAINERS file",It's other type of commit.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
afcc8e1ef7bb5c14100ba3e6ccfd4baebc80242e,afcc8e1ef7bb5c14100ba3e6ccfd4baebc80242e,Naveen N Rao,naveen@kernel.org,1720946063,Daniel Borkmann,daniel@iogearbox.net,1721237238,ba0f83a7d55ec71e46dd16ae07ccd0bfe1fb825b,e1ef78dce9b7b0fa7f9d88bb3554441d74d33b34,"MAINTAINERS: Update email address of Naveen

I have switched to using my @kernel.org id for my contributions. Update
MAINTAINERS and mailmap to reflect the same.

Signed-off-by: Naveen N Rao <naveen@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Link: https://lore.kernel.org/bpf/fb6ef126771c70538067709af69d960da3560ce7.1720944897.git.naveen@kernel.org
",,The commit updates the MAINTAINERS file with a new email address for Naveen N Rao.,email update MAINTAINERS,It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
e1ef78dce9b7b0fa7f9d88bb3554441d74d33b34,e1ef78dce9b7b0fa7f9d88bb3554441d74d33b34,Puranjay Mohan,puranjay@kernel.org,1721064807,Daniel Borkmann,daniel@iogearbox.net,1721236964,30d09e5eee781120345ae48d102d4980262b20d8,0e03c643dc9389e61fa484562dae58c8d6e96d63,"selftests/bpf: fexit_sleep: Fix stack allocation for arm64

On ARM64 the stack pointer should be aligned at a 16 byte boundary or
the SPAlignmentFault can occur. The fexit_sleep selftest allocates the
stack for the child process as a character array"," this is not guaranteed
to be aligned at 16 bytes.

Because of the SPAlignmentFault","[' the child process is killed before it\ncan do the nanosleep call and hence fentry_cnt remains as 0. This causes\nthe main thread to hang on the following line:\n\nwhile (READ_ONCE(fexit_skel->bss->fentry_cnt) != 2);\n\nFix this by allocating the stack using mmap() as described in the\nexample in the man page of clone().\n\nRemove the fexit_sleep test from the DENYLIST of arm64.\n\nFixes: eddbe8e65214 (""selftest/bpf: Add a test to check trampoline freeing logic."")\nSigned-off-by: Puranjay Mohan <puranjay@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240715173327.8657-1-puranjay@kernel.org\n', '']",Fixes stack alignment issue in fexit_sleep selftest on ARM64 to prevent SPAlignmentFault.,"fexit_sleep, ARM64, stack alignment",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['tracepoints like programs']
51835949dda3783d4639cfa74ce13a3c9829de00,51835949dda3783d4639cfa74ce13a3c9829de00,Linus Torvalds,torvalds@linux-foundation.org,1721183314,Linus Torvalds,torvalds@linux-foundation.org,1721183314,2b593de5eba6ecc73f7c58fc65fdaffae45c7323,0434dbe32053d07d658165be681505120c6b1abc 77ae5e5b00720372af2860efdc4bc652ac682696,"Merge tag 'net-next-6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next

Pull networking updates from Jakub Kicinski:
 ""Not much excitement - a handful of large patchsets (devmem among them)
  did not make it in time.

  Core & protocols:

   - Use local_lock in addition to local_bh_disable() to protect per-CPU
     resources in networking"," a step closer for local_bh_disable() not
     to act as a big lock on PREEMPT_RT

   - Use flex array for netdevice priv area","["" ensure its cache alignment\n\n   - Add a sysctl knob to allow user to specify a default rto_min at\n     socket init time. Bit of a big hammer but multiple companies were\n     independently carrying such patch downstream so clearly it's useful\n\n   - Support scheduling transmission of packets based on CLOCK_TAI\n\n   - Un-pin TCP TIMEWAIT timer to avoid it firing on CPUs later cordoned\n     off using cpusets\n\n   - Support multiple L2TPv3 UDP tunnels using the same 5-tuple address\n\n   - Allow configuration of multipath hash seed"", ' to both allow\n     synchronizing hashing of two routers', ' and preventing partial\n     accidental sync\n\n   - Improve TCP compliance with RFC 9293 for simultaneous connect()\n\n   - Support sending NAT keepalives in IPsec ESP in UDP states.\n     Userspace IKE daemon had to do this before', ' but the kernel can\n     better keep track of it\n\n   - Support sending supervision HSR frames with MAC addresses stored in\n     ProxyNodeTable when RedBox (i.e. HSR-SAN) is enabled\n\n   - Introduce IPPROTO_SMC for selecting SMC when socket is created\n\n   - Allow UDP GSO transmit from devices with no checksum offload\n\n   - openvswitch: add packet sampling via psample', ' separating the\n     sampled traffic from ""upcall"" packets sent to user space for\n     forwarding\n\n   - nf_tables: shrink memory consumption for transaction objects\n\n  Things we sprinkled into general kernel code:\n\n   - Power Sequencing subsystem (used by Qualcomm Bluetooth driver for\n     QCA6390)           [ Already merged separately - Linus ]\n\n   - Add IRQ information in sysfs for auxiliary bus\n\n   - Introduce guard definition for local_lock\n\n   - Add aligned flavor of __cacheline_group_{begin', ' end}() markings for\n     grouping fields in structures\n\n  BPF:\n\n   - Notify user space (via epoll) when a struct_ops object is getting\n     detached/unregistered\n\n   - Add new kfuncs for a generic', ' open-coded bits iterator\n\n   - Enable BPF programs to declare arrays of kptr', ' bpf_rb_root', ' and\n     bpf_list_head\n\n   - Support resilient split BTF which cuts down on duplication and\n     makes BTF as compact as possible WRT BTF from modules\n\n   - Add support for dumping kfunc prototypes from BTF which enables\n     both detecting as well as dumping compilable prototypes for kfuncs\n\n   - riscv64 BPF JIT improvements in particular to add 12-argument\n     support for BPF trampolines and to utilize bpf_prog_pack for the\n     latter\n\n   - Add the capability to offload the netfilter flowtable in XDP layer\n     through kfuncs\n\n  Driver API:\n\n   - Allow users to configure IRQ tresholds between which automatic IRQ\n     moderation can choose\n\n   - Expand Power Sourcing (PoE) status with power', ' class and failure\n     reason. Support setting power limits\n\n   - Track additional RSS contexts in the core', "" make sure configuration\n     changes don't break them\n\n   - Support IPsec crypto offload for IPv6 ESP and IPv4 UDP-encapsulated\n     ESP data paths\n\n   - Support updating firmware on SFP modules\n\n  Tests and tooling:\n\n   - mptcp: use net/lib.sh to manage netns\n\n   - TCP-AO and TCP-MD5: replace debug prints used by tests with\n     tracepoints\n\n   - openvswitch: make test self-contained (don't depend on OvS CLI\n     tools)\n\n  Drivers:\n\n   - Ethernet high-speed NICs:\n      - Broadcom (bnxt):\n         - increase the max total outstanding PTP TX packets to 4\n         - add timestamping statistics support\n         - implement netdev_queue_mgmt_ops\n         - support new RSS context API\n      - Intel (100G"", ' ice', ' idpf):\n         - implement FEC statistics and dumping signal quality indicators\n         - support E825C products (with 56Gbps PHYs)\n      - nVidia/Mellanox:\n         - support HW-GRO\n         - mlx4/mlx5: support per-queue statistics via netlink\n         - obey the max number of EQs setting in sub-functions\n      - AMD/Solarflare:\n         - support new RSS context API\n      - AMD/Pensando:\n         - ionic: rework fix for doorbell miss to lower overhead and\n           skip it on new HW\n      - Wangxun:\n         - txgbe: support Flow Director perfect filters\n\n   - Ethernet NICs consumer', "" embedded and virtual:\n      - Add driver for Tehuti Networks TN40xx chips\n      - Add driver for Meta's internal NIC chips\n      - Add driver for Ethernet MAC on Airoha EN7581 SoCs\n      - Add driver for Renesas Ethernet-TSN devices\n      - Google cloud vNIC:\n         - flow steering support\n      - Microsoft vNIC:\n         - support page sizes other than 4KB on ARM64\n      - vmware vNIC:\n         - support latency measurement (update to version 9)\n      - VirtIO net:\n         - support for Byte Queue Limits\n         - support configuring thresholds for automatic IRQ moderation\n         - support for AF_XDP Rx zero-copy\n      - Synopsys (stmmac):\n         - support for STM32MP13 SoC\n         - let platforms select the right PCS implementation\n      - TI:\n         - icssg-prueth: add multicast filtering support\n         - icssg-prueth: enable PTP timestamping and PPS\n      - Renesas:\n         - ravb: improve Rx performance 30-400% by using page pool"", ""\n           theaded NAPI and timer-based IRQ coalescing\n         - ravb: add MII support for R-Car V4M\n      - Cadence (macb):\n         - macb: add ARP support to Wake-On-LAN\n      - Cortina:\n         - use phylib for RX and TX pause configuration\n\n   - Ethernet switches:\n      - nVidia/Mellanox:\n         - support configuration of multipath hash seed\n         - report more accurate max MTU\n         - use page_pool to improve Rx performance\n      - MediaTek:\n         - mt7530: add support for bridge port isolation\n      - Qualcomm:\n         - qca8k: add support for bridge port isolation\n      - Microchip:\n         - lan9371/2: add 100BaseTX PHY support\n      - NXP:\n         - vsc73xx: implement VLAN operations\n\n   - Ethernet PHYs:\n      - aquantia: enable support for aqr115c\n      - aquantia: add support for PHY LEDs\n      - realtek: add support for rtl8224 2.5Gbps PHY\n      - xpcs: add memory-mapped device support\n      - add BroadR-Reach link mode and support in Broadcom's PHY driver\n\n   - CAN:\n      - add document for ISO 15765-2 protocol support\n      - mcp251xfd: workaround for erratum DS80000789E"", ' use timestamps to\n        catch when device returns incorrect FIFO status\n\n   - WiFi:\n      - mac80211/cfg80211:\n         - parse Transmit Power Envelope (TPE) data in mac80211 instead\n           of in drivers\n         - improvements for 6 GHz regulatory flexibility\n         - multi-link improvements\n         - support multiple radios per wiphy\n         - remove DEAUTH_NEED_MGD_TX_PREP flag\n      - Intel (iwlwifi):\n         - bump FW API to 91 for BZ/SC devices\n         - report 64-bit radiotap timestamp\n         - enable P2P low latency by default\n         - handle Transmit Power Envelope (TPE) advertised by AP\n         - remove support for older FW for new devices\n         - fast resume (keeping the device configured)\n         - mvm: re-enable Multi-Link Operation (MLO)\n         - aggregation (A-MSDU) optimizations\n      - MediaTek (mt76):\n         - mt7925 Multi-Link Operation (MLO) support\n      - Qualcomm (ath10k):\n         - LED support for various chipsets\n      - Qualcomm (ath12k):\n         - remove unsupported Tx monitor handling\n         - support channel 2 in 6 GHz band\n         - support Spatial Multiplexing Power Save (SMPS) in 6 GHz band\n         - supprt multiple BSSID (MBSSID) and Enhanced Multi-BSSID\n           Advertisements (EMA)\n         - support dynamic VLAN\n         - add panic handler for resetting the firmware state\n         - DebugFS support for datapath statistics\n         - WCN7850: support for Wake on WLAN\n      - Microchip (wilc1000):\n         - read MAC address during probe to make it visible to user space\n         - suspend/resume improvements\n      - TI (wl18xx):\n         - support newer firmware versions\n      - RealTek (rtw89):\n         - preparation for RTL8852BE-VT support\n         - Wake on WLAN support for WiFi 6 chips\n         - 36-bit PCI DMA support\n      - RealTek (rtlwifi):\n         - RTL8192DU support\n      - Broadcom (brcmfmac):\n         - Management Frame Protection support (to enable WPA3)\n\n   - Bluetooth:\n      - qualcomm: use the power sequencer for QCA6390\n      - btusb: mediatek: add ISO data transmission functions\n      - hci_bcm4377: add BCM4388 support\n      - btintel: add support for BlazarU core\n      - btintel: add support for Whale Peak2\n      - btnxpuart: add support for AW693 A1 chipset\n      - btnxpuart: add support for IW615 chipset\n      - btusb: add Realtek RTL8852BE support ID 0x13d3:0x3591""\n\n* tag \'net-next-6.11\' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next: (1589 commits)\n  eth: fbnic: Fix spelling mistake ""tiggerring"" -> ""triggering""\n  tcp: Replace strncpy() with strscpy()\n  wifi: ath12k: fix build vs old compiler\n  tcp: Don\'t access uninit tcp_rsk(req)->ao_keyid in tcp_create_openreq_child().\n  eth: fbnic: Write the TCAM tables used for RSS control and Rx to host\n  eth: fbnic: Add L2 address programming\n  eth: fbnic: Add basic Rx handling\n  eth: fbnic: Add basic Tx handling\n  eth: fbnic: Add link detection\n  eth: fbnic: Add initial messaging to notify FW of our presence\n  eth: fbnic: Implement Rx queue alloc/start/stop/free\n  eth: fbnic: Implement Tx queue alloc/start/stop/free\n  eth: fbnic: Allocate a netdevice and napi vectors with queues\n  eth: fbnic: Add FW communication mechanism\n  eth: fbnic: Add message parsing for FW messages\n  eth: fbnic: Add register init to set PCIe/Ethernet device config\n  eth: fbnic: Allocate core device specific structures and devlink interface\n  eth: fbnic: Add scaffolding for Meta\'s NIC driver\n  PCI: Add Meta Platforms vendor ID\n  net/sched: cls_flower: propagate tca[TCA_OPTIONS] to NL_REQ_ATTR_CHECK\n  ...\n', '']","Merge networking updates, including local_lock improvements for per-CPU resources and flex array usage for netdevice.","networking updates, local_lock, flex array",It's other type of commit.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
d80f2996b8502779c39221a9e7c9ea7e361c0ae4,d80f2996b8502779c39221a9e7c9ea7e361c0ae4,Linus Torvalds,torvalds@linux-foundation.org,1721156943,Linus Torvalds,torvalds@linux-foundation.org,1721156943,339db3f28a684bb7c674d32d62fc2c0f14f935f4,a5db8e4544a4dc7143f30a1438686a4d5fa6d775 1a7b7326d587c9a5e8ff067e70d6aaf0333f4bb3,"Merge tag 'asm-generic-6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/arnd/asm-generic

Pull asm-generic updates from Arnd Bergmann:
 ""Most of this is part of my ongoing work to clean up the system call
  tables. In this bit"," all of the newer architectures are converted to
  use the machine readable syscall.tbl format instead in place of
  complex macros in include/uapi/asm-generic/unistd.h.

  This follows an earlier series that fixed various API mismatches and
  in turn is used as the base for planned simplifications.

  The other two patches are dead code removal and a warning fix""

* tag 'asm-generic-6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/arnd/asm-generic:
  vmlinux.lds.h: catch .bss..L* sections into BSS"")
  fixmap: Remove unused set_fixmap_offset_io()
  riscv: convert to generic syscall table
  openrisc: convert to generic syscall table
  nios2: convert to generic syscall table
  loongarch: convert to generic syscall table
  hexagon: use new system call table
  csky: convert to generic syscall table
  arm64: rework compat syscall macros
  arm64: generate 64-bit syscall.tbl
  arm64: convert unistd_32.h to syscall.tbl format
  arc: convert to generic syscall table
  clone3: drop __ARCH_WANT_SYS_CLONE3 macro
  kbuild: add syscall table generation to scripts/Makefile.asm-headers
  kbuild: verify asm-generic header list
  loongarch: avoid generating extra header files
  um: don't generate asm/bpf_perf_event.h
  csky: drop asm/gpio.h wrapper
  syscalls: add generic scripts/syscall.tbl
",[''],Merge asm-generic updates for syscall table conversion and cleanup.,"asm-generic, syscall, cleanup",It's a build system or CI/CD change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
30b866413e7bdd507a79854b5931528d3f6f438f,30b866413e7bdd507a79854b5931528d3f6f438f,Benjamin Tissoires,bentiss@kernel.org,1721125646,Benjamin Tissoires,bentiss@kernel.org,1721125646,59013deb24680a3c0d34fb5163916c442c7b28b1,e518f368303d35017fe79f21f0fec7860ef71d0b a67a1deb11d9a692366100d9ba9fb3aeb0c7707b,"Merge branch 'for-6.11/bpf' into for-linus

- Rewrite of HID-BPF internal implementation to use bpf struct_ops
  instead of tracing (Benjamin Tissoires)
- Add new HID-BPF hooks to be able to intercept userspace calls
  targetting a HID device and filtering them (Benjamin Tissoires)
- Add support for various new devices through HID-BPF filters (Benjamin
  Tissoires)
",,Refactor HID-BPF implementation to use struct_ops and add hooks for intercepting userspace calls and supporting new devices.,"HID-BPF, struct_ops, hooks",It's a new feature.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",The helper and kfuncs,['HID driver like programs']
c49379dcda748adb8ba84d7a8eb3b02d4f1ebfcf,c49379dcda748adb8ba84d7a8eb3b02d4f1ebfcf,Jakub Kicinski,kuba@kernel.org,1721051719,Jakub Kicinski,kuba@kernel.org,1721051720,d10707048f34caa3105018b973e4dae679877ade,a8ea8d531d1edf7b29e559713fe1aaab3530d7d9 259a7061c2f14bbf5845598f69ac63cdb77d6346,"Merge branch 'net-dsa-vsc73xx-implement-vlan-operations'

Pawel Dembicki says:

====================
net: dsa: vsc73xx: Implement VLAN operations

This patch series is a result of splitting a larger patch series [0]","
where some parts was merged before.

The first patch implements port state configuration","[' which is required\nfor bridge functionality. STP frames are not forwarded at this moment.\nBPDU frames are only forwarded from/to the PI/SI interface.\nFor more information', ' see chapter 2.7.1 (CPU Forwarding) in the\ndatasheet.\n\nPatches 2', ' 7-9 and 11 provide a basic implementation of tag_8021q\nfunctionality with QinQ support', ' without VLAN filtering in\nthe bridge and simple VLAN awareness in VLAN filtering mode.\n\nPatches 3-6 came from Vladimir Oltean. They prepare for making\ntag8021q more common. VSC73XX uses very similar tag recognition', ""\nand some code from tag_sja1105 could be moved to tag_8021q for\ncommon use.\n\nPatch 10 is preparation for use tag_8021q bridge functions as generic\nimplementation of the 'ds->ops->port_bridge_*()'.\n\nPatch 12 is required to avoid problem with learning on standalone ports.\n\n[0] https://patchwork.kernel.org/project/netdevbpf/list/?series=841034&state=%2A&archive=both\n====================\n\nLink: https://patch.msgid.link/20240713211620.1125910-1-paweldembicki@gmail.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n"", '']",Merges branch 'net-dsa-vsc73xx-implement-vlan-operations' to add VLAN operations to VSC73XX.,"VLAN,DSA,VSC73XX",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
3e301b431b91e4b973dbc520e90e220acb5b91f5,3e301b431b91e4b973dbc520e90e220acb5b91f5,Jiri Olsa,jolsa@kernel.org,1720792348,Masami Hiramatsu (Google),mhiramat@kernel.org,1721022590,ea8407d298681c4e584e49031605ef35db224f0f,63ded110979bdd8741542ec66fb9e2d2074aed8c,"selftests/bpf: Change uretprobe syscall number in uprobe_syscall test

Fixing the syscall number value.

Link: https://lore.kernel.org/all/20240712135228.1619332-3-jolsa@kernel.org/

Fixes: 9e7f74e64ae5 (""selftests/bpf: Add uretprobe syscall call from user space test"")
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
",,The commit updates the syscall number in the uprobe_syscall BPF self-test.,"syscall, uprobe, self-test",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['kprobe/uprobe/ftrace like programs']
41d4a174201e62fc95562dc8e53097baf8568f24,41d4a174201e62fc95562dc8e53097baf8568f24,Xuan Zhuo,xuanzhuo@linux.alibaba.com,1720437928,Jakub Kicinski,kuba@kernel.org,1721014357,870f6d63337b2b36a3b663e7236866bee58948c6,e6c29506b2ec94e634819c03445ffe9eb350caed,"virtio_net: replace VIRTIO_XDP_HEADROOM by XDP_PACKET_HEADROOM

virtio net has VIRTIO_XDP_HEADROOM that is equal to
XDP_PACKET_HEADROOM to calculate the headroom for xdp.

But here we should use the macro XDP_PACKET_HEADROOM from bpf.h to
calculate the headroom for xdp. So here we remove the
VIRTIO_XDP_HEADROOM"," and use the XDP_PACKET_HEADROOM to replace it.

Signed-off-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
Acked-by: Jason Wang <jasowang@redhat.com>
Acked-by: Michael S. Tsirkin <mst@redhat.com>
Link: https://patch.msgid.link/20240708112537.96291-2-xuanzhuo@linux.alibaba.com
Signed-off-by: Jakub Kicinski <kuba@kernel.org>
",[''],Replace VIRTIO_XDP_HEADROOM with XDP_PACKET_HEADROOM to calculate XDP headroom in virtio_net.,"virtio_net,XDP headroom,macro replacement",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['xdp like programs']
22767eecd62f7bb5c83541c291297cf24326a997,22767eecd62f7bb5c83541c291297cf24326a997,Jakub Kicinski,kuba@kernel.org,1720910658,Jakub Kicinski,kuba@kernel.org,1720910658,1a6ece592e84f79710f4fa50e8b0fe89116a784a,f7023b3d697c6a7dfe2d9c70e0d8c2c580ccbd76 4b66be76a6fbe16918a01439bb9023da154d7694,"Merge branch 'mlx5-misc-2023-07-08-sf-max-eq'

Saeed Mahameed says:

====================
mlx5 misc 2023-07-08 (sf max eq)

Link: https://patchwork.kernel.org/project/netdevbpf/patch/20240708080025.1593555-2-tariqt@nvidia.com/
====================

Link: https://patch.msgid.link/20240712003310.355106-1-saeed@kernel.org
Signed-off-by: Jakub Kicinski <kuba@kernel.org>
",,This commit merges the 'mlx5 misc 2023-07-08 sf max eq' branch into the main codebase.,"mlx5, merge, kernel",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
23e89e8ee7be73e21200947885a6d3a109a2c58d,23e89e8ee7be73e21200947885a6d3a109a2c58d,Kuniyuki Iwashima,kuniyu@amazon.com,1720631565,Jakub Kicinski,kuba@kernel.org,1720909189,0d83add45f01a57bad4865f978d3d88796230d97,42ffe242860c401c34c62aa369c2add341a6eece,"tcp: Don't drop SYN+ACK for simultaneous connect().

RFC 9293 states that in the case of simultaneous connect()"," the connection
gets established when SYN+ACK is received. [0]

      TCP Peer A                                       TCP Peer B

  1.  CLOSED                                           CLOSED
  2.  SYN-SENT     --> <SEQ=100><CTL=SYN>              ...
  3.  SYN-RECEIVED <-- <SEQ=300><CTL=SYN>              <-- SYN-SENT
  4.               ... <SEQ=100><CTL=SYN>              --> SYN-RECEIVED
  5.  SYN-RECEIVED --> <SEQ=100><ACK=301><CTL=SYN","['ACK> ...\n  6.  ESTABLISHED  <-- <SEQ=300><ACK=101><CTL=SYN', 'ACK> <-- SYN-RECEIVED\n  7.               ... <SEQ=100><ACK=301><CTL=SYN', 'ACK> --> ESTABLISHED\n\nHowever', ' since commit 0c24604b68fc (""tcp: implement RFC 5961 4.2"")', ' such a\nSYN+ACK is dropped in tcp_validate_incoming() and responded with Challenge\nACK.\n\nFor example', ' the write() syscall in the following packetdrill script fails\nwith -EAGAIN', ' and wrong SNMP stats get incremented.\n\n   0 socket(...', ' SOCK_STREAM|SOCK_NONBLOCK', ' IPPROTO_TCP) = 3\n  +0 connect(3', ' ...', ' ...) = -1 EINPROGRESS (Operation now in progress)\n\n  +0 > S  0:0(0) <mss 1460', 'sackOK', 'TS val 1000 ecr 0', 'nop', 'wscale 8>\n  +0 < S  0:0(0) win 1000 <mss 1000>\n  +0 > S. 0:0(0) ack 1 <mss 1460', 'sackOK', 'TS val 3308134035 ecr 0', 'nop', 'wscale 8>\n  +0 < S. 0:0(0) ack 1 win 1000\n\n  +0 write(3', ' ...', "" 100) = 100\n  +0 > P. 1:101(100) ack 1\n\n  --\n\n  # packetdrill cross-synack.pkt\n  cross-synack.pkt:13: runtime error in write call: Expected result 100 but got -1 with errno 11 (Resource temporarily unavailable)\n  # nstat\n  ...\n  TcpExtTCPChallengeACK           1                  0.0\n  TcpExtTCPSYNChallenge           1                  0.0\n\nThe problem is that bpf_skops_established() is triggered by the Challenge\nACK instead of SYN+ACK.  This causes the bpf prog to miss the chance to\ncheck if the peer supports a TCP option that is expected to be exchanged\nin SYN and SYN+ACK.\n\nLet's accept a bare SYN+ACK for active-open TCP_SYN_RECV sockets to avoid\nsuch a situation.\n\nNote that tcp_ack_snd_check() in tcp_rcv_state_process() is skipped not to\nsend an unnecessary ACK"", ' but this could be a bit risky for net.git', ' so this\ntargets for net-next.\n\nLink: https://www.rfc-editor.org/rfc/rfc9293.html#section-3.5-7 [0]\nSigned-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nLink: https://patch.msgid.link/20240710171246.87533-2-kuniyu@amazon.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",Fix handling of SYN+ACK packets for simultaneous TCP connections to comply with RFC 9293.,"TCP,SYN+ACK,connect",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
26f453176a66bb36bf9e3a8abad808b144a94f6a,26f453176a66bb36bf9e3a8abad808b144a94f6a,Jakub Kicinski,kuba@kernel.org,1720848353,Jakub Kicinski,kuba@kernel.org,1720848354,e2e0ca6e5cd21466433600d5b8997fb628158b26,e5abd12f3df13e92e2fb3c02fe825aa6c57f8306 e435b043d89a267bd6eb3d5650d2319805d7924a,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-07-12

We've added 23 non-merge commits during the last 3 day(s) which contain
a total of 18 files changed", 234 insertions(+),"[' 243 deletions(-).\n\nThe main changes are:\n\n1) Improve BPF verifier by utilizing overflow.h helpers to check\n   for overflows', ' from Shung-Hsi Yu.\n\n2) Fix NULL pointer dereference in resolve_prog_type() for BPF_PROG_TYPE_EXT\n   when attr->attach_prog_fd was not specified', ' from Tengda Wu.\n\n3) Fix arm64 BPF JIT when generating code for BPF trampolines with\n   BPF_TRAMP_F_CALL_ORIG which corrupted upper address bits', '\n   from Puranjay Mohan.\n\n4) Remove test_run callback from lwt_seg6local_prog_ops which never worked\n   in the first place and caused syzbot reports', '\n   from Sebastian Andrzej Siewior.\n\n5) Relax BPF verifier to accept non-zero offset on KF_TRUSTED_ARGS/\n   /KF_RCU-typed BPF kfuncs', "" from Matt Bobrowski.\n\n6) Fix a long standing bug in libbpf with regards to handling of BPF\n   skeleton's forward and backward compatibility"", ' from Andrii Nakryiko.\n\n7) Annotate btf_{seq', 'snprintf}_show functions with __printf', '\n   from Alan Maguire.\n\n8) BPF selftest improvements to reuse common network helpers in sk_lookup\n   test and dropping the open-coded inetaddr_len() and make_socket() ones', '\n   from Geliang Tang.\n\n* tag \'for-netdev\' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next: (23 commits)\n  selftests/bpf: Test for null-pointer-deref bugfix in resolve_prog_type()\n  bpf: Fix null pointer dereference in resolve_prog_type() for BPF_PROG_TYPE_EXT\n  selftests/bpf: DENYLIST.aarch64: Skip fexit_sleep again\n  bpf: use check_sub_overflow() to check for subtraction overflows\n  bpf: use check_add_overflow() to check for addition overflows\n  bpf: fix overflow check in adjust_jmp_off()\n  bpf: Eliminate remaining ""make W=1"" warnings in kernel/bpf/btf.o\n  bpf: annotate BTF show functions with __printf\n  bpf', ' arm64: Fix trampoline for BPF_TRAMP_F_CALL_ORIG\n  selftests/bpf: Close obj in error path in xdp_adjust_tail\n  selftests/bpf: Null checks for links in bpf_tcp_ca\n  selftests/bpf: Use connect_fd_to_fd in sk_lookup\n  selftests/bpf: Use start_server_addr in sk_lookup\n  selftests/bpf: Use start_server_str in sk_lookup\n  selftests/bpf: Close fd in error path in drop_on_reuseport\n  selftests/bpf: Add ASSERT_OK_FD macro\n  selftests/bpf: Add backlog for network_helper_opts\n  selftests/bpf: fix compilation failure when CONFIG_NF_FLOW_TABLE=m\n  bpf: Remove tst_run from lwt_seg6local_prog_ops.\n  bpf: relax zero fixed offset constraint on KF_TRUSTED_ARGS/KF_RCU\n  ...\n====================\n\nLink: https://patch.msgid.link/20240712212448.5378-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']","This commit merges changes from the 'for-netdev' branch, including 23 non-merge commits affecting 18 files.","merge, netdev, bpf-next",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
4f5d4a1ba7a1a23173e356186f3f8b7c27d2e948,4f5d4a1ba7a1a23173e356186f3f8b7c27d2e948,Chen Ni,nichen@iscas.ac.cn,1720496603,Andrew Morton,akpm@linux-foundation.org,1720827592,7baa019293b6d06f115830a073a7350a724bfc4d,73db3abdca58c8a014ec4c88cf5ef925cbf63669,"test_bpf: convert comma to semicolon

Replace commas between expression statements with semicolons.

Link: https://lkml.kernel.org/r/20240709034323.586185-1-nichen@iscas.ac.cn
Signed-off-by: Chen Ni <nichen@iscas.ac.cn>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Eduard Zingerman <eddyz87@gmail.com>
Cc: Hao Luo <haoluo@google.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: KP Singh <kpsingh@kernel.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: Song Liu <song@kernel.org>
Cc: Stanislav Fomichev <sdf@fomichev.me>
Cc: Yonghong Song <yonghong.song@linux.dev>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
",,Converted commas to semicolons in test_bpf expressions for correct syntax.,"convert,comma,semicolon",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
acd4b2ecf3bb24a781aad7f703243fa00eb7efbb,acd4b2ecf3bb24a781aad7f703243fa00eb7efbb,Andrii Nakryiko,andrii@kernel.org,1719508133,Andrew Morton,akpm@linux-foundation.org,1720824731,fbdc974d9a9e6f714682587af0ca6eed44422c90,8d42e2a91dcf86b34461cd7f709797805afa9f43,"fs/procfs: extract logic for getting VMA name constituents

Patch series ""ioctl()-based API to query VMAs from /proc/<pid>/maps"""," v6.

Implement binary ioctl()-based interface to /proc/<pid>/maps file to allow
applications to query VMA information more efficiently than reading *all*
VMAs nonselectively through text-based interface of /proc/<pid>/maps file.

Patch #2 goes into a lot of details and background on some common patterns
of using /proc/<pid>/maps in the area of performance profiling and
subsequent symbolization of captured stack traces.  As mentioned in that
patch","[' patterns of VMA querying can differ depending on specific use case', '\nbut can generally be grouped into two main categories: the need to query a\nsmall subset of VMAs covering a given batch of addresses', ' or\nreading/storing/caching all (typically', ' executable) VMAs upfront for later\nprocessing.\n\nThe new PROCMAP_QUERY ioctl() API added in this patch set was motivated by\nthe former pattern of usage.  Earlier revisions had a patch adding a tool\nthat faithfully reproduces an efficient VMA matching pass of a symbolizer', '\ncollecting a subset of covering VMAs for a given set of addresses as\nefficiently as possible.  This tool served both as a testing ground', ' as\nwell as a benchmarking tool.  It implements everything both for currently\nexisting text-based /proc/<pid>/maps interface', ' as well as for newly-added\nPROCMAP_QUERY ioctl().  This revision dropped the tool from the patch set\nand', ' once the API lands upstream', ' this tool might be added separately on\nGithub as an example.\n\nBased on discussion on earlier revisions of this patch set', ' it turned out\nthat this ioctl() API is competitive with highly-optimized text-based\npre-processing pattern that perf tool is using.  Based on perf discussion', ""\nthis revision adds more flexibility in specifying a subset of VMAs that\nare of interest.  Now it's possible to specify desired permissions of VMAs\n(e.g."", ' request only executable ones) and/or restrict to only a subset of\nVMAs that have file backing.  This further improves the efficiency when\nusing this new API thanks to more selective (executable VMAs only)\nquerying.\n\nIn addition to a custom benchmarking tool', ' and experimental perf\nintegration (available at [0])', ' Daniel Mueller has since also implemented\nan experimental integration into blazesym (see [1])', ' a library used for\nstack trace symbolization by our server fleet-wide profiler and another\non-device profiler agent that runs on weaker ARM devices.  The latter\nARM-based device profiler is especially sensitive to performance', ' and so\nwe benchmarked and compared text-based /proc/<pid>/maps solution to the\nequivalent one using PROCMAP_QUERY ioctl().\n\nResults are very encouraging', ' giving us 5x improvement for end-to-end\nso-called ""address normalization"" pass', ' which is the part of the\nsymbolization process that happens locally on ARM device', "" before being\nsent out for further heavier-weight processing on more powerful remote\nserver.  Note that this is not an artificial microbenchmark.  It's a full\nend-to-end API call being measured with real-world data on real-world\ndevice.\n\n  TEXT-BASED\n  ==========\n  Benchmarking main/normalize_process_no_build_ids_uncached_maps\n  main/normalize_process_no_build_ids_uncached_maps\n\t  time:   [49.777 µs 49.982 µs 50.250 µs]\n\n  IOCTL-BASED\n  ===========\n  Benchmarking main/normalize_process_no_build_ids_uncached_maps\n  main/normalize_process_no_build_ids_uncached_maps\n\t  time:   [10.328 µs 10.391 µs 10.457 µs]\n\t  change: [−79.453% −79.304% −79.166%] (p = 0.00 < 0.02)\n\t  Performance has improved.\n\nYou can see above that we see the drop from 50µs down to 10µs for\nexactly the same amount of work"", ' with the same data and target process.\n\nWith the aforementioned custom tool', ' we see about ~40x improvement (it\nmight vary a bit', "" depending on a specific captured set of addresses).  And\neven for perf-based benchmark it's on par or slightly ahead when using\npermission-based filtering (fetching only executable VMAs).\n\nEarlier revisions attempted to use per-VMA locking"", ' if kernel was compiled\nwith CONFIG_PER_VMA_LOCK=y', ' but it turned out that anon_vma_name() is not\nyet compatible with per-VMA locking and assumes mmap_lock to be taken', '\nwhich makes the use of per-VMA locking for this API premature.  It was\nagreed ([2]) to continue for now with just mmap_lock', ' but the code\nstructure is such that it should be easy to add per-VMA locking support\nonce all the pieces are ready.\n\nOne thing that did not change was basing this new API as an ioctl()\ncommand on /proc/<pid>/maps file.  An ioctl-based API on top of pidfd was\nconsidered', ' but has its own downsides.  Implementing ioctl() directly on\npidfd will cause access permission checks on every single ioctl()', ' which\nleads to performance concerns and potential spam of capable() audit\nmessages.  It also prevents a nice pattern', ' possible with\n/proc/<pid>/maps', ' in which application opens /proc/self/maps FD (requiring\nno additional capabilities) and passed this FD to profiling agent for\nquerying.  To achieve similar pattern', ' a new file would have to be created\nfrom pidf just for VMA querying', ' which is considered to be inferior to\njust querying /proc/<pid>/maps FD as proposed in current approach.  These\naspects were discussed in the hallway track at recent LSF/MM/BPF 2024 and\nsticking to procfs ioctl() was the final agreement we arrived at.\n\n  [0] https://github.com/anakryiko/linux/commits/procfs-proc-maps-ioctl-v2/\n  [1] https://github.com/libbpf/blazesym/pull/675\n  [2] https://lore.kernel.org/bpf/7rm3izyq2vjp5evdjc7c6z4crdd3oerpiknumdnmmemwyiwx7t@hleldw7iozi3/\n\n\nThis patch (of 6):\n\nExtract generic logic to fetch relevant pieces of data to describe VMA\nname.  This could be just some string (either special constant or\nuser-provided)', ' or a string with some formatted wrapping text (e.g.', '\n""[anon_shmem:<something>]"")', ' or', ' commonly', ' file path.  seq_file-based\nlogic has different methods to handle all three cases', ' but they are\ncurrently mixed in with extracting underlying sources of data.\n\nThis patch splits this into data fetching and data formatting', ' so that\ndata fetching can be reused later on.\n\nThere should be no functional changes.\n\nLink: https://lkml.kernel.org/r/20240627170900.1672542-1-andrii@kernel.org\nLink: https://lkml.kernel.org/r/20240627170900.1672542-2-andrii@kernel.org\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Liam R. Howlett <Liam.Howlett@Oracle.com>\nCc: Alexey Dobriyan <adobriyan@gmail.com>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nCc: Christian Brauner <brauner@kernel.org>\nCc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nCc: Mike Rapoport (IBM) <rppt@kernel.org>\nCc: Suren Baghdasaryan <surenb@google.com>\nCc: Andi Kleen <ak@linux.intel.com>\nCc: Arnd Bergmann <arnd@arndb.de>\nCc: Stephen Rothwell <sfr@canb.auug.org.au>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\n', '']",Extract logic for acquiring VMA name elements in a patch for ioctl()-based API for querying VMAs through /proc/pid/maps.,"ioctl,VMA,procfs",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['tracepoints like programs']
e435b043d89a267bd6eb3d5650d2319805d7924a,e435b043d89a267bd6eb3d5650d2319805d7924a,Tengda Wu,wutengda@huaweicloud.com,1720709899,Daniel Borkmann,daniel@iogearbox.net,1720815261,130e78980e126458685412668fbdbb36cc8c0441,f7866c35873377313ff94398f17d425b28b71de1,"selftests/bpf: Test for null-pointer-deref bugfix in resolve_prog_type()

This test verifies that resolve_prog_type() works as expected when
`attach_prog_fd` is not passed in.

`prog->aux->dst_prog` in resolve_prog_type() is assigned by
`attach_prog_fd`"," and would be NULL if `attach_prog_fd` is not provided.

Loading EXT prog with bpf_dynptr_from_skb() kfunc call in this way will
lead to null-pointer-deref.

Verify that the null-pointer-deref bug in resolve_prog_type() is fixed.

Signed-off-by: Tengda Wu <wutengda@huaweicloud.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240711145819.254178-3-wutengda@huaweicloud.com
",[''],Add test case to verify fix for null-pointer dereference in resolve_prog_type for EXT progs.,"null-pointer-deref, resolve_prog_type, selftests",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['other']
f7866c35873377313ff94398f17d425b28b71de1,f7866c35873377313ff94398f17d425b28b71de1,Tengda Wu,wutengda@huaweicloud.com,1720709898,Daniel Borkmann,daniel@iogearbox.net,1720815255,f1569be13de7520eb68b905cb653f4b571dbcc90,517125f6749402e579f715519147145944f12ad9,"bpf: Fix null pointer dereference in resolve_prog_type() for BPF_PROG_TYPE_EXT

When loading a EXT program without specifying `attr->attach_prog_fd`","
the `prog->aux->dst_prog` will be null. At this time","[' calling\nresolve_prog_type() anywhere will result in a null pointer dereference.\n\nExample stack trace:\n\n[    8.107863] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000004\n[    8.108262] Mem abort info:\n[    8.108384]   ESR = 0x0000000096000004\n[    8.108547]   EC = 0x25: DABT (current EL)', ' IL = 32 bits\n[    8.108722]   SET = 0', ' FnV = 0\n[    8.108827]   EA = 0', ' S1PTW = 0\n[    8.108939]   FSC = 0x04: level 0 translation fault\n[    8.109102] Data abort info:\n[    8.109203]   ISV = 0', ' ISS = 0x00000004', ' ISS2 = 0x00000000\n[    8.109399]   CM = 0', ' WnR = 0', ' TnD = 0', ' TagAccess = 0\n[    8.109614]   GCS = 0', ' Overlay = 0', ' DirtyBit = 0', ' Xs = 0\n[    8.109836] user pgtable: 4k pages', ' 48-bit VAs', ' pgdp=0000000101354000\n[    8.110011] [0000000000000004] pgd=0000000000000000', ' p4d=0000000000000000\n[    8.112624] Internal error: Oops: 0000000096000004 [#1] PREEMPT SMP\n[    8.112783] Modules linked in:\n[    8.113120] CPU: 0 PID: 99 Comm: may_access_dire Not tainted 6.10.0-rc3-next-20240613-dirty #1\n[    8.113230] Hardware name: linux', 'dummy-virt (DT)\n[    8.113390] pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)\n[    8.113429] pc : may_access_direct_pkt_data+0x24/0xa0\n[    8.113746] lr : add_subprog_and_kfunc+0x634/0x8e8\n[    8.113798] sp : ffff80008283b9f0\n[    8.113813] x29: ffff80008283b9f0 x28: ffff800082795048 x27: 0000000000000001\n[    8.113881] x26: ffff0000c0bb2600 x25: 0000000000000000 x24: 0000000000000000\n[    8.113897] x23: ffff0000c1134000 x22: 000000000001864f x21: ffff0000c1138000\n[    8.113912] x20: 0000000000000001 x19: ffff0000c12b8000 x18: ffffffffffffffff\n[    8.113929] x17: 0000000000000000 x16: 0000000000000000 x15: 0720072007200720\n[    8.113944] x14: 0720072007200720 x13: 0720072007200720 x12: 0720072007200720\n[    8.113958] x11: 0720072007200720 x10: 0000000000f9fca4 x9 : ffff80008021f4e4\n[    8.113991] x8 : 0101010101010101 x7 : 746f72705f6d656d x6 : 000000001e0e0f5f\n[    8.114006] x5 : 000000000001864f x4 : ffff0000c12b8000 x3 : 000000000000001c\n[    8.114020] x2 : 0000000000000002 x1 : 0000000000000000 x0 : 0000000000000000\n[    8.114126] Call trace:\n[    8.114159]  may_access_direct_pkt_data+0x24/0xa0\n[    8.114202]  bpf_check+0x3bc/0x28c0\n[    8.114214]  bpf_prog_load+0x658/0xa58\n[    8.114227]  __sys_bpf+0xc50/0x2250\n[    8.114240]  __arm64_sys_bpf+0x28/0x40\n[    8.114254]  invoke_syscall.constprop.0+0x54/0xf0\n[    8.114273]  do_el0_svc+0x4c/0xd8\n[    8.114289]  el0_svc+0x3c/0x140\n[    8.114305]  el0t_64_sync_handler+0x134/0x150\n[    8.114331]  el0t_64_sync+0x168/0x170\n[    8.114477] Code: 7100707f 54000081 f9401c00 f9403800 (b9400403)\n[    8.118672] ---[ end trace 0000000000000000 ]---\n\nOne way to fix it is by forcing `attach_prog_fd` non-empty when\nbpf_prog_load(). But this will lead to `libbpf_probe_bpf_prog_type`\nAPI broken which use verifier log to probe prog type and will log\nnothing if we reject invalid EXT prog before bpf_check().\n\nAnother way is by adding null check in resolve_prog_type().\n\nThe issue was introduced by commit 4a9c7bbe2ed4 (""bpf: Resolve to\nprog->aux->dst_prog->type only for BPF_PROG_TYPE_EXT"") which wanted\nto correct type resolution for BPF_PROG_TYPE_TRACING programs. Before\nthat', ' the type resolution of BPF_PROG_TYPE_EXT prog actually follows\nthe logic below:\n\n  prog->aux->dst_prog ? prog->aux->dst_prog->type : prog->type;\n\nIt implies that when EXT program is not yet attached to `dst_prog`', '\nthe prog type should be EXT itself. This code worked fine in the past.\nSo just keep using it.\n\nFix this by returning `prog->type` for BPF_PROG_TYPE_EXT if `dst_prog`\nis not present in resolve_prog_type().\n\nFixes: 4a9c7bbe2ed4 (""bpf: Resolve to prog->aux->dst_prog->type only for BPF_PROG_TYPE_EXT"")\nSigned-off-by: Tengda Wu <wutengda@huaweicloud.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Daniel Borkmann <daniel@iogearbox.net>\nCc: Martin KaFai Lau <kafai@fb.com>\nLink: https://lore.kernel.org/bpf/20240711145819.254178-2-wutengda@huaweicloud.com\n', '']",Fixes a null pointer dereference in resolve_prog_type() for BPF_PROG_TYPE_EXT when attr->attach_prog_fd is not specified.,null pointer dereference,It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF verifier,"[""It's not related to any of the above.""]"
7a2fb5619cc1fb53cb8784154d5ef2bd99997436,7a2fb5619cc1fb53cb8784154d5ef2bd99997436,Howard Chu,howardchu95@gmail.com,1720185651,Namhyung Kim,namhyung@kernel.org,1720802942,aea86f3d4d883dc666fdf5d05149e7d95072274c,1553419c3c10cf386496e68b90b5d0ce966ac614,"perf trace: Fix iteration of syscall ids in syscalltbl->entries

This is a bug found when implementing pretty-printing for the
landlock_add_rule system call"," I decided to send this patch separately
because this is a serious bug that should be fixed fast.

I wrote a test program to do landlock_add_rule syscall in a loop","['\nyet perf trace -e landlock_add_rule freezes', ' giving no output.\n\nThis bug is introduced by the false understanding of the variable ""key""\nbelow:\n```\nfor (key = 0; key < trace->sctbl->syscalls.nr_entries; ++key) {\n\tstruct syscall *sc = trace__syscall_info(trace', ' NULL', ' key);\n\t...\n}\n```\nThe code above seems right at the beginning', ' but when looking at\nsyscalltbl.c', ' I found these lines:\n\n```\nfor (i = 0; i <= syscalltbl_native_max_id; ++i)\n\tif (syscalltbl_native[i])\n\t\t++nr_entries;\n\nentries = tbl->syscalls.entries = malloc(sizeof(struct syscall) * nr_entries);\n...\n\nfor (i = 0', ' j = 0; i <= syscalltbl_native_max_id; ++i) {\n\tif (syscalltbl_native[i]) {\n\t\tentries[j].name = syscalltbl_native[i];\n\t\tentries[j].id = i;\n\t\t++j;\n\t}\n}\n```\n\nmeaning the key is merely an index to traverse the syscall table', '\ninstead of the actual syscall id for this particular syscall.\n\nSo if one uses key to do trace__syscall_info(trace', ' NULL', ' key)', ' because\nkey only goes up to trace->sctbl->syscalls.nr_entries', ' for example', ' on\nmy X86_64 machine', ' this number is 373', ' it will end up neglecting all\nthe rest of the syscall', ' in my case', ' everything after `rseq`', ' because\nthe traversal will stop at 373', ' and `rseq` is the last syscall whose id\nis lower than 373\n\nin tools/perf/arch/x86/include/generated/asm/syscalls_64.c:\n```\n\t...\n\t[334] = ""rseq""', '\n\t[424] = ""pidfd_send_signal""', '\n\t...\n```\n\nThe reason why the key is scrambled but perf trace works well is that\nkey is used in trace__syscall_info(trace', ' NULL', ' key) to do\ntrace->syscalls.table[id]', ' this makes sure that the struct syscall returned\nactually has an id the same value as key', ' making the later bpf_prog\nmatching all correct.\n\nAfter fixing this bug', ' I can do perf trace on 38 more syscalls', ' and\nbecause more syscalls are visible', ' we get 8 more syscalls that can be\naugmented.\n\nbefore:\n\nperf $ perf trace -vv --max-events=1 |& grep Reusing\nReusing ""open"" BPF sys_enter augmenter for ""stat""\nReusing ""open"" BPF sys_enter augmenter for ""lstat""\nReusing ""open"" BPF sys_enter augmenter for ""access""\nReusing ""connect"" BPF sys_enter augmenter for ""accept""\nReusing ""sendto"" BPF sys_enter augmenter for ""recvfrom""\nReusing ""connect"" BPF sys_enter augmenter for ""bind""\nReusing ""connect"" BPF sys_enter augmenter for ""getsockname""\nReusing ""connect"" BPF sys_enter augmenter for ""getpeername""\nReusing ""open"" BPF sys_enter augmenter for ""execve""\nReusing ""open"" BPF sys_enter augmenter for ""truncate""\nReusing ""open"" BPF sys_enter augmenter for ""chdir""\nReusing ""open"" BPF sys_enter augmenter for ""mkdir""\nReusing ""open"" BPF sys_enter augmenter for ""rmdir""\nReusing ""open"" BPF sys_enter augmenter for ""creat""\nReusing ""open"" BPF sys_enter augmenter for ""link""\nReusing ""open"" BPF sys_enter augmenter for ""unlink""\nReusing ""open"" BPF sys_enter augmenter for ""symlink""\nReusing ""open"" BPF sys_enter augmenter for ""readlink""\nReusing ""open"" BPF sys_enter augmenter for ""chmod""\nReusing ""open"" BPF sys_enter augmenter for ""chown""\nReusing ""open"" BPF sys_enter augmenter for ""lchown""\nReusing ""open"" BPF sys_enter augmenter for ""mknod""\nReusing ""open"" BPF sys_enter augmenter for ""statfs""\nReusing ""open"" BPF sys_enter augmenter for ""pivot_root""\nReusing ""open"" BPF sys_enter augmenter for ""chroot""\nReusing ""open"" BPF sys_enter augmenter for ""acct""\nReusing ""open"" BPF sys_enter augmenter for ""swapon""\nReusing ""open"" BPF sys_enter augmenter for ""swapoff""\nReusing ""open"" BPF sys_enter augmenter for ""delete_module""\nReusing ""open"" BPF sys_enter augmenter for ""setxattr""\nReusing ""open"" BPF sys_enter augmenter for ""lsetxattr""\nReusing ""openat"" BPF sys_enter augmenter for ""fsetxattr""\nReusing ""open"" BPF sys_enter augmenter for ""getxattr""\nReusing ""open"" BPF sys_enter augmenter for ""lgetxattr""\nReusing ""openat"" BPF sys_enter augmenter for ""fgetxattr""\nReusing ""open"" BPF sys_enter augmenter for ""listxattr""\nReusing ""open"" BPF sys_enter augmenter for ""llistxattr""\nReusing ""open"" BPF sys_enter augmenter for ""removexattr""\nReusing ""open"" BPF sys_enter augmenter for ""lremovexattr""\nReusing ""fsetxattr"" BPF sys_enter augmenter for ""fremovexattr""\nReusing ""open"" BPF sys_enter augmenter for ""mq_open""\nReusing ""open"" BPF sys_enter augmenter for ""mq_unlink""\nReusing ""fsetxattr"" BPF sys_enter augmenter for ""add_key""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""request_key""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""inotify_add_watch""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""mkdirat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""mknodat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""fchownat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""futimesat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""newfstatat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""unlinkat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""linkat""\nReusing ""open"" BPF sys_enter augmenter for ""symlinkat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""readlinkat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""fchmodat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""faccessat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""utimensat""\nReusing ""connect"" BPF sys_enter augmenter for ""accept4""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""name_to_handle_at""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""renameat2""\nReusing ""open"" BPF sys_enter augmenter for ""memfd_create""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""execveat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""statx""\n\nafter\n\nperf $ perf trace -vv --max-events=1 |& grep Reusing\nReusing ""open"" BPF sys_enter augmenter for ""stat""\nReusing ""open"" BPF sys_enter augmenter for ""lstat""\nReusing ""open"" BPF sys_enter augmenter for ""access""\nReusing ""connect"" BPF sys_enter augmenter for ""accept""\nReusing ""sendto"" BPF sys_enter augmenter for ""recvfrom""\nReusing ""connect"" BPF sys_enter augmenter for ""bind""\nReusing ""connect"" BPF sys_enter augmenter for ""getsockname""\nReusing ""connect"" BPF sys_enter augmenter for ""getpeername""\nReusing ""open"" BPF sys_enter augmenter for ""execve""\nReusing ""open"" BPF sys_enter augmenter for ""truncate""\nReusing ""open"" BPF sys_enter augmenter for ""chdir""\nReusing ""open"" BPF sys_enter augmenter for ""mkdir""\nReusing ""open"" BPF sys_enter augmenter for ""rmdir""\nReusing ""open"" BPF sys_enter augmenter for ""creat""\nReusing ""open"" BPF sys_enter augmenter for ""link""\nReusing ""open"" BPF sys_enter augmenter for ""unlink""\nReusing ""open"" BPF sys_enter augmenter for ""symlink""\nReusing ""open"" BPF sys_enter augmenter for ""readlink""\nReusing ""open"" BPF sys_enter augmenter for ""chmod""\nReusing ""open"" BPF sys_enter augmenter for ""chown""\nReusing ""open"" BPF sys_enter augmenter for ""lchown""\nReusing ""open"" BPF sys_enter augmenter for ""mknod""\nReusing ""open"" BPF sys_enter augmenter for ""statfs""\nReusing ""open"" BPF sys_enter augmenter for ""pivot_root""\nReusing ""open"" BPF sys_enter augmenter for ""chroot""\nReusing ""open"" BPF sys_enter augmenter for ""acct""\nReusing ""open"" BPF sys_enter augmenter for ""swapon""\nReusing ""open"" BPF sys_enter augmenter for ""swapoff""\nReusing ""open"" BPF sys_enter augmenter for ""delete_module""\nReusing ""open"" BPF sys_enter augmenter for ""setxattr""\nReusing ""open"" BPF sys_enter augmenter for ""lsetxattr""\nReusing ""openat"" BPF sys_enter augmenter for ""fsetxattr""\nReusing ""open"" BPF sys_enter augmenter for ""getxattr""\nReusing ""open"" BPF sys_enter augmenter for ""lgetxattr""\nReusing ""openat"" BPF sys_enter augmenter for ""fgetxattr""\nReusing ""open"" BPF sys_enter augmenter for ""listxattr""\nReusing ""open"" BPF sys_enter augmenter for ""llistxattr""\nReusing ""open"" BPF sys_enter augmenter for ""removexattr""\nReusing ""open"" BPF sys_enter augmenter for ""lremovexattr""\nReusing ""fsetxattr"" BPF sys_enter augmenter for ""fremovexattr""\nReusing ""open"" BPF sys_enter augmenter for ""mq_open""\nReusing ""open"" BPF sys_enter augmenter for ""mq_unlink""\nReusing ""fsetxattr"" BPF sys_enter augmenter for ""add_key""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""request_key""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""inotify_add_watch""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""mkdirat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""mknodat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""fchownat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""futimesat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""newfstatat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""unlinkat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""linkat""\nReusing ""open"" BPF sys_enter augmenter for ""symlinkat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""readlinkat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""fchmodat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""faccessat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""utimensat""\nReusing ""connect"" BPF sys_enter augmenter for ""accept4""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""name_to_handle_at""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""renameat2""\nReusing ""open"" BPF sys_enter augmenter for ""memfd_create""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""execveat""\nReusing ""fremovexattr"" BPF sys_enter augmenter for ""statx""\n\nTL;DR:\n\nThese are the new syscalls that can be augmented\nReusing ""openat"" BPF sys_enter augmenter for ""open_tree""\nReusing ""openat"" BPF sys_enter augmenter for ""openat2""\nReusing ""openat"" BPF sys_enter augmenter for ""mount_setattr""\nReusing ""openat"" BPF sys_enter augmenter for ""move_mount""\nReusing ""open"" BPF sys_enter augmenter for ""fsopen""\nReusing ""openat"" BPF sys_enter augmenter for ""fspick""\nReusing ""openat"" BPF sys_enter augmenter for ""faccessat2""\nReusing ""openat"" BPF sys_enter augmenter for ""fchmodat2""\n\nas for the perf trace output:\n\nbefore\n\nperf $ perf trace -e faccessat2 --max-events=1\n[no output]\n\nafter\n\nperf $ ./perf trace -e faccessat2 --max-events=1\n     0.000 ( 0.037 ms): waybar/958 faccessat2(dfd: 40', ' filename: ""uevent"")                               = 0\n\nP.S. The reason why this bug was not found in the past five years is\nprobably because it only happens to the newer syscalls whose id is\ngreater', ' for instance', ' faccessat2 of id 439', ' which not a lot of people\ncare about when using perf trace.\n\n[Arnaldo]: notes\n\nThat and the fact that the BPF code was hidden before having to use -e', ""\nthat got changed kinda recently when we switched to using BPF skels for\naugmenting syscalls in 'perf trace':\n\n⬢[acme@toolbox perf-tools-next]$ git log --oneline tools/perf/util/bpf_skel/augmented_raw_syscalls.bpf.c\na9f4c6c999008c92 perf trace: Collect sys_nanosleep first argument\n29d16de26df17e94 perf augmented_raw_syscalls.bpf: Move 'struct timespec64' to vmlinux.h\n5069211e2f0b47e7 perf trace: Use the right bpf_probe_read(_str) variant for reading user data\n33b725ce7b988756 perf trace: Avoid compile error wrt redefining bool\n7d9642311b6d9d31 perf bpf augmented_raw_syscalls: Add an assert to make sure sizeof(augmented_arg->value) is a power of two.\n262b54b6c9396823 perf bpf augmented_raw_syscalls: Add an assert to make sure sizeof(saddr) is a power of two.\n1836480429d173c0 perf bpf_skel augmented_raw_syscalls: Cap the socklen parameter using &= sizeof(saddr)\ncd2cece61ac5f900 perf trace: Tidy comments related to BPF + syscall augmentation\n5e6da6be3082f77b perf trace: Migrate BPF augmentation to use a skeleton\n⬢[acme@toolbox perf-tools-next]$\n\n⬢[acme@toolbox perf-tools-next]$ git show --oneline --pretty=reference 5e6da6be3082f77b | head -1\n5e6da6be3082f77b (perf trace: Migrate BPF augmentation to use a skeleton"", ' 2023-08-10)\n⬢[acme@toolbox perf-tools-next]$\n\nI.e. from August', ' 2023.\n\nOne had as well to ask for BUILD_BPF_SKEL=1', "" which now is default if all\nit needs is available on the system.\n\nI simplified the code to not expose the 'struct syscall' outside of\ntools/perf/util/syscalltbl.c"", ' instead providing a function to go from\nthe index to the syscall id:\n\n  int syscalltbl__id_at_idx(struct syscalltbl *tbl', ' int idx);\n\nSigned-off-by: Howard Chu <howardchu95@gmail.com>\nTested-by: Arnaldo Carvalho de Melo <acme@redhat.com>\nLink: https://lore.kernel.org/lkml/ZmhlAxbVcAKoPTg8@x1\nLink: https://lore.kernel.org/r/20240705132059.853205-2-howardchu95@gmail.com\nSigned-off-by: Namhyung Kim <namhyung@kernel.org>\n', '']",Fix bug in iteration of syscall ids during landlock_add_rule syscall implementation.,"bug, syscall, iteration",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
517125f6749402e579f715519147145944f12ad9,517125f6749402e579f715519147145944f12ad9,Daniel Borkmann,daniel@iogearbox.net,1720800750,Daniel Borkmann,daniel@iogearbox.net,1720801070,9d865514cb3de90406b10b712a1260b9ee8d5365,a1010fce1c0c2ce3b305aa6e8ff70e86f99e3226,"selftests/bpf: DENYLIST.aarch64: Skip fexit_sleep again

Revert commit 90dc946059b7 (""selftests/bpf: DENYLIST.aarch64: Remove
fexit_sleep"") again. The fix in 19d3c179a377 (""bpf"," arm64: Fix trampoline
for BPF_TRAMP_F_CALL_ORIG"") does not address all of the issues and BPF
CI is still hanging and timing out:

   https://github.com/kernel-patches/bpf/actions/runs/9905842936/job/27366435436

   [...]
   #89/11   fexit_bpf2bpf/func_replace_global_func:OK
   #89/12   fexit_bpf2bpf/fentry_to_cgroup_bpf:OK
   #89/13   fexit_bpf2bpf/func_replace_progmap:OK
   #89      fexit_bpf2bpf:OK
   Error: The operation was canceled.

Thus more investigation work & fixing is needed before the test can be put
in place again.

Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Cc: Puranjay Mohan <puranjay@kernel.org>
Link: https://lore.kernel.org/bpf/20240705145009.32340-1-puranjay@kernel.org
",[''],Revert a selftest change for bpf on aarch64 due to unresolved issues causing BPF CI failures.,DENYLIST aarch64 fexit_sleep,It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
a1010fce1c0c2ce3b305aa6e8ff70e86f99e3226,a1010fce1c0c2ce3b305aa6e8ff70e86f99e3226,Alexei Starovoitov,ast@kernel.org,1720799648,Alexei Starovoitov,ast@kernel.org,1720799657,3cb546fadb550a330835ac90068f9626b4b4bb68,2454075f8e2915cebbe52a1195631bc7efe2b7e1 deac5871eb0751454cb80b3ff6b69e42a6c1bab2,"Merge branch 'use-overflow-h-helpers-to-check-for-overflows'

Shung-Hsi Yu says:

====================
Use overflow.h helpers to check for overflows

This patch set refactors kernel/bpf/verifier.c to use type-agnostic"," generic
overflow-check helpers defined in include/linux/overflow.h to check for addition
and subtraction overflow","[' and drop the signed_*_overflows() helpers we currently\nhave in kernel/bpf/verifier.c; with a fix for overflow check in adjust_jmp_off()\nin patch 1.\n\nThere should be no functional change in how the verifier works and  the main\nmotivation is to make future refactoring[1] easier.\n\nWhile check_mul_overflow() also exists and could potentially replace what\nwe have in scalar*_min_max_mul()', ' it does not help with refactoring and\nwould either change how the verifier works (e.g. lifting restriction on\numax<=U32_MAX and u32_max<=U16_MAX) or make the code slightly harder to\nread', ' so it is left for future endeavour.\n\nChanges from v2 <https://lore.kernel.org/r/20240701055907.82481-1-shung-hsi.yu@suse.com>\n- add fix for 5337ac4c9b80 (""bpf: Fix the corner case with may_goto and jump to\n  the 1st insn."") to correct the overflow check for general jump instructions\n- adapt to changes in commit 5337ac4c9b80 (""bpf: Fix the corner case with\n  may_goto and jump to the 1st insn."")\n  - refactor in adjust_jmp_off() as well and remove signed_add16_overflow()\n\nChanges from v1 <https://lore.kernel.org/r/20240623070324.12634-1-shung-hsi.yu@suse.com>:\n- use pointers to values in dst_reg directly as the sum/diff pointer and\n  remove the else branch (Jiri)\n- change local variables to be dst_reg pointers instead of src_reg values\n- include comparison of generated assembly before & after the change\n  (Alexei)\n\n1: https://github.com/kernel-patches/bpf/pull/7205/commits\n====================\n\nLink: https://lore.kernel.org/r/20240712080127.136608-1-shung-hsi.yu@suse.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Refactor eBPF verifier to use overflow.h helpers for checking arithmetic overflow.,"overflow, refactor, helpers",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
deac5871eb0751454cb80b3ff6b69e42a6c1bab2,deac5871eb0751454cb80b3ff6b69e42a6c1bab2,Shung-Hsi Yu,shung-hsi.yu@suse.com,1720771286,Alexei Starovoitov,ast@kernel.org,1720799648,3cb546fadb550a330835ac90068f9626b4b4bb68,28a4411076b254c67842348e3b25c2fb41a94cad,"bpf: use check_sub_overflow() to check for subtraction overflows

Similar to previous patch that drops signed_add*_overflows() and uses
(compiler) builtin-based check_add_overflow()"," do the same for
signed_sub*_overflows() and replace them with the generic
check_sub_overflow() to make future refactoring easier and have the
checks implemented more efficiently.

Unsigned overflow check for subtraction does not use helpers and are
simple enough already","["" so they're left untouched.\n\nAfter the change GCC 13.3.0 generates cleaner assembly on x86_64:\n\n\tif (check_sub_overflow(*dst_smin"", ' src_reg->smax_value', ' dst_smin) ||\n   139bf:\tmov    0x28(%r12)', '%rax\n   139c4:\tmov    %edx', '0x54(%r12)\n   139c9:\tsub    %r11', '%rax\n   139cc:\tmov    %rax', '0x28(%r12)\n   139d1:\tjo     14627 <adjust_reg_min_max_vals+0x1237>\n\t    check_sub_overflow(*dst_smax', ' src_reg->smin_value', ' dst_smax)) {\n   139d7:\tmov    0x30(%r12)', '%rax\n   139dc:\tsub    %r9', '%rax\n   139df:\tmov    %rax', '0x30(%r12)\n\tif (check_sub_overflow(*dst_smin', ' src_reg->smax_value', ' dst_smin) ||\n   139e4:\tjo     14627 <adjust_reg_min_max_vals+0x1237>\n   ...\n\t\t*dst_smin = S64_MIN;\n   14627:\tmovabs $0x8000000000000000', '%rax\n   14631:\tmov    %rax', '0x28(%r12)\n\t\t*dst_smax = S64_MAX;\n   14636:\tsub    $0x1', '%rax\n   1463a:\tmov    %rax', '0x30(%r12)\n\nBefore the change it gives:\n\n\tif (signed_sub_overflows(dst_reg->smin_value', ' smax_val) ||\n   13a50:\tmov    0x28(%r12)', '%rdi\n   13a55:\tmov    %edx', '0x54(%r12)\n\t\tdst_reg->smax_value = S64_MAX;\n   13a5a:\tmovabs $0x7fffffffffffffff', '%rdx\n   13a64:\tmov    %eax', '0x50(%r12)\n\t\tdst_reg->smin_value = S64_MIN;\n   13a69:\tmovabs $0x8000000000000000', '%rax\n\ts64 res = (s64)((u64)a - (u64)b);\n   13a73:\tmov    %rdi', '%rsi\n   13a76:\tsub    %rcx', '%rsi\n\tif (b < 0)\n   13a79:\ttest   %rcx', '%rcx\n   13a7c:\tjs     145ea <adjust_reg_min_max_vals+0x119a>\n\tif (signed_sub_overflows(dst_reg->smin_value', ' smax_val) ||\n   13a82:\tcmp    %rsi', '%rdi\n   13a85:\tjl     13ac7 <adjust_reg_min_max_vals+0x677>\n\t    signed_sub_overflows(dst_reg->smax_value', ' smin_val)) {\n   13a87:\tmov    0x30(%r12)', '%r8\n\ts64 res = (s64)((u64)a - (u64)b);\n   13a8c:\tmov    %r8', '%rax\n   13a8f:\tsub    %r9', '%rax\n\treturn res > a;\n   13a92:\tcmp    %rax', '%r8\n   13a95:\tsetl   %sil\n\tif (b < 0)\n   13a99:\ttest   %r9', '%r9\n   13a9c:\tjs     147d1 <adjust_reg_min_max_vals+0x1381>\n\t\tdst_reg->smax_value = S64_MAX;\n   13aa2:\tmovabs $0x7fffffffffffffff', '%rdx\n\t\tdst_reg->smin_value = S64_MIN;\n   13aac:\tmovabs $0x8000000000000000', '%rax\n\tif (signed_sub_overflows(dst_reg->smin_value', ' smax_val) ||\n   13ab6:\ttest   %sil', '%sil\n   13ab9:\tjne    13ac7 <adjust_reg_min_max_vals+0x677>\n\t\tdst_reg->smin_value -= smax_val;\n   13abb:\tmov    %rdi', '%rax\n\t\tdst_reg->smax_value -= smin_val;\n   13abe:\tmov    %r8', '%rdx\n\t\tdst_reg->smin_value -= smax_val;\n   13ac1:\tsub    %rcx', '%rax\n\t\tdst_reg->smax_value -= smin_val;\n   13ac4:\tsub    %r9', '%rdx\n   13ac7:\tmov    %rax', '0x28(%r12)\n   ...\n   13ad1:\tmov    %rdx', '0x30(%r12)\n   ...\n\tif (signed_sub_overflows(dst_reg->smin_value', ' smax_val) ||\n   145ea:\tcmp    %rsi', '%rdi\n   145ed:\tjg     13ac7 <adjust_reg_min_max_vals+0x677>\n   145f3:\tjmp    13a87 <adjust_reg_min_max_vals+0x637>\n\nSuggested-by: Jiri Olsa <jolsa@kernel.org>\nSigned-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>\nAcked-by: Jiri Olsa <jolsa@kernel.org>\nLink: https://lore.kernel.org/r/20240712080127.136608-4-shung-hsi.yu@suse.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Refactor subtraction overflow checks by replacing signed_sub*_overflows() with check_sub_overflow() for efficiency and easier future refactoring.,"overflow, subtraction, refactoring",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
28a4411076b254c67842348e3b25c2fb41a94cad,28a4411076b254c67842348e3b25c2fb41a94cad,Shung-Hsi Yu,shung-hsi.yu@suse.com,1720771285,Alexei Starovoitov,ast@kernel.org,1720799648,8f848cb9dfb0438cfa5d709cb559de66e8259c4f,4a04b4f0de59dd5c621e78f15803ee0b0544eeb8,"bpf: use check_add_overflow() to check for addition overflows

signed_add*_overflows() was added back when there was no overflow-check
helper. With the introduction of such helpers in commit f0907827a8a91
(""compiler.h: enable builtin overflow checkers and add fallback code"")"," we
can drop signed_add*_overflows() in kernel/bpf/verifier.c and use the
generic check_add_overflow() instead.

This will make future refactoring easier","[' and takes advantage of\ncompiler-emitted hardware instructions that efficiently implement these\nchecks.\n\nAfter the change GCC 13.3.0 generates cleaner assembly on x86_64:\n\n\terr = adjust_scalar_min_max_vals(env', ' insn', ' dst_reg', ' *src_reg);\n   13625:\tmov    0x28(%rbx)', '%r9  /*  r9 = src_reg->smin_value */\n   13629:\tmov    0x30(%rbx)', '%rcx /* rcx = src_reg->smax_value */\n   ...\n\tif (check_add_overflow(*dst_smin', ' src_reg->smin_value', ' dst_smin) ||\n   141c1:\tmov    %r9', '%rax\n   141c4:\tadd    0x28(%r12)', '%rax\n   141c9:\tmov    %rax', '0x28(%r12)\n   141ce:\tjo     146e4 <adjust_reg_min_max_vals+0x1294>\n\t    check_add_overflow(*dst_smax', ' src_reg->smax_value', ' dst_smax)) {\n   141d4:\tadd    0x30(%r12)', '%rcx\n   141d9:\tmov    %rcx', '0x30(%r12)\n\tif (check_add_overflow(*dst_smin', ' src_reg->smin_value', ' dst_smin) ||\n   141de:\tjo     146e4 <adjust_reg_min_max_vals+0x1294>\n   ...\n\t\t*dst_smin = S64_MIN;\n   146e4:\tmovabs $0x8000000000000000', '%rax\n   146ee:\tmov    %rax', '0x28(%r12)\n\t\t*dst_smax = S64_MAX;\n   146f3:\tsub    $0x1', '%rax\n   146f7:\tmov    %rax', '0x30(%r12)\n\nBefore the change it gives:\n\n\ts64 smin_val = src_reg->smin_value;\n     675:\tmov    0x28(%rsi)', '%r8\n\ts64 smax_val = src_reg->smax_value;\n\tu64 umin_val = src_reg->umin_value;\n\tu64 umax_val = src_reg->umax_value;\n     679:\tmov    %rdi', '%rax /* rax = dst_reg */\n\tif (signed_add_overflows(dst_reg->smin_value', ' smin_val) ||\n     67c:\tmov    0x28(%rdi)', '%rdi /* rdi = dst_reg->smin_value */\n\tu64 umin_val = src_reg->umin_value;\n     680:\tmov    0x38(%rsi)', '%rdx\n\tu64 umax_val = src_reg->umax_value;\n     684:\tmov    0x40(%rsi)', '%rcx\n\ts64 res = (s64)((u64)a + (u64)b);\n     688:\tlea    (%r8', '%rdi', '1)', '%r9 /* r9 = dst_reg->smin_value + src_reg->smin_value */\n\treturn res < a;\n     68c:\tcmp    %r9', '%rdi\n     68f:\tsetg   %r10b /* r10b = (dst_reg->smin_value + src_reg->smin_value) > dst_reg->smin_value */\n\tif (b < 0)\n     693:\ttest   %r8', '%r8\n     696:\tjs     72b <scalar_min_max_add+0xbb>\n\t    signed_add_overflows(dst_reg->smax_value', ' smax_val)) {\n\t\tdst_reg->smin_value = S64_MIN;\n\t\tdst_reg->smax_value = S64_MAX;\n     69c:\tmovabs $0x7fffffffffffffff', '%rdi\n\ts64 smax_val = src_reg->smax_value;\n     6a6:\tmov    0x30(%rsi)', '%r8\n\t\tdst_reg->smin_value = S64_MIN;\n     6aa:\t00 00 00 \tmovabs $0x8000000000000000', '%rsi\n\tif (signed_add_overflows(dst_reg->smin_value', ' smin_val) ||\n     6b4:\ttest   %r10b', '%r10b /* (dst_reg->smin_value + src_reg->smin_value) > dst_reg->smin_value ? goto 6cb */\n     6b7:\tjne    6cb <scalar_min_max_add+0x5b>\n\t    signed_add_overflows(dst_reg->smax_value', ' smax_val)) {\n     6b9:\tmov    0x30(%rax)', '%r10   /* r10 = dst_reg->smax_value */\n\ts64 res = (s64)((u64)a + (u64)b);\n     6bd:\tlea    (%r10', '%r8', '1)', '%r11 /* r11 = dst_reg->smax_value + src_reg->smax_value */\n\tif (b < 0)\n     6c1:\ttest   %r8', '%r8\n     6c4:\tjs     71e <scalar_min_max_add+0xae>\n\tif (signed_add_overflows(dst_reg->smin_value', ' smin_val) ||\n     6c6:\tcmp    %r11', '%r10 /* (dst_reg->smax_value + src_reg->smax_value) <= dst_reg->smax_value ? goto 723 */\n     6c9:\tjle    723 <scalar_min_max_add+0xb3>\n\t} else {\n\t\tdst_reg->smin_value += smin_val;\n\t\tdst_reg->smax_value += smax_val;\n\t}\n     6cb:\tmov    %rsi', '0x28(%rax)\n     ...\n     6d5:\tmov    %rdi', '0x30(%rax)\n     ...\n\tif (signed_add_overflows(dst_reg->smin_value', ' smin_val) ||\n     71e:\tcmp    %r11', '%r10\n     721:\tjl     6cb <scalar_min_max_add+0x5b>\n\t\tdst_reg->smin_value += smin_val;\n     723:\tmov    %r9', '%rsi\n\t\tdst_reg->smax_value += smax_val;\n     726:\tmov    %r11', '%rdi\n     729:\tjmp    6cb <scalar_min_max_add+0x5b>\n\t\treturn res > a;\n     72b:\tcmp    %r9', '%rdi\n     72e:\tsetl   %r10b\n     732:\tjmp    69c <scalar_min_max_add+0x2c>\n     737:\tnopw   0x0(%rax', '%rax', '1)\n\nNote: unlike adjust_ptr_min_max_vals() and scalar*_min_max_add()', ' it is\nnecessary to introduce intermediate variable in adjust_jmp_off() to keep\nthe functional behavior unchanged. Without an intermediate variable\nimm/off will be altered even on overflow.\n\nSuggested-by: Jiri Olsa <jolsa@kernel.org>\nSigned-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>\nLink: https://lore.kernel.org/r/20240712080127.136608-3-shung-hsi.yu@suse.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Refactor to use check_add_overflow() for addition overflow checking in eBPF verifier.,overflow refactoring verifier,It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
4a04b4f0de59dd5c621e78f15803ee0b0544eeb8,4a04b4f0de59dd5c621e78f15803ee0b0544eeb8,Shung-Hsi Yu,shung-hsi.yu@suse.com,1720771284,Alexei Starovoitov,ast@kernel.org,1720799647,a269c2797c6ab33dc8e4849d77bac21b943a23f3,2454075f8e2915cebbe52a1195631bc7efe2b7e1,"bpf: fix overflow check in adjust_jmp_off()

adjust_jmp_off() incorrectly used the insn->imm field for all overflow check","
which is incorrect as that should only be done or the BPF_JMP32 | BPF_JA case","['\nnot the general jump instruction case. Fix it by using insn->off for overflow\ncheck in the general case.\n\nFixes: 5337ac4c9b80 (""bpf: Fix the corner case with may_goto and jump to the 1st insn."")\nSigned-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>\nLink: https://lore.kernel.org/r/20240712080127.136608-2-shung-hsi.yu@suse.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fix incorrect overflow check in adjust_jmp_off() for BPF_JMP32 | BPF_JA case.,"overflow, adjust_jmp_off, BPF_JMP32",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2454075f8e2915cebbe52a1195631bc7efe2b7e1,2454075f8e2915cebbe52a1195631bc7efe2b7e1,Alan Maguire,alan.maguire@oracle.com,1720776539,Daniel Borkmann,daniel@iogearbox.net,1720796546,4e0126439dbaa60a7531e6916d2b0b91548d9789,b3470da314fd8018ee237e382000c4154a942420,"bpf: Eliminate remaining ""make W=1"" warnings in kernel/bpf/btf.o

As reported by Mirsad [1] we still see format warnings in kernel/bpf/btf.o
at W=1 warning level:

  CC      kernel/bpf/btf.o
./kernel/bpf/btf.c: In function ‘btf_type_seq_show_flags’:
./kernel/bpf/btf.c:7553:21: warning: assignment left-hand side might be a candidate for a format attribute [-Wsuggest-attribute=format]
 7553 |         sseq.showfn = btf_seq_show;
      |                     ^
./kernel/bpf/btf.c: In function ‘btf_type_snprintf_show’:
./kernel/bpf/btf.c:7604:31: warning: assignment left-hand side might be a candidate for a format attribute [-Wsuggest-attribute=format]
 7604 |         ssnprintf.show.showfn = btf_snprintf_show;
      |                               ^

Combined with CONFIG_WERROR=y these can halt the build.

The fix (annotating the structure field with __printf())
suggested by Mirsad resolves these. Apologies I missed this last time.
No other W=1 warnings were observed in kernel/bpf after this fix.

[1] https://lore.kernel.org/bpf/92c9d047-f058-400c-9c7d-81d4dc1ef71b@gmail.com/

Fixes: b3470da314fd (""bpf: annotate BTF show functions with __printf"")
Reported-by: Mirsad Todorovac <mtodorovac69@gmail.com>
Suggested-by: Mirsad Todorovac <mtodorovac69@gmail.com>
Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240712092859.1390960-1-alan.maguire@oracle.com
",,Fixes remaining W=1 format warnings in kernel/bpf/btf.o by adding __printf annotation.,"format warnings, __printf annotation, kernel bpf",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
b3470da314fd8018ee237e382000c4154a942420,b3470da314fd8018ee237e382000c4154a942420,Alan Maguire,alan.maguire@oracle.com,1720722201,Alexei Starovoitov,ast@kernel.org,1720732517,5ad1e4998c29f1449123c7ca6e32ec6a27204acd,19d3c179a37730caf600a97fed3794feac2b197b,"bpf: annotate BTF show functions with __printf

-Werror=suggest-attribute=format warns about two functions
in kernel/bpf/btf.c [1]; add __printf() annotations to silence
these warnings since for CONFIG_WERROR=y they will trigger
build failures.

[1] https://lore.kernel.org/bpf/a8b20c72-6631-4404-9e1f-0410642d7d20@gmail.com/

Fixes: 31d0bc81637d (""bpf: Move to generic BTF show support"," apply it to seq files/strings"")
Reported-by: Mirsad Todorovac <mtodorovac69@gmail.com>
Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Tested-by: Mirsad Todorovac <mtodorovac69@yahoo.com>
Link: https://lore.kernel.org/r/20240711182321.963667-1-alan.maguire@oracle.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],This commit adds __printf annotations to silence warning for BTF show functions to prevent build failures.,"__printf, annotations, warnings",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
51df8e0cbaefd432f7029dde94e6c7e4e5b19465,51df8e0cbaefd432f7029dde94e6c7e4e5b19465,Linus Torvalds,torvalds@linux-foundation.org,1720715389,Linus Torvalds,torvalds@linux-foundation.org,1720715389,0bf175e0de508a8b493be2506dc6ccec1f188322,83ab4b461eb7bdf90984eb56d4954dbe11e926d4 d7c199e77ef2fe259ad5b1beca5ddd6c951fcba2,"Merge tag 'net-6.10-rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 ""Including fixes from bpf and netfilter.

  Current release - regressions:

   - core: fix rc7's __skb_datagram_iter() regression

  Current release - new code bugs:

   - eth: bnxt: fix crashes when reducing ring count with active RSS
     contexts

  Previous releases - regressions:

   - sched: fix UAF when resolving a clash

   - skmsg: skip zero length skb in sk_msg_recvmsg2

   - sunrpc: fix kernel free on connection failure in
     xs_tcp_setup_socket

   - tcp: avoid too many retransmit packets

   - tcp: fix incorrect undo caused by DSACK of TLP retransmit

   - udp: Set SOCK_RCU_FREE earlier in udp_lib_get_port().

   - eth: ks8851: fix deadlock with the SPI chip variant

   - eth: i40e: fix XDP program unloading while removing the driver

  Previous releases - always broken:

   - bpf:
       - fix too early release of tcx_entry
       - fail bpf_timer_cancel when callback is being cancelled
       - bpf: fix order of args in call to bpf_map_kvcalloc

   - netfilter: nf_tables: prefer nft_chain_validate

   - ppp: reject claimed-as-LCP but actually malformed packets

   - wireguard: avoid unaligned 64-bit memory accesses""

* tag 'net-6.10-rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (33 commits)
  net"," sunrpc: Remap EPERM in case of connection failure in xs_tcp_setup_socket
  net/sched: Fix UAF when resolving a clash
  net: ks8851: Fix potential TX stall after interface reopen
  udp: Set SOCK_RCU_FREE earlier in udp_lib_get_port().
  netfilter: nf_tables: prefer nft_chain_validate
  netfilter: nfnetlink_queue: drop bogus WARN_ON
  ethtool: netlink: do not return SQI value if link is down
  ppp: reject claimed-as-LCP but actually malformed packets
  selftests/bpf: Add timer lockup selftest
  net: ethernet: mtk-star-emac: set mac_managed_pm when probing
  e1000e: fix force smbus during suspend flow
  tcp: avoid too many retransmit packets
  bpf: Defer work in bpf_timer_cancel_and_free
  bpf: Fail bpf_timer_cancel when callback is being cancelled
  bpf: fix order of args in call to bpf_map_kvcalloc
  net: ethernet: lantiq_etop: fix double free in detach
  i40e: Fix XDP program unloading while removing the driver
  net: fix rc7's __skb_datagram_iter()
  net: ks8851: Fix deadlock with the SPI chip variant
  octeontx2-af: Fix incorrect value output on error path in rvu_check_rsrc_availability()
  ...
",[''],"Merge networking fixes related to bpf, netfilter, and other components for the 6.10-rc8 version.","networking, fixes, merge",It's other type of commit.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', 'tc/netfilter like programs', ""It's not related to any of the above.""]"
19d3c179a37730caf600a97fed3794feac2b197b,19d3c179a37730caf600a97fed3794feac2b197b,Puranjay Mohan,puranjay@kernel.org,1720711118,Daniel Borkmann,daniel@iogearbox.net,1720713390,2f69641c999e9865b5d8d02efcf6823d5f65b4f1,18a8a4c88fb4c261f72a29b769c9463362d9687a,bpf," arm64: Fix trampoline for BPF_TRAMP_F_CALL_ORIG

When BPF_TRAMP_F_CALL_ORIG is set","[' the trampoline calls\n__bpf_tramp_enter() and __bpf_tramp_exit() functions', ' passing them\nthe struct bpf_tramp_image *im pointer as an argument in R0.\n\nThe trampoline generation code uses emit_addr_mov_i64() to emit\ninstructions for moving the bpf_tramp_image address into R0', ' but\nemit_addr_mov_i64() assumes the address to be in the vmalloc() space\nand uses only 48 bits. Because bpf_tramp_image is allocated using\nkzalloc()', ' its address can use more than 48-bits', ' in this case the\ntrampoline will pass an invalid address to __bpf_tramp_enter/exit()\ncausing a kernel crash.\n\nFix this by using emit_a64_mov_i64() in place of emit_addr_mov_i64()\nas it can work with addresses that are greater than 48-bits.\n\nFixes: efc9909fdce0 (""bpf', ' arm64: Add bpf trampoline for arm64"")\nSigned-off-by: Puranjay Mohan <puranjay@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nCloses: https://lore.kernel.org/all/SJ0PR15MB461564D3F7E7A763498CA6A8CBDB2@SJ0PR15MB4615.namprd15.prod.outlook.com/\nLink: https://lore.kernel.org/bpf/20240711151838.43469-1-puranjay@kernel.org\n', '']",Fix trampoline functionality for ARM64 architecture when BPF_TRAMP_F_CALL_ORIG is set.,"trampoline, ARM64, BPF_TRAMP_F_CALL_ORIG",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"[""It's not related to any of the above.""]"
a819ff0cf9fa166881a3781d32909257e2033e86,a819ff0cf9fa166881a3781d32909257e2033e86,Paolo Abeni,pabeni@redhat.com,1720694313,Paolo Abeni,pabeni@redhat.com,1720694313,4c5539b3d9edd528a93ae09bc8a0de98347e4ead,626dfed5fa3bfb41e0dffd796032b555b69f9cde 50bd5a0c658d132507673c4d59347c025dd149ed,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-07-11

The following pull-request contains BPF updates for your *net* tree.

We've added 4 non-merge commits during the last 2 day(s) which contain
a total of 4 files changed", 262 insertions(+),"[' 19 deletions(-).\n\nThe main changes are:\n\n1) Fixes for a BPF timer lockup and a use-after-free scenario when timers\n   are used concurrently', ' from Kumar Kartikeya Dwivedi.\n\n2) Fix the argument order in the call to bpf_map_kvcalloc() which could\n   otherwise lead to a compilation error', "" from Mohammad Shehar Yaar Tausif.\n\nbpf-for-netdev\n\n* tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:\n  selftests/bpf: Add timer lockup selftest\n  bpf: Defer work in bpf_timer_cancel_and_free\n  bpf: Fail bpf_timer_cancel when callback is being cancelled\n  bpf: fix order of args in call to bpf_map_kvcalloc\n====================\n\nLink: https://patch.msgid.link/20240711084016.25757-1-daniel@iogearbox.net\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>\n"", '']",Merged BPF updates for net tree containing 4 non-merge commits with changes to 4 files.,"BPF, updates, net",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
626dfed5fa3bfb41e0dffd796032b555b69f9cde,626dfed5fa3bfb41e0dffd796032b555b69f9cde,Daniel Borkmann,daniel@iogearbox.net,1720075317,Paolo Abeni,pabeni@redhat.com,1720693065,d12cf6ffc238526a87a26deca2182788e38763b0,26488172b0292bed837b95a006a3f3431d1898c3,net," sunrpc: Remap EPERM in case of connection failure in xs_tcp_setup_socket

When using a BPF program on kernel_connect()","[' the call can return -EPERM. This\ncauses xs_tcp_setup_socket() to loop forever', ' filling up the syslog and causing\nthe kernel to potentially freeze up.\n\nNeil suggested:\n\n  This will propagate -EPERM up into other layers which might not be ready\n  to handle it. It might be safer to map EPERM to an error we would be more\n  likely to expect from the network system - such as ECONNREFUSED or ENETDOWN.\n\nECONNREFUSED as error seems reasonable. For programs setting a different error\ncan be out of reach (see handling in 4fbac77d2d09) in particular on kernels\nwhich do not have f10d05966196 (""bpf: Make BPF_PROG_RUN_ARRAY return -err\ninstead of allow boolean"")', ' thus given that it is better to simply remap for\nconsistent behavior. UDP does handle EPERM in xs_udp_send_request().\n\nFixes: d74bad4e74ee (""bpf: Hooks for sys_connect"")\nFixes: 4fbac77d2d09 (""bpf: Hooks for sys_bind"")\nCo-developed-by: Lex Siegel <usiegl00@gmail.com>\nSigned-off-by: Lex Siegel <usiegl00@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nCc: Neil Brown <neilb@suse.de>\nCc: Trond Myklebust <trondmy@kernel.org>\nCc: Anna Schumaker <anna@kernel.org>\nLink: https://github.com/cilium/cilium/issues/33395\nLink: https://lore.kernel.org/bpf/171374175513.12877.8993642908082014881@noble.neil.brown.name\nLink: https://patch.msgid.link/9069ec1d59e4b2129fc23433349fd5580ad43921.1720075070.git.daniel@iogearbox.net\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>\n\n', '']",Remap EPERM error for tcp socket connection failure within sunrpc using a BPF program on kernel_connect.,"Remap, EPERM, kernel_connect",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The syscall interface,['socket like programs']
5c0b485a8c6116516f33925b9ce5b6104a6eadfd,5c0b485a8c6116516f33925b9ce5b6104a6eadfd,Kuniyuki Iwashima,kuniyu@amazon.com,1720552436,Paolo Abeni,pabeni@redhat.com,1720690107,a7057ed431435f8d8b7c6a45859e476dea334cab,c184cf94e73b04ff7048d045f5413899bc664788,"udp: Set SOCK_RCU_FREE earlier in udp_lib_get_port().

syzkaller triggered the warning [0] in udp_v4_early_demux().

In udp_v[46]_early_demux() and sk_lookup()"," we do not touch the refcount
of the looked-up sk and use sock_pfree() as skb->destructor","[' so we check\nSOCK_RCU_FREE to ensure that the sk is safe to access during the RCU grace\nperiod.\n\nCurrently', ' SOCK_RCU_FREE is flagged for a bound socket after being put\ninto the hash table.  Moreover', ' the SOCK_RCU_FREE check is done too early\nin udp_v[46]_early_demux() and sk_lookup()', ' so there could be a small race\nwindow:\n\n  CPU1                                 CPU2\n  ----                                 ----\n  udp_v4_early_demux()                 udp_lib_get_port()\n  |                                    |- hlist_add_head_rcu()\n  |- sk = __udp4_lib_demux_lookup()    |\n  |- DEBUG_NET_WARN_ON_ONCE(sk_is_refcounted(sk));\n                                       `- sock_set_flag(sk', ' SOCK_RCU_FREE)\n\nWe had the same bug in TCP and fixed it in commit 871019b22d1b (""net:\nset SOCK_RCU_FREE before inserting socket into hashtable"").\n\nLet\'s apply the same fix for UDP.\n\n[0]:\nWARNING: CPU: 0 PID: 11198 at net/ipv4/udp.c:2599 udp_v4_early_demux+0x481/0xb70 net/ipv4/udp.c:2599\nModules linked in:\nCPU: 0 PID: 11198 Comm: syz-executor.1 Not tainted 6.9.0-g93bda33046e7 #13\nHardware name: QEMU Standard PC (i440FX + PIIX', ' 1996)', ' BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014\nRIP: 0010:udp_v4_early_demux+0x481/0xb70 net/ipv4/udp.c:2599\nCode: c5 7a 15 fe bb 01 00 00 00 44 89 e9 31 ff d3 e3 81 e3 bf ef ff ff 89 de e8 2c 74 15 fe 85 db 0f 85 02 06 00 00 e8 9f 7a 15 fe <0f> 0b e8 98 7a 15 fe 49 8d 7e 60 e8 4f 39 2f fe 49 c7 46 60 20 52\nRSP: 0018:ffffc9000ce3fa58 EFLAGS: 00010293\nRAX: 0000000000000000 RBX: 0000000000000000 RCX: ffffffff8318c92c\nRDX: ffff888036ccde00 RSI: ffffffff8318c2f1 RDI: 0000000000000001\nRBP: ffff88805a2dd6e0 R08: 0000000000000001 R09: 0000000000000000\nR10: 0000000000000000 R11: 0001ffffffffffff R12: ffff88805a2dd680\nR13: 0000000000000007 R14: ffff88800923f900 R15: ffff88805456004e\nFS:  00007fc449127640(0000) GS:ffff88807dc00000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007fc449126e38 CR3: 000000003de4b002 CR4: 0000000000770ef0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000600\nPKRU: 55555554\nCall Trace:\n <TASK>\n ip_rcv_finish_core.constprop.0+0xbdd/0xd20 net/ipv4/ip_input.c:349\n ip_rcv_finish+0xda/0x150 net/ipv4/ip_input.c:447\n NF_HOOK include/linux/netfilter.h:314 [inline]\n NF_HOOK include/linux/netfilter.h:308 [inline]\n ip_rcv+0x16c/0x180 net/ipv4/ip_input.c:569\n __netif_receive_skb_one_core+0xb3/0xe0 net/core/dev.c:5624\n __netif_receive_skb+0x21/0xd0 net/core/dev.c:5738\n netif_receive_skb_internal net/core/dev.c:5824 [inline]\n netif_receive_skb+0x271/0x300 net/core/dev.c:5884\n tun_rx_batched drivers/net/tun.c:1549 [inline]\n tun_get_user+0x24db/0x2c50 drivers/net/tun.c:2002\n tun_chr_write_iter+0x107/0x1a0 drivers/net/tun.c:2048\n new_sync_write fs/read_write.c:497 [inline]\n vfs_write+0x76f/0x8d0 fs/read_write.c:590\n ksys_write+0xbf/0x190 fs/read_write.c:643\n __do_sys_write fs/read_write.c:655 [inline]\n __se_sys_write fs/read_write.c:652 [inline]\n __x64_sys_write+0x41/0x50 fs/read_write.c:652\n x64_sys_call+0xe66/0x1990 arch/x86/include/generated/asm/syscalls_64.h:2\n do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n do_syscall_64+0x4b/0x110 arch/x86/entry/common.c:83\n entry_SYSCALL_64_after_hwframe+0x4b/0x53\nRIP: 0033:0x7fc44a68bc1f\nCode: 89 54 24 18 48 89 74 24 10 89 7c 24 08 e8 e9 cf f5 ff 48 8b 54 24 18 48 8b 74 24 10 41 89 c0 8b 7c 24 08 b8 01 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 31 44 89 c7 48 89 44 24 08 e8 3c d0 f5 ff 48\nRSP: 002b:00007fc449126c90 EFLAGS: 00000293 ORIG_RAX: 0000000000000001\nRAX: ffffffffffffffda RBX: 00000000004bc050 RCX: 00007fc44a68bc1f\nRDX: 0000000000000032 RSI: 00000000200000c0 RDI: 00000000000000c8\nRBP: 00000000004bc050 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000032 R11: 0000000000000293 R12: 0000000000000000\nR13: 000000000000000b R14: 00007fc44a5ec530 R15: 0000000000000000\n </TASK>\n\nFixes: 6acc9b432e67 (""bpf: Add helper to retrieve socket in BPF"")\nReported-by: syzkaller <syzkaller@googlegroups.com>\nSigned-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nLink: https://patch.msgid.link/20240709191356.24010-1-kuniyu@amazon.com\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>\n\n', '']",The commit sets SOCK_RCU_FREE earlier in udp_lib_get_port to address a syzkaller-triggered warning.,"udp, SOCK_RCU_FREE, syzkaller",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
50bd5a0c658d132507673c4d59347c025dd149ed,50bd5a0c658d132507673c4d59347c025dd149ed,Kumar Kartikeya Dwivedi,memxor@gmail.com,1720675629,Daniel Borkmann,daniel@iogearbox.net,1720685911,065eafc4e3328e68157f744c675c1e6f749bd316,0c237341d994adbafed2a0d372275de39efa4a98,"selftests/bpf: Add timer lockup selftest

Add a selftest that tries to trigger a situation where two timer callbacks
are attempting to cancel each other's timer. By running them continuously","
we hit a condition where both run in parallel and cancel each other.

Without the fix in the previous patch","[' this would cause a lockup as\nhrtimer_cancel on either side will wait for forward progress from the\ncallback.\n\nEnsure that this situation leads to a EDEADLK error.\n\nSigned-off-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240711052709.2148616-1-memxor@gmail.com\n', '']",Add a selftest to trigger timer lockup by running conflicting timer callbacks.,"selftests,bpf,timer",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
fde318326daa48a4bb3ca8ee229bac4d14b5bc2a,fde318326daa48a4bb3ca8ee229bac4d14b5bc2a,Artem Savkov,asavkov@redhat.com,1715932610,Michael Ellerman,mpe@ellerman.id.au,1720676421,7c99b2a67cb7a15ab6ced905335734f58e0f65c1,597b1710982d10b8629697e4a548b30d0d93eeed,"powerpc64/bpf: jit support for signed division and modulo

Add jit support for sign division and modulo. Tested using test_bpf
module.

Signed-off-by: Artem Savkov <asavkov@redhat.com>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20240517075650.248801-6-asavkov@redhat.com

",,Add JIT support for signed division and modulo in powerpc64 architecture.,"JIT,signed division,modulo",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
597b1710982d10b8629697e4a548b30d0d93eeed,597b1710982d10b8629697e4a548b30d0d93eeed,Artem Savkov,asavkov@redhat.com,1715932609,Michael Ellerman,mpe@ellerman.id.au,1720676421,f705f2a02c67746b5d15f95c5297afcc64f2ee8b,717756c9c8ddad9f28389185bfb161d4d88e01a4,"powerpc64/bpf: jit support for sign extended mov

Add jit support for sign extended mov. Tested using test_bpf module.

Signed-off-by: Artem Savkov <asavkov@redhat.com>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20240517075650.248801-5-asavkov@redhat.com

",,Add JIT support for sign extended move on PowerPC64 architecture.,"jit support,powerpc64,sign extended",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
717756c9c8ddad9f28389185bfb161d4d88e01a4,717756c9c8ddad9f28389185bfb161d4d88e01a4,Artem Savkov,asavkov@redhat.com,1715932608,Michael Ellerman,mpe@ellerman.id.au,1720676421,38e19f3c3c6bdda7ad61d02b0df126825c8368ae,a71c0b09a14db72d59c48a8cda7a73032f4d418b,"powerpc64/bpf: jit support for sign extended load

Add jit support for sign extended load. Tested using test_bpf module.

Signed-off-by: Artem Savkov <asavkov@redhat.com>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20240517075650.248801-4-asavkov@redhat.com

",,Added JIT support for sign extended load on powerpc64 architecture.,"JIT,powerpc64,sign-extended",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
a71c0b09a14db72d59c48a8cda7a73032f4d418b,a71c0b09a14db72d59c48a8cda7a73032f4d418b,Artem Savkov,asavkov@redhat.com,1715932607,Michael Ellerman,mpe@ellerman.id.au,1720676421,eadec4d61cd27bd13effbdfdfaa128179c3f78c7,3c086ce222cefcf16d412faa10d456161d076796,"powerpc64/bpf: jit support for unconditional byte swap

Add jit support for unconditional byte swap. Tested using BSWAP tests
from test_bpf module.

Signed-off-by: Artem Savkov <asavkov@redhat.com>
Reviewed-by: Hari Bathini <hbathini@linux.ibm.com>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20240517075650.248801-3-asavkov@redhat.com

",,Add JIT support for unconditional byte swap on powerpc64 architecture.,"JIT,support,byte swap",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
3c086ce222cefcf16d412faa10d456161d076796,3c086ce222cefcf16d412faa10d456161d076796,Artem Savkov,asavkov@redhat.com,1715932606,Michael Ellerman,mpe@ellerman.id.au,1720676420,7319c0f53ef230d60374d1b20c82b1199600db42,20ce0c247b2500cb7060cb115274ba71abda2626,"powerpc64/bpf: jit support for 32bit offset jmp instruction

Add jit support for JMP32_JA instruction. Tested using test_bpf module.

Signed-off-by: Artem Savkov <asavkov@redhat.com>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20240517075650.248801-2-asavkov@redhat.com

",,Added JIT support for 32-bit JMP32_JA instruction on powerpc64 architecture.,"jit,powerpc64,instruction",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,['tracepoints like programs']
0c237341d994adbafed2a0d372275de39efa4a98,0c237341d994adbafed2a0d372275de39efa4a98,Alexei Starovoitov,ast@kernel.org,1720652385,Alexei Starovoitov,ast@kernel.org,1720653616,6d3e8d438b7174e4ab71c781642bc946d3a84752,af253aef183a31ce62d2e39fc520b0ebfb562bb9 a6fcd19d7eac1335eb76bc16b6a66b7f574d1d69,"Merge branch 'fixes-for-bpf-timer-lockup-and-uaf'

Kumar Kartikeya Dwivedi says:

====================
Fixes for BPF timer lockup and UAF

The following patches contain fixes for timer lockups and a
use-after-free scenario.

This set proposes to fix the following lockup situation for BPF timers.

CPU 1					CPU 2

bpf_timer_cb				bpf_timer_cb
  timer_cb1				  timer_cb2
    bpf_timer_cancel(timer_cb2)		    bpf_timer_cancel(timer_cb1)
      hrtimer_cancel			      hrtimer_cancel

In this case"," both callbacks will continue waiting for each other to
finish synchronously","[' causing a lockup.\n\nThe proposed fix adds support for tracking in-flight cancellations\n*begun by other timer callbacks* for a particular BPF timer.  Whenever\npreparing to call hrtimer_cancel', "" a callback will increment the target\ntimer's counter"", ' then inspect its in-flight cancellations', ' and if\nnon-zero', "" return -EDEADLK to avoid situations where the target timer's\ncallback is waiting for its completion.\n\nThis does mean that in cases where a callback is fired and cancelled"", ' it\nwill be unable to cancel any timers in that execution. This can be\nalleviated by maintaining the list of waiting callbacks in bpf_hrtimer\nand searching through it to avoid interdependencies', ' but this may\nintroduce additional delays in bpf_timer_cancel', ' in addition to\nrequiring extra state at runtime which may need to be allocated or\nreused from bpf_hrtimer storage. Moreover', ' extra synchronization is\nneeded to delete these elements from the list of waiting callbacks once\nhrtimer_cancel has finished.\n\nThe second patch is for a deadlock situation similar to above in\nbpf_timer_cancel_and_free', ' but also a UAF scenario that can occur if\ntimer is armed before entering it', ' if hrtimer_running check causes the\nhrtimer_cancel call to be skipped.\n\nAs seen above', ' synchronous hrtimer_cancel would lead to deadlock (if\nsame callback tries to free its timer', ' or two timers free each other)', '\ntherefore we queue work onto the global workqueue to ensure outstanding\ntimers are cancelled before bpf_hrtimer state is freed.\n\nFurther details are in the patches.\n====================\n\nLink: https://lore.kernel.org/r/20240709185440.1104957-1-memxor@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fixes for timer lockups and use-after-free issues in BPF timers.,"BPF,timer,lockup",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
a6fcd19d7eac1335eb76bc16b6a66b7f574d1d69,a6fcd19d7eac1335eb76bc16b6a66b7f574d1d69,Kumar Kartikeya Dwivedi,memxor@gmail.com,1720551279,Alexei Starovoitov,ast@kernel.org,1720652384,6d3e8d438b7174e4ab71c781642bc946d3a84752,d4523831f07a267a943f0dde844bf8ead7495f13,"bpf: Defer work in bpf_timer_cancel_and_free

Currently"," the same case as previous patch (two timer callbacks trying
to cancel each other) can be invoked through bpf_map_update_elem as
well","[' or more precisely', ' freeing map elements containing timers. Since\nthis relies on hrtimer_cancel as well', ' it is prone to the same deadlock\nsituation as the previous patch.\n\nIt would be sufficient to use hrtimer_try_to_cancel to fix this problem', '\nas the timer cannot be enqueued after async_cancel_and_free. Once\nasync_cancel_and_free has been done', ' the timer must be reinitialized\nbefore it can be armed again. The callback running in parallel trying to\narm the timer will fail', ' and freeing bpf_hrtimer without waiting is\nsufficient (given kfree_rcu)', ' and bpf_timer_cb will return\nHRTIMER_NORESTART', ' preventing the timer from being rearmed again.\n\nHowever', ' there exists a UAF scenario where the callback arms the timer\nbefore entering this function', ' such that if cancellation fails (due to\ntimer callback invoking this routine', ' or the target timer callback\nrunning concurrently). In such a case', ' if the timer expiration is\nsignificantly far in the future', ' the RCU grace period expiration\nhappening before it will free the bpf_hrtimer state and along with it\nthe struct hrtimer', ' that is enqueued.\n\nHence', ' it is clear cancellation needs to occur after\nasync_cancel_and_free', ' and yet it cannot be done inline due to deadlock\nissues. We thus modify bpf_timer_cancel_and_free to defer work to the\nglobal workqueue', ' adding a work_struct alongside rcu_head (both used at\n_different_ points of time', ' so can share space).\n\nUpdate existing code comments to reflect the new state of affairs.\n\nFixes: b00628b1c7d5 (""bpf: Introduce bpf timers."")\nSigned-off-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>\nLink: https://lore.kernel.org/r/20240709185440.1104957-3-memxor@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit defers work in bpf_timer_cancel_and_free to handle timer callback conflicts through bpf_map_update_elem.,"bpf_timer,defer,callback",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d4523831f07a267a943f0dde844bf8ead7495f13,d4523831f07a267a943f0dde844bf8ead7495f13,Kumar Kartikeya Dwivedi,memxor@gmail.com,1720551278,Alexei Starovoitov,ast@kernel.org,1720652384,83d27006347ba36a310db5c375ca3e080aa900e7,af253aef183a31ce62d2e39fc520b0ebfb562bb9,"bpf: Fail bpf_timer_cancel when callback is being cancelled

Given a schedule:

timer1 cb			timer2 cb

bpf_timer_cancel(timer2);	bpf_timer_cancel(timer1);

Both bpf_timer_cancel calls would wait for the other callback to finish
executing"," introducing a lockup.

Add an atomic_t count named 'cancelling' in bpf_hrtimer. This keeps
track of all in-flight cancellation requests for a given BPF timer.
Whenever cancelling a BPF timer","[' we must check if we have outstanding\ncancellation requests', ' and if so', ' we must fail the operation with an\nerror (-EDEADLK) since cancellation is synchronous and waits for the\ncallback to finish executing. This implies that we can enter a deadlock\nsituation involving two or more timer callbacks executing in parallel\nand attempting to cancel one another.\n\nNote that we avoid incrementing the cancelling counter for the target\ntimer (the one being cancelled) if bpf_timer_cancel is not invoked from\na callback', ' to avoid spurious errors. The whole point of detecting\ncur->cancelling and returning -EDEADLK is to not enter a busy wait loop\n(which may or may not lead to a lockup). This does not apply in case the\ncaller is in a non-callback context', "" the other side can continue to\ncancel as it sees fit without running into errors.\n\nBackground on prior attempts:\n\nEarlier versions of this patch used a bool 'cancelling' bit and used the\nfollowing pattern under timer->lock to publish cancellation status.\n\nlock(t->lock);\nt->cancelling = true;\nmb();\nif (cur->cancelling)\n\treturn -EDEADLK;\nunlock(t->lock);\nhrtimer_cancel(t->timer);\nt->cancelling = false;\n\nThe store outside the critical section could overwrite a parallel\nrequests t->cancelling assignment to true"", ' to ensure the parallely\nexecuting callback observes its cancellation status.\n\nIt would be necessary to clear this cancelling bit once hrtimer_cancel\nis done', ' but lack of serialization introduced races. Another option was\nexplored where bpf_timer_start would clear the bit when (re)starting the\ntimer under timer->lock. This would ensure serialized access to the\ncancelling bit', ' but may allow it to be cleared before in-flight\nhrtimer_cancel has finished executing', ' such that lockups can occur\nagain.\n\nThus', ' we choose an atomic counter to keep track of all outstanding\ncancellation requests and use it to prevent lockups in case callbacks\nattempt to cancel each other while executing in parallel.\n\nReported-by: Dohyun Kim <dohyunkim@google.com>\nReported-by: Neel Natu <neelnatu@google.com>\nFixes: b00628b1c7d5 (""bpf: Introduce bpf timers."")\nSigned-off-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>\nLink: https://lore.kernel.org/r/20240709185440.1104957-2-memxor@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit addresses a race condition in bpf_timer_cancel by introducing an atomic count for cancellation requests.,"bpf_timer_cancel, atomic_t count, cancellation",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
af253aef183a31ce62d2e39fc520b0ebfb562bb9,af253aef183a31ce62d2e39fc520b0ebfb562bb9,Mohammad Shehar Yaar Tausif,sheharyaar48@gmail.com,1720605922,Alexei Starovoitov,ast@kernel.org,1720650679,6a534295d84092d9f9bc6f1d1bef7e5519fe25e0,e1533b6319ab9c3a97dad314dd88b3783bc41b69,"bpf: fix order of args in call to bpf_map_kvcalloc

The original function call passed size of smap->bucket before the number of
buckets which raises the error 'calloc-transposed-args' on compilation.

Vlastimil Babka added:

The order of parameters can be traced back all the way to 6ac99e8f23d4
(""bpf: Introduce bpf sk local storage"") accross several refactorings","
and that's why the commit is used as a Fixes: tag.

In v6.10-rc1","[' a different commit 2c321f3f70bc (""mm: change inlined\nallocation helpers to account at the call site"") however exposed the\norder of args in a way that gcc-14 has enough visibility to start\nwarning about it', ' because (in !CONFIG_MEMCG case) bpf_map_kvcalloc is\nthen a macro alias for kvcalloc instead of a static inline wrapper.\n\nTo sum up the warning happens when the following conditions are all met:\n\n- gcc-14 is used (didn\'t see it with gcc-13)\n- commit 2c321f3f70bc is present\n- CONFIG_MEMCG is not enabled in .config\n- CONFIG_WERROR turns this from a compiler warning to error\n\nFixes: 6ac99e8f23d4 (""bpf: Introduce bpf sk local storage"")\nReviewed-by: Andrii Nakryiko <andrii@kernel.org>\nTested-by: Christian Kujau <lists@nerdbynature.de>\nSigned-off-by: Mohammad Shehar Yaar Tausif <sheharyaar48@gmail.com>\nSigned-off-by: Vlastimil Babka <vbabka@suse.cz>\nLink: https://lore.kernel.org/r/20240710100521.15061-2-vbabka@suse.cz\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fix incorrect argument order in bpf_map_kvcalloc call to resolve compilation error.,"bpf, kvcalloc, fix",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF maps,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
18a8a4c88fb4c261f72a29b769c9463362d9687a,18a8a4c88fb4c261f72a29b769c9463362d9687a,Martin KaFai Lau,martin.lau@kernel.org,1720639412,Martin KaFai Lau,martin.lau@kernel.org,1720640708,e4ffff63ddf62529c15e0980cadfe67875d7ccae,ec5b8c76ab1c6d163762d60cfbedcd27e7527144 52b49ec1b2c78deb258596c3b231201445ef5380,"Merge branch 'BPF selftests misc fixes'

Geliang Tang says:

====================
v2:
 - only check the first ""link"" (link_nl) in test_mixed_links().
 - Drop patch 2 in v1.

This patchset fixes a segfault and a bpf object leak in test_progs.

It is a resend patch 1 out of ""skip ENOTSUPP BPF selftests"" set as Eduard
suggested. Together with another fix for xdp_adjust_tail.
====================

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,The commit merges fixes for BPF selftests including a segfault and a BPF object leak issue.,"BPF selftests, segfault, object leak",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['xdp like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
52b49ec1b2c78deb258596c3b231201445ef5380,52b49ec1b2c78deb258596c3b231201445ef5380,Geliang Tang,tanggeliang@kylinos.cn,1720617017,Martin KaFai Lau,martin.lau@kernel.org,1720640570,e4ffff63ddf62529c15e0980cadfe67875d7ccae,eef0532e900c20a6760da829e82dac3ee18688c5,"selftests/bpf: Close obj in error path in xdp_adjust_tail

If bpf_object__load() fails in test_xdp_adjust_frags_tail_grow()"," ""obj""
opened before this should be closed. So use ""goto out"" to close it instead
of using ""return"" here.

Fixes: 110221081aac (""bpf: selftests: update xdp_adjust_tail selftest to include xdp frags"")
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/f282a1ed2d0e3fb38cceefec8e81cabb69cab260.1720615848.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],Fixes error handling in xdp_adjust_tail selftest by ensuring proper closure of object in error path.,"selftests, xdp_adjust_tail, error",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['xdp like programs']
eef0532e900c20a6760da829e82dac3ee18688c5,eef0532e900c20a6760da829e82dac3ee18688c5,Geliang Tang,tanggeliang@kylinos.cn,1720617016,Martin KaFai Lau,martin.lau@kernel.org,1720640118,9a6519e43c3f9d0d2a4e4a2fd9cc38a3d2d120a6,ec5b8c76ab1c6d163762d60cfbedcd27e7527144,"selftests/bpf: Null checks for links in bpf_tcp_ca

Run bpf_tcp_ca selftests (./test_progs -t bpf_tcp_ca) on a Loongarch
platform"," some ""Segmentation fault"" errors occur:

'''
 test_dctcp:PASS:bpf_dctcp__open_and_load 0 nsec
 test_dctcp:FAIL:bpf_map__attach_struct_ops unexpected error: -524
 #29/1    bpf_tcp_ca/dctcp:FAIL
 test_cubic:PASS:bpf_cubic__open_and_load 0 nsec
 test_cubic:FAIL:bpf_map__attach_struct_ops unexpected error: -524
 #29/2    bpf_tcp_ca/cubic:FAIL
 test_dctcp_fallback:PASS:dctcp_skel 0 nsec
 test_dctcp_fallback:PASS:bpf_dctcp__load 0 nsec
 test_dctcp_fallback:FAIL:dctcp link unexpected error: -524
 #29/4    bpf_tcp_ca/dctcp_fallback:FAIL
 test_write_sk_pacing:PASS:open_and_load 0 nsec
 test_write_sk_pacing:FAIL:attach_struct_ops unexpected error: -524
 #29/6    bpf_tcp_ca/write_sk_pacing:FAIL
 test_update_ca:PASS:open 0 nsec
 test_update_ca:FAIL:attach_struct_ops unexpected error: -524
 settcpca:FAIL:setsockopt unexpected setsockopt: \
					actual -1 == expected -1
 (network_helpers.c:99: errno: No such file or directory) \
					Failed to call post_socket_cb
 start_test:FAIL:start_server_str unexpected start_server_str: \
					actual -1 == expected -1
 test_update_ca:FAIL:ca1_ca1_cnt unexpected ca1_ca1_cnt: \
					actual 0 <= expected 0
 #29/9    bpf_tcp_ca/update_ca:FAIL
 #29      bpf_tcp_ca:FAIL
 Caught signal #11!
 Stack trace:
 ./test_progs(crash_handler+0x28)[0x5555567ed91c]
 linux-vdso.so.1(__vdso_rt_sigreturn+0x0)[0x7ffffee408b0]
 ./test_progs(bpf_link__update_map+0x80)[0x555556824a78]
 ./test_progs(+0x94d68)[0x5555564c4d68]
 ./test_progs(test_bpf_tcp_ca+0xe8)[0x5555564c6a88]
 ./test_progs(+0x3bde54)[0x5555567ede54]
 ./test_progs(main+0x61c)[0x5555567efd54]
 /usr/lib64/libc.so.6(+0x22208)[0x7ffff2aaa208]
 /usr/lib64/libc.so.6(__libc_start_main+0xac)[0x7ffff2aaa30c]
 ./test_progs(_start+0x48)[0x55555646bca8]
 Segmentation fault
'''

This is because BPF trampoline is not implemented on Loongarch yet","['\n""link"" returned by bpf_map__attach_struct_ops() is NULL. test_progs\ncrashs when this NULL link passes to bpf_link__update_map(). This\npatch adds NULL checks for all links in bpf_tcp_ca to fix these errors.\nIf ""link"" is NULL', ' goto the newly added label ""out"" to destroy the skel.\n\nv2:\n - use ""goto out"" instead of ""return"" as Eduard suggested.\n\nFixes: 06da9f3bd641 (""selftests/bpf: Test switching TCP Congestion Control algorithms."")\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nReviewed-by: Alan Maguire <alan.maguire@oracle.com>\nLink: https://lore.kernel.org/r/b4c841492bd4ed97964e4e61e92827ce51bf1dc9.1720615848.git.tanggeliang@kylinos.cn\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Add null checks for links in bpf_tcp_ca selftests to address segmentation faults on Loongarch platform.,"null checks, segmentation fault, bpf_tcp_ca",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
9004054b1629d481fedea2d92b880f79fc6fa81b,9004054b1629d481fedea2d92b880f79fc6fa81b,Geliang Tang,tanggeliang@kylinos.cn,1720516582,Martin KaFai Lau,martin.lau@kernel.org,1720637782,12b3e6845feb8f2fe2a2404a76dce3df324dddf1,d9810c43f660fd502c5003244a5e9c181aa7df99,"selftests/bpf: Use connect_fd_to_fd in sk_lookup

This patch uses public helper connect_fd_to_fd() exported in
network_helpers.h instead of using getsockname() + connect() in
run_lookup_prog() in prog_tests/sk_lookup.c. This can simplify
the code.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/7077c277cde5a1864cdc244727162fb75c8bb9c5.1720515893.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Simplify sk_lookup test code by using connect_fd_to_fd helper.,"selftests,bpf,simplify",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
d9810c43f660fd502c5003244a5e9c181aa7df99,d9810c43f660fd502c5003244a5e9c181aa7df99,Geliang Tang,tanggeliang@kylinos.cn,1720516581,Martin KaFai Lau,martin.lau@kernel.org,1720637782,1719f50b8d553da3bec3cdce4164c6b27098f8d9,14fc6fcd35e7dde6d1de062b6711476b3050b22e,"selftests/bpf: Use start_server_addr in sk_lookup

This patch uses public helper start_server_addr() in udp_recv_send()
in prog_tests/sk_lookup.c to simplify the code.

And use ASSERT_OK_FD() to check fd returned by start_server_addr().

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/f11cabfef4a2170ecb66a1e8e2e72116d8f621b3.1720515893.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Simplify sk_lookup test using start_server_addr helper in udp_recv_send function.,"selftests,bpf,start_server_addr",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
14fc6fcd35e7dde6d1de062b6711476b3050b22e,14fc6fcd35e7dde6d1de062b6711476b3050b22e,Geliang Tang,tanggeliang@kylinos.cn,1720516580,Martin KaFai Lau,martin.lau@kernel.org,1720637782,8750d217282a68aee7a2bf32b1d9c2b9eac8ace6,adae187ebedcd95d02f045bc37dfecfd5b29434b,"selftests/bpf: Use start_server_str in sk_lookup

This patch uses public helper start_server_str() to simplify make_server()
in prog_tests/sk_lookup.c.

Add a callback setsockopts() to do all sockopts"," set it to post_socket_cb
pointer of struct network_helper_opts. And add a new struct cb_opts to save
the data needed to pass to the callback. Then pass this network_helper_opts
to start_server_str().

Also use ASSERT_OK_FD() to check fd returned by start_server_str().

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/5981539f5591d2c4998c962ef2bf45f34c940548.1720515893.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],Simplified sk_lookup test by using start_server_str and added a callback for setsockopts.,"sk_lookup,selftests,callback",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['xdp like programs', 'socket like programs', 'tc/netfilter like programs']"
adae187ebedcd95d02f045bc37dfecfd5b29434b,adae187ebedcd95d02f045bc37dfecfd5b29434b,Geliang Tang,tanggeliang@kylinos.cn,1720516579,Martin KaFai Lau,martin.lau@kernel.org,1720637782,3ab1481259481e50f21d795c993963e829650550,7046345d48adcc3f519e7b6192184f6049908bdb,"selftests/bpf: Close fd in error path in drop_on_reuseport

In the error path when update_lookup_map() fails in drop_on_reuseport in
prog_tests/sk_lookup.c"," ""server1""","[' the fd of server 1', ' should be closed.\nThis patch fixes this by using ""goto close_srv1"" lable instead of ""detach""\nto close ""server1"" in this case.\n\nFixes: 0ab5539f8584 (""selftests/bpf: Tests for BPF_SK_LOOKUP attach point"")\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nLink: https://lore.kernel.org/r/86aed33b4b0ea3f04497c757845cff7e8e621a2d.1720515893.git.tanggeliang@kylinos.cn\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",This commit closes a file descriptor in the error path of drop_on_reuseport in selftests/bpf.,"fd, error path, drop_on_reuseport",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
7046345d48adcc3f519e7b6192184f6049908bdb,7046345d48adcc3f519e7b6192184f6049908bdb,Geliang Tang,tanggeliang@kylinos.cn,1720516578,Martin KaFai Lau,martin.lau@kernel.org,1720637782,0a2353722c4176f2477d6502148c250855d955bd,a3016a27cea8e6d10b200b9e19c19961c402d106,"selftests/bpf: Add ASSERT_OK_FD macro

Add a new dedicated ASSERT macro ASSERT_OK_FD to test whether a socket
FD is valid or not. It can be used to replace macros ASSERT_GT(fd", 0,"[' """")', '\nASSERT_NEQ(fd', ' -1', ' """") or statements (fd < 0)', ' (fd != -1).\n\nSuggested-by: Martin KaFai Lau <martin.lau@kernel.org>\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nLink: https://lore.kernel.org/r/ded75be86ac630a3a5099739431854c1ec33f0ea.1720515893.git.tanggeliang@kylinos.cn\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Add ASSERT_OK_FD macro to validate socket file descriptors in BPF selftests.,"ASSERT_OK_FD,socket FD,selftests",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
a3016a27cea8e6d10b200b9e19c19961c402d106,a3016a27cea8e6d10b200b9e19c19961c402d106,Geliang Tang,tanggeliang@kylinos.cn,1720516577,Martin KaFai Lau,martin.lau@kernel.org,1720637782,99c9cd6f12b6c9090379c6872f2930b108617f4e,eeb23b54e447ea62b247d89681f0140abab00d7f,"selftests/bpf: Add backlog for network_helper_opts

Some callers expect __start_server() helper to pass their own ""backlog""
value to listen() instead of the default of 1. So this patch adds struct
member ""backlog"" for network_helper_opts to allow callers to set ""backlog""
value via start_server_str() helper.

listen(fd"," 0 /* backlog */) can be used to enforce syncookie. Meaning
backlog 0 is a legit value.

Using 0 as a default and changing it to 1 here is fine. It makes the test
program easier to write for the common case. Enforcing syncookie mode by
using backlog 0 is a niche use case but it should at least have a way for
the caller to do that. Thus","[' -ve backlog value is used here for the\nsyncookie use case. Please see the comment in network_helpers.h for\nthe details.\n\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nLink: https://lore.kernel.org/r/1660229659b66eaad07aa2126e9c9fe217eba0dd.1720515893.git.tanggeliang@kylinos.cn\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Add 'backlog' member to network_helper_opts to allow custom 'backlog' settings via start_server_str() helper in selftests.,"selftests,backlog,network_helper_opts",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
eeb23b54e447ea62b247d89681f0140abab00d7f,eeb23b54e447ea62b247d89681f0140abab00d7f,Alan Maguire,alan.maguire@oracle.com,1720623651,Alexei Starovoitov,ast@kernel.org,1720636787,28585ec9c678fefd1bf61306ac24782ce77478b3,c13fda93aca118b8e5cd202e339046728ee7dddb,"selftests/bpf: fix compilation failure when CONFIG_NF_FLOW_TABLE=m

In many cases"," kernel netfilter functionality is built as modules.
If CONFIG_NF_FLOW_TABLE=m in particular","[' progs/xdp_flowtable.c\n(and hence selftests) will fail to compile', ' so add a ___local\nversion of ""struct flow_ports"".\n\nFixes: c77e572d3a8c (""selftests/bpf: Add selftest for bpf_xdp_flow_lookup kfunc"")\nSigned-off-by: Alan Maguire <alan.maguire@oracle.com>\nLink: https://lore.kernel.org/r/20240710150051.192598-1-alan.maguire@oracle.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fixed compilation issue for selftests when CONFIG_NF_FLOW_TABLE is modular.,"compilation, selftests, fix",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
c13fda93aca118b8e5cd202e339046728ee7dddb,c13fda93aca118b8e5cd202e339046728ee7dddb,Sebastian Andrzej Siewior,bigeasy@linutronix.de,1720620991,Martin KaFai Lau,martin.lau@kernel.org,1720630732,e9b50594237f91eac6a7372ed2509b514d7f599d,605c96997d89c01c11bbddb4db820ede570581c7,"bpf: Remove tst_run from lwt_seg6local_prog_ops.

The syzbot reported that the lwt_seg6 related BPF ops can be invoked
via bpf_test_run() without without entering input_action_end_bpf()
first.

Martin KaFai Lau said that self test for BPF_PROG_TYPE_LWT_SEG6LOCAL
probably didn't work since it was introduced in commit 04d4b274e2a
(""ipv6: sr: Add seg6local action End.BPF""). The reason is that the
per-CPU variable seg6_bpf_srh_states::srh is never assigned in the self
test case but each BPF function expects it.

Remove test_run for BPF_PROG_TYPE_LWT_SEG6LOCAL.

Suggested-by: Martin KaFai Lau <martin.lau@linux.dev>
Reported-by: syzbot+608a2acde8c5a101d07d@syzkaller.appspotmail.com
Fixes: d1542d4ae4df (""seg6: Use nested-BH locking for seg6_bpf_srh_states."")
Fixes: 004d4b274e2a (""ipv6: sr: Add seg6local action End.BPF"")
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/r/20240710141631.FbmHcQaX@linutronix.de
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Remove unsupported test run from lwt_seg6local BPF ops due to missing initialization.,"lwt_seg6local,BPF,remove",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
0dd0e9437f8e500a384f12ec16bb407a49676147,0dd0e9437f8e500a384f12ec16bb407a49676147,Arnd Bergmann,arnd@arndb.de,1715620435,Arnd Bergmann,arnd@arndb.de,1720614210,f06caeb67285b6f4cdfb258d42ea0da4306e6aa1,ed8023ae9d79eeebf694751d5c290b72ef871dc0,"um: don't generate asm/bpf_perf_event.h

If we start validating the existence of the asm-generic side of
generated headers"," this one causes a warning:

make[3]: *** No rule to make target 'arch/um/include/generated/asm/bpf_perf_event.h'","["" needed by 'all'.  Stop.\n\nThe problem is that the asm-generic header only exists for the uapi\nvariant"", ' but arch/um has no uapi headers and instead uses the x86\nuserspace API.\n\nAdd a custom file with an explicit redirect to avoid this.\n\nSigned-off-by: Arnd Bergmann <arnd@arndb.de>\n', '']",Prevent generation of asm/bpf_perf_event.h to avoid build errors in User Mode Linux.,"generate, bpf_perf_event, warning",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
605c96997d89c01c11bbddb4db820ede570581c7,605c96997d89c01c11bbddb4db820ede570581c7,Matt Bobrowski,mattbobrowski@google.com,1720559379,Alexei Starovoitov,ast@kernel.org,1720577507,24a3417677e3bb1f26bd9e9658eb65b3e9f37f2a,02779af2419a91f847c22e488f8d13ec301cf833,"bpf: relax zero fixed offset constraint on KF_TRUSTED_ARGS/KF_RCU

Currently"," BPF kfuncs which accept trusted pointer arguments
i.e. those flagged as KF_TRUSTED_ARGS","[' KF_RCU', ' or KF_RELEASE', ' all\nrequire an original/unmodified trusted pointer argument to be supplied\nto them. By original/unmodified', ' it means that the backing register\nholding the trusted pointer argument that is to be supplied to the BPF\nkfunc must have its fixed offset set to zero', ' or else the BPF verifier\nwill outright reject the BPF program load. However', ' this zero fixed\noffset constraint that is currently enforced by the BPF verifier onto\nBPF kfuncs specifically flagged to accept KF_TRUSTED_ARGS or KF_RCU\ntrusted pointer arguments is rather unnecessary', ' and can limit their\nusability in practice. Specifically', ' it completely eliminates the\npossibility of constructing a derived trusted pointer from an original\ntrusted pointer. To put it simply', ' a derived pointer is a pointer\nwhich points to one of the nested member fields of the object being\npointed to by the original trusted pointer.\n\nThis patch relaxes the zero fixed offset constraint that is enforced\nupon BPF kfuncs which specifically accept KF_TRUSTED_ARGS', ' or KF_RCU\narguments. Although', ' the zero fixed offset constraint technically also\napplies to BPF kfuncs accepting KF_RELEASE arguments', "" relaxing this\nconstraint for such BPF kfuncs has subtle and unwanted\nside-effects. This was discovered by experimenting a little further\nwith an initial version of this patch series [0]. The primary issue\nwith relaxing the zero fixed offset constraint on BPF kfuncs accepting\nKF_RELEASE arguments is that it'd would open up the opportunity for\nBPF programs to supply both trusted pointers and derived trusted\npointers to them. For KF_RELEASE BPF kfuncs specifically"", ' this could\nbe problematic as resources associated with the backing pointer could\nbe released by the backing BPF kfunc and cause instabilities for the\nrest of the kernel.\n\nWith this new fixed offset semantic in-place for BPF kfuncs accepting\nKF_TRUSTED_ARGS and KF_RCU arguments', "" we now have more flexibility\nwhen it comes to the BPF kfuncs that we're able to introduce moving\nforward.\n\nEarly discussions covering the possibility of relaxing the zero fixed\noffset constraint can be found using the link below. This will provide\nmore context on where all this has stemmed from [1].\n\nNotably"", ' pre-existing tests have been updated such that they provide\ncoverage for the updated zero fixed offset\nfunctionality. Specifically', ' the nested offset test was converted from\na negative to positive test as it was already designed to assert zero\nfixed offset semantics of a KF_TRUSTED_ARGS BPF kfunc.\n\n[0] https://lore.kernel.org/bpf/ZnA9ndnXKtHOuYMe@google.com/\n[1] https://lore.kernel.org/bpf/ZhkbrM55MKQ0KeIV@google.com/\n\nSigned-off-by: Matt Bobrowski <mattbobrowski@google.com>\nAcked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>\nLink: https://lore.kernel.org/r/20240709210939.1544011-1-mattbobrowski@google.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit relaxes the zero fixed offset constraint on KF_TRUSTED_ARGS and KF_RCU in eBPF kfuncs.,"KF_TRUSTED_ARGS,KF_RCU,eBPF",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
02779af2419a91f847c22e488f8d13ec301cf833,02779af2419a91f847c22e488f8d13ec301cf833,Alexei Starovoitov,ast@kernel.org,1720576825,Alexei Starovoitov,ast@kernel.org,1720577016,e4a4e77fe98c18d7efda89eabd3de9fd9d8bc962,746d684ea579927015cde53cff8fc365caaf93b7 a459f4bb27f2e2730039c57786b82288742c8c74,"Merge branch 'fix-libbpf-bpf-skeleton-forward-backward-compat'

Andrii Nakryiko says:

====================
Fix libbpf BPF skeleton forward/backward compat

Fix recently identified (but long standing) bug with handling BPF skeleton
forward and backward compatibility. On libbpf side"," even though BPF skeleton
was always designed to be forward and backwards compatible through recording
actual size of constrituents of BPF skeleton itself (map/prog/var skeleton
definitions)","[' libbpf implementation did implicitly hard-code those sizes by\nvirtue of using a trivial array access syntax.\n\nThis issue will only affect libbpf used as a shared library. Statically\ncompiled libbpfs will always be in sync with BPF skeleton', ' bypassing this\nproblem altogether.\n\nThis patch set fixes libbpf', ' but also mitigates the problem for old libbpf\nversions by teaching bpftool to generate more conservative BPF skeleton', '\nif possible (i.e.', ' if there are no struct_ops maps defined).\n\nv1->v2:\n  - fix SOB', ' add acks', ' typo fixes (Quentin', ' Eduard);\n  - improve reporting of skipped map auto-attachment (Alan', ' Eduard).\n====================\n\nLink: https://lore.kernel.org/r/20240708204540.4188946-1-andrii@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fixes a bug in libbpf for BPF skeleton forward and backward compatibility.,"libbpf, BPF skeleton, compatibility",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
a459f4bb27f2e2730039c57786b82288742c8c74,a459f4bb27f2e2730039c57786b82288742c8c74,Andrii Nakryiko,andrii@kernel.org,1720471540,Alexei Starovoitov,ast@kernel.org,1720577016,e4a4e77fe98c18d7efda89eabd3de9fd9d8bc962,99fb9531886d8ffa0aa9a693089784c7338518a3,"libbpf: improve old BPF skeleton handling for map auto-attach

Improve how we handle old BPF skeletons when it comes to BPF map
auto-attachment. Emit one warn-level message per each struct_ops map
that could have been auto-attached"," if user provided recent enough BPF
skeleton version. Don't spam log if there are no relevant struct_ops
maps","[' though.\n\nThis should help users realize that they probably need to regenerate BPF\nskeleton header with more recent bpftool/libbpf-cargo (or whatever other\nmeans of BPF skeleton generation).\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nLink: https://lore.kernel.org/r/20240708204540.4188946-4-andrii@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Improved handling of old BPF skeletons for map auto-attachment in libbpf.,"libbpf, BPF skeleton, auto-attachment",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['tc/netfilter like programs', 'tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
99fb9531886d8ffa0aa9a693089784c7338518a3,99fb9531886d8ffa0aa9a693089784c7338518a3,Andrii Nakryiko,andrii@kernel.org,1720471539,Alexei Starovoitov,ast@kernel.org,1720577004,a856c10798e8726c0240720567b40541be851b52,06e71ad534881d2a09ced7509d2ab0daedac4c96,"libbpf: fix BPF skeleton forward/backward compat handling

BPF skeleton was designed from day one to be extensible. Generated BPF
skeleton code specifies actual sizes of map/prog/variable skeletons for
that reason and libbpf is supposed to work with newer/older versions
correctly.

Unfortunately"," it was missed that we implicitly embed hard-coded most
up-to-date (according to libbpf's version of libbpf.h header used to
compile BPF skeleton header) sizes of those structs","[' which can differ\nfrom the actual sizes at runtime when libbpf is used as a shared\nlibrary.\n\nWe have a few places were we just index array of maps/progs/vars', ' which\nimplicitly uses these potentially invalid sizes of structs.\n\nThis patch aims to fix this problem going forward. Once this lands', '\nwe\'ll backport these changes in Github repo to create patched releases\nfor older libbpfs.\n\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nReviewed-by: Alan Maguire <alan.maguire@oracle.com>\nFixes: d66562fba1ce (""libbpf: Add BPF object skeleton support"")\nFixes: 430025e5dca5 (""libbpf: Add subskeleton scaffolding"")\nFixes: 08ac454e258e (""libbpf: Auto-attach struct_ops BPF maps in BPF skeleton"")\nCo-developed-by: Mykyta Yatsenko <yatsenko@meta.com>\nSigned-off-by: Mykyta Yatsenko <yatsenko@meta.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20240708204540.4188946-3-andrii@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fix forward and backward compatibility handling in libbpf BPF skeleton structures.,"libbpf, BPF skeleton, compatibility",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
06e71ad534881d2a09ced7509d2ab0daedac4c96,06e71ad534881d2a09ced7509d2ab0daedac4c96,Andrii Nakryiko,andrii@kernel.org,1720471538,Alexei Starovoitov,ast@kernel.org,1720576985,741be1e6e1c2d9effb8ba4fb4dba933bc7e97e6c,746d684ea579927015cde53cff8fc365caaf93b7,"bpftool: improve skeleton backwards compat with old buggy libbpfs

Old versions of libbpf don't handle varying sizes of bpf_map_skeleton
struct correctly. As such"," BPF skeleton generated by newest bpftool
might not be compatible with older libbpf (though only when libbpf is
used as a shared library)","[' even though it', ' by design', ' should.\n\nGoing forward libbpf will be fixed', "" plus we'll release bug fixed\nversions of relevant old libbpfs"", ' but meanwhile try to mitigate from\nbpftool side by conservatively assuming older and smaller definition of\nbpf_map_skeleton', ' if possible. Meaning', ' if there are no struct_ops maps.\n\nIf there are struct_ops', ' then presumably user would like to have\nauto-attaching logic and struct_ops map link placeholders', ' so use the\nfull bpf_map_skeleton definition in that case.\n\nAcked-by: Quentin Monnet <qmo@kernel.org>\nCo-developed-by: Mykyta Yatsenko <yatsenko@meta.com>\nSigned-off-by: Mykyta Yatsenko <yatsenko@meta.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nLink: https://lore.kernel.org/r/20240708204540.4188946-2-andrii@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']","Enhanced bpftool to improve compatibility with older, buggy versions of libbpf.","bpftool, compatibility, libbpf",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The bpftool utility,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
01fc5142ae6b06b61ed51a624f2732d6525d8ea3,01fc5142ae6b06b61ed51a624f2732d6525d8ea3,Michal Kubiak,michal.kubiak@intel.com,1720480069,Jakub Kicinski,kuba@kernel.org,1720574714,4f69acc7e2e318a4760b5e8017f0ebf9ea91cbfd,f153831097b4435f963e385304cc0f1acba1c657,"i40e: Fix XDP program unloading while removing the driver

The commit 6533e558c650 (""i40e: Fix reset path while removing
the driver"") introduced a new PF state ""__I40E_IN_REMOVE"" to block
modifying the XDP program while the driver is being removed.
Unfortunately"," such a change is useful only if the "".ndo_bpf()""
callback was called out of the rmmod context because unloading the
existing XDP program is also a part of driver removing procedure.
In other words","[' from the rmmod context the driver is expected to\nunload the XDP program without reporting any errors. Otherwise', '\nthe kernel warning with callstack is printed out to dmesg.\n\nExample failing scenario:\n 1. Load the i40e driver.\n 2. Load the XDP program.\n 3. Unload the i40e driver (using ""rmmod"" command).\n\nThe example kernel warning log:\n\n[  +0.004646] WARNING: CPU: 94 PID: 10395 at net/core/dev.c:9290 unregister_netdevice_many_notify+0x7a9/0x870\n[...]\n[  +0.010959] RIP: 0010:unregister_netdevice_many_notify+0x7a9/0x870\n[...]\n[  +0.002726] Call Trace:\n[  +0.002457]  <TASK>\n[  +0.002119]  ? __warn+0x80/0x120\n[  +0.003245]  ? unregister_netdevice_many_notify+0x7a9/0x870\n[  +0.005586]  ? report_bug+0x164/0x190\n[  +0.003678]  ? handle_bug+0x3c/0x80\n[  +0.003503]  ? exc_invalid_op+0x17/0x70\n[  +0.003846]  ? asm_exc_invalid_op+0x1a/0x20\n[  +0.004200]  ? unregister_netdevice_many_notify+0x7a9/0x870\n[  +0.005579]  ? unregister_netdevice_many_notify+0x3cc/0x870\n[  +0.005586]  unregister_netdevice_queue+0xf7/0x140\n[  +0.004806]  unregister_netdev+0x1c/0x30\n[  +0.003933]  i40e_vsi_release+0x87/0x2f0 [i40e]\n[  +0.004604]  i40e_remove+0x1a1/0x420 [i40e]\n[  +0.004220]  pci_device_remove+0x3f/0xb0\n[  +0.003943]  device_release_driver_internal+0x19f/0x200\n[  +0.005243]  driver_detach+0x48/0x90\n[  +0.003586]  bus_remove_driver+0x6d/0xf0\n[  +0.003939]  pci_unregister_driver+0x2e/0xb0\n[  +0.004278]  i40e_exit_module+0x10/0x5f0 [i40e]\n[  +0.004570]  __do_sys_delete_module.isra.0+0x197/0x310\n[  +0.005153]  do_syscall_64+0x85/0x170\n[  +0.003684]  ? syscall_exit_to_user_mode+0x69/0x220\n[  +0.004886]  ? do_syscall_64+0x95/0x170\n[  +0.003851]  ? exc_page_fault+0x7e/0x180\n[  +0.003932]  entry_SYSCALL_64_after_hwframe+0x71/0x79\n[  +0.005064] RIP: 0033:0x7f59dc9347cb\n[  +0.003648] Code: 73 01 c3 48 8b 0d 65 16 0c 00 f7 d8 64 89 01 48 83\nc8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa b8 b0 00 00 00 0f\n05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 35 16 0c 00 f7 d8 64 89 01 48\n[  +0.018753] RSP: 002b:00007ffffac99048 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0\n[  +0.007577] RAX: ffffffffffffffda RBX: 0000559b9bb2f6e0 RCX: 00007f59dc9347cb\n[  +0.007140] RDX: 0000000000000000 RSI: 0000000000000800 RDI: 0000559b9bb2f748\n[  +0.007146] RBP: 00007ffffac99070 R08: 1999999999999999 R09: 0000000000000000\n[  +0.007133] R10: 00007f59dc9a5ac0 R11: 0000000000000206 R12: 0000000000000000\n[  +0.007141] R13: 00007ffffac992d8 R14: 0000559b9bb2f6e0 R15: 0000000000000000\n[  +0.007151]  </TASK>\n[  +0.002204] ---[ end trace 0000000000000000 ]---\n\nFix this by checking if the XDP program is being loaded or unloaded.\nThen', ' block only loading a new program while ""__I40E_IN_REMOVE"" is set.\nAlso', ' move testing ""__I40E_IN_REMOVE"" flag to the beginning of XDP_SETUP\ncallback to avoid unnecessary operations and checks.\n\nFixes: 6533e558c650 (""i40e: Fix reset path while removing the driver"")\nSigned-off-by: Michal Kubiak <michal.kubiak@intel.com>\nReviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>\nTested-by: Chandan Kumar Rout <chandanx.rout@intel.com> (A Contingent Worker at Intel)\nSigned-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>\nLink: https://patch.msgid.link/20240708230750.625986-1-anthony.l.nguyen@intel.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",Fixes issue with XDP program unloading during i40e driver removal process.,"i40e,XDP,driver",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['xdp like programs']
7b769adc2612b495d94a4b4537ffaa725861d763,7b769adc2612b495d94a4b4537ffaa725861d763,Paolo Abeni,pabeni@redhat.com,1720537306,Paolo Abeni,pabeni@redhat.com,1720537306,f11f24588ea1d6a4053123cbbca111f163353cdf,870a1dbcbc2ebd2114d5f18bb0bd88a7ff07540f 90dc946059b7d346f077b870a8d8aaf03b4d0772,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-07-08

The following pull-request contains BPF updates for your *net-next* tree.

We've added 102 non-merge commits during the last 28 day(s) which contain
a total of 127 files changed", 4606 insertions(+),"[' 980 deletions(-).\n\nThe main changes are:\n\n1) Support resilient split BTF which cuts down on duplication and makes BTF\n   as compact as possible wrt BTF from modules', ' from Alan Maguire & Eduard Zingerman.\n\n2) Add support for dumping kfunc prototypes from BTF which enables both detecting\n   as well as dumping compilable prototypes for kfuncs', ' from Daniel Xu.\n\n3) Batch of s390x BPF JIT improvements to add support for BPF arena and to implement\n   support for BPF exceptions', ' from Ilya Leoshkevich.\n\n4) Batch of riscv64 BPF JIT improvements in particular to add 12-argument support\n   for BPF trampolines and to utilize bpf_prog_pack for the latter', ' from Pu Lehui.\n\n5) Extend BPF test infrastructure to add a CHECKSUM_COMPLETE validation option\n   for skbs and add coverage along with it', ' from Vadim Fedorenko.\n\n6) Inline bpf_get_current_task/_btf() helpers in the arm64 BPF JIT which gives\n   a small 1% performance improvement in micro-benchmarks', ' from Puranjay Mohan.\n\n7) Extend the BPF verifier to track the delta between linked registers in order\n   to better deal with recent LLVM code optimizations', ' from Alexei Starovoitov.\n\n8) Fix bpf_wq_set_callback_impl() kfunc signature where the third argument should\n   have been a pointer to the map value', ' from Benjamin Tissoires.\n\n9) Extend BPF selftests to add regular expression support for test output matching\n   and adjust some of the selftest when compiled under gcc', ' from Cupertino Miranda.\n\n10) Simplify task_file_seq_get_next() and remove an unnecessary loop which always\n    iterates exactly once anyway', ' from Dan Carpenter.\n\n11) Add the capability to offload the netfilter flowtable in XDP layer through\n    kfuncs', ' from Florian Westphal & Lorenzo Bianconi.\n\n12) Various cleanups in networking helpers in BPF selftests to shave off a few\n    lines of open-coded functions on client/server handling', ' from Geliang Tang.\n\n13) Properly propagate prog->aux->tail_call_reachable out of BPF verifier', ' so\n    that x86 JIT does not need to implement detection', ' from Leon Hwang.\n\n14) Fix BPF verifier to add a missing check_func_arg_reg_off() to prevent an\n    out-of-bounds memory access for dynpointers', ' from Matt Bobrowski.\n\n15) Fix bpf_session_cookie() kfunc to return __u64 instead of long pointer as\n    it might lead to problems on 32-bit archs', ' from Jiri Olsa.\n\n16) Enhance traffic validation and dynamic batch size support in xsk selftests', ""\n    from Tushar Vyavahare.\n\nbpf-next-for-netdev\n\n* tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next: (102 commits)\n  selftests/bpf: DENYLIST.aarch64: Remove fexit_sleep\n  selftests/bpf: amend for wrong bpf_wq_set_callback_impl signature\n  bpf: helpers: fix bpf_wq_set_callback_impl signature\n  libbpf: Add NULL checks to bpf_object__{prev_map"", 'next_map}\n  selftests/bpf: Remove exceptions tests from DENYLIST.s390x\n  s390/bpf: Implement exceptions\n  s390/bpf: Change seen_reg to a mask\n  bpf: Remove unnecessary loop in task_file_seq_get_next()\n  riscv', ' bpf: Optimize stack usage of trampoline\n  bpf', ' devmap: Add .map_alloc_check\n  selftests/bpf: Remove arena tests from DENYLIST.s390x\n  selftests/bpf: Add UAF tests for arena atomics\n  selftests/bpf: Introduce __arena_global\n  s390/bpf: Support arena atomics\n  s390/bpf: Enable arena\n  s390/bpf: Support address space cast instruction\n  s390/bpf: Support BPF_PROBE_MEM32\n  s390/bpf: Land on the next JITed instruction after exception\n  s390/bpf: Introduce pre- and post- probe functions\n  s390/bpf: Get rid of get_probe_mem_regno()\n  ...\n====================\n\nLink: https://patch.msgid.link/20240708221438.10974-1-daniel@iogearbox.net\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>\n', '']",Merge multiple updates from the 'bpf-next' branch into the 'net-next' tree.,"merge, bpf-next, updates",It's other type of commit.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
528269fe117f3b19461733a0fa408c55a5270aff,528269fe117f3b19461733a0fa408c55a5270aff,Paolo Abeni,pabeni@redhat.com,1720534916,Paolo Abeni,pabeni@redhat.com,1720534916,b8f2ee433d92c0ab5a3525c128a6744ecbb40a1d,0913ec336a6c0c4a2b296bd9f74f8e41c4c83c8c f0c18025693707ec344a70b6887f7450bf4c826b,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-07-09

The following pull-request contains BPF updates for your *net* tree.

We've added 3 non-merge commits during the last 1 day(s) which contain
a total of 5 files changed", 81 insertions(+),"[' 11 deletions(-).\n\nThe main changes are:\n\n1) Fix a use-after-free in a corner case where tcx_entry got released too\n   early. Also add BPF test coverage along with the fix', ' from Daniel Borkmann.\n\n2) Fix a kernel panic on Loongarch in sk_msg_recvmsg() which got triggered\n   by running BPF sockmap selftests', "" from Geliang Tang.\n\nbpf-for-netdev\n\n* tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:\n  skmsg: Skip zero length skb in sk_msg_recvmsg\n  selftests/bpf: Extend tcx tests to cover late tcx_entry release\n  bpf: Fix too early release of tcx_entry\n====================\n\nLink: https://patch.msgid.link/20240709091452.27840-1-daniel@iogearbox.net\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>\n"", '']",This commit merges BPF updates into the netdev tree.,"merge, BPF, netdev",It's other type of commit.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
f0c18025693707ec344a70b6887f7450bf4c826b,f0c18025693707ec344a70b6887f7450bf4c826b,Geliang Tang,tanggeliang@kylinos.cn,1719995971,Daniel Borkmann,daniel@iogearbox.net,1720513490,3832de68e6f53388feab6beee278c9a0330642cf,5f1d18de79180deac2822c93e431bbe547f7d3ce,"skmsg: Skip zero length skb in sk_msg_recvmsg

When running BPF selftests (./test_progs -t sockmap_basic) on a Loongarch
platform"," the following kernel panic occurs:

  [...]
  Oops[#1]:
  CPU: 22 PID: 2824 Comm: test_progs Tainted: G           OE  6.10.0-rc2+ #18
  Hardware name: LOONGSON Dabieshan/Loongson-TC542F0","[' BIOS Loongson-UDK2018\n     ... ...\n     ra: 90000000048bf6c0 sk_msg_recvmsg+0x120/0x560\n    ERA: 9000000004162774 copy_page_to_iter+0x74/0x1c0\n   CRMD: 000000b0 (PLV0 -IE -DA +PG DACF=CC DACM=CC -WE)\n   PRMD: 0000000c (PPLV0 +PIE +PWE)\n   EUEN: 00000007 (+FPE +SXE +ASXE -BTE)\n   ECFG: 00071c1d (LIE=0', '2-4', '10-12 VS=7)\n  ESTAT: 00010000 [PIL] (IS= ECode=1 EsubCode=0)\n   BADV: 0000000000000040\n   PRID: 0014c011 (Loongson-64bit', ' Loongson-3C5000)\n  Modules linked in: bpf_testmod(OE) xt_CHECKSUM xt_MASQUERADE xt_conntrack\n  Process test_progs (pid: 2824', ' threadinfo=0000000000863a31', ' task=...)\n  Stack : ...\n  Call Trace:\n  [<9000000004162774>] copy_page_to_iter+0x74/0x1c0\n  [<90000000048bf6c0>] sk_msg_recvmsg+0x120/0x560\n  [<90000000049f2b90>] tcp_bpf_recvmsg_parser+0x170/0x4e0\n  [<90000000049aae34>] inet_recvmsg+0x54/0x100\n  [<900000000481ad5c>] sock_recvmsg+0x7c/0xe0\n  [<900000000481e1a8>] __sys_recvfrom+0x108/0x1c0\n  [<900000000481e27c>] sys_recvfrom+0x1c/0x40\n  [<9000000004c076ec>] do_syscall+0x8c/0xc0\n  [<9000000003731da4>] handle_syscall+0xc4/0x160\n  Code: ...\n  ---[ end trace 0000000000000000 ]---\n  Kernel panic - not syncing: Fatal exception\n  Kernel relocated by 0x3510000\n   .text @ 0x9000000003710000\n   .data @ 0x9000000004d70000\n   .bss  @ 0x9000000006469400\n  ---[ end Kernel panic - not syncing: Fatal exception ]---\n  [...]\n\nThis crash happens every time when running sockmap_skb_verdict_shutdown\nsubtest in sockmap_basic.\n\nThis crash is because a NULL pointer is passed to page_address() in the\nsk_msg_recvmsg(). Due to the different implementations depending on the\narchitecture', ' page_address(NULL) will trigger a panic on Loongarch\nplatform but not on x86 platform. So this bug was hidden on x86 platform\nfor a while', ' but now it is exposed on Loongarch platform. The root cause\nis that a zero length skb (skb->len == 0) was put on the queue.\n\nThis zero length skb is a TCP FIN packet', ' which was sent by shutdown()', '\ninvoked in test_sockmap_skb_verdict_shutdown():\n\n\tshutdown(p1', ' SHUT_WR);\n\nIn this case', ' in sk_psock_skb_ingress_enqueue()', ' num_sge is zero', ' and no\npage is put to this sge (see sg_set_page in sg_set_page)', ' but this empty\nsge is queued into ingress_msg list.\n\nAnd in sk_msg_recvmsg()', ' this empty sge is used', ' and a NULL page is got by\nsg_page(sge). Pass this NULL page to copy_page_to_iter()', ' which passes it\nto kmap_local_page() and to page_address()', ' then kernel panics.\n\nTo solve this', ' we should skip this zero length skb. So in sk_msg_recvmsg()', '\nif copy is zero', "" that means it's a zero length skb"", ' skip invoking\ncopy_page_to_iter(). We are using the EFAULT return triggered by\ncopy_page_to_iter to check for is_fin in tcp_bpf.c.\n\nFixes: 604326b41a6f (""bpf', ' sockmap: convert to generic sk_msg interface"")\nSuggested-by: John Fastabend <john.fastabend@gmail.com>\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: John Fastabend <john.fastabend@gmail.com>\nLink: https://lore.kernel.org/bpf/e3a16eacdc6740658ee02a33489b1b9d4912f378.1719992715.git.tanggeliang@kylinos.cn\n', '']",The commit fixes a kernel panic by skipping zero-length skb in sk_msg_recvmsg on Loongarch platform.,"skmsg, zero length, kernel panic",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['socket like programs']
5f1d18de79180deac2822c93e431bbe547f7d3ce,5f1d18de79180deac2822c93e431bbe547f7d3ce,Daniel Borkmann,daniel@iogearbox.net,1720445490,Martin KaFai Lau,martin.lau@kernel.org,1720472851,f01ffebd1413bd82a5ea2014360dbc40304f9aab,1cb6f0bae50441f4b4b32a28315853b279c7404e,"selftests/bpf: Extend tcx tests to cover late tcx_entry release

Add a test case which replaces an active ingress qdisc while keeping the
miniq in-tact during the transition period to the new clsact qdisc.

  # ./vmtest.sh -- ./test_progs -t tc_link
  [...]
  ./test_progs -t tc_link
  [    3.412871] bpf_testmod: loading out-of-tree module taints kernel.
  [    3.413343] bpf_testmod: module verification failed: signature and/or required key missing - tainting kernel
  #332     tc_links_after:OK
  #333     tc_links_append:OK
  #334     tc_links_basic:OK
  #335     tc_links_before:OK
  #336     tc_links_chain_classic:OK
  #337     tc_links_chain_mixed:OK
  #338     tc_links_dev_chain0:OK
  #339     tc_links_dev_cleanup:OK
  #340     tc_links_dev_mixed:OK
  #341     tc_links_ingress:OK
  #342     tc_links_invalid:OK
  #343     tc_links_prepend:OK
  #344     tc_links_replace:OK
  #345     tc_links_revision:OK
  Summary: 14/0 PASSED", 0 SKIPPED,"[' 0 FAILED\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nCc: Martin KaFai Lau <martin.lau@kernel.org>\nLink: https://lore.kernel.org/r/20240708133130.11609-2-daniel@iogearbox.net\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Extend selftests for tcx to ensure correct release during ingress qdisc replacement.,"tcx tests, ingress qdisc, test case",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['tc/netfilter like programs']
1cb6f0bae50441f4b4b32a28315853b279c7404e,1cb6f0bae50441f4b4b32a28315853b279c7404e,Daniel Borkmann,daniel@iogearbox.net,1720445489,Martin KaFai Lau,martin.lau@kernel.org,1720472851,2a77853cb7254aed5df87823ba5a216b23c17158,83c36e7cfd74e41a5c145640dba581b38f12aa15,"bpf: Fix too early release of tcx_entry

Pedro Pinto and later independently also Hyunwoo Kim and Wongi Lee reported
an issue that the tcx_entry can be released too early leading to a use
after free (UAF) when an active old-style ingress or clsact qdisc with a
shared tc block is later replaced by another ingress or clsact instance.

Essentially"," the sequence to trigger the UAF (one example) can be as follows:

  1. A network namespace is created
  2. An ingress qdisc is created. This allocates a tcx_entry","["" and\n     &tcx_entry->miniq is stored in the qdisc's miniqp->p_miniq. At the\n     same time"", ' a tcf block with index 1 is created.\n  3. chain0 is attached to the tcf block. chain0 must be connected to\n     the block linked to the ingress qdisc to later reach the function\n     tcf_chain0_head_change_cb_del() which triggers the UAF.\n  4. Create and graft a clsact qdisc. This causes the ingress qdisc\n     created in step 1 to be removed', ' thus freeing the previously linked\n     tcx_entry:\n\n     rtnetlink_rcv_msg()\n       => tc_modify_qdisc()\n         => qdisc_create()\n           => clsact_init() [a]\n         => qdisc_graft()\n           => qdisc_destroy()\n             => __qdisc_destroy()\n               => ingress_destroy() [b]\n                 => tcx_entry_free()\n                   => kfree_rcu() // tcx_entry freed\n\n  5. Finally', ' the network namespace is closed. This registers the\n     cleanup_net worker', ' and during the process of releasing the\n     remaining clsact qdisc', ' it accesses the tcx_entry that was\n     already freed in step 4', ' causing the UAF to occur:\n\n     cleanup_net()\n       => ops_exit_list()\n         => default_device_exit_batch()\n           => unregister_netdevice_many()\n             => unregister_netdevice_many_notify()\n               => dev_shutdown()\n                 => qdisc_put()\n                   => clsact_destroy() [c]\n                     => tcf_block_put_ext()\n                       => tcf_chain0_head_change_cb_del()\n                         => tcf_chain_head_change_item()\n                           => clsact_chain_head_change()\n                             => mini_qdisc_pair_swap() // UAF\n\nThere are also other variants', ' the gist is to add an ingress (or clsact)\nqdisc with a specific shared block', ' then to replace that qdisc', "" waiting\nfor the tcx_entry kfree_rcu() to be executed and subsequently accessing\nthe current active qdisc's miniq one way or another.\n\nThe correct fix is to turn the miniq_active boolean into a counter. What\ncan be observed"", ' at step 2 above', ' the counter transitions from 0->1', ' at\nstep [a] from 1->2 (in order for the miniq object to remain active during\nthe replacement)', ' then in [b] from 2->1 and finally [c] 1->0 with the\neventual release. The reference counter in general ranges from [0', '2] and\nit does not need to be atomic since all access to the counter is protected\nby the rtnl mutex. With this in place', ' there is no longer a UAF happening\nand the tcx_entry is freed at the correct time.\n\nFixes: e420bed02507 (""bpf: Add fd-based tcx multi-prog infra with link support"")\nReported-by: Pedro Pinto <xten@osec.io>\nCo-developed-by: Pedro Pinto <xten@osec.io>\nSigned-off-by: Pedro Pinto <xten@osec.io>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nCc: Hyunwoo Kim <v4bel@theori.io>\nCc: Wongi Lee <qwerty@theori.io>\nCc: Martin KaFai Lau <martin.lau@kernel.org>\nLink: https://lore.kernel.org/r/20240708133130.11609-1-daniel@iogearbox.net\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Fixes an issue with premature release of tcx_entry causing use-after-free in tc block handling.,"tcx_entry,use-after-free,ingress",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['tc/netfilter like programs']
90dc946059b7d346f077b870a8d8aaf03b4d0772,90dc946059b7d346f077b870a8d8aaf03b4d0772,Puranjay Mohan,puranjay@kernel.org,1720191009,Daniel Borkmann,daniel@iogearbox.net,1720470294,e2aa5725ddaa1472b908bf8117958fd9632032e3,06507c7536f747867d6d83d605af6bd753fec6d3,"selftests/bpf: DENYLIST.aarch64: Remove fexit_sleep

fexit_sleep test runs successfully now on the BPF CI so remove it
from the deny list. ftrace direct calls was blocking tracing programs
on arm64 but it has been resolved by now. For more details see also
discussion in [*].

Signed-off-by: Puranjay Mohan <puranjay@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240705145009.32340-1-puranjay@kernel.org [*]
",,Remove fexit_sleep from the deny list as it now runs successfully on arm64 after ftrace direct calls issue resolved.,"fexit_sleep,denylist,arm64",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
06507c7536f747867d6d83d605af6bd753fec6d3,06507c7536f747867d6d83d605af6bd753fec6d3,Alexei Starovoitov,ast@kernel.org,1720458108,Alexei Starovoitov,ast@kernel.org,1720458108,f411f868052894bcbab042447224918218fa6d30,cedc12c5b57f7efa6dbebfb2b140e8675f5a2616 16e86f2e8199cdb8789573c8784eb5c1cd478f13,"Merge branch 'small-api-fix-for-bpf_wq'

Benjamin Tissoires says:

====================
Small API fix for bpf_wq

I realized this while having a map containing both a struct bpf_timer and
a struct bpf_wq: the third argument provided to the bpf_wq callback is
not the struct bpf_wq pointer itself"," but the pointer to the value in
the map.

Which means that the users need to double cast the provided ""value"" as
this is not a struct bpf_wq *.

This is a change of API","["" but there doesn't seem to be much users of bpf_wq\nright now"", ' so we should be able to go with this right now.\n\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n---\nChanges in v2:\n- amended the selftests to retrieve something from the third argument of\n  the callback\n- Link to v1: https://lore.kernel.org/r/20240705-fix-wq-v1-0-91b4d82cd825@kernel.org\n\n---\n====================\n\nLink: https://lore.kernel.org/r/20240708-fix-wq-v2-0-667e5c9fbd99@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fix for bpf_wq API to correctly handle callback arguments.,"API, bpf_wq, fix",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The helper and kfuncs,['other']
16e86f2e8199cdb8789573c8784eb5c1cd478f13,16e86f2e8199cdb8789573c8784eb5c1cd478f13,Benjamin Tissoires,bentiss@kernel.org,1720432378,Alexei Starovoitov,ast@kernel.org,1720458108,f411f868052894bcbab042447224918218fa6d30,f56f4d541eab1ae060a46b56dd6ec9130d6e3a98,"selftests/bpf: amend for wrong bpf_wq_set_callback_impl signature

See the previous patch: the API was wrong"," we were provided the pointer
to the value","[' not the actual struct bpf_wq *.\n\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\nLink: https://lore.kernel.org/r/20240708-fix-wq-v2-2-667e5c9fbd99@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fix the selftests for bpf by amending the incorrect bpf_wq_set_callback_impl signature.,"selftests, signature, amend",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
f56f4d541eab1ae060a46b56dd6ec9130d6e3a98,f56f4d541eab1ae060a46b56dd6ec9130d6e3a98,Benjamin Tissoires,bentiss@kernel.org,1720432377,Alexei Starovoitov,ast@kernel.org,1720458108,d4597e7a4336c3472ef18a6ca6c6ef1eb7995328,cedc12c5b57f7efa6dbebfb2b140e8675f5a2616,"bpf: helpers: fix bpf_wq_set_callback_impl signature

I realized this while having a map containing both a struct bpf_timer and
a struct bpf_wq: the third argument provided to the bpf_wq callback is
not the struct bpf_wq pointer itself"," but the pointer to the value in
the map.

Which means that the users need to double cast the provided ""value"" as
this is not a struct bpf_wq *.

This is a change of API","["" but there doesn't seem to be much users of bpf_wq\nright now"", ' so we should be able to go with this right now.\n\nFixes: 81f1d7a583fa (""bpf: wq: add bpf_wq_set_callback_impl"")\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\nLink: https://lore.kernel.org/r/20240708-fix-wq-v2-1-667e5c9fbd99@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fixes the bpf_wq_set_callback_impl signature to correct argument handling for bpf_wq callbacks.,"bpf_wq, callback, API change",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
cedc12c5b57f7efa6dbebfb2b140e8675f5a2616,cedc12c5b57f7efa6dbebfb2b140e8675f5a2616,Andreas Ziegler,ziegler.andreas@siemens.com,1719995676,Daniel Borkmann,daniel@iogearbox.net,1720455187,3465b787ffaef87b551ab865061c932184ca5ab3,02480fe8a6a6d44c16900b1d3a2a66d140d0a005,libbpf: Add NULL checks to bpf_object__{prev_map,"next_map}

In the current state","[' an erroneous call to\nbpf_object__find_map_by_name(NULL', ' ...) leads to a segmentation\nfault through the following call chain:\n\n  bpf_object__find_map_by_name(obj = NULL', ' ...)\n  -> bpf_object__for_each_map(pos', ' obj = NULL)\n  -> bpf_object__next_map((obj = NULL)', ' NULL)\n  -> return (obj = NULL)->maps\n\nWhile calling bpf_object__find_map_by_name with obj = NULL is\nobviously incorrect', ' this should not lead to a segmentation\nfault but rather be handled gracefully.\n\nAs __bpf_map__iter already handles this situation correctly', ' we\ncan delegate the check for the regular case there and only add\na check in case the prev or next parameter is NULL.\n\nSigned-off-by: Andreas Ziegler <ziegler.andreas@siemens.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240703083436.505124-1-ziegler.andreas@siemens.com\n', '']",Add NULL checks to bpf_object__prev_map and bpf_object__next_map functions in libbpf.,"NULL checks, libbpf, functions",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
02480fe8a6a6d44c16900b1d3a2a66d140d0a005,02480fe8a6a6d44c16900b1d3a2a66d140d0a005,Ilya Leoshkevich,iii@linux.ibm.com,1719967729,Daniel Borkmann,daniel@iogearbox.net,1720449575,f92fdb381cc0acef181791a92a7a2a73c577487e,fa7bd4b000a7ae32eb6fc049125943561e5b46f3,"selftests/bpf: Remove exceptions tests from DENYLIST.s390x

Now that the s390x JIT supports exceptions"," remove the respective tests
from the denylist.

Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240703005047.40915-4-iii@linux.ibm.com
",[''],Remove exception tests from s390x DENYLIST due to improved JIT support.,"exceptions,JIT,DENYLIST",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
fa7bd4b000a7ae32eb6fc049125943561e5b46f3,fa7bd4b000a7ae32eb6fc049125943561e5b46f3,Ilya Leoshkevich,iii@linux.ibm.com,1719967728,Daniel Borkmann,daniel@iogearbox.net,1720449575,d734c917321b136d7066807f5dee84e7ea56e7ad,7ba4f43e16de351fe9821de80e15d88c884b2967,"s390/bpf: Implement exceptions

Implement the following three pieces required from the JIT:

- A ""top-level"" BPF prog (exception_boundary) must save all
  non-volatile registers"," and not only the ones that it clobbers.
- A ""handler"" BPF prog (exception_cb) must switch stack to that of
  exception_boundary","[' and restore the registers that exception_boundary\n  saved.\n- arch_bpf_stack_walk() must unwind the stack and provide the results\n  in a way that satisfies both bpf_throw() and exception_cb.\n\nSigned-off-by: Ilya Leoshkevich <iii@linux.ibm.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240703005047.40915-3-iii@linux.ibm.com\n', '']",This commit implements exceptions for s390 architecture in the BPF JIT compiler.,"s390, exceptions, JIT",It's a new feature.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
7ba4f43e16de351fe9821de80e15d88c884b2967,7ba4f43e16de351fe9821de80e15d88c884b2967,Ilya Leoshkevich,iii@linux.ibm.com,1719967727,Daniel Borkmann,daniel@iogearbox.net,1720449575,0019f59ba154fd2eebb46705076a6a55c77225ed,bc239eb271e5f35fcade689c6782c962ef3704c8,"s390/bpf: Change seen_reg to a mask

Using a mask instead of an array saves a small amount of memory and
allows marking multiple registers as seen with a simple ""or"". Another
positive side-effect is that it speeds up verification with jitterbug.

Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240703005047.40915-2-iii@linux.ibm.com
",,Optimization of register handling in s390 architecture by using a mask instead of an array.,"s390,bpf,mask",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
bc239eb271e5f35fcade689c6782c962ef3704c8,bc239eb271e5f35fcade689c6782c962ef3704c8,Dan Carpenter,dan.carpenter@linaro.org,1720106359,Daniel Borkmann,daniel@iogearbox.net,1720448599,b75f72c985bc8abe96bcd68c25d7321dedd73155,a5912c37faf723c0812a6a2c9dd18ffbd34a233b,"bpf: Remove unnecessary loop in task_file_seq_get_next()

After commit 0ede61d8589c (""file: convert to SLAB_TYPESAFE_BY_RCU"") this
loop always iterates exactly one time.  Delete the for statement and pull
the code in a tab.

Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Christian Brauner <brauner@kernel.org>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/ZoWJF51D4zWb6f5t@stanley.mountain
",,The commit removes an unnecessary loop in the task_file_seq_get_next function after a previous update.,"remove, unnecessary, loop",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
a5912c37faf723c0812a6a2c9dd18ffbd34a233b,a5912c37faf723c0812a6a2c9dd18ffbd34a233b,Puranjay Mohan,puranjay@kernel.org,1720439278,Daniel Borkmann,daniel@iogearbox.net,1720446248,03cb7edb8f866105dad4b46de6a812839a732c0e,fd8db07705c55a995c42b1e71afc42faad675b0b,riscv," bpf: Optimize stack usage of trampoline

When BPF_TRAMP_F_CALL_ORIG is not set","["" stack space for passing arguments\non stack doesn't need to be reserved because the original function is\nnot called.\n\nOnly reserve space for stacked arguments when BPF_TRAMP_F_CALL_ORIG is\nset.\n\nSigned-off-by: Puranjay Mohan <puranjay@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Pu Lehui <pulehui@huawei.com>\nLink: https://lore.kernel.org/bpf/20240708114758.64414-1-puranjay@kernel.org\n"", '']",Optimize stack usage of BPF trampoline when BPF_TRAMP_F_CALL_ORIG is not set.,"optimize, stack, trampoline",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
fecef4cd42c689a200bdd39e6fffa71475904bc1,fecef4cd42c689a200bdd39e6fffa71475904bc1,Sebastian Andrzej Siewior,bigeasy@linutronix.de,1720104495,Jakub Kicinski,kuba@kernel.org,1720223977,77e6bcb7cb0d8cb5b656646e071fc92d1b13bf7a,3b2aef99221d395ce37efa426d7b50e7dcd621d6,"tun: Assign missing bpf_net_context.

During the introduction of struct bpf_net_context handling for
XDP-redirect"," the tun driver has been missed.
Jakub also pointed out that there is another call chain to
do_xdp_generic() originating from netif_receive_skb() and drivers may
use it outside from the NAPI context.

Set the bpf_net_context before invoking BPF XDP program within the TUN
driver. Set the bpf_net_context also in do_xdp_generic() if a xdp
program is available.

Reported-by: syzbot+0b5c75599f1d872bea6f@syzkaller.appspotmail.com
Reported-by: syzbot+5ae46b237278e2369cac@syzkaller.appspotmail.com
Reported-by: syzbot+c1e04a422bbc0f0f2921@syzkaller.appspotmail.com
Fixes: 401cb7dae8130 (""net: Reference bpf_redirect_info via task_struct on PREEMPT_RT."")
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Link: https://patch.msgid.link/20240704144815.j8xQda5r@linutronix.de
Signed-off-by: Jakub Kicinski <kuba@kernel.org>
",[''],Assign missing bpf_net_context to the TUN driver for handling XDP-redirect use cases.,"bpf_net_context,XDP-redirect,TUN driver",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['xdp like programs']
a67a1deb11d9a692366100d9ba9fb3aeb0c7707b,a67a1deb11d9a692366100d9ba9fb3aeb0c7707b,Benjamin Tissoires,bentiss@kernel.org,1720181182,Benjamin Tissoires,bentiss@kernel.org,1720181311,82843007949c176c5b629cb9d70203af49101031,3a904d2c771115154380caaae7ffaaf0095fb88f,"HID: samples: fix the 2 struct_ops definitions

Turns out that this is not compiling anymore because the hid_bpf_ops
struct_ops definition had a change during the revisions.

Fixes: e342d6f6f7d8 (""HID: samples: convert the 2 HID-BPF samples into struct_ops"")
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,Fix the struct_ops definitions in HID samples for compilation issues.,"HID,struct_ops,fix",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['HID driver like programs']
3a904d2c771115154380caaae7ffaaf0095fb88f,3a904d2c771115154380caaae7ffaaf0095fb88f,Benjamin Tissoires,bentiss@kernel.org,1720181226,Benjamin Tissoires,bentiss@kernel.org,1720181226,3f49ea1f04e284441927bd50ea0a785f68c080a7,f58e7f404da44c94e46bfe657b8707195aebd25a,"HID: fix for amples in for-6.11/bpf

To: Jiri Kosina <jikos@kernel.org>
Cc: linux-input@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

---
Changes in v2:
- EDITME: describe what is new in this series revision.
- EDITME: use bulletpoints and terse descriptions.
- Link to v1: https://lore.kernel.org/r/20240705-for-6-11-bpf-v1-1-1960e3165c9e@kernel.org



--- b4-submit-tracking ---
# This section is used internally by b4 prep for tracking purposes.
{
  ""series"": {
    ""revision"": 2","
    ""change-id"": ""20240705-for-6-11-bpf-a349efc08df8""","['\n    ""prefixes"": []', '\n    ""history"": {\n      ""v1"": [\n        ""20240705-for-6-11-bpf-v1-1-1960e3165c9e@kernel.org""\n      ]\n    }\n  }\n}', '']",Fixes HID driver issues in the BPF subsystem for version 6.11.,"HID, fix, BPF",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
3577dbb192419e37b6f54aced8777b6c81cd03d4,3577dbb192419e37b6f54aced8777b6c81cd03d4,Mateusz Guzik,mjguzik@gmail.com,1716335001,Andrew Morton,akpm@linux-foundation.org,1720060198,0debd41a85915375f2a82f3ad53796ac4efbfb19,1a3798dececa8cb26b9eee26840195ccc1a4d6c1,"mm: batch unlink_file_vma calls in free_pgd_range

Execs of dynamically linked binaries at 20-ish cores are bottlenecked on
the i_mmap_rwsem semaphore"," while the biggest singular contributor is
free_pgd_range inducing the lock acquire back-to-back for all consecutive
mappings of a given file.

Tracing the count of said acquires while building the kernel shows:
[1","[' 2)     799579 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n[2', ' 3)          0 |                                                    |\n[3', ' 4)       3009 |                                                    |\n[4', ' 5)       3009 |                                                    |\n[5', ' 6)     326442 |@@@@@@@@@@@@@@@@@@@@@                               |\n\nSo in particular there were 326442 opportunities to coalesce 5 acquires\ninto 1.\n\nDoing so increases execs per second by 4% (~50k to ~52k) when running\nthe benchmark linked below.\n\nThe lock remains the main bottleneck', ' I have not looked at other spots\nyet.\n\nBench can be found here:\nhttp://apollo.backplane.com/DFlyMisc/doexec.c\n\n$ cc -O2 -o shared-doexec doexec.c\n$ ./shared-doexec $(nproc)\n\nNote this particular test makes sure binaries are separate', ' but the\nloader is shared.\n\nStats collected on the patched kernel (+ ""noinline"") with:\nbpftrace -e \'kprobe:unlink_file_vma_batch_process\n{ @ = lhist(((struct unlink_vma_file_batch *)arg0)->count', ' 0', ' 8', "" 1); }'\n\nLink: https://lkml.kernel.org/r/20240521234321.359501-1-mjguzik@gmail.com\nSigned-off-by: Mateusz Guzik <mjguzik@gmail.com>\nReviewed-by: Liam R. Howlett <Liam.Howlett@oracle.com>\nCc: Lorenzo Stoakes <lstoakes@gmail.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\n"", '']",Optimize free_pgd_range to batch unlink_file_vma calls to reduce semaphore bottlenecks in execs of dynamically linked binaries.,"batch, semaphore, optimization",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
fd8db07705c55a995c42b1e71afc42faad675b0b,fd8db07705c55a995c42b1e71afc42faad675b0b,Florian Lehner,dev@der-flo.net,1718446318,Daniel Borkmann,daniel@iogearbox.net,1719939925,4d34c44961bff74ce51e3f587b2a680d958eb6dd,69716e44a74af464060faa68fa2b54f3af03c16a,bpf," devmap: Add .map_alloc_check

Use the .map_allock_check callback to perform allocation checks before
allocating memory for the devmap.

Signed-off-by: Florian Lehner <dev@der-flo.net>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240615101158.57889-1-dev@der-flo.net
",[''],Add .map_alloc_check callback for allocation checks in devmap memory allocation.,"map_alloc_check, allocation, devmap",It's a new feature.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF maps,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
69716e44a74af464060faa68fa2b54f3af03c16a,69716e44a74af464060faa68fa2b54f3af03c16a,Ilya Leoshkevich,iii@linux.ibm.com,1719877230,Daniel Borkmann,daniel@iogearbox.net,1719937912,34bddd4209cb4c8e3106b09fc37fcfb41c866c1f,490c99d4ed99bb01dac8bf2896e27941403549c4,"selftests/bpf: Remove arena tests from DENYLIST.s390x

Now that the s390x JIT supports arena"," remove the respective tests from
the denylist.

Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240701234304.14336-13-iii@linux.ibm.com
",[''],Removed arena tests from the s390x BPF selftests denylist due to JIT support.,"s390x,JIT,denylist",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
490c99d4ed99bb01dac8bf2896e27941403549c4,490c99d4ed99bb01dac8bf2896e27941403549c4,Ilya Leoshkevich,iii@linux.ibm.com,1719877229,Daniel Borkmann,daniel@iogearbox.net,1719937912,7ae6854096191d17f8368bf5ce95fc8c658c48e9,b6349fd3448cf349af327f90585a712d60265429,"selftests/bpf: Add UAF tests for arena atomics

Check that __sync_*() functions don't cause kernel panics when handling
freed arena pages.

x86_64 does not support some arena atomics yet"," and aarch64 may or may
not support them","[' based on the availability of LSE atomics at run time.\nDo not enable this test for these architectures for simplicity.\n\nSigned-off-by: Ilya Leoshkevich <iii@linux.ibm.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240701234304.14336-12-iii@linux.ibm.com\n', '']",Introduce UAF tests for arena atomics in BPF selftests to ensure stability against kernel panics.,"UAF tests, arena atomics, kernel panics",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
b6349fd3448cf349af327f90585a712d60265429,b6349fd3448cf349af327f90585a712d60265429,Ilya Leoshkevich,iii@linux.ibm.com,1719877228,Daniel Borkmann,daniel@iogearbox.net,1719937912,ac0830d54470402fb4b45bc8e2681988bce32bb0,2f9469484a3b52c66b799de73bd1ca75617bc8d5,"selftests/bpf: Introduce __arena_global

While clang uses __attribute__((address_space(1))) both for defining
arena pointers and arena globals"," GCC requires different syntax for
both. While __arena covers the first use case","[' introduce __arena_global\nto cover the second one.\n\nSigned-off-by: Ilya Leoshkevich <iii@linux.ibm.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240701234304.14336-11-iii@linux.ibm.com\n', '']",The commit introduces __arena_global for selftests in BPF to distinguish arena pointers and globals in GCC and clang.,"__arena_global,selftests,BPF",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2f9469484a3b52c66b799de73bd1ca75617bc8d5,2f9469484a3b52c66b799de73bd1ca75617bc8d5,Ilya Leoshkevich,iii@linux.ibm.com,1719877227,Daniel Borkmann,daniel@iogearbox.net,1719937912,a1315869ce478f7f481c2a87b31262b001c9ee46,1e36027e39b8b3fa567ce3d743dbda5954dc0a56,"s390/bpf: Support arena atomics

s390x supports most BPF atomics using single instructions"," which
makes implementing arena support a matter of adding arena address to
the base register (unfortunately atomics do not support index
registers)","[' and wrapping the respective native instruction in probing\nsequences.\n\nAn exception is BPF_XCHG', ' which is implemented using two different\nmemory accesses and a loop. Make sure there is enough extable entries\nfor both instructions. Compute the base address once for both memory\naccesses. Since on exception we need to land after the loop', ' emit the\nnops manually.\n\nSigned-off-by: Ilya Leoshkevich <iii@linux.ibm.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240701234304.14336-10-iii@linux.ibm.com\n', '']",The commit adds support for arena atomics in s390x BPF utilizing single instructions.,"arena, atomics, s390x",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
1e36027e39b8b3fa567ce3d743dbda5954dc0a56,1e36027e39b8b3fa567ce3d743dbda5954dc0a56,Ilya Leoshkevich,iii@linux.ibm.com,1719877226,Daniel Borkmann,daniel@iogearbox.net,1719937912,f1d52383ef117c0d3052f83886fe38f7ceb2bfe3,555469cc9be4a7f52c0ad07a4a237d63e8c5c5f4,"s390/bpf: Enable arena

Now that BPF_PROBE_MEM32 and address space cast instructions are
implemented"," tell the verifier that the JIT supports arena.

Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240701234304.14336-9-iii@linux.ibm.com
",[''],Enabled arena support in s390 BPF by implementing BPF_PROBE_MEM32 and address space cast instructions.,"s390 BPF, arena, JIT",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
555469cc9be4a7f52c0ad07a4a237d63e8c5c5f4,555469cc9be4a7f52c0ad07a4a237d63e8c5c5f4,Ilya Leoshkevich,iii@linux.ibm.com,1719877225,Daniel Borkmann,daniel@iogearbox.net,1719937912,e13409b04a90a49a0e60fac91da2ede79ec54952,4d3a453b434fd2f389960890ae6d767f8d50c403,"s390/bpf: Support address space cast instruction

The new address cast instruction translates arena offsets to userspace
addresses. NULL pointers must not be translated.

The common code sets up the mappings in such a way that it's enough to
replace the higher 32 bits to achieve the desired result. s390x has
just an instruction for this: INSERT IMMEDIATE.

Implement the sequence using 3 instruction: LOAD AND TEST"," BRANCH
RELATIVE ON CONDITION and INSERT IMMEDIATE.

Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240701234304.14336-8-iii@linux.ibm.com
",[''],Support for address space cast instruction added on s390 for eBPF.,"s390,bpf,address",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
4d3a453b434fd2f389960890ae6d767f8d50c403,4d3a453b434fd2f389960890ae6d767f8d50c403,Ilya Leoshkevich,iii@linux.ibm.com,1719877224,Daniel Borkmann,daniel@iogearbox.net,1719937912,05ca7c02eff3e01621d9602e74f425ceb0e4cb7f,a1c04bcc41f9638460a9c68f894fb770596380de,"s390/bpf: Support BPF_PROBE_MEM32

BPF_PROBE_MEM32 is a new mode for LDX"," ST and STX instructions. The JIT
is supposed to add the start address of the kernel arena mapping to the
%dst register","[' and use a probing variant of the respective memory\naccess.\n\nReuse the existing probing infrastructure for that. Put the arena\naddress into the literal pool', ' load it into %r1 and use that as an\nindex register. Do not clear any registers in ex_handler_bpf() for\nfailing ST and STX instructions.\n\nSigned-off-by: Ilya Leoshkevich <iii@linux.ibm.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240701234304.14336-7-iii@linux.ibm.com\n', '']",Add support for BPF_PROBE_MEM32 mode in s390 BPF JIT,"BPF_PROBE_MEM32,s390,JIT",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
a1c04bcc41f9638460a9c68f894fb770596380de,a1c04bcc41f9638460a9c68f894fb770596380de,Ilya Leoshkevich,iii@linux.ibm.com,1719877223,Daniel Borkmann,daniel@iogearbox.net,1719937912,8330aff9f78be2e20a012c4c71820e884833eba1,89b933a2013794d8272d432591a2a7a9c41f6351,"s390/bpf: Land on the next JITed instruction after exception

Currently we land on the nop"," which is unnecessary: we can just as well
begin executing the next instruction. Furthermore","[' the upcoming arena\nsupport for the loop-based BPF_XCHG implementation will require landing\non an instruction that comes after the loop.\n\nSo land on the next JITed instruction', ' which covers both cases.\n\nSigned-off-by: Ilya Leoshkevich <iii@linux.ibm.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240701234304.14336-6-iii@linux.ibm.com\n', '']",Optimize s390 JIT execution to continue from the next instruction after an exception.,"s390, JIT, exception",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
89b933a2013794d8272d432591a2a7a9c41f6351,89b933a2013794d8272d432591a2a7a9c41f6351,Ilya Leoshkevich,iii@linux.ibm.com,1719877222,Daniel Borkmann,daniel@iogearbox.net,1719937912,7073dac156d3202e6e105e930a9c992e7ec4fda2,9a048587269174f218e8d8d737ebfa628589358f,"s390/bpf: Introduce pre- and post- probe functions

Currently probe insns are handled by two ""if"" statements at the
beginning and at the end of bpf_jit_insn(). The first one needs to be
in sync with the huge insn->code statement that follows it"," which was
not a problem so far","[' since the check is small.\n\nThe introduction of arena will make it significantly larger', ' and it\nwill no longer be obvious whether it is in sync with the opcode switch.\n\nMove these statements to the new bpf_jit_probe_load_pre() and\nbpf_jit_probe_post() functions', ' and call them only from cases that need\nthem.\n\nSigned-off-by: Ilya Leoshkevich <iii@linux.ibm.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240701234304.14336-5-iii@linux.ibm.com\n', '']",The commit introduces pre- and post-probe functions to improve BPF JIT instruction handling on s390 architecture.,"probe, JIT, instruction",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
9a048587269174f218e8d8d737ebfa628589358f,9a048587269174f218e8d8d737ebfa628589358f,Ilya Leoshkevich,iii@linux.ibm.com,1719877221,Daniel Borkmann,daniel@iogearbox.net,1719937911,008c28e1e95517c2996807d1a4d8f07e1c71e548,d0736d8c491ddc7d31c7f839d281c907366e2562,"s390/bpf: Get rid of get_probe_mem_regno()

Commit 7fc8c362e782 (""s390/bpf: encode register within extable entry"")
introduced explicit passing of the number of the register to be cleared
to ex_handler_bpf()"," which replaced deducing it from the respective
native load instruction using get_probe_mem_regno().

Replace the second and last usage in the same manner","[' and remove this\nfunction.\n\nSigned-off-by: Ilya Leoshkevich <iii@linux.ibm.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240701234304.14336-4-iii@linux.ibm.com\n', '']",Remove get_probe_mem_regno() function and update register encoding in s390/bpf architecture.,"s390,bpf,register",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['tracepoints like programs']
d0736d8c491ddc7d31c7f839d281c907366e2562,d0736d8c491ddc7d31c7f839d281c907366e2562,Ilya Leoshkevich,iii@linux.ibm.com,1719877220,Daniel Borkmann,daniel@iogearbox.net,1719937911,d6ff1e41a72d364e4af1f5e61af9cd8aa29560e0,df34ec9db6f521118895f22795da49f2ec01f8cf,"s390/bpf: Factor out emitting probe nops

The upcoming arena support for the loop-based BPF_XCHG implementation
requires emitting nop and extable entries separately. Move nop handling
into a separate function"," and keep track of the nop offset.

Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240701234304.14336-3-iii@linux.ibm.com
",[''],Refactor s390 BPF code by moving NOP handling into a separate function for future BPF_XCHG changes.,"s390, nop, refactoring",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
df34ec9db6f521118895f22795da49f2ec01f8cf,df34ec9db6f521118895f22795da49f2ec01f8cf,Ilya Leoshkevich,iii@linux.ibm.com,1719877219,Daniel Borkmann,daniel@iogearbox.net,1719937895,5d37f1bd78b5e986b4e96a2e210622fa1d919267,da5f8fd1f0d393d5eaaba9ad8c22d1c26bb2bf9b,"bpf: Fix atomic probe zero-extension

Zero-extending results of atomic probe operations fails with:

    verifier bug. zext_dst is set"," but no reg is defined

The problem is that insn_def_regno() handles BPF_ATOMICs","[' but not\nBPF_PROBE_ATOMICs. Fix by adding the missing condition.\n\nFixes: d503a04f8bc0 (""bpf: Add support for certain atomics in bpf_arena to x86 JIT"")\nSigned-off-by: Ilya Leoshkevich <iii@linux.ibm.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240701234304.14336-2-iii@linux.ibm.com\n', '']",Fixes zero-extension issues in atomic probe operations within the eBPF verifier.,"atomic,probe,fails",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
da5f8fd1f0d393d5eaaba9ad8c22d1c26bb2bf9b,da5f8fd1f0d393d5eaaba9ad8c22d1c26bb2bf9b,Tao Chen,chen.dylane@gmail.com,1719925910,Daniel Borkmann,daniel@iogearbox.net,1719937232,83cbd2cfabaf5cad2a7579c3c8f9a3ace3116442,9474f72cd6573ee788013147e3590be4a28e085a,"bpftool: Mount bpffs when pinmaps path not under the bpffs

As Quentin said [0]"," BPF map pinning will fail if the pinmaps path is not
under the bpffs","[' like:\n\n  libbpf: specified path /home/ubuntu/test/sock_ops_map is not on BPF FS\n  Error: failed to pin all maps\n\n  [0] https://github.com/libbpf/bpftool/issues/146\n\nFixes: 3767a94b3253 (""bpftool: add pinmaps argument to the load/loadall"")\nSigned-off-by: Tao Chen <chen.dylane@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nTested-by: Quentin Monnet <qmo@kernel.org>\nReviewed-by: Quentin Monnet <qmo@kernel.org>\nLink: https://lore.kernel.org/bpf/20240702131150.15622-1-chen.dylane@gmail.com\n', '']",Mount bpffs in bpftool when pinmaps path is not under bpffs to prevent map pinning failures.,"bpftool, bpffs, pinmaps",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The bpftool utility,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
9474f72cd6573ee788013147e3590be4a28e085a,9474f72cd6573ee788013147e3590be4a28e085a,Pu Lehui,pulehui@huawei.com,1719922784,Daniel Borkmann,daniel@iogearbox.net,1719928922,dc157823e7c4ffbe50750f802c612765f76ac340,5d52ad36683af64f04da295d67fb943f94658929,"selftests/bpf: Add testcase where 7th argment is struct

Add testcase where 7th argument is struct for architectures with 8 argument
registers"," and increase the complexity of the struct.

Signed-off-by: Pu Lehui <pulehui@huawei.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Björn Töpel <bjorn@rivosinc.com>
Acked-by: Björn Töpel <bjorn@kernel.org>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240702121944.1091530-4-pulehui@huaweicloud.com
",[''],Add a test case for architectures with 8 argument registers where the 7th argument is a struct.,"testcase, struct, architectures",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
5d52ad36683af64f04da295d67fb943f94658929,5d52ad36683af64f04da295d67fb943f94658929,Pu Lehui,pulehui@huawei.com,1719922783,Daniel Borkmann,daniel@iogearbox.net,1719928913,ee0837692847b8e863157765b18734b69249544a,6801b0aef79db475591c3146a701ea373e4663b7,"selftests/bpf: Factor out many args tests from tracing_struct

Factor out many args tests from tracing_struct and rename some function names
to make more sense. Meanwhile"," remove unnecessary skeleton detach operation
as it will be covered by skeleton destroy operation.

Signed-off-by: Pu Lehui <pulehui@huawei.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240702121944.1091530-3-pulehui@huaweicloud.com
",[''],The commit refactors many argument tests from tracing_struct and renames functions for clarity.,"refactor, tracing_struct, selftests",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tracepoints like programs']
6801b0aef79db475591c3146a701ea373e4663b7,6801b0aef79db475591c3146a701ea373e4663b7,Pu Lehui,pulehui@huawei.com,1719922782,Daniel Borkmann,daniel@iogearbox.net,1719928890,c4206e768f3df2d3ae3a2966101275a4813c2f56,e4a195e2b95e4602c667ed19a20f71218df138c2,riscv," bpf: Add 12-argument support for RV64 bpf trampoline

This patch adds 12 function arguments support for riscv64 bpf trampoline.
The current bpf trampoline supports <= sizeof(u64) bytes scalar arguments [0]
and <= 16 bytes struct arguments [1]. Therefore","[' we focus on the situation\nwhere scalars are at most XLEN bits and aggregates whose total size does not\nexceed 2×XLEN bits in the riscv calling convention [2].\n\nSigned-off-by: Pu Lehui <pulehui@huawei.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: Björn Töpel <bjorn@rivosinc.com>\nAcked-by: Björn Töpel <bjorn@kernel.org>\nAcked-by: Puranjay Mohan <puranjay@kernel.org>\nLink: https://elixir.bootlin.com/linux/v6.8/source/kernel/bpf/btf.c#L6184 [0]\nLink: https://elixir.bootlin.com/linux/v6.8/source/kernel/bpf/btf.c#L6769 [1]\nLink: https://github.com/riscv-non-isa/riscv-elf-psabi-doc/releases/download/draft-20230929-e5c800e661a53efe3c2678d71a306323b60eb13b/riscv-abi.pdf [2]\nLink: https://lore.kernel.org/bpf/20240702121944.1091530-2-pulehui@huaweicloud.com\n', '']",Add support for 12 function arguments in RISC-V 64-bit BPF trampoline.,"riscv64,bpf,trampoline",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.","['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2a01a8895015ad479df7cfb8f127501d1c8da7c9,2a01a8895015ad479df7cfb8f127501d1c8da7c9,Paolo Abeni,pabeni@redhat.com,1719926819,Paolo Abeni,pabeni@redhat.com,1719926820,a822126b33b57d6d3abde8196612806e49545f3f,e27d7168f0c8c024344e9541513aa71d921402a5 e3d69f585d651aba877e18866de7e8cfa2476caa,"Merge branch 'net-bpf_net_context-cleanups'

Sebastian Andrzej Siewior says:

====================
net: bpf_net_context cleanups.

a small series with bpf_net_context cleanups/ improvements.
Jakub asked for #1 and #2 and while looking around I made #3.
====================

Link: https://patch.msgid.link/20240628103020.1766241-1-bigeasy@linutronix.de
Signed-off-by: Paolo Abeni <pabeni@redhat.com>
",,This commit performs cleanups and improvements on the bpf_net_context subsystem.,"bpf_net_context,cleanups,improvements",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
e3d69f585d651aba877e18866de7e8cfa2476caa,e3d69f585d651aba877e18866de7e8cfa2476caa,Sebastian Andrzej Siewior,bigeasy@linutronix.de,1719569936,Paolo Abeni,pabeni@redhat.com,1719926817,a822126b33b57d6d3abde8196612806e49545f3f,d839a73179ae91c07f5f2f97ccb9c69b2b7c3306,"net: Move flush list retrieval to where it is used.

The bpf_net_ctx_get_.*_flush_list() are used at the top of the function.
This means the variable is always assigned even if unused. By moving the
function to where it is used"," it is possible to delay the initialisation
until it is unavoidable.
Not sure how much this gains in reality but by looking at bq_enqueue()
(in devmap.c) gcc pushes one register less to the stack. \o/.

 Move flush list retrieval to where it is used.

Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Acked-by: Jesper Dangaard Brouer <hawk@kernel.org>
Reviewed-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Paolo Abeni <pabeni@redhat.com>
",[''],Move flush list retrieval to improve code efficiency by delaying initialization until necessary.,"flush list, efficiency, initialization",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF maps,['tc/netfilter like programs']
d839a73179ae91c07f5f2f97ccb9c69b2b7c3306,d839a73179ae91c07f5f2f97ccb9c69b2b7c3306,Sebastian Andrzej Siewior,bigeasy@linutronix.de,1719569935,Paolo Abeni,pabeni@redhat.com,1719926817,78ca317c579749b037de74a2a509e97b4cfbac89,2896624be30b049601ec3ef9b08df184d0c70495,"net: Optimize xdp_do_flush() with bpf_net_context infos.

Every NIC driver utilizing XDP should invoke xdp_do_flush() after
processing all packages. With the introduction of the bpf_net_context
logic the flush lists (for dev"," CPU-map and xsk) are lazy initialized
only if used. However xdp_do_flush() tries to flush all three of them so
all three lists are always initialized and the likely empty lists are
""iterated"".
Without the usage of XDP but with CONFIG_DEBUG_NET the lists are also
initialized due to xdp_do_check_flushed().

Jakub suggest to utilize the hints in bpf_net_context and avoid invoking
the flush function. This will also avoiding initializing the lists which
are otherwise unused.

Introduce bpf_net_ctx_get_all_used_flush_lists() to return the
individual list if not-empty. Use the logic in xdp_do_flush() and
xdp_do_check_flushed(). Remove the not needed .*_check_flush().

Suggested-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Reviewed-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Paolo Abeni <pabeni@redhat.com>
",[''],Optimize xdp_do_flush() using bpf_net_context to prevent unnecessary list initialization and improve performance.,xdp_do_flush bpf_net_context optimization,It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['xdp like programs']
2896624be30b049601ec3ef9b08df184d0c70495,2896624be30b049601ec3ef9b08df184d0c70495,Sebastian Andrzej Siewior,bigeasy@linutronix.de,1719569934,Paolo Abeni,pabeni@redhat.com,1719926817,d33b657120fd2e84f46fd1437ffe7751d2d9c754,e27d7168f0c8c024344e9541513aa71d921402a5,"net: Remove task_struct::bpf_net_context init on fork.

There is no clone() invocation within a bpf_net_ctx_…() block. Therefore
the task_struct::bpf_net_context has always to be NULL and an explicit
initialisation is not required.

Remove the NULL assignment in the clone() path.

Suggested-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Reviewed-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Paolo Abeni <pabeni@redhat.com>
",,Remove unnecessary NULL initialization of bpf_net_context on task_struct fork.,"bpf_net_context, task_struct, NULL",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['tc/netfilter like programs']
e4a195e2b95e4602c667ed19a20f71218df138c2,e4a195e2b95e4602c667ed19a20f71218df138c2,Tushar Vyavahare,tushar.vyavahare@intel.com,1719899956,Daniel Borkmann,daniel@iogearbox.net,1719925950,bc7c68f0934abe113ae48bf973f0bd2618601861,d80d61ab0609f7f7168d59ec82ee5f055a4b6be7,"selftests/xsk: Enhance batch size support with dynamic configurations

Introduce dynamic adjustment capabilities for fill_size and comp_size
parameters to support larger batch sizes beyond the previous 2K limit.

Update HW_SW_MAX_RING_SIZE test cases to evaluate AF_XDP's robustness by
pushing hardware and software ring sizes to their limits. This test
ensures AF_XDP's reliability amidst potential producer/consumer throttling
due to maximum ring utilization.

Signed-off-by: Tushar Vyavahare <tushar.vyavahare@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Link: https://lore.kernel.org/bpf/20240702055916.48071-3-tushar.vyavahare@intel.com
",,Enhance selftests for AF_XDP by adding dynamic configuration support for larger batch sizes in fill_size and comp_size parameters.,"AF_XDP, dynamic configuration, batch sizes",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
d80d61ab0609f7f7168d59ec82ee5f055a4b6be7,d80d61ab0609f7f7168d59ec82ee5f055a4b6be7,Tushar Vyavahare,tushar.vyavahare@intel.com,1719899955,Daniel Borkmann,daniel@iogearbox.net,1719925950,de7b370e9840bbcf7a6c1e17951b507a5367cf65,03922e97bc305c6b2e8bc4b7cc765959ca63b05d,"selftests/xsk: Ensure traffic validation proceeds after ring size adjustment in xskxceiver

Previously"," HW_SW_MIN_RING_SIZE and HW_SW_MAX_RING_SIZE test cases were
not validating Tx/Rx traffic at all due to early return after changing HW
ring size in testapp_validate_traffic().

Fix the flow by checking return value of set_ring_size() and act upon it
rather than terminating the test case there.

Signed-off-by: Tushar Vyavahare <tushar.vyavahare@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Link: https://lore.kernel.org/bpf/20240702055916.48071-2-tushar.vyavahare@intel.com
",[''],Fixes traffic validation issue after ring size adjustment in xskxceiver selftests.,"traffic,validation,ring",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
03922e97bc305c6b2e8bc4b7cc765959ca63b05d,03922e97bc305c6b2e8bc4b7cc765959ca63b05d,Zhu Jun,zhujun2@cmss.chinamobile.com,1719458345,Daniel Borkmann,daniel@iogearbox.net,1719846950,671288bd6b89cc0177a0d79fbb182ea96b095cd4,2382a405c581ae8f39f898055654e2000e7dd0d3,"selftests/bpf: Delete extra blank lines in test_sockmap

Delete extra blank lines inside of test_selftest().

Signed-off-by: Zhu Jun <zhujun2@cmss.chinamobile.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240627031905.7133-1-zhujun2@cmss.chinamobile.com
",,Clean up by removing extra blank lines in the BPF test_sockmap selftest.,"selftests,bpf,clean",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
2382a405c581ae8f39f898055654e2000e7dd0d3,2382a405c581ae8f39f898055654e2000e7dd0d3,Pu Lehui,pulehui@huawei.com,1719025477,Daniel Borkmann,daniel@iogearbox.net,1719846646,a4b02e470a6537ebfdadaf1bfa695a11b2f3db85,9f1e16fb1fc9826001c69e0551d51fbbcd2d74e9,riscv," bpf: Use bpf_prog_pack for RV64 bpf trampoline

We used bpf_prog_pack to aggregate bpf programs into huge page to
relieve the iTLB pressure on the system. We can apply it to bpf
trampoline","[' as Song had been implemented it in core and x86 [0]. This\npatch is going to use bpf_prog_pack to RV64 bpf trampoline. Since Song\nand Puranjay have done a lot of work for bpf_prog_pack on RV64', '\nimplementing this function will be easy.\n\nSigned-off-by: Pu Lehui <pulehui@huawei.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nTested-by: Björn Töpel <bjorn@rivosinc.com> #riscv\nLink: https://lore.kernel.org/all/20231206224054.492250-1-song@kernel.org [0]\nLink: https://lore.kernel.org/bpf/20240622030437.3973492-4-pulehui@huaweicloud.com\n', '']",The commit uses bpf_prog_pack to optimize RV64 bpf trampoline by aggregating programs into huge pages to reduce iTLB pressure.,"bpf_prog_pack, RV64, trampoline",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
9f1e16fb1fc9826001c69e0551d51fbbcd2d74e9,9f1e16fb1fc9826001c69e0551d51fbbcd2d74e9,Pu Lehui,pulehui@huawei.com,1719025476,Daniel Borkmann,daniel@iogearbox.net,1719846646,f366bcd2adfc8d82678325158ee437a5889fcea7,d1a426171d76b2cdf3dea5d52f6266090e4aa254,riscv," bpf: Fix out-of-bounds issue when preparing trampoline image

We get the size of the trampoline image during the dry run phase and
allocate memory based on that size. The allocated image will then be
populated with instructions during the real patch phase. But after
commit 26ef208c209a (""bpf: Use arch_bpf_trampoline_size"")","["" the `im`\nargument is inconsistent in the dry run and real patch phase. This may\ncause emit_imm in RV64 to generate a different number of instructions\nwhen generating the 'im' address"", ' potentially causing out-of-bounds\nissues. Let\'s emit the maximum number of instructions for the ""im""\naddress during dry run to fix this problem.\n\nFixes: 26ef208c209a (""bpf: Use arch_bpf_trampoline_size"")\nSigned-off-by: Pu Lehui <pulehui@huawei.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240622030437.3973492-3-pulehui@huaweicloud.com\n', '']",Fix out-of-bounds issue in BPF trampoline image allocation for RISC-V platform.,"out-of-bounds, trampoline, RISC-V",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.","['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d1a426171d76b2cdf3dea5d52f6266090e4aa254,d1a426171d76b2cdf3dea5d52f6266090e4aa254,Pu Lehui,pulehui@huawei.com,1719025475,Daniel Borkmann,daniel@iogearbox.net,1719846646,a96c498ba0067e8966e1c9cc8ebb9cae0df7c829,5b747c23f17d791e08fdf4baa7e14b704625518c,"bpf: Use precise image size for struct_ops trampoline

For trampoline using bpf_prog_pack"," we need to generate a rw_image
buffer with size of (image_end - image). For regular trampoline","[' we use\nthe precise image size generated by arch_bpf_trampoline_size to allocate\nrw_image. But for struct_ops trampoline', ' we allocate rw_image directly\nusing close to PAGE_SIZE size. We do not need to allocate for that much', ""\nas the patch size is usually much smaller than PAGE_SIZE. Let's use\nprecise image size for it too.\n\nSigned-off-by: Pu Lehui <pulehui@huawei.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nTested-by: Björn Töpel <bjorn@rivosinc.com> #riscv\nAcked-by: Song Liu <song@kernel.org>\nLink: https://lore.kernel.org/bpf/20240622030437.3973492-2-pulehui@huaweicloud.com\n"", '']",The commit optimizes struct_ops trampoline by using a precise image size with bpf_prog_pack.,"struct_ops, trampoline, image",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.","['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
5b747c23f17d791e08fdf4baa7e14b704625518c,5b747c23f17d791e08fdf4baa7e14b704625518c,Alan Maguire,alan.maguire@oracle.com,1719655258,Daniel Borkmann,daniel@iogearbox.net,1719846308,ab8242d6e3d89a3be472da66390204ad79e4d5f6,c77e572d3a8c0e21c5dca4cc2883c7cd8cbe981f,"libbpf: Fix error handling in btf__distill_base()

Coverity points out that after calling btf__new_empty_split() the wrong
value is checked for error.

Fixes: 58e185a0dc35 (""libbpf: Add btf__distill_base() creating split BTF with distilled base BTF"")
Reported-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240629100058.2866763-1-alan.maguire@oracle.com
",,Fix error handling in btf__distill_base() function in libbpf.,"libbpf,error handling,btf__distill_base",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
c77e572d3a8c0e21c5dca4cc2883c7cd8cbe981f,c77e572d3a8c0e21c5dca4cc2883c7cd8cbe981f,Lorenzo Bianconi,lorenzo@kernel.org,1719700010,Daniel Borkmann,daniel@iogearbox.net,1719846191,2fcf594a3f8b5c161d8722d121fc5dc9233ccef7,391bb6594fd3a567efb1cd3efc8136c78c4c9e31,"selftests/bpf: Add selftest for bpf_xdp_flow_lookup kfunc

Introduce e2e selftest for bpf_xdp_flow_lookup kfunc through
xdp_flowtable utility.

Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/b74393fb4539aecbbd5ac7883605f86a95fb0b6b.1719698275.git.lorenzo@kernel.org
",,Introduce an end-to-end selftest for bpf_xdp_flow_lookup kfunc using xdp_flowtable utility.,"selftest,bpf_xdp_flow_lookup,xdp_flowtable",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['xdp like programs']
391bb6594fd3a567efb1cd3efc8136c78c4c9e31,391bb6594fd3a567efb1cd3efc8136c78c4c9e31,Lorenzo Bianconi,lorenzo@kernel.org,1719700009,Daniel Borkmann,daniel@iogearbox.net,1719846181,39c9c0cacd23ea033ac3a003657abd91bc95d4c8,89cc8f1c5f22568142b7ad118c738204708e4207,"netfilter: Add bpf_xdp_flow_lookup kfunc

Introduce bpf_xdp_flow_lookup kfunc in order to perform the lookup
of a given flowtable entry based on a fib tuple of incoming traffic.
bpf_xdp_flow_lookup can be used as building block to offload in xdp
the processing of sw flowtable when hw flowtable is not available.

Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Acked-by: Pablo Neira Ayuso <pablo@netfilter.org>
Link: https://lore.kernel.org/bpf/55d38a4e5856f6d1509d823ff4e98aaa6d356097.1719698275.git.lorenzo@kernel.org
",,This commit introduces the bpf_xdp_flow_lookup kfunc to facilitate flowtable entry lookup based on a FIB tuple in XDP programs.,"bpf_xdp_flow_lookup, netfilter, flowtable",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['xdp like programs', 'tc/netfilter like programs']"
89cc8f1c5f22568142b7ad118c738204708e4207,89cc8f1c5f22568142b7ad118c738204708e4207,Florian Westphal,fw@strlen.de,1719700008,Daniel Borkmann,daniel@iogearbox.net,1719846113,8fe95643954df3fe3f519fe20ab6c46c41c4ac52,a12978712d9001b060bcc10eaae42ad5102abe2b,"netfilter: nf_tables: Add flowtable map for xdp offload

This adds a small internal mapping table so that a new bpf (xdp) kfunc
can perform lookups in a flowtable.

As-is", xdp program has access to the device pointer,"[' but no way to do a\nlookup in a flowtable -- there is no way to obtain the needed struct\nwithout questionable stunts.\n\nThis allows to obtain an nf_flowtable pointer given a net_device\nstructure.\n\nIn order to keep backward compatibility', ' the infrastructure allows the\nuser to add a given device to multiple flowtables', ' but it will always\nreturn the first added mapping performing the lookup since it assumes\nthe right configuration is 1:1 mapping between flowtables and net_devices.\n\nCo-developed-by: Lorenzo Bianconi <lorenzo@kernel.org>\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Lorenzo Bianconi <lorenzo@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Pablo Neira Ayuso <pablo@netfilter.org>\nLink: https://lore.kernel.org/bpf/9f20e2c36f494b3bf177328718367f636bb0b2ab.1719698275.git.lorenzo@kernel.org\n', '']",The commit adds a flowtable map for XDP offload in the nf_tables subsystem.,"flowtable,XDP,netfilter",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF maps,['xdp like programs']
f58e7f404da44c94e46bfe657b8707195aebd25a,f58e7f404da44c94e46bfe657b8707195aebd25a,Benjamin Tissoires,bentiss@kernel.org,1719482062,Benjamin Tissoires,bentiss@kernel.org,1719838124,3f49ea1f04e284441927bd50ea0a785f68c080a7,9b52d81115db681efc1f83ded1d572e5b0b4fd49,"HID: bpf: Thrustmaster TCA Yoke Boeing joystick fix

This joystick's original HID descriptor is wrong & it shows a
ABS_MISC axis in Linux that doesn't exist on the hardware.

Link: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/merge_requests/82
Signed-off-by: K S Iyer <kumar.s.iyer65@gmail.com>
Link: https://patch.msgid.link/20240627-import-bpf-v1-6-0dbcda4a5b1f@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,Fixes incorrect HID descriptor for the Thrustmaster TCA Yoke Boeing joystick.,"HID, joystick, fix",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
9b52d81115db681efc1f83ded1d572e5b0b4fd49,9b52d81115db681efc1f83ded1d572e5b0b4fd49,Benjamin Tissoires,bentiss@kernel.org,1719482061,Benjamin Tissoires,bentiss@kernel.org,1719838119,85a17b193bdda031aa2bd305962d46bed3e64585,f03741540dbab48f8a65da44aaadbe04216d9a42,"HID: bpf: Add Huion Dial 2 bpf fixup

Pretty much similar to the Inspiroy 2"," but with 2 wheels and 8 buttons.

This bpf also works in both normal and vendor mode. If the device is
switched into vendor mode by huion-switcher","[' a udev property is set\nwhich is then retrieved by this bpf object. This allows to hide the now\nunused normal collections.\n\nLink: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/merge_requests/103\nLink: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/merge_requests/104\nLink: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/merge_requests/111\nLink: https://patch.msgid.link/20240627-import-bpf-v1-5-0dbcda4a5b1f@kernel.org\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Add bpf fixup for Huion Dial 2 devices to ensure compatibility with normal and vendor modes.,"HID, bpf, Huion",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
f03741540dbab48f8a65da44aaadbe04216d9a42,f03741540dbab48f8a65da44aaadbe04216d9a42,Benjamin Tissoires,bentiss@kernel.org,1719482060,Benjamin Tissoires,bentiss@kernel.org,1719838117,778560cff2dfa020a07a851ce47b1635f2dba173,c4015aa7d8faa43ca53608dccad681eafc22db09,"HID: bpf: Add support for the XP-PEN Deco Mini 4

The XP-PEN Deco Mini 4 is a UGEE device with a frame with 6 buttons.
Its pen has 2 buttons and supports pressure reporting.

Fix their report descriptors and transform the frame button events to
support it.

Link: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/merge_requests/88
Signed-off-by: José Expósito <jose.exposito89@gmail.com>
Link: https://patch.msgid.link/20240627-import-bpf-v1-4-0dbcda4a5b1f@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,Add support for XP-PEN Deco Mini 4 device in HID BPF framework.,"XP-PEN, HID, support",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
c4015aa7d8faa43ca53608dccad681eafc22db09,c4015aa7d8faa43ca53608dccad681eafc22db09,Benjamin Tissoires,bentiss@kernel.org,1719482059,Benjamin Tissoires,bentiss@kernel.org,1719838113,54026980e7bee0d86e4c3e252b0c51e6caa52a9b,09c555faedb855b07d62503e0a4cd8cdf726da20,"HID: bpf: move the BIT() macro to hid_bpf_helpers.h

This macro can be useful in mopre than one place

Link: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/commit/7970a9c17aa0756bad63e89fccb6ee4f2ec83ccc
Signed-off-by: José Expósito <jose.exposito89@gmail.com>
Link: https://patch.msgid.link/20240627-import-bpf-v1-3-0dbcda4a5b1f@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,The BIT() macro is moved to hid_bpf_helpers.h for broader utility.,"BIT macro, hid_bpf_helpers.h, utility",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
09c555faedb855b07d62503e0a4cd8cdf726da20,09c555faedb855b07d62503e0a4cd8cdf726da20,Benjamin Tissoires,bentiss@kernel.org,1719482058,Benjamin Tissoires,bentiss@kernel.org,1719838103,9d61625764e7731d06cc37a78f0a3191b74ddb8e,8a89db51873ca574de45b25fce68103f34266459,"HID: bpf: add a driver for the Huion Inspiroy 2S (H641P)

This is a a driver for the Huion Inspiroy 2S in both modes (firmware mode
and tablet mode). This device has 6 buttons and a wheel"," all of which
send key combinations (see the comments for the defaults). Luckily the
device is quite limited in that it only supports one button down at a
time","[' so with this BPF we can simply remap the 8 possible report IDs to\nour own custom-built report descriptor.\n\nIf the device is in tablet mode (e.g. using huion-switcher it sends\neverything through the vendor report instead). This BPF program converts\nboth', "" depending which devices you attach to you get both. Or if you\nattach to all hid devices you get a duplicate device but it'll work\neither way.\n\nThis BPF should be mostly compatible for the M and L as well though they\nhave more buttons so the rdescs will need some minor rework.\n\nLink: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/merge_requests/85\nLink: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/merge_requests/109\nSigned-off-by: Peter Hutterer <peter.hutterer@who-t.net>\nLink: https://patch.msgid.link/20240627-import-bpf-v1-2-0dbcda4a5b1f@kernel.org\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n"", '']",This commit adds a driver for the Huion Inspiroy 2S tablet supporting firmware and tablet modes.,"driver, Huion, tablet",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
8a89db51873ca574de45b25fce68103f34266459,8a89db51873ca574de45b25fce68103f34266459,Benjamin Tissoires,bentiss@kernel.org,1719482057,Benjamin Tissoires,bentiss@kernel.org,1719838098,950d448761d56272fceb7d76bd76ddcf87d9f6a4,c79de517a226b86419a5baa867e65e3f8118829f,"HID: bpf: Add a HID report composition helper macros

These macros make it slightly easier and more modular to create
a HID report descriptor from scratch. Since they carry the annotation
we don't need to comment it and they cannot get stale.

For comparison"," before we had this:

        0x15","[' 0x00', '                    //   Logical Minimum (0)\n        0x25', ' 0x01', '                    //   Logical Maximum (1)\n        0x95', ' 0x04', '                    //   Report Count (4)\n        0x75', ' 0x01', '                    //   Report Size (1)\n\nNow we can write this as:\n        LogicalRange_i8(0', ' 1)\n        ReportCount(4)\n        ReportSize(1)\n\nBecause these macros are for creating new report descriptors', ""\nsome bits aren't directly exposed. e.g in the example above:\nthere is a logical range as one macro that sets both min and max.\nThere is seldom a good use case for skipping either anyway.\n\nThese macros will need to be expanded over time.\n\nFor Usage Pages and Usage IDs"", ' we use a tool to parse the HUT JSON\n(attached to the HUT 1.5 PDF [1]) and generate all #defines for all\nusage pages and usages in the form:\n\n #define UsagePage_Foo_Bar\n #define Usage_FB_SomeOrOther\n\nWhere the FB is simply the acronym based on the capital letters in the\nUsage Page name or the first three letters', ' whichever makes slightly\nmore sense.\n\n[1] https://usb.org/document-library/hid-usage-tables-15\n\nLink: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/merge_requests/92\nLink: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/merge_requests/96\nSigned-off-by: Peter Hutterer <peter.hutterer@who-t.net>\nLink: https://patch.msgid.link/20240627-import-bpf-v1-1-0dbcda4a5b1f@kernel.org\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Added helper macros for easier and modular creation of HID report descriptors.,"HID,bpf,macros",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
c79de517a226b86419a5baa867e65e3f8118829f,c79de517a226b86419a5baa867e65e3f8118829f,Benjamin Tissoires,bentiss@kernel.org,1719837592,Benjamin Tissoires,bentiss@kernel.org,1719838096,1b591c2fadeaae81ac923b2d2a7c8ee6637263ff,260ffc9676b635c2ededc39285bfa41f83536ee1,"HID: bpf: doc fixes for hid_hw_request() hooks

We had the following errors while doing make htmldocs:

Documentation/hid/hid-bpf:185: include/linux/hid_bpf.h:167:
	ERROR: Unexpected indentation.

Also ensure consistency with the rest of the __u64 vs u64.

Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
Fixes: 9286675a2aed (""HID: bpf: add HID-BPF hooks for hid_hw_output_report"")
Link: https://patch.msgid.link/20240701-fix-cki-v2-4-20564e2e1393@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,Fixes documentation errors related to HID-BPF hooks in hid_hw_request().,"HID, BPF, documentation",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
260ffc9676b635c2ededc39285bfa41f83536ee1,260ffc9676b635c2ededc39285bfa41f83536ee1,Benjamin Tissoires,bentiss@kernel.org,1719837591,Benjamin Tissoires,bentiss@kernel.org,1719838094,6be4c891f02e4fedbe4cf8ef355a72c146220db4,762ced1630a97a457ad2fd5f5a36849009808431,"HID: bpf: doc fixes for hid_hw_request() hooks

We had the following errors while doing make htmldocs:
Documentation/hid/hid-bpf:185: include/linux/hid_bpf.h:144:
	ERROR: Unexpected indentation.
Documentation/hid/hid-bpf:185: include/linux/hid_bpf.h:145:
	WARNING: Block quote ends without a blank line;
	unexpected unindent.
Documentation/hid/hid-bpf:185: include/linux/hid_bpf.h:147:
	ERROR: Unexpected indentation.

Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
Fixes: 8bd0488b5ea5 (""HID: bpf: add HID-BPF hooks for hid_hw_raw_requests"")
Link: https://patch.msgid.link/20240701-fix-cki-v2-3-20564e2e1393@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,Fix documentation errors for HID-BPF related to hid_hw_request() hooks.,"HID,BPF,documentation",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
762ced1630a97a457ad2fd5f5a36849009808431,762ced1630a97a457ad2fd5f5a36849009808431,Benjamin Tissoires,bentiss@kernel.org,1719837590,Benjamin Tissoires,bentiss@kernel.org,1719838091,d1811f6b035a46834633b6e46f629ed9cd298a72,fcdf830ea634cf0ee6543b6cd6a4932f92464fc7,"HID: bpf: fix gcc warning and unify __u64 into u64

I've got multiple reports of:
error: cast from pointer to integer of different size
[-Werror=pointer-to-int-cast].

Let's use the same trick than kernel/bpf/helpers.c to shut up that warning.

Even if we were on an architecture with addresses on more than 64 bits","
this isn't much of an issue as the address is not used as a pointer","['\nbut as an hash and the caller is not supposed to go back to the kernel\naddress ever.\n\nAnd while we change those', ' make sure we use u64 instead of __u64 for\nconsistency\n\nReported-by: Stephen Rothwell <sfr@canb.auug.org.au>\nReported-by: kernel test robot <lkp@intel.com>\nCloses: https://lore.kernel.org/oe-kbuild-all/202406280633.OPB5uIFj-lkp@intel.com/\nCloses: https://lore.kernel.org/oe-kbuild-all/202406282304.UydSVncq-lkp@intel.com/\nCloses: https://lore.kernel.org/oe-kbuild-all/202406282242.Fk738zzy-lkp@intel.com/\nReported-by: Mirsad Todorovac <mtodorovac69@gmail.com>\nFixes: 67eccf151d76 (""HID: add source argument to HID low level functions"")\nLink: https://patch.msgid.link/20240701-fix-cki-v2-2-20564e2e1393@kernel.org\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Fixes a gcc warning by unifying pointer casting to consistent u64 type in HID BPF implementation.,"gcc warning, unify u64, pointer casting",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The helper and kfuncs,['HID driver like programs']
fcdf830ea634cf0ee6543b6cd6a4932f92464fc7,fcdf830ea634cf0ee6543b6cd6a4932f92464fc7,Benjamin Tissoires,bentiss@kernel.org,1719837589,Benjamin Tissoires,bentiss@kernel.org,1719838083,bd14a95f4b17f38a4ee2610f2d5348a82eba21ea,d3e15189bfd4d0a9d3a7ad8bd0e6ebb1c0419f93,"selftests/hid: ensure CKI can compile our new tests on old kernels

In the same way than commit ae7487d112cf (""selftests/hid: ensure we can
compile the tests on kernels pre-6.3"") we should expose struct hid_bpf_ops
when it's not available in vmlinux.h.

So unexpose an eventual struct hid_bpf_ops", include vmlinux.h,"[' and\nre-export struct hid_bpf_ops.\n\nFixes: d7696738d66b (""selftests/hid: convert the hid_bpf selftests with struct_ops"")\nReported-by: kernel test robot <lkp@intel.com>\nCloses: https://lore.kernel.org/r/202406270328.bscLN1IF-lkp@intel.com/\nLink: https://patch.msgid.link/20240701-fix-cki-v2-1-20564e2e1393@kernel.org\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Modify selftests to ensure compatibility with older kernels by managing the struct hid_bpf_ops exposure.,"selftests, compatibility, hid_bpf_ops",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
d04bccd8c19d601232ed3e3c9e248c0040167d47,d04bccd8c19d601232ed3e3c9e248c0040167d47,Christian Brauner,brauner@kernel.org,1717772137,Christian Brauner,brauner@kernel.org,1719561209,31e4865f1831a61999cff6152362078f54fbf9ea,17e70161281bb66316e94e63a15d1a8498bf6f01,"listmount: allow listing in reverse order

util-linux is about to implement listmount() and statmount() support.
Karel requested the ability to scan the mount table in backwards order
because that's what libmount currently does in order to get the latest
mount first. We currently don't support this in listmount(). Add a new
LISTMOUNT_REVERSE flag to allow listing mounts in reverse order. For
example"," listing all child mounts of /sys without LISTMOUNT_REVERSE
gives:

    /sys/kernel/security @ mnt_id: 4294968369
    /sys/fs/cgroup @ mnt_id: 4294968370
    /sys/firmware/efi/efivars @ mnt_id: 4294968371
    /sys/fs/bpf @ mnt_id: 4294968372
    /sys/kernel/tracing @ mnt_id: 4294968373
    /sys/kernel/debug @ mnt_id: 4294968374
    /sys/fs/fuse/connections @ mnt_id: 4294968375
    /sys/kernel/config @ mnt_id: 4294968376

whereas with LISTMOUNT_REVERSE it gives:

    /sys/kernel/config @ mnt_id: 4294968376
    /sys/fs/fuse/connections @ mnt_id: 4294968375
    /sys/kernel/debug @ mnt_id: 4294968374
    /sys/kernel/tracing @ mnt_id: 4294968373
    /sys/fs/bpf @ mnt_id: 4294968372
    /sys/firmware/efi/efivars @ mnt_id: 4294968371
    /sys/fs/cgroup @ mnt_id: 4294968370
    /sys/kernel/security @ mnt_id: 4294968369

Link: https://lore.kernel.org/r/20240607-vfs-listmount-reverse-v1-4-7877a2bfa5e5@kernel.org
Reviewed-by: Josef Bacik <josef@toxicpanda.com>
Signed-off-by: Christian Brauner <brauner@kernel.org>
",[''],The commit adds a LISTMOUNT_REVERSE flag to support listing mount points in reverse order.,"listmount, reverse, mount",It's a new feature.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
fd19d4a492af77b1e8fb0439781a3048d1d1f554,fd19d4a492af77b1e8fb0439781a3048d1d1f554,Linus Torvalds,torvalds@linux-foundation.org,1719507935,Linus Torvalds,torvalds@linux-foundation.org,1719507935,c293c1a1218fe87c4b6712938352dbc349d0b68e,3c1d29e53d34537063e60f5eafe0482780a1735a b62cb6a7e83622783100182d9b70e9c70393cfbe,"Merge tag 'net-6.10-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 ""Including fixes from can"," bpf and netfilter.

  There are a bunch of regressions addressed here","[' but hopefully nothing\n  spectacular. We are still waiting the driver fix from Intel', ' mentioned\n  by Jakub in the previous networking pull.\n\n  Current release - regressions:\n\n   - core: add softirq safety to netdev_rename_lock\n\n   - tcp: fix tcp_rcv_fastopen_synack() to enter TCP_CA_Loss for failed\n     TFO\n\n   - batman-adv: fix RCU race at module unload time\n\n  Previous releases - regressions:\n\n   - openvswitch: get related ct labels from its master if it is not\n     confirmed\n\n   - eth: bonding: fix incorrect software timestamping report\n\n   - eth: mlxsw: fix memory corruptions on spectrum-4 systems\n\n   - eth: ionic: use dev_consume_skb_any outside of napi\n\n  Previous releases - always broken:\n\n   - netfilter: fully validate NFT_DATA_VALUE on store to data registers\n\n   - unix: several fixes for OoB data\n\n   - tcp: fix race for duplicate reqsk on identical SYN\n\n   - bpf:\n       - fix may_goto with negative offset\n       - fix the corner case with may_goto and jump to the 1st insn\n       - fix overrunning reservations in ringbuf\n\n   - can:\n       - j1939: recover socket queue on CAN bus error during BAM\n         transmission\n       - mcp251xfd: fix infinite loop when xmit fails\n\n   - dsa: microchip: monitor potential faults in half-duplex mode\n\n   - eth: vxlan: pull inner IP header in vxlan_xmit_one()\n\n   - eth: ionic: fix kernel panic due to multi-buffer handling\n\n  Misc:\n\n   - selftest: unix tests refactor and a lot of new cases added""\n\n* tag \'net-6.10-rc6\' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (61 commits)\n  net: mana: Fix possible double free in error handling path\n  selftest: af_unix: Check SIOCATMARK after every send()/recv() in msg_oob.c.\n  af_unix: Fix wrong ioctl(SIOCATMARK) when consumed OOB skb is at the head.\n  selftest: af_unix: Check EPOLLPRI after every send()/recv() in msg_oob.c\n  selftest: af_unix: Check SIGURG after every send() in msg_oob.c\n  selftest: af_unix: Add SO_OOBINLINE test cases in msg_oob.c\n  af_unix: Don\'t stop recv() at consumed ex-OOB skb.\n  selftest: af_unix: Add non-TCP-compliant test cases in msg_oob.c.\n  af_unix: Don\'t stop recv(MSG_DONTWAIT) if consumed OOB skb is at the head.\n  af_unix: Stop recv(MSG_PEEK) at consumed OOB skb.\n  selftest: af_unix: Add msg_oob.c.\n  selftest: af_unix: Remove test_unix_oob.c.\n  tracing/net_sched: NULL pointer dereference in perf_trace_qdisc_reset()\n  netfilter: nf_tables: fully validate NFT_DATA_VALUE on store to data registers\n  net: usb: qmi_wwan: add Telit FN912 compositions\n  tcp: fix tcp_rcv_fastopen_synack() to enter TCP_CA_Loss for failed TFO\n  ionic: use dev_consume_skb_any outside of napi\n  net: dsa: microchip: fix wrong register write when masking interrupt\n  Fix race for duplicate reqsk on identical SYN\n  ibmvnic: Add tx check to prevent skb leak\n  ...\n', '']",This commit merges networking fixes addressing regressions in the kernel from the netdev and netfilter repositories.,"networking, fixes, regressions",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.","[""It's not related to any of the above.""]"
7e1f4eb9a60d40dd17a97d9b76818682a024a127,7e1f4eb9a60d40dd17a97d9b76818682a024a127,Arnd Bergmann,arnd@arndb.de,1712225094,Arnd Bergmann,arnd@arndb.de,1719503020,3d0fcf4996760f07141da85cab2629edc2859cfd,0fa8ab5f3533b307a7d0e438ab08ecd92725dad7,"kallsyms: rework symbol lookup return codes

Building with W=1 in some configurations produces a false positive
warning for kallsyms:

kernel/kallsyms.c: In function '__sprint_symbol.isra':
kernel/kallsyms.c:503:17: error: 'strcpy' source argument is the same as destination [-Werror=restrict]
  503 |                 strcpy(buffer"," name);
      |                 ^~~~~~~~~~~~~~~~~~~~

This originally showed up while building with -O3","[' but later started\nhappening in other configurations as well', "" depending on inlining\ndecisions. The underlying issue is that the local 'name' variable is\nalways initialized to the be the same as 'buffer' in the called functions\nthat fill the buffer"", ' which gcc notices while inlining', ' though it could\nsee that the address check always skips the copy.\n\nThe calling conventions here are rather unusual', ' as all of the internal\nlookup functions (bpf_address_lookup', ' ftrace_mod_address_lookup', '\nftrace_func_address_lookup', ' module_address_lookup and\nkallsyms_lookup_buildid) already use the provided buffer and either return\nthe address of that buffer to indicate success', ' or NULL for failure', '\nbut the callers are written to also expect an arbitrary other buffer\nto be returned.\n\nRework the calling conventions to return the length of the filled buffer\ninstead of its address', ' which is simpler and easier to follow as well\nas avoiding the warning. Leave only the kallsyms_lookup() calling conventions\nunchanged', ' since that is called from 16 different functions and\nadapting this would be a much bigger change.\n\nLink: https://lore.kernel.org/lkml/20200107214042.855757-1-arnd@arndb.de/\nLink: https://lore.kernel.org/lkml/20240326130647.7bfb1d92@gandalf.local.home/\nTested-by: Geert Uytterhoeven <geert+renesas@glider.be>\nReviewed-by: Luis Chamberlain <mcgrof@kernel.org>\nAcked-by: Steven Rostedt (Google) <rostedt@goodmis.org>\nSigned-off-by: Arnd Bergmann <arnd@arndb.de>\n', '']",Reworked symbol lookup return codes to fix a false positive warning in kallsyms when built with W=1.,"kallsyms, symbol lookup, warning",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
d3e15189bfd4d0a9d3a7ad8bd0e6ebb1c0419f93,d3e15189bfd4d0a9d3a7ad8bd0e6ebb1c0419f93,Benjamin Tissoires,bentiss@kernel.org,1719409594,Benjamin Tissoires,bentiss@kernel.org,1719478849,45b1e0d1caf75a76d8681dfe160e53723a1f5924,62f2e1a096cd4380eca7e55fa4369d50a8536ab8,"selftests/hid: add an infinite loop test for hid_bpf_try_input_report

We don't want this call to allow an infinite loop in HID-BPF"," so let's
have some tests.

Link: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-13-cfd60fb6c79f@kernel.org
Acked-by: Jiri Kosina <jkosina@suse.com>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Add infinite loop test case for hid_bpf_try_input_report in HID selftests.,"infinite loop, HID, tests",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['HID driver like programs']
62f2e1a096cd4380eca7e55fa4369d50a8536ab8,62f2e1a096cd4380eca7e55fa4369d50a8536ab8,Benjamin Tissoires,bentiss@kernel.org,1719409593,Benjamin Tissoires,bentiss@kernel.org,1719478849,b4f4f85a90067429956836d040b6ba21ef7b3f4f,9acbb7ba4589d4715141d4e14230a828ddc95f3d,"selftests/hid: add another test for injecting an event from an event hook

Similar to test_multiply_events_wq: we receive one event and inject a
new one. But given that this time we are already in the event hook"," we
can use hid_bpf_try_input_report() directly as this function will not
sleep.

Note that the injected event gets processed before the original one this
way.

Link: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-12-cfd60fb6c79f@kernel.org
Acked-by: Jiri Kosina <jkosina@suse.com>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Add a selftest for event injection in HID drivers using an event hook.,"selftest,HID,event injection",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['HID driver like programs']
9acbb7ba4589d4715141d4e14230a828ddc95f3d,9acbb7ba4589d4715141d4e14230a828ddc95f3d,Benjamin Tissoires,bentiss@kernel.org,1719409592,Benjamin Tissoires,bentiss@kernel.org,1719478848,f1abe2c3dd3329e90a07850a79c0cdf20466c8d1,fe8d561db3e82a1130c59ebc143d557b0bdb0cff,"HID: bpf: allow hid_device_event hooks to inject input reports on self

This is the same logic than hid_hw_raw_request or hid_hw_output_report:
we can allow hid_bpf_try_input_report to be called from a hook on
hid_input_report if we ensure that the call can not be made twice in a
row.

There is one extra subtlety in which there is a lock in hid_input_report.
But given that we can detect if we are already in the hook"," we can notify
hid_input_report to not take the lock. This is done by checking if
ctx_kern data is valid or null","[' and if it is equal to the dedicated\nincoming data buffer.\n\nIn order to have more control on whether the lock needs to be taken or not\nwe introduce a new kfunc for it: hid_bpf_try_input_report()\n\nLink: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-11-cfd60fb6c79f@kernel.org\nAcked-by: Jiri Kosina <jkosina@suse.com>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']","The commit allows HID BPF hooks to inject input reports on the device itself, ensuring no repeated calls.","HID, input, hook",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
fe8d561db3e82a1130c59ebc143d557b0bdb0cff,fe8d561db3e82a1130c59ebc143d557b0bdb0cff,Benjamin Tissoires,bentiss@kernel.org,1719409591,Benjamin Tissoires,bentiss@kernel.org,1719478848,8fe5ee74baf94901735e754336b6fd91b1cd1b2d,fa03f398a8ac46f46927e0b509b302ebe0ed7e8a,"selftests/hid: add wq test for hid_bpf_input_report()

Now that bpf_wq is available"," we can write a test with it. Having
hid_bpf_input_report() waiting for the device means that we can
directly call it","[' and we get that event when the device is ready.\n\nLink: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-10-cfd60fb6c79f@kernel.org\nAcked-by: Jiri Kosina <jkosina@suse.com>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Add selftest for hid_bpf_input_report using bpf_wq in HID driver.,"selftests,hid_bpf_input_report,bpf_wq",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['HID driver like programs']
fa03f398a8ac46f46927e0b509b302ebe0ed7e8a,fa03f398a8ac46f46927e0b509b302ebe0ed7e8a,Benjamin Tissoires,bentiss@kernel.org,1719409590,Benjamin Tissoires,bentiss@kernel.org,1719478848,0a6577f9023e66ff6e8c01317775f865958fc781,3ac83fcd6e67c86d25040e6818972f2c36b51d23,"HID: bpf: make hid_bpf_input_report() sleep until the device is ready

hid_bpf_input_report() is already marked to be used in sleepable context
only. So instead of hammering with timers the device to hopefully get
an available slot where the device is not sending events"," we can make
that kfunc wait for the current event to be terminated before it goes in.

This allows to work with the following pseudo code:

in struct_ops/hid_device_event:
  - schedule a bpf_wq","[' which calls hid_bpf_input_report()\n  - once this struct_ops function terminates', ' hid_bpf_input_report()\n    immediately starts before the next event\n\nLink: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-9-cfd60fb6c79f@kernel.org\nAcked-by: Jiri Kosina <jkosina@suse.com>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",The commit modifies hid_bpf_input_report() to wait until the device is ready.,"HID,sleep,context",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,['HID driver like programs']
3ac83fcd6e67c86d25040e6818972f2c36b51d23,3ac83fcd6e67c86d25040e6818972f2c36b51d23,Benjamin Tissoires,bentiss@kernel.org,1719409589,Benjamin Tissoires,bentiss@kernel.org,1719478848,d87be489e8b112eab85ead9ca28cd04df31fad3c,9286675a2aed40a517be8cc4e283a04f473275b5,"selftests/hid: add tests for hid_hw_output_report HID-BPF hooks

We add 3 new tests:
- first"," we make sure we can prevent the output_report to happen
- second","[' we make sure that we can detect that a given hidraw client\n  was actually doing the request', ' and for that client only', ' call ourself\n  hid_bpf_hw_output_report()', ' returning a custom value\n- last', ' we ensure that we can not loop between hooks for\n  hid_hw_output_report() and manual calls to hid_bpf_hw_output_report()\n  from that same hook\n\nLink: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-8-cfd60fb6c79f@kernel.org\nAcked-by: Jiri Kosina <jkosina@suse.com>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Added three new selftests for hid_hw_output_report HID-BPF hooks.,"selftests,hid,BPF",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['HID driver like programs']
9286675a2aed40a517be8cc4e283a04f473275b5,9286675a2aed40a517be8cc4e283a04f473275b5,Benjamin Tissoires,bentiss@kernel.org,1719409588,Benjamin Tissoires,bentiss@kernel.org,1719478845,9d32d1f847856d770a8c7374cc278ea91b6dbb73,015a4a2a439b285943da471d38b2721bbe4d8b39,"HID: bpf: add HID-BPF hooks for hid_hw_output_report

Same story than hid_hw_raw_requests:

This allows to intercept and prevent or change the behavior of
hid_hw_output_report() from a bpf program.

The intent is to solve a couple of use case:
  - firewalling a HID device: a firewall can monitor who opens the hidraw
    nodes and then prevent or allow access to write operations on that
    hidraw node.
  - change the behavior of a device and emulate a new HID feature request

The hook is allowed to be run as sleepable so it can itself call
hid_hw_output_report()"," which allows to ""convert"" one feature request into
another or even call the feature request on a different HID device on the
same physical device.

Link: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-7-cfd60fb6c79f@kernel.org
Acked-by: Jiri Kosina <jkosina@suse.com>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],The commit introduces HID-BPF hooks for intercepting and modifying hid_hw_output_report behaviors.,"HID-BPF, hooks, intercept",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['HID driver like programs']
015a4a2a439b285943da471d38b2721bbe4d8b39,015a4a2a439b285943da471d38b2721bbe4d8b39,Benjamin Tissoires,bentiss@kernel.org,1719409587,Benjamin Tissoires,bentiss@kernel.org,1719478812,a3d840ad28df57e4e9bab80e8b57ba6289863fb0,75839101ce52e319cb2154a027d14f1f0aa3be09,"selftests/hid: add tests for hid_hw_raw_request HID-BPF hooks

We add 3 new tests:
- first"," we make sure we can prevent the raw_request to happen
- second","[' we make sure that we can detect that a given hidraw client\n  was actually doing the request', ' and for that client only', ' call ourself\n  hid_bpf_hw_request()', ' returning a custom value\n- last', ' we ensure that we can not loop between hooks for\n  hid_hw_raw_request() and manual calls to hid_bpf_hw_request() from that\n  hook\n\nLink: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-6-cfd60fb6c79f@kernel.org\nAcked-by: Jiri Kosina <jkosina@suse.com>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Added self-tests for HID-BPF hooks using hid_hw_raw_request.,"self-tests,HID-BPF,hooks",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['HID driver like programs']
75839101ce52e319cb2154a027d14f1f0aa3be09,75839101ce52e319cb2154a027d14f1f0aa3be09,Benjamin Tissoires,bentiss@kernel.org,1719409586,Benjamin Tissoires,bentiss@kernel.org,1719478812,37b05cb095474429cd80940e2c7b2e6d6d3a92a7,8bd0488b5ea58655ad6fdcbe0408ef49b16882b1,"HID: bpf: prevent infinite recursions with hid_hw_raw_requests hooks

When we attach a sleepable hook to hid_hw_raw_requests"," we can (and in
many cases should) call ourself hid_bpf_raw_request()","[' to actually fetch\ndata from the device itself.\n\nHowever', ' this means that we might enter an infinite loop between\nhid_hw_raw_requests hooks and hid_bpf_hw_request() call.\n\nTo prevent that', ' if a hid_bpf_hw_request() call is emitted', ' we prevent\nany new call of this kfunc by storing the information in the context.\nThis way we can always trace/monitor/filter the incoming bpf requests', '\nwhile preventing those loops to happen.\n\nI don\'t think exposing ""from_bpf"" is very interesting because while\nwriting such a bpf program', ' you need to match at least the report number\nand/or the source of the call. So a blind ""if there is a\nhid_hw_raw_request() call', ' I\'m emitting another one"" makes no real\nsense.\n\nLink: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-5-cfd60fb6c79f@kernel.org\nAcked-by: Jiri Kosina <jkosina@suse.com>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Prevent infinite recursion in HID BPF raw requests with sleepable hooks.,"HID,BPF,infinite recursion",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
8bd0488b5ea58655ad6fdcbe0408ef49b16882b1,8bd0488b5ea58655ad6fdcbe0408ef49b16882b1,Benjamin Tissoires,bentiss@kernel.org,1719409585,Benjamin Tissoires,bentiss@kernel.org,1719478807,490b7e0108d826a9711f6796881ac1ce5d350748,6cd735f0e57a6c8510ad92f5b63837a8d0cff3a7,"HID: bpf: add HID-BPF hooks for hid_hw_raw_requests

This allows to intercept and prevent or change the behavior of
hid_hw_raw_request() from a bpf program.

The intent is to solve a couple of use case:
- firewalling a HID device: a firewall can monitor who opens the hidraw
  nodes and then prevent or allow access to write operations on that
  hidraw node.
- change the behavior of a device and emulate a new HID feature request

The hook is allowed to be run as sleepable so it can itself call
hid_bpf_hw_request()"," which allows to ""convert"" one feature request into
another or even call the feature request on a different HID device on the
same physical device.

Link: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-4-cfd60fb6c79f@kernel.org
Acked-by: Jiri Kosina <jkosina@suse.com>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Added HID-BPF hooks to intercept and modify hid_hw_raw_requests.,"HID-BPF,hooks,intercept",It's a new feature.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['HID driver like programs']
6cd735f0e57a6c8510ad92f5b63837a8d0cff3a7,6cd735f0e57a6c8510ad92f5b63837a8d0cff3a7,Benjamin Tissoires,bentiss@kernel.org,1719409584,Benjamin Tissoires,bentiss@kernel.org,1719478702,dcd4c66314d7a4fedf3438f199f34ddc24bcf3db,67eccf151d76a9939ad8a50c6db5cb486b01df24,"HID: bpf: protect HID-BPF prog_list access by a SRCU

We want to add sleepable callbacks for hid_hw_raw_request() and
hid_hw_output_report()"," but we can not use a plain RCU for those.

Prepare for a SRCU so we can extend HID-BPF.

This changes a little bit how hid_bpf_device_init() behaves","[' as it may\nnow fail', ' so there is a tiny hid-core.c change to accommodate for this.\n\nLink: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-3-cfd60fb6c79f@kernel.org\nAcked-by: Jiri Kosina <jkosina@suse.com>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Introduce SRCU to protect HID-BPF prog_list access and enable sleepable callbacks for certain HID functions.,"SRCU,HID-BPF,callbacks",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['HID driver like programs']
67eccf151d76a9939ad8a50c6db5cb486b01df24,67eccf151d76a9939ad8a50c6db5cb486b01df24,Benjamin Tissoires,bentiss@kernel.org,1719409583,Benjamin Tissoires,bentiss@kernel.org,1719478699,1a2b0d02140df64b820dded3ccc511d38d47ee1d,ebae0b2a6f4b3b949f30f076fbc65d3b0bb04785,"HID: add source argument to HID low level functions

This allows to know who actually sent what when we process the request
to the device.
This will be useful for a BPF firewall program to allow or not requests
coming from a dedicated hidraw node client.

Link: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-2-cfd60fb6c79f@kernel.org
Acked-by: Jiri Kosina <jkosina@suse.com>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,Added a source argument to HID low-level functions for BPF firewall use in managing requests.,"HID,BPF,firewall",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['HID driver like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
ebae0b2a6f4b3b949f30f076fbc65d3b0bb04785,ebae0b2a6f4b3b949f30f076fbc65d3b0bb04785,Benjamin Tissoires,bentiss@kernel.org,1719409582,Benjamin Tissoires,bentiss@kernel.org,1719478680,8ec96bb7ba7659ab7bb01c1c20f02c96547e3895,9e16bada9299d74fcce1f6b03606a08a2c16da81,"HID: bpf: fix dispatch_hid_bpf_device_event uninitialized ret value

Looks like if a bpf program gets inserted and then removed","
hdev->bpf.device_data is then allocated","[' but the loop iterating\nover the bpf program is never assigning ret.\n\nThis is a problem and also revealed another bug in which only the last\nvalue of ret was checked. This effectively meant than only the last\nprogram in the chain could change the size of the incoming buffer.\n\nReported-by: Dan Carpenter <dan.carpenter@linaro.org>\nLink: https://lore.kernel.org/all/00f7b624-219f-4a05-a7ad-5335f15a41c7@moroto.mountain\nFixes: 4a86220e046d (""HID: bpf: remove tracing HID-BPF capability"")\nLink: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-1-cfd60fb6c79f@kernel.org\nAcked-by: Jiri Kosina <jkosina@suse.com>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Fixes uninitialized return value in dispatch_hid_bpf_device_event function.,"fix, HID, uninitialized",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
9e16bada9299d74fcce1f6b03606a08a2c16da81,9e16bada9299d74fcce1f6b03606a08a2c16da81,Luis Felipe Hernandez,luis.hernandez093@gmail.com,1719312951,Benjamin Tissoires,bentiss@kernel.org,1719472900,2f62154f000db726b9b45ee5d696427cfdd8e98c,33c0fb85b571b0f1bbdbf466e770eebeb29e6f41,"hid: bpf: Fix grammar

* spelling fix: XBox -> Xbox"," lowercase 'b' as per Microsoft branding
* rephrase: paddle -> paddles","[' the controller itself has more than one paddle\n* rephrase: replace usage of ""those"" in favor of explicitly making reference\n  to the paddles\n* grammatical fix: report -> reports', ' use present tense verb.\n* spelling fix: interpret\n* consistency: capitalize the first word in bullet points\n\nSigned-off-by: Luis Felipe Hernandez <luis.hernandez093@gmail.com>\nLink: https://patch.msgid.link/20240625105553.50830-1-luis.hernandez093@gmail.com\n[bentiss: renamed the file into Xbox', ' not XBox]\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']","This commit fixes grammatical and spelling issues in the HID BPF documentation, including correct branding of Xbox.","grammar, spelling, Xbox",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The helper and kfuncs,['HID driver like programs']
a12978712d9001b060bcc10eaae42ad5102abe2b,a12978712d9001b060bcc10eaae42ad5102abe2b,Jiri Olsa,jolsa@kernel.org,1719409639,Andrii Nakryiko,andrii@kernel.org,1719446923,f7cf650d7a7f376dbe77e64b7074670296a95006,0f31c2c61f6923747628c65a0fe36b2d4d7e21b0,"selftests/bpf: Move ARRAY_SIZE to bpf_misc.h

ARRAY_SIZE is used on multiple places"," move its definition in
bpf_misc.h header.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Alan Maguire <alan.maguire@oracle.com>
Link: https://lore.kernel.org/bpf/20240626134719.3893748-1-jolsa@kernel.org
",[''],The commit moves ARRAY_SIZE definition to bpf_misc.h to centralize its usage.,"ARRAY_SIZE, bpf_misc.h, selftests",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
0f31c2c61f6923747628c65a0fe36b2d4d7e21b0,0f31c2c61f6923747628c65a0fe36b2d4d7e21b0,Alan Maguire,alan.maguire@oracle.com,1719257343,Andrii Nakryiko,andrii@kernel.org,1719445139,12f2bebc7c7747f1b0c4a3f4e956c808bf1a22bd,d07980f7373b4c57c85478f8e815cc7b9b394c05,"libbpf: Fix clang compilation error in btf_relocate.c

When building with clang for ARCH=i386"," the following errors are
observed:

  CC      kernel/bpf/btf_relocate.o
./tools/lib/bpf/btf_relocate.c:206:23: error: implicit truncation from 'int' to a one-bit wide bit-field changes value from 1 to -1 [-Werror","[""-Wsingle-bit-bitfield-constant-conversion]\n  206 |                 info[id].needs_size = true;\n      |                                     ^ ~\n./tools/lib/bpf/btf_relocate.c:256:25: error: implicit truncation from 'int' to a one-bit wide bit-field changes value from 1 to -1 [-Werror"", '-Wsingle-bit-bitfield-constant-conversion]\n  256 |                         base_info.needs_size = true;\n      |                                              ^ ~\n2 errors generated.\n\nThe problem is we use 1-bit', ' 31-bit bitfields in a signed int.\nChanging to\n\n\tbool needs_size: 1;\n\tunsigned int size:31;\n\n...resolves the error and pahole reports that 4 bytes are used\nfor the underlying representation:\n\n$ pahole btf_name_info tools/lib/bpf/btf_relocate.o\nstruct btf_name_info {\n\tconst char  *              name;                 /*     0     8 */\n\tunsigned int               needs_size:1;         /*     8: 0  4 */\n\tunsigned int               size:31;              /*     8: 1  4 */\n\t__u32                      id;                   /*    12     4 */\n\n\t/* size: 16', ' cachelines: 1', ' members: 4 */\n\t/* last cacheline: 16 bytes */\n};\n\nSigned-off-by: Alan Maguire <alan.maguire@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240624192903.854261-1-alan.maguire@oracle.com\n', '']",Fixed a clang compilation error in btf_relocate.c for i386 architecture.,"clang, compilation, btf_relocate.c",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d07980f7373b4c57c85478f8e815cc7b9b394c05,d07980f7373b4c57c85478f8e815cc7b9b394c05,Ma Ke,make24@iscas.ac.cn,1719148673,Andrii Nakryiko,andrii@kernel.org,1719445019,ff6d8308e02da9c27c0e04ec2e8d4b2934ee74e0,aa293983d2020390e286544b120f3cd0a3d40749,"selftests/bpf: Don't close(-1) in serial_test_fexit_stress()

Guard close() with extra link_fd[i] > 0 and fexit_fd[i] > 0
check to prevent close(-1).

Signed-off-by: Ma Ke <make24@iscas.ac.cn>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240623131753.2133829-1-make24@iscas.ac.cn
",,Add checks to prevent closing file descriptors with invalid values in fexit_stress test.,"close, file descriptors, serial_test_fexit_stress",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['other']
aa293983d2020390e286544b120f3cd0a3d40749,aa293983d2020390e286544b120f3cd0a3d40749,Matt Bobrowski,mattbobrowski@google.com,1719296937,Alexei Starovoitov,ast@kernel.org,1719433052,a62f7dab25bae1f0f0ccd09e75b75c85ff97e2e7,ec2b9a5e11e51fea1bb04c1e7e471952e887e874,"bpf: add new negative selftests to cover missing check_func_arg_reg_off() and reg->type check

Add new negative selftests which are intended to cover the
out-of-bounds memory access that could be performed on a
CONST_PTR_TO_DYNPTR within functions taking a ARG_PTR_TO_DYNPTR |
MEM_RDONLY as an argument"," and acceptance of invalid register types
i.e. PTR_TO_BTF_ID within functions taking a ARG_PTR_TO_DYNPTR |
MEM_RDONLY.

Reported-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Matt Bobrowski <mattbobrowski@google.com>
Link: https://lore.kernel.org/r/20240625062857.92760-2-mattbobrowski@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Added new negative selftests to check out-of-bounds access and invalid register types in eBPF functions.,"negative selftests,bpf,eBPF",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
ec2b9a5e11e51fea1bb04c1e7e471952e887e874,ec2b9a5e11e51fea1bb04c1e7e471952e887e874,Matt Bobrowski,mattbobrowski@google.com,1719296936,Alexei Starovoitov,ast@kernel.org,1719433052,caf0d8d6b39f99dd62c24f1551521599b779fc65,d65f3767de20782e75d8a665fdc54f822f344802,"bpf: add missing check_func_arg_reg_off() to prevent out-of-bounds memory accesses

Currently"," it's possible to pass in a modified CONST_PTR_TO_DYNPTR to
a global function as an argument. The adverse effects of this is that
BPF helpers can continue to make use of this modified
CONST_PTR_TO_DYNPTR from within the context of the global function","['\nwhich can unintentionally result in out-of-bounds memory accesses and\ntherefore compromise overall system stability i.e.\n\n[  244.157771] BUG: KASAN: slab-out-of-bounds in bpf_dynptr_data+0x137/0x140\n[  244.161345] Read of size 8 at addr ffff88810914be68 by task test_progs/302\n[  244.167151] CPU: 0 PID: 302 Comm: test_progs Tainted: G O E 6.10.0-rc3-00131-g66b586715063 #533\n[  244.174318] Call Trace:\n[  244.175787]  <TASK>\n[  244.177356]  dump_stack_lvl+0x66/0xa0\n[  244.179531]  print_report+0xce/0x670\n[  244.182314]  ? __virt_addr_valid+0x200/0x3e0\n[  244.184908]  kasan_report+0xd7/0x110\n[  244.187408]  ? bpf_dynptr_data+0x137/0x140\n[  244.189714]  ? bpf_dynptr_data+0x137/0x140\n[  244.192020]  bpf_dynptr_data+0x137/0x140\n[  244.194264]  bpf_prog_b02a02fdd2bdc5fa_global_call_bpf_dynptr_data+0x22/0x26\n[  244.198044]  bpf_prog_b0fe7b9d7dc3abde_callback_adjust_bpf_dynptr_reg_off+0x1f/0x23\n[  244.202136]  bpf_user_ringbuf_drain+0x2c7/0x570\n[  244.204744]  ? 0xffffffffc0009e58\n[  244.206593]  ? __pfx_bpf_user_ringbuf_drain+0x10/0x10\n[  244.209795]  bpf_prog_33ab33f6a804ba2d_user_ringbuf_callback_const_ptr_to_dynptr_reg_off+0x47/0x4b\n[  244.215922]  bpf_trampoline_6442502480+0x43/0xe3\n[  244.218691]  __x64_sys_prlimit64+0x9/0xf0\n[  244.220912]  do_syscall_64+0xc1/0x1d0\n[  244.223043]  entry_SYSCALL_64_after_hwframe+0x77/0x7f\n[  244.226458] RIP: 0033:0x7ffa3eb8f059\n[  244.228582] Code: 08 89 e8 5b 5d c3 66 2e 0f 1f 84 00 00 00 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 8f 1d 0d 00 f7 d8 64 89 01 48\n[  244.241307] RSP: 002b:00007ffa3e9c6eb8 EFLAGS: 00000206 ORIG_RAX: 000000000000012e\n[  244.246474] RAX: ffffffffffffffda RBX: 00007ffa3e9c7cdc RCX: 00007ffa3eb8f059\n[  244.250478] RDX: 00007ffa3eb162b4 RSI: 0000000000000000 RDI: 00007ffa3e9c7fb0\n[  244.255396] RBP: 00007ffa3e9c6ed0 R08: 00007ffa3e9c76c0 R09: 0000000000000000\n[  244.260195] R10: 0000000000000000 R11: 0000000000000206 R12: ffffffffffffff80\n[  244.264201] R13: 000000000000001c R14: 00007ffc5d6b4260 R15: 00007ffa3e1c7000\n[  244.268303]  </TASK>\n\nAdd a check_func_arg_reg_off() to the path in which the BPF verifier\nverifies the arguments of global function arguments', ' specifically\nthose which take an argument of type ARG_PTR_TO_DYNPTR |\nMEM_RDONLY. Also', "" process_dynptr_func() doesn't appear to perform any\nexplicit and strict type matching on the supplied register type"", "" so\nlet's also enforce that a register either type PTR_TO_STACK or\nCONST_PTR_TO_DYNPTR is by the caller.\n\nReported-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>\nAcked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nSigned-off-by: Matt Bobrowski <mattbobrowski@google.com>\nLink: https://lore.kernel.org/r/20240625062857.92760-1-mattbobrowski@google.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n"", '']",Add missing check in BPF to prevent out-of-bounds memory access with CONST_PTR_TO_DYNPTR.,check memory access,It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
e8b86f0311a4b721663df8105a680e5968f21d4c,e8b86f0311a4b721663df8105a680e5968f21d4c,Veronika Molnarova,vmolnaro@redhat.com,1719307201,Namhyung Kim,namhyung@kernel.org,1719425458,6710d07c0320d4a045e58b993ee775ad5a706de4,e4b19e2cc3e5f9be8f159ba0b4ba6aed8d993abf,"perf test stat_bpf_counter.sh: Stabilize the test results

The test has been failing for some time when two separate runs of
perf benchmarks are recorded for cycles events and their counts are
compared"," while once the recording was done with option --bpf-counters
and once without it. It is expected that the count of the samples
should be within a certain range","[' firstly the difference was set to be\nwithin 10%', ' which was then later raised to 20%. However', ' the test case\nkeeps failing on certain architectures as recording the provided\nbenchmark can produce completely different counts based on the\ncurrent load of the system.\n\nSampling two separate runs on intel-eaglestream-spr-13 of ""perf stat\n--no-big-num -e cycles -- perf bench sched messaging -g 1 -l 100 -t"":\n\n Performance counter stats for \'perf bench sched messaging -g 1 -l 100 -t\':\n\n         396782898      cycles\n\n       0.010051983 seconds time elapsed\n\n       0.008664000 seconds user\n       0.097058000 seconds sys\n\n Performance counter stats for \'perf bench sched messaging -g 1 -l 100 -t\':\n\n        1431133032      cycles\n\n       0.021803714 seconds time elapsed\n\n       0.023377000 seconds user\n       0.349918000 seconds sys\n\n', ' which is ranging from 400mil to 1400mil samples.\n\nInstead of recording the cycles use instructions event', ' which provides\nmore stable values. At the same time change the tested workload to one\nof the provided testing workloads by perf that is not based on a\nscheduler', ' which can provide another dependency on the current load.\n\nSampling instructions event with the new workload provide much more\nstable results on intel-eaglestream-spr-13 of ""perf stat --no-big-num\n-e instructions -- perf test -w brstack"":\n\n Performance counter stats for \'perf test -w brstack\':\n\n          64584494      instructions\n\n       0.009173945 seconds time elapsed\n\n       0.007262000 seconds user\n       0.002071000 seconds sys\n\n Performance counter stats for \'perf test -w brstack\':\n\n          64672669      instructions\n\n       0.008888135 seconds time elapsed\n\n       0.005018000 seconds user\n       0.004018000 seconds sys\n\nSigned-off-by: Veronika Molnarova <vmolnaro@redhat.com>\nAcked-by: Namhyung Kim <namhyung@kernel.org>\nCc: mpetlan@redhat.com\nSigned-off-by: Namhyung Kim <namhyung@kernel.org>\nLink: https://lore.kernel.org/r/20240625092001.10909-1-vmolnaro@redhat.com\n', '']",The commit stabilizes test results for perf's stat_bpf_counter.sh by ensuring cycle event counts match expectations with and without --bpf-counters.,"stabilize,test results,perf",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['tracepoints like programs']
9dabf4003423c8d3a2f4f8915c3ff2f1158302a0,9dabf4003423c8d3a2f4f8915c3ff2f1158302a0,Ian Rogers,irogers@google.com,1719351676,Namhyung Kim,namhyung@kernel.org,1719425280,70e4e86569bf3a9ee1b0ea1dd03a55e21546619c,e467705a9fb37f51595aa6deaca085ccb4005454,"perf python: Switch module to linking libraries from building source

setup.py was building most perf sources causing setup.py to mimic the
Makefile logic as well as flex/bison code to be stubbed out"," due to
complexity building. By using libraries fewer functions are stubbed
out","[' the build is faster and the Makefile logic is reused which should\nsimplify updating. The libraries are passed through LDFLAGS to avoid\ncomplexity in python.\n\nForce the -fPIC flag for libbpf.a to ensure it is suitable for linking\ninto the perf python module.\n\nSigned-off-by: Ian Rogers <irogers@google.com>\nReviewed-by: James Clark <james.clark@arm.com>\nCc: Suzuki K Poulose <suzuki.poulose@arm.com>\nCc: Kees Cook <keescook@chromium.org>\nCc: Palmer Dabbelt <palmer@dabbelt.com>\nCc: Albert Ou <aou@eecs.berkeley.edu>\nCc: Nick Terrell <terrelln@fb.com>\nCc: Gary Guo <gary@garyguo.net>\nCc: Alex Gaynor <alex.gaynor@gmail.com>\nCc: Boqun Feng <boqun.feng@gmail.com>\nCc: Wedson Almeida Filho <wedsonaf@gmail.com>\nCc: Ze Gao <zegao2021@gmail.com>\nCc: Alice Ryhl <aliceryhl@google.com>\nCc: Andrei Vagin <avagin@google.com>\nCc: Yicong Yang <yangyicong@hisilicon.com>\nCc: Jonathan Cameron <jonathan.cameron@huawei.com>\nCc: Guo Ren <guoren@kernel.org>\nCc: Miguel Ojeda <ojeda@kernel.org>\nCc: Will Deacon <will@kernel.org>\nCc: Mike Leach <mike.leach@linaro.org>\nCc: Leo Yan <leo.yan@linux.dev>\nCc: Oliver Upton <oliver.upton@linux.dev>\nCc: John Garry <john.g.garry@oracle.com>\nCc: Benno Lossin <benno.lossin@proton.me>\nCc: Björn Roy Baron <bjorn3_gh@protonmail.com>\nCc: Andreas Hindborg <a.hindborg@samsung.com>\nCc: Paul Walmsley <paul.walmsley@sifive.com>\nSigned-off-by: Namhyung Kim <namhyung@kernel.org>\nLink: https://lore.kernel.org/r/20240625214117.953777-8-irogers@google.com\n', '']",Switch perf Python module to link libraries instead of building from source for reduced complexity.,"perf, libraries, setup.py",It's a build system or CI/CD change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.","[""It's not related to any of the above.""]"
60a6707f582ebbdfb6b378f45d7bf929106a1cd5,60a6707f582ebbdfb6b378f45d7bf929106a1cd5,Palmer Dabbelt,palmer@rivosinc.com,1719416587,Palmer Dabbelt,palmer@rivosinc.com,1719416587,390f5047c4d88299efa7b1b5c10fa68025cb1e5b,d6ecd188937fcddeffb37efc61b67a56809b266a 4705c1571ad39d9469321d2817faf4c4b78ddffb,"Merge patch series ""riscv: Memory Hot(Un)Plug support""

Björn Töpel <bjorn@kernel.org> says:

From: Björn Töpel <bjorn@rivosinc.com>

================================================================
Memory Hot(Un)Plug support (and ZONE_DEVICE) for the RISC-V port
================================================================

Introduction
============

To quote ""Documentation/admin-guide/mm/memory-hotplug.rst"": ""Memory
hot(un)plug allows for increasing and decreasing the size of physical
memory available to a machine at runtime.""

This series adds memory hot(un)plugging"," and ZONE_DEVICE support for
the RISC-V Linux port.

MM configuration
================

RISC-V MM has the following configuration:

 * Memory blocks are 128M","[' analogous to x86-64. It uses PMD\n   (""hugepage"") vmemmaps. From that follows that 2M (PMD) worth of\n   vmemmap spans 32768 pages á 4K which gets us 128M.\n\n * The pageblock size is the minimum minimum virtio_mem size', "" and on\n   RISC-V it's 2M (2^9 * 4K).\n\nImplementation\n==============\n\nThe PGD table on RISC-V is shared/copied between for all processes. To\navoid doing page table synchronization"", ' the first patch (patch 1)\npre-allocated the PGD entries for vmemmap/direct map. By doing that\nthe init_mm PGD will be fixed at kernel init', ' and synchronization can\nbe avoided all together.\n\nThe following two patches (patch 2-3) does some preparations', ' followed\nby the actual MHP implementation (patch 4-5). Then', ' MHP and virtio-mem\nare enabled (patch 6-7)', ' and finally ZONE_DEVICE support is added\n(patch 8).\n\nMHP and locking\n===============\n\nTL;DR: The MHP does not step on any toes', ' except for ptdump.\nAdditional locking is required for ptdump.\n\nLong version: For v2 I spent some time digging into init_mm\nsynchronization/update. Here are my findings', ' and I\'d love them to be\ncorrected if incorrect.\n\nIt\'s been a gnarly path...\n\nThe `init_mm` structure is a special mm (perhaps not a ""real"" one).\nIt\'s a ""lazy context"" that tracks kernel page table resources', ' e.g.', '\nthe kernel page table (swapper_pg_dir)', ' a kernel page_table_lock (more\nabout the usage below)', ' mmap_lock', ' and such.\n\n`init_mm` does not track/contain any VMAs. Having the `init_mm` is\nconvenient', ' so that the regular kernel page table walk/modify\nfunctions can be used.\n\nNow', ' `init_mm` being special means that the locking for kernel page\ntables are special as well.\n\nOn RISC-V the PGD (top-level page table structure)', ' similar to x86', ' is\nshared (copied) with user processes. If the kernel PGD is modified', ' it\nhas to be synched to user-mode processes PGDs. This is avoided by\npre-populating the PGD', "" so it'll be fixed from boot.\n\nThe in-kernel pgd regions are documented in\n`Documentation/arch/riscv/vm-layout.rst`.\n\nThe distinct regions are:\n * vmemmap\n * vmalloc/ioremap space\n * direct mapping of all physical memory\n * kasan\n * modules"", ' BPF\n * kernel\n\nMemory hotplug is the process of adding/removing memory to/from the\nkernel.\n\nAdding is done in two phases:\n 1. Add the memory to the kernel\n 2. Online memory', ' making it available to the page allocator.\n\nStep 1 is partially architecture dependent', ' and updates the init_mm\npage table:\n * Update the direct map page tables. The direct map is a linear map', '\n   representing all physical memory: `virt = phys + PAGE_OFFSET`\n * Add a `struct page` for each added page of memory. Update the\n   vmemmap (virtual mapping to the `struct page`', ' so we can easily\n   transform a kernel virtual address to a `struct page *` address.\n\nFrom an MHP perspective', ' there are two regions of the PGD that are\nupdated:\n * vmemmap\n * direct mapping of all physical memory\n\nThe `struct mm_struct` has a couple of locks in play:\n * `spinlock_t page_table_lock` protects the page table', "" and some\n    counters\n * `struct rw_semaphore mmap_lock` protect an mm's VMAs\n\nNote again that `init_mm` does not contain any VMAs"", ' but still uses\nthe mmap_lock in some places.\n\nThe `page_table_lock` was originally used to to protect all pages\ntables', ' but more recently a split page table lock has been introduced.\nThe split lock has a per-table lock for the PTE and PMD tables. If\nsplit lock is disabled', ' all tables are guarded by\n`mm->page_table_lock` (for user processes). Split page table locks are\nnot used for init_mm.\n\nMHP operations is typically synchronized using\n`DEFINE_STATIC_PERCPU_RWSEM(mem_hotplug_lock)`.\n\nActors\n------\n\nThe following non-MHP actors in the kernel traverses (read)', ' and/or\nmodifies the kernel PGD.\n\n * `ptdump`\n\n   Walks the entire `init_mm`', ' via `ptdump_walk_pgd()` with the\n   `mmap_write_lock(init_mm)` taken.\n\n   Observation: ptdump can race with MHP', ' and needs additional locking\n   to avoid crashes/races.\n\n * `set_direct_*` / `arch/riscv/mm/pageattr.c`\n\n   The `set_direct_*` functionality is used to ""synchronize"" the\n   direct map to other kernel mappings', ' e.g. modules/kernel text. The\n   direct map is using ""as large huge table mappings as possible""', '\n   which means that the `set_direct_*` might need to split the direct\n   map.\n\n  The `set_direct_*` functions operates with the\n  `mmap_write_lock(init_mm)` taken.\n\n  Observation: `set_direct_*` uses the direct map', ' but will never\n  modify the same entry as MHP. If there is a mapping', ' that entry will\n  never race with MHP. Further', ' MHP acts when memory is offline.\n\n * HVO / `mm/hugetlb_vmemmap`\n\n   HVO optimizes the backing `struct page` for hugetlb pages', ' which\n   means changing the ""vmemmap"" region. HVO can split (merge?) a\n   vmemmap pmd. However', ' it will never race with MHP', ' since HVO only\n   operates at online memory. HVO cannot touch memory being MHP added\n   or removed.\n\n * `apply_to_page_range`\n\n   Walks a range', ' creates pages and applies a callback (setting\n   permissions) for the page.\n\n   When creating a table', ' it might use `int __pte_alloc_kernel(pmd_t\n   *pmd)` which takes the `init_mm.page_table_lock` to synchronize pmd\n   populate.\n\n   Used by: `mm/vmalloc.c` and `mm/kasan/shadow.c`. The KASAN callback\n   takes the `init_mm.page_table_lock` to synchronize pte creation.\n\n   Observations: `apply_to_page_range` applies to the ""vmalloc/ioremap\n   space"" region', ' and ""kasan"" region. *Not* affected by MHP.\n\n * `apply_to_existing_page_range`\n\n   Walks a range', ' applies a callback (setting permissions) for the\n   page (no page creation).\n\n   Used by: `kernel/bpf/arena.c` and `mm/kasan/shadow.c`. The KASAN\n   callback takes the `init_mm.page_table_lock` to synchronize pte\n   creation. *Not* affected by MHP regions.\n\n * `apply_to_existing_page_range` applies to the ""vmalloc/ioremap\n   space"" region', ' and ""kasan"" region. *Not* affected by MHP regions.\n\n *  `ioremap_page_range` and `vmap_page_range`\n\n    Uses the same internal function', ' and might create table entries at\n    the ""vmalloc/ioremap space"" region. Can call\n    `__pte_alloc_kernel()` which takes the `init_mm.page_table_lock`\n    synchronizing pmd populate in the region. *Not* affected by MHP\n    regions.\n\nSummary:\n  * MHP add will never modify the same page table entries', ' as any of\n    the other actors.\n  * MHP remove is done when memory is offlined', ' and will not clash\n    with any of the actors.\n  * Functions that walk the entire kernel page table need\n    synchronization\n\n  * It\'s sufficient to add the MHP lock ptdump.\n\nTesting\n=======\n\nThis series adds basic DT supported hotplugging. There is a QEMU\nseries enabling MHP for the RISC-V ""virt"" machine here: [1]\n\nACPI/MSI support is still in the making for RISC-V', ' and prior proper\n(ACPI) PCI MSI support lands [2] and NUMA SRAT support [3]', "" it hard to\ntry it out.\n\nI've prepared a QEMU branch with proper ACPI GED/PC-DIMM support [4]"", '\nand a this series with the required prerequisites [5] (AIA', ' ACPI AIA\nMADT', ' ACPI NUMA SRAT).\n\nTo test with virtio-mem', ' e.g.:\n  | qemu-system-riscv64 \\\n  |     -machine virt', 'aia=aplic-imsic \\\n  |     -cpu rv64', 'v=true', 'vlen=256', 'elen=64', 'h=true', 'zbkb=on', 'zbkc=on', 'zbkx=on', 'zkr=on', 'zkt=on', 'svinval=on', 'svnapot=on', 'svpbmt=on \\\n  |     -nodefaults \\\n  |     -nographic -smp 8 -kernel rv64-u-boot.bin \\\n  |     -drive file=rootfs.img', 'format=raw', 'if=virtio \\\n  |     -device virtio-rng-pci \\\n  |     -m 16G', 'slots=3', 'maxmem=32G \\\n  |     -object memory-backend-ram', 'id=mem0', 'size=16G \\\n  |     -numa node', 'nodeid=0', 'memdev=mem0 \\\n  |     -serial chardev:char0 \\\n  |     -mon chardev=char0', 'mode=readline \\\n  |     -chardev stdio', 'mux=on', 'id=char0 \\\n  |     -device pci-serial', 'id=serial0', 'chardev=char0 \\\n  |     -object memory-backend-ram', 'id=vmem0', 'size=2G \\\n  |     -device virtio-mem-pci', 'id=vm0', 'memdev=vmem0', 'node=0\n\nwhere ""rv64-u-boot.bin"" is U-boot with EFI/ACPI-support (use [6] if\nyou\'re lazy).\n\nIn the QEMU monitor:\n  | (qemu) info memory-devices\n  | (qemu) qom-set vm0 requested-size 1G\n\n...to test DAX/KMEM', ' use the follow QEMU parameters:\n  |  -object memory-backend-file', 'id=mem1', 'share=on', 'mem-path=virtio_pmem.img', 'size=4G \\\n  |  -device virtio-pmem-pci', 'memdev=mem1', ""id=nv1\n\nand the regular ndctl/daxctl dance.\n\nIf you're brave to try the ACPI branch"", ' add ""acpi=on"" to ""-machine\nvirt""', ' and test PC-DIMM MHP (in addition to virtio-{p}', 'mem):\n\nIn the QEMU monitor:\n  | (qemu) object_add memory-backend-ram', 'id=mem1', 'size=1G\n  | (qemu) device_add pc-dimm', 'id=dimm1', 'memdev=mem1\n\nYou can also try hot-remove with some QEMU options', ' say:\n  | -object memory-backend-file', 'id=mem-1', 'size=256M', 'mem-path=/pagesize-2MB\n  | -device pc-dimm', 'id=mem1', 'memdev=mem-1\n  | -object memory-backend-file', 'id=mem-2', 'size=1G', 'mem-path=/pagesize-1GB\n  | -device pc-dimm', 'id=mem2', 'memdev=mem-2\n  | -object memory-backend-file', 'id=mem-3', 'size=256M', 'mem-path=/pagesize-2MB\n  | -device pc-dimm', 'id=mem3', 'memdev=mem-3\n\nRemove ""acpi=on"" to run with DT.\n\nThanks to Alex', ' Andrew', ' David', ' and Oscar for all\ncomments/tests/fixups.\n\nReferences\n==========\n\n[1] https://lore.kernel.org/qemu-devel/20240521105635.795211-1-bjorn@kernel.org/\n[2] https://lore.kernel.org/linux-riscv/20240501121742.1215792-1-sunilvl@ventanamicro.com/\n[3] https://lore.kernel.org/linux-riscv/cover.1713778236.git.haibo1.xu@intel.com/\n[4] https://github.com/bjoto/qemu/commits/virtio-mem-pc-dimm-mhp-acpi-v2/\n[5] https://github.com/bjoto/linux/commits/mhp-v4-acpi\n[6] https://github.com/bjoto/riscv-rootfs-utils/tree/acpi\n\n* b4-shazam-merge:\n  riscv: Enable DAX VMEMMAP optimization\n  riscv: mm: Add support for ZONE_DEVICE\n  virtio-mem: Enable virtio-mem for RISC-V\n  riscv: Enable memory hotplugging for RISC-V\n  riscv: mm: Take memory hotplug read-lock during kernel page table dump\n  riscv: mm: Add memory hotplugging support\n  riscv: mm: Add pfn_to_kaddr() implementation\n  riscv: mm: Refactor create_linear_mapping_range() for memory hot add\n  riscv: mm: Change attribute from __init to __meminit for page functions\n  riscv: mm: Pre-allocate vmemmap/direct map/kasan PGD entries\n  riscv: mm: Properly forward vmemmap_populate() altmap parameter\n\nLink: https://lore.kernel.org/r/20240605114100.315918-1-bjorn@kernel.org\nSigned-off-by: Palmer Dabbelt <palmer@rivosinc.com>\n', '']",Adds memory hot(un)plug and ZONE_DEVICE support for RISC-V in the Linux port.,"RISC-V, memory hotplug, ZONE_DEVICE",It's a new feature.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
66673099f734fd6512055fee353b5c81dafec216,66673099f734fd6512055fee353b5c81dafec216,Björn Töpel,bjorn@rivosinc.com,1717587645,Palmer Dabbelt,palmer@rivosinc.com,1719416559,9a7ce8a27f3a6e83febcfe02231813375a9bec4c,e3ecf2fdc8f39a898f9e06481e935b460a097e10,"riscv: mm: Pre-allocate vmemmap/direct map/kasan PGD entries

The RISC-V port copies the PGD table from init_mm/swapper_pg_dir to
all userland page tables"," which means that if the PGD level table is
changed","[' other page tables has to be updated as well.\n\nInstead of having the PGD changes ripple out to all tables', ' the\nsynchronization can be avoided by pre-allocating the PGD entries/pages\nat boot', ' avoiding the synchronization all together.\n\nThis is currently done for the bpf/modules', ' and vmalloc PGD regions.\nExtend this scheme for the PGD regions touched by memory hotplugging.\n\nPrepare the RISC-V port for memory hotplug by pre-allocate\nvmemmap/direct map/kasan entries at the PGD level. This will roughly\nwaste ~128 (plus 32 if KASAN is enabled) worth of 4K pages when memory\nhotplugging is enabled in the kernel configuration.\n\nReviewed-by: Alexandre Ghiti <alexghiti@rivosinc.com>\nSigned-off-by: Björn Töpel <bjorn@rivosinc.com>\nLink: https://lore.kernel.org/r/20240605114100.315918-3-bjorn@kernel.org\nSigned-off-by: Palmer Dabbelt <palmer@rivosinc.com>\n', '']",This commit pre-allocates vmemmap/direct map/kasan PGD entries for RISC-V architecture in Linux kernel.,"RISC-V, PGD, pre-allocate",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
d65f3767de20782e75d8a665fdc54f822f344802,d65f3767de20782e75d8a665fdc54f822f344802,Leon Hwang,hffilwlqm@gmail.com,1719327231,Alexei Starovoitov,ast@kernel.org,1719364364,30cffd652e5dc666719ff9492738c88cebc3f737,c73a9683cb21012b6c0f14217974837151c527a8,"bpf: Fix tailcall cases in test_bpf

Since f663a03c8e35 (""bpf"," x64: Remove tail call detection"")","[""\ntail_call_reachable won't be detected in x86 JIT. And"", ' tail_call_reachable\nis provided by verifier.\n\nTherefore', ' in test_bpf', ' the tail_call_reachable must be provided in test\ncases before running.\n\nFix and test:\n\n[  174.828662] test_bpf: #0 Tail call leaf jited:1 170 PASS\n[  174.829574] test_bpf: #1 Tail call 2 jited:1 244 PASS\n[  174.830363] test_bpf: #2 Tail call 3 jited:1 296 PASS\n[  174.830924] test_bpf: #3 Tail call 4 jited:1 719 PASS\n[  174.831863] test_bpf: #4 Tail call load/store leaf jited:1 197 PASS\n[  174.832240] test_bpf: #5 Tail call load/store jited:1 326 PASS\n[  174.832240] test_bpf: #6 Tail call error path', ' max count reached jited:1 2214 PASS\n[  174.835713] test_bpf: #7 Tail call count preserved across function calls jited:1 609751 PASS\n[  175.446098] test_bpf: #8 Tail call error path', ' NULL target jited:1 472 PASS\n[  175.447597] test_bpf: #9 Tail call error path', ' index out of range jited:1 206 PASS\n[  175.448833] test_bpf: test_tail_calls: Summary: 10 PASSED', ' 0 FAILED', ' [10/10 JIT\'ed]\n\nReported-by: kernel test robot <oliver.sang@intel.com>\nCloses: https://lore.kernel.org/oe-lkp/202406251415.c51865bc-oliver.sang@intel.com\nFixes: f663a03c8e35 (""bpf', ' x64: Remove tail call detection"")\nSigned-off-by: Leon Hwang <hffilwlqm@gmail.com>\nLink: https://lore.kernel.org/r/20240625145351.40072-1-hffilwlqm@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fixes issues with tailcall execution in BPF test cases.,"bpf, tailcall, test",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
637c26f9b02d9c72448fcd5c9c4e3b08015404fc,637c26f9b02d9c72448fcd5c9c4e3b08015404fc,Andrii Nakryiko,andrii@kernel.org,1716341925,Masami Hiramatsu (Google),mhiramat@kernel.org,1719278138,0840dc159e7415fe127ac0035d909480a7067c2c,4a365eb8a6d9940e838739935f1ce21f1ec8e33f,"selftests/bpf: add test validating uprobe/uretprobe stack traces

Add a set of tests to validate that stack traces captured from or in the
presence of active uprobes and uretprobes are valid and complete.

For this we use BPF program that are installed either on entry or exit
of user function"," plus deep-nested USDT. One of target funtions
(target_1) is recursive to generate two different entries in the stack
trace for the same uprobe/uretprobe","[' testing potential edge conditions.\n\nIf there is no fixes', ' we get something like this for one of the scenarios:\n\n caller: 0x758fff - 0x7595ab\n target_1: 0x758fd5 - 0x758fff\n target_2: 0x758fca - 0x758fd5\n target_3: 0x758fbf - 0x758fca\n target_4: 0x758fb3 - 0x758fbf\n ENTRY #0: 0x758fb3 (in target_4)\n ENTRY #1: 0x758fd3 (in target_2)\n ENTRY #2: 0x758ffd (in target_1)\n ENTRY #3: 0x7fffffffe000\n ENTRY #4: 0x7fffffffe000\n ENTRY #5: 0x6f8f39\n ENTRY #6: 0x6fa6f0\n ENTRY #7: 0x7f403f229590\n\nEntry #3 and #4 (0x7fffffffe000) are uretprobe trampoline addresses\nwhich obscure actual target_1 and another target_1 invocations. Also\nnote that between entry #0 and entry #1 we are missing an entry for\ntarget_3.\n\nWith fixes', ' we get desired full stack traces:\n\n caller: 0x758fff - 0x7595ab\n target_1: 0x758fd5 - 0x758fff\n target_2: 0x758fca - 0x758fd5\n target_3: 0x758fbf - 0x758fca\n target_4: 0x758fb3 - 0x758fbf\n ENTRY #0: 0x758fb7 (in target_4)\n ENTRY #1: 0x758fc8 (in target_3)\n ENTRY #2: 0x758fd3 (in target_2)\n ENTRY #3: 0x758ffd (in target_1)\n ENTRY #4: 0x758ff3 (in target_1)\n ENTRY #5: 0x75922c (in caller)\n ENTRY #6: 0x6f8f39\n ENTRY #7: 0x6fa6f0\n ENTRY #8: 0x7f986adc4cd0\n\nNow there is a logical and complete sequence of function calls.\n\nLink: https://lore.kernel.org/all/20240522013845.1631305-5-andrii@kernel.org/\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Jiri Olsa <jolsa@kernel.org>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\n', '']",Add tests for validating stack traces with active uprobes and uretprobes in selftests.,"test,uprobes,stack traces",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['kprobe/uprobe/ftrace like programs']
482000cf7fd5ff42214c0d71f30ed42c55bcb00a,482000cf7fd5ff42214c0d71f30ed42c55bcb00a,Jakub Kicinski,kuba@kernel.org,1719278121,Jakub Kicinski,kuba@kernel.org,1719278122,b71e5d0d51f24629a1228cffbbc1c352a3db4032,058722ee350c0bdd664e467156feb2bf5d9cc271 7e9f79428372c6eab92271390851be34ab26bfb4,"Merge tag 'for-netdev' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-06-24

We've added 12 non-merge commits during the last 10 day(s) which contain
a total of 10 files changed", 412 insertions(+),"[' 16 deletions(-).\n\nThe main changes are:\n\n1) Fix a BPF verifier issue validating may_goto with a negative offset', '\n   from Alexei Starovoitov.\n\n2) Fix a BPF verifier validation bug with may_goto combined with jump to\n   the first instruction', ' also from Alexei Starovoitov.\n\n3) Fix a bug with overrunning reservations in BPF ring buffer', '\n   from Daniel Borkmann.\n\n4) Fix a bug in BPF verifier due to missing proper var_off setting related\n   to movsx instruction', ' from Yonghong Song.\n\n5) Silence unnecessary syzkaller-triggered warning in __xdp_reg_mem_model()', ""\n   from Daniil Dulov.\n\n* tag 'for-netdev' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:\n  xdp: Remove WARN() from __xdp_reg_mem_model()\n  selftests/bpf: Add tests for may_goto with negative offset.\n  bpf: Fix may_goto with negative offset.\n  selftests/bpf: Add more ring buffer test coverage\n  bpf: Fix overrunning reservations in ringbuf\n  selftests/bpf: Tests with may_goto and jumps to the 1st insn\n  bpf: Fix the corner case with may_goto and jump to the 1st insn.\n  bpf: Update BPF LSM maintainer list\n  bpf: Fix remap of arena.\n  selftests/bpf: Add a few tests to cover\n  bpf: Add missed var_off setting in coerce_subreg_to_size_sx()\n  bpf: Add missed var_off setting in set_sext32_default_val()\n====================\n\nLink: https://patch.msgid.link/20240624124330.8401-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n"", '']",Merge pull request for bpf branch containing 12 non-merge commits and 412 insertions over 10 days.,"merge, pull request, bpf",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
bf2468f9afba8001c7432d104756a5dd3537bc76,bf2468f9afba8001c7432d104756a5dd3537bc76,Jakub Kicinski,kuba@kernel.org,1719272485,Jakub Kicinski,kuba@kernel.org,1719272486,ec13e5174a4146e629e239f084b753d4fae4c162,568ebdaba6370c03360860f1524f646ddd5ca523 3f9fe37d9e16a6cfd5f4d1f536686ea71db3196f,"Merge branch 'locking-introduce-nested-bh-locking'

Sebastian Andrzej Siewior says:

====================
locking: Introduce nested-BH locking.

Disabling bottoms halves acts as per-CPU BKL. On PREEMPT_RT code within
local_bh_disable() section remains preemtible. As a result high prior
tasks (or threaded interrupts) will be blocked by lower-prio task (or
threaded interrupts) which are long running which includes softirq
sections.

The proposed way out is to introduce explicit per-CPU locks for
resources which are protected by local_bh_disable() and use those only
on PREEMPT_RT so there is no additional overhead for !PREEMPT_RT builds.

The series introduces the infrastructure and converts large parts of
networking which is largest stake holder here. Once this done the
per-CPU lock from local_bh_disable() on PREEMPT_RT can be lifted.

Performance testing. Baseline is net-next as of commit 93bda33046e7a
(""Merge branch'net-constify-ctl_table-arguments-of-utility-functions'"")
plus v6.10-rc1. A 10GiG link is used between two hosts. The command
   xdp-bench redirect-cpu --cpu 3 --remote-action drop eth1 -e

was invoked on the receiving side with a ixgbe. The sending side uses
pktgen_sample03_burst_single_flow.sh on i40e.

Baseline:
| eth1->?                 9",018,"['604 rx/s                  0 err', 'drop/s\n|   receive total         9', '018', '604 pkt/s                 0 drop/s                0 error/s\n|     cpu:7               9', '018', '604 pkt/s                 0 drop/s                0 error/s\n|   enqueue to cpu 3      9', '018', '602 pkt/s                 0 drop/s             7.00 bulk-avg\n|     cpu:7->3            9', '018', '602 pkt/s                 0 drop/s             7.00 bulk-avg\n|   kthread total         9', '018', '606 pkt/s                 0 drop/s          214', '698 sched\n|     cpu:3               9', '018', '606 pkt/s                 0 drop/s          214', '698 sched\n|     xdp_stats                   0 pass/s        9', '018', '606 drop/s                0 redir/s\n|       cpu:3                     0 pass/s        9', '018', '606 drop/s                0 redir/s\n|   redirect_err                  0 error/s\n|   xdp_exception                 0 hit/s\n\nperf top --sort cpu', 'symbol --no-children:\n|   18.14%  007  [k] bpf_prog_4f0ffbb35139c187_cpumap_l4_hash\n|   13.29%  007  [k] ixgbe_poll\n|   12.66%  003  [k] cpu_map_kthread_run\n|    7.23%  003  [k] page_frag_free\n|    6.76%  007  [k] xdp_do_redirect\n|    3.76%  007  [k] cpu_map_redirect\n|    3.13%  007  [k] bq_flush_to_queue\n|    2.51%  003  [k] xdp_return_frame\n|    1.93%  007  [k] try_to_wake_up\n|    1.78%  007  [k] _raw_spin_lock\n|    1.74%  007  [k] cpu_map_enqueue\n|    1.56%  003  [k] bpf_prog_57cd311f2e27366b_cpumap_drop\n\nWith this series applied:\n| eth1->?                10', '329', '340 rx/s                  0 err', 'drop/s\n|   receive total        10', '329', '340 pkt/s                 0 drop/s                0 error/s\n|     cpu:6              10', '329', '340 pkt/s                 0 drop/s                0 error/s\n|   enqueue to cpu 3     10', '329', '338 pkt/s                 0 drop/s             8.00 bulk-avg\n|     cpu:6->3           10', '329', '338 pkt/s                 0 drop/s             8.00 bulk-avg\n|   kthread total        10', '329', '321 pkt/s                 0 drop/s           96', '297 sched\n|     cpu:3              10', '329', '321 pkt/s                 0 drop/s           96', '297 sched\n|     xdp_stats                   0 pass/s       10', '329', '321 drop/s                0 redir/s\n|       cpu:3                     0 pass/s       10', '329', '321 drop/s                0 redir/s\n|   redirect_err                  0 error/s\n|   xdp_exception                 0 hit/s\n\nperf top --sort cpu', 'symbol --no-children:\n|   20.90%  006  [k] bpf_prog_4f0ffbb35139c187_cpumap_l4_hash\n|   12.62%  006  [k] ixgbe_poll\n|    9.82%  003  [k] page_frag_free\n|    8.73%  003  [k] cpu_map_bpf_prog_run_xdp\n|    6.63%  006  [k] xdp_do_redirect\n|    4.94%  003  [k] cpu_map_kthread_run\n|    4.28%  006  [k] cpu_map_redirect\n|    4.03%  006  [k] bq_flush_to_queue\n|    3.01%  003  [k] xdp_return_frame\n|    1.95%  006  [k] _raw_spin_lock\n|    1.94%  003  [k] bpf_prog_57cd311f2e27366b_cpumap_drop\n\nThis diff appears to be noise.\n\nv8: https://lore.kernel.org/all/20240619072253.504963-1-bigeasy@linutronix.de\nv7: https://lore.kernel.org/all/20240618072526.379909-1-bigeasy@linutronix.de\nv6: https://lore.kernel.org/all/20240612170303.3896084-1-bigeasy@linutronix.de\nv5: https://lore.kernel.org/all/20240607070427.1379327-1-bigeasy@linutronix.de\nv4: https://lore.kernel.org/all/20240604154425.878636-1-bigeasy@linutronix.de\nv3: https://lore.kernel.org/all/20240529162927.403425-1-bigeasy@linutronix.de\nv2: https://lore.kernel.org/all/20240503182957.1042122-1-bigeasy@linutronix.de\nv1: https://lore.kernel.org/all/20231215171020.687342-1-bigeasy@linutronix.de\n====================\n\nLink: https://patch.msgid.link/20240620132727.660738-1-bigeasy@linutronix.de\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",Introduce nested bottom halves locking for improved task and interrupt handling on PREEMPT_RT systems.,"nested-BH locking, PREEMPT_RT, networking",It's a new feature.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
3f9fe37d9e16a6cfd5f4d1f536686ea71db3196f,3f9fe37d9e16a6cfd5f4d1f536686ea71db3196f,Sebastian Andrzej Siewior,bigeasy@linutronix.de,1718889725,Jakub Kicinski,kuba@kernel.org,1719272484,ec13e5174a4146e629e239f084b753d4fae4c162,401cb7dae8130fd34eb84648e02ab4c506df7d5e,"net: Move per-CPU flush-lists to bpf_net_context on PREEMPT_RT.

The per-CPU flush lists"," which are accessed from within the NAPI callback
(xdp_do_flush() for instance)","[' are per-CPU. There are subject to the\nsame problem as struct bpf_redirect_info.\n\nAdd the per-CPU lists cpu_map_flush_list', ' dev_map_flush_list and\nxskmap_map_flush_list to struct bpf_net_context. Add wrappers for the\naccess. The lists initialized on first usage (similar to\nbpf_net_ctx_get_ri()).\n\nCc: ""Björn Töpel"" <bjorn@kernel.org>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Andrii Nakryiko <andrii@kernel.org>\nCc: Eduard Zingerman <eddyz87@gmail.com>\nCc: Hao Luo <haoluo@google.com>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: John Fastabend <john.fastabend@gmail.com>\nCc: Jonathan Lemon <jonathan.lemon@gmail.com>\nCc: KP Singh <kpsingh@kernel.org>\nCc: Maciej Fijalkowski <maciej.fijalkowski@intel.com>\nCc: Magnus Karlsson <magnus.karlsson@intel.com>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: Song Liu <song@kernel.org>\nCc: Stanislav Fomichev <sdf@google.com>\nCc: Yonghong Song <yonghong.song@linux.dev>\nAcked-by: Jesper Dangaard Brouer <hawk@kernel.org>\nReviewed-by: Toke Høiland-Jørgensen <toke@redhat.com>\nSigned-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>\nLink: https://patch.msgid.link/20240620132727.660738-16-bigeasy@linutronix.de\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",Move per-CPU flush lists to bpf_net_context on PREEMPT_RT for improved performance.,"per-CPU, PREEMPT_RT, bpf_net_context",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['xdp like programs']
401cb7dae8130fd34eb84648e02ab4c506df7d5e,401cb7dae8130fd34eb84648e02ab4c506df7d5e,Sebastian Andrzej Siewior,bigeasy@linutronix.de,1718889724,Jakub Kicinski,kuba@kernel.org,1719272484,f551429eb47ddd58e2bfb13aff74aa894752a3d9,78f520b7bbe579438dfc202226b3dac5607d8c7f,"net: Reference bpf_redirect_info via task_struct on PREEMPT_RT.

The XDP redirect process is two staged:
- bpf_prog_run_xdp() is invoked to run a eBPF program which inspects the
  packet and makes decisions. While doing that"," the per-CPU variable
  bpf_redirect_info is used.

- Afterwards xdp_do_redirect() is invoked and accesses bpf_redirect_info
  and it may also access other per-CPU variables like xskmap_flush_list.

At the very end of the NAPI callback","[' xdp_do_flush() is invoked which\ndoes not access bpf_redirect_info but will touch the individual per-CPU\nlists.\n\nThe per-CPU variables are only used in the NAPI callback hence disabling\nbottom halves is the only protection mechanism. Users from preemptible\ncontext (like cpu_map_kthread_run()) explicitly disable bottom halves\nfor protections reasons.\nWithout locking in local_bh_disable() on PREEMPT_RT this data structure\nrequires explicit locking.\n\nPREEMPT_RT has forced-threaded interrupts enabled and every\nNAPI-callback runs in a thread. If each thread has its own data\nstructure then locking can be avoided.\n\nCreate a struct bpf_net_context which contains struct bpf_redirect_info.\nDefine the variable on stack', ' use bpf_net_ctx_set() to save a pointer to\nit', "" bpf_net_ctx_clear() removes it again.\nThe bpf_net_ctx_set() may nest. For instance a function can be used from\nwithin NET_RX_SOFTIRQ/ net_rx_action which uses bpf_net_ctx_set() and\nNET_TX_SOFTIRQ which does not. Therefore only the first invocations\nupdates the pointer.\nUse bpf_net_ctx_get_ri() as a wrapper to retrieve the current struct\nbpf_redirect_info. The returned data structure is zero initialized to\nensure nothing is leaked from stack. This is done on first usage of the\nstruct. bpf_net_ctx_set() sets bpf_redirect_info::kern_flags to 0 to\nnote that initialisation is required. First invocation of\nbpf_net_ctx_get_ri() will memset() the data structure and update\nbpf_redirect_info::kern_flags.\nbpf_redirect_info::nh is excluded from memset because it is only used\nonce BPF_F_NEIGH is set which also sets the nh member. The kern_flags is\nmoved past nh to exclude it from memset.\n\nThe pointer to bpf_net_context is saved task's task_struct. Using\nalways the bpf_net_context approach has the advantage that there is\nalmost zero differences between PREEMPT_RT and non-PREEMPT_RT builds.\n\nCc: Andrii Nakryiko <andrii@kernel.org>\nCc: Eduard Zingerman <eddyz87@gmail.com>\nCc: Hao Luo <haoluo@google.com>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: John Fastabend <john.fastabend@gmail.com>\nCc: KP Singh <kpsingh@kernel.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: Song Liu <song@kernel.org>\nCc: Stanislav Fomichev <sdf@google.com>\nCc: Yonghong Song <yonghong.song@linux.dev>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nAcked-by: Jesper Dangaard Brouer <hawk@kernel.org>\nReviewed-by: Toke Høiland-Jørgensen <toke@redhat.com>\nSigned-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>\nLink: https://patch.msgid.link/20240620132727.660738-15-bigeasy@linutronix.de\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n"", '']",Enhance reference handling of bpf_redirect_info via task_struct in XDP for PREEMPT_RT.,"bpf_redirect_info, xdp, PREEMPT_RT",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['xdp like programs']
78f520b7bbe579438dfc202226b3dac5607d8c7f,78f520b7bbe579438dfc202226b3dac5607d8c7f,Sebastian Andrzej Siewior,bigeasy@linutronix.de,1718889723,Jakub Kicinski,kuba@kernel.org,1719272483,5153f67a77881d0cb30315535265f04093828146,d1542d4ae4dfdc47c9b3205ebe849ed23af213dd,"net: Use nested-BH locking for bpf_scratchpad.

bpf_scratchpad is a per-CPU variable and relies on disabled BH for its
locking. Without per-CPU locking in local_bh_disable() on PREEMPT_RT
this data structure requires explicit locking.

Add a local_lock_t to the data structure and use local_lock_nested_bh()
for locking. This change adds only lockdep coverage and does not alter
the functional behaviour for !PREEMPT_RT.

Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: Hao Luo <haoluo@google.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: KP Singh <kpsingh@kernel.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: Song Liu <song@kernel.org>
Cc: Stanislav Fomichev <sdf@google.com>
Cc: Yonghong Song <yonghong.song@linux.dev>
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Link: https://patch.msgid.link/20240620132727.660738-14-bigeasy@linutronix.de
Signed-off-by: Jakub Kicinski <kuba@kernel.org>
",,Introduce nested-BH locking for bpf_scratchpad for better lockdep coverage in PREEMPT_RT.,"nested-BH, bpf_scratchpad, locking",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d1542d4ae4dfdc47c9b3205ebe849ed23af213dd,d1542d4ae4dfdc47c9b3205ebe849ed23af213dd,Sebastian Andrzej Siewior,bigeasy@linutronix.de,1718889722,Jakub Kicinski,kuba@kernel.org,1719272483,7fbce24c9f46f850c4092a5595f3944c62a39d6a,3414adbd6a6ad3702d0bdc49081ee7c9e9e1c600,"seg6: Use nested-BH locking for seg6_bpf_srh_states.

The access to seg6_bpf_srh_states is protected by disabling preemption.
Based on the code"," the entry point is input_action_end_bpf() and
every other function (the bpf helper functions bpf_lwt_seg6_*())","[' that\nis accessing seg6_bpf_srh_states', "" should be called from within\ninput_action_end_bpf().\n\ninput_action_end_bpf() accesses seg6_bpf_srh_states first at the top of\nthe function and then disables preemption. This looks wrong because if\npreemption needs to be disabled as part of the locking mechanism then\nthe variable shouldn't be accessed beforehand.\n\nLooking at how it is used via test_lwt_seg6local.sh then\ninput_action_end_bpf() is always invoked from softirq context. If this\nis always the case then the preempt_disable() statement is superfluous.\nIf this is not always invoked from softirq then disabling only\npreemption is not sufficient.\n\nReplace the preempt_disable() statement with nested-BH locking. This is\nnot an equivalent replacement as it assumes that the invocation of\ninput_action_end_bpf() always occurs in softirq context and thus the\npreempt_disable() is superfluous.\nAdd a local_lock_t the data structure and use local_lock_nested_bh() for\nlocking. Add lockdep_assert_held() to ensure the lock is held while the\nper-CPU variable is referenced in the helper functions.\n\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Andrii Nakryiko <andrii@kernel.org>\nCc: David Ahern <dsahern@kernel.org>\nCc: Hao Luo <haoluo@google.com>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: John Fastabend <john.fastabend@gmail.com>\nCc: KP Singh <kpsingh@kernel.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: Song Liu <song@kernel.org>\nCc: Stanislav Fomichev <sdf@google.com>\nCc: Yonghong Song <yonghong.song@linux.dev>\nSigned-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>\nLink: https://patch.msgid.link/20240620132727.660738-13-bigeasy@linutronix.de\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n"", '']",Use nested-BH locking for seg6_bpf_srh_states to protect access by disabling preemption.,"nested-BH locking, seg6_bpf_srh_states, preemption",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['tracepoints like programs']
c73a9683cb21012b6c0f14217974837151c527a8,c73a9683cb21012b6c0f14217974837151c527a8,Antoine Tenart,atenart@kernel.org,1719220147,Andrii Nakryiko,andrii@kernel.org,1719245982,f5de59085d4b706dd8324c7167e9a9df7fefae03,5a532459aa919d055d822d8db4ea2c5c8d511568,"libbpf: Skip base btf sanity checks

When upgrading to libbpf 1.3 we noticed a big performance hit while
loading programs using CORE on non base-BTF symbols. This was tracked
down to the new BTF sanity check logic. The issue is the base BTF
definitions are checked first for the base BTF and then again for every
module BTF.

Loading 5 dummy programs (using libbpf-rs) that are using CORE on a
non-base BTF symbol on my system:
- Before this fix: 3s.
- With this fix: 0.1s.

Fix this by only checking the types starting at the BTF start id. This
should ensure the base BTF is still checked as expected but only once
(btf->start_id == 1 when creating the base BTF)"," and then only
additional types are checked for each module BTF.

Fixes: 3903802bb99a (""libbpf: Add basic BTF sanity validation"")
Signed-off-by: Antoine Tenart <atenart@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Alan Maguire <alan.maguire@oracle.com>
Link: https://lore.kernel.org/bpf/20240624090908.171231-1-atenart@kernel.org
",[''],The commit optimizes BTF sanity checks in libbpf to improve performance when loading programs using CORE on non-base BTF symbols.,"libbpf, BTF, performance",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
7e9f79428372c6eab92271390851be34ab26bfb4,7e9f79428372c6eab92271390851be34ab26bfb4,Daniil Dulov,d.dulov@aladdin.ru,1719216467,Daniel Borkmann,daniel@iogearbox.net,1719229442,cb5279f0a4e1e750c0bf7a45581d9caf5ad41405,280e4ebffd16ea1b55dc09761448545e216f60a9,"xdp: Remove WARN() from __xdp_reg_mem_model()

syzkaller reports a warning in __xdp_reg_mem_model().

The warning occurs only if __mem_id_init_hash_table() returns an error. It
returns the error in two cases:

  1. memory allocation fails;
  2. rhashtable_init() fails when some fields of rhashtable_params
     struct are not initialized properly.

The second case cannot happen since there is a static const rhashtable_params
struct with valid fields. So"," warning is only triggered when there is a
problem with memory allocation.

Thus","[' there is no sense in using WARN() to handle this error and it can be\nsafely removed.\n\nWARNING: CPU: 0 PID: 5065 at net/core/xdp.c:299 __xdp_reg_mem_model+0x2d9/0x650 net/core/xdp.c:299\n\nCPU: 0 PID: 5065 Comm: syz-executor883 Not tainted 6.8.0-syzkaller-05271-gf99c5f563c17 #0\nHardware name: Google Google Compute Engine/Google Compute Engine', ' BIOS Google 03/27/2024\nRIP: 0010:__xdp_reg_mem_model+0x2d9/0x650 net/core/xdp.c:299\n\nCall Trace:\n xdp_reg_mem_model+0x22/0x40 net/core/xdp.c:344\n xdp_test_run_setup net/bpf/test_run.c:188 [inline]\n bpf_test_run_xdp_live+0x365/0x1e90 net/bpf/test_run.c:377\n bpf_prog_test_run_xdp+0x813/0x11b0 net/bpf/test_run.c:1267\n bpf_prog_test_run+0x33a/0x3b0 kernel/bpf/syscall.c:4240\n __sys_bpf+0x48d/0x810 kernel/bpf/syscall.c:5649\n __do_sys_bpf kernel/bpf/syscall.c:5738 [inline]\n __se_sys_bpf kernel/bpf/syscall.c:5736 [inline]\n __x64_sys_bpf+0x7c/0x90 kernel/bpf/syscall.c:5736\n do_syscall_64+0xfb/0x240\n entry_SYSCALL_64_after_hwframe+0x6d/0x75\n\nFound by Linux Verification Center (linuxtesting.org) with syzkaller.\n\nFixes: 8d5d88527587 (""xdp: rhashtable with allocator ID to pointer mapping"")\nSigned-off-by: Daniil Dulov <d.dulov@aladdin.ru>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Jesper Dangaard Brouer <hawk@kernel.org>\nLink: https://lore.kernel.org/all/20240617162708.492159-1-d.dulov@aladdin.ru\nLink: https://lore.kernel.org/bpf/20240624080747.36858-1-d.dulov@aladdin.ru\n', '']",Remove unnecessary warning in __xdp_reg_mem_model() related to memory allocation failures.,"WARN, xdp, memory",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF maps,['xdp like programs']
280e4ebffd16ea1b55dc09761448545e216f60a9,280e4ebffd16ea1b55dc09761448545e216f60a9,Alexei Starovoitov,ast@kernel.org,1718841235,Daniel Borkmann,daniel@iogearbox.net,1719229442,add4f9de750ad798adfe85644c9d1c0b3f822778,2b2efe1937ca9f8815884bd4dcd5b32733025103,"selftests/bpf: Add tests for may_goto with negative offset.

Add few tests with may_goto and negative offset.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240619235355.85031-2-alexei.starovoitov@gmail.com
",,Add selftests for may_goto functionality with negative offset in BPF.,"selftests, may_goto, negative offset",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2b2efe1937ca9f8815884bd4dcd5b32733025103,2b2efe1937ca9f8815884bd4dcd5b32733025103,Alexei Starovoitov,ast@kernel.org,1718841234,Daniel Borkmann,daniel@iogearbox.net,1719229442,a48009516a3d43671f0380601a016fef79acb9c6,316930d06b92a2419d8e767193266e678545b31d,"bpf: Fix may_goto with negative offset.

Zac's syzbot crafted a bpf prog that exposed two bugs in may_goto.
The 1st bug is the way may_goto is patched. When offset is negative
it should be patched differently.
The 2nd bug is in the verifier:
when current state may_goto_depth is equal to visited state may_goto_depth
it means there is an actual infinite loop. It's not correct to prune
exploration of the program at this point.
Note", that this check doesn't limit the program to only one may_goto insn,"['\nsince 2nd and any further may_goto will increment may_goto_depth only\nin the queued state pushed for future exploration. The current state\nwill have may_goto_depth == 0 regardless of number of may_goto insns\nand the verifier has to explore the program until bpf_exit.\n\nFixes: 011832b97b31 (""bpf: Introduce may_goto instruction"")\nReported-by: Zac Ecob <zacecob@protonmail.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nCloses: https://lore.kernel.org/bpf/CAADnVQL-15aNp04-cyHRn47Yv61NXfYyhopyZtUyxNojUZUXpA@mail.gmail.com/\nLink: https://lore.kernel.org/bpf/20240619235355.85031-1-alexei.starovoitov@gmail.com\n', '']",This commit fixes two issues in the bpf verifier related to may_goto with negative offsets.,"bpf,may_goto,verifier",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
316930d06b92a2419d8e767193266e678545b31d,316930d06b92a2419d8e767193266e678545b31d,Daniel Borkmann,daniel@iogearbox.net,1718978908,Daniel Borkmann,daniel@iogearbox.net,1719229435,d498031afe82edab178a71249bc585611b9ebe88,cfa1a2329a691ffd991fcf7248a57d752e712881,"selftests/bpf: Add more ring buffer test coverage

Add test coverage for reservations beyond the ring buffer size in order
to validate that bpf_ringbuf_reserve() rejects the request with NULL"," all
other ring buffer tests keep passing as well:

  # ./vmtest.sh -- ./test_progs -t ringbuf
  [...]
  ./test_progs -t ringbuf
  [    1.165434] bpf_testmod: loading out-of-tree module taints kernel.
  [    1.165825] bpf_testmod: module verification failed: signature and/or required key missing - tainting kernel
  [    1.284001] tsc: Refined TSC clocksource calibration: 3407.982 MHz
  [    1.286871] clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x311fc34e357","[' max_idle_ns: 440795379773 ns\n  [    1.289555] clocksource: Switched to clocksource tsc\n  #274/1   ringbuf/ringbuf:OK\n  #274/2   ringbuf/ringbuf_n:OK\n  #274/3   ringbuf/ringbuf_map_key:OK\n  #274/4   ringbuf/ringbuf_write:OK\n  #274     ringbuf:OK\n  #275     ringbuf_multi:OK\n  [...]\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\n[ Test fixups for getting BPF CI back to work ]\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240621140828.18238-2-daniel@iogearbox.net\n', '']",Add additional test coverage for ring buffer reservations exceeding size to ensure proper rejection in bpf_ringbuf_reserve().,"ring buffer, test coverage, bpf_ringbuf_reserve",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
5a532459aa919d055d822d8db4ea2c5c8d511568,5a532459aa919d055d822d8db4ea2c5c8d511568,Alan Maguire,alan.maguire@oracle.com,1719150744,Alexei Starovoitov,ast@kernel.org,1719172202,b5d96e2179b59d62a4a75d3b92e2b5c4dbcc4df5,04efaebd72d1d3d9991841051fafc6b195f3676d,"bpf: fix build when CONFIG_DEBUG_INFO_BTF[_MODULES] is undefined

Kernel test robot reports that kernel build fails with
resilient split BTF changes.

Examining the associated config and code we see that
btf_relocate_id() is defined under CONFIG_DEBUG_INFO_BTF_MODULES.
Moving it outside the #ifdef solves the issue.

Reported-by: kernel test robot <lkp@intel.com>
Closes: https://lore.kernel.org/oe-kbuild-all/202406221742.d2srFLVI-lkp@intel.com/
Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Link: https://lore.kernel.org/r/20240623135224.27981-1-alan.maguire@oracle.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Fix kernel build failure by relocating btf_relocate_id() outside the CONFIG_DEBUG_INFO_BTF_MODULES conditional compilation block.,"kernel,build,BTF",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
04efaebd72d1d3d9991841051fafc6b195f3676d,04efaebd72d1d3d9991841051fafc6b195f3676d,Dave Thaler,dthaler1968@googlemail.com,1719155093,Alexei Starovoitov,ast@kernel.org,1719159026,7d01c8f1bdcbf2d3199341d50e8eb3d1640c7a7f,93265a0b79e48fde8ee23fb6e1195d7d99717063,bpf," docs: Address comments from IETF Area Directors

This patch does the following to address IETF feedback:

* Remove mention of ""program type"" and reference future
  docs (and mention platform-specific docs exist) for
  helper functions and BTF. Addresses Roman Danyliw's
  comments based on GENART review from Ines Robles [0].

* Add reference for endianness as requested by John
  Scudder [1].

* Added bit numbers to top of 32-bit wide format diagrams
  as requested by Paul Wouters [2].

* Added more text about why BPF doesn't stand for anything","[' based\n  on text from ebpf.io [3]', ' as requested by Eric Vyncke and\n  Gunter Van de Velde [4].\n\n* Replaced ""htobe16"" (and similar) and the direction-specific\n  description with just ""be16"" (and similar) and a direction-agnostic\n  description', ' to match the direction-agnostic description in\n  the Byteswap Instructions section. Based on feedback from Eric\n  Vyncke [5].\n\n[0] https://mailarchive.ietf.org/arch/msg/bpf/DvDgDWOiwk05OyNlWlAmELZFPlM/\n\n[1] https://mailarchive.ietf.org/arch/msg/bpf/eKNXpU4jCLjsbZDSw8LjI29M3tM/\n\n[2] https://mailarchive.ietf.org/arch/msg/bpf/hGk8HkYxeZTpdu9qW_MvbGKj7WU/\n\n[3] https://ebpf.io/what-is-ebpf/#what-do-ebpf-and-bpf-stand-for\n\n[4] https://mailarchive.ietf.org/arch/msg/bpf/i93lzdN3ewnzzS_JMbinCIYxAIU/\n\n[5] https://mailarchive.ietf.org/arch/msg/bpf/KBWXbMeDcSrq4vsKR_KkBbV6hI4/\n\nAcked-by: David Vernet <void@manifault.com>\nSigned-off-by: Dave Thaler <dthaler1968@googlemail.com>\nLink: https://lore.kernel.org/r/20240623150453.10613-1-dthaler1968@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']","The commit addresses IETF feedback by modifying documentation, adding references, and updating diagrams related to BPF.","documentation, IETF, feedback",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The BPF Type Format (BTF),"[""It's not related to any of the above.""]"
93265a0b79e48fde8ee23fb6e1195d7d99717063,93265a0b79e48fde8ee23fb6e1195d7d99717063,Andrii Nakryiko,andrii@kernel.org,1719006308,Andrii Nakryiko,andrii@kernel.org,1719006393,4af832750443c5224152d4bdae82c8e69fc674c8,cd387ce54834bc7808082c471fd745ce85a0e21f 47a8cf0c5b3f6769b9d558301735c75119a0a165,"Merge branch 'bpf-resilient-split-btf-followups'

Alan Maguire says:

====================
bpf: resilient split BTF followups

Follow-up to resilient split BTF series [1]","

- cleaning up libbpf relocation code (patch 1);
- adding 'struct module' support for base BTF data (patch 2);
- splitting out field iteration code into separate file (patch 3);
- sharing libbpf relocation code with the kernel (patch 4);
- adding a kbuild --btf_features flag to generate distilled base
  BTF in the module-specific case where KBUILD_EXTMOD is true
  (patch 5); and
- adding test coverage for module-based kfunc dtor (patch 6)

Generation of distilled base BTF for modules requires the pahole patch
at [2]","["" but without it we just won't get distilled base BTF (and thus BTF\nrelocation on module load) for bpf_testmod.ko.\n\nChanges since v1 [3]:\n\n- fixed line lengths and made comparison an explicit == 0 (Andrii"", ' patch 1)\n- moved btf_iter.c changes to separate patch (Andrii', ' patch 3)\n- grouped common targets in kernel/bpf/Makefile (Andrii', ' patch 4)\n- updated bpf_testmod ctx alloc to use GFP_ATOMIC', ' and updated dtor\n  selftest to use map-based dtor cleanup (Eduard', ' patch 6)\n\n[1] https://lore.kernel.org/bpf/20240613095014.357981-1-alan.maguire@oracle.com/\n[2] https://lore.kernel.org/bpf/20240517102714.4072080-1-alan.maguire@oracle.com/\n[3] https://lore.kernel.org/bpf/20240618162449.809994-1-alan.maguire@oracle.com/\n====================\n\nLink: https://lore.kernel.org/r/20240620091733.1967885-1-alan.maguire@oracle.com\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\n', '']",This commit introduces follow-ups to the resilient split BTF series focusing on libbpf improvements and test coverage additions.,"resilient,BTF,libbpf",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
47a8cf0c5b3f6769b9d558301735c75119a0a165,47a8cf0c5b3f6769b9d558301735c75119a0a165,Alan Maguire,alan.maguire@oracle.com,1718875053,Andrii Nakryiko,andrii@kernel.org,1719006389,4af832750443c5224152d4bdae82c8e69fc674c8,46fb0b62ea29c0dbcb3e44f1d67aafe79bc6e045,"selftests/bpf: Add kfunc_call test for simple dtor in bpf_testmod

add simple kfuncs to create/destroy a context type to bpf_testmod","
register them and add a kfunc_call test to use them.  This provides
test coverage for registration of dtor kfuncs from modules.

By transferring the context pointer to a map value as a __kptr
we also trigger the map-based dtor cleanup logic","[' improving test\ncoverage.\n\nSuggested-by: Eduard Zingerman <eddyz87@gmail.com>\nSigned-off-by: Alan Maguire <alan.maguire@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240620091733.1967885-7-alan.maguire@oracle.com\n', '']",Added kfunc_call test for destructor logic in bpf_testmod selftests.,"kfuncs,selftests,destructor",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
46fb0b62ea29c0dbcb3e44f1d67aafe79bc6e045,46fb0b62ea29c0dbcb3e44f1d67aafe79bc6e045,Alan Maguire,alan.maguire@oracle.com,1718875052,Andrii Nakryiko,andrii@kernel.org,1719006307,ee099472310e53d874ad531b3747d3ea760a1293,8646db238997df36c6ad71a9d7e0b52ceee221b2,kbuild,"bpf: Add module-specific pahole flags for distilled base BTF

Support creation of module BTF along with distilled base BTF;
the latter is stored in a .BTF.base ELF section and supplements
split BTF references to base BTF with information about base types","['\nallowing for later relocation of split BTF with a (possibly\nchanged) base.  resolve_btfids detects the presence of a .BTF.base\nsection and will use it instead of the base BTF it is passed in\nBTF id resolution.\n\nModules will be built with a distilled .BTF.base section for external\nmodule build', ' i.e.\n\nmake -C. -M=path2/module\n\n...while in-tree module build as part of a normal kernel build will\nnot generate distilled base BTF; this is because in-tree modules\nchange with the kernel and do not require BTF relocation for the\nrunning vmlinux.\n\nSigned-off-by: Alan Maguire <alan.maguire@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nReviewed-by: Eduard Zingerman <eddyz87@gmail.com>\nLink: https://lore.kernel.org/bpf/20240620091733.1967885-6-alan.maguire@oracle.com\n', '']",The commit adds support for module BTF and distilled base BTF with corresponding pahole flags.,"module BTF, distilled BTF, pahole flags",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The BPF Type Format (BTF),"['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
8646db238997df36c6ad71a9d7e0b52ceee221b2,8646db238997df36c6ad71a9d7e0b52ceee221b2,Alan Maguire,alan.maguire@oracle.com,1718875051,Andrii Nakryiko,andrii@kernel.org,1719006307,3968d9444fab7f563fc71f78ac0fb2fd5df188e0,e7ac331b30555cf1a0826784a346f36dbf800451,libbpf,"bpf: Share BTF relocate-related code with kernel

Share relocation implementation with the kernel.  As part of this","['\nwe also need the type/string iteration functions so also share\nbtf_iter.c file. Relocation code in kernel and userspace is identical\nsave for the impementation of the reparenting of split BTF to the\nrelocated base BTF and retrieval of the BTF header from ""struct btf"";\nthese small functions need separate user-space and kernel implementations\nfor the separate ""struct btf""s they operate upon.\n\nOne other wrinkle on the kernel side is we have to map .BTF.ids in\nmodules as they were generated with the type ids used at BTF encoding\ntime. btf_relocate() optionally returns an array mapping from old BTF\nids to relocated ids', ' so we use that to fix up these references where\nneeded for kfuncs.\n\nSigned-off-by: Alan Maguire <alan.maguire@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nLink: https://lore.kernel.org/bpf/20240620091733.1967885-5-alan.maguire@oracle.com\n', '']",Share BTF relocation implementation code between libbpf and the kernel for unified handling.,"BTF,relocation,kernel",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
e7ac331b30555cf1a0826784a346f36dbf800451,e7ac331b30555cf1a0826784a346f36dbf800451,Alan Maguire,alan.maguire@oracle.com,1718875050,Andrii Nakryiko,andrii@kernel.org,1719006307,954e49699d647af7a1139b9d4879fc1a1ea52cd8,d4e48e3dd45017abdd69a19285d197de897ef44f,"libbpf: Split field iter code into its own file kernel

This will allow it to be shared with the kernel.  No functional change.

Suggested-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240620091733.1967885-4-alan.maguire@oracle.com
",,Refactor field iterator code in libbpf to a separate file for kernel sharing.,"libbpf, refactor, kernel",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d4e48e3dd45017abdd69a19285d197de897ef44f,d4e48e3dd45017abdd69a19285d197de897ef44f,Alan Maguire,alan.maguire@oracle.com,1718875049,Andrii Nakryiko,andrii@kernel.org,1719006307,a0f022a078e3faa261970df64601e3b446660f2e,d1cf840854bb603c0718a011bc993f69f2df014e,module," bpf: Store BTF base pointer in struct module

...as this will allow split BTF modules with a base BTF
representation (rather than the full vmlinux BTF at time of
BTF encoding) to resolve their references to kernel types in a
way that is more resilient to small changes in kernel types.

This will allow modules that are not built every time the kernel
is to provide more resilient BTF","[' rather than have it invalidated\nevery time BTF ids for core kernel types change.\n\nFields are ordered to avoid holes in struct module.\n\nSigned-off-by: Alan Maguire <alan.maguire@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nReviewed-by: Luis Chamberlain <mcgrof@kernel.org>\nAcked-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240620091733.1967885-3-alan.maguire@oracle.com\n', '']",The commit stores the BTF base pointer in struct module to improve BTF resilience in split BTF modules.,"BTF, module, resilience",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d1cf840854bb603c0718a011bc993f69f2df014e,d1cf840854bb603c0718a011bc993f69f2df014e,Alan Maguire,alan.maguire@oracle.com,1718875048,Andrii Nakryiko,andrii@kernel.org,1719006307,00e35f54f2c4eab841b444bc7352d1aa682d917a,cd387ce54834bc7808082c471fd745ce85a0e21f,libbpf: BTF relocation followup fixing naming," loop logic

Use less verbose names in BTF relocation code and fix off-by-one error
and typo in btf_relocate.c.  Simplify loop over matching distilled
types","[' moving from assigning a _next value in loop body to moving\nmatch check conditions into the guard.\n\nSuggested-by: Andrii Nakryiko <andrii.nakryiko@gmail.com>\nSigned-off-by: Alan Maguire <alan.maguire@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nLink: https://lore.kernel.org/bpf/20240620091733.1967885-2-alan.maguire@oracle.com\n', '']",Fix naming issues and simplify loop logic in BTF relocation code of libbpf.,"BTF relocation, naming, fix",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"[""It's not related to any of the above.""]"
cd387ce54834bc7808082c471fd745ce85a0e21f,cd387ce54834bc7808082c471fd745ce85a0e21f,Mykyta Yatsenko,yatsenko@meta.com,1718993004,Andrii Nakryiko,andrii@kernel.org,1719005663,369ff5d92a6d9fbdf74906d9ba35ad064f8ec406,2bb138cb20a6a347cfed84381430cd25e05f118e,"selftests/bpf: Test struct_ops bpf map auto-attach

Adding selftest to verify that struct_ops maps are auto attached by
bpf skeleton's `*__attach` function.

Signed-off-by: Mykyta Yatsenko <yatsenko@meta.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240621180324.238379-1-yatsenko@meta.com
",,Add selftest for verifying auto-attachment of struct_ops bpf maps by bpf skeleton.,"selftest, struct_ops, auto-attach",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2bb138cb20a6a347cfed84381430cd25e05f118e,2bb138cb20a6a347cfed84381430cd25e05f118e,Puranjay Mohan,puranjay@kernel.org,1718802814,Andrii Nakryiko,andrii@kernel.org,1719005313,a3e9841f3e93378a7db305fdfe5a3777b3f9142b,2807db78ab302eab2c86c5924e4079adb63fd7c8,bpf," arm64: Inline bpf_get_current_task/_btf() helpers

On ARM64","[' the pointer to task_struct is always available in the sp_el0\nregister and therefore the calls to bpf_get_current_task() and\nbpf_get_current_task_btf() can be inlined into a single MRS instruction.\n\nHere is the difference before and after this change:\n\nBefore:\n\n; struct task_struct *task = bpf_get_current_task_btf();\n  54:   mov     x10', ' #0xffffffffffff7978        // #-34440\n  58:   movk    x10', ' #0x802b', ' lsl #16\n  5c:   movk    x10', ' #0x8000', ' lsl #32\n  60:   blr     x10          -------------->    0xffff8000802b7978 <+0>:     mrs     x0', ' sp_el0\n  64:   add     x7', ' x0', ' #0x0 <--------------    0xffff8000802b797c <+4>:     ret\n\nAfter:\n\n; struct task_struct *task = bpf_get_current_task_btf();\n  54:   mrs     x7', ' sp_el0\n\nThis shows around 1% performance improvement in artificial microbenchmark.\n\nSigned-off-by: Puranjay Mohan <puranjay@kernel.org>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Xu Kuohai <xukuohai@huawei.com>\nAcked-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240619131334.4297-1-puranjay@kernel.org\n', '']",Inline bpf_get_current_task and bpf_get_current_btf helpers for ARM64 architecture.,"bpf, ARM64, helpers",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,['other']
3e23c99764d465ae411f0729fd6d2e0e3edd0ade,3e23c99764d465ae411f0729fd6d2e0e3edd0ade,Cupertino Miranda,cupertino.miranda@oracle.com,1718633698,Andrii Nakryiko,andrii@kernel.org,1719003263,81295b6e2131a740e403fa22e4a373300c5d84b5,f06ae6194f278444201e0b041a00192d794f83b6,"selftests/bpf: Match tests against regular expression

This patch changes a few tests to make use of regular expressions.
Fixed tests otherwise fail when compiled with GCC.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240617141458.471620-3-cupertino.miranda@oracle.com
",,This patch updates selftests to use regular expressions to fix compatibility issues with GCC.,"selftests, regular expressions, GCC",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
f06ae6194f278444201e0b041a00192d794f83b6,f06ae6194f278444201e0b041a00192d794f83b6,Cupertino Miranda,cupertino.miranda@oracle.com,1718633697,Andrii Nakryiko,andrii@kernel.org,1719003263,3dfc649391aa0021a8e07a73225564436c139c0c,cc5083d1f3881624ad2de1f3cbb3a07e152cb254,"selftests/bpf: Support checks against a regular expression

Add support for __regex and __regex_unpriv macros to check the test
execution output against a regular expression. This is similar to __msg
and __msg_unpriv"," however those expect do substring matching.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240617141458.471620-2-cupertino.miranda@oracle.com
",[''],Added support for regex matching in selftests to verify test outputs against regular expressions.,"regex,selftests,macros",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
cfa1a2329a691ffd991fcf7248a57d752e712881,cfa1a2329a691ffd991fcf7248a57d752e712881,Daniel Borkmann,daniel@iogearbox.net,1718978907,Andrii Nakryiko,andrii@kernel.org,1719000261,1a983afbdfa114375ab712a5bb0a28e3fcd64e09,2673315947c9f3890ad34a8196f62142e4ddef5a,"bpf: Fix overrunning reservations in ringbuf

The BPF ring buffer internally is implemented as a power-of-2 sized circular
buffer"," with two logical and ever-increasing counters: consumer_pos is the
consumer counter to show which logical position the consumer consumed the
data","[' and producer_pos which is the producer counter denoting the amount of\ndata reserved by all producers.\n\nEach time a record is reserved', ' the producer that ""owns"" the record will\nsuccessfully advance producer counter. In user space each time a record is\nread', ' the consumer of the data advanced the consumer counter once it finished\nprocessing. Both counters are stored in separate pages so that from user\nspace', ' the producer counter is read-only and the consumer counter is read-write.\n\nOne aspect that simplifies and thus speeds up the implementation of both\nproducers and consumers is how the data area is mapped twice contiguously\nback-to-back in the virtual memory', ' allowing to not take any special measures\nfor samples that have to wrap around at the end of the circular buffer data\narea', ' because the next page after the last data page would be first data page\nagain', ' and thus the sample will still appear completely contiguous in virtual\nmemory.\n\nEach record has a struct bpf_ringbuf_hdr { u32 len; u32 pg_off; } header for\nbook-keeping the length and offset', ' and is inaccessible to the BPF program.\nHelpers like bpf_ringbuf_reserve() return `(void *)hdr + BPF_RINGBUF_HDR_SZ`\nfor the BPF program to use. Bing-Jhong and Muhammad reported that it is however\npossible to make a second allocated memory chunk overlapping with the first\nchunk and as a result', "" the BPF program is now able to edit first chunk's\nheader.\n\nFor example"", ' consider the creation of a BPF_MAP_TYPE_RINGBUF map with size\nof 0x4000. Next', ' the consumer_pos is modified to 0x3000 /before/ a call to\nbpf_ringbuf_reserve() is made. This will allocate a chunk A', ' which is in\n[0x0', '0x3008]', ' and the BPF program is able to edit [0x8', '0x3008]. Now', ' lets\nallocate a chunk B with size 0x3000. This will succeed because consumer_pos\nwas edited ahead of time to pass the `new_prod_pos - cons_pos > rb->mask`\ncheck. Chunk B will be in range [0x3008', '0x6010]', ' and the BPF program is able\nto edit [0x3010', '0x6010]. Due to the ring buffer memory layout mentioned\nearlier', ' the ranges [0x0', '0x4000] and [0x4000', '0x8000] point to the same data\npages. This means that chunk B at [0x4000', ""0x4008] is chunk A's header.\nbpf_ringbuf_submit() / bpf_ringbuf_discard() use the header's pg_off to then\nlocate the bpf_ringbuf itself via bpf_ringbuf_restore_from_rec(). Once chunk\nB modified chunk A's header"", ' then bpf_ringbuf_commit() refers to the wrong\npage and could cause a crash.\n\nFix it by calculating the oldest pending_pos and check whether the range\nfrom the oldest outstanding record to the newest would span beyond the ring\nbuffer size. If that is the case', "" then reject the request. We've tested with\nthe ring buffer benchmark in BPF selftests (./benchs/run_bench_ringbufs.sh)\nbefore/after the fix and while it seems a bit slower on some benchmarks"", ' it\nis still not significantly enough to matter.\n\nFixes: 457f44363a88 (""bpf: Implement BPF ring buffer and verifier support for it"")\nReported-by: Bing-Jhong Billy Jheng <billy@starlabs.sg>\nReported-by: Muhammad Ramdhan <ramdhan@starlabs.sg>\nCo-developed-by: Bing-Jhong Billy Jheng <billy@starlabs.sg>\nCo-developed-by: Andrii Nakryiko <andrii@kernel.org>\nSigned-off-by: Bing-Jhong Billy Jheng <billy@starlabs.sg>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240621140828.18238-1-daniel@iogearbox.net\n', '']",The commit fixes an issue of overrunning reservations in the eBPF ring buffer.,"bpf, ringbuf, fix",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF maps,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2673315947c9f3890ad34a8196f62142e4ddef5a,2673315947c9f3890ad34a8196f62142e4ddef5a,Alexei Starovoitov,ast@kernel.org,1718759939,Daniel Borkmann,daniel@iogearbox.net,1718993929,0db77689f3fad96b70f2c84870b370bf2bedfe34,5337ac4c9b807bc46baa0713121a0afa8beacd70,"selftests/bpf: Tests with may_goto and jumps to the 1st insn

Add few tests with may_goto and jumps to the 1st insn.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240619011859.79334-2-alexei.starovoitov@gmail.com
",,Add test cases for may_goto and jumps to the first instruction in selftests/bpf.,"tests,may_goto,jumps",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
5337ac4c9b807bc46baa0713121a0afa8beacd70,5337ac4c9b807bc46baa0713121a0afa8beacd70,Alexei Starovoitov,ast@kernel.org,1718759938,Daniel Borkmann,daniel@iogearbox.net,1718993920,cfb42debac3f1aca052104d1b69c1e857f600dad,66b5867150630e8f9c9a2b7430e55a3beaa83a5b,"bpf: Fix the corner case with may_goto and jump to the 1st insn.

When the following program is processed by the verifier:
L1: may_goto L2
    goto L1
L2: w0 = 0
    exit

the may_goto insn is first converted to:
L1: r11 = *(u64 *)(r10 -8)
    if r11 == 0x0 goto L2
    r11 -= 1
    *(u64 *)(r10 -8) = r11
    goto L1
L2: w0 = 0
    exit

then later as the last step the verifier inserts:
  *(u64 *)(r10 -8) = BPF_MAX_LOOPS
as the first insn of the program to initialize loop count.

When the first insn happens to be a branch target of some jmp the
bpf_patch_insn_data() logic will produce:
L1: *(u64 *)(r10 -8) = BPF_MAX_LOOPS
    r11 = *(u64 *)(r10 -8)
    if r11 == 0x0 goto L2
    r11 -= 1
    *(u64 *)(r10 -8) = r11
    goto L1
L2: w0 = 0
    exit

because instruction patching adjusts all jmps and calls"," but for this
particular corner case it's incorrect and the L1 label should be one
instruction down","["" like:\n    *(u64 *)(r10 -8) = BPF_MAX_LOOPS\nL1: r11 = *(u64 *)(r10 -8)\n    if r11 == 0x0 goto L2\n    r11 -= 1\n    *(u64 *)(r10 -8) = r11\n    goto L1\nL2: w0 = 0\n    exit\n\nand that's what this patch is fixing.\nAfter bpf_patch_insn_data() call adjust_jmp_off() to adjust all jmps\nthat point to newly insert BPF_ST insn to point to insn after.\n\nNote that bpf_patch_insn_data() cannot easily be changed to accommodate\nthis logic"", ' since jumps that point before or after a sequence of patched\ninstructions have to be adjusted with the full length of the patch.\n\nConceptually it\'s somewhat similar to ""insert"" of instructions between other\ninstructions with weird semantics. Like ""insert"" before 1st insn would require\nadjustment of CALL insns to point to newly inserted 1st insn', ' but not an\nadjustment JMP insns that point to 1st', ' yet still adjusting JMP insns that\ncross over 1st insn (point to insn before or insn after)', "" hence use simple\nadjust_jmp_off() logic to fix this corner case. Ideally bpf_patch_insn_data()\nwould have an auxiliary info to say where 'the start of newly inserted patch\nis'"", ' but it would be too complex for backport.\n\nFixes: 011832b97b31 (""bpf: Introduce may_goto instruction"")\nReported-by: Zac Ecob <zacecob@protonmail.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nCloses: https://lore.kernel.org/bpf/CAADnVQJ_WWx8w4b=6Gc2EpzAjgv+6A0ridnMz2TvS2egj4r3Gw@mail.gmail.com/\nLink: https://lore.kernel.org/bpf/20240619011859.79334-1-alexei.starovoitov@gmail.com\n', '']",Fixes a corner case in the eBPF verifier related to jump target and loop initialization.,"verifier, jump, loop",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
cc5083d1f3881624ad2de1f3cbb3a07e152cb254,cc5083d1f3881624ad2de1f3cbb3a07e152cb254,Donglin Peng,dolinux.peng@gmail.com,1718799835,Daniel Borkmann,daniel@iogearbox.net,1718992817,f946efba13cc8cb24aa7229b10a77870e837c7a5,6ddf3a9abd9fdfdd63d8c906fc1393f7950c23f4,"libbpf: Checking the btf_type kind when fixing variable offsets

I encountered an issue when building the test_progs from the repository [1]:

  $ pwd
  /work/Qemu/x86_64/linux-6.10-rc2/tools/testing/selftests/bpf/

  $ make test_progs V=1
  [...]
  ./tools/sbin/bpftool gen object ./ip_check_defrag.bpf.linked2.o ./ip_check_defrag.bpf.linked1.o
  libbpf: failed to find symbol for variable 'bpf_dynptr_slice' in section '.ksyms'
  Error: failed to link './ip_check_defrag.bpf.linked1.o': No such file or directory (2)
  [...]

Upon investigation"," I discovered that the btf_types referenced in the '.ksyms'
section had a kind of BTF_KIND_FUNC instead of BTF_KIND_VAR:

  $ bpftool btf dump file ./ip_check_defrag.bpf.linked1.o
  [...]
  [2] DATASEC '.ksyms' size=0 vlen=2
        type_id=16 offset=0 size=0 (FUNC 'bpf_dynptr_from_skb')
        type_id=17 offset=0 size=0 (FUNC 'bpf_dynptr_slice')
  [...]
  [16] FUNC 'bpf_dynptr_from_skb' type_id=82 linkage=extern
  [17] FUNC 'bpf_dynptr_slice' type_id=85 linkage=extern
  [...]

For a detailed analysis","[' please refer to [2]. We can add a kind checking to\nfix the issue.\n\n  [1] https://github.com/eddyz87/bpf/tree/binsort-btf-dedup\n  [2] https://lore.kernel.org/all/0c0ef20c-c05e-4db9-bad7-2cbc0d6dfae7@oracle.com/\n\nFixes: 8fd27bf69b86 (""libbpf: Add BPF static linker BTF and BTF.ext support"")\nSigned-off-by: Donglin Peng <dolinux.peng@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: Alan Maguire <alan.maguire@oracle.com>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nLink: https://lore.kernel.org/bpf/20240619122355.426405-1-dolinux.peng@gmail.com\n', '']",This commit addresses an issue with BTF_KIND_FUNC being incorrectly used instead of BTF_KIND_VAR in the libbpf component.,"btf_type, libbpf, variable",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
6ddf3a9abd9fdfdd63d8c906fc1393f7950c23f4,6ddf3a9abd9fdfdd63d8c906fc1393f7950c23f4,Matt Bobrowski,mattbobrowski@google.com,1718738962,Daniel Borkmann,daniel@iogearbox.net,1718992557,9723bc5015ae8a0d3dfaa9672644523089f76fc4,651337c7ca82c259bf5c8fe9beda9673531a0031,"bpf: Add security_file_post_open() LSM hook to sleepable_lsm_hooks

The new generic LSM hook security_file_post_open() was recently added
to the LSM framework in commit 8f46ff5767b0b (""security: Introduce
file_post_open hook""). Let's proactively add this generic LSM hook to
the sleepable_lsm_hooks BTF ID set"," because I can't see there being
any strong reasons not to","["" and it's only a matter of time before\nsomeone else comes around and asks for it to be there.\n\nsecurity_file_post_open() is inherently sleepable as it's purposely\nsituated in the kernel that allows LSMs to directly read out the\ncontents of the backing file if need be. Additionally"", "" it's called\ndirectly after security_file_open()"", ' and that LSM hook in itself\nalready exists in the sleepable_lsm_hooks BTF ID set.\n\nSigned-off-by: Matt Bobrowski <mattbobrowski@google.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240618192923.379852-1-mattbobrowski@google.com\n', '']",Add security_file_post_open LSM hook to sleepable_lsm_hooks BTF ID set in eBPF.,"security,Lsm hook,sleepable_lsm_hooks",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The BPF Type Format (BTF),['LSM like programs']
651337c7ca82c259bf5c8fe9beda9673531a0031,651337c7ca82c259bf5c8fe9beda9673531a0031,Andrii Nakryiko,andrii@kernel.org,1718735912,Daniel Borkmann,daniel@iogearbox.net,1718992389,d97738b131d56d20f411fab0c0bb7fef77b2230a,717d6313bba1b3179f0bf1026aaec6b7e26f484e,"bpftool: Allow compile-time checks of BPF map auto-attach support in skeleton

New versions of bpftool now emit additional link placeholders for BPF
maps (struct_ops maps are the only maps right now that support
attachment)"," and set up BPF skeleton in such a way that libbpf will
auto-attach BPF maps automatically","["" assumming libbpf is recent enough\n(v1.5+). Old libbpf will do nothing with those links and won't attempt\nto auto-attach maps. This allows user code to handle both pre-v1.5 and\nv1.5+ versions of libbpf at runtime"", "" if necessary.\n\nBut if users don't have (or don't want to) control bpftool version that\ngenerates skeleton"", "" then they can't just assume that skeleton will have\nlink placeholders. To make this detection possible and easy"", "" let's add\nthe following to generated skeleton header file:\n\n  #define BPF_SKEL_SUPPORTS_MAP_AUTO_ATTACH 1\n\nThis can be used during compilation time to guard code that accesses\nskel->links.<map> slots.\n\nNote"", ' if auto-attachment is undesirable', ' libbpf allows to disable this\nthrough bpf_map__set_autoattach(map', ' false). This is necessary only on\nlibbpf v1.5+', "" older libbpf doesn't support map auto-attach anyways.\n\nLibbpf version can be detected at compilation time using\nLIBBPF_MAJOR_VERSION and LIBBPF_MINOR_VERSION macros"", ' or at runtime with\nlibbpf_major_version() and libbpf_minor_version() APIs.\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Quentin Monnet <qmo@kernel.org>\nLink: https://lore.kernel.org/bpf/20240618183832.2535876-1-andrii@kernel.org\n', '']",The commit enhances bpftool to support compile-time checks for BPF map auto-attach in skeletons.,"bpftool,BPF map,auto-attach",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The bpftool utility,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
717d6313bba1b3179f0bf1026aaec6b7e26f484e,717d6313bba1b3179f0bf1026aaec6b7e26f484e,Jiri Olsa,jolsa@kernel.org,1718784984,Daniel Borkmann,daniel@iogearbox.net,1718991156,8d62e383d7a1c5b50b35979582e0d9bf16e16082,1ae7a19e37630d3235bc68cac9da4e032cad8136,"bpf: Change bpf_session_cookie return value to __u64 *

This reverts [1] and changes return value for bpf_session_cookie
in bpf selftests. Having long * might lead to problems on 32-bit
architectures.

Fixes: 2b8dd87332cd (""bpf: Make bpf_session_cookie() kfunc return long *"")
Suggested-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240619081624.1620152-1-jolsa@kernel.org
",,The commit reverts and modifies the return type of bpf_session_cookie to __u64 * for compatibility with 32-bit architectures.,"bpf, session_cookie, architectures",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
c28947de2bed40217cf256c5d0d16880054fcf13,c28947de2bed40217cf256c5d0d16880054fcf13,Ido Schimmel,idosch@nvidia.com,1718954354,David S. Miller,davem@davemloft.net,1718976632,7b33393b52a3503889b7a99c0a42bcc438f1a5b8,0602697d6f4d72b0bc5edbc76afabf6aaa029a69,"mlxsw: spectrum_buffers: Fix memory corruptions on Spectrum-4 systems

The following two shared buffer operations make use of the Shared Buffer
Status Register (SBSR):

 # devlink sb occupancy snapshot pci/0000:01:00.0
 # devlink sb occupancy clearmax pci/0000:01:00.0

The register has two masks of 256 bits to denote on which ingress /
egress ports the register should operate on. Spectrum-4 has more than
256 ports"," so the register was extended by cited commit with a new
'port_page' field.

However","["" when filling the register's payload"", ' the driver specifies the\nports as absolute numbers and not relative to the first port of the port\npage', ' resulting in memory corruptions [1].\n\nFix by specifying the ports relative to the first port of the port page.\n\n[1]\nBUG: KASAN: slab-use-after-free in mlxsw_sp_sb_occ_snapshot+0xb6d/0xbc0\nRead of size 1 at addr ffff8881068cb00f by task devlink/1566\n[...]\nCall Trace:\n <TASK>\n dump_stack_lvl+0xc6/0x120\n print_report+0xce/0x670\n kasan_report+0xd7/0x110\n mlxsw_sp_sb_occ_snapshot+0xb6d/0xbc0\n mlxsw_devlink_sb_occ_snapshot+0x75/0xb0\n devlink_nl_sb_occ_snapshot_doit+0x1f9/0x2a0\n genl_family_rcv_msg_doit+0x20c/0x300\n genl_rcv_msg+0x567/0x800\n netlink_rcv_skb+0x170/0x450\n genl_rcv+0x2d/0x40\n netlink_unicast+0x547/0x830\n netlink_sendmsg+0x8d4/0xdb0\n __sys_sendto+0x49b/0x510\n __x64_sys_sendto+0xe5/0x1c0\n do_syscall_64+0xc1/0x1d0\n entry_SYSCALL_64_after_hwframe+0x77/0x7f\n[...]\nAllocated by task 1:\n kasan_save_stack+0x33/0x60\n kasan_save_track+0x14/0x30\n __kasan_kmalloc+0x8f/0xa0\n copy_verifier_state+0xbc2/0xfb0\n do_check_common+0x2c51/0xc7e0\n bpf_check+0x5107/0x9960\n bpf_prog_load+0xf0e/0x2690\n __sys_bpf+0x1a61/0x49d0\n __x64_sys_bpf+0x7d/0xc0\n do_syscall_64+0xc1/0x1d0\n entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\nFreed by task 1:\n kasan_save_stack+0x33/0x60\n kasan_save_track+0x14/0x30\n kasan_save_free_info+0x3b/0x60\n poison_slab_object+0x109/0x170\n __kasan_slab_free+0x14/0x30\n kfree+0xca/0x2b0\n free_verifier_state+0xce/0x270\n do_check_common+0x4828/0xc7e0\n bpf_check+0x5107/0x9960\n bpf_prog_load+0xf0e/0x2690\n __sys_bpf+0x1a61/0x49d0\n __x64_sys_bpf+0x7d/0xc0\n do_syscall_64+0xc1/0x1d0\n entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\nFixes: f8538aec88b4 (""mlxsw: Add support for more than 256 ports in SBSR register"")\nSigned-off-by: Ido Schimmel <idosch@nvidia.com>\nReviewed-by: Petr Machata <petrm@nvidia.com>\nReviewed-by: Simon Horman <horms@kernel.org>\nSigned-off-by: Petr Machata <petrm@nvidia.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>\n', '']",Fixed memory corruption issues on Spectrum-4 systems by adjusting shared buffer register operations.,"memory corruption,Spectrum-4,register",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['other']
8cab7cdcf5aebec354ede98bca28c08dd9df924c,8cab7cdcf5aebec354ede98bca28c08dd9df924c,Geliang Tang,tanggeliang@kylinos.cn,1718936163,Alexei Starovoitov,ast@kernel.org,1718941364,cc0e37cedfc96abfb9183b0878d6e782c132349a,fb69f71cf585aabb2f59c6d7958bccfaebe64f5d,"selftests/bpf: Use start_server_str in test_tcp_check_syncookie_user

Since start_server_str() is added now"," it can be used in script
test_tcp_check_syncookie_user.c instead of start_server_addr() to
simplify the code.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/5d2f442261d37cff16c1f1b21a2b188508ab67fa.1718932493.git.tanggeliang@kylinos.cn
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Refactor test_tcp_check_syncookie_user.c to use start_server_str for code simplification.,"selftests,bpf,simplify",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
fb69f71cf585aabb2f59c6d7958bccfaebe64f5d,fb69f71cf585aabb2f59c6d7958bccfaebe64f5d,Geliang Tang,tanggeliang@kylinos.cn,1718936162,Alexei Starovoitov,ast@kernel.org,1718941364,ca363cc0b4707c3d7d7591a966946bc1a6bd6b66,7f0d5140a6d69d3e63467a220a2a1e0c9ec1463a,"selftests/bpf: Use start_server_str in mptcp

Since start_server_str() is added now"," it can be used in mptcp.c in
start_mptcp_server() instead of using helpers make_sockaddr() and
start_server_addr() to simplify the code.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/16fb3e2cd60b64b5470b0e69f1aa233feaf2717c.1718932493.git.tanggeliang@kylinos.cn
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Simplify mptcp selftest code by using start_server_str function instead of additional helpers.,"mptcp,selftests,simplify",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['socket like programs', ""It's not related to any of the above.""]"
7f0d5140a6d69d3e63467a220a2a1e0c9ec1463a,7f0d5140a6d69d3e63467a220a2a1e0c9ec1463a,Geliang Tang,tanggeliang@kylinos.cn,1718936161,Alexei Starovoitov,ast@kernel.org,1718941364,1b6d9748d6add216e90b6161136506fef998c3ba,bbca57aa378b43d25af2ec360b3e8bc4185d65cf,"selftests/bpf: Drop noconnect from network_helper_opts

In test_bpf_ip_check_defrag_ok()"," the new helper client_socket() can be
used to replace connect_to_fd_opts() with ""noconnect"" opts","[' and the strcut\nmember ""noconnect"" of network_helper_opts can be dropped now', ' always\nconnect to server in connect_to_fd_opts().\n\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nLink: https://lore.kernel.org/r/f45760becce51986e4e08283c7df0f933eb0da14.1718932493.git.tanggeliang@kylinos.cn\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit removes 'noconnect' option from network_helper_opts in selftests/bpf.,"noconnect, network_helper_opts, selftests",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
bbca57aa378b43d25af2ec360b3e8bc4185d65cf,bbca57aa378b43d25af2ec360b3e8bc4185d65cf,Geliang Tang,tanggeliang@kylinos.cn,1718936160,Alexei Starovoitov,ast@kernel.org,1718941364,94814a35d74d8f74e43765e3adc758d201a1d9dc,08a5206240d3763e0c6d91a9a4a9bfbb8fc9600c,"selftests/bpf: Add client_socket helper

This patch extracts a new helper client_socket() from connect_to_fd_opts()
to create the client socket"," but don't connect to the server. Then
connect_to_fd_opts() can be implemented using client_socket() and
connect_fd_to_addr(). This helper can be used in connect_to_addr() too","['\nand make ""noconnect"" opts useless.\n\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nLink: https://lore.kernel.org/r/4169c554e1cee79223feea49a1adc459d55e1ffe.1718932493.git.tanggeliang@kylinos.cn\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",This commit introduces a new client_socket helper function for socket management in selftests/bpf.,"helper, client_socket, selftests",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
08a5206240d3763e0c6d91a9a4a9bfbb8fc9600c,08a5206240d3763e0c6d91a9a4a9bfbb8fc9600c,Geliang Tang,tanggeliang@kylinos.cn,1718936159,Alexei Starovoitov,ast@kernel.org,1718941364,0cb06f343cabfca290a85b0a8efb4abb7791db0c,34ad6ec972525b903d4680202d7b8360f71d0d89,"selftests/bpf: Use connect_to_addr in connect_to_fd_opt

This patch moves ""post_socket_cb"" and ""noconnect"" into connect_to_addr()","
then connect_to_fd_opts() can be implemented by getsockname() and
connect_to_addr(). This change makes connect_to_* interfaces more unified.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/4569c30533e14c22fae6c05070aad809720551c1.1718932493.git.tanggeliang@kylinos.cn
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],"The commit unifies the connect_to_fd_opts and connect_to_addr interfaces in selftests/bpf by moving ""post_socket_cb"" and ""noconnect"" into connect_to_addr.","selftests,bpf,connect_to_addr",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
34ad6ec972525b903d4680202d7b8360f71d0d89,34ad6ec972525b903d4680202d7b8360f71d0d89,Geliang Tang,tanggeliang@kylinos.cn,1718936158,Alexei Starovoitov,ast@kernel.org,1718941364,476a2cb04e158fa6be0acc0711d12dd1368a53fb,bf977ee4a9e2ad8a41b3a2497aada5e7eb09eaea,"selftests/bpf: Drop type from network_helper_opts

The opts.{type"," noconnect} is at least a bit non intuitive or unnecessary.
The only use case now is in test_bpf_ip_check_defrag_ok which ends up
bypassing most (or at least some) of the connect_to_fd_opts() logic. It's
much better that test should have its own connect_to_fd_opts() instead.

This patch adds a new ""type"" parameter for connect_to_fd_opts()","[' then\nopts->type and getsockopt(SO_TYPE) can be replaced by ""type"" parameter in\nit.\n\nIn connect_to_fd()', ' use getsockopt(SO_TYPE) to get ""type"" value and pass\nit to connect_to_fd_opts().\n\nIn bpf_tcp_ca.c and cgroup_v1v2.c', ' ""SOCK_STREAM"" types are passed to\nconnect_to_fd_opts()', ' and in ip_check_defrag.c', ' different types ""SOCK_RAW""\nand ""SOCK_DGRAM"" are passed to it.\n\nWith these changes', ' the strcut member ""type"" of network_helper_opts can be\ndropped now.\n\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nLink: https://lore.kernel.org/r/cfd20b5ad4085c1d1af5e79df3b09013a407199f.1718932493.git.tanggeliang@kylinos.cn\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",This commit modifies test logic in connect_to_fd_opts for better functionality separation in selftests/bpf.,"selftests, network_helper_opts, connect_to_fd_opts",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
bf977ee4a9e2ad8a41b3a2497aada5e7eb09eaea,bf977ee4a9e2ad8a41b3a2497aada5e7eb09eaea,Alexei Starovoitov,ast@kernel.org,1718938227,Alexei Starovoitov,ast@kernel.org,1718938233,008909b701e35b7a7c65c468684f2e7ca18235fe,3b06304370931f90cd6f50ea9dd55603429b13dc 21ab4980e02d495174bc64c00ceb4d3cf87fadb1,"Merge branch 'fix-compiler-warnings-looking-for-suggestions'

Rafael Passos says:

====================
Fix compiler warnings"," looking for suggestions

Hi","['\nThis patchset has a few fixes to compiler warnings.\nI am studying the BPF subsystem and wish to bring more tangible contributions.\nI would appreciate receiving suggestions on things to investigate.\nI also documented a bit in my blog. I could help with docs here', ' too.\nhttps://rcpassos.me/post/linux-ebpf-understanding-kernel-level-mechanics\nThanks!\n\nChangelog V1 -> V2:\n- rebased all commits to updated for-next base\n- removes new cases of the extra parameter for bpf_jit_binary_pack_finalize\n- built and tested for ARM64\n- sent the series for the test workflow:\n  https://github.com/kernel-patches/bpf/pull/7198\n====================\n\nAcked-by: Puranjay Mohan <puranjay@kernel.org>\nAcked-by: Jiri Olsa <jolsa@kernel.org>\nLink: https://lore.kernel.org/r/20240615022641.210320-1-rafael@rcpassos.me\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",This commit fixes compiler warnings by merging relevant changes.,"fix,compiler,warnings",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
21ab4980e02d495174bc64c00ceb4d3cf87fadb1,21ab4980e02d495174bc64c00ceb4d3cf87fadb1,Rafael Passos,rafael@rcpassos.me,1718418250,Alexei Starovoitov,ast@kernel.org,1718938226,008909b701e35b7a7c65c468684f2e7ca18235fe,ab224b9ef7c4eaa752752455ea79bd7022209d5d,"bpf: remove redeclaration of new_n in bpf_verifier_vlog

This new_n is defined in the start of this function.
Its value is overwritten by `new_n = min(n"," log->len_total);`
a couple lines before my change","['\nrendering the shadow declaration unnecessary.\n\nSigned-off-by: Rafael Passos <rafael@rcpassos.me>\nLink: https://lore.kernel.org/r/20240615022641.210320-4-rafael@rcpassos.me\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Removed redundant redeclaration of variable new_n in bpf_verifier_vlog function.,"redundant,declaration,bpf_verifier",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
ab224b9ef7c4eaa752752455ea79bd7022209d5d,ab224b9ef7c4eaa752752455ea79bd7022209d5d,Rafael Passos,rafael@rcpassos.me,1718418249,Alexei Starovoitov,ast@kernel.org,1718938226,139b0f1b204218f294d7aeff9cc180616095bd2f,9919c5c98cb25dbf7e76aadb9beab55a2a25f830,"bpf: remove unused parameter in __bpf_free_used_btfs

Fixes a compiler warning. The __bpf_free_used_btfs function
was taking an extra unused struct bpf_prog_aux *aux param

Signed-off-by: Rafael Passos <rafael@rcpassos.me>
Link: https://lore.kernel.org/r/20240615022641.210320-3-rafael@rcpassos.me
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Remove unused parameter in __bpf_free_used_btfs function to fix compiler warning.,"unused parameter, compiler warning, bpf",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
9919c5c98cb25dbf7e76aadb9beab55a2a25f830,9919c5c98cb25dbf7e76aadb9beab55a2a25f830,Rafael Passos,rafael@rcpassos.me,1718418248,Alexei Starovoitov,ast@kernel.org,1718938226,c399342992d107b9aa03abe120d9950ba635073d,3b06304370931f90cd6f50ea9dd55603429b13dc,"bpf: remove unused parameter in bpf_jit_binary_pack_finalize

Fixes a compiler warning. the bpf_jit_binary_pack_finalize function
was taking an extra bpf_prog parameter that went unused.
This removves it and updates the callers accordingly.

Signed-off-by: Rafael Passos <rafael@rcpassos.me>
Link: https://lore.kernel.org/r/20240615022641.210320-2-rafael@rcpassos.me
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Remove unused parameter from bpf_jit_binary_pack_finalize to fix compiler warning.,"unused parameter, compiler warning, bpf_jit_binary_pack_finalize",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
3b06304370931f90cd6f50ea9dd55603429b13dc,3b06304370931f90cd6f50ea9dd55603429b13dc,Alexei Starovoitov,ast@kernel.org,1718938109,Alexei Starovoitov,ast@kernel.org,1718938109,bc2ef689e85ff2ba195560840d0171d8e3629887,f6afdaf72af7583d251bd569ded8d7d1eeb849c2 f663a03c8e35c5156bad073a4a8f5e673d656e3f,"Merge branch 'bpf-verifier-correct-tail_call_reachable-for-bpf-prog'

Leon Hwang says:

====================
bpf"," verifier: Correct tail_call_reachable for bpf prog

It's confusing to inspect 'prog->aux->tail_call_reachable' with drgn[0]","[""\nwhen bpf prog has tail call but 'tail_call_reachable' is false.\n\nThis patch corrects 'tail_call_reachable' when bpf prog has tail call.\n\nTherefore"", "" it's unnecessary to detect tail call in x86 jit. Let's remove\nit.\n\nChanges:\nv1 -> v2:\n* Address comment from Yonghong:\n  * Remove unnecessary tail call detection in x86 jit.\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\n---\n\nLinks:\n[0] https://github.com/osandov/drgn\n====================\n\nLink: https://lore.kernel.org/r/20240610124224.34673-1-hffilwlqm@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n"", '']",Merge branch to correct tail_call_reachable for BPF programs.,"merge, verifier, tail_call_reachable",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
f663a03c8e35c5156bad073a4a8f5e673d656e3f,f663a03c8e35c5156bad073a4a8f5e673d656e3f,Leon Hwang,hffilwlqm@gmail.com,1718023344,Alexei Starovoitov,ast@kernel.org,1718938109,bc2ef689e85ff2ba195560840d0171d8e3629887,01793ed86b5d7df1e956520b5474940743eb7ed8,bpf," x64: Remove tail call detection

As 'prog->aux->tail_call_reachable' is correct for tail call present","[""\nit's unnecessary to detect tail call in x86 jit.\n\nTherefore"", "" let's remove it.\n\nSigned-off-by: Leon Hwang <hffilwlqm@gmail.com>\nLink: https://lore.kernel.org/r/20240610124224.34673-3-hffilwlqm@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n"", '']","The commit removes tail call detection from x64, relying on prog->aux->tail_call_reachable.","tail call detection, x64, prog->aux->tail_call_reachable",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
01793ed86b5d7df1e956520b5474940743eb7ed8,01793ed86b5d7df1e956520b5474940743eb7ed8,Leon Hwang,hffilwlqm@gmail.com,1718023343,Alexei Starovoitov,ast@kernel.org,1718938109,5bb94d5dd2a14c8b1eae910e77505e039c80880a,f6afdaf72af7583d251bd569ded8d7d1eeb849c2,bpf," verifier: Correct tail_call_reachable for bpf prog

It's confusing to inspect 'prog->aux->tail_call_reachable' with drgn[0]","[""\nwhen bpf prog has tail call but 'tail_call_reachable' is false.\n\nThis patch corrects 'tail_call_reachable' when bpf prog has tail call.\n\nSigned-off-by: Leon Hwang <hffilwlqm@gmail.com>\nLink: https://lore.kernel.org/r/20240610124224.34673-2-hffilwlqm@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n"", '']",Corrects faulty 'tail_call_reachable' inspection in eBPF verifier.,"verifier, tail_call_reachable, bpf",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d5a7fc58da039903b332041e8c67daae36f08b50,d5a7fc58da039903b332041e8c67daae36f08b50,Linus Torvalds,torvalds@linux-foundation.org,1718905790,Linus Torvalds,torvalds@linux-foundation.org,1718905790,4b75c04264857a6c4d3e31cd980976be1026127e,042742a1ff1f37ca88c303a9e61afc8c56b23657 fba383985354e83474f95f36d7c65feb75dba19d,"Merge tag 'net-6.10-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 ""Including fixes from wireless"," bpf and netfilter.

  Happy summer solstice! The line count is a bit inflated by a selftest
  and update to a driver's FW interface header","[' in reality this is\n  slightly below average for us. We are expecting one driver fix from\n  Intel', ' but there are no big known issues.\n\n  Current release - regressions:\n\n   - ipv6: bring NLM_DONE out to a separate recv() again\n\n  Current release - new code bugs:\n\n   - wifi: cfg80211: wext: set ssids=NULL for passive scans via old wext API\n\n  Previous releases - regressions:\n\n   - wifi: mac80211: fix monitor channel setting with chanctx emulation\n     (probably most awaited of the fixes in this PR', ' tracked by Thorsten)\n\n   - usb: ax88179_178a: bring back reset on init', ' if PHY is disconnected\n\n   - bpf: fix UML x86_64 compile failure with BPF\n\n   - bpf: avoid splat in pskb_pull_reason()', ' sanity check added can be hit\n     with malicious BPF\n\n   - eth: mvpp2: use slab_build_skb() for packets in slab', ' driver was\n     missed during API refactoring\n\n   - wifi: iwlwifi: add missing unlock of mvm mutex\n\n  Previous releases - always broken:\n\n   - ipv6: add a number of missing null-checks for in6_dev_get()', ' in case\n     IPv6 disabling races with the datapath\n\n   - bpf: fix reg_set_min_max corruption of fake_reg\n\n   - sched: act_ct: add netns as part of the key of tcf_ct_flow_table""\n\n* tag \'net-6.10-rc5\' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (63 commits)\n  net: usb: rtl8150 fix unintiatilzed variables in rtl8150_get_link_ksettings\n  selftests: virtio_net: add forgotten config options\n  bnxt_en: Restore PTP tx_avail count in case of skb_pad() error\n  bnxt_en: Set TSO max segs on devices with limits\n  bnxt_en: Update firmware interface to 1.10.3.44\n  net: stmmac: Assign configured channel value to EXTTS event\n  net: do not leave a dangling sk pointer', "" when socket creation fails\n  net/tcp_ao: Don't leak ao_info on error-path\n  ice: Fix VSI list rule with ICE_SW_LKUP_LAST type\n  ipv6: bring NLM_DONE out to a separate recv() again\n  selftests: add selftest for the SRv6 End.DX6 behavior with netfilter\n  selftests: add selftest for the SRv6 End.DX4 behavior with netfilter\n  netfilter: move the sysctl nf_hooks_lwtunnel into the netfilter core\n  seg6: fix parameter passing when calling NF_HOOK() in End.DX4 and End.DX6 behaviors\n  netfilter: ipset: Fix suspicious rcu_dereference_protected()\n  selftests: openvswitch: Set value to nla flags.\n  octeontx2-pf: Fix linking objects into multiple modules\n  octeontx2-pf: Add error handling to VLAN unoffload handling\n  virtio_net: fixing XDP for fully checksummed packets handling\n  virtio_net: checksum offloading handling fix\n  ...\n"", '']",Merge networking fixes including wireless updates and selftest enhancements.,"networking, wireless, selftest",It's a bug fix.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
6cd4a78d962bebbaf8beb7d2ead3f34120e3f7b2,6cd4a78d962bebbaf8beb7d2ead3f34120e3f7b2,Ignat Korchagin,ignat@cloudflare.com,1718658125,Paolo Abeni,pabeni@redhat.com,1718872994,beb57e0cac5dc8498a2fea20db0c0df7a06e0a34,f9ae848904289ddb16c7c9e4553ed4c64300de49,net: do not leave a dangling sk pointer," when socket creation fails

It is possible to trigger a use-after-free by:
  * attaching an fentry probe to __sock_release() and the probe calling the
    bpf_get_socket_cookie() helper
  * running traceroute -I 1.1.1.1 on a freshly booted VM

A KASAN enabled kernel will log something like below (decoded and stripped):
==================================================================
BUG: KASAN: slab-use-after-free in __sock_gen_cookie (./arch/x86/include/asm/atomic64_64.h:15 ./include/linux/atomic/atomic-arch-fallback.h:2583 ./include/linux/atomic/atomic-instrumented.h:1611 net/core/sock_diag.c:29)
Read of size 8 at addr ffff888007110dd8 by task traceroute/299

CPU: 2 PID: 299 Comm: traceroute Tainted: G            E      6.10.0-rc2+ #2
Hardware name: QEMU Standard PC (i440FX + PIIX","[' 1996)', ' BIOS 1.16.2-debian-1.16.2-1 04/01/2014\nCall Trace:\n <TASK>\ndump_stack_lvl (lib/dump_stack.c:117 (discriminator 1))\nprint_report (mm/kasan/report.c:378 mm/kasan/report.c:488)\n? __sock_gen_cookie (./arch/x86/include/asm/atomic64_64.h:15 ./include/linux/atomic/atomic-arch-fallback.h:2583 ./include/linux/atomic/atomic-instrumented.h:1611 net/core/sock_diag.c:29)\nkasan_report (mm/kasan/report.c:603)\n? __sock_gen_cookie (./arch/x86/include/asm/atomic64_64.h:15 ./include/linux/atomic/atomic-arch-fallback.h:2583 ./include/linux/atomic/atomic-instrumented.h:1611 net/core/sock_diag.c:29)\nkasan_check_range (mm/kasan/generic.c:183 mm/kasan/generic.c:189)\n__sock_gen_cookie (./arch/x86/include/asm/atomic64_64.h:15 ./include/linux/atomic/atomic-arch-fallback.h:2583 ./include/linux/atomic/atomic-instrumented.h:1611 net/core/sock_diag.c:29)\nbpf_get_socket_ptr_cookie (./arch/x86/include/asm/preempt.h:94 ./include/linux/sock_diag.h:42 net/core/filter.c:5094 net/core/filter.c:5092)\nbpf_prog_875642cf11f1d139___sock_release+0x6e/0x8e\nbpf_trampoline_6442506592+0x47/0xaf\n__sock_release (net/socket.c:652)\n__sock_create (net/socket.c:1601)\n...\nAllocated by task 299 on cpu 2 at 78.328492s:\nkasan_save_stack (mm/kasan/common.c:48)\nkasan_save_track (mm/kasan/common.c:68)\n__kasan_slab_alloc (mm/kasan/common.c:312 mm/kasan/common.c:338)\nkmem_cache_alloc_noprof (mm/slub.c:3941 mm/slub.c:4000 mm/slub.c:4007)\nsk_prot_alloc (net/core/sock.c:2075)\nsk_alloc (net/core/sock.c:2134)\ninet_create (net/ipv4/af_inet.c:327 net/ipv4/af_inet.c:252)\n__sock_create (net/socket.c:1572)\n__sys_socket (net/socket.c:1660 net/socket.c:1644 net/socket.c:1706)\n__x64_sys_socket (net/socket.c:1718)\ndo_syscall_64 (arch/x86/entry/common.c:52 arch/x86/entry/common.c:83)\nentry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:130)\n\nFreed by task 299 on cpu 2 at 78.328502s:\nkasan_save_stack (mm/kasan/common.c:48)\nkasan_save_track (mm/kasan/common.c:68)\nkasan_save_free_info (mm/kasan/generic.c:582)\npoison_slab_object (mm/kasan/common.c:242)\n__kasan_slab_free (mm/kasan/common.c:256)\nkmem_cache_free (mm/slub.c:4437 mm/slub.c:4511)\n__sk_destruct (net/core/sock.c:2117 net/core/sock.c:2208)\ninet_create (net/ipv4/af_inet.c:397 net/ipv4/af_inet.c:252)\n__sock_create (net/socket.c:1572)\n__sys_socket (net/socket.c:1660 net/socket.c:1644 net/socket.c:1706)\n__x64_sys_socket (net/socket.c:1718)\ndo_syscall_64 (arch/x86/entry/common.c:52 arch/x86/entry/common.c:83)\nentry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:130)\n\nFix this by clearing the struct socket reference in sk_common_release() to cover\nall protocol families create functions', ' which may already attached the\nreference to the sk object with sock_init_data().\n\nFixes: c5dbb89fc2ac (""bpf: Expose bpf_get_socket_cookie to tracing programs"")\nSuggested-by: Kuniyuki Iwashima <kuniyu@amazon.com>\nSigned-off-by: Ignat Korchagin <ignat@cloudflare.com>\nCc: stable@vger.kernel.org\nLink: https://lore.kernel.org/netdev/20240613194047.36478-1-kuniyu@amazon.com/T/\nReviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>\nReviewed-by: D. Wythe <alibuda@linux.alibaba.com>\nLink: https://lore.kernel.org/r/20240617210205.67311-1-ignat@cloudflare.com\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>\n\n', '']",Fix use-after-free vulnerability related to dangling socket pointer during certain network operations.,"use-after-free,dangling pointer,socket",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,['tracepoints like programs']
66b5867150630e8f9c9a2b7430e55a3beaa83a5b,66b5867150630e8f9c9a2b7430e55a3beaa83a5b,Matt Bobrowski,mattbobrowski@google.com,1718632150,Daniel Borkmann,daniel@iogearbox.net,1718724886,45a2e55124ec7e153f5ed13ac32415eb37316ece,b90d77e5fd784ada62ddd714d15ee2400c28e1cf,"bpf: Update BPF LSM maintainer list

After catching up with KP recently"," we discussed that I will be now be
responsible for co-maintaining the BPF LSM. Adding myself as
designated maintainer of the BPF LSM","[' and specifying more files in\nwhich the BPF LSM maintenance responsibilities should now extend out\nto. This is at the back of all the BPF kfuncs that have been added\nrecently', ' which are fundamentally restricted to being used only from\nBPF LSM program types.\n\nSigned-off-by: Matt Bobrowski <mattbobrowski@google.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/ZnA-1qdtXS1TayD7@google.com\n', '']",Added Matt Bobrowski as a co-maintainer for the BPF LSM component.,"BPF LSM, maintainer, update",It's other type of commit.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['LSM like programs']
b90d77e5fd784ada62ddd714d15ee2400c28e1cf,b90d77e5fd784ada62ddd714d15ee2400c28e1cf,Alexei Starovoitov,ast@kernel.org,1718644692,Daniel Borkmann,daniel@iogearbox.net,1718723986,9586302ff2733e360769a93f8e73cf34744475c6,bfbcb2c9d2978a28e9f0a77100170dc14fcf7c79,"bpf: Fix remap of arena.

The bpf arena logic didn't account for mremap operation. Add a refcnt for
multiple mmap events to prevent use-after-free in arena_vm_close.

Fixes: 317460317a02 (""bpf: Introduce bpf_arena."")
Reported-by: Pengfei Xu <pengfei.xu@intel.com>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Barret Rhoden <brho@google.com>
Tested-by: Pengfei Xu <pengfei.xu@intel.com>
Closes: https://lore.kernel.org/bpf/Zmuw29IhgyPNKnIM@xpf.sh.intel.com
Link: https://lore.kernel.org/bpf/20240617171812.76634-1-alexei.starovoitov@gmail.com
",,Fix use-after-free bug in bpf_arena by adding a refcnt for mremap operations.,"bpf, arena, refcnt",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
f6afdaf72af7583d251bd569ded8d7d1eeb849c2,f6afdaf72af7583d251bd569ded8d7d1eeb849c2,Andrii Nakryiko,andrii@kernel.org,1718660312,Andrii Nakryiko,andrii@kernel.org,1718660505,9437b582fa99975de476fa3fec0f3ca0f395a5b9,dedf56d775c0bebbc3003bfb988dddaf0a583c28 6ba77385f386053cea2a1cad33717de74a26db4e,"Merge branch 'bpf-support-resilient-split-btf'

Alan Maguire says:

====================
bpf: support resilient split BTF

Split BPF Type Format (BTF) provides huge advantages in that kernel
modules only have to provide type information for types that they do not
share with the core kernel; for core kernel types"," split BTF refers to
core kernel BTF type ids.  So for a STRUCT sk_buff","[' a module that\nuses that structure (or a pointer to it) simply needs to refer to the\ncore kernel type id', ' saving the need to define the structure and its many\ndependents.  This cuts down on duplication and makes BTF as compact\nas possible.\n\nHowever', ' there is a downside.  This scheme requires the references from\nsplit BTF to base BTF to be valid not just at encoding time', ' but at use\ntime (when the module is loaded).  Even a small change in kernel types\ncan perturb the type ids in core kernel BTF', "" and - if the new reproducible\nBTF option is not used - pahole's parallel processing of compilation units\ncan lead to different type ids for the same kernel if the BTF is\nregenerated.\n\nSo we have a robustness problem for split BTF for cases where a module is\nnot always compiled at the same time as the kernel.  This problem is\nparticularly acute for distros which generally want module builders to be\nable to compile a module for the lifetime of a Linux stable-based release"", '\nand have it continue to be valid over the lifetime of that release', "" even\nas changes in data structures (and hence BTF types) accrue.  Today it's not\npossible to generate BTF for modules that works beyond the initial\nkernel it is compiled against - kernel bugfixes etc invalidate the split\nBTF references to vmlinux BTF"", ' and BTF is no longer usable for the\nmodule.\n\nThe goal of this series is to provide options to provide additional\ncontext for cases like this.  That context comes in the form of\ndistilled base BTF; it stands in for the base BTF', ' and contains\ninformation about the types referenced from split BTF', ' but not their\nfull descriptions.  The modified split BTF will refer to type ids in\nthis .BTF.base section', ' and when the kernel loads such modules it\nwill use that .BTF.base to map references from split BTF to the\nequivalent current vmlinux base BTF types.  Once this relocation\nprocess has succeeded', ' the module BTF available in /sys/kernel/btf\nwill look exactly as if it was built with the current vmlinux;\nreferences to base types will be fixed up etc.\n\nA module builder - using this series along with the pahole changes -\ncan then build a module with distilled base BTF via an out-of-tree\nmodule build', ' i.e.\n\nmake -C . M=path/2/module\n\nThe module will have a .BTF section (the split BTF) and a\n.BTF.base section.  The latter is small in size - distilled base\nBTF does not need full struct/union/enum information for named\ntypes for example.  For 2667 modules built with distilled base BTF', '\nthe average size observed was 1556 bytes (stddev 1563).  The overall\nsize added to this 2667 modules was 5.3Mb.\n\nNote that for the in-tree modules', "" this approach is not needed as\nsplit and base BTF in the case of in-tree modules are always built\nand re-built together.\n\nThe series first focuses on generating split BTF with distilled base\nBTF; then relocation support is added to allow split BTF with\nan associated distlled base to be relocated with a new base BTF.\n\nNext Eduard's patch allows BTF ELF parsing to work with both\n.BTF and .BTF.base sections; this ensures that bpftool will be\nable to dump BTF for a module with a .BTF.base section for example"", '\nor indeed dump relocated BTF where a module and a ""-B vmlinux""\nis supplied.\n\nThen we add support to resolve_btfids to ignore base BTF - i.e.\nto avoid relocation - if a .BTF.base section is found.  This ensures\nthe .BTF.ids section is populated with ids relative to the distilled\nbase (these will be relocated as part of module load).\n\nFinally the series supports storage of .BTF.base data/size in modules\nand supports sharing of relocation code with the kernel to allow\nrelocation of module BTF.  For the kernel', ' this relocation\nprocess happens at module load time', ' and we relocate split BTF\nreferences to point at types in the current vmlinux BTF.  As part of\nthis', ' .BTF.ids references need to be mapped also.\n\nSo concretely', ' what happens is\n\n- we generate split BTF in the .BTF section of a module that refers to\n  types in the .BTF.base section as base types; the latter are not full\n  type descriptions but provide information about the base type.  So\n  a STRUCT sk_buff would be represented as a FWD struct sk_buff in\n  distilled base BTF for example.\n- when the module is loaded', ' the split BTF is relocated with vmlinux\n  BTF; in the case of the FWD struct sk_buff', ' we find the STRUCT sk_buff\n  in vmlinux BTF and map all split BTF references to the distilled base\n  FWD sk_buff', ' replacing them with references to the vmlinux BTF\n  STRUCT sk_buff.\n\nA previous approach to this problem [1] utilized standalone BTF for such\ncases - where the BTF is not defined relative to base BTF so there is no\nrelocation required.  The problem with that approach is that from\nthe verifier perspective', ' some types are special', ' and having a custom\nrepresentation of a core kernel type that did not necessarily match the\ncurrent representation is not tenable.  So the approach taken here was\nto preserve the split BTF model while minimizing the representation of\nthe context needed to relocate split and current vmlinux BTF.\n\nTo generate distilled .BTF.base sections the associated dwarves\npatch (to be applied on the ""next"" branch there) is needed [3]\nWithout it', ' things will still work but modules will not be built\nwith a .BTF.base section.\n\nChanges since v5[4]:\n\n- Update search of distilled types to return the first occurrence\n  of a string (or a string+size pair); this allows us to iterate\n  over all matches in distilled base BTF (Andrii', ' patch 3)\n- Update to use BTF field iterators (Andrii', ' patches 1', ' 3 and 8)\n- Update tests to cover multiple match and associated error cases\n  (Eduard', ' patch 4)\n- Rename elf_sections_info to btf_elf_secs', ' remove use of\n  libbpf_get_error()', ' reset btf->owns_base when relocation\n  succeeds (Andrii', ' patch 5)\n\nChanges since v4[5]:\n\n- Moved embeddedness', ' duplicate name checks to relocation time\n  and record struct/union size for all distilled struct/unions\n  instead of using forwards.  This allows us to carry out\n  type compatibility checks based on the base BTF we want to\n  relocate with (Eduard', ' patches 1', ' 3)\n- Moved to using qsort() instead of qsort_r() as support for\n  qsort_r() appears to be missing in Android libc (Andrii', ' patch 3)\n- Sorting/searching now incorporates size matching depending\n  on BTF kind and embeddedness of struct/union (Eduard', ' Andrii', '\n  patch 3)\n- Improved naming of various types during relocation to avoid\n  confusion (Andrii', "" patch 3)\n- Incorporated Eduard's patch (patch 5) which handles .BTF.base\n  sections internally in btf_parse_elf().  This makes ELF parsing\n  work with split BTF"", ' split BTF with a distilled base', ' split\n  BTF with a distilled base _and_ base BTF (by relocating) etc.\n  Having this avoids the need for bpftool changes; it will work\n  as-is with .BTF.base sections (Eduard', ' patch 4)\n- Updated resolve_btfids to _not_ relocate BTF for modules\n  where a .BTF.base section is present; in that one case we\n  do not want to relocate BTF as the .BTF.ids section should\n  reflect ids in .BTF.base which will later be relocated on\n  module load (Eduard', ' Andrii', ' patch 5)\n\nChanges since v3[6]:\n\n- distill now checks for duplicate-named struct/unions and records\n  them as a sized struct/union to help identify which of the\n  multiple base BTF structs/unions it refers to (Eduard', ' patch 1)\n- added test support for multiple name handling (Eduard', ' patch 2)\n- simplified the string mapping when updating split BTF to use\n  base BTF instead of distilled base.  Since the only string\n  references split BTF can make to base BTF are the names of\n  the base types', ' create a string map from distilled string\n  offset -> base BTF string offset and update string offsets\n  by visiting all strings in split BTF; this saves having to\n  do costly searches of base BTF (Eduard', ' patch 7', '10)\n- fixed bpftool manpage and indentation issues (Quentin', "" patch 11)\n\nAlso explored Eduard's suggestion of doing an implicit fallback\nto checking for .BTF.base section in btf__parse() when it is\ncalled to get base BTF.  However while it is doable"", ' it turned\nout to be difficult operationally.  Since fallback is implicit\nwe do not know the source of the BTF - was it from .BTF or\n.BTF.base? In bpftool', ' we want to try first standalone BTF', '\nthen split', ' then split with distilled base.  Having a way\nto explicitly request .BTF.base via btf__parse_opts() fits\nthat model better.\n\nChanges since v2[7]:\n\n- submitted patch to use --btf_features in Makefile.btf for pahole\n  v1.26 and later separately (Andrii).  That has landed in bpf-next\n  now.\n- distilled base now encodes ENUM64 as fwd ENUM (size 8)', ' eliminating\n  the need for support for ENUM64 in btf__add_fwd (patch 1', ' Andrii)\n- moved to distilling only named types', ' augmenting split BTF with\n  associated reference types; this simplifies greatly the distilled\n  base BTF and the mapping operation between distilled and base\n  BTF when relocating (most of the series changes', ' Andrii)\n- relocation now iterates over base BTF', ' looking for matches based\n  on name in distilled BTF.  Distilled BTF is pre-sorted by name\n  (Andrii', ' patch 8)\n- removed most redundant compabitiliby checks aside from struct\n  size for base types/embedded structs and kind compatibility\n  (since we only match on name) (Andrii', ' patch 8)\n- btf__parse_opts() now replaces btf_parse() internally in libbpf\n  (Eduard', ' patch 3)\n\nChanges since RFC [8]:\n\n- updated terminology; we replace clunky ""base reference"" BTF with\n  distilling base BTF into a .BTF.base section. Similarly BTF\n  reconcilation becomes BTF relocation (Andrii', ' most patches)\n- add distilled base BTF by default for out-of-tree modules\n  (Alexei', ' patch 8)\n- distill algorithm updated to record size of embedded struct/union\n  by recording it as a 0-vlen STRUCT/UNION with size preserved\n  (Andrii', ' patch 2)\n- verify size match on relocation for such STRUCT/UNIONs (Andrii', '\n  patch 9)\n- with embedded STRUCT/UNION recording size', ' we can have bpftool\n  dump a header representation using .BTF.base + .BTF sections\n  rather than special-casing and refusing to use ""format c"" for\n  that case (patch 5)\n- match enum with enum64 and vice versa (Andrii', ' patch 9)\n- ensure that resolve_btfids works with BTF without .BTF.base\n  section (patch 7)\n- update tests to cover embedded types', ' arrays and function\n  prototypes (patches 3', ' 12)\n\n[1] https://lore.kernel.org/bpf/20231112124834.388735-14-alan.maguire@oracle.com/\n[2] https://lore.kernel.org/bpf/20240501175035.2476830-1-alan.maguire@oracle.com/\n[3] https://lore.kernel.org/bpf/20240517102714.4072080-1-alan.maguire@oracle.com/\n[4] https://lore.kernel.org/bpf/20240528122408.3154936-1-alan.maguire@oracle.com/\n[5] https://lore.kernel.org/bpf/20240517102246.4070184-1-alan.maguire@oracle.com/\n[6] https://lore.kernel.org/bpf/20240510103052.850012-1-alan.maguire@oracle.com/\n[7] https://lore.kernel.org/bpf/20240424154806.3417662-1-alan.maguire@oracle.com/\n[8] https://lore.kernel.org/bpf/20240322102455.98558-1-alan.maguire@oracle.com/\n====================\n\nLink: https://lore.kernel.org/r/20240613095014.357981-1-alan.maguire@oracle.com\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\n', '']",The commit adds support for resilient split BPF Type Format (BTF) to improve kernel module type handling.,"resilient,BTF,kernel",It's a new feature.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
6ba77385f386053cea2a1cad33717de74a26db4e,6ba77385f386053cea2a1cad33717de74a26db4e,Alan Maguire,alan.maguire@oracle.com,1718272211,Andrii Nakryiko,andrii@kernel.org,1718660311,9437b582fa99975de476fa3fec0f3ca0f395a5b9,c86f180ffc993975fed5907a869fc9b1555d0cfb,"resolve_btfids: Handle presence of .BTF.base section

Now that btf_parse_elf() handles .BTF.base section presence","
we need to ensure that resolve_btfids uses .BTF.base when present
rather than the vmlinux base BTF passed in via the -B option.
Detect .BTF.base section presence and unset the base BTF path
to ensure that BTF ELF parsing will do the right thing.

Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240613095014.357981-7-alan.maguire@oracle.com
",[''],This commit ensures resolve_btfids uses the .BTF.base section when present for BTF ELF parsing.,"BTF base, resolve_btfids, BTF ELF parsing",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
c86f180ffc993975fed5907a869fc9b1555d0cfb,c86f180ffc993975fed5907a869fc9b1555d0cfb,Eduard Zingerman,eddyz87@gmail.com,1718272210,Andrii Nakryiko,andrii@kernel.org,1718660311,1c5545c9dc0b385fc326588e4f247f6ba830cc8f,affdeb50616b190c3236cc2bf116e1b931a43be2,"libbpf: Make btf_parse_elf process .BTF.base transparently

Update btf_parse_elf() to check if .BTF.base section is present.
The logic is as follows:

  if .BTF.base section exists:
     distilled_base := btf_new(.BTF.base)
  if distilled_base:
     btf := btf_new(.BTF"," .base_btf=distilled_base)
     if base_btf:
        btf_relocate(btf","[' base_btf)\n  else:\n     btf := btf_new(.BTF)\n  return btf\n\nIn other words:\n- if .BTF.base section exists', ' load BTF from it and use it as a base\n  for .BTF load;\n- if base_btf is specified and .BTF.base section exist', ' relocate newly\n  loaded .BTF against base_btf.\n\nSigned-off-by: Eduard Zingerman <eddyz87@gmail.com>\nSigned-off-by: Alan Maguire <alan.maguire@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240613095014.357981-6-alan.maguire@oracle.com\n', '']",Enhance libbpf to handle .BTF.base section transparently in btf_parse_elf function.,"libbpf,BTF,parse_elf",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
affdeb50616b190c3236cc2bf116e1b931a43be2,affdeb50616b190c3236cc2bf116e1b931a43be2,Alan Maguire,alan.maguire@oracle.com,1718272209,Andrii Nakryiko,andrii@kernel.org,1718660311,65d78d11e30778924acbc175b3d463cfebe6bcc5,19e00c897d5031bed969dd79af28e899e038009f,"selftests/bpf: Extend distilled BTF tests to cover BTF relocation

Ensure relocated BTF looks as expected; in this case identical to
original split BTF"," with a few duplicate anonymous types added to
split BTF by the relocation process.  Also add relocation tests
for edge cases like missing type in base BTF and multiple types
of the same name.

Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240613095014.357981-5-alan.maguire@oracle.com
",[''],"Extend selftests for BPF to cover BTF relocation scenarios, ensuring consistency with original BTF.","BTF,relocation,selftests",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
19e00c897d5031bed969dd79af28e899e038009f,19e00c897d5031bed969dd79af28e899e038009f,Alan Maguire,alan.maguire@oracle.com,1718272208,Andrii Nakryiko,andrii@kernel.org,1718660311,8860aa5eba5bd79594bd6cc5b68d25c82c72d8d6,eb20e727c4343ad591cff2bef243590c77f62cf1,"libbpf: Split BTF relocation

Map distilled base BTF type ids referenced in split BTF and their
references to the base BTF passed in", and if the mapping succeeds,"['\nreparent the split BTF to the base BTF.\n\nRelocation is done by first verifying that distilled base BTF\nonly consists of named INT', ' FLOAT', ' ENUM', ' FWD', ' STRUCT and\nUNION kinds; then we sort these to speed lookups.  Once sorted', '\nthe base BTF is iterated', ' and for each relevant kind we check\nfor an equivalent in distilled base BTF.  When found', ' the\nmapping from distilled -> base BTF id and string offset is recorded.\nIn establishing mappings', ' we need to ensure we check STRUCT/UNION\nsize when the STRUCT/UNION is embedded in a split BTF STRUCT/UNION', '\nand when duplicate names exist for the same STRUCT/UNION.  Otherwise\nsize is ignored in matching STRUCT/UNIONs.\n\nOnce all mappings are established', ' we can update type ids\nand string offsets in split BTF and reparent it to the new base.\n\nSigned-off-by: Alan Maguire <alan.maguire@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nLink: https://lore.kernel.org/bpf/20240613095014.357981-4-alan.maguire@oracle.com\n', '']",The commit refactors BTF relocation to map base BTF type ids in libbpf.,"BTF, libbpf, relocation",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
eb20e727c4343ad591cff2bef243590c77f62cf1,eb20e727c4343ad591cff2bef243590c77f62cf1,Alan Maguire,alan.maguire@oracle.com,1718272207,Andrii Nakryiko,andrii@kernel.org,1718660311,3c4518971b73f7cdf688f0e5a0d3476df233c964,58e185a0dc359a6c1c9eff348d7badfc9f722159,selftests/bpf: Test distilled base," split BTF generation

Test generation of split+distilled base BTF","[' ensuring that\n\n- named base BTF STRUCTs and UNIONs are represented as 0-vlen sized\n  STRUCT/UNIONs\n- named ENUM[64]s are represented as 0-vlen named ENUM[64]s\n- anonymous struct/unions are represented in full in split BTF\n- anonymous enums are represented in full in split BTF\n- types unreferenced from split BTF are not present in distilled\n  base BTF\n\nAlso test that with vmlinux BTF and split BTF based upon it', '\nwe only represent needed base types referenced from split BTF\nin distilled base.\n\nSigned-off-by: Alan Maguire <alan.maguire@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nLink: https://lore.kernel.org/bpf/20240613095014.357981-3-alan.maguire@oracle.com\n', '']",Test case added for generating split and distilled base BTF.,"selftests, BPF, BTF",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
58e185a0dc359a6c1c9eff348d7badfc9f722159,58e185a0dc359a6c1c9eff348d7badfc9f722159,Alan Maguire,alan.maguire@oracle.com,1718272206,Andrii Nakryiko,andrii@kernel.org,1718660311,06e55723ae41eb944249ec516d4fbebc2e6b65ed,dedf56d775c0bebbc3003bfb988dddaf0a583c28,"libbpf: Add btf__distill_base() creating split BTF with distilled base BTF

To support more robust split BTF"," adding supplemental context for the
base BTF type ids that split BTF refers to is required.  Without such
references","[' a simple shuffling of base BTF type ids (without any other\nsignificant change) invalidates the split BTF.  Here the attempt is made\nto store additional context to make split BTF more robust.\n\nThis context comes in the form of distilled base BTF providing minimal\ninformation (name and - in some cases - size) for base INTs', ' FLOATs', '\nSTRUCTs', ' UNIONs', ' ENUMs and ENUM64s along with modified split BTF that\npoints at that base and contains any additional types needed (such as\nTYPEDEF', ' PTR and anonymous STRUCT/UNION declarations).  This\ninformation constitutes the minimal BTF representation needed to\ndisambiguate or remove split BTF references to base BTF.  The rules\nare as follows:\n\n- INT', ' FLOAT', ' FWD are recorded in full.\n- if a named base BTF STRUCT or UNION is referred to from split BTF', ' it\n  will be encoded as a zero-member sized STRUCT/UNION (preserving\n  size for later relocation checks).  Only base BTF STRUCT/UNIONs\n  that are either embedded in split BTF STRUCT/UNIONs or that have\n  multiple STRUCT/UNION instances of the same name will _need_ size\n  checks at relocation time', ' but as it is possible a different set of\n  types will be duplicates in the later to-be-resolved base BTF', '\n  we preserve size information for all named STRUCT/UNIONs.\n- if an ENUM[64] is named', ' a ENUM forward representation (an ENUM\n  with no values) of the same size is used.\n- in all other cases', ' the type is added to the new split BTF.\n\nAvoiding struct/union/enum/enum64 expansion is important to keep the\ndistilled base BTF representation to a minimum size.\n\nWhen successful', ' new representations of the distilled base BTF and new\nsplit BTF that refers to it are returned.  Both need to be freed by the\ncaller.\n\nSo to take a simple example', ' with split BTF with a type referring\nto ""struct sk_buff""', ' we will generate distilled base BTF with a\n0-member STRUCT sk_buff of the appropriate size', ' and the split BTF\nwill refer to it instead.\n\nTools like pahole can utilize such split BTF to populate the .BTF\nsection (split BTF) and an additional .BTF.base section.  Then\nwhen the split BTF is loaded', ' the distilled base BTF can be used\nto relocate split BTF to reference the current (and possibly changed)\nbase BTF.\n\nSo for example if ""struct sk_buff"" was id 502 when the split BTF was\noriginally generated', '  we can use the distilled base BTF to see that\nid 502 refers to a ""struct sk_buff"" and replace instances of id 502\nwith the current (relocated) base BTF sk_buff type id.\n\nDistilled base BTF is small; when building a kernel with all modules\nusing distilled base BTF as a test', ' overall module size grew by only\n5.3Mb total across ~2700 modules.\n\nSigned-off-by: Alan Maguire <alan.maguire@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nLink: https://lore.kernel.org/bpf/20240613095014.357981-2-alan.maguire@oracle.com\n', '']",The commit introduces a new function btf__distill_base() to handle split BTF with distilled base BTF.,"libbpf, split, BTF",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
bfbcb2c9d2978a28e9f0a77100170dc14fcf7c79,bfbcb2c9d2978a28e9f0a77100170dc14fcf7c79,Alexei Starovoitov,ast@kernel.org,1718646347,Alexei Starovoitov,ast@kernel.org,1718646356,9bf05bfc8d552c7b5dff0f0698c96f25cf90009a,143492fce36161402fa2f45a0756de7ff69c366a a62293c33b058415237c55058a6d20de313a2e61,"Merge branch 'bpf-fix-missed-var_off-related-to-movsx-in-verifier'

Yonghong Song says:

====================
bpf: Fix missed var_off related to movsx in verifier

Zac reported a verification issue ([1]) where verification unexpectedly succeeded.
This is due to missing proper var_off setting in verifier related to
movsx insn. I found another similar issue as well. This patch set fixed
both problems and added three inline asm tests to test these fixes.

  [1] https://lore.kernel.org/bpf/CAADnVQLPU0Shz7dWV4bn2BgtGdxN3uFHPeobGBA72tpg5Xoykw@mail.gmail.com/
====================

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240615174621.3994321-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,This commit fixes a missed var_off issue related to movsx in the eBPF verifier and adds inline asm tests.,"fix, var_off, verifier",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
a62293c33b058415237c55058a6d20de313a2e61,a62293c33b058415237c55058a6d20de313a2e61,Yonghong Song,yonghong.song@linux.dev,1718473597,Alexei Starovoitov,ast@kernel.org,1718646347,9bf05bfc8d552c7b5dff0f0698c96f25cf90009a,44b7f7151dfc2e0947f39ed4b9bc4b0c2ccd46fc,"selftests/bpf: Add a few tests to cover

Add three unit tests in verifier_movsx.c to cover
cases where missed var_off setting can cause
unexpected verification success or failure.

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240615174637.3995589-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Add three unit tests in verifier_movsx.c to improve eBPF verifier coverage.,"unit tests, verifier, coverage",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
44b7f7151dfc2e0947f39ed4b9bc4b0c2ccd46fc,44b7f7151dfc2e0947f39ed4b9bc4b0c2ccd46fc,Yonghong Song,yonghong.song@linux.dev,1718473592,Alexei Starovoitov,ast@kernel.org,1718646346,0181cb307f55d367de032b260c53859c130d17aa,380d5f89a4815ff88461a45de2fb6f28533df708,"bpf: Add missed var_off setting in coerce_subreg_to_size_sx()

In coerce_subreg_to_size_sx()"," for the case where upper
sign extension bits are the same for smax32 and smin32
values","["" we missed to setup properly. This is especially\nproblematic if both smax32 and smin32's sign extension\nbits are 1.\n\nThe following is a simple example illustrating the inconsistent\nverifier states due to missed var_off:\n\n  0: (85) call bpf_get_prandom_u32#7    ; R0_w=scalar()\n  1: (bf) r3 = r0                       ; R0_w=scalar(id=1) R3_w=scalar(id=1)\n  2: (57) r3 &= 15                      ; R3_w=scalar(smin=smin32=0"", 'smax=umax=smax32=umax32=15', 'var_off=(0x0; 0xf))\n  3: (47) r3 |= 128                     ; R3_w=scalar(smin=umin=smin32=umin32=128', 'smax=umax=smax32=umax32=143', 'var_off=(0x80; 0xf))\n  4: (bc) w7 = (s8)w3\n  REG INVARIANTS VIOLATION (alu): range bounds violation u64=[0xffffff80', ' 0x8f] s64=[0xffffff80', ' 0x8f]\n    u32=[0xffffff80', ' 0x8f] s32=[0x80', ' 0xffffff8f] var_off=(0x80', ' 0xf)\n\nThe var_off=(0x80', ' 0xf) is not correct', ' and the correct one should\nbe var_off=(0xffffff80; 0xf) since from insn 3', ' we know that at\ninsn 4', ' the sign extension bits will be 1. This patch fixed this\nissue by setting var_off properly.\n\nFixes: 8100928c8814 (""bpf: Support new sign-extension mov insns"")\nSigned-off-by: Yonghong Song <yonghong.song@linux.dev>\nLink: https://lore.kernel.org/r/20240615174632.3995278-1-yonghong.song@linux.dev\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit adds missing var_off setting in the coerce_subreg_to_size_sx() function for sign extension bits handling.,"var_off, sign extension, coerce_subreg_to_size_sx",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
380d5f89a4815ff88461a45de2fb6f28533df708,380d5f89a4815ff88461a45de2fb6f28533df708,Yonghong Song,yonghong.song@linux.dev,1718473586,Alexei Starovoitov,ast@kernel.org,1718646346,8fc35376dd61e36911dc5b5e03d5d791900c4432,143492fce36161402fa2f45a0756de7ff69c366a,"bpf: Add missed var_off setting in set_sext32_default_val()

Zac reported a verification failure and Alexei reproduced the issue
with a simple reproducer ([1]). The verification failure is due to missed
setting for var_off.

The following is the reproducer in [1]:
  0: R1=ctx() R10=fp0
  0: (71) r3 = *(u8 *)(r10 -387)        ;
     R3_w=scalar(smin=smin32=0",smax=umax=smax32=umax32=255,"['var_off=(0x0; 0xff)) R10=fp0\n  1: (bc) w7 = (s8)w3                   ;\n     R3_w=scalar(smin=smin32=0', 'smax=umax=smax32=umax32=255', 'var_off=(0x0; 0xff))\n     R7_w=scalar(smin=smin32=0', 'smax=umax=smax32=umax32=127', 'var_off=(0x0; 0x7f))\n  2: (36) if w7 >= 0x2533823b goto pc-3\n     mark_precise: frame0: last_idx 2 first_idx 0 subseq_idx -1\n     mark_precise: frame0: regs=r7 stack= before 1: (bc) w7 = (s8)w3\n     mark_precise: frame0: regs=r3 stack= before 0: (71) r3 = *(u8 *)(r10 -387)\n  2: R7_w=scalar(smin=smin32=0', 'smax=umax=smax32=umax32=127', 'var_off=(0x0; 0x7f))\n  3: (b4) w0 = 0                        ; R0_w=0\n  4: (95) exit\n\nNote that after insn 1', ' the var_off for R7 is (0x0; 0x7f). This is not correct\nsince upper 24 bits of w7 could be 0 or 1. So correct var_off should be\n(0x0; 0xffffffff). Missing var_off setting in set_sext32_default_val() caused later\nincorrect analysis in zext_32_to_64(dst_reg) and reg_bounds_sync(dst_reg).\n\nTo fix the issue', ' set var_off correctly in set_sext32_default_val(). The correct\nreg state after insn 1 becomes:\n  1: (bc) w7 = (s8)w3                   ;\n     R3_w=scalar(smin=smin32=0', 'smax=umax=smax32=umax32=255', 'var_off=(0x0; 0xff))\n     R7_w=scalar(smin=0', 'smax=umax=0xffffffff', 'smin32=-128', 'smax32=127', 'var_off=(0x0; 0xffffffff))\nand at insn 2', ' the verifier correctly determines either branch is possible.\n\n  [1] https://lore.kernel.org/bpf/CAADnVQLPU0Shz7dWV4bn2BgtGdxN3uFHPeobGBA72tpg5Xoykw@mail.gmail.com/\n\nFixes: 8100928c8814 (""bpf: Support new sign-extension mov insns"")\nReported-by: Zac Ecob <zacecob@protonmail.com>\nSigned-off-by: Yonghong Song <yonghong.song@linux.dev>\nLink: https://lore.kernel.org/r/20240615174626.3994813-1-yonghong.song@linux.dev\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fixes a verification failure by adding a missed var_off setting in set_sext32_default_val function.,"verification, var_off, sext32",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
4314175af49668ab20c0d60d7d7657986e1d0c7c,4314175af49668ab20c0d60d7d7657986e1d0c7c,David S. Miller,davem@davemloft.net,1718626449,David S. Miller,davem@davemloft.net,1718626449,d2648151ef19251c559aa1f6a6790b7759d08d50,f22b4b55edb507a2b30981e133b66b642be4d13f d25a92ccae6bed02327b63d138e12e7806830f78,"Merge branch 'net-smc-IPPROTO_SMC'

D. Wythe says:

====================
Introduce IPPROTO_SMC

This patch allows to create smc socket via AF_INET","
similar to the following code","['\n\n/* create v4 smc sock */\nv4 = socket(AF_INET', ' SOCK_STREAM', ' IPPROTO_SMC);\n\n/* create v6 smc sock */\nv6 = socket(AF_INET6', ' SOCK_STREAM', ' IPPROTO_SMC);\n\nThere are several reasons why we believe it is appropriate here:\n\n1. For smc sockets', ' it actually use IPv4 (AF-INET) or IPv6 (AF-INET6)\naddress. There is no AF_SMC address at all.\n\n2. Create smc socket in the AF_INET(6) path', ' which allows us to reuse\nthe infrastructure of AF_INET(6) path', ' such as common ebpf hooks.\nOtherwise', ' smc have to implement it again in AF_SMC path. Such as:\n  1. Replace IPPROTO_TCP with IPPROTO_SMC in the socket() syscall\n     initiated by the user', "" without the use of LD-PRELOAD.\n  2. Select whether immediate fallback is required based on peer's port/ip\n     before connect().\n\nA very significant result is that we can now use eBPF to implement smc_run\ninstead of LD_PRELOAD"", ' who is completely ineffective in scenarios of static\nlinking.\n\nAnother potential value is that we are attempting to optimize the\nperformance of fallback socks', ' where merging socks is an important part', '\nand it relies on the creation of SMC sockets under the AF_INET path.\n(More information :\nhttps://lore.kernel.org/netdev/1699442703-25015-1-git-send-email-alibuda@linux.alibaba.com/T/)\n\nv2 -> v1:\n\n- Code formatting', ' mainly including alignment and annotation repair.\n- move inet_smc proto ops to inet_smc.c', "" avoiding af_smc.c becoming too bulky.\n- Fix the issue where refactoring affects the initialization order.\n- Fix compile warning (unused out_inet_prot) while CONFIG_IPV6 was not set.\n\nv3 -> v2:\n\n- Add Alibaba's copyright information to the newfile\n\nv4 -> v3:\n\n- Fix some spelling errors\n- Align function naming style with smc_sock_init() to smc_sk_init()\n- Reversing the order of the conditional checks on clcsock to make the code more intuitive\n\nv5 -> v4:\n\n- Fix some spelling errors\n- Added comment"", ' ""/* CONFIG_IPV6 */""', ' after the final #endif directive.\n- Rename smc_inet.h and smc_inet.c to smc_inet.h and smc_inet.c\n- Encapsulate the initialization and destruction of inet_smc in inet_smc.c', '\n  rather than implementing it directly in af_smc.c.\n- Remove useless header files in smc_inet.h\n- Make smc_inet_prot_xxx and smc_inet_sock_init() to be static', "" since it's\n  only used in smc_inet.c\n\nv6 -> v5:\n\n- Wrapping lines to not exceed 80 characters\n- Combine initialization and error handling of smc_inet6 into the same #if\n  macro block.\n\nv7 -> v6:\n\n- Modify the value of IPPROTO_SMC to 256 so that it does not affect IPPROTO-MAX\n\nv8 -> v7:\n\n- Remove useless declarations.\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>\n"", '']",This commit introduces new support for creating sockets using the IPPROTO_SMC protocol in the AF_INET socket family.,"IPPROTO_SMC, smc socket, AF_INET",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['socket like programs']
d25a92ccae6bed02327b63d138e12e7806830f78,d25a92ccae6bed02327b63d138e12e7806830f78,D. Wythe,alibuda@linux.alibaba.com,1718301630,David S. Miller,davem@davemloft.net,1718626449,d2648151ef19251c559aa1f6a6790b7759d08d50,13543d02c90d6195b31bef8fb51dfeff77c0b368,"net/smc: Introduce IPPROTO_SMC

This patch allows to create smc socket via AF_INET","
similar to the following code","['\n\n/* create v4 smc sock */\nv4 = socket(AF_INET', ' SOCK_STREAM', ' IPPROTO_SMC);\n\n/* create v6 smc sock */\nv6 = socket(AF_INET6', ' SOCK_STREAM', ' IPPROTO_SMC);\n\nThere are several reasons why we believe it is appropriate here:\n\n1. For smc sockets', ' it actually use IPv4 (AF-INET) or IPv6 (AF-INET6)\naddress. There is no AF_SMC address at all.\n\n2. Create smc socket in the AF_INET(6) path', ' which allows us to reuse\nthe infrastructure of AF_INET(6) path', ' such as common ebpf hooks.\nOtherwise', ' smc have to implement it again in AF_SMC path.\n\nSigned-off-by: D. Wythe <alibuda@linux.alibaba.com>\nReviewed-by: Wenjia Zhang <wenjia@linux.ibm.com>\nReviewed-by: Dust Li <dust.li@linux.alibaba.com>\nTested-by: Niklas Schnelle <schnelle@linux.ibm.com>\nTested-by: Wenjia Zhang <wenjia@linux.ibm.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>\n', '']",This commit introduces IPPROTO_SMC to allow creating smc sockets via AF_INET.,"IPPROTO_SMC, smc, socket",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The syscall interface,['socket like programs']
c64da10adb57a135bf91e32202d7077931472533,c64da10adb57a135bf91e32202d7077931472533,Jakub Kicinski,kuba@kernel.org,1718413029,Jakub Kicinski,kuba@kernel.org,1718413030,4d3efb826a4d9f36357d01b725f7a2cbf0b6af99,1afe4a64379f65e7bd0c841e6ba7adf312b4c928 7bdcedd5c8fb88e7176b93812b139eca5fe0aa46,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-06-14

We've added 8 non-merge commits during the last 2 day(s) which contain
a total of 9 files changed", 92 insertions(+),"[' 11 deletions(-).\n\nThe main changes are:\n\n1) Silence a syzkaller splat under CONFIG_DEBUG_NET=y in pskb_pull_reason()\n   triggered via __bpf_try_make_writable()', ' from Florian Westphal.\n\n2) Fix removal of kfuncs during linking phase which then throws a kernel\n   build warning via resolve_btfids about unresolved symbols', '\n   from Tony Ambardar.\n\n3) Fix a UML x86_64 compilation failure from BPF as pcpu_hot symbol\n   is not available on User Mode Linux', ' from Maciej Żenczykowski.\n\n4) Fix a register corruption in reg_set_min_max triggering an invariant\n   violation in BPF verifier', "" from Daniel Borkmann.\n\n* tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:\n  bpf: Harden __bpf_kfunc tag against linker kfunc removal\n  compiler_types.h: Define __retain for __attribute__((__retain__))\n  bpf: Avoid splat in pskb_pull_reason\n  bpf: fix UML x86_64 compile failure\n  selftests/bpf: Add test coverage for reg_set_min_max handling\n  bpf: Reduce stack consumption in check_stack_write_fixed_off\n  bpf: Fix reg_set_min_max corruption of fake_reg\n  MAINTAINERS: mailmap: Update Stanislav's email address\n====================\n\nLink: https://lore.kernel.org/r/20240614203223.26500-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n"", '']","Merge tag for-netdev from BPF repository, incorporating 8 non-merge commits affecting 9 files.","merge, non-merge, netdev",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
dedf56d775c0bebbc3003bfb988dddaf0a583c28,dedf56d775c0bebbc3003bfb988dddaf0a583c28,Alexei Starovoitov,ast@kernel.org,1718242695,Daniel Borkmann,daniel@iogearbox.net,1718394760,9b5db9431d4b9630956715796a7e1d7f9bfb255c,6870bdb3f4f2991193449f9de57109b3e263f55c,"selftests/bpf: Add tests for add_const

Improve arena based tests and add several C and asm tests
with specific pattern.
These tests would have failed without add_const verifier support.

Also add several loop_inside_iter*() tests that are not related to add_const","
but nice to have.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240613013815.953-5-alexei.starovoitov@gmail.com
",[''],Add and improve eBPF selftests for the add_const verifier feature.,"selftests, add_const, verifier",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
6870bdb3f4f2991193449f9de57109b3e263f55c,6870bdb3f4f2991193449f9de57109b3e263f55c,Alexei Starovoitov,ast@kernel.org,1718242694,Daniel Borkmann,daniel@iogearbox.net,1718394760,e7bc6dbe46f4e6c89ec64f572250d2856e63a8a4,98d7ca374ba4b39e7535613d40e159f09ca14da2,"bpf: Support can_loop/cond_break on big endian

Add big endian support for can_loop/cond_break macros.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240613013815.953-4-alexei.starovoitov@gmail.com
",,Add support for can_loop and cond_break macros on big endian systems.,"big endian,can_loop,cond_break",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
98d7ca374ba4b39e7535613d40e159f09ca14da2,98d7ca374ba4b39e7535613d40e159f09ca14da2,Alexei Starovoitov,ast@kernel.org,1718242693,Daniel Borkmann,daniel@iogearbox.net,1718394759,cc45a92aa7645787141a5f250bc085c9f815fbc3,124e8c2b1b5d08a10d3a44ed082eaaf98a78c91f,"bpf: Track delta between ""linked"" registers.

Compilers can generate the code
  r1 = r2
  r1 += 0x1
  if r2 < 1000 goto ...
  use knowledge of r2 range in subsequent r1 operations

So remember constant delta between r2 and r1 and update r1 after 'if' condition.

Unfortunately LLVM still uses this pattern for loops with 'can_loop' construct:
for (i = 0; i < 1000 && can_loop; i++)

The ""undo"" pass was introduced in LLVM
https://reviews.llvm.org/D121937
to prevent this optimization"," but it cannot cover all cases.
Instead of fighting middle end optimizer in BPF backend teach the verifier
about this pattern.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240613013815.953-3-alexei.starovoitov@gmail.com
",[''],The commit teaches the eBPF verifier to track the delta between linked registers for improved optimization handling.,"delta, verifier, registers",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
124e8c2b1b5d08a10d3a44ed082eaaf98a78c91f,124e8c2b1b5d08a10d3a44ed082eaaf98a78c91f,Alexei Starovoitov,ast@kernel.org,1718242692,Daniel Borkmann,daniel@iogearbox.net,1718394759,294b18099b8d97eb02a0fb9dd45c59700fee1496,cdbde084d163835ef41cabb59be2292bb0421c51,"bpf: Relax tuple len requirement for sk helpers.

__bpf_skc_lookup() safely handles incorrect values of tuple len","
hence we can allow zero to be passed as tuple len.
This patch alone doesn't make an observable verifier difference.
It's a trivial improvement that might simplify bpf programs.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240613013815.953-2-alexei.starovoitov@gmail.com
",[''],The commit relaxes tuple length requirements in bpf_skc_lookup for sk helpers to simplify BPF programs.,"bpf, tuple len, sk helpers",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The helper and kfuncs,['socket like programs']
7bdcedd5c8fb88e7176b93812b139eca5fe0aa46,7bdcedd5c8fb88e7176b93812b139eca5fe0aa46,Tony Ambardar,tony.ambardar@gmail.com,1717478596,Daniel Borkmann,daniel@iogearbox.net,1718385277,a6028bf51cb9f40bb981dc9e59b5c6ea3fcd0d9a,0a5d3258d7c97295a89d22e54733b54aacb62562,"bpf: Harden __bpf_kfunc tag against linker kfunc removal

BPF kfuncs are often not directly referenced and may be inadvertently
removed by optimization steps during kernel builds"," thus the __bpf_kfunc
tag mitigates against this removal by including the __used macro. However","['\nthis macro alone does not prevent removal during linking', ' and may still\nyield build warnings (e.g. on mips64el):\n\n  [...]\n    LD      vmlinux\n    BTFIDS  vmlinux\n  WARN: resolve_btfids: unresolved symbol bpf_verify_pkcs7_signature\n  WARN: resolve_btfids: unresolved symbol bpf_lookup_user_key\n  WARN: resolve_btfids: unresolved symbol bpf_lookup_system_key\n  WARN: resolve_btfids: unresolved symbol bpf_key_put\n  WARN: resolve_btfids: unresolved symbol bpf_iter_task_next\n  WARN: resolve_btfids: unresolved symbol bpf_iter_css_task_new\n  WARN: resolve_btfids: unresolved symbol bpf_get_file_xattr\n  WARN: resolve_btfids: unresolved symbol bpf_ct_insert_entry\n  WARN: resolve_btfids: unresolved symbol bpf_cgroup_release\n  WARN: resolve_btfids: unresolved symbol bpf_cgroup_from_id\n  WARN: resolve_btfids: unresolved symbol bpf_cgroup_acquire\n  WARN: resolve_btfids: unresolved symbol bpf_arena_free_pages\n    NM      System.map\n    SORTTAB vmlinux\n    OBJCOPY vmlinux.32\n  [...]\n\nUpdate the __bpf_kfunc tag to better guard against linker optimization by\nincluding the new __retain compiler macro', "" which fixes the warnings above.\n\nVerify the __retain macro with readelf by checking object flags for 'R':\n\n  $ readelf -Wa kernel/trace/bpf_trace.o\n  Section Headers:\n    [Nr]  Name              Type     Address  Off  Size ES Flg Lk Inf Al\n  [...]\n    [178] .text.bpf_key_put PROGBITS 00000000 6420 0050 00 AXR  0   0  8\n  [...]\n  Key to Flags:\n  [...]\n    R (retain)"", ' D (mbind)', ' p (processor specific)\n\nFixes: 57e7c169cd6a (""bpf: Add __bpf_kfunc tag for marking kernel functions as kfuncs"")\nReported-by: kernel test robot <lkp@intel.com>\nSigned-off-by: Tony Ambardar <tony.ambardar@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nTested-by: Jiri Olsa <jolsa@kernel.org>\nReviewed-by: Jiri Olsa <jolsa@kernel.org>\nCc: Yonghong Song <yonghong.song@linux.dev>\nCloses: https://lore.kernel.org/r/202401211357.OCX9yllM-lkp@intel.com/\nLink: https://lore.kernel.org/bpf/ZlmGoT9KiYLZd91S@krava/T/\nLink: https://lore.kernel.org/bpf/e9c64e9b5c073dabd457ff45128aabcab7630098.1717477560.git.Tony.Ambardar@gmail.com\n', '']",The commit hardens the __bpf_kfunc tag to prevent linker from removing BPF kfuncs during kernel build optimization.,"bpf, kfunc, linker",It's a security fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
0a5d3258d7c97295a89d22e54733b54aacb62562,0a5d3258d7c97295a89d22e54733b54aacb62562,Tony Ambardar,tony.ambardar@gmail.com,1717478595,Daniel Borkmann,daniel@iogearbox.net,1718384912,2744d65b1abe2e175a49763c8108941dd93fc0f0,2bbe3e5a2f4ef69d13be54f1cf895b4658287080,"compiler_types.h: Define __retain for __attribute__((__retain__))

Some code includes the __used macro to prevent functions and data from
being optimized out. This macro implements __attribute__((__used__))","
which operates at the compiler and IR-level","[' and so still allows a linker\nto remove objects intended to be kept.\n\nCompilers supporting __attribute__((__retain__)) can address this gap by\nsetting the flag SHF_GNU_RETAIN on the section of a function/variable', '\nindicating to the linker the object should be retained. This attribute is\navailable since gcc 11', ' clang 13', ' and binutils 2.36.\n\nProvide a __retain macro implementing __attribute__((__retain__))', "" whose\nfirst user will be the '__bpf_kfunc' tag.\n\n[ Additional remark from discussion:\n\n  Why is CONFIG_LTO_CLANG added here? The __used macro permits garbage\n  collection at section level"", ' so CLANG_LTO_CLANG without\n  CONFIG_LD_DEAD_CODE_DATA_ELIMINATION should not change final section\n  dynamics?\n\n  The conditional guard was included to ensure consistent behaviour\n  between __retain and other features forcing split sections. In\n  particular', ' the same guard is used in vmlinux.lds.h to merge split\n  sections where needed. For example', "" using __retain in LLVM builds\n  without CONFIG_LTO was failing CI tests on kernel-patches/bpf because\n  the kernel didn't boot properly. And in further testing"", ' the kernel\n  had no issues loading BPF kfunc modules with such split sections', ' so\n  the module (partial) linking scripts were left alone. ]\n\nSigned-off-by: Tony Ambardar <tony.ambardar@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nCc: Yonghong Song <yonghong.song@linux.dev>\nLink: https://lore.kernel.org/bpf/ZlmGoT9KiYLZd91S@krava/T/\nLink: https://lore.kernel.org/bpf/b31bca5a5e6765a0f32cc8c19b1d9cdbfaa822b5.1717477560.git.Tony.Ambardar@gmail.com\n', '']",The commit defines a new __retain macro using __attribute__ to enhance compiler-level function and data retention.,"macro, attribute, retain",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
2bbe3e5a2f4ef69d13be54f1cf895b4658287080,2bbe3e5a2f4ef69d13be54f1cf895b4658287080,Florian Westphal,fw@strlen.de,1718360253,Daniel Borkmann,daniel@iogearbox.net,1718378421,2ab765d06c6c3bf045064400f5a3636e81ae429a,b99a95bc56c52a428befbce12d9451fd7a0f3bc2,"bpf: Avoid splat in pskb_pull_reason

syzkaller builds (CONFIG_DEBUG_NET=y) frequently trigger a debug
hint in pskb_may_pull.

We'd like to retain this debug check because it might hint at integer
overflows and other issues (kernel code should pull headers"," not huge
value).

In bpf case","[' this splat isn\'t interesting at all: such (nonsensical)\nbpf programs are typically generated by a fuzzer anyway.\n\nDo what Eric suggested and suppress such warning.\n\nFor CONFIG_DEBUG_NET=n we don\'t need the extra check because\npskb_may_pull will do the right thing: return an error without the\nWARN() backtrace.\n\nFixes: 219eee9c0d16 (""net: skbuff: add overflow debug check to pull/push helpers"")\nReported-by: syzbot+0c4150bff9fff3bf023c@syzkaller.appspotmail.com\nSuggested-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nAcked-by: Daniel Borkmann <daniel@iogearbox.net>\nCloses: https://syzkaller.appspot.com/bug?extid=0c4150bff9fff3bf023c\nLink: https://lore.kernel.org/netdev/9f254c96-54f2-4457-b7ab-1d9f6187939c@gmail.com/\nLink: https://lore.kernel.org/bpf/20240614101801.9496-1-fw@strlen.de\n', '']",The commit addresses a debug issue in pskb_may_pull to prevent potential integer overflows when pull headers in BPF.,"debug, pskb_may_pull, integer overflows",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.","['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
33c0fb85b571b0f1bbdbf466e770eebeb29e6f41,33c0fb85b571b0f1bbdbf466e770eebeb29e6f41,Benjamin Tissoires,bentiss@kernel.org,1717837288,Benjamin Tissoires,bentiss@kernel.org,1718356821,4d2d1fff9618dca4a64f23d3b8e93858207c89da,f1a5fb6c7cf637e991cedc799e1470e01e148669,"HID: bpf: make part of struct hid_device writable

It is useful to change the name"," the phys and/or the uniq of a
struct hid_device during .rdesc_fixup().

For example","[' hid-uclogic.ko changes the uniq to store the firmware version\nto differentiate between 2 devices sharing the same PID. In the same\nway', ' changing the device name is useful when the device export 3 nodes', '\nall with the same name.\n\nLink: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-16-6ac6ade58329@kernel.org\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",The commit makes part of the struct hid_device writable in the BPF subsystem.,"HID, struct, writable",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
f1a5fb6c7cf637e991cedc799e1470e01e148669,f1a5fb6c7cf637e991cedc799e1470e01e148669,Benjamin Tissoires,bentiss@kernel.org,1717837287,Benjamin Tissoires,bentiss@kernel.org,1718356821,58469a8d1b6e90b4af524c3b50a0ea0ebc758299,bd0747543b3d973df6af0f43965f58965375d524,"HID: bpf: rework hid_bpf_ops_btf_struct_access

The idea is to provide a list of stucts and their editable fields.

Currently no functional changes are introduced here"," we will add some
more writeable fields in the next patch.

Acked-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-15-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Rework hid_bpf_ops_btf_struct_access to list structs and editable fields without functional changes.,"HID,BPF,structs",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
bd0747543b3d973df6af0f43965f58965375d524,bd0747543b3d973df6af0f43965f58965375d524,Benjamin Tissoires,bentiss@kernel.org,1717837286,Benjamin Tissoires,bentiss@kernel.org,1718356821,dfa704245a5d770dc2f89881ffc3b65c289a71ed,c94ae2189acac38b01be60e3b878605fb328782c,"bpf: allow bpf helpers to be used into HID-BPF struct_ops

Without this helpers like bpf_printk() or bpf_map_update() are not
available"," making anything but change of bytes impossible to do.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-14-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Enable bpf helpers within HID-BPF struct_ops to access functions like bpf_printk or bpf_map_update.,"bpf helpers,HID-BPF,struct_ops",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,['HID driver like programs']
c94ae2189acac38b01be60e3b878605fb328782c,c94ae2189acac38b01be60e3b878605fb328782c,Benjamin Tissoires,bentiss@kernel.org,1717837285,Benjamin Tissoires,bentiss@kernel.org,1718356820,db2b5d3594fa3f8af7f76d41b71795402d32e129,26ba1e0a982b9efe8b121d7e41dae4fdf118b048,"HID: bpf: error on warnings when compiling bpf objects

There is no real reasons to paper over warnings for such small programs.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-13-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,This commit ensures BPF object compilation errors on warnings for HID programs.,"HID,BPF,compilation",It's a build system or CI/CD change.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
26ba1e0a982b9efe8b121d7e41dae4fdf118b048,26ba1e0a982b9efe8b121d7e41dae4fdf118b048,Benjamin Tissoires,bentiss@kernel.org,1717837284,Benjamin Tissoires,bentiss@kernel.org,1718356820,f22a5e8303c5126f7ef310bb2f1e034a3552c204,5f42e19de53faf9e6d4455638f75b7c3a3f8d58f,"HID: bpf: Artist24: remove unused variable

warning: unused variable ‘tilt’ [-Wunused-variable]

Signed-off-by: Peter Hutterer <peter.hutterer@who-t.net>
Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-12-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,Remove unused variable 'tilt' from HID bpf code.,"remove, unused, variable",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
5f42e19de53faf9e6d4455638f75b7c3a3f8d58f,5f42e19de53faf9e6d4455638f75b7c3a3f8d58f,Benjamin Tissoires,bentiss@kernel.org,1717837283,Benjamin Tissoires,bentiss@kernel.org,1718356820,5bd6b5b9745dc40b6a8736e9885e057794363a33,c5958697a5fa29d3ba9332205a88725afe9ed912,"Documentation: HID: add a small blurb on udev-hid-bpf

This is the current decision we took: we don't provide automatic loading
of HID-BPF by the kernel directly"," but rely on an external tool for it.

This tool is currently udev-hid-bpf","["" so let's make people aware of it.\n\nLink: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-11-6ac6ade58329@kernel.org\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n"", '']",This commit adds documentation about using udev-hid-bpf for loading HID-BPF programs.,"Documentation,HID-BPF,udev-hid-bpf",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
c5958697a5fa29d3ba9332205a88725afe9ed912,c5958697a5fa29d3ba9332205a88725afe9ed912,Benjamin Tissoires,bentiss@kernel.org,1717837282,Benjamin Tissoires,bentiss@kernel.org,1718356820,a9f3c532361f32d91cbde4b88095db2eb7242a2d,05b3b8f19441b6bf039cec1990de3c75bb9dbbd9,"Documentation: HID: amend HID-BPF for struct_ops

Now that we are using struct_ops"," the docs need to be changed.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-10-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],The commit updates HID-BPF documentation to reflect changes involving struct_ops.,"Documentation, HID, struct_ops",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The helper and kfuncs,['HID driver like programs']
05b3b8f19441b6bf039cec1990de3c75bb9dbbd9,05b3b8f19441b6bf039cec1990de3c75bb9dbbd9,Benjamin Tissoires,bentiss@kernel.org,1717837281,Benjamin Tissoires,bentiss@kernel.org,1718356820,997add8797644223073e24dc40a90fe9596161bb,4a86220e046da009bef0948e9f51d1d26d68f93c,"selftests/hid: add subprog call test

I got a weird verifier error with a subprog once"," so let's have a test
for it.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-9-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Add a subprogram call test to HID selftests to debug a verifier error.,"HID,selftests,subprog",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['HID driver like programs']
4a86220e046da009bef0948e9f51d1d26d68f93c,4a86220e046da009bef0948e9f51d1d26d68f93c,Benjamin Tissoires,bentiss@kernel.org,1717837280,Benjamin Tissoires,bentiss@kernel.org,1718356820,41e0cf9fdf3c33a3ae99190bc4d3f30702b76c3d,50fe0fc6e206c9b85a0a6cc183ee5513d70179d1,"HID: bpf: remove tracing HID-BPF capability

We can now rely on struct_ops as we cleared the users in-tree.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-8-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,Remove HID-BPF tracing capability using struct_ops after clearing in-tree users.,"HID,BPF,struct_ops",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
50fe0fc6e206c9b85a0a6cc183ee5513d70179d1,50fe0fc6e206c9b85a0a6cc183ee5513d70179d1,Benjamin Tissoires,bentiss@kernel.org,1717837279,Benjamin Tissoires,bentiss@kernel.org,1718356820,9b2def9a362e5a9236497c277f15f9b2d026d921,df67602fb8d5a02e40f37efcf4b5cb958c8ca880,"HID: bpf: convert in-tree fixes into struct_ops

Very mechanical:
- Change HID_BPF_DEVICE_EVENT and HID_BPF_RDESC_FIXUP #defines
- add a matching SEC("".struct_ops.link"")
- in ArtistPro16Gen2 make the 2 functions static and have a new one
  calling them

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-7-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,Convert in-tree HID fixes into struct_ops for improved organization and functionality.,"HID, struct_ops, conversion",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
df67602fb8d5a02e40f37efcf4b5cb958c8ca880,df67602fb8d5a02e40f37efcf4b5cb958c8ca880,Benjamin Tissoires,bentiss@kernel.org,1717837278,Benjamin Tissoires,bentiss@kernel.org,1718356820,acc2df23f82dbc013ef9c5559b78e742a28c80d0,e342d6f6f7d82b48c4540b947d8032a3b7b3e6f8,"HID: bpf: add defines for HID-BPF SEC in in-tree bpf fixes

We are going to switch over struct_ops"," so instead of having to manually
replace all fields one by one","["" let's have a common place to change it.\n\nLink: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-6-6ac6ade58329@kernel.org\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n"", '']",Add defines for HID BPF SEC with in-tree bpf fixes and switch over struct_ops.,"HID, BPF, fixes",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
e342d6f6f7d82b48c4540b947d8032a3b7b3e6f8,e342d6f6f7d82b48c4540b947d8032a3b7b3e6f8,Benjamin Tissoires,bentiss@kernel.org,1717837277,Benjamin Tissoires,bentiss@kernel.org,1718356820,908cb6c954eef7a2dea1012b642e3f88c0ded633,d7696738d66b4f1379fe77eef61cd1047d7f0773,"HID: samples: convert the 2 HID-BPF samples into struct_ops

This is mostly mechanical: attach_prog is dropped"," and
the SEC are converted into struct_ops.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-5-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Convert HID-BPF samples into struct_ops to simplify implementations.,"HID,struct_ops,samples",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
d7696738d66b4f1379fe77eef61cd1047d7f0773,d7696738d66b4f1379fe77eef61cd1047d7f0773,Benjamin Tissoires,bentiss@kernel.org,1717837276,Benjamin Tissoires,bentiss@kernel.org,1718356819,afde2de984697a0681c360ef89f4643f86c3e9b8,ebc0d8093e8c97de459615438edefad1a4ac352c,"selftests/hid: convert the hid_bpf selftests with struct_ops

We drop the need for the attach() bpf syscall"," but we need to set up
the hid_id field before calling __load().

The .bpf.c part is mechanical: we create one struct_ops per HID-BPF
program","[' as all the tests are for one program at a time.\n\nLink: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-4-6ac6ade58329@kernel.org\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']","The commit converts HID-BPF selftests to use struct_ops, removing the need for the attach() BPF syscall and setting up the hid_id field before loading.","hid_bpf,selftests,struct_ops",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['HID driver like programs']
ebc0d8093e8c97de459615438edefad1a4ac352c,ebc0d8093e8c97de459615438edefad1a4ac352c,Benjamin Tissoires,bentiss@kernel.org,1717837275,Benjamin Tissoires,bentiss@kernel.org,1718356816,0777c8ebab5266327d80405b15f034ebc06d4d90,99b40bf8053fa261d368ef78848961c04aa93c74,"HID: bpf: implement HID-BPF through bpf_struct_ops

We do this implementation in several steps to not have the CI failing:
- first (this patch)"," we add struct_ops while keeping the existing infra
  available
- then we change the selftests","[' the examples and the existing in-tree\n  HID-BPF programs\n- then we remove the existing trace points making old HID-BPF obsolete\n\nThere are a few advantages of struct_ops over tracing:\n- compatibility with sleepable programs (for hid_hw_raw_request() in\n  a later patch)\n- a lot simpler in the kernel: it\'s a simple rcu protected list\n- we can add more parameters to the function called without much trouble\n- the ""attach"" is now generic through BPF-core: the caller just needs to\n  set hid_id and flags before calling __load().\n- all the BPF tough part is not handled in BPF-core through generic\n  processing\n- hid_bpf_ctx is now only writable where it needs be\n\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nLink: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-3-6ac6ade58329@kernel.org\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Implement HID-BPF support using bpf_struct_ops while maintaining existing infrastructure.,"HIDBPF, bpf_struct_ops, implementation",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,['HID driver like programs']
99b40bf8053fa261d368ef78848961c04aa93c74,99b40bf8053fa261d368ef78848961c04aa93c74,Benjamin Tissoires,bentiss@kernel.org,1717837274,Benjamin Tissoires,bentiss@kernel.org,1718356402,5e6b5554dc545c8432c6e8aab223a6cfdc16c966,146a06a0d225cae240065233fd168fb0b95a10ff,"HID: bpf: add hid_get/put_device() helpers

no code change"," but this way we reduce code duplication and we
can export it later.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-2-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Add hid_get and hid_put_device helpers to reduce code duplication in HID.,"hid_get, hid_put, helpers",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
146a06a0d225cae240065233fd168fb0b95a10ff,146a06a0d225cae240065233fd168fb0b95a10ff,Benjamin Tissoires,bentiss@kernel.org,1717837273,Benjamin Tissoires,bentiss@kernel.org,1718356402,a4c5f435332cd23107fbee2a5090bc6f6e532992,061d1af7b0305227182bd9da60c7706c079348b7,"HID: rename struct hid_bpf_ops into hid_ops

Those operations are the ones from HID", not HID-BPF,"["" and I'd like to\nreuse hid_bpf_ops as the user facing struct_ops API.\n\nLink: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-1-6ac6ade58329@kernel.org\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n"", '']",Renamed struct `hid_bpf_ops` to `hid_ops` for improved clarity.,"HID, rename, ops",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
cdbde084d163835ef41cabb59be2292bb0421c51,cdbde084d163835ef41cabb59be2292bb0421c51,Alexei Starovoitov,ast@kernel.org,1718321584,Alexei Starovoitov,ast@kernel.org,1718321585,57df14787c55b7ddfbf0b609138da6a0459cc3e2,373a4e13ab4bc947f429fd92409d686fbec57132 2d45ab1eda469c802728d0a74e1601de5e71c098,"Merge branch 'bpf-make-trusted-args-nullable'

Vadim Fedorenko says:

====================
bpf: make trusted args nullable

Current verifier checks for the arg to be nullable after checking for
certain pointer types. It prevents programs to pass NULL to kfunc args
even if they are marked as nullable. This patchset adjusts verifier and
changes bpf crypto kfuncs to allow null for IV parameter which is
optional for some ciphers. Benchmark shows ~4% improvements when there
is no need to initialise 0-sized dynptr.

v3:
- add special selftest for nullable parameters
v2:
- adjust kdoc accordingly
====================

Link: https://lore.kernel.org/r/20240613211817.1551967-1-vadfed@meta.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Improve the eBPF verifier to allow nullable kfunc arguments for better performance.,"nullable, kfunc, verifier",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2d45ab1eda469c802728d0a74e1601de5e71c098,2d45ab1eda469c802728d0a74e1601de5e71c098,Vadim Fedorenko,vadfed@meta.com,1718313497,Alexei Starovoitov,ast@kernel.org,1718321584,57df14787c55b7ddfbf0b609138da6a0459cc3e2,9b560751f75f7b2484fa22c781be68f4f9fec2b0,"selftests: bpf: add testmod kfunc for nullable params

Add special test to be sure that only __nullable BTF params can be
replaced by NULL. This patch adds fake kfuncs in bpf_testmod to
properly test different params.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Link: https://lore.kernel.org/r/20240613211817.1551967-6-vadfed@meta.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,The commit adds a bpf_testmod test for nullable BTF parameter handling in kfuncs.,"testmod,nullable,kfunc",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['kprobe/uprobe/ftrace like programs']
9b560751f75f7b2484fa22c781be68f4f9fec2b0,9b560751f75f7b2484fa22c781be68f4f9fec2b0,Vadim Fedorenko,vadfed@meta.com,1718313496,Alexei Starovoitov,ast@kernel.org,1718321584,cd895f7a80d7ae3c4ec349ed96f6594382c9a585,9363dc8ddc4e222c4259013ae5428070712910b9,"selftests: bpf: crypto: adjust bench to use nullable IV

The bench shows some improvements"," around 4% faster on decrypt.

Before:

Benchmark 'crypto-decrypt' started.
Iter   0 (325.719us): hits    5.105M/s (  5.105M/prod)","[' drops 0.000M/s', ' total operations    5.105M/s\nIter   1 (-17.295us): hits    5.224M/s (  5.224M/prod)', ' drops 0.000M/s', ' total operations    5.224M/s\nIter   2 (  5.504us): hits    4.630M/s (  4.630M/prod)', ' drops 0.000M/s', ' total operations    4.630M/s\nIter   3 (  9.239us): hits    5.148M/s (  5.148M/prod)', ' drops 0.000M/s', ' total operations    5.148M/s\nIter   4 ( 37.885us): hits    5.198M/s (  5.198M/prod)', ' drops 0.000M/s', ' total operations    5.198M/s\nIter   5 (-53.282us): hits    5.167M/s (  5.167M/prod)', ' drops 0.000M/s', ' total operations    5.167M/s\nIter   6 (-17.809us): hits    5.186M/s (  5.186M/prod)', ' drops 0.000M/s', ' total operations    5.186M/s\nSummary: hits    5.092 ± 0.228M/s (  5.092M/prod)', ' drops    0.000 ±0.000M/s', "" total operations    5.092 ± 0.228M/s\n\nAfter:\n\nBenchmark 'crypto-decrypt' started.\nIter   0 (268.912us): hits    5.312M/s (  5.312M/prod)"", ' drops 0.000M/s', ' total operations    5.312M/s\nIter   1 (124.869us): hits    5.354M/s (  5.354M/prod)', ' drops 0.000M/s', ' total operations    5.354M/s\nIter   2 (-36.801us): hits    5.334M/s (  5.334M/prod)', ' drops 0.000M/s', ' total operations    5.334M/s\nIter   3 (254.628us): hits    5.334M/s (  5.334M/prod)', ' drops 0.000M/s', ' total operations    5.334M/s\nIter   4 (-77.691us): hits    5.275M/s (  5.275M/prod)', ' drops 0.000M/s', ' total operations    5.275M/s\nIter   5 (-164.510us): hits    5.313M/s (  5.313M/prod)', ' drops 0.000M/s', ' total operations    5.313M/s\nIter   6 (-81.376us): hits    5.346M/s (  5.346M/prod)', ' drops 0.000M/s', ' total operations    5.346M/s\nSummary: hits    5.326 ± 0.029M/s (  5.326M/prod)', ' drops    0.000 ±0.000M/s', ' total operations    5.326 ± 0.029M/s\n\nReviewed-by: Eduard Zingerman <eddyz87@gmail.com>\nSigned-off-by: Vadim Fedorenko <vadfed@meta.com>\nLink: https://lore.kernel.org/r/20240613211817.1551967-5-vadfed@meta.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']","The commit adjusts the selftests for bpf crypto to use a nullable IV, resulting in improved decryption performance.","selftests,bpf,crypto",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
9363dc8ddc4e222c4259013ae5428070712910b9,9363dc8ddc4e222c4259013ae5428070712910b9,Vadim Fedorenko,vadfed@meta.com,1718313495,Alexei Starovoitov,ast@kernel.org,1718321584,782fcc1137f80989d2d87cc83c33dd15ad6827c9,65d6d61d25968d1f13a478a6f303ed8d6b978a77,"selftests: bpf: crypto: use NULL instead of 0-sized dynptr

Adjust selftests to use nullable option for state and IV arg.

Reviewed-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Link: https://lore.kernel.org/r/20240613211817.1551967-4-vadfed@meta.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Adjusts selftests to use nullable option for state and IV argument in BPF.,"selftests,bpf,crypto",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
65d6d61d25968d1f13a478a6f303ed8d6b978a77,65d6d61d25968d1f13a478a6f303ed8d6b978a77,Vadim Fedorenko,vadfed@meta.com,1718313494,Alexei Starovoitov,ast@kernel.org,1718321584,da75dcfa04bc84a5b49b0f5088448ea6bd12ebb9,a90797993afcb0eaf6bf47a062ff47eb3810a6d5,"bpf: crypto: make state and IV dynptr nullable

Some ciphers do not require state and IV buffer"," but with current
implementation 0-sized dynptr is always needed. With adjustment to
verifier we can provide NULL instead of 0-sized dynptr. Make crypto
kfuncs ready for this.

Reviewed-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Link: https://lore.kernel.org/r/20240613211817.1551967-3-vadfed@meta.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],"This commit allows the state and IV dynptr in bpf crypto functions to be nullable, supporting ciphers that don't require them.","crypto,state,dynptr",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
a90797993afcb0eaf6bf47a062ff47eb3810a6d5,a90797993afcb0eaf6bf47a062ff47eb3810a6d5,Vadim Fedorenko,vadfed@meta.com,1718313493,Alexei Starovoitov,ast@kernel.org,1718321584,bae52ca95911eef3ebeb75bfa1c4d261737a3c2d,373a4e13ab4bc947f429fd92409d686fbec57132,"bpf: verifier: make kfuncs args nullalble

Some arguments to kfuncs might be NULL in some cases. But currently it's
not possible to pass NULL to any BTF structures because the check for
the suffix is located after all type checks. Move it to earlier place
to allow nullable args.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Link: https://lore.kernel.org/r/20240613211817.1551967-2-vadfed@meta.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Allow nullable arguments for kfuncs in the BPF verifier by adjusting type check order.,"verifier, kfuncs, nullable",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
b99a95bc56c52a428befbce12d9451fd7a0f3bc2,b99a95bc56c52a428befbce12d9451fd7a0f3bc2,Maciej Żenczykowski,maze@google.com,1718299906,Alexei Starovoitov,ast@kernel.org,1718303085,df900cf0e4647c0bf91f3ed7d2c5478e311232c5,ceb65eb60026e03e1028a99f0ec94f22065e722a,"bpf: fix UML x86_64 compile failure

pcpu_hot (defined in arch/x86) is not available on user mode linux (ARCH=um)

Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Fixes: 1ae6921009e5 (""bpf: inline bpf_get_smp_processor_id() helper"")
Signed-off-by: Maciej Żenczykowski <maze@google.com>
Link: https://lore.kernel.org/r/20240613173146.2524647-1-maze@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Fixes UML x86_64 compilation failure by addressing problem with pcpu_hot not being available.,"UML,x86_64,compile",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
6a8260147745fe493d733d4e5f9b327da3720905,6a8260147745fe493d733d4e5f9b327da3720905,Daniel Xu,dxu@dxuuu.xyz,1718295566,Alexei Starovoitov,ast@kernel.org,1718302723,89ef7a194e42de9d31893e5c15d44fa42462654b,78746f93e903d022c692b9bb3a3e2570167b2dc2,"bpf: selftests: Do not use generated kfunc prototypes for arena progs

When selftests are built with a new enough clang"," the arena selftests
opt-in to use LLVM address_space attribute annotations for arena
pointers.

These annotations are not emitted by kfunc prototype generation. This
causes compilation errors when clang sees conflicting prototypes.

Fix by opting arena selftests out of using generated kfunc prototypes.

Fixes: 770abbb5a25a (""bpftool: Support dumping kfunc prototypes from BTF"")
Reported-by: kernel test robot <lkp@intel.com>
Closes: https://lore.kernel.org/r/202406131810.c1B8hTm8-lkp@intel.com/
Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/fc59a617439ceea9ad8dfbb4786843c2169496ae.1718295425.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Fix selftests by opting arena selftests out of generated kfunc prototypes due to conflicting prototypes with LLVM address_space attribute annotations.,"selftests, kfunc prototypes, LLVM",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
78746f93e903d022c692b9bb3a3e2570167b2dc2,78746f93e903d022c692b9bb3a3e2570167b2dc2,Daniel Xu,dxu@dxuuu.xyz,1718295565,Alexei Starovoitov,ast@kernel.org,1718302723,93eebc7dfdda1d2b14177f637ac3e6e89a7e15d1,041c1dc988fdffd5eb0c13f1ce5d1b3b0125f208,"bpf: Fix bpf_dynptr documentation comments

The function argument names were changed but the doc comment was not.
Fix htmldocs build warning by updating doc comments.

Fixes: cce4c40b9606 (""bpf: treewide: Align kfunc signatures to prog point-of-view"")
Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/d0b0eb05f91e12e5795966153b11998d3fc1d433.1718295425.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Fix documentation comment mismatches for bpf_dynptr to resolve htmldocs build warnings.,"documentation, comments, htmldocs",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
ceb65eb60026e03e1028a99f0ec94f22065e722a,ceb65eb60026e03e1028a99f0ec94f22065e722a,Daniel Borkmann,daniel@iogearbox.net,1718279590,Alexei Starovoitov,ast@kernel.org,1718302561,ada58631382c2fa24a0b95f053b5513620b46f19,e73cd1cfc2177654e562b04f514be5f0f0b96da2,"selftests/bpf: Add test coverage for reg_set_min_max handling

Add a test case for the jmp32/k fix to ensure selftests have coverage.

Before fix:

  # ./vmtest.sh -- ./test_progs -t verifier_or_jmp32_k
  [...]
  ./test_progs -t verifier_or_jmp32_k
  tester_init:PASS:tester_log_buf 0 nsec
  process_subtest:PASS:obj_open_mem 0 nsec
  process_subtest:PASS:specs_alloc 0 nsec
  run_subtest:PASS:obj_open_mem 0 nsec
  run_subtest:FAIL:unexpected_load_success unexpected success: 0
  #492/1   verifier_or_jmp32_k/or_jmp32_k: bit ops + branch on unknown value:FAIL
  #492     verifier_or_jmp32_k:FAIL
  Summary: 0/0 PASSED", 0 SKIPPED,"[' 1 FAILED\n\nAfter fix:\n\n  # ./vmtest.sh -- ./test_progs -t verifier_or_jmp32_k\n  [...]\n  ./test_progs -t verifier_or_jmp32_k\n  #492/1   verifier_or_jmp32_k/or_jmp32_k: bit ops + branch on unknown value:OK\n  #492     verifier_or_jmp32_k:OK\n  Summary: 1/1 PASSED', ' 0 SKIPPED', ' 0 FAILED\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: John Fastabend <john.fastabend@gmail.com>\nLink: https://lore.kernel.org/r/20240613115310.25383-3-daniel@iogearbox.net\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Add a test case for verifying reg_set_min_max handling in eBPF selftests.,"test, reg_set_min_max, selftests",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tracepoints like programs']
e73cd1cfc2177654e562b04f514be5f0f0b96da2,e73cd1cfc2177654e562b04f514be5f0f0b96da2,Daniel Borkmann,daniel@iogearbox.net,1718279589,Alexei Starovoitov,ast@kernel.org,1718302561,80e9183bca908b2452d45c87141e7b13c33502af,92424801261d1564a0bb759da3cf3ccd69fdf5a2,"bpf: Reduce stack consumption in check_stack_write_fixed_off

The fake_reg moved into env->fake_reg given it consumes a lot of stack
space (120 bytes). Migrate the fake_reg in check_stack_write_fixed_off()
as well now that we have it.

Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/r/20240613115310.25383-2-daniel@iogearbox.net
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Reduced stack space by moving fake_reg to env->fake_reg in check_stack_write_fixed_off.,"stack, fake_reg, consumption",It's a performance optimization.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
92424801261d1564a0bb759da3cf3ccd69fdf5a2,92424801261d1564a0bb759da3cf3ccd69fdf5a2,Daniel Borkmann,daniel@iogearbox.net,1718279588,Alexei Starovoitov,ast@kernel.org,1718302561,654062646ac86c1f6322806b02e95326852c5e3d,26ba7c3f139f843bf46ed0779e30d84641767959,"bpf: Fix reg_set_min_max corruption of fake_reg

Juan reported that after doing some changes to buzzer [0] and implementing
a new fuzzing strategy guided by coverage"," they noticed the following in
one of the probes:

  [...]
  13: (79) r6 = *(u64 *)(r0 +0)         ; R0=map_value(ks=4","['vs=8) R6_w=scalar()\n  14: (b7) r0 = 0                       ; R0_w=0\n  15: (b4) w0 = -1                      ; R0_w=0xffffffff\n  16: (74) w0 >>= 1                     ; R0_w=0x7fffffff\n  17: (5c) w6 &= w0                     ; R0_w=0x7fffffff R6_w=scalar(smin=smin32=0', 'smax=umax=umax32=0x7fffffff', 'var_off=(0x0; 0x7fffffff))\n  18: (44) w6 |= 2                      ; R6_w=scalar(smin=umin=smin32=umin32=2', 'smax=umax=umax32=0x7fffffff', 'var_off=(0x2; 0x7ffffffd))\n  19: (56) if w6 != 0x7ffffffd goto pc+1\n  REG INVARIANTS VIOLATION (true_reg2): range bounds violation u64=[0x7fffffff', ' 0x7ffffffd] s64=[0x7fffffff', ' 0x7ffffffd] u32=[0x7fffffff', ' 0x7ffffffd] s32=[0x7fffffff', ' 0x7ffffffd] var_off=(0x7fffffff', ' 0x0)\n  REG INVARIANTS VIOLATION (false_reg1): range bounds violation u64=[0x7fffffff', ' 0x7ffffffd] s64=[0x7fffffff', ' 0x7ffffffd] u32=[0x7fffffff', ' 0x7ffffffd] s32=[0x7fffffff', ' 0x7ffffffd] var_off=(0x7fffffff', ' 0x0)\n  REG INVARIANTS VIOLATION (false_reg2): const tnum out of sync with range bounds u64=[0x0', ' 0xffffffffffffffff] s64=[0x8000000000000000', ' 0x7fffffffffffffff] u32=[0x0', ' 0xffffffff] s32=[0x80000000', ' 0x7fffffff] var_off=(0x7fffffff', ' 0x0)\n  19: R6_w=0x7fffffff\n  20: (95) exit\n\n  from 19 to 21: R0=0x7fffffff R6=scalar(smin=umin=smin32=umin32=2', 'smax=umax=smax32=umax32=0x7ffffffe', 'var_off=(0x2; 0x7ffffffd)) R7=map_ptr(ks=4', 'vs=8) R9=ctx() R10=fp0 fp-24=map_ptr(ks=4', 'vs=8) fp-40=mmmmmmmm\n  21: R0=0x7fffffff R6=scalar(smin=umin=smin32=umin32=2', 'smax=umax=smax32=umax32=0x7ffffffe', 'var_off=(0x2; 0x7ffffffd)) R7=map_ptr(ks=4', 'vs=8) R9=ctx() R10=fp0 fp-24=map_ptr(ks=4', 'vs=8) fp-40=mmmmmmmm\n  21: (14) w6 -= 2147483632             ; R6_w=scalar(smin=umin=umin32=2', 'smax=umax=0xffffffff', 'smin32=0x80000012', 'smax32=14', 'var_off=(0x2; 0xfffffffd))\n  22: (76) if w6 s>= 0xe goto pc+1      ; R6_w=scalar(smin=umin=umin32=2', 'smax=umax=0xffffffff', 'smin32=0x80000012', 'smax32=13', 'var_off=(0x2; 0xfffffffd))\n  23: (95) exit\n\n  from 22 to 24: R0=0x7fffffff R6_w=14 R7=map_ptr(ks=4', 'vs=8) R9=ctx() R10=fp0 fp-24=map_ptr(ks=4', 'vs=8) fp-40=mmmmmmmm\n  24: R0=0x7fffffff R6_w=14 R7=map_ptr(ks=4', 'vs=8) R9=ctx() R10=fp0 fp-24=map_ptr(ks=4', 'vs=8) fp-40=mmmmmmmm\n  24: (14) w6 -= 14                     ; R6_w=0\n  [...]\n\nWhat can be seen here is a register invariant violation on line 19. After\nthe binary-or in line 18', ' the verifier knows that bit 2 is set but knows\nnothing about the rest of the content which was loaded from a map value', '\nmeaning', ' range is [2', '0x7fffffff] with var_off=(0x2; 0x7ffffffd). When in\nline 19 the verifier analyzes the branch', ' it splits the register states\nin reg_set_min_max() into the registers of the true branch (true_reg1', '\ntrue_reg2) and the registers of the false branch (false_reg1', ' false_reg2).\n\nSince the test is w6 != 0x7ffffffd', ' the src_reg is a known constant.\nInternally', ' the verifier creates a ""fake"" register initialized as scalar\nto the value of 0x7ffffffd', ' and then passes it onto reg_set_min_max(). Now', '\nfor line 19', ' it is mathematically impossible to take the false branch of\nthis program', ' yet the verifier analyzes it. It is impossible because the\nsecond bit of r6 will be set due to the prior or operation and the\nconstant in the condition has that bit unset (hex(fd) == binary(1111 1101).\n\nWhen the verifier first analyzes the false / fall-through branch', ' it will\ncompute an intersection between the var_off of r6 and of the constant. This\nis because the verifier creates a ""fake"" register initialized to the value\nof the constant. The intersection result later refines both registers in\nregs_refine_cond_op():\n\n  [...]\n  t = tnum_intersect(tnum_subreg(reg1->var_off)', ' tnum_subreg(reg2->var_off));\n  reg1->var_off = tnum_with_subreg(reg1->var_off', ' t);\n  reg2->var_off = tnum_with_subreg(reg2->var_off', ' t);\n  [...]\n\nSince the verifier is analyzing the false branch of the conditional jump', '\nreg1 is equal to false_reg1 and reg2 is equal to false_reg2', ' i.e. the reg2\nis the ""fake"" register that was meant to hold a constant value. The resulting\nvar_off of the intersection says that both registers now hold a known value\nof var_off=(0x7fffffff', ' 0x0) or in other words: this operation manages to\nmake the verifier think that the ""constant"" value that was passed in the\njump operation now holds a different value.\n\nNormally this would not be an issue since it should not influence the true\nbranch', ' however', ' false_reg2 and true_reg2 are pointers to the same ""fake""\nregister. Meaning', ' the false branch can influence the results of the true\nbranch. In line 24', ' the verifier assumes R6_w=0', ' but the actual runtime\nvalue in this case is 1. The fix is simply not passing in the same ""fake""\nregister location as inputs to reg_set_min_max()', ' but instead making a\ncopy. Moving the fake_reg into the env also reduces stack consumption by\n120 bytes. With this', ' the verifier successfully rejects invalid accesses\nfrom the test program.\n\n  [0] https://github.com/google/buzzer\n\nFixes: 67420501e868 (""bpf: generalize reg_set_min_max() to handle non-const register comparisons"")\nReported-by: Juan José López Jaimez <jjlopezjaimez@google.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: John Fastabend <john.fastabend@gmail.com>\nLink: https://lore.kernel.org/r/20240613115310.25383-1-daniel@iogearbox.net\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit fixes a corruption issue in reg_set_min_max for fake registers in eBPF.,"reg_set_min_max, corruption, fake_reg",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
041c1dc988fdffd5eb0c13f1ce5d1b3b0125f208,041c1dc988fdffd5eb0c13f1ce5d1b3b0125f208,Vadim Fedorenko,vadfed@meta.com,1717685931,Daniel Borkmann,daniel@iogearbox.net,1718281793,81b6698d112bb09cd4ee9a04c79a397d02110abd,a3cfe84cca28f205761a0450016593b0d728165e,"selftests/bpf: Validate CHECKSUM_COMPLETE option

Adjust skb program test to run with checksum validation.

Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240606145851.229116-2-vadfed@meta.com
",,Add checksum validation to skb program selftest in bpf.,"checksum, skb, selftest",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
a3cfe84cca28f205761a0450016593b0d728165e,a3cfe84cca28f205761a0450016593b0d728165e,Vadim Fedorenko,vadfed@meta.com,1717685930,Daniel Borkmann,daniel@iogearbox.net,1718281787,15b374e2476950553d60dc612cf7709bc1fc40d1,4ff5747158f323939e2ce8881ca61f3c646948c4,"bpf: Add CHECKSUM_COMPLETE to bpf test progs

Add special flag to validate that TC BPF program properly updates
checksum information in skb.

Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Jakub Kicinski <kuba@kernel.org>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240606145851.229116-1-vadfed@meta.com
",,Add CHECKSUM_COMPLETE flag to test TC BPF program's checksum updates in skb.,"CHECKSUM_COMPLETE, TC, skb",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tc/netfilter like programs']
d2675fe95fc7e880aecad2d08626131527e084a6,d2675fe95fc7e880aecad2d08626131527e084a6,Jakub Kicinski,kuba@kernel.org,1718228042,Jakub Kicinski,kuba@kernel.org,1718228043,75f6dda28ad47e21ce91e564a90e198ffad5b409,91579c93a9b207725559e3199870419afd50220f d1dab4f71d372e00e2d34a9c32bf261623e3a95c,"Merge branch 'net-flow-dissector-allow-explicit-passing-of-netns'

Florian Westphal says:

====================
net: flow dissector: allow explicit passing of netns

Change since last version:
 fix kdoc comment warning reported by kbuild robot", no other changes,"['\n thus retaining RvB tags from Eric and Willem.\n v1: https://lore.kernel.org/netdev/20240607083205.3000-1-fw@strlen.de/\n\nYears ago flow dissector gained ability to delegate flow dissection\nto a bpf program', ' scoped per netns.\n\nThe netns is derived from skb->dev', ' and if that is not available', ' from\nskb->sk.  If neither is set', ' we hit a (benign) WARN_ON_ONCE().\n\nThis WARN_ON_ONCE can be triggered from netfilter.\nKnown skb origins are nf_send_reset and ipv4 stack generated IGMP\nmessages.\n\nLets allow callers to pass the current netns explicitly and make\nnf_tables use those instead.\n\nThis targets net-next instead of net because the WARN is benign and this\nis not a regression.\n====================\n\nLink: https://lore.kernel.org/r/20240608221057.16070-1-fw@strlen.de\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",The commit merges changes to allow explicit passing of netns in net flow dissector.,"flow,dissector,netns",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
b975d3ee5962237c1e2f5d5aeeaaf0dc2173486c,b975d3ee5962237c1e2f5d5aeeaaf0dc2173486c,Florian Westphal,fw@strlen.de,1717884639,Jakub Kicinski,kuba@kernel.org,1718228018,2f71b19764682e5e8cded567a6c3f193033401d3,91579c93a9b207725559e3199870419afd50220f,"net: add and use skb_get_hash_net

Years ago flow dissector gained ability to delegate flow dissection
to a bpf program"," scoped per netns.

Unfortunately","[' skb_get_hash() only gets an sk_buff argument instead\nof both net+skb.  This means the flow dissector needs to obtain the\nnetns pointer from somewhere else.\n\nThe netns is derived from skb->dev', ' and if that is not available', ' from\nskb->sk.  If neither is set', ' we hit a (benign) WARN_ON_ONCE().\n\nTrying both dev and sk covers most cases', ' but not all', ' as recently\nreported by Christoph Paasch.\n\nIn case of nf-generated tcp reset', "" both sk and dev are NULL:\n\nWARNING: .. net/core/flow_dissector.c:1104\n skb_flow_dissect_flow_keys include/linux/skbuff.h:1536 [inline]\n skb_get_hash include/linux/skbuff.h:1578 [inline]\n nft_trace_init+0x7d/0x120 net/netfilter/nf_tables_trace.c:320\n nft_do_chain+0xb26/0xb90 net/netfilter/nf_tables_core.c:268\n nft_do_chain_ipv4+0x7a/0xa0 net/netfilter/nft_chain_filter.c:23\n nf_hook_slow+0x57/0x160 net/netfilter/core.c:626\n __ip_local_out+0x21d/0x260 net/ipv4/ip_output.c:118\n ip_local_out+0x26/0x1e0 net/ipv4/ip_output.c:127\n nf_send_reset+0x58c/0x700 net/ipv4/netfilter/nf_reject_ipv4.c:308\n nft_reject_ipv4_eval+0x53/0x90 net/ipv4/netfilter/nft_reject_ipv4.c:30\n [..]\n\nsyzkaller did something like this:\ntable inet filter {\n  chain input {\n    type filter hook input priority filter; policy accept;\n    meta nftrace set 1\n    tcp dport 42 reject with tcp reset\n   }\n   chain output {\n    type filter hook output priority filter; policy accept;\n    # empty chain is enough\n   }\n}\n\n... then sends a tcp packet to port 42.\n\nInitial attempt to simply set skb->dev from nf_reject_ipv4 doesn't cover\nall cases: skbs generated via ipv4 igmp_send_report trigger similar splat.\n\nMoreover"", ' Pablo Neira found that nft_hash.c uses __skb_get_hash_symmetric()\nwhich would trigger same warn splat for such skbs.\n\nLets allow callers to pass the current netns explicitly.\nThe nf_trace infrastructure is adjusted to use the new helper.\n\n__skb_get_hash_symmetric is handled in the next patch.\n\nReported-by: Christoph Paasch <cpaasch@apple.com>\nCloses: https://github.com/multipath-tcp/mptcp_net-next/issues/494\nReviewed-by: Willem de Bruijn <willemb@google.com>\nSigned-off-by: Florian Westphal <fw@strlen.de>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nLink: https://lore.kernel.org/r/20240608221057.16070-2-fw@strlen.de\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",The commit introduces skb_get_hash_net to leverage flow dissection by bpf programs in the network stack.,"flow dissection,bpf program,network",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF maps,"['tc/netfilter like programs', 'socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
4ff5747158f323939e2ce8881ca61f3c646948c4,4ff5747158f323939e2ce8881ca61f3c646948c4,Alexei Starovoitov,ast@kernel.org,1718215292,Alexei Starovoitov,ast@kernel.org,1718215292,93fefc8047f6a553b4e4ce76b3a5e5dab71b444d,98b303c9bf05dae932efbd71e18d81f6c64f20d8 770abbb5a25a5b767f1c60ba366aea503728e957,"Merge branch 'bpf-support-dumping-kfunc-prototypes-from-btf'

Daniel Xu says:

====================
bpf: Support dumping kfunc prototypes from BTF

This patchset enables both detecting as well as dumping compilable
prototypes for kfuncs.

The first commit instructs pahole to DECL_TAG kfuncs when available.
This requires v1.27 which was released on 6/11/24. With it"," users will
be able to look at BTF inside vmlinux (or modules) and check if the
kfunc they want is available.

The final commit teaches bpftool how to dump kfunc prototypes. This
is done for developer convenience.

The rest of the commits are fixups to enable selftests to use the
newly dumped kfunc prototypes. With these","[' selftests will regularly\nexercise the newly added codepaths.\n\nTested with and without the required pahole changes:\n\n  * https://github.com/kernel-patches/bpf/pull/7186\n  * https://github.com/kernel-patches/bpf/pull/7187\n\n=== Changelog ===\nFrom v4:\n* Change bpf_session_cookie() return type\n* Only fixup used fentry test kfunc prototypes\n* Extract out projection detection into shared btf_is_projection_of()\n* Fix kernel test robot build warnings about doc comments\n\nFrom v3:\n* Teach selftests to use dumped prototypes\n\nFrom v2:\n* Update Makefile.btf with pahole flag\n* More error checking\n* Output formatting changes\n* Drop already-merged commit\n\nFrom v1:\n* Add __weak annotation\n* Use btf_dump for kfunc prototypes\n* Update kernel bpf_rdonly_cast() signature\n====================\n\nLink: https://lore.kernel.org/r/cover.1718207789.git.dxu@dxuuu.xyz\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",This commit adds support for dumping kfunc prototypes from BTF for developer convenience.,"kfunc, BTF, bpftool",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
770abbb5a25a5b767f1c60ba366aea503728e957,770abbb5a25a5b767f1c60ba366aea503728e957,Daniel Xu,dxu@dxuuu.xyz,1718207916,Alexei Starovoitov,ast@kernel.org,1718215292,93fefc8047f6a553b4e4ce76b3a5e5dab71b444d,c567cba34585514f82600a10587c8813c50e3a7c,"bpftool: Support dumping kfunc prototypes from BTF

This patch enables dumping kfunc prototypes from bpftool. This is useful
b/c with this patch"," end users will no longer have to manually define
kfunc prototypes. For the kernel tree","[' this also means we can optionally\ndrop kfunc prototypes from:\n\n        tools/testing/selftests/bpf/bpf_kfuncs.h\n        tools/testing/selftests/bpf/bpf_experimental.h\n\nExample usage:\n\n        $ make PAHOLE=/home/dxu/dev/pahole/build/pahole -j30 vmlinux\n\n        $ ./tools/bpf/bpftool/bpftool btf dump file ./vmlinux format c | rg ""__ksym;"" | head -3\n        extern void cgroup_rstat_updated(struct cgroup *cgrp', ' int cpu) __weak __ksym;\n        extern void cgroup_rstat_flush(struct cgroup *cgrp) __weak __ksym;\n        extern struct bpf_key *bpf_lookup_user_key(u32 serial', ' u64 flags) __weak __ksym;\n\nSigned-off-by: Daniel Xu <dxu@dxuuu.xyz>\nLink: https://lore.kernel.org/r/bf6c08f9263c4bd9d10a717de95199d766a13f61.1718207789.git.dxu@dxuuu.xyz\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']","This patch enables bpftool to automatically dump kfunc prototypes from BTF, which aids users by eliminating the need for manual definitions.","bpftool, kfunc, BTF",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The bpftool utility,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
c567cba34585514f82600a10587c8813c50e3a7c,c567cba34585514f82600a10587c8813c50e3a7c,Daniel Xu,dxu@dxuuu.xyz,1718207915,Alexei Starovoitov,ast@kernel.org,1718215291,0d43674a39aa772526021a94de0a2cd8374e0fdc,f709124dd72fe7a3f6ba7764b2ed145c55c33e47,"bpf: selftests: xfrm: Opt out of using generated kfunc prototypes

The xfrm_info selftest locally defines an aliased type such that folks
with CONFIG_XFRM_INTERFACE=m/n configs can still build the selftests.
See commit aa67961f3243 (""selftests/bpf: Allow building bpf tests with CONFIG_XFRM_INTERFACE=[m|n]"").

Thus"," it is simpler if this selftest opts out of using enerated kfunc
prototypes. The preprocessor macro this commit uses will be introduced
in the final commit.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/afe0bb1c50487f52542cdd5230c4aef9e36ce250.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Opt out of using generated kfunc prototypes for xfrm selftest to support CONFIG_XFRM_INTERFACE configurations.,"selftests, kfunc, xfrm",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
f709124dd72fe7a3f6ba7764b2ed145c55c33e47,f709124dd72fe7a3f6ba7764b2ed145c55c33e47,Daniel Xu,dxu@dxuuu.xyz,1718207914,Alexei Starovoitov,ast@kernel.org,1718215291,beef5a1c581dd1eaedc5b2c27c6869cea236627e,cce4c40b960673f9e020835def310f1e89d3a940,"bpf: selftests: nf: Opt out of using generated kfunc prototypes

The bpf-nf selftests play various games with aliased types such that
folks with CONFIG_NF_CONNTRACK=m/n configs can still build the
selftests. See commits:

1058b6a78db2 (""selftests/bpf: Do not fail build if CONFIG_NF_CONNTRACK=m/n"")
92afc5329a5b (""selftests/bpf: Fix build errors if CONFIG_NF_CONNTRACK=m"")

Thus"," it is simpler if these selftests opt out of using generated kfunc
prototypes. The preprocessor macro this commit uses will be introduced
in the final commit.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/044a5b10cb3abd0d71cb1c818ee0bfc4a2239332.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],The commit allows bpf-nf selftests to opt out of using generated kfunc prototypes for compatibility with different CONFIG_NF_CONNTRACK settings.,"bpf-nf,selftests,kfunc",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
cce4c40b960673f9e020835def310f1e89d3a940,cce4c40b960673f9e020835def310f1e89d3a940,Daniel Xu,dxu@dxuuu.xyz,1718207913,Alexei Starovoitov,ast@kernel.org,1718215291,a468b9c66bcea3e5c796b3f1f7d80cb9fa86ca1b,ec209ad86324de84ef66990f0e9df0851e45e054,"bpf: treewide: Align kfunc signatures to prog point-of-view

Previously"," kfunc declarations in bpf_kfuncs.h (and others) used ""user
facing"" types for kfuncs prototypes while the actual kfunc definitions
used ""kernel facing"" types. More specifically: bpf_dynptr vs
bpf_dynptr_kern","[' __sk_buff vs sk_buff', "" and xdp_md vs xdp_buff.\n\nIt wasn't an issue before"", ' as the verifier allows aliased types.\nHowever', ' since we are now generating kfunc prototypes in vmlinux.h (in\naddition to keeping bpf_kfuncs.h around)', ' this conflict creates\ncompilation errors.\n\nFix this conflict by using ""user facing"" types in kfunc definitions.\nThis results in more casts', ' but otherwise has no additional runtime\ncost.\n\nNote', ' similar to 5b268d1ebcdc (""bpf: Have bpf_rdonly_cast() take a const\npointer"")', ' we also make kfuncs take const arguments where appropriate in\norder to make the kfunc more permissive.\n\nSigned-off-by: Daniel Xu <dxu@dxuuu.xyz>\nLink: https://lore.kernel.org/r/b58346a63a0e66bc9b7504da751b526b0b189a67.1718207789.git.dxu@dxuuu.xyz\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Align kfunc signatures to match the program's point-of-view in eBPF.,"kfunc signatures, alignment, eBPF",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
ec209ad86324de84ef66990f0e9df0851e45e054,ec209ad86324de84ef66990f0e9df0851e45e054,Daniel Xu,dxu@dxuuu.xyz,1718207912,Alexei Starovoitov,ast@kernel.org,1718215291,cd5d9b2cf0419b0527efb65f6f88137b98802e08,0ce089cbdc6a393bf9ad04964427852800503a58,"bpf: verifier: Relax caller requirements for kfunc projection type args

Currently"," if a kfunc accepts a projection type as an argument (eg
struct __sk_buff *)","[' the caller must exactly provide exactly the same\ntype with provable provenance.\n\nHowever in practice', ' kfuncs that accept projection types _must_ cast to\nthe underlying type before use b/c projection type layouts are\ncompletely made up. Thus', ' it is ok to relax the verifier rules around\nimplicit conversions.\n\nWe will use this functionality in the next commit when we align kfuncs\nto user-facing types.\n\nSigned-off-by: Daniel Xu <dxu@dxuuu.xyz>\nLink: https://lore.kernel.org/r/e2c025cb09ccfd4af1ec9e18284dc3cecff7514d.1718207789.git.dxu@dxuuu.xyz\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit modifies the eBPF verifier to relax requirements for kfunc projection type arguments.,"verifier, kfunc, projection",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
0ce089cbdc6a393bf9ad04964427852800503a58,0ce089cbdc6a393bf9ad04964427852800503a58,Daniel Xu,dxu@dxuuu.xyz,1718207911,Alexei Starovoitov,ast@kernel.org,1718215291,b3348e120fa3f826e7d8945b5b63048018205004,2b8dd87332cd2782b5b3f0c423bd6693e487ed30,"bpf: selftests: Namespace struct_opt callbacks in bpf_dctcp

With generated kfunc prototypes"," the existing callback names will
conflict. Fix by namespacing with a bpf_ prefix.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/efe7aadad8a054e5aeeba94b1d2e4502eee09d7a.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Namespace struct_opt callbacks in bpf_dctcp with bpf_ prefix to avoid conflicts.,"namespace, callbacks, conflict",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2b8dd87332cd2782b5b3f0c423bd6693e487ed30,2b8dd87332cd2782b5b3f0c423bd6693e487ed30,Daniel Xu,dxu@dxuuu.xyz,1718207910,Alexei Starovoitov,ast@kernel.org,1718215291,0a2fba86be896a371f7e8f39098b7eed0f695b60,ac42f636dc11b2e8d6dea9dd5bb10a39c7bec342,"bpf: Make bpf_session_cookie() kfunc return long *

We will soon be generating kfunc prototypes from BTF. As part of that","
we need to align the manual signatures in bpf_kfuncs.h with the actual
kfunc definitions. There is currently a conflicting signature for
bpf_session_cookie() w.r.t. return type.

The original intent was to return long * and not __u64 *. You can see
evidence of that intent in a3a5113393cc (""selftests/bpf: Add kprobe
session cookie test"").

Fix conflict by changing kfunc definition.

Fixes: 5c919acef851 (""bpf: Add support for kprobe session cookie"")
Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/7043e1c251ab33151d6e3830f8ea1902ed2604ac.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Fixes signature conflict by changing bpf_session_cookie() kfunc return type to long *.,"kfunc,long *,signature",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,['kprobe/uprobe/ftrace like programs']
ac42f636dc11b2e8d6dea9dd5bb10a39c7bec342,ac42f636dc11b2e8d6dea9dd5bb10a39c7bec342,Daniel Xu,dxu@dxuuu.xyz,1718207909,Alexei Starovoitov,ast@kernel.org,1718215291,94ecb2c00b4d6e4efed2f684420bc0109cdee0b3,89f0b1abac497c47d0851b780abecc756c1e8734,"bpf: selftests: Fix bpf_map_sum_elem_count() kfunc prototype

The prototype in progs/map_percpu_stats.c is not in line with how the
actual kfuncs are defined in kernel/bpf/map_iter.c. This causes
compilation errors when kfunc prototypes are generated from BTF.

Fix by aligning with actual kfunc definitions.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/0497e11a71472dcb71ada7c90ad691523ae87c3b.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Fix the kfunc prototype for bpf_map_sum_elem_count in eBPF selftests to align with kernel definitions.,"kfunc,prototype,selftests",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
89f0b1abac497c47d0851b780abecc756c1e8734,89f0b1abac497c47d0851b780abecc756c1e8734,Daniel Xu,dxu@dxuuu.xyz,1718207908,Alexei Starovoitov,ast@kernel.org,1718215291,19cb226b6eca78783a58d47c3e60c93b1ad5f926,dff96e4f5078c6c61fc6c36dddf27b124c4318fc,"bpf: selftests: Fix bpf_cpumask_first_zero() kfunc prototype

The prototype in progs/nested_trust_common.h is not in line with how the
actual kfuncs are defined in kernel/bpf/cpumask.c. This causes compilation
errors when kfunc prototypes are generated from BTF.

Fix by aligning with actual kfunc definitions.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/437936a4e554b02e04566dd6e3f0a5d08370cc8c.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Fixes prototype mismatch for bpf_cpumask_first_zero() in selftests to align with kernel kfunc definitions.,"selftests, prototype, alignment",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
dff96e4f5078c6c61fc6c36dddf27b124c4318fc,dff96e4f5078c6c61fc6c36dddf27b124c4318fc,Daniel Xu,dxu@dxuuu.xyz,1718207907,Alexei Starovoitov,ast@kernel.org,1718215290,1b673dcf56db74184c624870d3c91052bb1fe995,718135f5bd24ec10ff38aa0294a7da0a7b99fa89,"bpf: selftests: Fix fentry test kfunc prototypes

Some prototypes in progs/get_func_ip_test.c were not in line with how the
actual kfuncs are defined in net/bpf/test_run.c. This causes compilation
errors when kfunc prototypes are generated from BTF.

Fix by aligning with actual kfunc definitions.

Also remove two unused prototypes.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/1e68870e7626b7b9c6420e65076b307fc404a2f0.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Fixed fentry test kfunc prototypes in selftests for correct compilation with BTF.,"fentry,kfunc,BTF",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['kprobe/uprobe/ftrace like programs']
718135f5bd24ec10ff38aa0294a7da0a7b99fa89,718135f5bd24ec10ff38aa0294a7da0a7b99fa89,Daniel Xu,dxu@dxuuu.xyz,1718207906,Alexei Starovoitov,ast@kernel.org,1718215290,fac931e21209e0e0bc7bd2021300bf6a32d6377f,ebb79e96f1ea454fbcc8fe27dfe44e751bd74b4b,"bpf: selftests: Fix bpf_iter_task_vma_new() prototype

bpf_iter_task_vma_new() is defined as taking a u64 as its 3rd argument.
u64 is a unsigned long long. bpf_experimental.h was defining the
prototype as unsigned long.

Fix by using __u64.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/fab4509bfee914f539166a91c3ff41e949f3df30.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Fixes prototype mismatch in bpf_iter_task_vma_new() by correcting the third argument type to __u64.,"prototype,fix,__u64",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
ebb79e96f1ea454fbcc8fe27dfe44e751bd74b4b,ebb79e96f1ea454fbcc8fe27dfe44e751bd74b4b,Daniel Xu,dxu@dxuuu.xyz,1718207905,Alexei Starovoitov,ast@kernel.org,1718215290,16c92ae5524f281941806d851448e5a9b01a9146,98b303c9bf05dae932efbd71e18d81f6c64f20d8,"kbuild: bpf: Tell pahole to DECL_TAG kfuncs

With [0]"," pahole can now discover kfuncs and inject DECL_TAG
into BTF. With this commit","[' we will start shipping said DECL_TAGs\nto downstream consumers if pahole supports it.\n\nThis is useful for feature probing kfuncs as well as generating\ncompilable prototypes. This is particularly important as kfuncs\ndo not have stable ABI.\n\n[0]: https://git.kernel.org/pub/scm/devel/pahole/pahole.git/commit/?id=72e88f29c6f7e14201756e65bd66157427a61aaf\n\nSigned-off-by: Daniel Xu <dxu@dxuuu.xyz>\nLink: https://lore.kernel.org/r/324aac5c627bddb80d9968c30df6382846994cc8.1718207789.git.dxu@dxuuu.xyz\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Enable pahole to discover and inject DECL_TAG kfuncs into BTF.,"pahole, kfuncs, BTF",It's a build system or CI/CD change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
bf0baa5bbdc9b99ea081d360f245e5f96e835612,bf0baa5bbdc9b99ea081d360f245e5f96e835612,Puranjay Mohan,puranjay@kernel.org,1714756727,Catalin Marinas,catalin.marinas@arm.com,1718203459,4acac0c94439b1e1feb92caca8521f1d012aabe6,7647e2b109f4d508fcb35bb8089a27c4fdd81f61,"arm64: implement raw_smp_processor_id() using thread_info

Historically"," arm64 implemented raw_smp_processor_id() as a read of
current_thread_info()->cpu. This changed when arm64 moved thread_info into
task struct","[' as at the time CONFIG_THREAD_INFO_IN_TASK made core code use\nthread_struct::cpu for the cpu number', ' and due to header dependencies\nprevented using this in raw_smp_processor_id(). As a workaround', ' we moved to\nusing a percpu variable in commit:\n\n  57c82954e77fa12c (""arm64: make cpu number a percpu variable"")\n\nSince then', ' thread_info::cpu was reintroduced', ' and core code was made to use\nthis in commits:\n\n  001430c1910df65a (""arm64: add CPU field to struct thread_info"")\n  bcf9033e5449bdca (""sched: move CPU field back into thread_info if THREAD_INFO_IN_TASK=y"")\n\nConsequently it is possible to use current_thread_info()->cpu again.\n\nThis decreases the number of emitted instructions like in the following\nexample:\n\nDump of assembler code for function bpf_get_smp_processor_id:\n   0xffff8000802cd608 <+0>:     nop\n   0xffff8000802cd60c <+4>:     nop\n   0xffff8000802cd610 <+8>:     adrp    x0', ' 0xffff800082138000\n   0xffff8000802cd614 <+12>:    mrs     x1', ' tpidr_el1\n   0xffff8000802cd618 <+16>:    add     x0', ' x0', ' #0x8\n   0xffff8000802cd61c <+20>:    ldrsw   x0', ' [x0', ' x1]\n   0xffff8000802cd620 <+24>:    ret\n\nAfter this patch:\n\nDump of assembler code for function bpf_get_smp_processor_id:\n   0xffff8000802c9130 <+0>:     nop\n   0xffff8000802c9134 <+4>:     nop\n   0xffff8000802c9138 <+8>:     mrs     x0', ' sp_el0\n   0xffff8000802c913c <+12>:    ldr     w0', ' [x0', ' #24]\n   0xffff8000802c9140 <+16>:    ret\n\nA microbenchmark[1] was built to measure the performance improvement\nprovided by this change. It calls the following function given number of\ntimes and finds the runtime overhead:\n\nstatic noinline int get_cpu_id(void)\n{\n\treturn smp_processor_id();\n}\n\nRun the benchmark like:\n modprobe smp_processor_id nr_function_calls=1000000000\n\n      +--------------------------+------------------------+\n      |        | Number of Calls |    Time taken          |\n      +--------+-----------------+------------------------+\n      | Before |   1000000000    |   1602888401ns         |\n      +--------+-----------------+------------------------+\n      | After  |   1000000000    |   1206212658ns         |\n      +--------+-----------------+------------------------+\n      |  Difference (decrease)   |   396675743ns (24.74%) |\n      +---------------------------------------------------+\n\nRemove the percpu variable cpu_number as it is used only in\nset_smp_ipi_range() as a dummy variable to be passed to ipi_handler().\nUse irq_stat in place of cpu_number here like arm32.\n\n[1] https://github.com/puranjaymohan/linux/commit/77d3fdd\n\nSigned-off-by: Puranjay Mohan <puranjay@kernel.org>\nAcked-by: Mark Rutland <mark.rutland@arm.com>\nReviewed-by: Stephen Boyd <swboyd@chromium.org>\nLink: https://lore.kernel.org/r/20240503171847.68267-2-puranjay@kernel.org\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>\n', '']",The commit implements raw_smp_processor_id using thread_info for the arm64 architecture.,"arm64, raw_smp_processor_id, thread_info",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
7180f8d91fcbf252de572d9ffacc945effed0060,7180f8d91fcbf252de572d9ffacc945effed0060,Mateusz Guzik,mjguzik@gmail.com,1718127502,Christian Brauner,brauner@kernel.org,1718194199,9d9f7d2891edf6d6058f71207c0a778f196d3250,1613e604df0cd359cf2a7fbd9be7a0bcfacfabd0,"vfs: add rcu-based find_inode variants for iget ops

This avoids one inode hash lock acquire in the common case on inode
creation"," in effect significantly reducing contention.

On the stock kernel said lock is typically taken twice:
1. once to check if the inode happens to already be present
2. once to add it to the hash

The back-to-back lock/unlock pattern is known to degrade performance
significantly","[' which is further exacerbated if the hash is heavily\npopulated (long chains to walk', ' extending hold time). Arguably hash\nsizing and hashing algo need to be revisited', "" but that's beyond the\nscope of this patch.\n\nWith the acquire from step 1 eliminated with RCU lookup throughput\nincreases significantly at the scale of 20 cores (benchmark results at\nthe bottom).\n\nSo happens the hash already supports RCU-based operation"", "" but lookups on\ninode insertions didn't take advantage of it.\n\nThis of course has its limits as the global lock is still a bottleneck.\nThere was a patchset posted which introduced fine-grained locking[1] but\nit appears staled. Apart from that doubt was expressed whether a\nhandrolled hash implementation is appropriate to begin with"", ' suggesting\nreplacement with rhashtables. Nobody committed to carrying [1] across\nthe finish line or implementing anything better', "" thus the bandaid below.\n\niget_locked consumers (notably ext4) get away without any changes\nbecause inode comparison method is built-in.\n\niget5_locked consumers pass a custom callback. Since removal of locking\nadds more problems (inode can be changing) it's not safe to assume all\nfilesystems happen to cope.  Thus iget5_locked_rcu gets added"", ' requiring\nmanual conversion of interested filesystems.\n\nIn order to reduce code duplication find_inode and find_inode_fast grow\nan argument indicating whether inode hash lock is held', ' which is passed\ndown in case sleeping is necessary. They always rcu_read_lock', "" which is\nredundant but harmless. Doing it conditionally reduces readability for\nno real gain that I can see. RCU-alike restrictions were already put on\ncallbacks due to the hash spinlock being held.\n\nBenchmarking:\nThere is a real cache-busting workload scanning millions of files in\nparallel (it's a backup appliance)"", ' where the initial lookup is\nguaranteed to fail resulting in the two lock acquires on stock kernel\n(and one with the patch at hand).\n\nImplemented below is a synthetic benchmark providing the same behavior.\n[I shall note the workload is not running on Linux', "" instead it was\ncausing trouble elsewhere. Benchmark below was used while addressing\nsaid problems and was found to adequately represent the real workload.]\n\nTotal real time fluctuates by 1-2s.\n\nWith 20 threads each walking a dedicated 1000 dirs * 1000 files\ndirectory tree to stat(2) on a 32 core + 24GB RAM vm:\n\next4 (needed mkfs.ext4 -N 24000000):\nbefore: 3.77s user 890.90s system 1939% cpu 46.118 total\nafter:  3.24s user 397.73s system 1858% cpu 21.581 total (-53%)\n\nThat's 20 million files to visit"", ' while the machine can only cache about\n15 million at a time (obtained from ext4_inode_cache object count in\n/proc/slabinfo). Since each terminal inode is only visited once per run\nthis amounts to 0% hit ratio for the dentry cache and the hash table\n(there are however hits for the intermediate directories).\n\nOn repeated runs the kernel caches the last ~15 mln', ' meaning there is ~5\nmln of uncached inodes which are going to be visited first', ' evicting the\npreviously cached state as it happens.\n\nLack of hits can be trivially verified with bpftrace', "" like so:\nbpftrace -e 'kretprobe:find_inode_fast { @[kstack()"", ' retval != 0] = count(); }\'\\\n-c ""/bin/sh walktrees /testfs 20""\n\nBest ran more than once.\n\nExpected results after ""warmup"":\n[snip]\n@[\n    __ext4_iget+275\n    ext4_lookup+224\n    __lookup_slow+130\n    walk_component+219\n    link_path_walk.part.0.constprop.0+614\n    path_lookupat+62\n    filename_lookup+204\n    vfs_statx+128\n    vfs_fstatat+131\n    __do_sys_newfstatat+38\n    do_syscall_64+87\n    entry_SYSCALL_64_after_hwframe+118\n', ' 1]: 20000\n@[\n    __ext4_iget+275\n    ext4_lookup+224\n    __lookup_slow+130\n    walk_component+219\n    path_lookupat+106\n    filename_lookup+204\n    vfs_statx+128\n    vfs_fstatat+131\n    __do_sys_newfstatat+38\n    do_syscall_64+87\n    entry_SYSCALL_64_after_hwframe+118\n', ' 1]: 20000000\n\nThat is 20 million calls for the initial lookup and 20 million after\nallocating a new inode', ' all of them failing to return a value != 0\n(i.e.', ' they are returning NULL -- no match found).\n\nOf course aborting the benchmark in the middle and starting it again (or\nmessing with the state in other ways) is going to alter these results.\n\nBenchmark can be found here: https://people.freebsd.org/~mjg/fstree.tgz\n\n[1] https://lore.kernel.org/all/20231206060629.2827226-1-david@fromorbit.com/\n\nSigned-off-by: Mateusz Guzik <mjguzik@gmail.com>\nLink: https://lore.kernel.org/r/20240611173824.535995-2-mjguzik@gmail.com\nReviewed-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Christian Brauner <brauner@kernel.org>\n', '']",Added RCU-based find_inode variants to iget operations for reduced inode hash lock contention.,"RCU, inode, performance",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
30addd1dc6cc4558ec7024448f04bc77d508fe7d,30addd1dc6cc4558ec7024448f04bc77d508fe7d,Jiri Olsa,jolsa@kernel.org,1718149469,Masami Hiramatsu (Google),mhiramat@kernel.org,1718149469,2808111288cb160cf0663149b4289caac82fdb6b,9e7f74e64ae58688a33a6445e4f9a4e291d0824f,"selftests/bpf: Add uretprobe shadow stack test

Adding uretprobe shadow stack test that runs all existing
uretprobe tests with shadow stack enabled if it's available.

Link: https://lore.kernel.org/all/20240611112158.40795-9-jolsa@kernel.org/

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
",,Add selftests for uretprobe to test shadow stack functionality.,"uretprobe,shadow stack,selftests",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['kprobe/uprobe/ftrace like programs']
9e7f74e64ae58688a33a6445e4f9a4e291d0824f,9e7f74e64ae58688a33a6445e4f9a4e291d0824f,Jiri Olsa,jolsa@kernel.org,1718149468,Masami Hiramatsu (Google),mhiramat@kernel.org,1718149468,2f3da3b7727acdc41be9632f2513ac27af1ed877,f42a58ffb8bb54e66bf9668a6be91477828c0c1b,"selftests/bpf: Add uretprobe syscall call from user space test

Adding test to verify that when called from outside of the
trampoline provided by kernel"," the uretprobe syscall will cause
calling process to receive SIGILL signal and the attached bpf
program is not executed.

Link: https://lore.kernel.org/all/20240611112158.40795-8-jolsa@kernel.org/

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
",[''],This commit adds a test to verify uretprobe syscall behavior from user space in selftests.,"selftests,bpf,uretprobe",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['kprobe/uprobe/ftrace like programs']
f42a58ffb8bb54e66bf9668a6be91477828c0c1b,f42a58ffb8bb54e66bf9668a6be91477828c0c1b,Jiri Olsa,jolsa@kernel.org,1718149468,Masami Hiramatsu (Google),mhiramat@kernel.org,1718149468,90dd76bf311f610cb059848a666241a427dd7e96,3e8e25761a40194887336650673587191564e12c,"selftests/bpf: Add uretprobe syscall test for regs changes

Adding test that creates uprobe consumer on uretprobe which changes some
of the registers. Making sure the changed registers are propagated to the
user space when the ureptobe syscall trampoline is used on x86_64.

To be able to do this"," adding support to bpf_testmod to create uprobe via
new attribute file:
  /sys/kernel/bpf_testmod_uprobe

This file is expecting file offset and creates related uprobe on current
process exe file and removes existing uprobe if offset is 0. The can be
only single uprobe at any time.

The uprobe has specific consumer that changes registers used in ureprobe
syscall trampoline and which are later checked in the test.

Link: https://lore.kernel.org/all/20240611112158.40795-7-jolsa@kernel.org/

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
",[''],The commit adds a selftest for uretprobe syscall to verify register changes on x86_64.,"selftests,bpf,uretpobe",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['kprobe/uprobe/ftrace like programs']
3e8e25761a40194887336650673587191564e12c,3e8e25761a40194887336650673587191564e12c,Jiri Olsa,jolsa@kernel.org,1718149468,Masami Hiramatsu (Google),mhiramat@kernel.org,1718149468,8a42fbd670ce42667c5c04f9b18320fd7d1928e4,29edd8b003db897d81d82d950785327f164650d3,"selftests/bpf: Add uretprobe syscall test for regs integrity

Add uretprobe syscall test that compares register values before
and after the uretprobe is hit. It also compares the register
values seen from attached bpf program.

Link: https://lore.kernel.org/all/20240611112158.40795-6-jolsa@kernel.org/

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
",,Add uretprobe syscall test to verify register integrity with BPF program comparison.,"uretprobe,syscall,registers",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['kprobe/uprobe/ftrace like programs']
29edd8b003db897d81d82d950785327f164650d3,29edd8b003db897d81d82d950785327f164650d3,Jiri Olsa,jolsa@kernel.org,1718149468,Masami Hiramatsu (Google),mhiramat@kernel.org,1718149468,f2ad3c83d7fec324012da11df7c7bd90ff41c910,ff474a78cef5cb5f32be52fe25b78441327a2e7c,"selftests/x86: Add return uprobe shadow stack test

Adding return uprobe test for shadow stack and making sure it's
working properly. Borrowed some of the code from bpf selftests.

Link: https://lore.kernel.org/all/20240611112158.40795-5-jolsa@kernel.org/

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
",,Add a return uprobe test for shadow stack verification in selftests/x86.,"uproprobe, shadow stack, selftests",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['kprobe/uprobe/ftrace like programs']
ff474a78cef5cb5f32be52fe25b78441327a2e7c,ff474a78cef5cb5f32be52fe25b78441327a2e7c,Jiri Olsa,jolsa@kernel.org,1718149468,Masami Hiramatsu (Google),mhiramat@kernel.org,1718149468,c2320aabb257bd62e8d33f8c4e0ae1e516407743,190fec72df4a5d4d98b1e783c333f471e5e5f344,"uprobe: Add uretprobe syscall to speed up return probe

Adding uretprobe syscall instead of trap to speed up return probe.

At the moment the uretprobe setup/path is:

  - install entry uprobe

  - when the uprobe is hit"," it overwrites probed function's return address
    on stack with address of the trampoline that contains breakpoint
    instruction

  - the breakpoint trap code handles the uretprobe consumers execution and
    jumps back to original return address

This patch replaces the above trampoline's breakpoint instruction with new
ureprobe syscall call. This syscall does exactly the same job as the trap
with some more extra work:

  - syscall trampoline must save original value for rax/r11/rcx registers
    on stack - rax is set to syscall number and r11/rcx are changed and
    used by syscall instruction

  - the syscall code reads the original values of those registers and
    restore those values in task's pt_regs area

  - only caller from trampoline exposed in '[uprobes]' is allowed","['\n    the process will receive SIGILL signal otherwise\n\nEven with some extra work', "" using the uretprobes syscall shows speed\nimprovement (compared to using standard breakpoint):\n\n  On Intel (11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz)\n\n  current:\n    uretprobe-nop  :    1.498 ± 0.000M/s\n    uretprobe-push :    1.448 ± 0.001M/s\n    uretprobe-ret  :    0.816 ± 0.001M/s\n\n  with the fix:\n    uretprobe-nop  :    1.969 ± 0.002M/s  < 31% speed up\n    uretprobe-push :    1.910 ± 0.000M/s  < 31% speed up\n    uretprobe-ret  :    0.934 ± 0.000M/s  < 14% speed up\n\n  On Amd (AMD Ryzen 7 5700U)\n\n  current:\n    uretprobe-nop  :    0.778 ± 0.001M/s\n    uretprobe-push :    0.744 ± 0.001M/s\n    uretprobe-ret  :    0.540 ± 0.001M/s\n\n  with the fix:\n    uretprobe-nop  :    0.860 ± 0.001M/s  < 10% speed up\n    uretprobe-push :    0.818 ± 0.001M/s  < 10% speed up\n    uretprobe-ret  :    0.578 ± 0.000M/s  <  7% speed up\n\nThe performance test spawns a thread that runs loop which triggers\nuprobe with attached bpf program that increments the counter that\ngets printed in results above.\n\nThe uprobe (and uretprobe) kind is determined by which instruction\nis being patched with breakpoint instruction. That's also important\nfor uretprobes"", ' because uprobe is installed for each uretprobe.\n\nThe performance test is part of bpf selftests:\n  tools/testing/selftests/bpf/run_bench_uprobes.sh\n\nNote at the moment uretprobe syscall is supported only for native\n64-bit process', ' compat process still uses standard breakpoint.\n\nNote that when shadow stack is enabled the uretprobe syscall returns\nvia iret', ' which is slower than return via sysret', "" but won't cause the\nshadow stack violation.\n\nLink: https://lore.kernel.org/all/20240611112158.40795-4-jolsa@kernel.org/\n\nSuggested-by: Andrii Nakryiko <andrii@kernel.org>\nReviewed-by: Oleg Nesterov <oleg@redhat.com>\nReviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nAcked-by: Andrii Nakryiko <andrii@kernel.org>\nSigned-off-by: Oleg Nesterov <oleg@redhat.com>\nSigned-off-by: Jiri Olsa <jolsa@kernel.org>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\n"", '']",The commit introduces a new uretprobe syscall to enhance the efficiency of return probes.,"uretprobe, syscall, probe",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['kprobe/uprobe/ftrace like programs']
98b303c9bf05dae932efbd71e18d81f6c64f20d8,98b303c9bf05dae932efbd71e18d81f6c64f20d8,Kenta Tada,tadakentaso@gmail.com,1717759024,Alexei Starovoitov,ast@kernel.org,1718131149,e5214d06ca6fc657db34bbc70c0675aa6660dbab,bb678f01804ccaa861b012b2b9426d69673d8a84,"bpftool: Query only cgroup-related attach types

When CONFIG_NETKIT=y","
bpftool-cgroup shows error even if the cgroup's path is correct:

$ bpftool cgroup tree /sys/fs/cgroup
CgroupPath
ID       AttachType      AttachFlags     Name
Error: can't query bpf programs attached to /sys/fs/cgroup: No such device or address

>From strace and kernel tracing","[' I found netkit returned ENXIO and this command failed.\nI think this AttachType(BPF_NETKIT_PRIMARY) is not relevant to cgroup.\n\nbpftool-cgroup should query just only cgroup-related attach types.\n\nv2->v3:\n  - removed an unnecessary check\n\nv1->v2:\n  - used an array of cgroup attach types\n\nSigned-off-by: Kenta Tada <tadakentaso@gmail.com>\nReviewed-by: Quentin Monnet <qmo@kernel.org>\nLink: https://lore.kernel.org/r/20240607111704.6716-1-tadakentaso@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",This commit fixes an error in bpftool when querying cgroup-related attach types with CONFIG_NETKIT=y.,"bpftool,cgroup,query",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The bpftool utility,['cgroup like programs']
b1156532bc29ac9a8d1cf71510cabc8f68181540,b1156532bc29ac9a8d1cf71510cabc8f68181540,Jakub Kicinski,kuba@kernel.org,1718067734,Jakub Kicinski,kuba@kernel.org,1718067734,d7209c26ece681ecab283559d493944ded42d37b,93d4e8bb3f137e8037a65ea96f175f81c25c50e5 f85af9d955ac9601174e1c64f4b3308c1cae4a7e,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-06-06

We've added 54 non-merge commits during the last 10 day(s) which contain
a total of 50 files changed", 1887 insertions(+),"[' 527 deletions(-).\n\nThe main changes are:\n\n1) Add a user space notification mechanism via epoll when a struct_ops\n   object is getting detached/unregistered', ' from Kui-Feng Lee.\n\n2) Big batch of BPF selftest refactoring for sockmap and BPF congctl\n   tests', ' from Geliang Tang.\n\n3) Add BTF field (type and string fields', ' right now) iterator support\n   to libbpf instead of using existing callback-based approaches', '\n   from Andrii Nakryiko.\n\n4) Extend BPF selftests for the latter with a new btf_field_iter\n   selftest', ' from Alan Maguire.\n\n5) Add new kfuncs for a generic', ' open-coded bits iterator', ""\n   from Yafang Shao.\n\n6) Fix BPF selftests' kallsyms_find() helper under kernels configured\n   with CONFIG_LTO_CLANG_THIN"", ' from Yonghong Song.\n\n7) Remove a bunch of unused structs in BPF selftests', '\n   from David Alan Gilbert.\n\n8) Convert test_sockmap section names into names understood by libbpf\n   so it can deduce program type and attach type', ' from Jakub Sitnicki.\n\n9) Extend libbpf with the ability to configure log verbosity\n   via LIBBPF_LOG_LEVEL environment variable', ' from Mykyta Yatsenko.\n\n10) Fix BPF selftests with regards to bpf_cookie and find_vma flakiness\n    in nested VMs', ' from Song Liu.\n\n11) Extend riscv32/64 JITs to introduce shift/add helpers to generate Zba\n    optimization', ' from Xiao Wang.\n\n12) Enable BPF programs to declare arrays and struct fields with kptr', '\n    bpf_rb_root', ' and bpf_list_head', "" from Kui-Feng Lee.\n\n* tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next: (54 commits)\n  selftests/bpf: Drop useless arguments of do_test in bpf_tcp_ca\n  selftests/bpf: Use start_test in test_dctcp in bpf_tcp_ca\n  selftests/bpf: Use start_test in test_dctcp_fallback in bpf_tcp_ca\n  selftests/bpf: Add start_test helper in bpf_tcp_ca\n  selftests/bpf: Use connect_to_fd_opts in do_test in bpf_tcp_ca\n  libbpf: Auto-attach struct_ops BPF maps in BPF skeleton\n  selftests/bpf: Add btf_field_iter selftests\n  selftests/bpf: Fix send_signal test with nested CONFIG_PARAVIRT\n  libbpf: Remove callback-based type/string BTF field visitor helpers\n  bpftool: Use BTF field iterator in btfgen\n  libbpf: Make use of BTF field iterator in BTF handling code\n  libbpf: Make use of BTF field iterator in BPF linker code\n  libbpf: Add BTF field iterator\n  selftests/bpf: Ignore .llvm.<hash> suffix in kallsyms_find()\n  selftests/bpf: Fix bpf_cookie and find_vma in nested VM\n  selftests/bpf: Test global bpf_list_head arrays.\n  selftests/bpf: Test global bpf_rb_root arrays and fields in nested struct types.\n  selftests/bpf: Test kptr arrays and kptrs in nested struct fields.\n  bpf: limit the number of levels of a nested struct type.\n  bpf: look into the types of the fields of a struct type recursively.\n  ...\n====================\n\nLink: https://lore.kernel.org/r/20240606223146.23020-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n"", '']",Merge pull request for bpf-next containing 54 non-merge commits affecting 50 files.,"merge, bpf-next, commits",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2ba6d15786f6c11b6e497eebe68b8baec52f7984,2ba6d15786f6c11b6e497eebe68b8baec52f7984,David S. Miller,davem@davemloft.net,1718023686,David S. Miller,davem@davemloft.net,1718023686,ed103d96d1b627bcc4e09ab6d3e0db29dcaf9ba8,395059c52e0104a5e01832f866caa8b15284dd9a eef8e906aea270f4b8912a0b51403b80aec54d30,"Merge branch 'fix-changing-dsa-conduit'

Marek Behún says:

====================
Fix changing DSA conduit

This series fixes an issue in the DSA code related to host interface UC
address installed into port FDB and port conduit address database when
live-changing port conduit.

The first patch refactores/deduplicates the installation/uninstallation
of the interface's MAC address and the second patch fixes the issue.

Cover letter for v1 and v2:
  https://patchwork.kernel.org/project/netdevbpf/cover/20240429163627.16031-1-kabel@kernel.org/
  https://patchwork.kernel.org/project/netdevbpf/cover/20240502122922.28139-1-kabel@kernel.org/
====================

Signed-off-by: David S. Miller <davem@davemloft.net>
",,Fixes an issue in the DSA code related to host interface UC address and port FDB database during conduit changes.,"DSA, conduit, MAC",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
b8481381d4e2549f06812eb6069198144696340c,b8481381d4e2549f06812eb6069198144696340c,Linus Torvalds,torvalds@linux-foundation.org,1717949091,Linus Torvalds,torvalds@linux-foundation.org,1717949091,f89a2db5e640f6f601b40ca6a4d5e9028e00bcb1,637c2dfcd9f5e194ab2e879704460840edcde537 ca9680821dfec73c9100860bda4fab1f1309722e,"Merge tag 'perf-tools-fixes-for-v6.10-2-2024-06-09' of git://git.kernel.org/pub/scm/linux/kernel/git/perf/perf-tools

Pull perf tools fixes from Arnaldo Carvalho de Melo:

 - Update copies of kernel headers"," which resulted in support for the
   new 'mseal' syscall","[' SUBVOL statx return mask bit', ' RISC-V and PPC\n   prctls', "" fcntl's DUPFD_QUERY"", ' POSTED_MSI_NOTIFICATION IRQ vector', ""\n   'map_shadow_stack' syscall for x86-32.\n\n - Revert perf.data record memory allocation optimization that ended up\n   causing a regression"", ' work is being done to re-introduce it in the\n   next merge window.\n\n - Fix handling of minimal vmlinux.h file used with BPF\'s CO-RE when\n   interrupting the build.\n\n* tag \'perf-tools-fixes-for-v6.10-2-2024-06-09\' of git://git.kernel.org/pub/scm/linux/kernel/git/perf/perf-tools:\n  perf bpf: Fix handling of minimal vmlinux.h file when interrupting the build\n  Revert ""perf record: Reduce memory for recording PERF_RECORD_LOST_SAMPLES event""\n  tools headers arm64: Sync arm64\'s cputype.h with the kernel sources\n  tools headers uapi: Sync linux/stat.h with the kernel sources to pick STATX_SUBVOL\n  tools headers UAPI: Update i915_drm.h with the kernel sources\n  tools headers UAPI: Sync kvm headers with the kernel sources\n  tools arch x86: Sync the msr-index.h copy with the kernel sources\n  tools headers: Update the syscall tables and unistd.h', "" mostly to support the new 'mseal' syscall\n  perf trace beauty: Update the arch/x86/include/asm/irq_vectors.h copy with the kernel sources to pick POSTED_MSI_NOTIFICATION\n  perf beauty: Update copy of linux/socket.h with the kernel sources\n  tools headers UAPI: Sync fcntl.h with the kernel sources to pick F_DUPFD_QUERY\n  tools headers UAPI: Sync linux/prctl.h with the kernel sources\n  tools include UAPI: Sync linux/stat.h with the kernel sources\n"", '']",Merge of perf tools fixes and update copies of kernel headers.,"Merge,perf-tools,headers",It's a build system or CI/CD change.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
f85af9d955ac9601174e1c64f4b3308c1cae4a7e,f85af9d955ac9601174e1c64f4b3308c1cae4a7e,Geliang Tang,tanggeliang@kylinos.cn,1717054872,Daniel Borkmann,daniel@iogearbox.net,1717707846,fbd6222b981d77cca537fcc3447165c2cf68ae19,cd984b2ed62423eb3daceacb21d651115a612af6,"selftests/bpf: Drop useless arguments of do_test in bpf_tcp_ca

bpf_map_lookup_elem() has been removed from do_test()"," it makes the
sk_stg_map argument of do_test() useless. In addition","[' two exactly the\nsame opts are passed in all the places where do_test() is invoked', ' so\ncli_opts argument can be dropped too.\n\nThis patch drops these two useless arguments of do_test() in bpf_tcp_ca.c.\n\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/7056eab111d78a05bce29d2821228dc93f240de4.1717054461.git.tanggeliang@kylinos.cn\n', '']",Remove unused arguments from do_test in bpf_tcp_ca selftests.,"do_test,bpf_tcp_ca,selftests",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
cd984b2ed62423eb3daceacb21d651115a612af6,cd984b2ed62423eb3daceacb21d651115a612af6,Geliang Tang,tanggeliang@kylinos.cn,1717054871,Daniel Borkmann,daniel@iogearbox.net,1717707845,fb8752b38572b05a18f08ea1e4bef42d9b6ea174,224eeb5598c30ee835dc9fea4c7ad85a8fb7eda4,"selftests/bpf: Use start_test in test_dctcp in bpf_tcp_ca

The ""if (sk_stg_map)"" block in do_test() is only used by test_dctcp()","
it makes sense to move it from do_test() into test_dctcp(). Then
do_test() can be used by other tests except test_dctcp().

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/9938916627b9810c877e5c03a621bc0ba5acf5c5.1717054461.git.tanggeliang@kylinos.cn
",[''],"Refactor test_dctcp to use start_test, allowing do_test to be reused for other tests.","selftests,bpf,test_dctcp",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
224eeb5598c30ee835dc9fea4c7ad85a8fb7eda4,224eeb5598c30ee835dc9fea4c7ad85a8fb7eda4,Geliang Tang,tanggeliang@kylinos.cn,1717054870,Daniel Borkmann,daniel@iogearbox.net,1717707845,19e1f3cd1cec9de326f3728328f7680ee6f484e6,fee97d0c9a14b5dd5cce0ec1df3a54a6b963f40c,"selftests/bpf: Use start_test in test_dctcp_fallback in bpf_tcp_ca

The newly added helper start_test() can be used in test_dctcp_fallback()
too"," to replace start_server_str() and connect_to_fd_opts(). In that
way","[' two network_helper_opts srv_opts and cli_opts are used instead of\nthe previously shared opts.\n\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/792ca3bb013fa06e618176da02d75e4f79a76733.1717054461.git.tanggeliang@kylinos.cn\n', '']",The commit refactors test_dctcp_fallback to use the new start_test helper function in bpf_tcp_ca selftests.,"start_test, test_dctcp_fallback, refactoring",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
fee97d0c9a14b5dd5cce0ec1df3a54a6b963f40c,fee97d0c9a14b5dd5cce0ec1df3a54a6b963f40c,Geliang Tang,tanggeliang@kylinos.cn,1717054869,Daniel Borkmann,daniel@iogearbox.net,1717707845,ac2f0c968d22454b02391c98e46b8f73020c64a0,9abdfd8a212332c64f6d0a27fc2ad69e9e0335d1,"selftests/bpf: Add start_test helper in bpf_tcp_ca

For moving the ""if (sk_stg_map)"" block out of do_test()"," extract the
code before this block as a new function start_test(). It creates
server-side and client-side sockets and returns them to the caller.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/48f2921ff9be958f5d3d28fe6bb7269a61cafa9f.1717054461.git.tanggeliang@kylinos.cn
",[''],Implemented a new start_test helper function in bpf_tcp_ca selftests to refactor socket creation.,"start_test, bpf_tcp_ca, refactor",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
9abdfd8a212332c64f6d0a27fc2ad69e9e0335d1,9abdfd8a212332c64f6d0a27fc2ad69e9e0335d1,Geliang Tang,tanggeliang@kylinos.cn,1717054868,Daniel Borkmann,daniel@iogearbox.net,1717707845,5196cf3014b60e094cd31bf19c615754b874cbf3,08ac454e258e38813afb906650f19acce3afd982,"selftests/bpf: Use connect_to_fd_opts in do_test in bpf_tcp_ca

This patch uses connect_to_fd_opts() instead of using connect_fd_to_fd()
and settcpca() in do_test() in prog_tests/bpf_tcp_ca.c to accept a struct
network_helper_opts argument.

Then define a dctcp dedicated post_socket_cb callback stg_post_socket_cb()","
invoking both settcpca() and bpf_map_update_elem() in it","[' and set it in\ntest_dctcp(). For passing map_fd into stg_post_socket_cb() callback', ' a new\nmember map_fd is added in struct cb_opts.\n\nAdd another ""const struct network_helper_opts *cli_opts"" to do_test() to\nseparate it from the server ""opts"".\n\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/876ec90430865bc468e3b7f6fb2648420b075548.1717054461.git.tanggeliang@kylinos.cn\n', '']",Refactor bpf_tcp_ca do_test function to use connect_to_fd_opts and introduce a dctcp post_socket callback.,"bpf_tcp_ca, connect_to_fd_opts, dctcp",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
0ac55d095d375e84fcdac5e51011613734e57854,0ac55d095d375e84fcdac5e51011613734e57854,Paul E. McKenney,paulmck@kernel.org,1715229836,Paul E. McKenney,paulmck@kernel.org,1717699482,bf5c056e143ea5215345184579007d36ce4cd71d,b9f147cdc2c0bf54ca2c25ed185806f1fc6da65f,"tools/rcu: Add rcu-updaters.sh script

This commit adds a tools/rcu/rcu-updaters.sh script that uses bpftrace
to print a histogram of the RCU update-side primitives invoked during
the specified time interval"," or until manually terminated if no interval
is specified.

Sample output on an idle laptop:

@counts[poll_state_synchronize_rcu]: 6
@counts[synchronize_srcu]: 13
@counts[call_rcu_tasks_trace]: 25
@counts[synchronize_rcu]: 54
@counts[kvfree_call_rcu]: 428
@counts[call_rcu]: 2134

Note that when run on a kernel missing one or more of the symbols","[' this\nscript will issue a diagnostic for each that is not found', ' but continue\nnormally for the rest of the functions.\n\nSigned-off-by: Paul E. McKenney <paulmck@kernel.org>\n', '']",Added a script using bpftrace to print a histogram of RCU update-side primitives.,"bpftrace, RCU, script",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['other']
08ac454e258e38813afb906650f19acce3afd982,08ac454e258e38813afb906650f19acce3afd982,Mykyta Yatsenko,yatsenko@meta.com,1717609895,Andrii Nakryiko,andrii@kernel.org,1717693565,d98f6e8a40758535eb8141f2575096b939ae8628,b24862bac7b5db326716ad07bbff7b6ee3b09a59,"libbpf: Auto-attach struct_ops BPF maps in BPF skeleton

Similarly to `bpf_program`"," support `bpf_map` automatic attachment in
`bpf_object__attach_skeleton`. Currently only struct_ops maps could be
attached.

On bpftool side","[' code-generate links in skeleton struct for struct_ops maps.\nSimilarly to `bpf_program_skeleton`', ' set links in `bpf_map_skeleton`.\n\nOn libbpf side', ' extend `bpf_map` with new `autoattach` field to support\nenabling or disabling autoattach functionality', ' introducing\ngetter/setter for this field.\n\n`bpf_object__(attach|detach)_skeleton` is extended with\nattaching/detaching struct_ops maps logic.\n\nSigned-off-by: Mykyta Yatsenko <yatsenko@meta.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240605175135.117127-1-yatsenko@meta.com\n', '']",This commit enables automatic attachment of struct_ops BPF maps in BPF skeletons using libbpf.,"libbpf,struct_ops,auto-attach",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d30d0e49da71de8df10bf3ff1b3de880653af562,d30d0e49da71de8df10bf3ff1b3de880653af562,Linus Torvalds,torvalds@linux-foundation.org,1717692927,Linus Torvalds,torvalds@linux-foundation.org,1717692927,65c58dfad109ecfa19de9a50cbc0937c7698ecaf,2faf6332c506fc3bd23815f8fe8f6d0c35271c17 27bc86540899ee793ab2f4c846e745aa0de443f1,"Merge tag 'net-6.10-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 ""Including fixes from BPF and big collection of fixes for WiFi core and
  drivers.

  Current release - regressions:

   - vxlan: fix regression when dropping packets due to invalid src
     addresses

   - bpf: fix a potential use-after-free in bpf_link_free()

   - xdp: revert support for redirect to any xsk socket bound to the
     same UMEM as it can result in a corruption

   - virtio_net:
      - add missing lock protection when reading return code from
        control_buf
      - fix false-positive lockdep splat in DIM
      - Revert ""wifi: wilc1000: convert list management to RCU""

   - wifi: ath11k: fix error path in ath11k_pcic_ext_irq_config

  Previous releases - regressions:

   - rtnetlink: make the ""split"" NLM_DONE handling generic"," restore the
     old behavior for two cases where we started coalescing those
     messages with normal messages","[' breaking sloppily-coded userspace\n\n   - wifi:\n      - cfg80211: validate HE operation element parsing\n      - cfg80211: fix 6 GHz scan request building\n      - mt76: mt7615: add missing chanctx ops\n      - ath11k: move power type check to ASSOC stage', ' fix connecting to\n        6 GHz AP\n      - ath11k: fix WCN6750 firmware crash caused by 17 num_vdevs\n      - rtlwifi: ignore IEEE80211_CONF_CHANGE_RETRY_LIMITS\n      - iwlwifi: mvm: fix a crash on 7265\n\n  Previous releases - always broken:\n\n   - ncsi: prevent multi-threaded channel probing', ' a spec violation\n\n   - vmxnet3: disable rx data ring on dma allocation failure\n\n   - ethtool: init tsinfo stats if requested', ' prevent unintentionally\n     reporting all-zero stats on devices which don\'t implement any\n\n   - dst_cache: fix possible races in less common IPv6 features\n\n   - tcp: auth: don\'t consider TCP_CLOSE to be in TCP_AO_ESTABLISHED\n\n   - ax25: fix two refcounting bugs\n\n   - eth: ionic: fix kernel panic in XDP_TX action\n\n  Misc:\n\n   - tcp: count CLOSE-WAIT sockets for TCP_MIB_CURRESTAB""\n\n* tag \'net-6.10-rc3\' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (107 commits)\n  selftests: net: lib: set \'i\' as local\n  selftests: net: lib: avoid error removing empty netns name\n  selftests: net: lib: support errexit with busywait\n  net: ethtool: fix the error condition in ethtool_get_phy_stats_ethtool()\n  ipv6: fix possible race in __fib6_drop_pcpu_from()\n  af_unix: Annotate data-race of sk->sk_shutdown in sk_diag_fill().\n  af_unix: Use skb_queue_len_lockless() in sk_diag_show_rqlen().\n  af_unix: Use skb_queue_empty_lockless() in unix_release_sock().\n  af_unix: Use unix_recvq_full_lockless() in unix_stream_connect().\n  af_unix: Annotate data-race of net->unx.sysctl_max_dgram_qlen.\n  af_unix: Annotate data-races around sk->sk_sndbuf.\n  af_unix: Annotate data-races around sk->sk_state in UNIX_DIAG.\n  af_unix: Annotate data-race of sk->sk_state in unix_stream_read_skb().\n  af_unix: Annotate data-races around sk->sk_state in sendmsg() and recvmsg().\n  af_unix: Annotate data-race of sk->sk_state in unix_accept().\n  af_unix: Annotate data-race of sk->sk_state in unix_stream_connect().\n  af_unix: Annotate data-races around sk->sk_state in unix_write_space() and poll().\n  af_unix: Annotate data-race of sk->sk_state in unix_inq_len().\n  af_unix: Annodate data-races around sk->sk_state for writers.\n  af_unix: Set sk->sk_state under unix_state_lock() for truly disconencted peer.\n  ...\n', '']","The commit merges networking and BPF-related fixes, addressing regressions and issues in vxlan, bpf, xdp, virtio_net, and wifi.","networking, BPF, wifi",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['xdp like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
b24862bac7b5db326716ad07bbff7b6ee3b09a59,b24862bac7b5db326716ad07bbff7b6ee3b09a59,Alan Maguire,alan.maguire@oracle.com,1717601594,Daniel Borkmann,daniel@iogearbox.net,1717682190,52464cc46bb2b00e73a11a8299b0bd3609dc2f0d,7015843afcaf68c132784c89528dfddc0005e483,"selftests/bpf: Add btf_field_iter selftests

The added selftests verify that for every BTF kind we iterate correctly
over consituent strings and ids.

Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240605153314.3727466-1-alan.maguire@oracle.com
",,Added new selftests for verifying BTF field iterators' correct iteration over strings and IDs.,"selftests,BTF,iteration",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
7015843afcaf68c132784c89528dfddc0005e483,7015843afcaf68c132784c89528dfddc0005e483,Yonghong Song,yonghong.song@linux.dev,1717618323,Daniel Borkmann,daniel@iogearbox.net,1717681753,d312367dcb688438abb02b0701d63238d5b0e3b8,072088704433f75dacf9e33179dd7a81f0a238d4,"selftests/bpf: Fix send_signal test with nested CONFIG_PARAVIRT

Alexei reported that send_signal test may fail with nested CONFIG_PARAVIRT
configs. In this particular case", the base VM is AMD with 166 cpus,"[' and I\nrun selftests with regular qemu on top of that and indeed send_signal test\nfailed. I also tried with an Intel box with 80 cpus and there is no issue.\n\nThe main qemu command line includes:\n\n  -enable-kvm -smp 16 -cpu host\n\nThe failure log looks like:\n\n  $ ./test_progs -t send_signal\n  [   48.501588] watchdog: BUG: soft lockup - CPU#9 stuck for 26s! [test_progs:2225]\n  [   48.503622] Modules linked in: bpf_testmod(O)\n  [   48.503622] CPU: 9 PID: 2225 Comm: test_progs Tainted: G           O       6.9.0-08561-g2c1713a8f1c9-dirty #69\n  [   48.507629] Hardware name: QEMU Standard PC (i440FX + PIIX', ' 1996)', ' BIOS rel-1.15.0-0-g2dd4b9b3f840-prebuilt.qemu.org 04/01/2014\n  [   48.511635] RIP: 0010:handle_softirqs+0x71/0x290\n  [   48.511635] Code: [...] 10 0a 00 00 00 31 c0 65 66 89 05 d5 f4 fa 7e fb bb ff ff ff ff <49> c7 c2 cb\n  [   48.518527] RSP: 0018:ffffc90000310fa0 EFLAGS: 00000246\n  [   48.519579] RAX: 0000000000000000 RBX: 00000000ffffffff RCX: 00000000000006e0\n  [   48.522526] RDX: 0000000000000006 RSI: ffff88810791ae80 RDI: 0000000000000000\n  [   48.523587] RBP: ffffc90000fabc88 R08: 00000005a0af4f7f R09: 0000000000000000\n  [   48.525525] R10: 0000000561d2f29c R11: 0000000000006534 R12: 0000000000000280\n  [   48.528525] R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\n  [   48.528525] FS:  00007f2f2885cd00(0000) GS:ffff888237c40000(0000) knlGS:0000000000000000\n  [   48.531600] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  [   48.535520] CR2: 00007f2f287059f0 CR3: 0000000106a28002 CR4: 00000000003706f0\n  [   48.537538] Call Trace:\n  [   48.537538]  <IRQ>\n  [   48.537538]  ? watchdog_timer_fn+0x1cd/0x250\n  [   48.539590]  ? lockup_detector_update_enable+0x50/0x50\n  [   48.539590]  ? __hrtimer_run_queues+0xff/0x280\n  [   48.542520]  ? hrtimer_interrupt+0x103/0x230\n  [   48.544524]  ? __sysvec_apic_timer_interrupt+0x4f/0x140\n  [   48.545522]  ? sysvec_apic_timer_interrupt+0x3a/0x90\n  [   48.547612]  ? asm_sysvec_apic_timer_interrupt+0x1a/0x20\n  [   48.547612]  ? handle_softirqs+0x71/0x290\n  [   48.547612]  irq_exit_rcu+0x63/0x80\n  [   48.551585]  sysvec_apic_timer_interrupt+0x75/0x90\n  [   48.552521]  </IRQ>\n  [   48.553529]  <TASK>\n  [   48.553529]  asm_sysvec_apic_timer_interrupt+0x1a/0x20\n  [   48.555609] RIP: 0010:finish_task_switch.isra.0+0x90/0x260\n  [   48.556526] Code: [...] 9f 58 0a 00 00 48 85 db 0f 85 89 01 00 00 4c 89 ff e8 53 d9 bd 00 fb 66 90 <4d> 85 ed 74\n  [   48.562524] RSP: 0018:ffffc90000fabd38 EFLAGS: 00000282\n  [   48.563589] RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffffffff83385620\n  [   48.563589] RDX: ffff888237c73ae4 RSI: 0000000000000000 RDI: ffff888237c6fd00\n  [   48.568521] RBP: ffffc90000fabd68 R08: 0000000000000000 R09: 0000000000000000\n  [   48.569528] R10: 0000000000000001 R11: 0000000000000000 R12: ffff8881009d0000\n  [   48.573525] R13: ffff8881024e5400 R14: ffff88810791ae80 R15: ffff888237c6fd00\n  [   48.575614]  ? finish_task_switch.isra.0+0x8d/0x260\n  [   48.576523]  __schedule+0x364/0xac0\n  [   48.577535]  schedule+0x2e/0x110\n  [   48.578555]  pipe_read+0x301/0x400\n  [   48.579589]  ? destroy_sched_domains_rcu+0x30/0x30\n  [   48.579589]  vfs_read+0x2b3/0x2f0\n  [   48.579589]  ksys_read+0x8b/0xc0\n  [   48.583590]  do_syscall_64+0x3d/0xc0\n  [   48.583590]  entry_SYSCALL_64_after_hwframe+0x4b/0x53\n  [   48.586525] RIP: 0033:0x7f2f28703fa1\n  [   48.587592] Code: [...] 00 00 00 0f 1f 44 00 00 f3 0f 1e fa 80 3d c5 23 14 00 00 74 13 31 c0 0f 05 <48> 3d 00 f0\n  [   48.593534] RSP: 002b:00007ffd90f8cf88 EFLAGS: 00000246 ORIG_RAX: 0000000000000000\n  [   48.595589] RAX: ffffffffffffffda RBX: 00007ffd90f8d5e8 RCX: 00007f2f28703fa1\n  [   48.595589] RDX: 0000000000000001 RSI: 00007ffd90f8cfb0 RDI: 0000000000000006\n  [   48.599592] RBP: 00007ffd90f8d2f0 R08: 0000000000000064 R09: 0000000000000000\n  [   48.602527] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000\n  [   48.603589] R13: 00007ffd90f8d608 R14: 00007f2f288d8000 R15: 0000000000f6bdb0\n  [   48.605527]  </TASK>\n\nIn the test', ' two processes are communicating through pipe. Further debugging\nwith strace found that the above splat is triggered as read() syscall could\nnot receive the data even if the corresponding write() syscall in another\nprocess successfully wrote data into the pipe.\n\nThe failed subtest is ""send_signal_perf"". The corresponding perf event has\nsample_period 1 and config PERF_COUNT_SW_CPU_CLOCK. sample_period 1 means every\noverflow event will trigger a call to the BPF program. So I suspect this may\noverwhelm the system. So I increased the sample_period to 100', '000 and the test\npassed. The sample_period 10', '000 still has the test failed.\n\nIn other parts of selftest', ' e.g.', ' [1]', ' sample_freq is used instead. So I\ndecided to use sample_freq = 1', '000 since the test can pass as well.\n\n  [1] https://lore.kernel.org/bpf/20240604070700.3032142-1-song@kernel.org/\n\nReported-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Yonghong Song <yonghong.song@linux.dev>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240605201203.2603846-1-yonghong.song@linux.dev\n', '']",Fixes a send_signal test issue when using nested CONFIG_PARAVIRT configurations.,"send_signal test, CONFIG_PARAVIRT, selftests",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['other']
5899c885131a7b2926ed26f6a5df1fc3c878418d,5899c885131a7b2926ed26f6a5df1fc3c878418d,Jakub Kicinski,kuba@kernel.org,1717640885,Jakub Kicinski,kuba@kernel.org,1717640886,4cb6faca8dd7c6e27e47ec75bf9e106493624f80,886bf9172da06a85de3c68a651477d7d625fd6cc 7d67d11fbe194f71298263f48e33ae2afa38197e,"Merge branch 'intel-wired-lan-driver-updates-2024-05-29-ice-igc'

Jacob Keller says:

====================
Intel Wired LAN Driver Updates 2024-05-29 (ice"," igc)

This series includes fixes for the ice driver as well as a fix for the igc
driver.

Jacob fixes two issues in the ice driver with reading the NVM for providing
firmware data via devlink info. First","[' fix an off-by-one error when reading\nthe Preserved Fields Area', ' resolving an infinite loop triggered on some\nNVMs which lack certain data in the NVM. Second', ' fix the reading of the NVM\nShadow RAM on newer E830 and E825-C devices which have a variable sized CSS\nheader rather than assuming this header is always the same fixed size as in\nthe E810 devices.\n\nLarysa fixes three issues with the ice driver XDP logic that could occur if\nthe number of queues is changed after enabling an XDP program. First', ' the\naf_xdp_zc_qps bitmap is removed and replaced by simpler logic to track\nwhether queues are in zero-copy mode. Second', ' the reset and .ndo_bpf flows\nare distinguished to avoid potential races with a PF reset occuring\nsimultaneously to .ndo_bpf callback from userspace. Third', ' the logic for\nmapping XDP queues to vectors is fixed so that XDP state is restored for\nXDP queues after a reconfiguration.\n\nSasha fixes reporting of Energy Efficient Ethernet support via ethtool in\nthe igc driver.\n\nv1: https://lore.kernel.org/r/20240530-net-2024-05-30-intel-net-fixes-v1-0-8b11c8c9bff8@intel.com\n====================\n\nLink: https://lore.kernel.org/r/20240603-net-2024-05-30-intel-net-fixes-v2-0-e3563aa89b0c@intel.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']","The commit merges updates for the Intel wired LAN driver, with specific fixes to the ice and igc drivers.","Intel, LAN, driver",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
f3df4044254c98128890b512bf19cc05588f1fe5,f3df4044254c98128890b512bf19cc05588f1fe5,Larysa Zaremba,larysa.zaremba@intel.com,1717450954,Jakub Kicinski,kuba@kernel.org,1717640876,09c7452f1b084e7918c0cdce028c8866ba58eb90,744d197162c2070a6045a71e2666ed93a57cc65d,"ice: map XDP queues to vectors in ice_vsi_map_rings_to_vectors()

ice_pf_dcb_recfg() re-maps queues to vectors with
ice_vsi_map_rings_to_vectors()"," which does not restore the previous
state for XDP queues. This leads to no AF_XDP traffic after rebuild.

Map XDP queues to vectors in ice_vsi_map_rings_to_vectors().
Also","[' move the code around', ' so XDP queues are mapped independently only\nthrough .ndo_bpf().\n\nFixes: 6624e780a577 (""ice: split ice_vsi_setup into smaller functions"")\nReviewed-by: Przemek Kitszel <przemyslaw.kitszel@intel.com>\nSigned-off-by: Larysa Zaremba <larysa.zaremba@intel.com>\nReviewed-by: Simon Horman <horms@kernel.org>\nTested-by: Chandan Kumar Rout <chandanx.rout@intel.com>\nSigned-off-by: Jacob Keller <jacob.e.keller@intel.com>\nLink: https://lore.kernel.org/r/20240603-net-2024-05-30-intel-net-fixes-v2-5-e3563aa89b0c@intel.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",Fixes mapping of XDP queues to vectors to restore AF_XDP traffic after rebuild.,"XDP,queues,vectors",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['xdp like programs']
744d197162c2070a6045a71e2666ed93a57cc65d,744d197162c2070a6045a71e2666ed93a57cc65d,Larysa Zaremba,larysa.zaremba@intel.com,1717450953,Jakub Kicinski,kuba@kernel.org,1717640876,bf5fb21ba711a6cb451fe69519c997880ad449b6,adbf5a42341f6ea038d3626cd4437d9f0ad0b2dd,"ice: add flag to distinguish reset from .ndo_bpf in XDP rings config

Commit 6624e780a577 (""ice: split ice_vsi_setup into smaller functions"")
has placed ice_vsi_free_q_vectors() after ice_destroy_xdp_rings() in
the rebuild process. The behaviour of the XDP rings config functions is
context-dependent"," so the change of order has led to
ice_destroy_xdp_rings() doing additional work and removing XDP prog","[' when\nit was supposed to be preserved.\n\nAlso', ' dependency on the PF state reset flags creates an additional', '\nfortunately less common problem:\n\n* PFR is requested e.g. by tx_timeout handler\n* .ndo_bpf() is asked to delete the program', ' calls ice_destroy_xdp_rings()', '\n  but reset flag is set', ' so rings are destroyed without deleting the\n  program\n* ice_vsi_rebuild tries to delete non-existent XDP rings', ' because the\n  program is still on the VSI\n* system crashes\n\nWith a similar race', ' when requested to attach a program', '\nice_prepare_xdp_rings() can actually skip setting the program in the VSI\nand nevertheless report success.\n\nInstead of reverting to the old order of function calls', ' add an enum\nargument to both ice_prepare_xdp_rings() and ice_destroy_xdp_rings() in\norder to distinguish between calls from rebuild and .ndo_bpf().\n\nFixes: efc2214b6047 (""ice: Add support for XDP"")\nReviewed-by: Igor Bagnucki <igor.bagnucki@intel.com>\nSigned-off-by: Larysa Zaremba <larysa.zaremba@intel.com>\nReviewed-by: Simon Horman <horms@kernel.org>\nTested-by: Chandan Kumar Rout <chandanx.rout@intel.com>\nSigned-off-by: Jacob Keller <jacob.e.keller@intel.com>\nLink: https://lore.kernel.org/r/20240603-net-2024-05-30-intel-net-fixes-v2-4-e3563aa89b0c@intel.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",Add a flag to distinguish reset from .ndo_bpf in XDP rings configuration in the ice driver.,"flag, reset, XDP",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF maps,['xdp like programs']
0105eaabb27f31d9b8d340aca6fb6a3420cab30f,0105eaabb27f31d9b8d340aca6fb6a3420cab30f,Cong Wang,cong.wang@bytedance.com,1716912518,Andrew Morton,akpm@linux-foundation.org,1717640365,c6b52ebebd80146ee3395737d292cdcc4d3330bb,7cc5a5d65011983952a9c62f170f5b79e24b1239,"vmalloc: check CONFIG_EXECMEM in is_vmalloc_or_module_addr()

After commit 2c9e5d4a0082 (""bpf: remove CONFIG_BPF_JIT dependency on
CONFIG_MODULES of"") CONFIG_BPF_JIT does not depend on CONFIG_MODULES any
more and bpf jit also uses the [MODULES_VADDR"," MODULES_END] memory region.
But is_vmalloc_or_module_addr() still checks CONFIG_MODULES","[' which then\nreturns false for a bpf jit memory region when CONFIG_MODULES is not\ndefined.  It leads to the following kernel BUG:\n\n[    1.567023] ------------[ cut here ]------------\n[    1.567883] kernel BUG at mm/vmalloc.c:745!\n[    1.568477] Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN NOPTI\n[    1.569367] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 6.9.0+ #448\n[    1.570247] Hardware name: QEMU Standard PC (Q35 + ICH9', ' 2009)', ' BIOS 1.15.0-1 04/01/2014\n[    1.570786] RIP: 0010:vmalloc_to_page+0x48/0x1ec\n[    1.570786] Code: 0f 00 00 e8 eb 1a 05 00 b8 37 00 00 00 48 ba fe ff ff ff ff 1f 00 00 4c 03 25 76 49 c6 02 48 c1 e0 28 48 01 e8 48 39 d0 76 02 <0f> 0b 4c 89 e7 e8 bf 1a 05 00 49 8b 04 24 48 a9 9f ff ff ff 0f 84\n[    1.570786] RSP: 0018:ffff888007787960 EFLAGS: 00010212\n[    1.570786] RAX: 000036ffa0000000 RBX: 0000000000000640 RCX: ffffffff8147e93c\n[    1.570786] RDX: 00001ffffffffffe RSI: dffffc0000000000 RDI: ffffffff840e32c8\n[    1.570786] RBP: ffffffffa0000000 R08: 0000000000000000 R09: 0000000000000000\n[    1.570786] R10: ffff888007787a88 R11: ffffffff8475d8e7 R12: ffffffff83e80ff8\n[    1.570786] R13: 0000000000000640 R14: 0000000000000640 R15: 0000000000000640\n[    1.570786] FS:  0000000000000000(0000) GS:ffff88806cc00000(0000) knlGS:0000000000000000\n[    1.570786] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[    1.570786] CR2: ffff888006a01000 CR3: 0000000003e80000 CR4: 0000000000350ef0\n[    1.570786] Call Trace:\n[    1.570786]  <TASK>\n[    1.570786]  ? __die_body+0x1b/0x58\n[    1.570786]  ? die+0x31/0x4b\n[    1.570786]  ? do_trap+0x9d/0x138\n[    1.570786]  ? vmalloc_to_page+0x48/0x1ec\n[    1.570786]  ? do_error_trap+0xcd/0x102\n[    1.570786]  ? vmalloc_to_page+0x48/0x1ec\n[    1.570786]  ? vmalloc_to_page+0x48/0x1ec\n[    1.570786]  ? handle_invalid_op+0x2f/0x38\n[    1.570786]  ? vmalloc_to_page+0x48/0x1ec\n[    1.570786]  ? exc_invalid_op+0x2b/0x41\n[    1.570786]  ? asm_exc_invalid_op+0x16/0x20\n[    1.570786]  ? vmalloc_to_page+0x26/0x1ec\n[    1.570786]  ? vmalloc_to_page+0x48/0x1ec\n[    1.570786]  __text_poke+0xb6/0x458\n[    1.570786]  ? __pfx_text_poke_memcpy+0x10/0x10\n[    1.570786]  ? __pfx___mutex_lock+0x10/0x10\n[    1.570786]  ? __pfx___text_poke+0x10/0x10\n[    1.570786]  ? __pfx_get_random_u32+0x10/0x10\n[    1.570786]  ? srso_return_thunk+0x5/0x5f\n[    1.570786]  text_poke_copy_locked+0x70/0x84\n[    1.570786]  text_poke_copy+0x32/0x4f\n[    1.570786]  bpf_arch_text_copy+0xf/0x27\n[    1.570786]  bpf_jit_binary_pack_finalize+0x26/0x5a\n[    1.570786]  bpf_int_jit_compile+0x576/0x8ad\n[    1.570786]  ? __pfx_bpf_int_jit_compile+0x10/0x10\n[    1.570786]  ? srso_return_thunk+0x5/0x5f\n[    1.570786]  ? __kmalloc_node_track_caller+0x2b5/0x2e0\n[    1.570786]  bpf_prog_select_runtime+0x7c/0x199\n[    1.570786]  bpf_prepare_filter+0x1e9/0x25b\n[    1.570786]  ? __pfx_bpf_prepare_filter+0x10/0x10\n[    1.570786]  ? srso_return_thunk+0x5/0x5f\n[    1.570786]  ? _find_next_bit+0x29/0x7e\n[    1.570786]  bpf_prog_create+0xb8/0xe0\n[    1.570786]  ptp_classifier_init+0x75/0xa1\n[    1.570786]  ? __pfx_ptp_classifier_init+0x10/0x10\n[    1.570786]  ? srso_return_thunk+0x5/0x5f\n[    1.570786]  ? register_pernet_subsys+0x36/0x42\n[    1.570786]  ? srso_return_thunk+0x5/0x5f\n[    1.570786]  sock_init+0x99/0xa3\n[    1.570786]  ? __pfx_sock_init+0x10/0x10\n[    1.570786]  do_one_initcall+0x104/0x2c4\n[    1.570786]  ? __pfx_do_one_initcall+0x10/0x10\n[    1.570786]  ? parameq+0x25/0x2d\n[    1.570786]  ? rcu_is_watching+0x1c/0x3c\n[    1.570786]  ? trace_kmalloc+0x81/0xb2\n[    1.570786]  ? srso_return_thunk+0x5/0x5f\n[    1.570786]  ? __kmalloc+0x29c/0x2c7\n[    1.570786]  ? srso_return_thunk+0x5/0x5f\n[    1.570786]  do_initcalls+0xf9/0x123\n[    1.570786]  kernel_init_freeable+0x24f/0x289\n[    1.570786]  ? __pfx_kernel_init+0x10/0x10\n[    1.570786]  kernel_init+0x19/0x13a\n[    1.570786]  ret_from_fork+0x24/0x41\n[    1.570786]  ? __pfx_kernel_init+0x10/0x10\n[    1.570786]  ret_from_fork_asm+0x1a/0x30\n[    1.570786]  </TASK>\n[    1.570819] ---[ end trace 0000000000000000 ]---\n[    1.571463] RIP: 0010:vmalloc_to_page+0x48/0x1ec\n[    1.572111] Code: 0f 00 00 e8 eb 1a 05 00 b8 37 00 00 00 48 ba fe ff ff ff ff 1f 00 00 4c 03 25 76 49 c6 02 48 c1 e0 28 48 01 e8 48 39 d0 76 02 <0f> 0b 4c 89 e7 e8 bf 1a 05 00 49 8b 04 24 48 a9 9f ff ff ff 0f 84\n[    1.574632] RSP: 0018:ffff888007787960 EFLAGS: 00010212\n[    1.575129] RAX: 000036ffa0000000 RBX: 0000000000000640 RCX: ffffffff8147e93c\n[    1.576097] RDX: 00001ffffffffffe RSI: dffffc0000000000 RDI: ffffffff840e32c8\n[    1.577084] RBP: ffffffffa0000000 R08: 0000000000000000 R09: 0000000000000000\n[    1.578077] R10: ffff888007787a88 R11: ffffffff8475d8e7 R12: ffffffff83e80ff8\n[    1.578810] R13: 0000000000000640 R14: 0000000000000640 R15: 0000000000000640\n[    1.579823] FS:  0000000000000000(0000) GS:ffff88806cc00000(0000) knlGS:0000000000000000\n[    1.580992] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[    1.581869] CR2: ffff888006a01000 CR3: 0000000003e80000 CR4: 0000000000350ef0\n[    1.582800] Kernel panic - not syncing: Fatal exception\n[    1.583765] ---[ end Kernel panic - not syncing: Fatal exception ]---\n\nFix this by checking CONFIG_EXECMEM instead.\n\nLink: https://lkml.kernel.org/r/20240528160838.102223-1-xiyou.wangcong@gmail.com\nFixes: 2c9e5d4a0082 (""bpf: remove CONFIG_BPF_JIT dependency on CONFIG_MODULES of"")\nSigned-off-by: Cong Wang <cong.wang@bytedance.com>\nAcked-by: Mike Rapoport (IBM) <rppt@kernel.org>\nCc: Luis Chamberlain <mcgrof@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\n', '']",Check CONFIG_EXECMEM in is_vmalloc_or_module_addr after changes to BPF JIT dependencies.,"CONFIG_EXECMEM,BPF JIT,is_vmalloc_or_module_addr",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
886bf9172da06a85de3c68a651477d7d625fd6cc,886bf9172da06a85de3c68a651477d7d625fd6cc,Jakub Kicinski,kuba@kernel.org,1717639387,Jakub Kicinski,kuba@kernel.org,1717639388,99a6d9cfae97c0192997ef37d347896bb3d447d6,323a359f9b077f382f4483023d096a4d316fd135 03e38d315f3c5258270ad50f2ae784b6372e87c3,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-06-05

We've added 8 non-merge commits during the last 6 day(s) which contain
a total of 9 files changed", 34 insertions(+),"[' 35 deletions(-).\n\nThe main changes are:\n\n1) Fix a potential use-after-free in bpf_link_free when the link uses\n   dealloc_deferred to free the link object but later still tests for\n   presence of link->ops->dealloc', ' from Cong Wang.\n\n2) Fix BPF test infra to set the run context for rawtp test_run callback\n   where syzbot reported a crash', ' from Jiri Olsa.\n\n3) Fix bpf_session_cookie BTF_ID in the special_kfunc_set list to exclude\n   it for the case of !CONFIG_FPROBE', ' also from Jiri Olsa.\n\n4) Fix a Coverity static analysis report to not close() a link_fd of -1\n   in the multi-uprobe feature detector', ' from Andrii Nakryiko.\n\n5) Revert support for redirect to any xsk socket bound to the same umem\n   as it can result in corrupted ring state which can lead to a crash when\n   flushing rings. A different approach will be pursued for bpf-next to\n   address it safely', ' from Magnus Karlsson.\n\n6) Fix inet_csk_accept prototype in test_sk_storage_tracing.c which caused\n   BPF CI failure after the last tree fast forwarding', ' from Andrii Nakryiko.\n\n7) Fix a coccicheck warning in BPF devmap that iterator variable cannot\n   be NULL', ' from Thorsten Blum.\n\n* tag \'for-netdev\' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:\n  Revert ""xsk: Document ability to redirect to any socket bound to the same umem""\n  Revert ""xsk: Support redirect to any socket bound to the same umem""\n  bpf: Set run context for rawtp test_run callback\n  bpf: Fix a potential use-after-free in bpf_link_free()\n  bpf', "" devmap: Remove unnecessary if check in for loop\n  libbpf: don't close(-1) in multi-uprobe feature detector\n  bpf: Fix bpf_session_cookie BTF_ID in special_kfunc_set list\n  selftests/bpf: fix inet_csk_accept prototype in test_sk_storage_tracing.c\n====================\n\nLink: https://lore.kernel.org/r/20240605091525.22628-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n"", '']",Merged branch with 8 non-merge eBPF related commits to the netdev subsystem.,"eBPF, non-merge, netdev",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
072088704433f75dacf9e33179dd7a81f0a238d4,072088704433f75dacf9e33179dd7a81f0a238d4,Andrii Nakryiko,andrii@kernel.org,1717546589,Daniel Borkmann,daniel@iogearbox.net,1717599285,c065cbeac46ce990353dc6a9f25ff8da7177a17b,e1a8630291fde2a0edac2955e3df48587dac9906,"libbpf: Remove callback-based type/string BTF field visitor helpers

Now that all libbpf/bpftool code switched to btf_field_iter"," remove
btf_type_visit_type_ids() and btf_type_visit_str_offs() callback-based
helpers as not needed anymore.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Alan Maguire <alan.maguire@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240605001629.4061937-6-andrii@kernel.org
",[''],The commit removes callback-based type/string BTF field visitor helpers from libbpf as they are now unnecessary.,"libbpf,BTF,helpers",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
e1a8630291fde2a0edac2955e3df48587dac9906,e1a8630291fde2a0edac2955e3df48587dac9906,Andrii Nakryiko,andrii@kernel.org,1717546588,Daniel Borkmann,daniel@iogearbox.net,1717599281,ebacd0fe8e6d496e80d78e9a14af3d39bdc52525,c2641123696b572a3b059e1b45777317ba9f9086,"bpftool: Use BTF field iterator in btfgen

Switch bpftool's code which is using libbpf-internal
btf_type_visit_type_ids() helper to new btf_field_iter functionality.

This makes bpftool code simpler"," but also unblocks removing libbpf's
btf_type_visit_type_ids() helper completely.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Alan Maguire <alan.maguire@oracle.com>
Reviewed-by: Quentin Monnet <qmo@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240605001629.4061937-5-andrii@kernel.org
",[''],Replaced bpftool's libbpf-internal functionality with a new btf field iterator for simplification.,"bpftool,BTF iterator,simplification",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The bpftool utility,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
c2641123696b572a3b059e1b45777317ba9f9086,c2641123696b572a3b059e1b45777317ba9f9086,Andrii Nakryiko,andrii@kernel.org,1717546587,Daniel Borkmann,daniel@iogearbox.net,1717599277,cb5c3b3155a1e4553d66c1860cca69bd548c4807,2bce2c1cb2f0acbf619737a10575f99df0c43984,"libbpf: Make use of BTF field iterator in BTF handling code

Use new BTF field iterator logic to replace all the callback-based
visitor calls. There is still a .BTF.ext callback-based visitor APIs
that should be converted"," which will happens as a follow up.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Alan Maguire <alan.maguire@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240605001629.4061937-4-andrii@kernel.org
",[''],The commit replaces callback-based visitor calls with a BTF field iterator in the libbpf code.,"BTF,libbpf,iterator",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2bce2c1cb2f0acbf619737a10575f99df0c43984,2bce2c1cb2f0acbf619737a10575f99df0c43984,Andrii Nakryiko,andrii@kernel.org,1717546586,Daniel Borkmann,daniel@iogearbox.net,1717599272,000ced203a6a1054130b9a5848f29915b9ea67ad,68153bb2fffbe59804370e514482f95c4b2053ff,"libbpf: Make use of BTF field iterator in BPF linker code

Switch all BPF linker code dealing with iterating BTF type ID and string
offset fields to new btf_field_iter facilities.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Alan Maguire <alan.maguire@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240605001629.4061937-3-andrii@kernel.org
",,Utilize BTF field iterator in BPF linker code for type ID and string offset fields.,BTF iterator linker,It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
68153bb2fffbe59804370e514482f95c4b2053ff,68153bb2fffbe59804370e514482f95c4b2053ff,Andrii Nakryiko,andrii@kernel.org,1717546585,Daniel Borkmann,daniel@iogearbox.net,1717599266,130e88dd4f4f856a770497b71bb4a05fa565ed98,898ac74c5b5f8b551a377d6a60ca4e30023ac9d2,"libbpf: Add BTF field iterator

Implement iterator-based type ID and string offset BTF field iterator.
This is used extensively in BTF-handling code and BPF linker code for
various sanity checks", rewriting IDs/offsets,"[' etc. Currently this is\nimplemented as visitor pattern calling custom callbacks', ' which makes the\nlogic (especially in simple cases) unnecessarily obscure and harder to\nfollow.\n\nHaving equivalent functionality using iterator pattern makes for simpler\nto understand and maintain code. As we add more code for BTF processing\nlogic in libbpf', "" it's best to switch to iterator pattern before adding\nmore callback-based code.\n\nThe idea for iterator-based implementation is to record offsets of\nnecessary fields within fixed btf_type parts (which should be iterated\njust once)"", ' and', ' for kinds that have multiple members (based on vlen\nfield)', ' record where in each member necessary fields are located.\n\nGeneric iteration code then just keeps track of last offset that was\nreturned and handles N members correctly. Return type is just u32\npointer', ' where NULL is returned when all relevant fields were already\niterated.\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nTested-by: Alan Maguire <alan.maguire@oracle.com>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nAcked-by: Jiri Olsa <jolsa@kernel.org>\nLink: https://lore.kernel.org/bpf/20240605001629.4061937-2-andrii@kernel.org\n', '']",Introduce BTF field iterator for improved type ID and offset management in libbpf.,"BTF,iterator,libbpf",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
ca9680821dfec73c9100860bda4fab1f1309722e,ca9680821dfec73c9100860bda4fab1f1309722e,Namhyung Kim,namhyung@kernel.org,1716311260,Arnaldo Carvalho de Melo,acme@redhat.com,1717597980,181f96f89f2f88b2550b6379242e70e64e08f646,5b3cde198878b2f3269d5e7efbc0d514899b1fd8,"perf bpf: Fix handling of minimal vmlinux.h file when interrupting the build

Ingo reported that he was seeing these when hitting Control+C during a
perf tools build:

  Makefile.perf:1149: *** Missing bpftool input for generating vmlinux.h. Stop.

The failure happens when you don't have vmlinux.h or vmlinux with BTF.

ifeq ($(VMLINUX_H)",")
  ifeq ($(VMLINUX_BTF)","["")\n    $(error Missing bpftool input for generating vmlinux.h)\n  endif\nendif\n\nVMLINUX_BTF can be empty if you didn't build a kernel or it doesn't have\na BTF section and the current kernel also has no BTF.  This is totally\nok.\n\nBut VMLINUX_H should be set to the minimal version in the source tree\n(unless you overwrite it manually) when you don't pass GEN_VMLINUX_H=1\n(which requires VMLINUX_BTF should not be empty).  The problem is that\nit's defined in Makefile.config which is not included for `make clean`.\n\nReported-by: Ingo Molnar <mingo@kernel.org>\nSigned-off-by: Namhyung Kim <namhyung@kernel.org>\nTested-by: Ingo Molnar <mingo@kernel.org>\nCc: Adrian Hunter <adrian.hunter@intel.com>\nCc: Ian Rogers <irogers@google.com>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Kan Liang <kan.liang@linux.intel.com>\nLink: http://lore.kernel.org/lkml/CAM9d7ch5HTr+k+_GpbMrX0HUo5BZ11byh1xq0Two7B7RQACuNw@mail.gmail.com\nLink: http://lore.kernel.org/lkml/ZjssGrj+abyC6mYP@gmail.com\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>\n"", '']",The commit fixes handling of minimal vmlinux.h file when interrupting the perf tools build process.,"perf bpf,vmlinux.h,build error",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The bpftool utility,"[""It's not related to any of the above.""]"
491aee894a08bc9b8bb52e7363b9d4bc6403f363,491aee894a08bc9b8bb52e7363b9d4bc6403f363,Taehee Yoo,ap420073@gmail.com,1717390675,David S. Miller,davem@davemloft.net,1717580967,6a7b9033236d98a1b934d9e88fa62caf21264944,0a8d3f2e3e8d8aea8af017e14227b91d5989b696,"ionic: fix kernel panic in XDP_TX action

In the XDP_TX path"," ionic driver sends a packet to the TX path with rx
page and corresponding dma address.
After tx is done","["" ionic_tx_clean() frees that page.\nBut RX ring buffer isn't reset to NULL.\nSo"", ' it uses a freed page', ' which causes kernel panic.\n\nBUG: unable to handle page fault for address: ffff8881576c110c\nPGD 773801067 P4D 773801067 PUD 87f086067 PMD 87efca067 PTE 800ffffea893e060\nOops: Oops: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC KASAN NOPTI\nCPU: 1 PID: 25 Comm: ksoftirqd/1 Not tainted 6.9.0+ #11\nHardware name: ASUS System Product Name/PRIME Z690-P D4', ' BIOS 0603 11/01/2021\nRIP: 0010:bpf_prog_f0b8caeac1068a55_balancer_ingress+0x3b/0x44f\nCode: 00 53 41 55 41 56 41 57 b8 01 00 00 00 48 8b 5f 08 4c 8b 77 00 4c 89 f7 48 83 c7 0e 48 39 d8\nRSP: 0018:ffff888104e6fa28 EFLAGS: 00010283\nRAX: 0000000000000002 RBX: ffff8881576c1140 RCX: 0000000000000002\nRDX: ffffffffc0051f64 RSI: ffffc90002d33048 RDI: ffff8881576c110e\nRBP: ffff888104e6fa88 R08: 0000000000000000 R09: ffffed1027a04a23\nR10: 0000000000000000 R11: 0000000000000000 R12: ffff8881b03a21a8\nR13: ffff8881589f800f R14: ffff8881576c1100 R15: 00000001576c1100\nFS: 0000000000000000(0000) GS:ffff88881ae00000(0000) knlGS:0000000000000000\nCS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: ffff8881576c110c CR3: 0000000767a90000 CR4: 00000000007506f0\nPKRU: 55555554\nCall Trace:\n<TASK>\n? __die+0x20/0x70\n? page_fault_oops+0x254/0x790\n? __pfx_page_fault_oops+0x10/0x10\n? __pfx_is_prefetch.constprop.0+0x10/0x10\n? search_bpf_extables+0x165/0x260\n? fixup_exception+0x4a/0x970\n? exc_page_fault+0xcb/0xe0\n? asm_exc_page_fault+0x22/0x30\n? 0xffffffffc0051f64\n? bpf_prog_f0b8caeac1068a55_balancer_ingress+0x3b/0x44f\n? do_raw_spin_unlock+0x54/0x220\nionic_rx_service+0x11ab/0x3010 [ionic 9180c3001ab627d82bbc5f3ebe8a0decaf6bb864]\n? ionic_tx_clean+0x29b/0xc60 [ionic 9180c3001ab627d82bbc5f3ebe8a0decaf6bb864]\n? __pfx_ionic_tx_clean+0x10/0x10 [ionic 9180c3001ab627d82bbc5f3ebe8a0decaf6bb864]\n? __pfx_ionic_rx_service+0x10/0x10 [ionic 9180c3001ab627d82bbc5f3ebe8a0decaf6bb864]\n? ionic_tx_cq_service+0x25d/0xa00 [ionic 9180c3001ab627d82bbc5f3ebe8a0decaf6bb864]\n? __pfx_ionic_rx_service+0x10/0x10 [ionic 9180c3001ab627d82bbc5f3ebe8a0decaf6bb864]\nionic_cq_service+0x69/0x150 [ionic 9180c3001ab627d82bbc5f3ebe8a0decaf6bb864]\nionic_txrx_napi+0x11a/0x540 [ionic 9180c3001ab627d82bbc5f3ebe8a0decaf6bb864]\n__napi_poll.constprop.0+0xa0/0x440\nnet_rx_action+0x7e7/0xc30\n? __pfx_net_rx_action+0x10/0x10\n\nFixes: 8eeed8373e1c (""ionic: Add XDP_TX support"")\nSigned-off-by: Taehee Yoo <ap420073@gmail.com>\nReviewed-by: Shannon Nelson <shannon.nelson@amd.com>\nReviewed-by: Brett Creeley <brett.creeley@amd.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>\n', '']",Fix kernel panic issue in the XDP_TX action of the ionic driver.,"kernel panic,XDP_TX ionic",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['xdp like programs']
03e38d315f3c5258270ad50f2ae784b6372e87c3,03e38d315f3c5258270ad50f2ae784b6372e87c3,Magnus Karlsson,magnus.karlsson@intel.com,1717504166,Daniel Borkmann,daniel@iogearbox.net,1717573385,1483bf8d691058a81cfbc547b4516272edd8dc97,7fcf26b315bbb728036da0862de6b335da83dff2,"Revert ""xsk: Document ability to redirect to any socket bound to the same umem""

This reverts commit 968595a93669b6b4f6d1fcf80cf2d97956b6868f.

Reported-by: Yuval El-Hanany <YuvalE@radware.com>
Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/xdp-newbies/8100DBDC-0B7C-49DB-9995-6027F6E63147@radware.com
Link: https://lore.kernel.org/bpf/20240604122927.29080-3-magnus.karlsson@gmail.com
",,This commit reverts a previous documentation update regarding xsk socket redirection.,"revert,xsk,umem",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['socket like programs']
7fcf26b315bbb728036da0862de6b335da83dff2,7fcf26b315bbb728036da0862de6b335da83dff2,Magnus Karlsson,magnus.karlsson@intel.com,1717504165,Daniel Borkmann,daniel@iogearbox.net,1717573350,7d19b4d26135482b39c0febf4f7ef56fe0eec936,d0d1df8ba18abc57f28fb3bc053b2bf319367f2c,"Revert ""xsk: Support redirect to any socket bound to the same umem""

This reverts commit 2863d665ea41282379f108e4da6c8a2366ba66db.

This patch introduced a potential kernel crash when multiple napi instances
redirect to the same AF_XDP socket. By removing the queue_index check"," it is
possible for multiple napi instances to access the Rx ring at the same time","['\nwhich will result in a corrupted ring state which can lead to a crash when\nflushing the rings in __xsk_flush(). This can happen when the linked list of\nsockets to flush gets corrupted by concurrent accesses. A quick and small fix\nis not possible', ' so let us revert this for now.\n\nReported-by: Yuval El-Hanany <YuvalE@radware.com>\nSigned-off-by: Magnus Karlsson <magnus.karlsson@intel.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/xdp-newbies/8100DBDC-0B7C-49DB-9995-6027F6E63147@radware.com\nLink: https://lore.kernel.org/bpf/20240604122927.29080-2-magnus.karlsson@gmail.com\n', '']",Revert commit 2863d665ea4 due to potential kernel crash with xsk redirect to same AF_XDP socket.,"Revert, xsk, AF_XDP",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['socket like programs', 'other']"
d0d1df8ba18abc57f28fb3bc053b2bf319367f2c,d0d1df8ba18abc57f28fb3bc053b2bf319367f2c,Jiri Olsa,jolsa@kernel.org,1717513224,Daniel Borkmann,daniel@iogearbox.net,1717573293,8292b3906975a234bf0fcb5c6aa5e5629d656703,2884dc7d08d98a89d8d65121524bb7533183a63a,"bpf: Set run context for rawtp test_run callback

syzbot reported crash when rawtp program executed through the
test_run interface calls bpf_get_attach_cookie helper or any
other helper that touches task->bpf_ctx pointer.

Setting the run context (task->bpf_ctx pointer) for test_run
callback.

Fixes: 7adfc6c9b315 (""bpf: Add bpf_get_attach_cookie() BPF helper to access bpf_cookie value"")
Reported-by: syzbot+3ab78ff125b7979e45f9@syzkaller.appspotmail.com
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Closes: https://syzkaller.appspot.com/bug?extid=3ab78ff125b7979e45f9
Link: https://lore.kernel.org/bpf/20240604150024.359247-1-jolsa@kernel.org
",,Fixes crash by setting run context for raw tracepoint test_run callbacks in BPF.,"run context, rawtp, crash",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['tracepoints like programs']
898ac74c5b5f8b551a377d6a60ca4e30023ac9d2,898ac74c5b5f8b551a377d6a60ca4e30023ac9d2,Yonghong Song,yonghong.song@linux.dev,1717524034,Andrii Nakryiko,andrii@kernel.org,1717530584,76f7ebe742e88529d202b954570abf3b98828462,61ce0ea7591fef2eb6e89ce40ffcc24fda4dbbc5,"selftests/bpf: Ignore .llvm.<hash> suffix in kallsyms_find()

I hit the following failure when running selftests with
internal backported upstream kernel:
  test_ksyms:PASS:kallsyms_fopen 0 nsec
  test_ksyms:FAIL:ksym_find symbol 'bpf_link_fops' not found
  #123     ksyms:FAIL

In /proc/kallsyms"," we have
  $ cat /proc/kallsyms | grep bpf_link_fops
  ffffffff829f0cb0 d bpf_link_fops.llvm.12608678492448798416
The CONFIG_LTO_CLANG_THIN is enabled in the kernel which is responsible
for bpf_link_fops.llvm.12608678492448798416 symbol name.

In prog_tests/ksyms.c we have
  kallsyms_find(""bpf_link_fops""","[' &link_fops_addr)\nand kallsyms_find() compares ""bpf_link_fops"" with symbols\nin /proc/kallsyms in order to find the entry. With\nbpf_link_fops.llvm.<hash> in /proc/kallsyms', ' the kallsyms_find()\nfailed.\n\nTo fix the issue', ' in kallsyms_find()', ' if a symbol has suffix\n.llvm.<hash>', ' that suffix will be ignored for comparison.\nThis fixed the test failure.\n\nSigned-off-by: Yonghong Song <yonghong.song@linux.dev>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240604180034.1356016-1-yonghong.song@linux.dev\n', '']",Fix kallsyms_find() to ignore .llvm.<hash> suffix for proper symbol resolution in selftests.,"selftests,kallsyms,llvm",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
61ce0ea7591fef2eb6e89ce40ffcc24fda4dbbc5,61ce0ea7591fef2eb6e89ce40ffcc24fda4dbbc5,Song Liu,song@kernel.org,1717484820,Andrii Nakryiko,andrii@kernel.org,1717525074,09649074f6ebde1305acef37c57614fa3b0e9d0d,49df0019f36798d414e6b913bec30a3a0cd47c70,"selftests/bpf: Fix bpf_cookie and find_vma in nested VM

bpf_cookie and find_vma are flaky in nested VMs"," which is used by some CI
systems. It turns out these failures are caused by unreliable perf event
in nested VM. Fix these by:

  1. Use PERF_COUNT_SW_CPU_CLOCK in find_vma;
  2. Increase sample_freq in bpf_cookie.

Signed-off-by: Song Liu <song@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240604070700.3032142-1-song@kernel.org
",[''],Fix unreliable perf event issues in bpf_cookie and find_vma selftests within nested VMs.,"bpf_cookie,nested VM,perf event",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['tracepoints like programs']
8d4e21bd4cca8013d2c6f55d42df85838d4ebce6,8d4e21bd4cca8013d2c6f55d42df85838d4ebce6,Steven Rostedt (Google),rostedt@goodmis.org,1717441651,Steven Rostedt (Google),rostedt@goodmis.org,1717511920,968096b521d877f1f7c982a878ba1471953cfa40,35b944a997e25962122c3dea68b020e7fbb06cbd,"selftests/ftrace: Add fgraph-multi.tc test

Add a test that creates 3 instances and enables function_graph tracer in
each as well as the top instance"," where each will enable a filter (but one
that traces all functions) and check that they are filtering properly.

Link: https://lore.kernel.org/linux-trace-kernel/20240603190825.252845939@goodmis.org

Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],Add selftest for function_graph tracing with multiple instances and filtering.,"selftests,ftrace,function_graph",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['kprobe/uprobe/ftrace like programs']
35b944a997e25962122c3dea68b020e7fbb06cbd,35b944a997e25962122c3dea68b020e7fbb06cbd,Steven Rostedt (Google),rostedt@goodmis.org,1717441650,Steven Rostedt (Google),rostedt@goodmis.org,1717511908,d34e10d0ee5a6fdef94a187a211e0819a4c27f13,fe835e3ca40e172aa8ad12f4ed2898c181fafab0,"selftests/ftrace: Add function_graph tracer to func-filter-pid test

The function tracer is tested to see if pid filtering works. Add a test to
test function_graph tracer as well"," but only if the function_graph tracer
is enabled for the top level or instance.

Link: https://lore.kernel.org/linux-trace-kernel/20240603190825.083048115@goodmis.org

Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],The commit adds a test for the function_graph tracer to check if pid filtering works in selftests for ftrace.,"function_graph,tracer,pid-filtering",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tracepoints like programs']
fe835e3ca40e172aa8ad12f4ed2898c181fafab0,fe835e3ca40e172aa8ad12f4ed2898c181fafab0,Steven Rostedt (Google),rostedt@goodmis.org,1717441649,Steven Rostedt (Google),rostedt@goodmis.org,1717511903,bd6d3f769d470731a3067a5b9f5840761ef6727b,cc60ee813b50334b32343861057dc9e981e9c7f0,"function_graph: Use static_call and branch to optimize return function

In most cases function graph is used by a single user. Instead of calling
a loop to call function graph callbacks in this case"," call the function
return callback directly.

Use the static_key that is set when the function graph tracer has less
than 2 callbacks registered. It will do the direct call in that case","[' and\nwill do the loop over all callers when there are 2 or more callbacks\nregistered.\n\nLink: https://lore.kernel.org/linux-trace-kernel/20240603190824.921460797@goodmis.org\n\nCc: Masami Hiramatsu <mhiramat@kernel.org>\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nCc: Florent Revest <revest@chromium.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: bpf <bpf@vger.kernel.org>\nCc: Sven Schnelle <svens@linux.ibm.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Arnaldo Carvalho de Melo <acme@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Alan Maguire <alan.maguire@oracle.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Guo Ren <guoren@kernel.org>\nReviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>\n', '']",Optimize function graph tracer by using static calls for single callback scenarios.,"function_graph, static_call, optimize",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
cc60ee813b50334b32343861057dc9e981e9c7f0,cc60ee813b50334b32343861057dc9e981e9c7f0,Steven Rostedt (Google),rostedt@goodmis.org,1717441648,Steven Rostedt (Google),rostedt@goodmis.org,1717511895,32fd28b25122cc9da91ff5a07a0ed54b4001294c,a5b6d4da0218a0539c36ad6794c624c2c6ca7b32,"function_graph: Use static_call and branch to optimize entry function

In most cases function graph is used by a single user. Instead of calling
a loop to call function graph callbacks in this case"," call the function
entry callback directly.

Add a static_key that will be used to set the function graph logic to
either do the loop (when more than one callback is registered) or to call
the callback directly if there is only one registered callback.

Link: https://lore.kernel.org/linux-trace-kernel/20240603190824.766858241@goodmis.org

Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],Optimize function graph entry function by using static_call and branch to reduce overhead when only one callback is registered.,"function_graph, static_call, optimization",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
a5b6d4da0218a0539c36ad6794c624c2c6ca7b32,a5b6d4da0218a0539c36ad6794c624c2c6ca7b32,Steven Rostedt (Google),rostedt@goodmis.org,1717441647,Steven Rostedt (Google),rostedt@goodmis.org,1717511890,895eca6404b350d6b0ebca968469bc59bdd1d3b3,420e1354bcb6f006f183a1b6fe5dd21f60a457ef,"function_graph: Use bitmask to loop on fgraph entry

Instead of looping through all the elements of fgraph_array[] to see if
there's an gops attached to one and then calling its gops->func(). Create
a fgraph_array_bitmask that sets bits when an index in the array is
reserved (via the simple lru algorithm). Then only the bits set in this
bitmask needs to be looked at where only elements in the array that have
ops registered need to be looked at.

Note"," we do not care about races. If a bit is set before the gops is
assigned","[' it only wastes time looking at the element and ignoring it (as\nit did before this bitmask is added).\n\nLink: https://lore.kernel.org/linux-trace-kernel/20240603190824.604448781@goodmis.org\n\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nCc: Florent Revest <revest@chromium.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: bpf <bpf@vger.kernel.org>\nCc: Sven Schnelle <svens@linux.ibm.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Arnaldo Carvalho de Melo <acme@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Alan Maguire <alan.maguire@oracle.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Guo Ren <guoren@kernel.org>\nReviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>\n', '']",The commit optimizes function graph processing using a bitmask for improved performance in handling function operations.,"bitmask, fgraph, optimization",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,['tracepoints like programs']
420e1354bcb6f006f183a1b6fe5dd21f60a457ef,420e1354bcb6f006f183a1b6fe5dd21f60a457ef,Steven Rostedt (Google),rostedt@goodmis.org,1717441646,Steven Rostedt (Google),rostedt@goodmis.org,1717511883,3844c1a6a79d464f0eb90ac9543b95977c71c208,dd120af2d5f8f3d2d742a64cefc4a529d382ab06,"function_graph: Use for_each_set_bit() in __ftrace_return_to_handler()

Instead of iterating through the entire fgraph_array[] and seeing if one
of the bitmap bits are set to know to call the array's retfunc() function","
use for_each_set_bit() on the bitmap itself. This will only iterate for
the number of set bits.

Link: https://lore.kernel.org/linux-trace-kernel/20240603190824.447448026@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],Optimized function_graph handling by using for_each_set_bit to iterate only over set bits in __ftrace_return_to_handler().,"function_graph,for_each_set_bit,ftrace",It's a performance optimization.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
dd120af2d5f8f3d2d742a64cefc4a529d382ab06,dd120af2d5f8f3d2d742a64cefc4a529d382ab06,Masami Hiramatsu (Google),mhiramat@kernel.org,1717441645,Steven Rostedt (Google),rostedt@goodmis.org,1717511879,b7cef75f1573193f1faaf0e8c3f0d36665e7bb41,47c3c70aa36971c90e32e91f9254110195d67a02,"ftrace: Add multiple fgraph storage selftest

Add a selftest for multiple function graph tracer with storage on a same
function. In this case"," the shadow stack entry will be shared among those
fgraph with different data storage. So this will ensure the fgraph will
not mixed those storage data.

Link: https://lore.kernel.org/linux-trace-kernel/171509111465.162236.3795819216426570800.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190824.284049716@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Suggested-by: Steven Rostedt (Google) <rostedt@goodmis.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],This commit adds a selftest for multiple function graph tracer with shared storage to ensure data is not mixed.,"ftrace,selftest,fgraph",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['kprobe/uprobe/ftrace like programs']
47c3c70aa36971c90e32e91f9254110195d67a02,47c3c70aa36971c90e32e91f9254110195d67a02,Steven Rostedt (VMware),rostedt@goodmis.org,1717441644,Steven Rostedt (Google),rostedt@goodmis.org,1717511872,dca34b7ee357a02da6371fec6546d7413e9e9ae8,91c46b0aa917546432b5b219494859cda0edc39e,"function_graph: Add selftest for passing local variables

Add boot up selftest that passes variables from a function entry to a
function exit"," and make sure that they do get passed around.

Co-developed with Masami Hiramatsu:
Link: https://lore.kernel.org/linux-trace-kernel/171509110271.162236.11047551496319744627.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190824.122952310@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],Added a boot up selftest for validating passing of local variables in function_graph tracing.,"selftest,function_graph,local variables",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
91c46b0aa917546432b5b219494859cda0edc39e,91c46b0aa917546432b5b219494859cda0edc39e,Steven Rostedt (VMware),rostedt@goodmis.org,1717441643,Steven Rostedt (Google),rostedt@goodmis.org,1717511868,d9b679ed4fb95a43862073742b8bdaafd696a72a,b84214890a9bc56f0fe4ec4fc72f2307ed05096d,"function_graph: Implement fgraph_reserve_data() and fgraph_retrieve_data()

Added functions that can be called by a fgraph_ops entryfunc and retfunc to
store state between the entry of the function being traced to the exit of
the same function. The fgraph_ops entryfunc() may call
fgraph_reserve_data() to store up to 32 words onto the task's shadow
ret_stack and this then can be retrieved by fgraph_retrieve_data() called
by the corresponding retfunc().

Co-developed with Masami Hiramatsu:
Link: https://lore.kernel.org/linux-trace-kernel/171509109089.162236.11372474169781184034.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190823.959703050@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",,Implement functions for storing and retrieving data across function entry and exit in function graph tracing.,"fgraph, tracing, state",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
b84214890a9bc56f0fe4ec4fc72f2307ed05096d,b84214890a9bc56f0fe4ec4fc72f2307ed05096d,Steven Rostedt (VMware),rostedt@goodmis.org,1717441642,Steven Rostedt (Google),rostedt@goodmis.org,1717511864,c5d46adaaa39a406fc1c87aee7c0015aacb494ff,068da098eb504469dc195137ae35eeacfe0c8de9,"function_graph: Move graph notrace bit to shadow stack global var

The use of the task->trace_recursion for the logic used for the function
graph no-trace was a bit of an abuse of that variable. Now that there
exists global vars that are per stack for registered graph traces"," use
that instead.

Link: https://lore.kernel.org/linux-trace-kernel/171509107907.162236.6564679266777519065.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190823.796709456@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],Move graph notrace logic to use shadow stack global variable instead of task trace_recursion.,"function_graph, notrace, shadow_stack",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['tracepoints like programs']
068da098eb504469dc195137ae35eeacfe0c8de9,068da098eb504469dc195137ae35eeacfe0c8de9,Steven Rostedt (VMware),rostedt@goodmis.org,1717441641,Steven Rostedt (Google),rostedt@goodmis.org,1717511860,0f837504ceab56bd526a25d0fa631f1e4c67824a,12117f3307b63f287756d7ec8cc4f11b94e1206a,"function_graph: Move graph depth stored data to shadow stack global var

The use of the task->trace_recursion for the logic used for the function
graph depth was a bit of an abuse of that variable. Now that there
exists global vars that are per stack for registered graph traces"," use that
instead.

Link: https://lore.kernel.org/linux-trace-kernel/171509106728.162236.2398372644430125344.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190823.634870264@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],Moved function graph depth data to global shadow stack variable for cleaner implementation.,"function_graph, shadow stack, global variable",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['tracepoints like programs']
12117f3307b63f287756d7ec8cc4f11b94e1206a,12117f3307b63f287756d7ec8cc4f11b94e1206a,Steven Rostedt (VMware),rostedt@goodmis.org,1717441640,Steven Rostedt (Google),rostedt@goodmis.org,1717511855,7cf941e3b34404039e5aa2050cd7ca4bb0237607,4497412a1f7b5d9e0849f125652f2cc58cdba562,"function_graph: Move set_graph_function tests to shadow stack global var

The use of the task->trace_recursion for the logic used for the
set_graph_function was a bit of an abuse of that variable. Now that there
exists global vars that are per stack for registered graph traces"," use that
instead.

Link: https://lore.kernel.org/linux-trace-kernel/171509105520.162236.10339831553995971290.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190823.472955399@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],Refactor function graph logic by moving set_graph_function tests to use shadow stack global variables.,"function_graph, shadow stack, refactor",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
4497412a1f7b5d9e0849f125652f2cc58cdba562,4497412a1f7b5d9e0849f125652f2cc58cdba562,Steven Rostedt (VMware),rostedt@goodmis.org,1717441639,Steven Rostedt (Google),rostedt@goodmis.org,1717511849,25a9a34da53bba0dd2539c3199f0c8d3597e6a68,6d4786592ac88aa31f45fde6bfaad3162e3a92a4,"function_graph: Add ""task variables"" per task for fgraph_ops

Add a ""task variables"" array on the tasks shadow ret_stack that is the
size of longs for each possible registered fgraph_ops. That's a total
of 16"," taking up 8 * 16 = 128 bytes (out of a page size 4k).

This will allow for fgraph_ops to do specific features on a per task basis
having a way to maintain state for each task.

Co-developed with Masami Hiramatsu:
Link: https://lore.kernel.org/linux-trace-kernel/171509104383.162236.12239656156685718550.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190823.308806126@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],Add task-specific variables to shadow ret_stack for maintaining state with fgraph_ops in function graph tracing.,"task variables,fgraph_ops,shadow ret_stack",It's a new feature.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['tracepoints like programs']
6d4786592ac88aa31f45fde6bfaad3162e3a92a4,6d4786592ac88aa31f45fde6bfaad3162e3a92a4,Masami Hiramatsu (Google),mhiramat@kernel.org,1717441638,Steven Rostedt (Google),rostedt@goodmis.org,1717511841,9b5f608a9e54b56f81ac6c94dbcd7dfd5297b146,df3ec5da6a1e7f6e142680d7c5266d3af187170b,"function_graph: Use a simple LRU for fgraph_array index number

Since the fgraph_array index is used for the bitmap on the shadow
stack"," it may leave some entries after a function_graph instance is
removed. Thus if another instance reuses the fgraph_array index soon
after releasing it","[' the fgraph may confuse to call the newer callback\nfor the entries which are pushed by the older instance.\nTo avoid reusing the fgraph_array index soon after releasing', ' introduce\na simple LRU table for managing the index number. This will reduce the\npossibility of this confusion.\n\nLink: https://lore.kernel.org/linux-trace-kernel/171509103267.162236.6885097397289135378.stgit@devnote2\nLink: https://lore.kernel.org/linux-trace-kernel/20240603190823.147421545@goodmis.org\n\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nCc: Florent Revest <revest@chromium.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: bpf <bpf@vger.kernel.org>\nCc: Sven Schnelle <svens@linux.ibm.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Arnaldo Carvalho de Melo <acme@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Alan Maguire <alan.maguire@oracle.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Guo Ren <guoren@kernel.org>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>\n', '']",Implement a simple LRU for fgraph_array index number in function_graph to manage bitmap in shadow stack.,"LRU,fgraph_array,shadow stack",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.","[""It's not related to any of the above.""]"
df3ec5da6a1e7f6e142680d7c5266d3af187170b,df3ec5da6a1e7f6e142680d7c5266d3af187170b,Steven Rostedt (Google),rostedt@goodmis.org,1717441637,Steven Rostedt (Google),rostedt@goodmis.org,1717511831,4ba7160fda7f476c0a6fb6201aa5ebbeb1af26fe,c132be2c4fcc1150ad0791c2a85dd4c9ad0bd0c8,"function_graph: Add pid tracing back to function graph tracer

Now that the function_graph has a main callback that handles the function
graph subops tracing"," it no longer honors the pid filtering of ftrace. Add
back this logic in the function_graph code to update the gops callback for
the entry function to test if it should trace the current task or not.

Link: https://lore.kernel.org/linux-trace-kernel/20240603190822.991720703@goodmis.org

Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],Reintroduce PID filtering in the function graph tracer within the function_graph subsystem.,"function_graph,tracer,PID",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['kprobe/uprobe/ftrace like programs']
c132be2c4fcc1150ad0791c2a85dd4c9ad0bd0c8,c132be2c4fcc1150ad0791c2a85dd4c9ad0bd0c8,Steven Rostedt (VMware),rostedt@goodmis.org,1717441636,Steven Rostedt (Google),rostedt@goodmis.org,1717511812,a891ba9ff769864233e41cb81ad1311b668b1488,d9bbfbd14f58d2955cc7a3efa8ae6d4e09ee5995,"function_graph: Have the instances use their own ftrace_ops for filtering

Allow for instances to have their own ftrace_ops part of the fgraph_ops
that makes the funtion_graph tracer filter on the set_ftrace_filter file
of the instance and not the top instance.

This uses the new ftrace_startup_subops()"," by using graph_ops as the
""manager ops"" that defines the callback function and adds the functions
defined by the filters of the ops for each trace instance. The callback
defined by the manager ops will call the registered fgraph ops that were
added to the fgraph_array.

Co-developed with Masami Hiramatsu:
Link: https://lore.kernel.org/linux-trace-kernel/171509102088.162236.15758883237657317789.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190822.832946261@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],The commit allows function graph tracer instances to use their own ftrace_ops for filtering instead of the top instance.,"function_graph, ftrace_ops, filtering",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['tracepoints like programs']
d9bbfbd14f58d2955cc7a3efa8ae6d4e09ee5995,d9bbfbd14f58d2955cc7a3efa8ae6d4e09ee5995,Steven Rostedt (Google),rostedt@goodmis.org,1717441635,Steven Rostedt (Google),rostedt@goodmis.org,1717511804,4aa5cf216f061348a647b8621c5c533792c95405,5fccc7552ccbc521bad61653ee739b1196b1bc53,"ftrace: Allow subops filtering to be modified

The subops filters use a ""manager"" ops to enable and disable its filters.
The manager ops can handle more than one subops"," and its filter is what
controls what functions get set. Add a ftrace_hash_move_and_update_subops()
function that will update the manager ops when the subops filters change.

Link: https://lore.kernel.org/linux-trace-kernel/20240603190822.673932251@goodmis.org

Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],Enhances ftrace by allowing suboperation filters to be modified through manager operations.,"ftrace, subops, filters",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['tracepoints like programs']
5fccc7552ccbc521bad61653ee739b1196b1bc53,5fccc7552ccbc521bad61653ee739b1196b1bc53,Steven Rostedt (Google),rostedt@goodmis.org,1717441634,Steven Rostedt (Google),rostedt@goodmis.org,1717511798,8fdeb1ddf59ef91e55db01704b43caabfdf02f6a,ab6b84630382914ffcbab59f4913c9a60971d034,"ftrace: Add subops logic to allow one ops to manage many

There are cases where a single system will use a single function callback
to handle multiple users. For example"," to allow function_graph tracer to
have multiple users where each can trace their own set of functions","[' it is\nuseful to only have one ftrace_ops registered to ftrace that will call a\nfunction by the function_graph tracer to handle the multiplexing with the\ndifferent registered  function_graph tracers.\n\nAdd a ""subop_list"" to the ftrace_ops that will hold a list of other\nftrace_ops that the top ftrace_ops will manage.\n\nThe function ftrace_startup_subops() that takes the manager ftrace_ops and\na subop ftrace_ops it will manage. If there are no subops with the\nftrace_ops yet', ' it will copy the ftrace_ops subop filters to the manager\nftrace_ops and register that with ftrace_startup()', ' and adds the subop to\nits subop_list. If the manager ops already has something registered', ' it\nwill then merge the new subop filters with what it has and enable the new\nfunctions that covers all the subops it has.\n\nTo remove a subop', ' ftrace_shutdown_subops() is called which will use the\nsubop_list of the manager ops to rebuild all the functions it needs to\ntrace', ' and update the ftrace records to only call the functions it now has\nregistered. If there are no more functions registered', ' it will then call\nftrace_shutdown() to disable itself completely.\n\nNote', ' it is up to the manager ops callback to always make sure that the\nsubops callbacks are called if its filter matches', ' as there are times in\nthe update where the callback could be calling more functions than those\nthat are currently registered.\n\nThis could be updated to handle other systems other than function_graph', '\nfor example', ' fprobes could use this (but will need an interface to call\nftrace_startup_subops()).\n\nLink: https://lore.kernel.org/linux-trace-kernel/20240603190822.508431129@goodmis.org\n\nCc: Masami Hiramatsu <mhiramat@kernel.org>\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nCc: Florent Revest <revest@chromium.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: bpf <bpf@vger.kernel.org>\nCc: Sven Schnelle <svens@linux.ibm.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Arnaldo Carvalho de Melo <acme@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Alan Maguire <alan.maguire@oracle.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Guo Ren <guoren@kernel.org>\nReviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>\n', '']",Enhances ftrace with subops logic to support multiple users managing their own function callbacks.,"ftrace,subops,callbacks",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.","['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
ab6b84630382914ffcbab59f4913c9a60971d034,ab6b84630382914ffcbab59f4913c9a60971d034,Steven Rostedt (VMware),rostedt@goodmis.org,1717441633,Steven Rostedt (Google),rostedt@goodmis.org,1717511793,dba41090f4d6aaf603e34bffa821d32d69dfb7d4,26dda5631d1bb2f254f4c94aa87ee6c92a89cfdb,"ftrace: Allow ftrace startup flags to exist without dynamic ftrace

Some of the flags for ftrace_startup() may be exposed even when
CONFIG_DYNAMIC_FTRACE is not configured in. This is fine as the difference
between dynamic ftrace and static ftrace is done within the internals of
ftrace itself. No need to have use cases fail to compile because dynamic
ftrace is disabled.

This change is needed to move some of the logic of what is passed to
ftrace_startup() out of the parameters of ftrace_startup().

Link: https://lore.kernel.org/linux-trace-kernel/171509100890.162236.4362350342549122222.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190822.350654104@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",,Enable ftrace startup flags to function without dynamic ftrace configuration.,"ftrace, dynamic, flags",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"[""It's not related to any of the above.""]"
26dda5631d1bb2f254f4c94aa87ee6c92a89cfdb,26dda5631d1bb2f254f4c94aa87ee6c92a89cfdb,Steven Rostedt (VMware),rostedt@goodmis.org,1717441632,Steven Rostedt (Google),rostedt@goodmis.org,1717511788,745c4c9c44cd6c2b5f563f96e818eb0d0f42be5d,37238abe3cb47b8daaa8706c9949f67b2a705cf1,"ftrace: Allow function_graph tracer to be enabled in instances

Now that function graph tracing can handle more than one user"," allow it to
be enabled in the ftrace instances. Note","[' the filtering of the functions is\nstill joined by the top level set_ftrace_filter and friends', ' as well as the\ngraph and nograph files.\n\nCo-developed with Masami Hiramatsu:\nLink: https://lore.kernel.org/linux-trace-kernel/171509099743.162236.1699959255446248163.stgit@devnote2\nLink: https://lore.kernel.org/linux-trace-kernel/20240603190822.190630762@goodmis.org\n\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nCc: Florent Revest <revest@chromium.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: bpf <bpf@vger.kernel.org>\nCc: Sven Schnelle <svens@linux.ibm.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Arnaldo Carvalho de Melo <acme@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Alan Maguire <alan.maguire@oracle.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Guo Ren <guoren@kernel.org>\nReviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>\n', '']",The commit enables function graph tracing for multiple ftrace instances.,"function graph, ftrace, instances",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['tracepoints like programs']
37238abe3cb47b8daaa8706c9949f67b2a705cf1,37238abe3cb47b8daaa8706c9949f67b2a705cf1,Steven Rostedt (VMware),rostedt@goodmis.org,1717441631,Steven Rostedt (Google),rostedt@goodmis.org,1717511782,f8d8a1985cd0ba19fdd2ec2f593bee65e9ca5545,2fbb549983763b2cc32a1ab840fe59cc1822e06d,"ftrace/function_graph: Pass fgraph_ops to function graph callbacks

Pass the fgraph_ops structure to the function graph callbacks. This will
allow callbacks to add a descriptor to a fgraph_ops private field that wil
be added in the future and use it for the callbacks. This will be useful
when more than one callback can be registered to the function graph tracer.

Co-developed with Masami Hiramatsu:
Link: https://lore.kernel.org/linux-trace-kernel/171509098588.162236.4787930115997357578.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190822.035147698@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",,The commit enables passing fgraph_ops to function graph callbacks for enhanced functionality.,"fgraph_ops,function graph,callbacks",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
2fbb549983763b2cc32a1ab840fe59cc1822e06d,2fbb549983763b2cc32a1ab840fe59cc1822e06d,Steven Rostedt (VMware),rostedt@goodmis.org,1717441630,Steven Rostedt (Google),rostedt@goodmis.org,1717511771,38d415e454f3a6ce7969c987d6b263a315d6fc5b,375bb57292f49fa0956cc2739c81749b88e69510,"function_graph: Remove logic around ftrace_graph_entry and return

The function pointers ftrace_graph_entry and ftrace_graph_return are no
longer called via the function_graph tracer. Instead"," an array structure is
now used that will allow for multiple users of the function_graph
infrastructure. The variables are still used by the architecture code for
non dynamic ftrace configs","[' where a test is made against them to see if\nthey point to the default stub function or not. This is how the static\nfunction tracing knows to call into the function graph tracer\ninfrastructure or not.\n\nTwo new stub functions are made. entry_run() and return_run(). The\nftrace_graph_entry and ftrace_graph_return are set to them respectively\nwhen the function graph tracer is enabled', ' and this will trigger the\narchitecture specific function graph code to be executed.\n\nThis also requires checking the global_ops hash for all calls into the\nfunction_graph tracer.\n\nCo-developed with Masami Hiramatsu:\nLink: https://lore.kernel.org/linux-trace-kernel/171509097408.162236.17387844142114638932.stgit@devnote2\nLink: https://lore.kernel.org/linux-trace-kernel/20240603190821.872127216@goodmis.org\n\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nCc: Florent Revest <revest@chromium.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: bpf <bpf@vger.kernel.org>\nCc: Sven Schnelle <svens@linux.ibm.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Arnaldo Carvalho de Melo <acme@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Alan Maguire <alan.maguire@oracle.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Guo Ren <guoren@kernel.org>\nReviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>\n', '']",The commit removes legacy logic for ftrace_graph_entry and ftrace_graph_return in function_graph tracer to support multiple users.,"function_graph,tracer,ftrace",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
375bb57292f49fa0956cc2739c81749b88e69510,375bb57292f49fa0956cc2739c81749b88e69510,Masami Hiramatsu (Google),mhiramat@kernel.org,1717441629,Steven Rostedt (Google),rostedt@goodmis.org,1717511765,11b2ae3d5fd6f9678094207523f36c0cbfea46eb,7aa1eaef9f4282c9acd39588b1fdc9dda7e73f34,"function_graph: Handle tail calls for stack unwinding

For the tail-call"," there would be 2 or more ftrace_ret_stacks on the
ret_stack","[' which records ""return_to_handler"" as the return address except\nfor the last one.  But on the real stack', ' there should be 1 entry because\ntail-call reuses the return address on the stack and jump to the next\nfunction.\n\nIn ftrace_graph_ret_addr() that is used for stack unwinding', ' skip tail\ncalls as a real stack unwinder would do.\n\nLink: https://lore.kernel.org/linux-trace-kernel/171509096221.162236.8806372072523195752.stgit@devnote2\nLink: https://lore.kernel.org/linux-trace-kernel/20240603190821.717065217@goodmis.org\n\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nCc: Florent Revest <revest@chromium.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: bpf <bpf@vger.kernel.org>\nCc: Sven Schnelle <svens@linux.ibm.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Arnaldo Carvalho de Melo <acme@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Alan Maguire <alan.maguire@oracle.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Guo Ren <guoren@kernel.org>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>\n', '']",Improve stack unwinding by handling tail calls in function_graph tracer.,"function_graph,tail calls,stack unwinding",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['tracepoints like programs']
7aa1eaef9f4282c9acd39588b1fdc9dda7e73f34,7aa1eaef9f4282c9acd39588b1fdc9dda7e73f34,Steven Rostedt (VMware),rostedt@goodmis.org,1717441628,Steven Rostedt (Google),rostedt@goodmis.org,1717511758,1a9f7a9b753533c0dfb9463823437ffe87a835ef,518d6804a865772735588c5b2203d6c0c0bf98a9,"function_graph: Allow multiple users to attach to function graph

Allow for multiple users to attach to function graph tracer at the same
time. Only 16 simultaneous users can attach to the tracer. This is because
there's an array that stores the pointers to the attached fgraph_ops. When
a function being traced is entered"," each of the ftrace_ops entryfunc is
called and if it returns non zero","[' its index into the array will be added\nto the shadow stack.\n\nOn exit of the function being traced', ' the shadow stack will contain the\nindexes of the ftrace_ops on the array that want their retfunc to be\ncalled.\n\nBecause a function may sleep for a long time (if a task sleeps itself)', '\nthe return of the function may be literally days later. If the ftrace_ops\nis removed', ' its place on the array is replaced with a ftrace_ops that\ncontains the stub functions and that will be called when the function\nfinally returns.\n\nIf another ftrace_ops is added that happens to get the same index into the\narray', "" its return function may be called. But that's actually the way\nthings current work with the old function graph tracer. If one tracer is\nremoved and another is added"", ' the new one will get the return calls of the\nfunction traced by the previous one', ' thus this is not a regression. This\ncan be fixed by adding a counter to each time the array item is updated and\nsave that on the shadow stack as well', "" such that it won't be called if the\nindex saved does not match the index on the array.\n\nNote"", ' being able to filter functions when both are called is not completely\nhandled yet', "" but that shouldn't be too hard to manage.\n\nCo-developed with Masami Hiramatsu:\nLink: https://lore.kernel.org/linux-trace-kernel/171509096221.162236.8806372072523195752.stgit@devnote2\nLink: https://lore.kernel.org/linux-trace-kernel/20240603190821.555493396@goodmis.org\n\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nCc: Florent Revest <revest@chromium.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: bpf <bpf@vger.kernel.org>\nCc: Sven Schnelle <svens@linux.ibm.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Arnaldo Carvalho de Melo <acme@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Alan Maguire <alan.maguire@oracle.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Guo Ren <guoren@kernel.org>\nReviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>\n"", '']","This commit enables multiple users to attach to the function graph tracer concurrently, with a maximum limit of 16 users.","function_graph,tracer,multiple_users",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['tracepoints like programs']
518d6804a865772735588c5b2203d6c0c0bf98a9,518d6804a865772735588c5b2203d6c0c0bf98a9,Steven Rostedt (VMware),rostedt@goodmis.org,1717441627,Steven Rostedt (Google),rostedt@goodmis.org,1717511753,3fba56bf0d3f9f004670f4dcfe4445f0c82bb0dd,59e5f04e4184181227889663618e01dce676e671,"function_graph: Add an array structure that will allow multiple callbacks

Add an array structure that will eventually allow the function graph tracer
to have up to 16 simultaneous callbacks attached. It's an array of 16
fgraph_ops pointers"," that is assigned when one is registered. On entry of a
function the entry of the first item in the array is called","[' and if it\nreturns zero', ' then the callback returns non zero if it wants the return\ncallback to be called on exit of the function.\n\nThe array will simplify the process of having more than one callback\nattached to the same function', ' as its index into the array can be stored on\nthe shadow stack. We need to only save the index', ' because this will allow\nthe fgraph_ops to be freed before the function returns (which may happen if\nthe function call schedule for a long time).\n\nCo-developed with Masami Hiramatsu:\nLink: https://lore.kernel.org/linux-trace-kernel/171509095075.162236.8272148192748284581.stgit@devnote2\nLink: https://lore.kernel.org/linux-trace-kernel/20240603190821.392113213@goodmis.org\n\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nCc: Florent Revest <revest@chromium.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: bpf <bpf@vger.kernel.org>\nCc: Sven Schnelle <svens@linux.ibm.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Arnaldo Carvalho de Melo <acme@kernel.org>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: Alan Maguire <alan.maguire@oracle.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Guo Ren <guoren@kernel.org>\nReviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>\n', '']",Add array structure for multiple callbacks in function graph tracer.,"array,crafter,function",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['tracepoints like programs']
59e5f04e4184181227889663618e01dce676e671,59e5f04e4184181227889663618e01dce676e671,Steven Rostedt (VMware),rostedt@goodmis.org,1717441626,Steven Rostedt (Google),rostedt@goodmis.org,1717511740,481e60e325affeb762ef9f8214b35aa0771f1d55,42675b723b4842bca7bfb0f209aa9a493a10324a,"fgraph: Use BUILD_BUG_ON() to make sure we have structures divisible by long

Instead of using ""ALIGN()"""," use BUILD_BUG_ON() as the structures should
always be divisible by sizeof(long).

Co-developed with Masami Hiramatsu:
Link: https://lore.kernel.org/linux-trace-kernel/171509093949.162236.14518699447151894536.stgit@devnote2
Link: http://lkml.kernel.org/r/20190524111144.GI2589@hirez.programming.kicks-ass.net
Link: https://lore.kernel.org/linux-trace-kernel/20240603190821.232168933@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Suggested-by: Peter Zijlstra <peterz@infradead.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],The commit replaces ALIGN() with BUILD_BUG_ON() to ensure structures are divisible by long.,"BUILD_BUG_ON, structures, divisible",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['tracepoints like programs']
42675b723b4842bca7bfb0f209aa9a493a10324a,42675b723b4842bca7bfb0f209aa9a493a10324a,Steven Rostedt (VMware),rostedt@goodmis.org,1717441625,Steven Rostedt (Google),rostedt@goodmis.org,1717511709,30ceb20e46c23b7431ab64714c1579a259eb888b,c3f38fa61af77b49866b006939479069cd451173,"function_graph: Convert ret_stack to a series of longs

In order to make it possible to have multiple callbacks registered with the
function_graph tracer"," the retstack needs to be converted from an array of
ftrace_ret_stack structures to an array of longs. This will allow to store
the list of callbacks on the stack for the return side of the functions.

Link: https://lore.kernel.org/linux-trace-kernel/171509092742.162236.4427737821399314856.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190821.073111754@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
",[''],Convert ret_stack from ftrace_ret_stack structures to longs for multi-callback support in function_graph tracer.,"function_graph,ret_stack,longs",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['tracepoints like programs']
49df0019f36798d414e6b913bec30a3a0cd47c70,49df0019f36798d414e6b913bec30a3a0cd47c70,Alexei Starovoitov,ast@kernel.org,1717473163,Alexei Starovoitov,ast@kernel.org,1717473163,355da146e35dbe12ef5a0e4f7a5fbfd35ecf9cba,49784c7979321c49a8055f5c588d24c34a8c55fc 43d50ffb1f7e32865cdd343224659614d8b558b9,"Merge branch 'enable-bpf-programs-to-declare-arrays-of-kptr-bpf_rb_root-and-bpf_list_head'

Kui-Feng Lee says:

====================
Enable BPF programs to declare arrays of kptr", bpf_rb_root,"[' and bpf_list_head.\n\nSome types', ' such as type kptr', ' bpf_rb_root', ' and bpf_list_head', ' are\ntreated in a special way. Previously', ' these types could not be the\ntype of a field in a struct type that is used as the type of a global\nvariable. They could not be the type of a field in a struct type that\nis used as the type of a field in the value type of a map either. They\ncould not even be the type of array elements. This means that they can\nonly be the type of global variables or of direct fields in the value\ntype of a map.\n\nThe patch set aims to enable the use of these specific types in arrays\nand struct fields', ' providing flexibility. It examines the types of\nglobal variables or the value types of maps', ' such as arrays and struct\ntypes', ' recursively to identify these special types and generate field\ninformation for them.\n\nFor example', '\n\n  ...\n  struct task_struct __kptr *ptr[3];\n  ...\n\nit will create 3 instances of ""struct btf_field"" in the ""btf_record"" of\nthe data section.\n\n [...', '\n  btf_field(offset=0x100', ' type=BPF_KPTR_REF)', '\n  btf_field(offset=0x108', ' type=BPF_KPTR_REF)', '\n  btf_field(offset=0x110', ' type=BPF_KPTR_REF)', '\n  ...\n ]\n\nIt creates a record of each of three elements. These three records are\nalmost identical except their offsets.\n\nAnother example is\n\n  ...\n  struct A {\n    ...\n    struct task_struct __kptr *task;\n    struct bpf_rb_root root;\n    ...\n  }\n\n  struct A foo[2];\n\nit will create 4 records.\n\n [...', '\n  btf_field(offset=0x7100', ' type=BPF_KPTR_REF)', '\n  btf_field(offset=0x7108', ' type=BPF_RB_ROOT:)', '\n  btf_field(offset=0x7200', ' type=BPF_KPTR_REF)', '\n  btf_field(offset=0x7208', ' type=BPF_RB_ROOT:)', '\n  ...\n ]\n\nAssuming that the size of an element/struct A is 0x100 and ""foo""\nstarts at 0x7000', ' it includes two kptr records at 0x7100 and 0x7200', '\nand two rbtree root records at 0x7108 and 0x7208.\n\nAll these field information will be flatten', ' for struct types', ' and\nrepeated', ' for arrays.\n---\nChanges from v6:\n\n - Return BPF_KPTR_REF from btf_get_field_type() only if var_type is a\n   struct type.\n\n   - Pass btf and type to btf_get_field_type().\n\nChanges from v5:\n\n - Ensure field->offset values of kptrs are advanced correctly from\n   one nested struct/or array to another.\n\nChanges from v4:\n\n - Return -E2BIG for i == MAX_RESOLVE_DEPTH.\n\nChanges from v3:\n\n - Refactor the common code of btf_find_struct_field() and\n   btf_find_datasec_var().\n\n - Limit the number of levels looking into a struct types.\n\nChanges from v2:\n\n - Support fields in nested struct type.\n\n - Remove nelems and duplicate field information with offset\n   adjustments for arrays.\n\nChanges from v1:\n\n - Move the check of element alignment out of btf_field_cmp() to\n   btf_record_find().\n\n - Change the order of the previous patch 4 ""bpf:\n   check_map_kptr_access() compute the offset from the reg state"" as\n   the patch 7 now.\n\n - Reject BPF_RB_NODE and BPF_LIST_NODE with nelems > 1.\n\n - Rephrase the commit log of the patch ""bpf: check_map_access() with\n   the knowledge of arrays"" to clarify the alignment on elements.\n\nv6: https://lore.kernel.org/all/20240520204018.884515-1-thinker.li@gmail.com/\nv5: https://lore.kernel.org/all/20240510011312.1488046-1-thinker.li@gmail.com/\nv4: https://lore.kernel.org/all/20240508063218.2806447-1-thinker.li@gmail.com/\nv3: https://lore.kernel.org/all/20240501204729.484085-1-thinker.li@gmail.com/\nv2: https://lore.kernel.org/all/20240412210814.603377-1-thinker.li@gmail.com/\nv1: https://lore.kernel.org/bpf/20240410004150.2917641-1-thinker.li@gmail.com/\n\nKui-Feng Lee (9):\n  bpf: Remove unnecessary checks on the offset of btf_field.\n  bpf: Remove unnecessary call to btf_field_type_size().\n  bpf: refactor btf_find_struct_field() and btf_find_datasec_var().\n  bpf: create repeated fields for arrays.\n  bpf: look into the types of the fields of a struct type recursively.\n  bpf: limit the number of levels of a nested struct type.\n  selftests/bpf: Test kptr arrays and kptrs in nested struct fields.\n  selftests/bpf: Test global bpf_rb_root arrays and fields in nested\n    struct types.\n  selftests/bpf: Test global bpf_list_head arrays.\n\n kernel/bpf/btf.c                              | 310 ++++++++++++------\n kernel/bpf/verifier.c                         |   4 +-\n .../selftests/bpf/prog_tests/cpumask.c        |   5 +\n .../selftests/bpf/prog_tests/linked_list.c    |  12 +\n .../testing/selftests/bpf/prog_tests/rbtree.c |  47 +++\n .../selftests/bpf/progs/cpumask_success.c     | 171 ++++++++++\n .../testing/selftests/bpf/progs/linked_list.c |  42 +++\n tools/testing/selftests/bpf/progs/rbtree.c    |  77 +++++\n 8 files changed', ' 558 insertions(+)', ' 110 deletions(-)\n====================\n\nLink: https://lore.kernel.org/r/20240523174202.461236-1-thinker.li@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Enable BPF programs to declare arrays of kptrs using bpf_rb_root and bpf_list_head.,"BPF, arrays, kptrs",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
43d50ffb1f7e32865cdd343224659614d8b558b9,43d50ffb1f7e32865cdd343224659614d8b558b9,Kui-Feng Lee,thinker.li@gmail.com,1716486122,Alexei Starovoitov,ast@kernel.org,1717473163,355da146e35dbe12ef5a0e4f7a5fbfd35ecf9cba,d55c765a9b2d54b53ef86a62d6209e2e5eb62585,"selftests/bpf: Test global bpf_list_head arrays.

Make sure global arrays of bpf_list_heads and fields of bpf_list_heads in
nested struct types work correctly.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-10-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Added tests for global bpf_list_head arrays and nested structures in selftests/bpf.,"bpf_list_head, selftests, arrays",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d55c765a9b2d54b53ef86a62d6209e2e5eb62585,d55c765a9b2d54b53ef86a62d6209e2e5eb62585,Kui-Feng Lee,thinker.li@gmail.com,1716486121,Alexei Starovoitov,ast@kernel.org,1717473162,a5659c1ca934ebb6458f8641f323635b983bbf19,c4c6c3b785a0b1426add15d078da61f899abeaac,"selftests/bpf: Test global bpf_rb_root arrays and fields in nested struct types.

Make sure global arrays of bpf_rb_root and fields of bpf_rb_root in nested
struct types work correctly.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-9-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Add selftests for global bpf_rb_root arrays and nested struct types.,"selftests,bpf_rb_root,nested_struct",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
c4c6c3b785a0b1426add15d078da61f899abeaac,c4c6c3b785a0b1426add15d078da61f899abeaac,Kui-Feng Lee,thinker.li@gmail.com,1716486120,Alexei Starovoitov,ast@kernel.org,1717473162,bdf978cfc78a73d41542df82a794c3b069184d61,f19caf57d80f4432acea61d858d45ce194444389,"selftests/bpf: Test kptr arrays and kptrs in nested struct fields.

Make sure that BPF programs can declare global kptr arrays and kptr fields
in struct types that is the type of a global variable or the type of a
nested descendant field in a global variable.

An array with only one element is special case"," that it treats the element
like a non-array kptr field. Nested arrays are also tested to ensure they
are handled properly.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-8-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Test kptr arrays and nested struct fields in BPF programs.,"kptr,struct,selftests",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
f19caf57d80f4432acea61d858d45ce194444389,f19caf57d80f4432acea61d858d45ce194444389,Kui-Feng Lee,thinker.li@gmail.com,1716486119,Alexei Starovoitov,ast@kernel.org,1717473162,3c3ae664d5c0edac1fedef8d4989d440830107fe,64e8ee814819f21beeeda00d4119221443d77992,"bpf: limit the number of levels of a nested struct type.

Limit the number of levels looking into struct types to avoid running out
of stack space.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-7-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Limit the inspection depth of nested struct types in BPF to prevent stack overflow.,"nested struct, stack space, limit",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
64e8ee814819f21beeeda00d4119221443d77992,64e8ee814819f21beeeda00d4119221443d77992,Kui-Feng Lee,thinker.li@gmail.com,1716486118,Alexei Starovoitov,ast@kernel.org,1717473162,589335220e243aedf7c9d235ba9cb1a52218ea5a,994796c0256c4001633488fd24c3d54691949f8d,"bpf: look into the types of the fields of a struct type recursively.

The verifier has field information for specific special types"," such as
kptr","[' rbtree root', ' and list head. These types are handled\ndifferently. However', ' we did not previously examine the types of fields of\na struct type variable. Field information records were not generated for\nthe kptrs', ' rbtree roots', ' and linked_list heads that are not located at the\noutermost struct type of a variable.\n\nFor example', '\n\n  struct A {\n    struct task_struct __kptr * task;\n  };\n\n  struct B {\n    struct A mem_a;\n  }\n\n  struct B var_b;\n\nIt did not examine ""struct A"" so as not to generate field information for\nthe kptr in ""struct A"" for ""var_b"".\n\nThis patch enables BPF programs to define fields of these special types in\na struct type other than the direct type of a variable or in a struct type\nthat is the type of a field in the value type of a map.\n\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nSigned-off-by: Kui-Feng Lee <thinker.li@gmail.com>\nLink: https://lore.kernel.org/r/20240523174202.461236-6-thinker.li@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit enhances the eBPF verifier to recursively check struct field types.,"verifier, struct, recursive",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
994796c0256c4001633488fd24c3d54691949f8d,994796c0256c4001633488fd24c3d54691949f8d,Kui-Feng Lee,thinker.li@gmail.com,1716486117,Alexei Starovoitov,ast@kernel.org,1717473162,2e419b5ab98ddee8e08aa29fb0fd8d183e02e1d9,a7db0d4f872a869feb7c0201c0fa736c309192d5,"bpf: create repeated fields for arrays.

The verifier uses field information for certain special types"," such as
kptr","[' rbtree root', ' and list head. These types are treated\ndifferently. However', ' we did not previously support these types in\narrays. This update examines arrays and duplicates field information the\nsame number of times as the length of the array if the element type is one\nof the special types.\n\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nSigned-off-by: Kui-Feng Lee <thinker.li@gmail.com>\nLink: https://lore.kernel.org/r/20240523174202.461236-5-thinker.li@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit introduces repeated fields for arrays to enhance the eBPF verifier's handling of special types.,"repeated, arrays, verifier",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
a7db0d4f872a869feb7c0201c0fa736c309192d5,a7db0d4f872a869feb7c0201c0fa736c309192d5,Kui-Feng Lee,thinker.li@gmail.com,1716486116,Alexei Starovoitov,ast@kernel.org,1717473162,18aba24503b94e7955511c90d82608a91854b90e,482f7133791e894b94a57ab3251e03d4c98ea42b,"bpf: refactor btf_find_struct_field() and btf_find_datasec_var().

Move common code of the two functions to btf_find_field_one().

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-4-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Refactored btf_find_struct_field and btf_find_datasec_var into btf_find_field_one for code simplification.,"refactor,btf,functions",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
482f7133791e894b94a57ab3251e03d4c98ea42b,482f7133791e894b94a57ab3251e03d4c98ea42b,Kui-Feng Lee,thinker.li@gmail.com,1716486115,Alexei Starovoitov,ast@kernel.org,1717473162,dd090e2e84e49f85eeca59f47fb231427a559e8c,c95a3be45ad22ee8925d6d1ab531d5ba98216311,"bpf: Remove unnecessary call to btf_field_type_size().

field->size has been initialized by bpf_parse_fields() with the value
returned by btf_field_type_size(). Use it instead of calling
btf_field_type_size() again.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-3-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,The commit removes an unnecessary call to the btf_field_type_size function in the bpf code.,"bpf, btf, field",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
c95a3be45ad22ee8925d6d1ab531d5ba98216311,c95a3be45ad22ee8925d6d1ab531d5ba98216311,Kui-Feng Lee,thinker.li@gmail.com,1716486114,Alexei Starovoitov,ast@kernel.org,1717473162,83dde6f4495c03d8ca07b3a73cbaf98a4c517dbd,49784c7979321c49a8055f5c588d24c34a8c55fc,"bpf: Remove unnecessary checks on the offset of btf_field.

reg_find_field_offset() always return a btf_field with a matching offset
value. Checking the offset of the returned btf_field is unnecessary.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-2-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,The commit removes unnecessary checks on the offset of btf_field returned by reg_find_field_offset.,"offset,btf_field,checks",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
49784c7979321c49a8055f5c588d24c34a8c55fc,49784c7979321c49a8055f5c588d24c34a8c55fc,Geliang Tang,tanggeliang@kylinos.cn,1716447004,Daniel Borkmann,daniel@iogearbox.net,1717435975,795745b38bd3ba2226863dd1862353047fbade66,de1b5ea789dc28066cc8dc634b6825bd6148f38b,"selftests/bpf: Drop duplicate bpf_map_lookup_elem in test_sockmap

bpf_map_lookup_elem is invoked in bpf_prog3() already"," no need to invoke
it again. This patch drops it.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/ea8458462b876ee445173e3effb535fd126137ed.1716446893.git.tanggeliang@kylinos.cn
",[''],Remove duplicate invocation of bpf_map_lookup_elem in test_sockmap function in selftests.,"selftests,sockmap,duplicate",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
de1b5ea789dc28066cc8dc634b6825bd6148f38b,de1b5ea789dc28066cc8dc634b6825bd6148f38b,Geliang Tang,tanggeliang@kylinos.cn,1716447003,Daniel Borkmann,daniel@iogearbox.net,1717435975,8f9bb70b0f3def3a5da1c521521e09af9322bf64,dcb681b659f2a0a546752730c9daa92dc6120d52,"selftests/bpf: Check length of recv in test_sockmap

The value of recv in msg_loop may be negative", like EWOULDBLOCK,"[' so it\'s\nnecessary to check if it is positive before accumulating it to bytes_recvd.\n\nFixes: 16962b2404ac (""bpf: sockmap', ' add selftests"")\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nTested-by: Jakub Sitnicki <jakub@cloudflare.com>\nAcked-by: John Fastabend <john.fastabend@gmail.com>\nLink: https://lore.kernel.org/bpf/5172563f7c7b2a2e953cef02e89fc34664a7b190.1716446893.git.tanggeliang@kylinos.cn\n', '']",Add a check for negative recv length in test_sockmap selftests.,"recv,length,selftests",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
dcb681b659f2a0a546752730c9daa92dc6120d52,dcb681b659f2a0a546752730c9daa92dc6120d52,Geliang Tang,tanggeliang@kylinos.cn,1716447002,Daniel Borkmann,daniel@iogearbox.net,1717435974,00419d332db0b7d43a14c96f995e97d2b5bffaae,467a0c79b5514d7301ae679770380679a8e32668,"selftests/bpf: Fix size of map_fd in test_sockmap

The array size of map_fd[] is 9"," not 8. This patch changes it as a more
general form: ARRAY_SIZE(map_fd).

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/0972529ee01ebf8a8fd2b310bdec90831c94be77.1716446893.git.tanggeliang@kylinos.cn
",[''],Fixed the array size definition of map_fd in selftests/bpf for test_sockmap to use ARRAY_SIZE macro.,"array, map_fd, test_sockmap",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
467a0c79b5514d7301ae679770380679a8e32668,467a0c79b5514d7301ae679770380679a8e32668,Geliang Tang,tanggeliang@kylinos.cn,1716447001,Daniel Borkmann,daniel@iogearbox.net,1717435974,224e364f59fa778004b52221f7184f725633d3f2,24bb90a42633ea47256d4f13289dd3181236e028,"selftests/bpf: Drop prog_fd array in test_sockmap

The program fds can be got by using bpf_program__fd(progs[])"," then
prog_fd becomes useless. This patch drops it.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/9a6335e4d8dbab23c0d8906074457ceddd61e74b.1716446893.git.tanggeliang@kylinos.cn
",[''],The commit removes the unused prog_fd array from the test_sockmap in selftests.,"prog_fd, test_sockmap, bpf_program__fd",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
24bb90a42633ea47256d4f13289dd3181236e028,24bb90a42633ea47256d4f13289dd3181236e028,Geliang Tang,tanggeliang@kylinos.cn,1716447000,Daniel Borkmann,daniel@iogearbox.net,1717435974,263232ab2aa7cc0047a7d6a4b14d764facfb1918,3f32a115f61d31049e3e91d469bca849f712a979,"selftests/bpf: Replace tx_prog_fd with tx_prog in test_sockmap

bpf_program__attach_sockmap() needs to take a parameter of type bpf_program
instead of an fd"," so tx_prog_fd becomes useless. This patch uses a pointer
tx_prog to point to an item in progs[] array.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/23b37f932c547dd1ebfe154bbc0b0e957be21ee6.1716446893.git.tanggeliang@kylinos.cn
",[''],Refactored test_sockmap to use bpf_program pointer instead of file descriptor for attaching programs.,"bpf_program, sockmap, refactor",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
3f32a115f61d31049e3e91d469bca849f712a979,3f32a115f61d31049e3e91d469bca849f712a979,Geliang Tang,tanggeliang@kylinos.cn,1716446999,Daniel Borkmann,daniel@iogearbox.net,1717435974,608a414439e62d5092e74fc0eb487559b864a43f,a9f0ea175948c21640ae1cc145e679db7fc45fa6,"selftests/bpf: Use bpf_link attachments in test_sockmap

Switch attachments to bpf_link using bpf_program__attach_sockmap() instead
of bpf_prog_attach().

This patch adds a new array progs[] to replace prog_fd[] array"," set in
populate_progs() for each program in bpf object.

And another new array links[] to save the attached bpf_link. It is
initalized as NULL in populate_progs","[' set as the return valuses of\nbpf_program__attach_sockmap()', ' and detached by bpf_link__detach().\n\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nTested-by: Jakub Sitnicki <jakub@cloudflare.com>\nAcked-by: John Fastabend <john.fastabend@gmail.com>\nLink: https://lore.kernel.org/bpf/32cf8376a810e2e9c719f8e4cfb97132ed2d1f9c.1716446893.git.tanggeliang@kylinos.cn\n', '']",Use bpf_link attachments in test_sockmap by switching to bpf_program__attach_sockmap.,"bpf_link, attachments, test_sockmap",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
a9f0ea175948c21640ae1cc145e679db7fc45fa6,a9f0ea175948c21640ae1cc145e679db7fc45fa6,Geliang Tang,tanggeliang@kylinos.cn,1716446998,Daniel Borkmann,daniel@iogearbox.net,1717435974,1a23bade9f9769cc349b28e3e7005f8cb455acad,d95ba15b97847f4ae520db83bd98b61d50fb3068,"selftests/bpf: Drop duplicate definition of i in test_sockmap

There's already a definition of i in run_options() at the beginning"," no
need to define a new one in ""if (tx_prog_fd > 0)"" block.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/8d690682330a59361562bca75d6903253d16f312.1716446893.git.tanggeliang@kylinos.cn
",[''],The commit removes a duplicate variable definition in the test_sockmap function of selftests for BPF.,"duplicate, definition, test_sockmap",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d95ba15b97847f4ae520db83bd98b61d50fb3068,d95ba15b97847f4ae520db83bd98b61d50fb3068,Geliang Tang,tanggeliang@kylinos.cn,1716446997,Daniel Borkmann,daniel@iogearbox.net,1717435974,096c6f9f562630a29ba3bfaffad1c61c7772e346,ec1249d3278183d419276b9a7fe73591cd3dd505,"selftests/bpf: Fix tx_prog_fd values in test_sockmap

The values of tx_prog_fd in run_options() should not be 0"," so set it as -1
in else branch","[' and test it using ""if (tx_prog_fd > 0)"" condition', ' not\n""if (tx_prog_fd)"" or ""if (tx_prog_fd >= 0)"".\n\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nTested-by: Jakub Sitnicki <jakub@cloudflare.com>\nAcked-by: John Fastabend <john.fastabend@gmail.com>\nLink: https://lore.kernel.org/bpf/08b20ffc544324d40939efeae93800772a91a58e.1716446893.git.tanggeliang@kylinos.cn\n', '']",Fix incorrect tx_prog_fd values in selftests/bpf test_sockmap.,"selftests,bpf,tx_prog_fd",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
2884dc7d08d98a89d8d65121524bb7533183a63a,2884dc7d08d98a89d8d65121524bb7533183a63a,Cong Wang,cong.wang@bytedance.com,1717352823,Daniel Borkmann,daniel@iogearbox.net,1717431379,2ba0a318481cbdc9dd240af512fc8563635c3354,2317dc2c22cc353b699c7d1db47b2fe91f54055c,"bpf: Fix a potential use-after-free in bpf_link_free()

After commit 1a80dbcb2dba"," bpf_link can be freed by
link->ops->dealloc_deferred","[' but the code still tests and uses\nlink->ops->dealloc afterward', ' which leads to a use-after-free as\nreported by syzbot. Actually', ' one of them should be sufficient', ' so\njust call one of them instead of both. Also add a WARN_ON() in case\nof any problematic implementation.\n\nFixes: 1a80dbcb2dba (""bpf: support deferring bpf_link dealloc to after RCU grace period"")\nReported-by: syzbot+1989ee16d94720836244@syzkaller.appspotmail.com\nSigned-off-by: Cong Wang <cong.wang@bytedance.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Jiri Olsa <jolsa@kernel.org>\nLink: https://lore.kernel.org/bpf/20240602182703.207276-1-xiyou.wangcong@gmail.com\n', '']",Fixes a potential use-after-free issue in bpf_link_free function.,"use-after-free,bpf_link_free,fix",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.","['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2317dc2c22cc353b699c7d1db47b2fe91f54055c,2317dc2c22cc353b699c7d1db47b2fe91f54055c,Thorsten Blum,thorsten.blum@toblux.com,1716977941,Daniel Borkmann,daniel@iogearbox.net,1717427363,3928bdbf9088d489be803b1b6c60d6a7b743922f,7d0b3953f6d832daec10a0d76e2d4db405768a8b,bpf," devmap: Remove unnecessary if check in for loop

The iterator variable dst cannot be NULL and the if check can be removed.
Remove it and fix the following Coccinelle/coccicheck warning reported
by itnull.cocci:

	ERROR: iterator variable bound on line 762 cannot be NULL

Signed-off-by: Thorsten Blum <thorsten.blum@toblux.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Toke Høiland-Jørgensen <toke@redhat.com>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240529101900.103913-2-thorsten.blum@toblux.com
",[''],Remove unnecessary NULL check in bpf devmap iterator variable to fix coccicheck warning.,"devmap, NULL check, coccicheck",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF maps,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
ec1249d3278183d419276b9a7fe73591cd3dd505,ec1249d3278183d419276b9a7fe73591cd3dd505,Jeff Johnson,quic_jjohnson@quicinc.com,1717172923,Daniel Borkmann,daniel@iogearbox.net,1717427021,80a2bd2f8dc7f4667be87782734754c3e27acfe5,ce5249b91e34d81255c00950d415ebd4c3cae8d4,"test_bpf: Add missing MODULE_DESCRIPTION()

make allmodconfig && make W=1 C=1 reports:
WARNING: modpost: missing MODULE_DESCRIPTION() in lib/test_bpf.o

Add the missing invocation of the MODULE_DESCRIPTION() macro.

Signed-off-by: Jeff Johnson <quic_jjohnson@quicinc.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240531-md-lib-test_bpf-v1-1-868e4bd2f9ed@quicinc.com
",,Add missing MODULE_DESCRIPTION() macro to resolve modpost warning in test_bpf module.,"MODULE_DESCRIPTION, test_bpf, warning",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
ce5249b91e34d81255c00950d415ebd4c3cae8d4,ce5249b91e34d81255c00950d415ebd4c3cae8d4,Swan Beaujard,beaujardswan@gmail.com,1717369092,Daniel Borkmann,daniel@iogearbox.net,1717426707,129d4c406f58bd7127d9ded0156229c1a31a265c,a450d36b05fa225b071ce9fbf522544caea06594,"bpftool: Fix typo in MAX_NUM_METRICS macro name

Correct typo in bpftool profiler and change all instances of 'MATRICS' to
'METRICS' in the profiler.bpf.c file.

Signed-off-by: Swan Beaujard <beaujardswan@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Quentin Monnet <qmo@kernel.org>
Link: https://lore.kernel.org/bpf/20240602225812.81171-1-beaujardswan@gmail.com
",,This commit fixes a typo in the MAX_NUM_METRICS macro name in bpftool.,"typo, bpftool, metrics",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The bpftool utility,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
a450d36b05fa225b071ce9fbf522544caea06594,a450d36b05fa225b071ce9fbf522544caea06594,Dr. David Alan Gilbert,linux@treblig.org,1717371672,Daniel Borkmann,daniel@iogearbox.net,1717426386,e5ff27edc4525303d09158ebca457f12b6eb08c0,3f67639d8e582c89c79549c619b22a00dd330e4e,"selftests/bpf: Remove unused struct 'libcap'

'libcap' is unused since commit b1c2768a82b9 (""bpf: selftests: Remove libcap
usage from test_verifier""). Remove it.

Signed-off-by: Dr. David Alan Gilbert <linux@treblig.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240602234112.225107-4-linux@treblig.org
",,This commit removes the unused struct 'libcap' from selftests/bpf in Linux eBPF.,"selftests,bpf,libcap",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
3f67639d8e582c89c79549c619b22a00dd330e4e,3f67639d8e582c89c79549c619b22a00dd330e4e,Dr. David Alan Gilbert,linux@treblig.org,1717371671,Daniel Borkmann,daniel@iogearbox.net,1717426377,f0e56881e1fda5238562d282fcc4f1f04a8a29d2,dfa7c9ffa607235119e029b70ced72f29059f8f3,"selftests/bpf: Remove unused 'key_t' structs

'key_t' is unused in a couple of files since the original commit 60dd49ea6539
(""selftests/bpf: Add test for bpf array map iterators""). Remove it.

Signed-off-by: Dr. David Alan Gilbert <linux@treblig.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240602234112.225107-3-linux@treblig.org
",,Remove unused 'key_t' structs in selftests/bpf related files.,"remove, key_t, selftests",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
dfa7c9ffa607235119e029b70ced72f29059f8f3,dfa7c9ffa607235119e029b70ced72f29059f8f3,Dr. David Alan Gilbert,linux@treblig.org,1717371670,Daniel Borkmann,daniel@iogearbox.net,1717426362,991ac90a028c0d8746c86ecdb5bdce7c46f50965,96a27ee76f0e95b56f94b6902da7a5ebef372612,"selftests/bpf: Remove unused struct 'scale_test_def'

'scale_test_def' is unused since commit 3762a39ce85f (""selftests/bpf: Split out
bpf_verif_scale selftests into multiple tests""). Remove it.

Signed-off-by: Dr. David Alan Gilbert <linux@treblig.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240602234112.225107-2-linux@treblig.org
",,The commit removes an unused struct 'scale_test_def' from selftests/bpf.,"unused, struct, selftests",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
96a27ee76f0e95b56f94b6902da7a5ebef372612,96a27ee76f0e95b56f94b6902da7a5ebef372612,Xiao Wang,xiao.w.wang@intel.com,1716537343,Daniel Borkmann,daniel@iogearbox.net,1717425923,24657fa8ed9ffa3b3c22cfd1503a43d34b51bd27,531876c80004ecff7bfdbd8ba6c6b48835ef5e22,riscv," bpf: Introduce shift add helper with Zba optimization

Zba extension is very useful for generating addresses that index into array
of basic data types. This patch introduces sh2add and sh3add helpers for
RV32 and RV64 respectively","[' to accelerate addressing for array of unsigned\nlong data.\n\nSigned-off-by: Xiao Wang <xiao.w.wang@intel.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Björn Töpel <bjorn@kernel.org>\nLink: https://lore.kernel.org/bpf/20240524075543.4050464-3-xiao.w.wang@intel.com\n', '']",Introduce sh2add and sh3add helpers for RISC-V with Zba optimization for address generation.,"RISC-V, helpers, optimization",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
83814698cf48ce3aadc5d88a3f577f04482ff92a,83814698cf48ce3aadc5d88a3f577f04482ff92a,Linus Torvalds,torvalds@linux-foundation.org,1717288475,Linus Torvalds,torvalds@linux-foundation.org,1717288475,b35bbbdffe75f446f042aab69e752202789fcd44,54bec8ed5732339438271d07376890454fa58046 be2fc65d66e0406cc9d39d40becaecdf4ee765f3,"Merge tag 'powerpc-6.10-2' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux

Pull powerpc fixes from Michael Ellerman:

 - Enforce full ordering for ATOMIC operations with BPF_FETCH

 - Fix uaccess build errors seen with GCC 13/14

 - Fix build errors on ppc32 due to ARCH_HAS_KERNEL_FPU_SUPPORT

 - Drop error message from lparcfg guest name lookup

Thanks to Christophe Leroy", Guenter Roeck,"[' Nathan Lynch', ' Naveen N Rao', '\nPuranjay Mohan', "" and Samuel Holland.\n\n* tag 'powerpc-6.10-2' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux:\n  powerpc: Limit ARCH_HAS_KERNEL_FPU_SUPPORT to PPC64\n  powerpc/uaccess: Use YZ asm constraint for ld\n  powerpc/uaccess: Fix build errors seen with GCC 13/14\n  powerpc/pseries/lparcfg: drop error message from guest name lookup\n  powerpc/bpf: enforce full ordering for ATOMIC operations with BPF_FETCH\n"", '']",Merges powerpc-related fixes including ATOMIC operations ordering and build error corrections.,"powerpc, atomic, build",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
531876c80004ecff7bfdbd8ba6c6b48835ef5e22,531876c80004ecff7bfdbd8ba6c6b48835ef5e22,Andrii Nakryiko,andrii@kernel.org,1717021959,Alexei Starovoitov,ast@kernel.org,1717212955,2155c4d8b9eae681b2ac8081c12d43ce80c7c6e5,3f8fde319524411b96badee3c96f35831300388a,"libbpf: keep FD_CLOEXEC flag when dup()'ing FD

Make sure to preserve and/or enforce FD_CLOEXEC flag on duped FDs.
Use dup3() with O_CLOEXEC flag for that.

Without this fix libbpf effectively clears FD_CLOEXEC flag on each of BPF
map/prog FD"," which is definitely not the right or expected behavior.

Reported-by: Lennart Poettering <lennart@poettering.net>
Fixes: bc308d011ab8 (""libbpf: call dup2() syscall directly"")
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/r/20240529223239.504241-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Fixes FD_CLOEXEC flag handling in libbpf by using dup3().,"FD_CLOEXEC, libbpf, dup3",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
7d0b3953f6d832daec10a0d76e2d4db405768a8b,7d0b3953f6d832daec10a0d76e2d4db405768a8b,Andrii Nakryiko,andrii@kernel.org,1717024332,Alexei Starovoitov,ast@kernel.org,1717192611,00bb24b6c4a1d0d8ee02f8072535e7fb3a7dd22e,aeb8fe0283d4d3b0f27a87c5f5c938e7324f7d8f,"libbpf: don't close(-1) in multi-uprobe feature detector

Guard close(link_fd) with extra link_fd >= 0 check to prevent close(-1).

Detected by Coverity static analysis.

Fixes: 04d939a2ab22 (""libbpf: detect broken PID filtering logic for multi-uprobe"")
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/r/20240529231212.768828-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Guard added to ensure link_fd >= 0 before calling close to prevent errors in libbpf.,"libbpf, close, fix",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,['kprobe/uprobe/ftrace like programs']
aeb8fe0283d4d3b0f27a87c5f5c938e7324f7d8f,aeb8fe0283d4d3b0f27a87c5f5c938e7324f7d8f,Jiri Olsa,jolsa@kernel.org,1717184700,Alexei Starovoitov,ast@kernel.org,1717192488,201b1e04eaab996d844cc22683aecb263ef35d75,62da3acd28955e7299babebdfcb14243b789e773,"bpf: Fix bpf_session_cookie BTF_ID in special_kfunc_set list

The bpf_session_cookie is unavailable for !CONFIG_FPROBE as reported
by Sebastian [1].

To fix that we remove CONFIG_FPROBE ifdef for session kfuncs"," which
is fine","[' because there\'s filter for session programs.\n\nThen based on bpf_trace.o dependency:\n  obj-$(CONFIG_BPF_EVENTS) += bpf_trace.o\n\nwe add bpf_session_cookie BTF_ID in special_kfunc_set list dependency\non CONFIG_BPF_EVENTS.\n\n[1] https://lore.kernel.org/bpf/20240531071557.MvfIqkn7@linutronix.de/T/#m71c6d5ec71db2967288cb79acedc15cc5dbfeec5\nReported-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>\nTested-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>\nSuggested-by: Alexei Starovoitov <ast@kernel.org>\nFixes: 5c919acef8514 (""bpf: Add support for kprobe session cookie"")\nSigned-off-by: Jiri Olsa <jolsa@kernel.org>\nLink: https://lore.kernel.org/r/20240531194500.2967187-1-jolsa@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fixes bpf_session_cookie BTF_ID availability issue by removing CONFIG_FPROBE dependency for session kfuncs.,"bpf_session_cookie, BTF_ID, CONFIG_FPROBE",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
62da3acd28955e7299babebdfcb14243b789e773,62da3acd28955e7299babebdfcb14243b789e773,Andrii Nakryiko,andrii@kernel.org,1716935538,Alexei Starovoitov,ast@kernel.org,1717192465,4b164bb3732c7c48fb5b9770fc7be6783d306546,d8ec19857b095b39d114ae299713bd8ea6c1e66a,"selftests/bpf: fix inet_csk_accept prototype in test_sk_storage_tracing.c

Recent kernel change ([0]) changed inet_csk_accept() prototype. Adapt
progs/test_sk_storage_tracing.c to take that into account.

  [0] 92ef0fd55ac8 (""net: change proto and proto_ops accept type"")

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240528223218.3445297-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Fix inet_csk_accept prototype in test_sk_storage_tracing.c due to recent kernel change.,"selftests,bpf,inet_csk_accept",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tracepoints like programs']
bba1f6758a9ec90c1adac5dcf78f8a15f1bad65b,bba1f6758a9ec90c1adac5dcf78f8a15f1bad65b,Al Viro,viro@zeniv.linux.org.uk,1717127906,Al Viro,viro@zeniv.linux.org.uk,1717127906,47f2857d30e241862f7c8acb5c41b83382c5c93d,b4cf5fc01ce83e5c0bcf3dbb9f929428646b9098,"lirc: rc_dev_get_from_fd(): fix file leak

missing fdput() on a failure exit

Fixes: 6a9d552483d50 ""media: rc: bpf attach/detach requires write permission"" # v6.9
Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
",,Fixes a file descriptor leak in lirc's rc_dev_get_from_fd() function by ensuring fdput() is called on failure.,"file leak, lirc, fdput",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
3f8fde319524411b96badee3c96f35831300388a,3f8fde319524411b96badee3c96f35831300388a,Martin KaFai Lau,martin.lau@kernel.org,1717090493,Martin KaFai Lau,martin.lau@kernel.org,1717108454,c30297f679e7bddf7ce822b59147a4b587158c41,46253c4ae96162a840ad65c1394de63796d7798a d14c1fac0c9722c4ec79589921c9e798601ca9d5,"Merge branch 'Notify user space when a struct_ops object is detached/unregistered'

Kui-Feng Lee says:

====================
The subsystems managing struct_ops objects may need to detach a
struct_ops object due to errors or other reasons. It would be useful
to notify user space programs so that error recovery or logging can be
carried out.

This patch set enables the detach feature for struct_ops links and
send an event to epoll when a link is detached.  Subsystems could call
link->ops->detach() to detach a link and notify user space programs
through epoll.

The signatures of callback functions in ""struct bpf_struct_ops"" have
been changed as well to pass an extra link argument to
subsystems. Subsystems could detach the links received from reg() and
update() callbacks if there is. This also provides a way that
subsystems can distinguish registrations for an object that has been
registered multiple times for several links.

However"," bpf struct_ops maps without BPF_F_LINK have no any link.
Subsystems will receive NULL link pointer for this case.
---
Changes from v6:

 - Fix the missing header at patch 5.

 - Move RCU_INIT_POINTER() back to its original position.

Changes from v5:

 - Change the commit title of the patch for bpftool.

Changes from v4:

 - Change error code for bpf_struct_ops_map_link_update()

 - Always return 0 for bpf_struct_ops_map_link_detach()

 - Hold update_mutex in bpf_struct_ops_link_create()

 - Add a separated instance of file_operations for links supporting
    poll.

 - Fix bpftool for bpf_link_fops_poll.

Changes from v3:

 - Add a comment to explain why holding update_mutex is not necessary
    in bpf_struct_ops_link_create()

 - Use rcu_access_pointer() in bpf_struct_ops_map_link_poll().

Changes from v2:

 - Rephrased commit logs and comments.

 - Addressed some mistakes from patch splitting.

 - Replace mutex with spinlock in bpf_testmod.c to address lockdep
    Splat and simplify the implementation.

 - Fix an argument passing to rcu_dereference_protected().

Changes from v1:

 - Pass a link to reg","[' unreg', ' and update callbacks.\n\n - Provide a function to detach a link from underlying subsystems.\n\n - Add a kfunc to mimic detachments from subsystems', ' and provide a\n    flexible way to control when to do detachments.\n\n - Add two tests to detach a link from the subsystem after the refcount\n    of the link drops to zero.\n\nv6: https://lore.kernel.org/bpf/20240524223036.318800-1-thinker.li@gmail.com/\nv5: https://lore.kernel.org/all/20240523230848.2022072-1-thinker.li@gmail.com/\nv4: https://lore.kernel.org/all/20240521225121.770930-1-thinker.li@gmail.com/\nv3: https://lore.kernel.org/all/20240510002942.1253354-1-thinker.li@gmail.com/\nv2: https://lore.kernel.org/all/20240507055600.2382627-1-thinker.li@gmail.com/\nv1: https://lore.kernel.org/all/20240429213609.487820-1-thinker.li@gmail.com/\n====================\n\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Implement notification for user space when struct_ops objects are detached or unregistered using epoll.,"struct_ops, detach, epoll",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d14c1fac0c9722c4ec79589921c9e798601ca9d5,d14c1fac0c9722c4ec79589921c9e798601ca9d5,Kui-Feng Lee,thinker.li@gmail.com,1717052386,Martin KaFai Lau,martin.lau@kernel.org,1717108454,c30297f679e7bddf7ce822b59147a4b587158c41,1a4b858b6a045828de1b536cfab7819c50864ed6,"bpftool: Change pid_iter.bpf.c to comply with the change of bpf_link_fops.

To support epoll", a new instance of file_operations,"[' bpf_link_fops_poll', '\nhas been added for links that support epoll. The pid_iter.bpf.c checks\nf_ops for links and other BPF objects. The check should fail for struct_ops\nlinks without this patch.\n\nAcked-by: Quentin Monnet <qmo@kernel.org>\nSigned-off-by: Kui-Feng Lee <thinker.li@gmail.com>\nLink: https://lore.kernel.org/r/20240530065946.979330-9-thinker.li@gmail.com\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Update bpftool's pid_iter.bpf.c to align with changes in bpf_link_fops for epoll support.,"bpftool,bpf_link,epoll",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The bpftool utility,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
1a4b858b6a045828de1b536cfab7819c50864ed6,1a4b858b6a045828de1b536cfab7819c50864ed6,Kui-Feng Lee,thinker.li@gmail.com,1717052383,Martin KaFai Lau,martin.lau@kernel.org,1717108454,f53330aaf10aa8fd2acce185f5fc2745fe236e3c,67c3e8353f45c27800eecc46e00e8272f063f7d1,"selftests/bpf: test struct_ops with epoll

Verify whether a user space program is informed through epoll with EPOLLHUP
when a struct_ops object is detached.

The BPF code in selftests/bpf/progs/struct_ops_module.c has become
complex. Therefore"," struct_ops_detach.c has been added to segregate the BPF
code for detachment tests from the BPF code for other tests based on the
recommendation of Andrii Nakryiko.

Suggested-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240530065946.979330-6-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],Tests have been added to verify epoll notifications for struct_ops detachment in selftests.,"epoll, struct_ops, detachment",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
67c3e8353f45c27800eecc46e00e8272f063f7d1,67c3e8353f45c27800eecc46e00e8272f063f7d1,Kui-Feng Lee,thinker.li@gmail.com,1717052382,Martin KaFai Lau,martin.lau@kernel.org,1717108453,93bf01e455328e537e1d9e441164be4264219ed2,1adddc97aa44c8783f9f0276ea70854d56f9f6df,"bpf: export bpf_link_inc_not_zero.

bpf_link_inc_not_zero() will be used by kernel modules.  We will use it in
bpf_testmod.c later.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240530065946.979330-5-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,The commit exports the function bpf_link_inc_not_zero for use by kernel modules.,"export,bpf_link,kernel",It's a new feature.,"Simple, can be used without much configuration. For example, a simple helper function.","The attach events and bpf link. e.g. perf events, tracepoints, etc.","['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
1adddc97aa44c8783f9f0276ea70854d56f9f6df,1adddc97aa44c8783f9f0276ea70854d56f9f6df,Kui-Feng Lee,thinker.li@gmail.com,1717052381,Martin KaFai Lau,martin.lau@kernel.org,1717108453,9bf857f946cbe8a3c1cdb08f759f981bb11d8f09,6fb2544ea1493f52e50b753604791c01bd2cf897,"bpf: support epoll from bpf struct_ops links.

Add epoll support to bpf struct_ops links to trigger EPOLLHUP event upon
detachment.

This patch implements the ""poll"" of the ""struct file_operations"" for BPF
links and introduces a new ""poll"" operator in the ""struct bpf_link_ops"". By
implementing ""poll"" of ""struct bpf_link_ops"" for the links of struct_ops","
the file descriptor of a struct_ops link can be added to an epoll file
descriptor to receive EPOLLHUP events.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240530065946.979330-4-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],This commit adds epoll support to bpf struct_ops links to handle EPOLLHUP events.,"epoll, struct_ops, EPOLLHUP",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.","['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
6fb2544ea1493f52e50b753604791c01bd2cf897,6fb2544ea1493f52e50b753604791c01bd2cf897,Kui-Feng Lee,thinker.li@gmail.com,1717052380,Martin KaFai Lau,martin.lau@kernel.org,1717108453,0876de2cb261e1fcf94fdb11672018e99e065b22,73287fe228721b05690e671adbcccc6cf5435be6,"bpf: enable detaching links of struct_ops objects.

Implement the detach callback in bpf_link_ops for struct_ops so that user
programs can detach a struct_ops link. The subsystems that struct_ops
objects are registered to can also use this callback to detach the links
being passed to them.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240530065946.979330-3-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Implemented the detach callback in bpf_link_ops to enable detaching links of struct_ops objects.,"detach, struct_ops, bpf_link_ops",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.","['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
73287fe228721b05690e671adbcccc6cf5435be6,73287fe228721b05690e671adbcccc6cf5435be6,Kui-Feng Lee,thinker.li@gmail.com,1717052379,Martin KaFai Lau,martin.lau@kernel.org,1717108453,79813d3b5556ae05d70eb6794fc8024294db4ca3,46253c4ae96162a840ad65c1394de63796d7798a,"bpf: pass bpf_struct_ops_link to callbacks in bpf_struct_ops.

Pass an additional pointer of bpf_struct_ops_link to callback function reg","
unreg","[' and update provided by subsystems defined in bpf_struct_ops. A\nbpf_struct_ops_map can be registered for multiple links. Passing a pointer\nof bpf_struct_ops_link helps subsystems to distinguish them.\n\nThis pointer will be used in the later patches to let the subsystem\ninitiate a detachment on a link that was registered to it previously.\n\nSigned-off-by: Kui-Feng Lee <thinker.li@gmail.com>\nLink: https://lore.kernel.org/r/20240530065946.979330-2-thinker.li@gmail.com\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",The commit passes an additional pointer of bpf_struct_ops_link to callback functions in bpf_struct_ops.,"bpf_struct_ops, callbacks, pointer",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
46253c4ae96162a840ad65c1394de63796d7798a,46253c4ae96162a840ad65c1394de63796d7798a,Jakub Sitnicki,jakub@cloudflare.com,1716365376,Andrii Nakryiko,andrii@kernel.org,1717105337,98bfab486b5aafec09ad9f13464fabcec8de480b,f088cabffcb646b559055464bb5fa79206752f07,"selftests/bpf: use section names understood by libbpf in test_sockmap

libbpf can deduce program type and attach type from the ELF section name.
We don't need to pass it out-of-band if we switch to libbpf convention [1].

[1] https://docs.kernel.org/bpf/libbpf/program_types.html

Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240522080936.2475833-1-jakub@cloudflare.com
",,Update selftests to use libbpf-convention section names for program type deduction in test_sockmap.,"selftests, libbpf, section names",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
af752016340021d433a962063067e819dba889b1,af752016340021d433a962063067e819dba889b1,Ian Rogers,irogers@google.com,1716583947,Namhyung Kim,namhyung@kernel.org,1717088757,4cfbd4d243d26cffcf9955d15c72f3ad2d278805,d92aa899fe0a66350303a1986d6dc7ec4b3a1ea7,"perf top: Allow filters on events

Allow filters to be added to perf top events. One use is to workaround
issues with:
```
$ perf top --uid=""$(id -u)""
```
which tries to scan /proc find processes belonging to the uid and can
fail in such a pid terminates between the scan and the
perf_event_open reporting:
```
Error:
The sys_perf_event_open() syscall returned with 3 (No such process) for event (cycles:P).
/bin/dmesg | grep -i perf may provide additional information.
```
A similar filter:
```
$ perf top -e cycles:P --filter ""uid == $(id -u)""
```
doesn't fail this way.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: bpf@vger.kernel.org
Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: https://lore.kernel.org/r/20240524205227.244375-4-irogers@google.com
",,The commit adds filters to Perf top events to address issues caused by terminated processes.,"filters, events, perf",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
d92aa899fe0a66350303a1986d6dc7ec4b3a1ea7,d92aa899fe0a66350303a1986d6dc7ec4b3a1ea7,Ian Rogers,irogers@google.com,1716583946,Namhyung Kim,namhyung@kernel.org,1717088757,a57346e02167583943c079105dfa62e3c33d7fb9,63b9cbd7941aa9ec5cb61567042176c4ce04b020,"perf bpf filter: Add uid and gid terms

Allow the BPF filter to use the uid and gid terms determined by the
bpf_get_current_uid_gid BPF helper. For example"," the following will
record the cpu-clock event system wide discarding samples that don't
belong to the current user.

$ perf record -e cpu-clock --filter ""uid == $(id -u)"" -a sleep 0.1

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: bpf@vger.kernel.org
Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: https://lore.kernel.org/r/20240524205227.244375-3-irogers@google.com
",[''],This commit adds uid and gid filtering capability to the perf BPF filter using bpf_get_current_uid_gid.,"uid,gid,filter",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['tracepoints like programs']
63b9cbd7941aa9ec5cb61567042176c4ce04b020,63b9cbd7941aa9ec5cb61567042176c4ce04b020,Ian Rogers,irogers@google.com,1716583945,Namhyung Kim,namhyung@kernel.org,1717088757,5c1e7e12fde31b93d663a77f7af56ac11b99cf6e,d163d60258c755845cbc9cfe0e45fca71e649488,"perf bpf filter: Give terms their own enum

Give the term types their own enum so that additional terms can be
added that don't correspond to a PERF_SAMPLE_xx flag. The term values
are numerically ascending rather than bit field positions"," this means
they need translating to a PERF_SAMPLE_xx bit field in certain places
using a shift.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: bpf@vger.kernel.org
Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: https://lore.kernel.org/r/20240524205227.244375-2-irogers@google.com
",[''],Refactor perf BPF filter to assign unique enums to term types for expansion beyond PERF_SAMPLE_xx flags.,"perf,BPF,enum",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['profile like programs']
d8ec19857b095b39d114ae299713bd8ea6c1e66a,d8ec19857b095b39d114ae299713bd8ea6c1e66a,Linus Torvalds,torvalds@linux-foundation.org,1717083184,Linus Torvalds,torvalds@linux-foundation.org,1717083184,57a75bbcf7ef6e671208c61e35ae570ba51b3359,4a4be1ad3a6efea16c56615f31117590fd881358 13c7c941e72908b8cce5a84b45a7b5e485ca12ed,"Merge tag 'net-6.10-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 ""Including fixes from bpf and netfilter.

  Current release - regressions:

   - gro: initialize network_offset in network layer

   - tcp: reduce accepted window in NEW_SYN_RECV state

  Current release - new code bugs:

   - eth: mlx5e: do not use ptp structure for tx ts stats when not
     initialized

   - eth: ice: check for unregistering correct number of devlink params

  Previous releases - regressions:

   - bpf: Allow delete from sockmap/sockhash only if update is allowed

   - sched: taprio: extend minimum interval restriction to entire cycle
     too

   - netfilter: ipset: add list flush to cancel_gc

   - ipv4: fix address dump when IPv4 is disabled on an interface

   - sock_map: avoid race between sock_map_close and sk_psock_put

   - eth: mlx5: use mlx5_ipsec_rx_status_destroy to correctly delete
     status rules

  Previous releases - always broken:

   - core: fix __dst_negative_advice() race

   - bpf:
       - fix multi-uprobe PID filtering logic
       - fix pkt_type override upon netkit pass verdict

   - netfilter: tproxy: bail out if IP has been disabled on the device

   - af_unix: annotate data-race around unix_sk(sk)->addr

   - eth: mlx5e: fix UDP GSO for encapsulated packets

   - eth: idpf: don't enable NAPI and interrupts prior to allocating Rx
     buffers

   - eth: i40e: fully suspend and resume IO operations in EEH case

   - eth: octeontx2-pf: free send queue buffers incase of leaf to inner

   - eth: ipvlan: dont Use skb->sk in ipvlan_process_v{4","6}_outbound""

* tag 'net-6.10-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (69 commits)
  netdev: add qstat for csum complete
  ipvlan: Dont Use skb->sk in ipvlan_process_v{4","['6}_outbound\n  net: ena: Fix redundant device NUMA node override\n  ice: check for unregistering correct number of devlink params\n  ice: fix 200G PHY types to link speed mapping\n  i40e: Fully suspend and resume IO operations in EEH case\n  i40e: factoring out i40e_suspend/i40e_resume\n  e1000e: move force SMBUS near the end of enable_ulp function\n  net: dsa: microchip: fix RGMII error in KSZ DSA driver\n  ipv4: correctly iterate over the target netns in inet_dump_ifaddr()\n  net: fix __dst_negative_advice() race\n  nfc/nci: Add the inconsistency check between the input data length and count\n  MAINTAINERS: dwmac: starfive: update Maintainer\n  net/sched: taprio: extend minimum interval restriction to entire cycle too\n  net/sched: taprio: make q->picos_per_byte available to fill_sched_entry()\n  netfilter: nft_fib: allow from forward/input without iif selector\n  netfilter: tproxy: bail out if IP has been disabled on the device\n  netfilter: nft_payload: skbuff vlan metadata mangle support\n  net: ti: icssg-prueth: Fix start counter for ft1 filter\n  sock_map: avoid race between sock_map_close and sk_psock_put\n  ...\n', '']",This commit merges networking fixes addressing regressions and bugs for the current and previous Linux kernel releases.,"networking, bugs, bpf",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
f088cabffcb646b559055464bb5fa79206752f07,f088cabffcb646b559055464bb5fa79206752f07,Andrii Nakryiko,andrii@kernel.org,1717023708,Andrii Nakryiko,andrii@kernel.org,1717023708,a7fa5ceb4f4fb94fd757e1c64161aea51fda867f,fbe3e8473f391adbf67eb0f317305fe62c66096c 6ba7acdb93b4ecb554d5838fca3f5f0fcf9fff14,"Merge branch 'bpf-add-a-generic-bits-iterator'

Yafang Shao says:

====================
bpf: Add a generic bits iterator

Three new kfuncs", namely bpf_iter_bits_{new,"['next', 'destroy}', ' have been\nadded for the new bpf_iter_bits functionality. These kfuncs enable the\niteration of the bits from a given address and a given number of bits.\n\n- bpf_iter_bits_new\n  Initialize a new bits iterator for a given memory area. Due to the\n  limitation of bpf memalloc', ' the max number of bits to be iterated\n  over is (4096 * 8).\n- bpf_iter_bits_next\n  Get the next bit in a bpf_iter_bits\n- bpf_iter_bits_destroy\n  Destroy a bpf_iter_bits\n\nThe bits iterator can be used in any context and on any address.\n\nChanges:\n- v7->v8:\n  Refine the interface to avoid dealing with endianness (Andrii)\n- v6->v7:\n  Fix endianness error for non-long-aligned data (Andrii)\n- v5->v6:\n  Add positive tests (Andrii)\n- v4->v5:\n  Simplify test cases (Andrii)\n- v3->v4:\n  - Fix endianness error on s390x (Andrii)\n  - zero-initialize kit->bits_copy and zero out nr_bits (Andrii)\n- v2->v3:\n  Optimization for u64/u32 mask (Andrii)\n- v1->v2:\n  Simplify the CPU number verification code to avoid the failure on s390x\n  (Eduard)\n- bpf: Add bpf_iter_cpumask\n  https://lwn.net/Articles/961104/\n- bpf: Add new bpf helper bpf_for_each_cpu\n  https://lwn.net/Articles/939939/\n====================\n\nLink: https://lore.kernel.org/r/20240517023034.48138-1-laoar.shao@gmail.com\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\n', '']",Add a generic bits iterator with new kfuncs to the BPF subsystem.,"generic, bits, iterator",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
6ba7acdb93b4ecb554d5838fca3f5f0fcf9fff14,6ba7acdb93b4ecb554d5838fca3f5f0fcf9fff14,Yafang Shao,laoar.shao@gmail.com,1715913034,Andrii Nakryiko,andrii@kernel.org,1717023708,a7fa5ceb4f4fb94fd757e1c64161aea51fda867f,4665415975b0827e9646cab91c61d02a6b364d59,"selftests/bpf: Add selftest for bits iter

Add test cases for the bits iter:

- Positive cases
  - Bit mask representing a single word (8-byte unit)
  - Bit mask representing data spanning more than one word
  - The index of the set bit

- Nagative cases
  - bpf_iter_bits_destroy() is required after calling
    bpf_iter_bits_new()
  - bpf_iter_bits_destroy() can only destroy an initialized iter
  - bpf_iter_bits_next() must use an initialized iter
  - Bit mask representing zero words
  - Bit mask representing fewer words than expected
  - Case for ENOMEM
  - Case for NULL pointer

Signed-off-by: Yafang Shao <laoar.shao@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240517023034.48138-3-laoar.shao@gmail.com
",,Add selftests for bits iterator handling various positive and negative cases in the BPF environment.,"selftests,bits iterator,test cases",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
4665415975b0827e9646cab91c61d02a6b364d59,4665415975b0827e9646cab91c61d02a6b364d59,Yafang Shao,laoar.shao@gmail.com,1715913033,Andrii Nakryiko,andrii@kernel.org,1717023707,9b717740936f9082b47ef0e0209816dc8de26658,fbe3e8473f391adbf67eb0f317305fe62c66096c,"bpf: Add bits iterator

Add three new kfuncs for the bits iterator:
- bpf_iter_bits_new
  Initialize a new bits iterator for a given memory area. Due to the
  limitation of bpf memalloc"," the max number of words (8-byte units) that
  can be iterated over is limited to (4096 / 8).
- bpf_iter_bits_next
  Get the next bit in a bpf_iter_bits
- bpf_iter_bits_destroy
  Destroy a bpf_iter_bits

The bits iterator facilitates the iteration of the bits of a memory area","['\nsuch as cpumask. It can be used in any context and on any address.\n\nSigned-off-by: Yafang Shao <laoar.shao@gmail.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240517023034.48138-2-laoar.shao@gmail.com\n', '']",The commit introduces three new kernel functions for bits iteration within a memory area using a bits iterator.,"bits, iterator, kfuncs",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,['other']
b1e7cee96127468c2483cf10c2899c9b5cf79bf8,b1e7cee96127468c2483cf10c2899c9b5cf79bf8,Puranjay Mohan,puranjay@kernel.org,1715594568,Michael Ellerman,mpe@ellerman.id.au,1716984762,62e34ecc27389af48f377230d56a90a52b6686f7,1613e604df0cd359cf2a7fbd9be7a0bcfacfabd0,"powerpc/bpf: enforce full ordering for ATOMIC operations with BPF_FETCH

The Linux Kernel Memory Model [1][2] requires RMW operations that have a
return value to be fully ordered.

BPF atomic operations with BPF_FETCH (including BPF_XCHG and
BPF_CMPXCHG) return a value back so they need to be JITed to fully
ordered operations. POWERPC currently emits relaxed operations for
these.

We can show this by running the following litmus-test:

  PPC SB+atomic_add+fetch

  {
      0:r0=x;  (* dst reg assuming offset is 0 *)
      0:r1=2;  (* src reg *)
      0:r2=1;
      0:r4=y;  (* P0 writes to this"," P1 reads this *)
      0:r5=z;  (* P1 writes to this","[' P0 reads this *)\n      0:r6=0;\n\n      1:r2=1;\n      1:r4=y;\n      1:r5=z;\n  }\n\n  P0                      | P1            ;\n  stw         r2', ' 0(r4)   | stw  r2', '0(r5) ;\n                          |               ;\n  loop:lwarx  r3', ' r6', ' r0  |               ;\n  mr          r8', ' r3      |               ;\n  add         r3', ' r3', ' r1  | sync          ;\n  stwcx.      r3', ' r6', ' r0  |               ;\n  bne         loop        |               ;\n  mr          r1', ' r8      |               ;\n                          |               ;\n  lwa         r7', ' 0(r5)   | lwa  r7', '0(r4) ;\n\n  ~exists(0:r7=0 /\\ 1:r7=0)\n\n  Witnesses\n  Positive: 9 Negative: 3\n  Condition ~exists (0:r7=0 /\\ 1:r7=0)\n  Observation SB+atomic_add+fetch Sometimes 3 9\n\nThis test shows that the older store in P0 is reordered with a newer\nload to a different address. Although there is a RMW operation with\nfetch between them. Adding a sync before and after RMW fixes the issue:\n\n  Witnesses\n  Positive: 9 Negative: 0\n  Condition ~exists (0:r7=0 /\\ 1:r7=0)\n  Observation SB+atomic_add+fetch Never 0 9\n\n[1] https://www.kernel.org/doc/Documentation/memory-barriers.txt\n[2] https://www.kernel.org/doc/Documentation/atomic_t.txt\n\nFixes: aea7ef8a82c0 (""powerpc/bpf/32: add support for BPF_ATOMIC bitwise operations"")\nFixes: 2d9206b22743 (""powerpc/bpf/32: Add instructions for atomic_[cmp]xchg"")\nFixes: dbe6e2456fb0 (""powerpc/bpf/64: add support for atomic fetch operations"")\nFixes: 1e82dfaa7819 (""powerpc/bpf/64: Add instructions for atomic_[cmp]xchg"")\nCc: stable@vger.kernel.org # v6.0+\nSigned-off-by: Puranjay Mohan <puranjay@kernel.org>\nReviewed-by: Christophe Leroy <christophe.leroy@csgroup.eu>\nReviewed-by: Naveen N Rao <naveen@kernel.org>\nAcked-by: Paul E. McKenney <paulmck@kernel.org>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://msgid.link/20240513100248.110535-1-puranjay@kernel.org\n\n', '']",Enforce full memory ordering for POWERPC BPF atomic operations using BPF_FETCH.,"POWERPC, BPF_FETCH, ordering",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
fbe3e8473f391adbf67eb0f317305fe62c66096c,fbe3e8473f391adbf67eb0f317305fe62c66096c,Martin KaFai Lau,martin.lau@kernel.org,1716943984,Martin KaFai Lau,martin.lau@kernel.org,1716959775,3abbb5d1f2e692d464295709e60f15d9562b1770,eb4e7726279a344c82e3c23be396bcfd0a4d5669 ed61271af5230cef9b9329bb1eacc1b1a9800d07,Merge branch 'use network helpers," part 5'

Geliang Tang says:

====================
This patchset uses post_socket_cb callbacks of struct network_helper_opts
to refactor do_test() in bpf_tcp_ca.c.

v5:
 - address Martin's comments in v4 (thanks)
 - add patch 4","[' use start_server_str in test_dctcp_fallback too\n - ASSERT_* is already used in settcpca', "" use this helper in cc_cb (patch 3).\n\nv4:\n - address Martin's comments in v3 (thanks).\n - drop 2 patches"", ' keep ""type"" as the individual arg to start_server_addr', '\n   connect_to_addr and start_server_str.\n\nv3:\n - Add 4 new patches', ' 1-3 are cleanups. 4 adds a new helper.\n - address Martin\'s comments in v2.\n\nv2:\n - rebased on commit ""selftests/bpf: Add test for the use of new args in\n cong_control""\n====================\n\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Refactor do_test() in bpf_tcp_ca.c using network helpers post_socket_cb callbacks.,"network, refactor, callbacks",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['socket like programs']
ed61271af5230cef9b9329bb1eacc1b1a9800d07,ed61271af5230cef9b9329bb1eacc1b1a9800d07,Geliang Tang,tanggeliang@kylinos.cn,1716638899,Martin KaFai Lau,martin.lau@kernel.org,1716943984,3abbb5d1f2e692d464295709e60f15d9562b1770,79b330c57debe6b15f441e999bb62042afd5b08e,"selftests/bpf: Use start_server_str in do_test in bpf_tcp_ca

This patch uses new helper start_server_str() in do_test() in bpf_tcp_ca.c
to accept a struct network_helper_opts argument instead of using
start_server() and settcpca(). Then change the type of the first paramenter
of do_test() into a struct network_helper_opts one.

Define its own cb_opts and opts for each test"," set its own cc name into
cb_opts.cc","[' and cc_cb() into post_socket_cb callback', ' then pass it to\ndo_test().\n\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nLink: https://lore.kernel.org/r/6e1b6555e3284e77c8aa60668c61a66c5f99aa37.1716638248.git.tanggeliang@kylinos.cn\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Refactor bpf_tcp_ca test to use start_server_str with network_helper_opts for better test configuration.,"start_server_str, network_helper_opts, do_test",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
79b330c57debe6b15f441e999bb62042afd5b08e,79b330c57debe6b15f441e999bb62042afd5b08e,Geliang Tang,tanggeliang@kylinos.cn,1716638898,Martin KaFai Lau,martin.lau@kernel.org,1716943984,a62fd2628f63874ddee6d852152b7fc3191d9d3f,e078255abd53ac44c9133fd98d51645dbd196123,"selftests/bpf: Use post_socket_cb in start_server_str

This patch uses start_server_str() helper in test_dctcp_fallback() in
bpf_tcp_ca.c"," instead of using start_server() and settcpca(). For
support opts in start_server_str() helper","[' opts->cb_opts needs to be\npassed to post_socket_cb() in __start_server().\n\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nLink: https://lore.kernel.org/r/414c749321fa150435f7fe8e12c80fec8b447c78.1716638248.git.tanggeliang@kylinos.cn\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Use start_server_str helper in bpf_tcp_ca.c tests for DCTCP fallback.,"start_server_str,test_dctcp_fallback,bpf_tcp_ca",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
e078255abd53ac44c9133fd98d51645dbd196123,e078255abd53ac44c9133fd98d51645dbd196123,Geliang Tang,tanggeliang@kylinos.cn,1716638897,Martin KaFai Lau,martin.lau@kernel.org,1716943984,1046081598c5ee4209a49cd82b4a5aadb55b565f,6f802cb8988e8e41f2fdb74ac949d3a0ef9a9594,"selftests/bpf: Use post_socket_cb in connect_to_fd_opts

Since the post_socket_cb() callback is added in struct network_helper_opts","
it's make sense to use it not only in __start_server()","[' but also in\nconnect_to_fd_opts(). Then it can be used to set TCP_CONGESTION sockopt.\n\nAdd a ""void *"" type member cb_opts into struct network_helper_opts', ' and add\na new struct named cb_opts in prog_tests/bpf_tcp_ca.c', ' then cc can be moved\ninto struct cb_opts from network_helper_opts. Define a new callback cc_cb()\nto set TCP_CONGESTION sockopt', ' and set it to post_socket_cb pointer of opts.\nDefine a new cb_opts cubic', ' set it to cb_opts of opts. Pass this opts to\nconnect_to_fd_opts() in test_dctcp_fallback().\n\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nLink: https://lore.kernel.org/r/b512bb8d8f6854c9ea5c409b69d1bf37c6f272c6.1716638248.git.tanggeliang@kylinos.cn\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",The commit modifies BPF selftests to use the post_socket_cb callback in connect_to_fd_opts for consistency.,"selftests,bpf,callback",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
6f802cb8988e8e41f2fdb74ac949d3a0ef9a9594,6f802cb8988e8e41f2fdb74ac949d3a0ef9a9594,Geliang Tang,tanggeliang@kylinos.cn,1716638896,Martin KaFai Lau,martin.lau@kernel.org,1716943983,003ebcbbecfd31789e2caa15e182e3fc81a28b6c,ed31adf6874db172e3212ac1ebaf701ed6190650,"selftests/bpf: Add start_server_str helper

It's a tech debt that start_server() does not take the ""opts"" argument.
It's pretty handy to have start_server() as a helper that takes string
address.

So this patch creates a new helper start_server_str(). Then start_server()
can be a wrapper of it.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/606e6cfd7e1aff8bc51ede49862eed0802e52170.1716638248.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Add start_server_str helper to enhance start_server() functionality in BPF selftests.,"start_server_str, helper, selftests",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
ed31adf6874db172e3212ac1ebaf701ed6190650,ed31adf6874db172e3212ac1ebaf701ed6190650,Geliang Tang,tanggeliang@kylinos.cn,1716638895,Martin KaFai Lau,martin.lau@kernel.org,1716943983,0217dd38368584252da86ab516bdf3cc99c0f601,eb4e7726279a344c82e3c23be396bcfd0a4d5669,"selftests/bpf: Drop struct post_socket_opts

It's not possible to have one generic/common ""struct post_socket_opts""
for all tests. It's better to have the individual test define its own
callback opts struct.

So this patch drops struct post_socket_opts"," and changes the second
parameter of post_socket_cb as ""void *"" type.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/f8bda41c7cb9cb6979b2779f89fb3a684234304f.1716638248.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],The commit removes the generic struct post_socket_opts in selftests for more test-specific callback structures.,"selftests,struct,callback",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
eb4e7726279a344c82e3c23be396bcfd0a4d5669,eb4e7726279a344c82e3c23be396bcfd0a4d5669,Mykyta Yatsenko,yatsenko@meta.com,1716556720,Andrii Nakryiko,andrii@kernel.org,1716938706,4aca2e5c18389f01ec9919e13ea4f728792b474b,4b3529edbb8ff069d762c6947e055e10c1748170,"libbpf: Configure log verbosity with env variable

Configure logging verbosity by setting LIBBPF_LOG_LEVEL environment
variable"," which is applied only to default logger. Once user set their
custom logging callback","[' it is up to them to handle filtering.\n\nSigned-off-by: Mykyta Yatsenko <yatsenko@meta.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240524131840.114289-1-yatsenko@meta.com\n', '']",This commit adds the ability to configure logging verbosity in libbpf using an environment variable.,"log verbosity, libbpf, environment",It's a new feature.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"[""It's not related to any of the above.""]"
4b3529edbb8ff069d762c6947e055e10c1748170,4b3529edbb8ff069d762c6947e055e10c1748170,Jakub Kicinski,kuba@kernel.org,1716906448,Jakub Kicinski,kuba@kernel.org,1716906449,afa5c995e3f28f3473b91c2622e2d8ba4b3ba9d3,c30ff5f3aec3f77e13cfd7373390639bfdcffba7 d9cbd8343b010016fcaabc361c37720dcafddcbe,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-05-28

We've added 23 non-merge commits during the last 11 day(s) which contain
a total of 45 files changed", 696 insertions(+),"["" 277 deletions(-).\n\nThe main changes are:\n\n1) Rename skb's mono_delivery_time to tstamp_type for extensibility\n   and add SKB_CLOCK_TAI type support to bpf_skb_set_tstamp()"", '\n   from Abhishek Chauhan.\n\n2) Add netfilter CT zone ID and direction to bpf_ct_opts so that arbitrary\n   CT zones can be used from XDP/tc BPF netfilter CT helper functions', '\n   from Brad Cowie.\n\n3) Several tweaks to the instruction-set.rst IETF doc to address\n   the Last Call review comments', ' from Dave Thaler.\n\n4) Small batch of riscv64 BPF JIT optimizations in order to emit more\n   compressed instructions to the JITed image for better icache efficiency', '\n   from Xiao Wang.\n\n5) Sort bpftool C dump output from BTF', ' aiming to simplify vmlinux.h\n   diffing and forcing more natural type definitions ordering', '\n   from Mykyta Yatsenko.\n\n6) Use DEV_STATS_INC() macro in BPF redirect helpers to silence\n   a syzbot/KCSAN race report for the tx_errors counter', '\n   from Jiang Yunshui.\n\n7) Un-constify bpf_func_info in bpftool to fix compilation with LLVM 17+\n   which started treating const structs as constants and thus breaking\n   full BTF program name resolution', ' from Ivan Babrou.\n\n8) Fix up BPF program numbers in test_sockmap selftest in order to reduce\n   some of the test-internal array sizes', ' from Geliang Tang.\n\n9) Small cleanup in Makefile.btf script to use test-ge check for v1.25-only\n   pahole', "" from Alan Maguire.\n\n10) Fix bpftool's make dependencies for vmlinux.h in order to avoid needless\n    rebuilds in some corner cases"", "" from Artem Savkov.\n\n* tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next: (23 commits)\n  bpf"", ' net: Use DEV_STAT_INC()\n  bpf', ' docs: Fix instruction.rst indentation\n  bpf', ' docs: Clarify call local offset\n  bpf', ' docs: Add table captions\n  bpf', ' docs: clarify sign extension of 64-bit use of 32-bit imm\n  bpf', ' docs: Use RFC 2119 language for ISA requirements\n  bpf', ' docs: Move sentence about returning R0 to abi.rst\n  bpf: constify member bpf_sysctl_kern:: Table\n  riscv', ' bpf: Try RVC for reg move within BPF_CMPXCHG JIT\n  riscv', ' bpf: Use STACK_ALIGN macro for size rounding up\n  riscv', ' bpf: Optimize zextw insn with Zba extension\n  selftests/bpf: Handle forwarding of UDP CLOCK_TAI packets\n  net: Add additional bit to support clockid_t timestamp type\n  net: Rename mono_delivery_time to tstamp_type for scalabilty\n  selftests/bpf: Update tests for new ct zone opts for nf_conntrack kfuncs\n  net: netfilter: Make ct zone opts configurable for bpf ct helpers\n  selftests/bpf: Fix prog numbers in test_sockmap\n  bpf: Remove unused variable ""prev_state""\n  bpftool: Un-const bpf_func_info to fix it for llvm 17 and newer\n  bpf: Fix order of args in call to bpf_map_kvcalloc\n  ...\n====================\n\nLink: https://lore.kernel.org/r/20240528105924.30905-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",Merge tag 'for-netdev' from the bpf-next branch into the current branch.,"merge, bpf-next, netdev",It's other type of commit.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
4b4647add7d3c8530493f7247d11e257ee425bf0,4b4647add7d3c8530493f7247d11e257ee425bf0,Thadeu Lima de Souza Cascardo,cascardo@igalia.com,1716562022,Paolo Abeni,pabeni@redhat.com,1716890719,2a05a37b69b36db56f84e880728667297200104e,c519cf9b7434183bb56ed1e200ac577a5fd34d9b,"sock_map: avoid race between sock_map_close and sk_psock_put

sk_psock_get will return NULL if the refcount of psock has gone to 0"," which
will happen when the last call of sk_psock_put is done. However","['\nsk_psock_drop may not have finished yet', ' so the close callback will still\npoint to sock_map_close despite psock being NULL.\n\nThis can be reproduced with a thread deleting an element from the sock map', '\nwhile the second one creates a socket', ' adds it to the map and closes it.\n\nThat will trigger the WARN_ON_ONCE:\n\n------------[ cut here ]------------\nWARNING: CPU: 1 PID: 7220 at net/core/sock_map.c:1701 sock_map_close+0x2a2/0x2d0 net/core/sock_map.c:1701\nModules linked in:\nCPU: 1 PID: 7220 Comm: syz-executor380 Not tainted 6.9.0-syzkaller-07726-g3c999d1ae3c7 #0\nHardware name: Google Google Compute Engine/Google Compute Engine', ' BIOS Google 04/02/2024\nRIP: 0010:sock_map_close+0x2a2/0x2d0 net/core/sock_map.c:1701\nCode: df e8 92 29 88 f8 48 8b 1b 48 89 d8 48 c1 e8 03 42 80 3c 20 00 74 08 48 89 df e8 79 29 88 f8 4c 8b 23 eb 89 e8 4f 15 23 f8 90 <0f> 0b 90 48 83 c4 08 5b 41 5c 41 5d 41 5e 41 5f 5d e9 13 26 3d 02\nRSP: 0018:ffffc9000441fda8 EFLAGS: 00010293\nRAX: ffffffff89731ae1 RBX: ffffffff94b87540 RCX: ffff888029470000\nRDX: 0000000000000000 RSI: ffffffff8bcab5c0 RDI: ffffffff8c1faba0\nRBP: 0000000000000000 R08: ffffffff92f9b61f R09: 1ffffffff25f36c3\nR10: dffffc0000000000 R11: fffffbfff25f36c4 R12: ffffffff89731840\nR13: ffff88804b587000 R14: ffff88804b587000 R15: ffffffff89731870\nFS:  000055555e080380(0000) GS:ffff8880b9500000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000000 CR3: 00000000207d4000 CR4: 0000000000350ef0\nCall Trace:\n <TASK>\n unix_release+0x87/0xc0 net/unix/af_unix.c:1048\n __sock_release net/socket.c:659 [inline]\n sock_close+0xbe/0x240 net/socket.c:1421\n __fput+0x42b/0x8a0 fs/file_table.c:422\n __do_sys_close fs/open.c:1556 [inline]\n __se_sys_close fs/open.c:1541 [inline]\n __x64_sys_close+0x7f/0x110 fs/open.c:1541\n do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n do_syscall_64+0xf5/0x240 arch/x86/entry/common.c:83\n entry_SYSCALL_64_after_hwframe+0x77/0x7f\nRIP: 0033:0x7fb37d618070\nCode: 00 00 48 c7 c2 b8 ff ff ff f7 d8 64 89 02 b8 ff ff ff ff eb d4 e8 10 2c 00 00 80 3d 31 f0 07 00 00 74 17 b8 03 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 48 c3 0f 1f 80 00 00 00 00 48 83 ec 18 89 7c\nRSP: 002b:00007ffcd4a525d8 EFLAGS: 00000202 ORIG_RAX: 0000000000000003\nRAX: ffffffffffffffda RBX: 0000000000000005 RCX: 00007fb37d618070\nRDX: 0000000000000010 RSI: 00000000200001c0 RDI: 0000000000000004\nRBP: 0000000000000000 R08: 0000000100000000 R09: 0000000100000000\nR10: 0000000000000000 R11: 0000000000000202 R12: 0000000000000000\nR13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\n </TASK>\n\nUse sk_psock', ' which will only check that the pointer is not been set to\nNULL yet', ' which should only happen after the callbacks are restored. If', '\nthen', ' a reference can still be gotten', ' we may call sk_psock_stop and cancel\npsock->work.\n\nAs suggested by Paolo Abeni', ' reorder the condition so the control flow is\nless convoluted.\n\nAfter that change', ' the reproducer does not trigger the WARN_ON_ONCE\nanymore.\n\nSuggested-by: Paolo Abeni <pabeni@redhat.com>\nReported-by: syzbot+07a2e4a1a57118ef7355@syzkaller.appspotmail.com\nCloses: https://syzkaller.appspot.com/bug?extid=07a2e4a1a57118ef7355\nFixes: aadb2bb83ff7 (""sock_map: Fix a potential use-after-free in sock_map_close()"")\nFixes: 5b4a79ba65a1 (""bpf', "" sockmap: Don't let sock_map_{close"", 'destroy', 'unhash} call itself"")\nCc: stable@vger.kernel.org\nSigned-off-by: Thadeu Lima de Souza Cascardo <cascardo@igalia.com>\nAcked-by: Jakub Sitnicki <jakub@cloudflare.com>\nLink: https://lore.kernel.org/r/20240524144702.1178377-1-cascardo@igalia.com\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>\n', '']",Fix potential race condition between sock_map_close and sk_psock_put functions.,"race, sock_map, refcount",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF maps,['socket like programs']
d9cbd8343b010016fcaabc361c37720dcafddcbe,d9cbd8343b010016fcaabc361c37720dcafddcbe,yunshui,jiangyunshui@kylinos.cn,1716435320,Daniel Borkmann,daniel@iogearbox.net,1716890651,bca0593a4757df7d7d20410e46e08b3855d39faa,e245ef8a0b06fa5a18ca3bdcf82430166419283e,bpf," net: Use DEV_STAT_INC()

syzbot/KCSAN reported that races happen when multiple CPUs updating
dev->stats.tx_error concurrently. Adopt SMP safe DEV_STATS_INC() to
update the dev->stats fields.

Reported-by: syzbot <syzkaller@googlegroups.com>
Signed-off-by: yunshui <jiangyunshui@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240523033520.4029314-1-jiangyunshui@kylinos.cn
",[''],Fix race condition in network stats update using SMP safe DEV_STATS_INC().,"race condition, SMP safe, DEV_STATS_INC",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.","[""It's not related to any of the above.""]"
2786ae339ef504f480753b54219b65471aaf98e8,2786ae339ef504f480753b54219b65471aaf98e8,Jakub Kicinski,kuba@kernel.org,1716852390,Jakub Kicinski,kuba@kernel.org,1716852390,97e30a59f15ef156645b0c8f7a389e848c0ede7c,52a2f0608366a629d43dacd3191039c95fef74ba a63bf556160fb19591183383da6757f52119981d,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-05-27

We've added 15 non-merge commits during the last 7 day(s) which contain
a total of 18 files changed", 583 insertions(+),"[' 55 deletions(-).\n\nThe main changes are:\n\n1) Fix broken BPF multi-uprobe PID filtering logic which filtered by thread\n   while the promise was to filter by process', ' from Andrii Nakryiko.\n\n2) Fix the recent influx of syzkaller reports to sockmap which triggered\n   a locking rule violation by performing a map_delete', ' from Jakub Sitnicki.\n\n3) Fixes to netkit driver in particular on skb->pkt_type override upon pass\n   verdict', ' from Daniel Borkmann.\n\n4) Fix an integer overflow in resolve_btfids which can wrongly trigger build\n   failures', ' from Friedrich Vock.\n\n5) Follow-up fixes for ARC JIT reported by static analyzers', '\n   from Shahab Vahedi.\n\n* tag \'for-netdev\' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:\n  selftests/bpf: Cover verifier checks for mutating sockmap/sockhash\n  Revert ""bpf', ' sockmap: Prevent lock inversion deadlock in map delete elem""\n  bpf: Allow delete from sockmap/sockhash only if update is allowed\n  selftests/bpf: Add netkit test for pkt_type\n  selftests/bpf: Add netkit tests for mac address\n  netkit: Fix pkt_type override upon netkit pass verdict\n  netkit: Fix setting mac address in l2 mode\n  ARC', ' bpf: Fix issues reported by the static analyzers\n  selftests/bpf: extend multi-uprobe tests with USDTs\n  selftests/bpf: extend multi-uprobe tests with child thread case\n  libbpf: detect broken PID filtering logic for multi-uprobe\n  bpf: remove unnecessary rcu_read_{lock', 'unlock}() in multi-uprobe attach logic\n  bpf: fix multi-uprobe PID filtering logic\n  bpf: Fix potential integer overflow in resolve_btfids\n  MAINTAINERS: Add myself as reviewer of ARM64 BPF JIT\n====================\n\nLink: https://lore.kernel.org/r/20240527203551.29712-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n', '']",Merged changes from the 'for-netdev' branch containing updates to the Linux kernel's BPF subsystem.,"merge, bpf, netdev",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
a63bf556160fb19591183383da6757f52119981d,a63bf556160fb19591183383da6757f52119981d,Jakub Sitnicki,jakub@cloudflare.com,1716808809,Daniel Borkmann,daniel@iogearbox.net,1716831266,e6102ba20bfdef0c8312cf878c6e129995581b1c,3b9ce0491a43e9af7f108b2f1bced7cd35931660,"selftests/bpf: Cover verifier checks for mutating sockmap/sockhash

Verifier enforces that only certain program types can mutate sock{map","hash}
maps","["" that is update it or delete from it. Add test coverage for these\nchecks so we don't regress.\n\nSigned-off-by: Jakub Sitnicki <jakub@cloudflare.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: John Fastabend <john.fastabend@gmail.com>\nLink: https://lore.kernel.org/bpf/20240527-sockmap-verify-deletes-v1-3-944b372f2101@cloudflare.com\n"", '']",Add self-tests for verifying sockmap and sockhash mutation rules in the eBPF verifier.,"selftests, verifier, sockmap",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', ""It's not related to any of the above.""]"
3b9ce0491a43e9af7f108b2f1bced7cd35931660,3b9ce0491a43e9af7f108b2f1bced7cd35931660,Jakub Sitnicki,jakub@cloudflare.com,1716808808,Daniel Borkmann,daniel@iogearbox.net,1716831265,3ba3ed3599c9ad372609e9e7ffb6bf1cba40e24d,98e948fb60d41447fd8d2d0c3b8637fc6b6dc26d,"Revert ""bpf"," sockmap: Prevent lock inversion deadlock in map delete elem""

This reverts commit ff91059932401894e6c86341915615c5eb0eca48.

This check is no longer needed. BPF programs attached to tracepoints are
now rejected by the verifier when they attempt to delete from a
sockmap/sockhash maps.

Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20240527-sockmap-verify-deletes-v1-2-944b372f2101@cloudflare.com
",[''],Revert commit to remove unnecessary check for tracepoints in sockmap/sockhash operations.,"revert, sockmap, tracepoints",It's other type of commit.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF maps,['tracepoints like programs']
98e948fb60d41447fd8d2d0c3b8637fc6b6dc26d,98e948fb60d41447fd8d2d0c3b8637fc6b6dc26d,Jakub Sitnicki,jakub@cloudflare.com,1716808807,Daniel Borkmann,daniel@iogearbox.net,1716831220,a96449f76eff9a59365db5570758d363176cea30,95348e463eabc803341c67d562f9e0a5f0a48fe6,"bpf: Allow delete from sockmap/sockhash only if update is allowed

We have seen an influx of syzkaller reports where a BPF program attached to
a tracepoint triggers a locking rule violation by performing a map_delete
on a sockmap/sockhash.

We don't intend to support this artificial use scenario. Extend the
existing verifier allowed-program-type check for updating sockmap/sockhash
to also cover deleting from a map.

From now on only BPF programs which were previously allowed to update
sockmap/sockhash can delete from these map types.

Fixes: ff9105993240 (""bpf"," sockmap: Prevent lock inversion deadlock in map delete elem"")
Reported-by: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Reported-by: syzbot+ec941d6e24f633a59172@syzkaller.appspotmail.com
Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: syzbot+ec941d6e24f633a59172@syzkaller.appspotmail.com
Acked-by: John Fastabend <john.fastabend@gmail.com>
Closes: https://syzkaller.appspot.com/bug?extid=ec941d6e24f633a59172
Link: https://lore.kernel.org/bpf/20240527-sockmap-verify-deletes-v1-1-944b372f2101@cloudflare.com
",[''],Enhance verifier to restrict sockmap/sockhash delete operations to permitted BPF program types to avoid locking rule violations.,"sockmap,sockhash,locking",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,['tracepoints like programs']
e245ef8a0b06fa5a18ca3bdcf82430166419283e,e245ef8a0b06fa5a18ca3bdcf82430166419283e,Dave Thaler,dthaler1968@googlemail.com,1716704295,Alexei Starovoitov,ast@kernel.org,1716742722,62b3687ad60374687b0ed1def56fb1599e26dd8f,f980f13e4eb299abba6692365315196e1ba6fd2c,bpf," docs: Fix instruction.rst indentation

The table captions patch corrected indented most tables to work with
the table directive for adding a caption but missed two of them.

Signed-off-by: Dave Thaler <dthaler1968@gmail.com>
Reviewed-by: Christoph Hellwig <hch@lst.de>
Link: https://lore.kernel.org/r/20240526061815.22497-1-dthaler1968@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Fix indentation issues in instruction.rst table captions for proper rendering.,"indentation, documentation, table",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
2313022ec5942e3ddd2e4e57002ed71926887f87,2313022ec5942e3ddd2e4e57002ed71926887f87,Linus Torvalds,torvalds@linux-foundation.org,1716668268,Linus Torvalds,torvalds@linux-foundation.org,1716668268,bd0319acba4685e224f17bc302daa502d650f7a3,56fb6f92854f29dcb6c3dc3ba92eeda1b615e88c 919e3ece7f5aaf7b5f3c54538d5303b6eeeb053b,"Merge tag 'uml-for-linus-6.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/uml/linux

Pull UML updates from Richard Weinberger:

 - Fixes for -Wmissing-prototypes warnings and further cleanup

 - Remove callback returning void from rtc and virtio drivers

 - Fix bash location

* tag 'uml-for-linus-6.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/uml/linux: (26 commits)
  um: virtio_uml: Convert to platform remove callback returning void
  um: rtc: Convert to platform remove callback returning void
  um: Remove unused do_get_thread_area function
  um: Fix -Wmissing-prototypes warnings for __vdso_*
  um: Add an internal header shared among the user code
  um: Fix the declaration of kasan_map_memory
  um: Fix the -Wmissing-prototypes warning for get_thread_reg
  um: Fix the -Wmissing-prototypes warning for __switch_mm
  um: Fix -Wmissing-prototypes warnings for (rt_)sigreturn
  um: Stop tracking host PID in cpu_tasks
  um: process: remove unused 'n' variable
  um: vector: remove unused len variable/calculation
  um: vector: fix bpfflash parameter evaluation
  um: slirp: remove set but unused variable 'pid'
  um: signal: move pid variable where needed
  um: Makefile: use bash from the environment
  um: Add winch to winch_handlers before registering winch IRQ
  um: Fix -Wmissing-prototypes warnings for __warp_* and foo
  um: Fix -Wmissing-prototypes warnings for text_poke*
  um: Move declarations to proper headers
  ...
",,Merged UML updates focusing on cleanup and fixing -Wmissing-prototypes warnings from the Linux kernel.,"UML, cleanup, warnings",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
95348e463eabc803341c67d562f9e0a5f0a48fe6,95348e463eabc803341c67d562f9e0a5f0a48fe6,Daniel Borkmann,daniel@iogearbox.net,1716568579,Alexei Starovoitov,ast@kernel.org,1716659591,e8062791b197694f238e725e2bcb2cadfb5910f7,998ffeb2738e26f134dc8e63b5dcaece22573957,"selftests/bpf: Add netkit test for pkt_type

Add a test case to assert that the skb->pkt_type which was set from the BPF
program is retained from the netkit xmit side to the peer's device at tcx
ingress location.

  # ./vmtest.sh -- ./test_progs -t netkit
  [...]
  ./test_progs -t netkit
  [    1.140780] bpf_testmod: loading out-of-tree module taints kernel.
  [    1.141127] bpf_testmod: module verification failed: signature and/or required key missing - tainting kernel
  [    1.284601] tsc: Refined TSC clocksource calibration: 3408.006 MHz
  [    1.286672] clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x311fd9b189d"," max_idle_ns: 440795225691 ns
  [    1.290384] clocksource: Switched to clocksource tsc
  #345     tc_netkit_basic:OK
  #346     tc_netkit_device:OK
  #347     tc_netkit_multi_links:OK
  #348     tc_netkit_multi_opts:OK
  #349     tc_netkit_neigh_links:OK
  #350     tc_netkit_pkt_type:OK
  Summary: 6/0 PASSED","[' 0 SKIPPED', ' 0 FAILED\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/r/20240524163619.26001-4-daniel@iogearbox.net\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",This commit adds a test for verifying pkt_type in BPF netkit selftests.,"selftests,netkit,pkt_type",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
998ffeb2738e26f134dc8e63b5dcaece22573957,998ffeb2738e26f134dc8e63b5dcaece22573957,Daniel Borkmann,daniel@iogearbox.net,1716568578,Alexei Starovoitov,ast@kernel.org,1716659337,32d71431910f2beba683c40b443997986f08ba81,3998d184267dfcff858aaa84d3de17429253629d,"selftests/bpf: Add netkit tests for mac address

This adds simple tests around setting MAC addresses in the different
netkit modes.

Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/r/20240524163619.26001-3-daniel@iogearbox.net
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,The commit adds selftests for netkit involving MAC address settings.,"selftests, netkit, MAC",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['other']
3998d184267dfcff858aaa84d3de17429253629d,3998d184267dfcff858aaa84d3de17429253629d,Daniel Borkmann,daniel@iogearbox.net,1716568577,Alexei Starovoitov,ast@kernel.org,1716659337,9862377f9644922177186ccfce9296e527fd3e03,d6fe532b7499e4575f9647879b7a34625817fe7f,"netkit: Fix pkt_type override upon netkit pass verdict

When running Cilium connectivity test suite with netkit in L2 mode"," we
found that compared to tcx a few tests were failing which pushed traffic
into an L7 proxy sitting in host namespace. The problem in particular is
around the invocation of eth_type_trans() in netkit.

In case of tcx","[' this is run before the tcx ingress is triggered inside\nhost namespace and thus if the BPF program uses the bpf_skb_change_type()\nhelper the newly set type is retained. However', ' in case of netkit', ' the\nlate eth_type_trans() invocation overrides the earlier decision from the\nBPF program which eventually leads to the test failure.\n\nInstead of eth_type_trans()', ' split out the relevant parts', ' meaning', ' reset\nof mac header and call to eth_skb_pkt_type() before the BPF program is run\nin order to have the same behavior as with tcx', ' and refactor a small helper\ncalled eth_skb_pull_mac() which is run in case it\'s passed up the stack\nwhere the mac header must be pulled. With this all connectivity tests pass.\n\nFixes: 35dfaad7188c (""netkit', ' bpf: Add bpf programmable net device"")\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Nikolay Aleksandrov <razor@blackwall.org>\nLink: https://lore.kernel.org/r/20240524163619.26001-2-daniel@iogearbox.net\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fixes pkt_type override issue in netkit affecting connectivity tests with traffic directed to L7 proxy.,"netkit, pkt_type, Cilium",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
d6fe532b7499e4575f9647879b7a34625817fe7f,d6fe532b7499e4575f9647879b7a34625817fe7f,Daniel Borkmann,daniel@iogearbox.net,1716568576,Alexei Starovoitov,ast@kernel.org,1716659337,303db3b2d23ec12cf01998f603ec97948b4f414b,dd6a403795f0c7b5c566f86f2ee6b687278d3c1c,"netkit: Fix setting mac address in l2 mode

When running Cilium connectivity test suite with netkit in L2 mode"," we
found that it is expected to be able to specify a custom MAC address for
the devices","[' in particular', ' cilium-cni obtains the specified MAC address\nby querying the endpoint and sets the MAC address of the interface inside\nthe Pod. Thus', ' fix the missing support in netkit for L2 mode.\n\nFixes: 35dfaad7188c (""netkit', ' bpf: Add bpf programmable net device"")\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Nikolay Aleksandrov <razor@blackwall.org>\nAcked-by: Stanislav Fomichev <sdf@google.com>\nLink: https://lore.kernel.org/r/20240524163619.26001-1-daniel@iogearbox.net\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit fixes the issue of setting MAC addresses in Netkit when in L2 mode for Cilium connectivity tests.,"Netkit, MAC address, L2 mode",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['other']
dd6a403795f0c7b5c566f86f2ee6b687278d3c1c,dd6a403795f0c7b5c566f86f2ee6b687278d3c1c,Shahab Vahedi,shahab@synopsys.com,1716609388,Alexei Starovoitov,ast@kernel.org,1716659241,365a2e0e7266d9be0554f260d4bd58bf688a8f07,590016ad83de770153a09151336d95544d6bd7ad,ARC," bpf: Fix issues reported by the static analyzers

Also updated couple of comments along the way.

One of the issues reported was indeed a bug in the code:

  memset(ctx","[' 0', ' sizeof(ctx))      // original line\n  memset(ctx', ' 0', ' sizeof(*ctx))     // fixed line\n\nThat was a nice catch.\n\nReported-by: kernel test robot <lkp@intel.com>\nCloses: https://lore.kernel.org/oe-kbuild-all/202405222314.UG5F2NHn-lkp@intel.com/\nCloses: https://lore.kernel.org/oe-kbuild-all/202405232036.Xqoc3b0J-lkp@intel.com/\nSigned-off-by: Shahab Vahedi <shahab@synopsys.com>\nLink: https://lore.kernel.org/r/20240525035628.1026-1-list+bpf@vahedi.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']","This commit fixes issues reported by static analyzers, including a bug in the code, and updates some comments.","bug, static analyzers, comments",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
590016ad83de770153a09151336d95544d6bd7ad,590016ad83de770153a09151336d95544d6bd7ad,Alexei Starovoitov,ast@kernel.org,1716659163,Alexei Starovoitov,ast@kernel.org,1716659163,2f016edc5b9d6493df7368f06884af7bac6e574d,44382b3ed6b2787710c8ade06c0e97f5970a47c8 198034a87dfeb64d5a8359a5089022c6b923646e,"Merge branch 'fix-bpf-multi-uprobe-pid-filtering-logic'

Andrii Nakryiko says:

====================
Fix BPF multi-uprobe PID filtering logic

It turns out that current implementation of multi-uprobe PID filtering logic
is broken. It filters by thread"," while the promise is filtering by process.
Patch #1 fixes the logic trivially. The rest is testing and mitigations that
are necessary for libbpf to not break users of USDT programs.

v1->v2:
  - fix selftest in last patch (CI);
  - use semicolon in patch #3 (Jiri).
====================

Link: https://lore.kernel.org/r/20240521163401.3005045-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Fixes BPF multi-uprobe PID filtering logic from filtering by thread to filtering by process.,"BPF, uprobe, filtering",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,['kprobe/uprobe/ftrace like programs']
198034a87dfeb64d5a8359a5089022c6b923646e,198034a87dfeb64d5a8359a5089022c6b923646e,Andrii Nakryiko,andrii@kernel.org,1716309241,Alexei Starovoitov,ast@kernel.org,1716659162,2f016edc5b9d6493df7368f06884af7bac6e574d,70342420a1cf1173bdec456e5fa574a804e422db,"selftests/bpf: extend multi-uprobe tests with USDTs

Validate libbpf's USDT-over-multi-uprobe logic by adding USDTs to
existing multi-uprobe tests. This checks correct libbpf fallback to
singular uprobes (when run on older kernels with buggy PID filtering).
We reuse already established child process and child thread testing
infrastructure"," so additions are minimal. These test fail on either
older kernels or older version of libbpf that doesn't detect PID
filtering problems.

Acked-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240521163401.3005045-6-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Enhanced multi-uprobe tests with USDTs to validate libbpf's logic and improve testing on older kernels.,"multi-uprobe, USDTs, libbpf",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['tracepoints like programs']
70342420a1cf1173bdec456e5fa574a804e422db,70342420a1cf1173bdec456e5fa574a804e422db,Andrii Nakryiko,andrii@kernel.org,1716309240,Alexei Starovoitov,ast@kernel.org,1716659162,4636693b5cc3ec019e1c1e69b420f136b41b0ee1,04d939a2ab229a3821f04fc81f7c027842f501f1,"selftests/bpf: extend multi-uprobe tests with child thread case

Extend existing multi-uprobe tests to test that PID filtering works
correctly. We already have child *process* tests"," but we need also child
*thread* tests. This patch adds spawn_thread() helper to start child
thread","[' wait for it to be ready', ' and then instruct it to trigger desired\nuprobes.\n\nAdditionally', ' we extend BPF-side code to track thread ID', ' not just\nprocess ID. Also we detect whether extraneous triggerings with\nunexpected process IDs happened', ' and validate that none of that happened\nin practice.\n\nThese changes prove that fixed PID filtering logic for multi-uprobe\nworks as expected. These tests fail on old kernels.\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Jiri Olsa <jolsa@kernel.org>\nLink: https://lore.kernel.org/r/20240521163401.3005045-5-andrii@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Extend multi-uprobe tests to include PID filtering for child threads.,"multi-uprobe,PIDs,threads",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['kprobe/uprobe/ftrace like programs']
04d939a2ab229a3821f04fc81f7c027842f501f1,04d939a2ab229a3821f04fc81f7c027842f501f1,Andrii Nakryiko,andrii@kernel.org,1716309239,Alexei Starovoitov,ast@kernel.org,1716659162,9d3f1d6d2832d365a5f87a1ff8b7dc9f2328b487,4a8f635a60540888dab3804992e86410360339c8,"libbpf: detect broken PID filtering logic for multi-uprobe

Libbpf is automatically (and transparently to user) detecting
multi-uprobe support in the kernel", and,"[' if supported', ' uses\nmulti-uprobes to improve USDT attachment speed.\n\nUSDTs can be attached system-wide or for the specific process by PID. In\nthe latter case', ' we rely on correct kernel logic of not triggering USDT\nfor unrelated processes.\n\nAs such', ' on older kernels that do support multi-uprobes', ' but still have\nbroken PID filtering logic', ' we need to fall back to singular uprobes.\n\nUnfortunately', ' whether user is using PID filtering or not is known at\nthe attachment time', ' which happens after relevant BPF programs were\nloaded into the kernel. Also unfortunately', ' we need to make a call\nwhether to use multi-uprobes or singular uprobe for SEC(""usdt"") programs\nduring BPF object load time', ' at which point we have no information about\npossible PID filtering.\n\nThe distinction between single and multi-uprobes is small', ' but important\nfor the kernel. Multi-uprobes get BPF_TRACE_UPROBE_MULTI attach type', '\nand kernel internally substitiute different implementation of some of\nBPF helpers (e.g.', ' bpf_get_attach_cookie()) depending on whether uprobe\nis multi or singular. So', "" multi-uprobes and singular uprobes cannot be\nintermixed.\n\nAll the above implies that we have to make an early and conservative\ncall about the use of multi-uprobes. And so this patch modifies libbpf's\nexisting feature detector for multi-uprobe support to also check correct\nPID filtering. If PID filtering is not yet fixed"", "" we fall back to\nsingular uprobes for USDTs.\n\nThis extension to feature detection is simple thanks to kernel's -EINVAL\naddition for pid < 0.\n\nAcked-by: Jiri Olsa <jolsa@kernel.org>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20240521163401.3005045-4-andrii@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n"", '']",Libbpf now detects broken PID filtering logic for multi-uprobe support in the kernel.,"libbpf,multi-uprobe,PID-filtering",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,['kprobe/uprobe/ftrace like programs']
4a8f635a60540888dab3804992e86410360339c8,4a8f635a60540888dab3804992e86410360339c8,Andrii Nakryiko,andrii@kernel.org,1716309238,Alexei Starovoitov,ast@kernel.org,1716659162,d5616c72bde13807d4ff75fab5acfa3c5371143b,46ba0e49b64232adac35a2bc892f1710c5b0fb7f,bpf: remove unnecessary rcu_read_{lock,"unlock}() in multi-uprobe attach logic

get_pid_task() internally already calls rcu_read_lock() and
rcu_read_unlock()","[' so there is no point to do this one extra time.\n\nThis is a drive-by improvement and has no correctness implications.\n\nAcked-by: Jiri Olsa <jolsa@kernel.org>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20240521163401.3005045-3-andrii@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Removed redundant RCU read locks in the multi-uprobe attach logic for bpf.,"bpf, RCU, uprobe",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['kprobe/uprobe/ftrace like programs']
46ba0e49b64232adac35a2bc892f1710c5b0fb7f,46ba0e49b64232adac35a2bc892f1710c5b0fb7f,Andrii Nakryiko,andrii@kernel.org,1716309237,Alexei Starovoitov,ast@kernel.org,1716659162,6fd4199126856396394680fd9553ac4c14fd81c9,44382b3ed6b2787710c8ade06c0e97f5970a47c8,"bpf: fix multi-uprobe PID filtering logic

Current implementation of PID filtering logic for multi-uprobes in
uprobe_prog_run() is filtering down to exact *thread*"," while the intent
for PID filtering it to filter by *process* instead. The check in
uprobe_prog_run() also differs from the analogous one in
uprobe_multi_link_filter() for some reason. The latter is correct","['\nchecking task->mm', ' not the task itself.\n\nFix the check in uprobe_prog_run() to perform the same task->mm check.\n\nWhile doing this', ' we also update get_pid_task() use to use PIDTYPE_TGID\ntype of lookup', "" given the intent is to get a representative task of an\nentire process. This doesn't change behavior"", ' but seems more logical. It\nwould hold task group leader task now', ' not any random thread task.\n\nLast but not least', ' given multi-uprobe support is half-broken due to\nthis PID filtering logic (depending on whether PID filtering is\nimportant or not)', "" we need to make it easy for user space consumers\n(including libbpf) to easily detect whether PID filtering logic was\nalready fixed.\n\nWe do it here by adding an early check on passed pid parameter. If it's\nnegative (and so has no chance of being a valid PID)"", ' we return -EINVAL.\nPrevious behavior would eventually return -ESRCH (""No process found"")', ""\ngiven there can't be any process with negative PID. This subtle change\nwon't make any practical change in behavior"", ' but will allow applications\nto detect PID filtering fixes easily. Libbpf fixes take advantage of\nthis in the next patch.\n\nCc: stable@vger.kernel.org\nAcked-by: Jiri Olsa <jolsa@kernel.org>\nFixes: b733eeade420 (""bpf: Add pid filter support for uprobe_multi link"")\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20240521163401.3005045-2-andrii@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fix process PID filtering logic for multi-uprobes in the uprobe_prog_run function.,"PID filtering, multi-uprobes, logic",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['kprobe/uprobe/ftrace like programs']
f980f13e4eb299abba6692365315196e1ba6fd2c,f980f13e4eb299abba6692365315196e1ba6fd2c,Dave Thaler,dthaler1968@googlemail.com,1716651212,Alexei Starovoitov,ast@kernel.org,1716658917,cf2ec6c3b4a9fd8bcf0788af163eaa9be5367004,6a6d8b6f00ade597e0030669fae3fdf57cfba33b,bpf," docs: Clarify call local offset

In the Jump instructions section it explains that the offset is
""relative to the instruction following the jump instruction"".
But the program-local section confusingly said ""referenced by
offset from the call instruction","[' similar to JA"".\n\nThis patch updates that sentence with consistent wording', "" saying\nit's relative to the instruction following the call instruction.\n\nSigned-off-by: Dave Thaler <dthaler1968@gmail.com>\nAcked-by: Yonghong Song <yonghong.song@linux.dev>\nLink: https://lore.kernel.org/r/20240525153332.21355-1-dthaler1968@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n"", '']",Clarifies documentation on offset referencing in program-local section for BPF jump and call instructions.,"documentation, offset, jump",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
6a6d8b6f00ade597e0030669fae3fdf57cfba33b,6a6d8b6f00ade597e0030669fae3fdf57cfba33b,Dave Thaler,dthaler1968@googlemail.com,1716569178,Alexei Starovoitov,ast@kernel.org,1716658771,1d321b4d31afdaa22b00a9647b5d4e65963eadd1,4e1215d9a1903fc9e976aa8903674d050c7af5ff,bpf," docs: Add table captions

As suggested by Ines Robles in his IETF GENART review at
https://datatracker.ietf.org/doc/review-ietf-bpf-isa-02-genart-lc-robles-2024-05-16/

Signed-off-by: Dave Thaler <dthaler1968@gmail.com>
Link: https://lore.kernel.org/r/20240524164618.18894-1-dthaler1968@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],The commit adds table captions to documentation as per an IETF GENART review suggestion.,"table captions, documentation, review",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.","It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.","[""It's not related to any of the above.""]"
4e1215d9a1903fc9e976aa8903674d050c7af5ff,4e1215d9a1903fc9e976aa8903674d050c7af5ff,Dave Thaler,dthaler1968@googlemail.com,1716241975,Alexei Starovoitov,ast@kernel.org,1716658743,c087489b3a7f5ffb2b73a42022a4a4ad796c70ba,a985fdca5e7e665d58dc40c92a67c8b67b6291db,bpf," docs: clarify sign extension of 64-bit use of 32-bit imm

imm is defined as a 32-bit signed integer.

{MOV","[' K', ' ALU64} says it does ""dst = src"" (where src is \'imm\') and it\ndoes do dst = (s64)imm', ' which in that sense does sign extend imm. The MOVSX\ninstruction is explained as sign extending', ' so added the example of\n{MOV', ' K', ' ALU64} to make this more clear.\n\n{JLE', ' K', ' JMP} says it does ""PC += offset if dst <= src"" (where src is \'imm\'', '\nand the comparison is unsigned). This was apparently ambiguous to some\nreaders as to whether the comparison was ""dst <= (u64)(u32)imm"" or\n""dst <= (u64)(s64)imm"" so added an example to make this more clear.\n\nv1 -> v2: Address comments from Yonghong\n\nSigned-off-by: Dave Thaler <dthaler1968@googlemail.com>\nAcked-by: Yonghong Song <yonghong.song@linux.dev>\nAcked-by: David Vernet <void@manifault.com>\nLink: https://lore.kernel.org/r/20240520215255.10595-1-dthaler1968@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Clarify documentation regarding sign extension of 64-bit use of 32-bit immediate values.,"sign extension, 64-bit, documentation",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
a985fdca5e7e665d58dc40c92a67c8b67b6291db,a985fdca5e7e665d58dc40c92a67c8b67b6291db,Dave Thaler,dthaler1968@googlemail.com,1715965135,Alexei Starovoitov,ast@kernel.org,1716658715,36dce8a271663ecc713da392e09d22f6f6633dad,4652072e7b9d643edc9ebb04e3e2c021461b7af0,bpf," docs: Use RFC 2119 language for ISA requirements

Per IETF convention and discussion at LSF/MM/BPF","[' use MUST etc.\nkeywords as requested by IETF Area Director review.  Also as\nrequested', ' indicate that documenting BTF is out of scope of this\ndocument and will be covered by a separate IETF specification.\n\nAdded paragraph about the terminology that is required IETF boilerplate\nand must be worded exactly as such.\n\nSigned-off-by: Dave Thaler <dthaler1968@googlemail.com>\nAcked-by: David Vernet <void@manifault.com>\nLink: https://lore.kernel.org/r/20240517165855.4688-1-dthaler1968@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Update documentation to use RFC 2119 language for ISA requirements.,"documentation, RFC 2119, ISA",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.","It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.","[""It's not related to any of the above.""]"
4652072e7b9d643edc9ebb04e3e2c021461b7af0,4652072e7b9d643edc9ebb04e3e2c021461b7af0,Dave Thaler,dthaler1968@googlemail.com,1715960085,Alexei Starovoitov,ast@kernel.org,1716658669,19ee76f42e4dd42c51b0fed02ab269c0d4053c60,2c1713a8f1c94033a6e00aae4693ab03e8a3b9f1,bpf," docs: Move sentence about returning R0 to abi.rst

As discussed at LSF/MM/BPF","[' the sentence about using R0 for returning\nvalues from calls is part of the calling convention and belongs in\nabi.rst.  Any further additions or clarifications to this text are left\nfor future patches on abi.rst.  The current patch is simply to unblock\nprogression of instruction-set.rst to a standard.\n\nIn contrast', ' the restriction of register numbers to the range 0-10\nis untouched', ' left in the instruction-set.rst definition of the\nsrc_reg and dst_reg fields.\n\nSigned-off-by: Dave Thaler <dthaler1968@googlemail.com>\nLink: https://lore.kernel.org/r/20240517153445.3914-1-dthaler1968@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Moved documentation sentence about returning R0 to abi.rst in bpf.,"documentation, returning, R0",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.","It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.","[""It's not related to any of the above.""]"
b1480ed230acf4f7f069a7f5e3ddda62bbf4ba97,b1480ed230acf4f7f069a7f5e3ddda62bbf4ba97,Will Deacon,will@kernel.org,1716327493,Andrew Morton,akpm@linux-foundation.org,1716576906,d22c6852ba72b8f10f1de5015f98a78eb8fa3315,fb9293b6b0156fbf6ab97a1625d99a29c36d9f0c,"arm64: patching: fix handling of execmem addresses

Klara Modin reported warnings for a kernel configured with BPF_JIT but
without MODULES:

[   44.131296] Trying to vfree() bad address (000000004a17c299)
[   44.138024] WARNING: CPU: 1 PID: 193 at mm/vmalloc.c:3189 remove_vm_area (mm/vmalloc.c:3189 (discriminator 1))
[   44.146675] CPU: 1 PID: 193 Comm: kworker/1:2 Tainted: G      D W          6.9.0-01786-g2c9e5d4a0082 #25
[   44.158229] Hardware name: Raspberry Pi 3 Model B (DT)
[   44.164433] Workqueue: events bpf_prog_free_deferred
[   44.170492] pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
[   44.178601] pc : remove_vm_area (mm/vmalloc.c:3189 (discriminator 1))
[   44.183705] lr : remove_vm_area (mm/vmalloc.c:3189 (discriminator 1))
[   44.188772] sp : ffff800082a13c70
[   44.193112] x29: ffff800082a13c70 x28: 0000000000000000 x27: 0000000000000000
[   44.201384] x26: 0000000000000000 x25: ffff00003a44efa0 x24: 00000000d4202000
[   44.209658] x23: ffff800081223dd0 x22: ffff00003a198a40 x21: ffff8000814dd880
[   44.217924] x20: 00000000d4202000 x19: ffff8000814dd880 x18: 0000000000000006
[   44.226206] x17: 0000000000000000 x16: 0000000000000020 x15: 0000000000000002
[   44.234460] x14: ffff8000811a6370 x13: 0000000020000000 x12: 0000000000000000
[   44.242710] x11: ffff8000811a6370 x10: 0000000000000144 x9 : ffff8000811fe370
[   44.250959] x8 : 0000000000017fe8 x7 : 00000000fffff000 x6 : ffff8000811fe370
[   44.259206] x5 : 0000000000000000 x4 : 0000000000000000 x3 : 0000000000000000
[   44.267457] x2 : 0000000000000000 x1 : 0000000000000000 x0 : ffff000002203240
[   44.275703] Call trace:
[   44.279158] remove_vm_area (mm/vmalloc.c:3189 (discriminator 1))
[   44.283858] vfree (mm/vmalloc.c:3322)
[   44.287835] execmem_free (mm/execmem.c:70)
[   44.292347] bpf_jit_free_exec+0x10/0x1c
[   44.297283] bpf_prog_pack_free (kernel/bpf/core.c:1006)
[   44.302457] bpf_jit_binary_pack_free (kernel/bpf/core.c:1195)
[   44.307951] bpf_jit_free (include/linux/filter.h:1083 arch/arm64/net/bpf_jit_comp.c:2474)
[   44.312342] bpf_prog_free_deferred (kernel/bpf/core.c:2785)
[   44.317785] process_one_work (kernel/workqueue.c:3273)
[   44.322684] worker_thread (kernel/workqueue.c:3342 (discriminator 2) kernel/workqueue.c:3429 (discriminator 2))
[   44.327292] kthread (kernel/kthread.c:388)
[   44.331342] ret_from_fork (arch/arm64/kernel/entry.S:861)

The problem is because bpf_arch_text_copy() silently fails to write to the
read-only area as a result of patch_map() faulting and the resulting
-EFAULT being chucked away.

Update patch_map() to use CONFIG_EXECMEM instead of
CONFIG_STRICT_MODULE_RWX to check for vmalloc addresses.

Link: https://lkml.kernel.org/r/20240521213813.703309-1-rppt@kernel.org
Fixes: 2c9e5d4a0082 (""bpf: remove CONFIG_BPF_JIT dependency on CONFIG_MODULES of"")
Signed-off-by: Will Deacon <will@kernel.org>
Signed-off-by: Mike Rapoport (IBM) <rppt@kernel.org>
Reported-by: Klara Modin <klarasmodin@gmail.com>
Closes: https://lore.kernel.org/all/7983fbbf-0127-457c-9394-8d6e4299c685@gmail.com
Tested-by: Klara Modin <klarasmodin@gmail.com>
Cc: Björn Töpel <bjorn@kernel.org>
Cc: Luis Chamberlain <mcgrof@kernel.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
",,Fix handling of execmem addresses in arm64 patching to address a BPF_JIT warning when configured without modules.,"arm64, execmem, BPF_JIT",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2c1713a8f1c94033a6e00aae4693ab03e8a3b9f1,2c1713a8f1c94033a6e00aae4693ab03e8a3b9f1,Thomas Weißschuh,linux@weissschuh.net,1716044327,Daniel Borkmann,daniel@iogearbox.net,1716565472,a532036e561cc47497039c481b72c69d848a9968,99fa63d9ca60c4c1cc843fde205e4bc6e86b218f,"bpf: constify member bpf_sysctl_kern:: Table

The sysctl core is preparing to only expose instances of struct ctl_table
as ""const"". This will also affect the ctl_table argument of sysctl handlers","
for which bpf_sysctl_kern::table is also used.

As the function prototype of all sysctl handlers throughout the tree
needs to stay consistent that change will be done in one commit.

To reduce the size of that final commit","[' switch this utility type which\nis not bound by ""typedef proc_handler"" to ""const struct ctl_table"".\n\nNo functional change.\n\nSigned-off-by: Thomas Weißschuh <linux@weissschuh.net>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: Joel Granados <j.granados@samsung.com>\nLink: https://lore.kernel.org/bpf/20240518-sysctl-const-handler-bpf-v1-1-f0d7186743c1@weissschuh.net\n', '']",The commit modifies bpf_sysctl_kern to constify the table parameter in preparation for changes to sysctl handler consistency.,"bpf_sysctl_kern,constify,sysctl",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The syscall interface,"[""It's not related to any of the above.""]"
99fa63d9ca60c4c1cc843fde205e4bc6e86b218f,99fa63d9ca60c4c1cc843fde205e4bc6e86b218f,Xiao Wang,xiao.w.wang@intel.com,1716095107,Daniel Borkmann,daniel@iogearbox.net,1716565233,b9b2b76672511530c0a304e2b020ea804b333542,e944fc8152744a41dc62e720995538e48b053bb9,riscv," bpf: Try RVC for reg move within BPF_CMPXCHG JIT

We could try to emit compressed insn for reg move operation during CMPXCHG
JIT","[' the instruction compression has no impact on the jump offsets of\nfollowing forward and backward jump instructions.\n\nSigned-off-by: Xiao Wang <xiao.w.wang@intel.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Björn Töpel <bjorn@kernel.org>\nLink: https://lore.kernel.org/bpf/20240519050507.2217791-1-xiao.w.wang@intel.com\n', '']",The commit attempts to emit compressed instructions for register move operations during CMPXCHG JIT for RISC-V architecture.,"RISC-V,compressed,insn",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
e944fc8152744a41dc62e720995538e48b053bb9,e944fc8152744a41dc62e720995538e48b053bb9,Xiao Wang,xiao.w.wang@intel.com,1716434315,Daniel Borkmann,daniel@iogearbox.net,1716563816,f3e3ab4a55d73ebb1665384c0713b70ef29c07b8,c12603e76ef666ce5c51a9d6faf155c9e3de7601,riscv," bpf: Use STACK_ALIGN macro for size rounding up

Use the macro STACK_ALIGN that is defined in asm/processor.h for stack size
rounding up","[' just like bpf_jit_comp32.c does.\n\nSigned-off-by: Xiao Wang <xiao.w.wang@intel.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: Pu Lehui <pulehui@huawei.com>\nLink: https://lore.kernel.org/bpf/20240523031835.3977713-1-xiao.w.wang@intel.com\n', '']",The commit utilizes the STACK_ALIGN macro for stack size rounding up in the RISC-V architecture.,"STACK_ALIGN, stack, RISC-V",It's a performance optimization.,"Simple, can be used without much configuration. For example, a simple helper function.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
44382b3ed6b2787710c8ade06c0e97f5970a47c8,44382b3ed6b2787710c8ade06c0e97f5970a47c8,Friedrich Vock,friedrich.vock@gmx.de,1715670571,Daniel Borkmann,daniel@iogearbox.net,1716563532,ffd66a523cd4888ffba95883d30df99f22a9fb7d,8d00547ea8754afdc4a550af2fb7af2e3ba93cf8,"bpf: Fix potential integer overflow in resolve_btfids

err is a 32-bit integer", but elf_update returns an off_t,"[' which is 64-bit\nat least on 64-bit platforms. If symbols_patch is called on a binary between\n2-4GB in size', ' the result will be negative when cast to a 32-bit integer', '\nwhich the code assumes means an error occurred. This can wrongly trigger\nbuild failures when building very large kernel images.\n\nFixes: fbbb68de80a4 (""bpf: Add resolve_btfids tool to resolve BTF IDs in ELF object"")\nSigned-off-by: Friedrich Vock <friedrich.vock@gmx.de>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20240514070931.199694-1-friedrich.vock@gmx.de\n', '']",Fix potential integer overflow in resolve_btfids function.,"integer,overflow,resolve_btfids",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The BPF Type Format (BTF),"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
c12603e76ef666ce5c51a9d6faf155c9e3de7601,c12603e76ef666ce5c51a9d6faf155c9e3de7601,Xiao Wang,xiao.w.wang@intel.com,1715850270,Daniel Borkmann,daniel@iogearbox.net,1716562392,82fb7b57e3cd4b398760b135b4a6c7e916e26037,ecec1887e24f11a3fcc391aa0f33fe0802be0804,riscv," bpf: Optimize zextw insn with Zba extension

The Zba extension provides add.uw insn which can be used to implement
zext.w with rs2 set as ZERO.

Signed-off-by: Xiao Wang <xiao.w.wang@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Pu Lehui <pulehui@huawei.com>
Reviewed-by: Andrew Jones <ajones@ventanamicro.com>
Reviewed-by: Pu Lehui <pulehui@huawei.com>
Link: https://lore.kernel.org/bpf/20240516090430.493122-1-xiao.w.wang@intel.com
",[''],Optimize zextw instruction with Zba extension for RISC-V architecture.,"Zba extension,zextw,RISC-V",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
ecec1887e24f11a3fcc391aa0f33fe0802be0804,ecec1887e24f11a3fcc391aa0f33fe0802be0804,Martin KaFai Lau,martin.lau@kernel.org,1716498837,Martin KaFai Lau,martin.lau@kernel.org,1716498890,d730869ec1e4a9fbdf865f952e8fc26c28503f71,a87f34e742d279d54d529e4bc4763fdaab32a466 c34e3ab2a76e6a55a64e0d56acc5607062c2bad9,"Merge branch 'Replace mono_delivery_time with tstamp_type'

Abhishek Chauhan says:

====================
Patch 1 :- This patch takes care of only renaming the mono delivery
timestamp to tstamp_type with no change in functionality of
existing available code in kernel also
Starts assigning tstamp_type with either mono or real and
introduces a new enum in the skbuff.h"," again no change in functionality
of the existing available code in kernel ","[' just making the code scalable.\n\nPatch 2 :- Additional bit was added to support tai timestamp type to\navoid tstamp drops in the forwarding path when testing TC-ETF.\nPatch is also updating bpf filter.c\nSome updates to bpf header files with introduction to BPF_SKB_CLOCK_TAI\nand documentation updates stating deprecation of BPF_SKB_TSTAMP_UNSPEC\nand BPF_SKB_TSTAMP_DELIVERY_MONO\n\nPatch 3:- Handles forwarding of UDP packets with TAI clock id tstamp_type\ntype with supported changes for tc_redirect/tc_redirect_dtime\nto handle forwarding of UDP packets with TAI tstamp_type\n====================\n\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Renames mono delivery timestamp to tstamp_type without changing functionality in the kernel.,"rename,tstamp_type,enum",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
c34e3ab2a76e6a55a64e0d56acc5607062c2bad9,c34e3ab2a76e6a55a64e0d56acc5607062c2bad9,Abhishek Chauhan,quic_abchauha@quicinc.com,1715289514,Martin KaFai Lau,martin.lau@kernel.org,1716498883,d730869ec1e4a9fbdf865f952e8fc26c28503f71,1693c5db6ab8262e6f5263f9d211855959aa5acd,"selftests/bpf: Handle forwarding of UDP CLOCK_TAI packets

With changes in the design to forward CLOCK_TAI in the skbuff
framework","  existing selftest framework needs modification
to handle forwarding of UDP packets with CLOCK_TAI as clockid.

Signed-off-by: Abhishek Chauhan <quic_abchauha@quicinc.com>
Reviewed-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509211834.3235191-4-quic_abchauha@quicinc.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],Modified selftests/bpf to handle forwarding of UDP packets with CLOCK_TAI in the skbuff framework.,"selftests, UDP, CLOCK_TAI",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
a87f34e742d279d54d529e4bc4763fdaab32a466,a87f34e742d279d54d529e4bc4763fdaab32a466,Brad Cowie,brad@faucet.nz,1716354432,Martin KaFai Lau,martin.lau@kernel.org,1716415256,cb8876a56ce1b7a557e21a223cd6efb486799086,ece4b296904167336d0aaab26bd7122018835202,"selftests/bpf: Update tests for new ct zone opts for nf_conntrack kfuncs

Add test for allocating and looking up ct entry in a
non-default ct zone with kfuncs bpf_{xdp","skb}_ct_alloc
and bpf_{xdp","[""skb}_ct_lookup.\n\nAdd negative tests for looking up ct entry in a different\nct zone to where it was allocated and with a different\ndirection.\n\nUpdate reserved test for old struct definition to test for\nct_zone_id being set when opts size isn't NF_BPF_CT_OPTS_SZ (16).\n\nSigned-off-by: Brad Cowie <brad@faucet.nz>\nLink: https://lore.kernel.org/r/20240522050712.732558-2-brad@faucet.nz\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n"", '']",This commit updates self-tests for new connection tracking zone options in nf_conntrack kfuncs.,"self-tests, nf_conntrack, kfuncs",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['xdp like programs', 'tc/netfilter like programs']"
ece4b296904167336d0aaab26bd7122018835202,ece4b296904167336d0aaab26bd7122018835202,Brad Cowie,brad@faucet.nz,1716354431,Martin KaFai Lau,martin.lau@kernel.org,1716415256,1e76d69c55a244163bfdef543ad42410618ffb22,6c8d7598dfed759bf1d9d0322b4c2b42eb7252d8,"net: netfilter: Make ct zone opts configurable for bpf ct helpers

Add ct zone id and direction to bpf_ct_opts so that arbitrary ct zones
can be used for xdp/tc bpf ct helper functions bpf_{xdp","skb}_ct_alloc
and bpf_{xdp","['skb}_ct_lookup.\n\nSigned-off-by: Brad Cowie <brad@faucet.nz>\nLink: https://lore.kernel.org/r/20240522050712.732558-1-brad@faucet.nz\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Make connection tracking zone options configurable for BPF connection tracking helpers in xdp/tc programs.,"ct zone, bpf ct, netfilter",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,"['xdp like programs', 'tc/netfilter like programs']"
6c8d7598dfed759bf1d9d0322b4c2b42eb7252d8,6c8d7598dfed759bf1d9d0322b4c2b42eb7252d8,Geliang Tang,tanggeliang@kylinos.cn,1715926906,Andrii Nakryiko,andrii@kernel.org,1716314841,5026a8607e161c488dc372ab9f279f7c1894edbb,1b0215a3633a4c54ed7ec3af93e7a782dda8d965,"selftests/bpf: Fix prog numbers in test_sockmap

bpf_prog5 and bpf_prog7 are removed from progs/test_sockmap_kern.h in
commit d79a32129b21 (""bpf: Selftests"," remove prints from sockmap tests"")","['\nnow there are only 9 progs in it', ' not 11:\n\n\tSEC(""sk_skb1"")\n\tint bpf_prog1(struct __sk_buff *skb)\n\tSEC(""sk_skb2"")\n\tint bpf_prog2(struct __sk_buff *skb)\n\tSEC(""sk_skb3"")\n\tint bpf_prog3(struct __sk_buff *skb)\n\tSEC(""sockops"")\n\tint bpf_sockmap(struct bpf_sock_ops *skops)\n\tSEC(""sk_msg1"")\n\tint bpf_prog4(struct sk_msg_md *msg)\n\tSEC(""sk_msg2"")\n\tint bpf_prog6(struct sk_msg_md *msg)\n\tSEC(""sk_msg3"")\n\tint bpf_prog8(struct sk_msg_md *msg)\n\tSEC(""sk_msg4"")\n\tint bpf_prog9(struct sk_msg_md *msg)\n\tSEC(""sk_msg5"")\n\tint bpf_prog10(struct sk_msg_md *msg)\n\nThis patch updates the array sizes of prog_fd[]', ' prog_attach_type[] and\nprog_type[] from 11 to 9 accordingly.\n\nFixes: d79a32129b21 (""bpf: Selftests', ' remove prints from sockmap tests"")\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/9c10d9f974f07fcb354a43a8eca67acb2fafc587.1715926605.git.tanggeliang@kylinos.cn\n', '']",Fixes program numbering in selftests related to sockmap handling in BPF.,"selftests, sockmap, fix",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
1b0215a3633a4c54ed7ec3af93e7a782dda8d965,1b0215a3633a4c54ed7ec3af93e7a782dda8d965,Ying Zhang,yingzhang098@163.com,1716308222,Andrii Nakryiko,andrii@kernel.org,1716313699,301d934b4eb09ab3c45b71e446dab2b2f7ecaa42,f4aba3471cfb9ccf69b476463f19b4c50fef6b14,"bpf: Remove unused variable ""prev_state""

The variable ""prev_state"" is not used for any actual operations

v2: Fix commit message and description.

Signed-off-by: Ying Zhang <yingzhang098@163.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240521161702.4339-1-yingzhang098@163.com
",,"Remove the unused variable ""prev_state"" from the BPF codebase.","remove, unused, variable",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
f4aba3471cfb9ccf69b476463f19b4c50fef6b14,f4aba3471cfb9ccf69b476463f19b4c50fef6b14,Ivan Babrou,ivan@cloudflare.com,1716245509,Andrii Nakryiko,andrii@kernel.org,1716312988,d450f78e9d0d25957ef384db728470f20837a26c,6f130e4d4a5f7174f98300376f3994817ad7e21c,"bpftool: Un-const bpf_func_info to fix it for llvm 17 and newer

LLVM 17 started treating const structs as constants:

* https://github.com/llvm/llvm-project/commit/0b2d5b967d98

Combined with pointer laundering via ptr_to_u64", which takes a const ptr,"['\nbut in reality treats the underlying memory as mutable', ' this makes clang\nalways pass zero to btf__type_by_id', ' which breaks full name resolution.\n\nDisassembly before (LLVM 16) and after (LLVM 17):\n\n    -    8b 75 cc                 mov    -0x34(%rbp)', '%esi\n    -    e8 47 8d 02 00           call   3f5b0 <btf__type_by_id>\n    +    31 f6                    xor    %esi', ""%esi\n    +    e8 a9 8c 02 00           call   3f510 <btf__type_by_id>\n\nIt's a bigger project to fix this properly (and a question whether LLVM\nitself should detect this)"", "" but for right now let's just fix bpftool.\n\nFor more information"", ' see this thread in bpf mailing list:\n\n* https://lore.kernel.org/bpf/CABWYdi0ymezpYsQsPv7qzpx2fWuTkoD1-wG1eT-9x-TSREFrQg@mail.gmail.com/T/\n\nFixes: b662000aff84 (""bpftool: Adding support for BTF program names"")\nSigned-off-by: Ivan Babrou <ivan@cloudflare.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Nick Desaulniers <ndesaulniers@google.com>\nAcked-by: Yonghong Song <yonghong.song@linux.dev>\nLink: https://lore.kernel.org/bpf/20240520225149.5517-1-ivan@cloudflare.com\n', '']",This commit modifies bpftool to handle non-const bpf_func_info to ensure compatibility with LLVM version 17 and newer.,"bpftool, LLVM 17, bpf_func_info",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The bpftool utility,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
6f130e4d4a5f7174f98300376f3994817ad7e21c,6f130e4d4a5f7174f98300376f3994817ad7e21c,Mohammad Shehar Yaar Tausif,sheharyaar48@gmail.com,1715844251,Alexei Starovoitov,ast@kernel.org,1716054376,3d557fc55d69779ddc771515c05f96a2c719ecb3,34021caef79f76e70ac31247d321ecd0683c4939,"bpf: Fix order of args in call to bpf_map_kvcalloc

The original function call passed size of smap->bucket before the number of
buckets which raises the error 'calloc-transposed-args' on compilation.

Signed-off-by: Mohammad Shehar Yaar Tausif <sheharyaar48@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240516072411.42016-1-sheharyaar48@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Fix order of arguments in bpf_map_kvcalloc to resolve calloc-transposed-args compilation error.,"args, bpf_map_kvcalloc, calloc",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF maps,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
34021caef79f76e70ac31247d321ecd0683c4939,34021caef79f76e70ac31247d321ecd0683c4939,Alan Maguire,alan.maguire@oracle.com,1715704036,Alexei Starovoitov,ast@kernel.org,1716054376,b0fa2ab7294afb00d3ed9d81c4442cbd8767c372,e7b64f9d3f5b10186038201e0b91f734cbd7fc3d,kbuild," bpf: Use test-ge check for v1.25-only pahole

There is no need to set the pahole v1.25-only flags in an
""ifeq"" version clause; we are already in a <= v1.25 branch
of ""ifeq""","[' so that combined with a ""test-ge"" v1.25 ensures the\nflags will be applied for v1.25 only.\n\nSuggested-by: Masahiro Yamada <masahiroy@kernel.org>\nSigned-off-by: Alan Maguire <alan.maguire@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240514162716.2448265-1-alan.maguire@oracle.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Simplified kbuild configurations by removing redundant pahole version check for v1.25.,"kbuild,pahole,version",It's a build system or CI/CD change.,"Simple, can be used without much configuration. For example, a simple helper function.","It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.","[""It's not related to any of the above.""]"
e7b64f9d3f5b10186038201e0b91f734cbd7fc3d,e7b64f9d3f5b10186038201e0b91f734cbd7fc3d,Artem Savkov,asavkov@redhat.com,1715599618,Alexei Starovoitov,ast@kernel.org,1716054376,623e749b91a4c1148678d935ec1fc53a59b4fee8,94133cf24bb33889aac267a7f0e3e6a08b8a8e5a,"bpftool: Fix make dependencies for vmlinux.h

With pre-generated vmlinux.h there is no dependency on neither vmlinux
nor bootstrap bpftool. Define dependencies separately for both modes.
This avoids needless rebuilds in some corner cases.

Suggested-by: Jan Stancek <jstancek@redhat.com>
Signed-off-by: Artem Savkov <asavkov@redhat.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Quentin Monnet <qmo@kernel.org>
Link: https://lore.kernel.org/bpf/20240513112658.43691-1-asavkov@redhat.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Fix make dependencies for vmlinux.h in bpftool to avoid unnecessary rebuilds.,"bpftool,vmlinux,dependencies",It's a build system or CI/CD change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The bpftool utility,"[""It's not related to any of the above.""]"
94133cf24bb33889aac267a7f0e3e6a08b8a8e5a,94133cf24bb33889aac267a7f0e3e6a08b8a8e5a,Mykyta Yatsenko,yatsenko@meta.com,1715692341,Alexei Starovoitov,ast@kernel.org,1716054376,e216440a607c5efdce134e920c36aa633e941fc8,4b377b4868ef17b040065bd468668c707d2477a5,"bpftool: Introduce btf c dump sorting

Sort bpftool c dump output; aiming to simplify vmlinux.h diffing and
forcing more natural type definitions ordering.

Definitions are sorted first by their BTF kind ranks"," then by their base
type name and by their own name.

Type ranks

Assign ranks to btf kinds (defined in function btf_type_rank) to set
next order:
1. Anonymous enums/enums64
2. Named enums/enums64
3. Trivial types typedefs (ints","[' then floats)\n4. Structs/Unions\n5. Function prototypes\n6. Forward declarations\n\nType rank is set to maximum for unnamed reference types', ' structs and\nunions to avoid emitting those types early. They will be emitted as\npart of the type chain starting with named type.\n\nLexicographical ordering\n\nEach type is assigned a sort_name and own_name.\nsort_name is the resolved name of the final base type for reference\ntypes (typedef', ' pointer', ' array etc). Sorting by sort_name allows to\ngroup typedefs of the same base type. sort_name for non-reference type\nis the same as own_name. own_name is a direct name of particular type', '\nis used as final sorting step.\n\nSigned-off-by: Mykyta Yatsenko <yatsenko@meta.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nTested-by: Andrii Nakryiko <andrii@kernel.org>\nReviewed-by: Quentin Monnet <qmo@kernel.org>\nAcked-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240514131221.20585-1-yatsenko@meta.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Sorts bpftool's BTF c dump output to improve diffing and type ordering.,"bpftool, BTF, sorting",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The bpftool utility,"[""It's not related to any of the above.""]"
f08a1e912d3e60bf3028ea1c5199a609d12cd37c,f08a1e912d3e60bf3028ea1c5199a609d12cd37c,Linus Torvalds,torvalds@linux-foundation.org,1715997434,Linus Torvalds,torvalds@linux-foundation.org,1715997434,000756585151956ab074e1cb1ca1689bd9f82e0c,26aa834ff2eef00a863a64b1a94a5a88a94eb963 fe56d6e4a99a40f50e64d5a8043f1fa838b1f7a1,"Merge tag 'net-6.10-rc0' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 ""Current release - regressions:

   - virtio_net: fix missed error path rtnl_unlock after control queue
     locking rework

  Current release - new code bugs:

   - bpf: fix KASAN slab-out-of-bounds in percpu_array_map_gen_lookup","
     caused by missing nested map handling

   - drv: dsa: correct initialization order for KSZ88x3 ports

  Previous releases - regressions:

   - af_packet: do not call packet_read_pending() from
     tpacket_destruct_skb() fix performance regression

   - ipv6: fix route deleting failure when metric equals 0","[' don\'t assume\n     0 means not set / default in this case\n\n  Previous releases - always broken:\n\n   - bridge: couple of syzbot-driven fixes""\n\n* tag \'net-6.10-rc0\' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (30 commits)\n  selftests: net: local_termination: annotate the expected failures\n  net: dsa: microchip: Correct initialization order for KSZ88x3 ports\n  MAINTAINERS: net: Update reviewers for TI\'s Ethernet drivers\n  dt-bindings: net: ti: Update maintainers list\n  l2tp: fix ICMP error handling for UDP-encap sockets\n  net: txgbe: fix to control VLAN strip\n  net: wangxun: match VLAN CTAG and STAG features\n  net: wangxun: fix to change Rx features\n  af_packet: do not call packet_read_pending() from tpacket_destruct_skb()\n  virtio_net: Fix missed rtnl_unlock\n  netrom: fix possible dead-lock in nr_rt_ioctl()\n  idpf: don\'t skip over ethtool tcp-data-split setting\n  dt-bindings: net: qcom: ethernet: Allow dma-coherent\n  bonding: fix oops during rmmod\n  net/ipv6: Fix route deleting failure when metric equals 0\n  selftests/net: reduce xfrm_policy test time\n  selftests/bpf: Adjust btf_dump test to reflect recent change in file_operations\n  selftests/bpf: Adjust test_access_variable_array after a kernel function name change\n  selftests/net/lib: no need to record ns name if it already exist\n  net: qrtr: ns: Fix module refcnt\n  ...\n', '']",Merge with networking fixes including bug resolutions for bpf and virtio_net.,"networking, fixes, bpf",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['other']
91b6163be404e36baea39fc978e4739fd0448ebd,91b6163be404e36baea39fc978e4739fd0448ebd,Linus Torvalds,torvalds@linux-foundation.org,1715992284,Linus Torvalds,torvalds@linux-foundation.org,1715992284,584aa4e467f037bdab91c350ab83fbe4fd4e55fd,06f054b1fee83415fe35204845708988fc16ef22 a35dd3a786f57903151b18275b1eed105084cf72,"Merge tag 'sysctl-6.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/sysctl/sysctl

Pull sysctl updates from Joel Granados:

 - Remove sentinel elements from ctl_table structs in kernel/*

   Removing sentinels in ctl_table arrays reduces the build time size
   and runtime memory consumed by ~64 bytes per array. Removals for
   net/", io_uring/,"[' mm/', ' ipc/ and security/ are set to go into mainline\n   through their respective subsystems making the next release the most\n   likely place where the final series that removes the check for\n   proc_name == NULL will land.\n\n   This adds to removals already in arch/', ' drivers/ and fs/.\n\n - Adjust ctl_table definitions and references to allow constification\n     - Remove unused ctl_table function arguments\n     - Move non-const elements from ctl_table to ctl_table_header\n     - Make ctl_table pointers const in ctl_table_root structure\n\n   Making the static ctl_table structs const will increase safety by\n   keeping the pointers to proc_handler functions in .rodata. Though no\n   ctl_tables where made const in this PR', "" the ground work for making\n   that possible has started with these changes sent by Thomas\n   Weißschuh.\n\n* tag 'sysctl-6.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/sysctl/sysctl:\n  sysctl: drop now unnecessary out-of-bounds check\n  sysctl: move sysctl type to ctl_table_header\n  sysctl: drop sysctl_is_perm_empty_ctl_table\n  sysctl: treewide: constify argument ctl_table_root::permissions(table)\n  sysctl: treewide: drop unused argument ctl_table_root::set_ownership(table)\n  bpf: Remove the now superfluous sentinel elements from ctl_table array\n  delayacct: Remove the now superfluous sentinel elements from ctl_table array\n  kprobes: Remove the now superfluous sentinel elements from ctl_table array\n  printk: Remove the now superfluous sentinel elements from ctl_table array\n  scheduler: Remove the now superfluous sentinel elements from ctl_table array\n  seccomp: Remove the now superfluous sentinel elements from ctl_table array\n  timekeeping: Remove the now superfluous sentinel elements from ctl_table array\n  ftrace: Remove the now superfluous sentinel elements from ctl_table array\n  umh: Remove the now superfluous sentinel elements from ctl_table array\n  kernel misc: Remove the now superfluous sentinel elements from ctl_table array\n"", '']",Merge sysctl updates to remove sentinel elements from ctl_table structs for reduced memory and build time size.,"sysctl, ctl_table, memory reduction",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
52d94c180a9f6e586c8234b7feb7c8b9282f53c9,52d94c180a9f6e586c8234b7feb7c8b9282f53c9,Jakub Kicinski,kuba@kernel.org,1715906884,Jakub Kicinski,kuba@kernel.org,1715906884,702fd1fbb18eb6e2b24ec22a8fe9a7ff2e2286c1,83e93942796db58652288f0391ac00072401816f 51e2b8d33199df9675d2a36ec6aad0c27e91c6fe,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-05-17

We've added 7 non-merge commits during the last 2 day(s) which contain
a total of 8 files changed", 20 insertions(+),"[' 9 deletions(-).\n\nThe main changes are:\n\n1) Fix KASAN slab-out-of-bounds in percpu_array_map_gen_lookup and add\n   BPF selftests to cover this case', "" from Andrii Nakryiko.\n   (Report https://lore.kernel.org/bpf/20240514231155.1004295-1-kuba@kernel.org/)\n\n2) Fix two BPF selftests to adjust for kernel changes after fast-forwarding\n   Linus' tree to make BPF CI all green again"", ' from Martin KaFai Lau.\n\n3) Fix libbpf feature detectors when using token_fd by adjusting the\n   attribute size for memset to cover the former', "" also from Andrii Nakryiko.\n\n4) Fix the description of 'src' in ALU instructions for the BPF ISA\n   standardization doc"", "" from Puranjay Mohan.\n\n* tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:\n  selftests/bpf: Adjust btf_dump test to reflect recent change in file_operations\n  selftests/bpf: Adjust test_access_variable_array after a kernel function name change\n  selftests/bpf: add more variations of map-in-map situations\n  bpf: save extended inner map info for percpu array maps as well\n  MAINTAINERS: Update ARM64 BPF JIT maintainer\n  bpf"", "" docs: Fix the description of 'src' in ALU instructions\n  libbpf: fix feature detectors when using token_fd\n====================\n\nLink: https://lore.kernel.org/r/20240517001600.23703-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n"", '']",Merged updates from bpf repository containing 8 file changes.,"merge, bpf, updates",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
51e2b8d33199df9675d2a36ec6aad0c27e91c6fe,51e2b8d33199df9675d2a36ec6aad0c27e91c6fe,Martin KaFai Lau,martin.lau@kernel.org,1715877790,Daniel Borkmann,daniel@iogearbox.net,1715903411,21f89df0ecb1e63e64fe003247868ef0c80ccbee,5405807edd4168c2dc2f307f3c6b70e9579bf7be,"selftests/bpf: Adjust btf_dump test to reflect recent change in file_operations

The btf_dump test fails:

test_btf_dump_struct_data:FAIL:file_operations unexpected file_operations: actual '(struct file_operations){
	.owner = (struct module *)0xffffffffffffffff","
	.fop_flags = (fop_flags_t)4294967295","[""\n\t.llseek = (loff_t (*)(struct f' != expected '(struct file_operations){\n\t.owner = (struct module *)0xffffffffffffffff"", '\n\t.llseek = (loff_t (*)(struct file *', ' loff_t', ' int))0xffffffffffffffff', '\'\n\nThe ""fop_flags"" is a recent addition to the struct file_operations in\ncommit 210a03c9d51a (""fs: claw back a few FMODE_* bits"")\n\nThis patch changes the test_btf_dump_struct_data() to reflect\nthis change.\n\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: Alan Maguire <alan.maguire@oracle.com>\nLink: https://lore.kernel.org/bpf/20240516164310.2481460-1-martin.lau@linux.dev\n', '']",Adjust btf_dump selftest to align with changes in file_operations structure.,"btf_dump,test,file_operations",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
5405807edd4168c2dc2f307f3c6b70e9579bf7be,5405807edd4168c2dc2f307f3c6b70e9579bf7be,Martin KaFai Lau,martin.lau@kernel.org,1715878900,Daniel Borkmann,daniel@iogearbox.net,1715903296,13ec2950fd596482a337268eeede5f01ad0b05ec,2322113ac9d0c5653017adbab504fb307b0e92e2,"selftests/bpf: Adjust test_access_variable_array after a kernel function name change

After commit 4c3e509ea9f2 (""sched/balancing: Rename load_balance() => sched_balance_rq()"")","
the load_balance kernel function is renamed to sched_balance_rq.

This patch adjusts the fentry program in test_access_variable_array.c
to reflect this kernel function name change.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240516170140.2689430-1-martin.lau@linux.dev
",[''],Adjusts the bpf selftest for a changed kernel function name after a recent rename.,"selftests,bpf,sched_balance_rq",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tracepoints like programs']
a49468240e89628236b738b5ab9416eae8f90c15,a49468240e89628236b738b5ab9416eae8f90c15,Linus Torvalds,torvalds@linux-foundation.org,1715807108,Linus Torvalds,torvalds@linux-foundation.org,1715807108,aed63fd4ccb7bff9df171e469429e0c7eec5cc46,8c06da67d0bd3139a97f301b4aa9c482b9d4f29e 2c9e5d4a008293407836d29d35dfd4353615bd2f,"Merge tag 'modules-6.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/mcgrof/linux

Pull modules updates from Luis Chamberlain:
 ""Finally something fun. Mike Rapoport does some cleanup to allow us to
  take out module_alloc() out of modules into a new paint shedded
  execmem_alloc() and execmem_free() so to make emphasis these helpers
  are actually used outside of modules.

  It starts with a non-functional changes API rename / placeholders to
  then allow architectures to define their requirements into a new shiny
  struct execmem_info with ranges"," and requirements for those ranges.

  Archs now can intitialize this execmem_info as the last part of
  mm_core_init() if they have to diverge from the norm. Each range is a
  known type clearly articulated and spelled out in enum execmem_type.

  Although a lot of this is major cleanup and prep work for future
  enhancements an immediate clear gain is we get to enable KPROBES
  without MODULES now. That is ultimately what motiviated to pick this
  work up again","[' now with smaller goal as concrete stepping stone""\n\n* tag \'modules-6.10-rc1\' of git://git.kernel.org/pub/scm/linux/kernel/git/mcgrof/linux:\n  bpf: remove CONFIG_BPF_JIT dependency on CONFIG_MODULES of\n  kprobes: remove dependency on CONFIG_MODULES\n  powerpc: use CONFIG_EXECMEM instead of CONFIG_MODULES where appropriate\n  x86/ftrace: enable dynamic ftrace without CONFIG_MODULES\n  arch: make execmem setup available regardless of CONFIG_MODULES\n  powerpc: extend execmem_params for kprobes allocations\n  arm64: extend execmem_info for generated code allocations\n  riscv: extend execmem_params for generated code allocations\n  mm/execmem', ' arch: convert remaining overrides of module_alloc to execmem\n  mm/execmem', ' arch: convert simple overrides of module_alloc to execmem\n  mm: introduce execmem_alloc() and execmem_free()\n  module: make module_memory_{alloc', 'free} more self-contained\n  sparc: simplify module_alloc()\n  nios2: define virtual address space for modules\n  mips: module: rename MODULE_START to MODULES_VADDR\n  arm64: module: remove unneeded call to kasan_alloc_module_shadow()\n  kallsyms: replace deprecated strncpy with strscpy\n  module: allow UNUSED_KSYMS_WHITELIST to be relative against objtree.\n', '']",The commit integrates module updates for execmem helper functions and architecture execution memory info struct for future enhancements and kprobe enabling.,"execmem, cleanup, kprobes",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,['kprobe/uprobe/ftrace like programs']
2322113ac9d0c5653017adbab504fb307b0e92e2,2322113ac9d0c5653017adbab504fb307b0e92e2,Andrii Nakryiko,andrii@kernel.org,1715754280,Alexei Starovoitov,ast@kernel.org,1715790894,cdbd7b6721cdba8d2eed7c1a4d589537cd4862bb,9ee98229083186837199912a7debb666146b8c17,"selftests/bpf: add more variations of map-in-map situations

Add test cases validating usage of PERCPU_ARRAY and PERCPU_HASH maps as
inner maps.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Link: https://lore.kernel.org/r/20240515062440.846086-2-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Add test cases for using PERCPU_ARRAY and PERCPU_HASH maps as inner maps in selftests.,"test cases, inner maps, PERCPU",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
9ee98229083186837199912a7debb666146b8c17,9ee98229083186837199912a7debb666146b8c17,Andrii Nakryiko,andrii@kernel.org,1715754279,Alexei Starovoitov,ast@kernel.org,1715790894,ec01949d678ef183fc8ac9707ee5eaaeb7e62e04,325423cafc12031a69692363ddcabc63113bb3d6,"bpf: save extended inner map info for percpu array maps as well

ARRAY_OF_MAPS and HASH_OF_MAPS map types have special logic to save
a few extra fields required for correct operations of ARRAY maps"," when
they are used as inner maps. PERCPU_ARRAY maps have similar
requirements as they now support generating inline element lookup
logic. So make sure that both classes of maps are handled correctly.

Reported-by: Jakub Kicinski <kuba@kernel.org>
Fixes: db69718b8efa (""bpf: inline bpf_map_lookup_elem() for PERCPU_ARRAY maps"")
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Link: https://lore.kernel.org/r/20240515062440.846086-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],The commit extends inner map handling to include PERCPU_ARRAY maps for enhanced element lookup logic.,"inner map, PERCPU_ARRAY, element lookup",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF maps,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', 'other']"
7a8030057f6791d35dd20987f9ff15855c01c1bb,7a8030057f6791d35dd20987f9ff15855c01c1bb,Puranjay Mohan,puranjay@kernel.org,1715691783,Alexei Starovoitov,ast@kernel.org,1715790894,d569ed0747d2deac7a968b415e902b747b7b5f31,1de27bba6d50a909647f304eadc0f7c59a842a50,bpf," docs: Fix the description of 'src' in ALU instructions

An ALU instruction's source operand can be the value in the source
register or the 32-bit immediate value encoded in the instruction. This
is controlled by the 's' bit of the 'opcode'.

The current description explicitly uses the phrase 'value of the source
register' when defining the meaning of 'src'.

Change the description to use 'source operand' in place of 'value of the
source register'.

Signed-off-by: Puranjay Mohan <puranjay@kernel.org>
Acked-by: Dave Thaler <dthaler1968@gmail.com>
Link: https://lore.kernel.org/r/20240514130303.113607-1-puranjay@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Update documentation to clarify the description of the source operand in ALU instructions.,"ALU,instruction,operand",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.","It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.","[""It's not related to any of the above.""]"
1de27bba6d50a909647f304eadc0f7c59a842a50,1de27bba6d50a909647f304eadc0f7c59a842a50,Andrii Nakryiko,andrii@kernel.org,1715623683,Alexei Starovoitov,ast@kernel.org,1715790893,ebf60051d8cd8151960eadebf7d77a493a53d0d9,621cde16e49b3ecf7d59a8106a20aaebfb4a59a9,"libbpf: fix feature detectors when using token_fd

Adjust `union bpf_attr` size passed to kernel in two feature-detecting
functions to take into account prog_token_fd field.

Libbpf is avoiding memset()'ing entire `union bpf_attr` by only using
minimal set of bpf_attr's fields. Two places have been missed when
wiring BPF token support in libbpf's feature detection logic.

Fix them trivially.

Fixes: f3dcee938f48 (""libbpf: Wire up token_fd into feature probing logic"")
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240513180804.403775-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Fix feature detection logic in libbpf by adjusting bpf_attr size for token_fd support.,"libbpf,feature detection,token_fd",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
8bd67ebb50c0145fd2ca8681ab65eb7e8cde1afc,8bd67ebb50c0145fd2ca8681ab65eb7e8cde1afc,Nikolay Aleksandrov,razor@blackwall.org,1715596459,David S. Miller,davem@davemloft.net,1715769662,befe059e9e33254f9ed8cc9560ea46aa20bdd4a4,aea27a92a41dae14843f92c79e9e42d8f570105c,"net: bridge: xmit: make sure we have at least eth header len bytes

syzbot triggered an uninit value[1] error in bridge device's xmit path
by sending a short (less than ETH_HLEN bytes) skb. To fix it check if
we can actually pull that amount instead of assuming.

Tested with dropwatch:
 drop at: br_dev_xmit+0xb93/0x12d0 [bridge] (0xffffffffc06739b3)
 origin: software
 timestamp: Mon May 13 11:31:53 2024 778214037 nsec
 protocol: 0x88a8
 length: 2
 original length: 2
 drop reason: PKT_TOO_SMALL

[1]
BUG: KMSAN: uninit-value in br_dev_xmit+0x61d/0x1cb0 net/bridge/br_device.c:65
 br_dev_xmit+0x61d/0x1cb0 net/bridge/br_device.c:65
 __netdev_start_xmit include/linux/netdevice.h:4903 [inline]
 netdev_start_xmit include/linux/netdevice.h:4917 [inline]
 xmit_one net/core/dev.c:3531 [inline]
 dev_hard_start_xmit+0x247/0xa20 net/core/dev.c:3547
 __dev_queue_xmit+0x34db/0x5350 net/core/dev.c:4341
 dev_queue_xmit include/linux/netdevice.h:3091 [inline]
 __bpf_tx_skb net/core/filter.c:2136 [inline]
 __bpf_redirect_common net/core/filter.c:2180 [inline]
 __bpf_redirect+0x14a6/0x1620 net/core/filter.c:2187
 ____bpf_clone_redirect net/core/filter.c:2460 [inline]
 bpf_clone_redirect+0x328/0x470 net/core/filter.c:2432
 ___bpf_prog_run+0x13fe/0xe0f0 kernel/bpf/core.c:1997
 __bpf_prog_run512+0xb5/0xe0 kernel/bpf/core.c:2238
 bpf_dispatcher_nop_func include/linux/bpf.h:1234 [inline]
 __bpf_prog_run include/linux/filter.h:657 [inline]
 bpf_prog_run include/linux/filter.h:664 [inline]
 bpf_test_run+0x499/0xc30 net/bpf/test_run.c:425
 bpf_prog_test_run_skb+0x14ea/0x1f20 net/bpf/test_run.c:1058
 bpf_prog_test_run+0x6b7/0xad0 kernel/bpf/syscall.c:4269
 __sys_bpf+0x6aa/0xd90 kernel/bpf/syscall.c:5678
 __do_sys_bpf kernel/bpf/syscall.c:5767 [inline]
 __se_sys_bpf kernel/bpf/syscall.c:5765 [inline]
 __x64_sys_bpf+0xa0/0xe0 kernel/bpf/syscall.c:5765
 x64_sys_call+0x96b/0x3b50 arch/x86/include/generated/asm/syscalls_64.h:322
 do_syscall_x64 arch/x86/entry/common.c:52 [inline]
 do_syscall_64+0xcf/0x1e0 arch/x86/entry/common.c:83
 entry_SYSCALL_64_after_hwframe+0x77/0x7f

Fixes: 1da177e4c3f4 (""Linux-2.6.12-rc2"")
Reported-by: syzbot+a63a1f6a062033cf0f40@syzkaller.appspotmail.com
Closes: https://syzkaller.appspot.com/bug?extid=a63a1f6a062033cf0f40
Signed-off-by: Nikolay Aleksandrov <razor@blackwall.org>
Signed-off-by: David S. Miller <davem@davemloft.net>
",,Fix uninitialized value error in bridge xmit path by ensuring minimum Ethernet header length.,"bridge,xmit,error",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
1b294a1f35616977caddaddf3e9d28e576a1adbc,1b294a1f35616977caddaddf3e9d28e576a1adbc,Linus Torvalds,torvalds@linux-foundation.org,1715740944,Linus Torvalds,torvalds@linux-foundation.org,1715740944,723a406740083006b8f8724b5c5e532d4efa431d,b850dc206a57ae272c639e31ac202ec0c2f46960 654de42f3fc6edc29d743c1dbcd1424f7793f63d,"Merge tag 'net-next-6.10' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next

Pull networking updates from Jakub Kicinski:
 ""Core & protocols:

   - Complete rework of garbage collection of AF_UNIX sockets.

     AF_UNIX is prone to forming reference count cycles due to fd
     passing functionality. New method based on Tarjan's Strongly
     Connected Components algorithm should be both faster and remove a
     lot of workarounds we accumulated over the years.

   - Add TCP fraglist GRO support"," allowing chaining multiple TCP
     packets and forwarding them together. Useful for small switches /
     routers which lack basic checksum offload in some scenarios (e.g.
     PPPoE).

   - Support using SMP threads for handling packet backlog i.e. packet
     processing from software interfaces and old drivers which don't use
     NAPI. This helps move the processing out of the softirq jumble.

   - Continue work of converting from rtnl lock to RCU protection.

     Don't require rtnl lock when reading: IPv6 routing FIB","[' IPv6\n     address labels', ' netdev threaded NAPI sysfs files', "" bonding driver's\n     sysfs files"", ' MPLS devconf', ' IPv4 FIB rules', ' netns IDs', ' tcp metrics', '\n     TC Qdiscs', ' neighbor entries', ' ARP entries via ioctl(SIOCGARP)', ' a lot\n     of the link information available via rtnetlink.\n\n   - Small optimizations from Eric to UDP wake up handling', ' memory\n     accounting', ' RPS/RFS implementation', ' TCP packet sizing etc.\n\n   - Allow direct page recycling in the bulk API used by XDP', ' for +2%\n     PPS.\n\n   - Support peek with an offset on TCP sockets.\n\n   - Add MPTCP APIs for querying last time packets were received/sent/acked\n     and whether MPTCP ""upgrade"" succeeded on a TCP socket.\n\n   - Add intra-node communication shortcut to improve SMC performance.\n\n   - Add IPv6 (and IPv{4', '6}-over-IPv{4', '6}) support to the GTP protocol\n     driver.\n\n   - Add HSR-SAN (RedBOX) mode of operation to the HSR protocol driver.\n\n   - Add reset reasons for tracing what caused a TCP reset to be sent.\n\n   - Introduce direction attribute for xfrm (IPSec) states. State can be\n     used either for input or output packet processing.\n\n  Things we sprinkled into general kernel code:\n\n   - Add bitmap_{read', 'write}()', ' bitmap_size()', ' expose BYTES_TO_BITS().\n\n     This required touch-ups and renaming of a few existing users.\n\n   - Add Endian-dependent __counted_by_{le', 'be} annotations.\n\n   - Make building selftests ""quieter"" by printing summaries like\n     ""CC object.o"" rather than full commands with all the arguments.\n\n  Netfilter:\n\n   - Use GFP_KERNEL to clone elements', ' to deal better with OOM\n     situations and avoid failures in the .commit step.\n\n  BPF:\n\n   - Add eBPF JIT for ARCv2 CPUs.\n\n   - Support attaching kprobe BPF programs through kprobe_multi link in\n     a session mode', ' meaning', ' a BPF program is attached to both function\n     entry and return', ' the entry program can decide if the return\n     program gets executed and the entry program can share u64 cookie\n     value with return program. ""Session mode"" is a common use-case for\n     tetragon and bpftrace.\n\n   - Add the ability to specify and retrieve BPF cookie for raw\n     tracepoint programs in order to ease migration from classic to raw\n     tracepoints.\n\n   - Add an internal-only BPF per-CPU instruction for resolving per-CPU\n     memory addresses and implement support in x86', "" ARM64 and RISC-V\n     JITs. This allows inlining functions which need to access per-CPU\n     state.\n\n   - Optimize x86 BPF JIT's emit_mov_imm64"", "" and add support for various\n     atomics in bpf_arena which can be JITed as a single x86\n     instruction. Support BPF arena on ARM64.\n\n   - Add a new bpf_wq API for deferring events and refactor\n     process-context bpf_timer code to keep common code where possible.\n\n   - Harden the BPF verifier's and/or/xor value tracking.\n\n   - Introduce crypto kfuncs to let BPF programs call kernel crypto\n     APIs.\n\n   - Support bpf_tail_call_static() helper for BPF programs with GCC 13.\n\n   - Add bpf_preempt_{disable"", 'enable}() kfuncs in order to allow a BPF\n     program to have code sections where preemption is disabled.\n\n  Driver API:\n\n   - Skip software TC processing completely if all installed rules are\n     marked as HW-only', ' instead of checking the HW-only flag rule by\n     rule.\n\n   - Add support for configuring PoE (Power over Ethernet)', ' similar to\n     the already existing support for PoDL (Power over Data Line)\n     config.\n\n   - Initial bits of a queue control API', ' for now allowing a single\n     queue to be reset without disturbing packet flow to other queues.\n\n   - Common (ethtool) statistics for hardware timestamping.\n\n  Tests and tooling:\n\n   - Remove the need to create a config file to run the net forwarding\n     tests so that a naive ""make run_tests"" can exercise them.\n\n   - Define a method of writing tests which require an external endpoint\n     to communicate with (to send/receive data towards the test\n     machine). Add a few such tests.\n\n   - Create a shared code library for writing Python tests. Expose the\n     YAML Netlink library from tools/ to the tests for easy Netlink\n     access.\n\n   - Move netfilter tests under net/', ' extend them', ' separate performance\n     tests from correctness tests', ' and iron out issues found by running\n     them ""on every commit"".\n\n   - Refactor BPF selftests to use common network helpers.\n\n   - Further work filling in YAML definitions of Netlink messages for:\n     nftables', ' team driver', ' bonding interfaces', ' vlan interfaces', ' VF\n     info', ' TC u32 mark', ' TC police action.\n\n   - Teach Python YAML Netlink to decode attribute policies.\n\n   - Extend the definition of the ""indexed array"" construct in the specs\n     to cover arrays of scalars rather than just nests.\n\n   - Add hyperlinks between definitions in generated Netlink docs.\n\n  Drivers:\n\n   - Make sure unsupported flower control flags are rejected by drivers', '\n     and make more drivers report errors directly to the application\n     rather than dmesg (large number of driver changes from Asbjørn\n     Sloth Tønnesen).\n\n   - Ethernet high-speed NICs:\n      - Broadcom (bnxt):\n         - support multiple RSS contexts and steering traffic to them\n         - support XDP metadata\n         - make page pool allocations more NUMA aware\n      - Intel (100G', ' ice', ' idpf):\n         - extract datapath code common among Intel drivers into a library\n         - use fewer resources in switchdev by sharing queues with the PF\n         - add PFCP filter support\n         - add Ethernet filter support\n         - use a spinlock instead of HW lock in PTP clock ops\n         - support 5 layer Tx scheduler topology\n      - nVidia/Mellanox:\n         - 800G link modes and 100G SerDes speeds\n         - per-queue IRQ coalescing configuration\n      - Marvell Octeon:\n         - support offloading TC packet mark action\n\n   - Ethernet NICs consumer', ' embedded and virtual:\n      - stop lying about skb->truesize in USB Ethernet drivers', "" it\n        messes up TCP memory calculations\n      - Google cloud vNIC:\n         - support changing ring size via ethtool\n         - support ring reset using the queue control API\n      - VirtIO net:\n         - expose flow hash from RSS to XDP\n         - per-queue statistics\n         - add selftests\n      - Synopsys (stmmac):\n         - support controllers which require an RX clock signal from the\n           MII bus to perform their hardware initialization\n      - TI:\n         - icssg_prueth: support ICSSG-based Ethernet on AM65x SR1.0 devices\n         - icssg_prueth: add SW TX / RX Coalescing based on hrtimers\n         - cpsw: minimal XDP support\n      - Renesas (ravb):\n         - support describing the MDIO bus\n      - Realtek (r8169):\n         - add support for RTL8168M\n      - Microchip Sparx5:\n         - matchall and flower actions mirred and redirect\n\n   - Ethernet switches:\n      - nVidia/Mellanox:\n         - improve events processing performance\n      - Marvell:\n         - add support for MV88E6250 family internal PHYs\n      - Microchip:\n         - add DCB and DSCP mapping support for KSZ switches\n         - vsc73xx: convert to PHYLINK\n      - Realtek:\n         - rtl8226b/rtl8221b: add C45 instances and SerDes switching\n\n   - Many driver changes related to PHYLIB and PHYLINK deprecated API\n     cleanup\n\n   - Ethernet PHYs:\n      - Add a new driver for Airoha EN8811H 2.5 Gigabit PHY.\n      - micrel: lan8814: add support for PPS out and external timestamp trigger\n\n   - WiFi:\n      - Disable Wireless Extensions (WEXT) in all Wi-Fi 7 devices\n        drivers. Modern devices can only be configured using nl80211.\n      - mac80211/cfg80211\n         - handle color change per link for WiFi 7 Multi-Link Operation\n      - Intel (iwlwifi):\n         - don't support puncturing in 5 GHz\n         - support monitor mode on passive channels\n         - BZ-W device support\n         - P2P with HE/EHT support\n         - re-add support for firmware API 90\n         - provide channel survey information for Automatic Channel Selection\n      - MediaTek (mt76):\n         - mt7921 LED control\n         - mt7925 EHT radiotap support\n         - mt7920e PCI support\n      - Qualcomm (ath11k):\n         - P2P support for QCA6390"", ' WCN6855 and QCA2066\n         - support hibernation\n         - ieee80211-freq-limit Device Tree property support\n      - Qualcomm (ath12k):\n         - refactoring in preparation of multi-link support\n         - suspend and hibernation support\n         - ACPI support\n         - debugfs support', ' including dfs_simulate_radar support\n      - RealTek:\n         - rtw88: RTL8723CS SDIO device support\n         - rtw89: RTL8922AE Wi-Fi 7 PCI device support\n         - rtw89: complete features of new WiFi 7 chip 8922AE including\n           BT-coexistence and Wake-on-WLAN\n         - rtw89: use BIOS ACPI settings to set TX power and channels\n         - rtl8xxxu: enable Management Frame Protection (MFP) support\n\n   - Bluetooth:\n      - support for Intel BlazarI and Filmore Peak2 (BE201)\n      - support for MediaTek MT7921S SDIO\n      - initial support for Intel PCIe BT driver\n      - remove HCI_AMP support""\n\n* tag \'net-next-6.10\' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next: (1827 commits)\n  selftests: netfilter: fix packetdrill conntrack testcase\n  net: gro: fix napi_gro_cb zeroed alignment\n  Bluetooth: btintel_pcie: Refactor and code cleanup\n  Bluetooth: btintel_pcie: Fix warning reported by sparse\n  Bluetooth: hci_core: Fix not handling hdev->le_num_of_adv_sets=1\n  Bluetooth: btintel: Fix compiler warning for multi_v7_defconfig config\n  Bluetooth: btintel_pcie: Fix compiler warnings\n  Bluetooth: btintel_pcie: Add *setup* function to download firmware\n  Bluetooth: btintel_pcie: Add support for PCIe transport\n  Bluetooth: btintel: Export few static functions\n  Bluetooth: HCI: Remove HCI_AMP support\n  Bluetooth: L2CAP: Fix div-by-zero in l2cap_le_flowctl_init()\n  Bluetooth: qca: Fix error code in qca_read_fw_build_info()\n  Bluetooth: hci_conn: Use __counted_by() and avoid -Wfamnae warning\n  Bluetooth: btintel: Add support for Filmore Peak2 (BE201)\n  Bluetooth: btintel: Add support for BlazarI\n  LE Create Connection command timeout increased to 20 secs\n  dt-bindings: net: bluetooth: Add MediaTek MT7921S SDIO Bluetooth\n  Bluetooth: compute LE flow credits based on recvbuf space\n  Bluetooth: hci_sync: Use cmd->num_cis instead of magic number\n  ...\n', '']","Merge networking updates including AF_UNIX rework, TCP fraglist GRO support, and SMP threads usage for packet backlog.","networking, AF_UNIX, TCP",It's other type of commit.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
614da38e2f7afe9e01c6e359dfa09285f26fa381,614da38e2f7afe9e01c6e359dfa09285f26fa381,Linus Torvalds,torvalds@linux-foundation.org,1715724766,Linus Torvalds,torvalds@linux-foundation.org,1715724766,bd5b66bade4842bb1a8b2c55771c1d23398a1213,ce952d8f0e9b58dc6a2bde7e47ca7fa7925583cc c9c92fc4c2ef4e2f11af0ba19cb18d9b5e3e6f08,"Merge tag 'hid-for-linus-2024051401' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid

Pull HID updates from Jiri Kosina:

 - Firmware loading from host support in intel-ish driver"," needed to
   support Lunar Lake and later (Zhang Lixu)

 - updates to HID-BPF infrastructure","["" with some of the specific fixes\n   (e.g. rdesc fixups) abstracted into separate BPF programs for\n   consumption from libevdev/udev-hid-bpf (Benjamin Tissoires)\n\n - support for Deck IMU in hid-steam (Max Maisel)\n\n - fixes for better support of 3rd party playstation DS4 controllers\n   (Max Staudt)\n\n - support for missing mappings and codes from HUT 1.5 in hid-debug\n   (Thomas Kuehne)\n\n - initial support for ROG Ally and ROG X13 devices (Luke D. Jones)\n\n - full support for WinWing Orion2 (Ivan Gorinov)\n\n* tag 'hid-for-linus-2024051401' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid: (74 commits)\n  selftests/hid: skip tests with HID-BPF if udev-hid-bpf is not installed\n  selftests/hid: add tests for the Raptor Mach 2 joystick\n  selftests/hid: move the gamepads definitions in the test file\n  selftests/hid: import base_gamepad.py from hid-tools\n  selftests/hid: add Huion Kamvas Pro 19 tests\n  selftests/hid: tablets: also check for XP-Pen offset correction\n  selftests/hid: tablets: add a couple of XP-PEN tablets\n  selftests/hid: tablets: reduce the number of pen state\n  selftests/hid: add support for HID-BPF pre-loading before starting a test\n  selftests/hid: import base_device.py from hid-tools\n  HID: bpf: add in-tree HID-BPF fix for the Raptor Mach 2\n  HID: bpf: add in-tree HID-BPF fix for the Huion Kamvas Pro 19\n  HID: bpf: add in-tree HID-BPF fix for the XBox Elite 2 over Bluetooth\n  HID: bpf: add in-tree HID-BPF fix for the Wacom ArtPen\n  HID: bpf: add in-tree HID-BPF fix for the IOGear Kaliber Gaming MMOmentum mouse\n  HID: bpf: add in-tree HID-BPF fix for the HP Elite Presenter Mouse\n  HID: bpf: add in-tree HID-BPF fix for the XPPen Artist 16\n  HID: bpf: add first in-tree HID-BPF fix for the XPPen Artist 24\n  HID: do not assume HAT Switch logical max < 8\n  HID: amd_sfh: Use amd_get_c2p_val() to read C2P register\n  ...\n"", '']",Merge HID updates including intel-ish driver firmware loading support and HID-BPF infrastructure improvements.,"HID,BPF,firmware",It's a new feature.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",Other component related to eBPF but not listed above.,['HID driver like programs']
21c38a3bd4ee3fb7337d013a638302fb5e5f9dc2,21c38a3bd4ee3fb7337d013a638302fb5e5f9dc2,Jesper Dangaard Brouer,hawk@kernel.org,1714572251,Tejun Heo,tj@kernel.org,1715715797,ea18a93308d8c449aca46bcd10cc9f657a5e0542,c1457d9aad5ee2feafcf85aa9a58ab50500159d2,"cgroup/rstat: add cgroup_rstat_cpu_lock helpers and tracepoints

This closely resembles helpers added for the global cgroup_rstat_lock in
commit fc29e04ae1ad (""cgroup/rstat: add cgroup_rstat_lock helpers and
tracepoints""). This is for the per CPU lock cgroup_rstat_cpu_lock.

Based on production workloads"," we observe the fast-path ""update"" function
cgroup_rstat_updated() is invoked around 3 million times per sec","[' while the\n""flush"" function cgroup_rstat_flush_locked()', ' walking each possible CPU', '\ncan see periodic spikes of 700 invocations/sec.\n\nFor this reason', ' the tracepoints are split into normal and fastpath\nversions for this per-CPU lock. Making it feasible for production to\ncontinuously monitor the non-fastpath tracepoint to detect lock contention\nissues. The reason for monitoring is that lock disables IRQs which can\ndisturb e.g. softirq processing on the local CPUs involved. When the\nglobal cgroup_rstat_lock stops disabling IRQs (e.g converted to a mutex)', '\nthis per CPU lock becomes the next bottleneck that can introduce latency\nvariations.\n\nA practical bpftrace script for monitoring contention latency:\n\n bpftrace -e \'\n   tracepoint:cgroup:cgroup_rstat_cpu_lock_contended {\n     @start[tid]=nsecs; @cnt[probe]=count()}\n   tracepoint:cgroup:cgroup_rstat_cpu_locked {\n     if (args->contended) {\n       @wait_ns=hist(nsecs-@start[tid]); delete(@start[tid]);}\n     @cnt[probe]=count()}\n   interval:s:1 {time(""%H:%M:%S ""); print(@wait_ns); print(@cnt); clear(@cnt);}\'\n\nSigned-off-by: Jesper Dangaard Brouer <hawk@kernel.org>\nSigned-off-by: Tejun Heo <tj@kernel.org>\n', '']",Add cgroup_rstat_cpu_lock helpers and tracepoints for improved cgroup statistics locking efficiency.,"cgroup,helpers,tracepoints",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
e29fd84c5b49085cf27e1d5f27237d2fb19edefe,e29fd84c5b49085cf27e1d5f27237d2fb19edefe,Jiri Kosina,jkosina@suse.com,1715687089,Jiri Kosina,jkosina@suse.com,1715687089,b603f41d1b410d9c24ab34ab42e44edca819c43f,bc5fbae23a880ebe42d4843294667e932379fb71 89ea968a9d759f71ac7b8d50949a8e5e5bcb1111,"Merge branch 'for-6.10/hid-bpf' into for-linus

- updates to HID-BPF infrastructure"," with some of the specific
  fixes (e.g. rdesc fixups) abstracted into separate BPF programs
  for consumption by libevdev/udev-hid-bpf (Benjamin Tissoires)
",[''],Merges updates to the HID-BPF infrastructure including rdesc fixups abstracted into separate BPF programs.,"HID-BPF,infrastructure,fixups",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.","['HID driver like programs', ""It's not related to any of the above.""]"
2c9e5d4a008293407836d29d35dfd4353615bd2f,2c9e5d4a008293407836d29d35dfd4353615bd2f,Mike Rapoport (IBM),rppt@kernel.org,1714925188,Luis Chamberlain,mcgrof@kernel.org,1715672189,57adbf37570d251815cc352cd9b234b790e2562a,7582b7be16d0ba90e3dbd9575a730cabd9eb852a,"bpf: remove CONFIG_BPF_JIT dependency on CONFIG_MODULES of

BPF just-in-time compiler depended on CONFIG_MODULES because it used
module_alloc() to allocate memory for the generated code.

Since code allocations are now implemented with execmem"," drop dependency of
CONFIG_BPF_JIT on CONFIG_MODULES and make it select CONFIG_EXECMEM.

Suggested-by: Björn Töpel <bjorn@kernel.org>
Signed-off-by: Mike Rapoport (IBM) <rppt@kernel.org>
Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
",[''],"Remove CONFIG_BPF_JIT dependency on CONFIG_MODULES, now using CONFIG_EXECMEM for memory allocation.","BPF JIT, CONFIG_MODULES, CONFIG_EXECMEM",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
e2effa2235d9c7d0e9410637a2602bc69ee4f800,e2effa2235d9c7d0e9410637a2602bc69ee4f800,Mike Rapoport (IBM),rppt@kernel.org,1714925182,Luis Chamberlain,mcgrof@kernel.org,1715671903,59de3d23c841abf039cc08793a36fc1e8d245b6a,4d7b321a9ce0782a953874ec69acc2b12b9cb2cd,"arm64: extend execmem_info for generated code allocations

The memory allocations for kprobes and BPF on arm64 can be placed
anywhere in vmalloc address space and currently this is implemented with
overrides of alloc_insn_page() and bpf_jit_alloc_exec() in arm64.

Define EXECMEM_KPROBES and EXECMEM_BPF ranges in arm64::execmem_info and
drop overrides of alloc_insn_page() and bpf_jit_alloc_exec().

Signed-off-by: Mike Rapoport (IBM) <rppt@kernel.org>
Acked-by: Will Deacon <will@kernel.org>
Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
",,Enhance arm64 execmem_info for improved management of kprobes and BPF memory allocations.,"arm64, execmem_info, memory",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,['kprobe/uprobe/ftrace like programs']
4d7b321a9ce0782a953874ec69acc2b12b9cb2cd,4d7b321a9ce0782a953874ec69acc2b12b9cb2cd,Mike Rapoport (IBM),rppt@kernel.org,1714925181,Luis Chamberlain,mcgrof@kernel.org,1715671903,e8abfa527afe7d24a55eb9d6c3bee1d4e46fd511,223b5e57d0d50b0c07b933350dbcde92018d3080,"riscv: extend execmem_params for generated code allocations

The memory allocations for kprobes and BPF on RISC-V are not placed in
the modules area and these custom allocations are implemented with
overrides of alloc_insn_page() and  bpf_jit_alloc_exec().

Define MODULES_VADDR and MODULES_END as VMALLOC_START and VMALLOC_END for
32 bit and slightly reorder execmem_params initialization to support both
32 and 64 bit variants"," define EXECMEM_KPROBES and EXECMEM_BPF ranges in
riscv::execmem_params and drop overrides of alloc_insn_page() and
bpf_jit_alloc_exec().

Signed-off-by: Mike Rapoport (IBM) <rppt@kernel.org>
Reviewed-by: Alexandre Ghiti <alexghiti@rivosinc.com>
Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
",[''],Extend execmem_params for custom memory allocations for kprobes and BPF on RISC-V.,"execmem_params,RISC-V,BPF",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
17ca7fc22f4bbc795e4d136449521b2fecb88e06,17ca7fc22f4bbc795e4d136449521b2fecb88e06,Linus Torvalds,torvalds@linux-foundation.org,1715645627,Linus Torvalds,torvalds@linux-foundation.org,1715645627,a1bee109d288772d04c4832109593e0e736fc6e3,48fc82c40bc29a80361b1eab0e4a9494628a7144 854dd99b5ddc9d90e31e5f112462a5994dd31810,"Merge tag 'perf-core-2024-05-13' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip

Pull perf events updates from Ingo Molnar:

 - Combine perf and BPF for fast evalution of HW breakpoint
   conditions

 - Add LBR capture support outside of hardware events

 - Trigger IO signals for watermark_wakeup

 - Add RAPL support for Intel Arrow Lake and Lunar Lake

 - Optimize frequency-throttling

 - Miscellaneous cleanups & fixes

* tag 'perf-core-2024-05-13' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (21 commits)
  perf/bpf: Mark perf_event_set_bpf_handler() and perf_event_free_bpf_handler() as inline too
  selftests/perf_events: Test FASYNC with watermark wakeups
  perf/ring_buffer: Trigger IO signals for watermark_wakeup
  perf: Move perf_event_fasync() to perf_event.h
  perf/bpf: Change the !CONFIG_BPF_SYSCALL stubs to static inlines
  selftest/bpf: Test a perf BPF program that suppresses side effects
  perf/bpf: Allow a BPF program to suppress all sample side effects
  perf/bpf: Remove unneeded uses_default_overflow_handler()
  perf/bpf: Call BPF handler directly"," not through overflow machinery
  perf/bpf: Remove #ifdef CONFIG_BPF_SYSCALL from struct perf_event members
  perf/bpf: Create bpf_overflow_handler() stub for !CONFIG_BPF_SYSCALL
  perf/bpf: Reorder bpf_overflow_handler() ahead of __perf_event_overflow()
  perf/x86/rapl: Add support for Intel Lunar Lake
  perf/x86/rapl: Add support for Intel Arrow Lake
  perf/core: Reduce PMU access to adjust sample freq
  perf/core: Optimize perf_adjust_freq_unthr_context()
  perf/x86/amd: Don't reject non-sampling events with configured LBR
  perf/x86/amd: Support capturing LBR from software events
  perf/x86/amd: Avoid taking branches before disabling LBR
  perf/x86/amd: Ensure amd_pmu_core_disable_all() is always inlined
  ...
",[''],This commit merges perf updates including BPF integration for hardware breakpoint conditions and miscellaneous cleanups and optimizations.,"perf, BPF, optimizations",It's other type of commit.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
6e62702feb6d474e969b52f0379de93e9729e457,6e62702feb6d474e969b52f0379de93e9729e457,Jakub Kicinski,kuba@kernel.org,1715643622,Jakub Kicinski,kuba@kernel.org,1715643670,aa109c16cb31139adffc01d01e40e28275ce7507,afd29f36aaf733985df1ba162424581b8b8853b4 ba39486d2c43ba7c103c438540aa56c8bde3b6c7,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-05-13

We've added 119 non-merge commits during the last 14 day(s) which contain
a total of 134 files changed", 9462 insertions(+),"[' 4742 deletions(-).\n\nThe main changes are:\n\n1) Add BPF JIT support for 32-bit ARCv2 processors', ' from Shahab Vahedi.\n\n2) Add BPF range computation improvements to the verifier in particular\n   around XOR and OR operators', ' refactoring of checks for range computation\n   and relaxing MUL range computation so that src_reg can also be an unknown\n   scalar', ' from Cupertino Miranda.\n\n3) Add support to attach kprobe BPF programs through kprobe_multi link in\n   a session mode', ' meaning', ' a BPF program is attached to both function entry\n   and return', ' the entry program can decide if the return program gets\n   executed and the entry program can share u64 cookie value with return\n   program. Session mode is a common use-case for tetragon and bpftrace', ""\n   from Jiri Olsa.\n\n4) Fix a potential overflow in libbpf's ring__consume_n() and improve libbpf\n   as well as BPF selftest's struct_ops handling"", ' from Andrii Nakryiko.\n\n5) Improvements to BPF selftests in context of BPF gcc backend', '\n   from Jose E. Marchesi & David Faust.\n\n6) Migrate remaining BPF selftest tests from test_sock_addr.c to prog_test-\n   -style in order to retire the old test', ' run it in BPF CI and additionally\n   expand test coverage', ' from Jordan Rife.\n\n7) Big batch for BPF selftest refactoring in order to remove duplicate code\n   around common network helpers', ' from Geliang Tang.\n\n8) Another batch of improvements to BPF selftests to retire obsolete\n   bpf_tcp_helpers.h as everything is available vmlinux.h', '\n   from Martin KaFai Lau.\n\n9) Fix BPF map tear-down to not walk the map twice on free when both timer\n   and wq is used', ' from Benjamin Tissoires.\n\n10) Fix BPF verifier assumptions about socket->sk that it can be non-NULL', '\n    from Alexei Starovoitov.\n\n11) Change BTF build scripts to using --btf_features for pahole v1.26+', '\n    from Alan Maguire.\n\n12) Small improvements to BPF reusing struct_size() and krealloc_array()', '\n    from Andy Shevchenko.\n\n13) Fix s390 JIT to emit a barrier for BPF_FETCH instructions', '\n    from Ilya Leoshkevich.\n\n14) Extend TCP ->cong_control() callback in order to feed in ack and\n    flag parameters and allow write-access to tp->snd_cwnd_stamp\n    from BPF program', ' from Miao Xu.\n\n15) Add support for internal-only per-CPU instructions to inline\n    bpf_get_smp_processor_id() helper call for arm64 and riscv64 BPF JITs', '\n    from Puranjay Mohan.\n\n16) Follow-up to remove the redundant ethtool.h from tooling infrastructure', '\n    from Tushar Vyavahare.\n\n17) Extend libbpf to support ""module:<function>"" syntax for tracing\n    programs', "" from Viktor Malik.\n\n* tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next: (119 commits)\n  bpf: make list_for_each_entry portable\n  bpf: ignore expected GCC warning in test_global_func10.c\n  bpf: disable strict aliasing in test_global_func9.c\n  selftests/bpf: Free strdup memory in xdp_hw_metadata\n  selftests/bpf: Fix a few tests for GCC related warnings.\n  bpf: avoid gcc overflow warning in test_xdp_vlan.c\n  tools: remove redundant ethtool.h from tooling infra\n  selftests/bpf: Expand ATTACH_REJECT tests\n  selftests/bpf: Expand getsockname and getpeername tests\n  sefltests/bpf: Expand sockaddr hook deny tests\n  selftests/bpf: Expand sockaddr program return value tests\n  selftests/bpf: Retire test_sock_addr.(c|sh)\n  selftests/bpf: Remove redundant sendmsg test cases\n  selftests/bpf: Migrate ATTACH_REJECT test cases\n  selftests/bpf: Migrate expected_attach_type tests\n  selftests/bpf: Migrate wildcard destination rewrite test\n  selftests/bpf: Migrate sendmsg6 v4 mapped address tests\n  selftests/bpf: Migrate sendmsg deny test cases\n  selftests/bpf: Migrate WILDCARD_IP test\n  selftests/bpf: Handle SYSCALL_EPERM and SYSCALL_ENOTSUPP test cases\n  ...\n====================\n\nLink: https://lore.kernel.org/r/20240513134114.17575-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n"", '']",This commit merges multiple changes from the bpf-next branch into the main branch.,"merge, bpf-next, commit",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
c9f9df3f6347b33ae770747c40bae38836e3658c,c9f9df3f6347b33ae770747c40bae38836e3658c,Jakub Kicinski,kuba@kernel.org,1715631048,Jakub Kicinski,kuba@kernel.org,1715631048,3a4e7a54dcdeffc70d8482794207174982bfdb4d,1164057b3c0093240e45517d711da2d1fd86789a 3e9bc0472b910d4115e16e9c2d684c7757cb6c60,"Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-05-13

We've added 3 non-merge commits during the last 2 day(s) which contain
a total of 2 files changed", 62 insertions(+),"["" 8 deletions(-).\n\nThe main changes are:\n\n1) Fix a case where syzkaller found that it's unexpectedly possible\n   to attach a cgroup_skb program to the sockopt hooks. The fix adds\n   missing attach_type enforcement for the link_create case along\n   with selftests"", "" from Stanislav Fomichev.\n\n* tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:\n  selftests/bpf: Add sockopt case to verify prog_type\n  selftests/bpf: Extend sockopt tests to use BPF_LINK_CREATE\n  bpf: Add BPF_PROG_TYPE_CGROUP_SKB attach type enforcement in BPF_LINK_CREATE\n====================\n\nLink: https://lore.kernel.org/r/20240513041845.31040-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n"", '']",This commit merges changes from the bpf repository affecting 2 files with 62 insertions.,"bpf,merge,changes",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
c0b9620bc3f0a0f914996cc6631522d41870a9e0,c0b9620bc3f0a0f914996cc6631522d41870a9e0,Linus Torvalds,torvalds@linux-foundation.org,1715618946,Linus Torvalds,torvalds@linux-foundation.org,1715618946,8fdf2fed856bebe2c3e60302df3fb64cafa87339,736676f5c3abd1fc01c41813a95246e892937f6d 64619b283bb35b12a96129e82b40304f7e5551b7,"Merge tag 'rcu.next.v6.10' of https://github.com/urezki/linux

Pull RCU updates from Uladzislau Rezki:

 - Fix a lockdep complain for lazy-preemptible kernel"," remove redundant
   BH disable for TINY_RCU","[' remove redundant READ_ONCE() in tree.c', ' fix\n   false positives KCSAN splat and fix buffer overflow in the\n   print_cpu_stall_info().\n\n - Misc updates related to bpf', ' tracing and update the MAINTAINERS file.\n\n - An improvement of a normal synchronize_rcu() call in terms of\n   latency. It maintains a separate track for sync. users only. This\n   approach bypasses per-cpu nocb-lists thus sync-users do not depend on\n   nocb-list length and how fast regular callbacks are processed.\n\n - RCU tasks: switch tasks RCU grace periods to sleep at TASK_IDLE\n   priority', ' fix some comments', ' add some diagnostic warning to the\n   exit_tasks_rcu_start() and fix a buffer overflow in the\n   show_rcu_tasks_trace_gp_kthread().\n\n - RCU torture: Increase memory to guest OS', ' fix a Tasks Rude RCU\n   testing', ' some updates for TREE09', ' dump mode information to debug GP\n   kthread state', ' remove redundant READ_ONCE()', ' fix some comments about\n   RCU_TORTURE_PIPE_LEN and pipe_count', ' remove some redundant pointer\n   initialization', ' fix a hung splat task by when the rcutorture tests\n   start to exit', ' fix invalid context warning', "" add '--do-kvfree'\n   parameter to torture test and use slow register unregister callbacks\n   only for rcutype test.\n\n* tag 'rcu.next.v6.10' of https://github.com/urezki/linux: (48 commits)\n  rcutorture: Use rcu_gp_slow_register/unregister() only for rcutype test\n  torture: Scale --do-kvfree test time\n  rcutorture: Fix invalid context warning when enable srcu barrier testing\n  rcutorture: Make stall-tasks directly exit when rcutorture tests end\n  rcutorture: Removing redundant function pointer initialization\n  rcutorture: Make rcutorture support print rcu-tasks gp state\n  rcutorture: Use the gp_kthread_dbg operation specified by cur_ops\n  rcutorture: Re-use value stored to ->rtort_pipe_count instead of re-reading\n  rcutorture: Fix rcu_torture_one_read() pipe_count overflow comment\n  rcutorture: Remove extraneous rcu_torture_pipe_update_one() READ_ONCE()\n  rcu: Allocate WQ with WQ_MEM_RECLAIM bit set\n  rcu: Support direct wake-up of synchronize_rcu() users\n  rcu: Add a trace event for synchronize_rcu_normal()\n  rcu: Reduce synchronize_rcu() latency\n  rcu: Fix buffer overflow in print_cpu_stall_info()\n  rcu: Mollify sparse with RCU guard\n  rcu-tasks: Fix show_rcu_tasks_trace_gp_kthread buffer overflow\n  rcu-tasks: Fix the comments for tasks_rcu_exit_srcu_stall_timer\n  rcu-tasks: Replace exit_tasks_rcu_start() initialization with WARN_ON_ONCE()\n  rcu: Remove redundant CONFIG_PROVE_RCU #if condition\n  ...\n"", '']",Merge RCU updates to fix a lockdep complaint in lazy-preemptible kernel.,"RCU, lockdep, preemptible",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
ba39486d2c43ba7c103c438540aa56c8bde3b6c7,ba39486d2c43ba7c103c438540aa56c8bde3b6c7,Jose E. Marchesi,jose.marchesi@oracle.com,1715462563,Alexei Starovoitov,ast@kernel.org,1715560904,d948584d73987d413508c2ad82f3f7832494446b,6a2f786e6905007e82bac212296deca29815916d,"bpf: make list_for_each_entry portable

[Changes from V1:
- The __compat_break has been abandoned in favor of
  a more readable can_loop macro that can be used anywhere"," including
  loop conditions.]

The macro list_for_each_entry is defined in bpf_arena_list.h as
follows:

  #define list_for_each_entry(pos","[' head', ' member)\t\t\t\t\\\n\tfor (void * ___tmp = (pos = list_entry_safe((head)->first', '\t\t\\\n\t\t\t\t\t\t    typeof(*(pos))', ' member)', '\t\\\n\t\t\t      (void *)0);\t\t\t\t\t\\\n\t     pos && ({ ___tmp = (void *)pos->member.next; 1; });\t\t\\\n\t     cond_break', '\t\t\t\t\t\t\t\\\n\t     pos = list_entry_safe((void __arena *)___tmp', ' typeof(*(pos))', ' member))\n\nThe macro cond_break', ' in turn', "" expands to a statement expression that\ncontains a `break' statement.  Compound statement expressions"", "" and the\nsubsequent ability of placing statements in the header of a `for'\nloop"", ' are GNU extensions.\n\nUnfortunately', ' clang implements this GNU extension differently than\nGCC:\n\n- In GCC the `break\' statement is bound to the containing ""breakable""\n  context in which the defining `for\' appears.  If there is no such\n  context', "" GCC emits a warning: break statement without enclosing `for'\n  o `switch' statement.\n\n- In clang the `break' statement is bound to the defining `for'.  If\n  the defining `for' is itself inside some breakable construct"", ' then\n  clang emits a -Wgcc-compat warning.\n\nThis patch adds a new macro can_loop to bpf_experimental', ' that\nimplements the same logic than cond_break but evaluates to a boolean\nexpression.  The patch also changes all the current instances of usage\nof cond_break withing the header of loop accordingly.\n\nTested in bpf-next master.\nNo regressions.\n\nSigned-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>\nCc: david.faust@oracle.com\nCc: cupertino.miranda@oracle.com\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nLink: https://lore.kernel.org/r/20240511212243.23477-1-jose.marchesi@oracle.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Improves portability of list_for_each_entry macro in bpf_arena_list.h by using can_loop macro.,"list_for_each_entry, portability, can_loop",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
6a2f786e6905007e82bac212296deca29815916d,6a2f786e6905007e82bac212296deca29815916d,Jose E. Marchesi,jose.marchesi@oracle.com,1715462629,Alexei Starovoitov,ast@kernel.org,1715560284,b1caa94011a1eecff887b0d6bce42ea79b72c92a,73868988c90d2701587ab2a48b5858ab935afb17,"bpf: ignore expected GCC warning in test_global_func10.c

The BPF selftest global_func10 in progs/test_global_func10.c contains:

  struct Small {
  	long x;
  };

  struct Big {
  	long x;
  	long y;
  };

  [...]

  __noinline int foo(const struct Big *big)
  {
	if (!big)
		return 0;

	return bpf_get_prandom_u32() < big->y;
  }

  [...]

  SEC(""cgroup_skb/ingress"")
  __failure __msg(""invalid indirect access to stack"")
  int global_func10(struct __sk_buff *skb)
  {
	const struct Small small = {.x = skb->len };

	return foo((struct Big *)&small) ? 1 : 0;
  }

GCC emits a ""maybe uninitialized"" warning for the code above"," because
it knows `foo' accesses `big->y'.

Since the purpose of this selftest is to check that the verifier will
fail on this sort of invalid memory access","[' this patch just silences\nthe compiler warning.\n\nTested in bpf-next master.\nNo regressions.\n\nSigned-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>\nCc: david.faust@oracle.com\nCc: cupertino.miranda@oracle.com\nCc: Yonghong Song <yonghong.song@linux.dev>\nCc: Eduard Zingerman <eddyz87@gmail.com>\nLink: https://lore.kernel.org/r/20240511212349.23549-1-jose.marchesi@oracle.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit modifies a BPF selftest to ignore a specific GCC warning indicating uninitialized data access.,"BPF selftest, GCC warning, verifier",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['cgroup like programs']
73868988c90d2701587ab2a48b5858ab935afb17,73868988c90d2701587ab2a48b5858ab935afb17,Jose E. Marchesi,jose.marchesi@oracle.com,1715462533,Alexei Starovoitov,ast@kernel.org,1715560215,651bdcfb5aa1713c2a6acc32ff271dab95d8bc85,a3c1c95538e22283ef6fa529e3ffa0e6d47ee190,"bpf: disable strict aliasing in test_global_func9.c

The BPF selftest test_global_func9.c performs type punning and breaks
srict-aliasing rules.

In particular"," given:

  int global_func9(struct __sk_buff *skb)
  {
	int result = 0;

	[...]
	{
		const struct C c = {.x = skb->len","["" .y = skb->family };\n\n\t\tresult |= foo((const struct S *)&c);\n\t}\n  }\n\nWhen building with strict-aliasing enabled (the default) the\ninitialization of `c' gets optimized away in its entirely:\n\n\t[... no initialization of `c' ...]\n\tr1 = r10\n\tr1 += -40\n\tcall\tfoo\n\tw0 |= w6\n\nSince GCC knows that `foo' accesses s->x"", ' we get a ""maybe\nuninitialized"" warning.\n\nOn the other hand', "" when strict-aliasing is disabled GCC only optimizes\naway the store to `.y':\n\n\tr1 = *(u32 *) (r6+0)\n\t*(u32 *) (r10+-40) = r1  ; This is .x = skb->len in `c'\n\tr1 = r10\n\tr1 += -40\n\tcall\tfoo\n\tw0 |= w6\n\nIn this case the warning is not emitted"", ' because s-> is initialized.\n\nThis patch disables strict aliasing in this test when building with\nGCC.  clang seems to not optimize this particular code even when\nstrict aliasing is enabled.\n\nTested in bpf-next master.\n\nSigned-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>\nCc: david.faust@oracle.com\nCc: cupertino.miranda@oracle.com\nCc: Yonghong Song <yonghong.song@linux.dev>\nCc: Eduard Zingerman <eddyz87@gmail.com>\nLink: https://lore.kernel.org/r/20240511212213.23418-1-jose.marchesi@oracle.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Disable strict aliasing in test_global_func9.c due to type punning violations.,"disable, strict aliasing, selftest",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['xdp like programs', 'other']"
a3c1c95538e22283ef6fa529e3ffa0e6d47ee190,a3c1c95538e22283ef6fa529e3ffa0e6d47ee190,Geliang Tang,tanggeliang@kylinos.cn,1715417424,Alexei Starovoitov,ast@kernel.org,1715560122,eeb34020f3711932589566cb22bd238be943b34c,5ddafcc377f98778acc08f660dee6400aece6a62,"selftests/bpf: Free strdup memory in xdp_hw_metadata

The strdup() function returns a pointer to a new string which is a
duplicate of the string ""ifname"". Memory for the new string is obtained
with malloc()"," and need to be freed with free().

This patch adds this missing ""free(saved_hwtstamp_ifname)"" in cleanup()
to avoid a potential memory leak in xdp_hw_metadata.c.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/af9bcccb96655e82de5ce2b4510b88c9c8ed5ed0.1715417367.git.tanggeliang@kylinos.cn
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Fixes a potential memory leak by adding a missing free operation in xdp_hw_metadata.c.,"memory leak, free, strdup",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['xdp like programs']
5ddafcc377f98778acc08f660dee6400aece6a62,5ddafcc377f98778acc08f660dee6400aece6a62,Cupertino Miranda,cupertino.miranda@oracle.com,1715366330,Alexei Starovoitov,ast@kernel.org,1715559914,266a8d4e1c5a341804774203d4f761833ee66daf,792a04bed41caec79c787d105b0d442351b3bcc8,"selftests/bpf: Fix a few tests for GCC related warnings.

This patch corrects a few warnings to allow selftests to compile for
GCC.

-- progs/cpumask_failure.c --

progs/bpf_misc.h:136:22: error: ‘cpumask’ is used uninitialized
[-Werror=uninitialized]
  136 | #define __sink(expr) asm volatile("""" : ""+g""(expr))
      |                      ^~~
progs/cpumask_failure.c:68:9: note: in expansion of macro ‘__sink’
   68 |         __sink(cpumask);

The macro __sink(cpumask) with the '+' contraint modifier forces the
the compiler to expect a read and write from cpumask. GCC detects
that cpumask is never initialized and reports an error.
This patch removes the spurious non required definitions of cpumask.

-- progs/dynptr_fail.c --

progs/dynptr_fail.c:1444:9: error: ‘ptr1’ may be used uninitialized
[-Werror=maybe-uninitialized]
 1444 |         bpf_dynptr_clone(&ptr1"," &ptr2);

Many of the tests in the file are related to the detection of
uninitialized pointers by the verifier. GCC is able to detect possible
uninitialized values","[' and reports this as an error.\nThe patch initializes all of the previous uninitialized structs.\n\n-- progs/test_tunnel_kern.c --\n\nprogs/test_tunnel_kern.c:590:9: error: array subscript 1 is outside\narray bounds of ‘struct geneve_opt[1]’ [-Werror=array-bounds=]\n  590 |         *(int *) &gopt.opt_data = bpf_htonl(0xdeadbeef);\n      |         ^~~~~~~~~~~~~~~~~~~~~~~\nprogs/test_tunnel_kern.c:575:27: note: at offset 4 into object ‘gopt’ of\nsize 4\n  575 |         struct geneve_opt gopt;\n\nThis tests accesses beyond the defined data for the struct geneve_opt\nwhich contains as last field ""u8 opt_data[0]"" which clearly does not get\nreserved space (in stack) in the function header. This pattern is\nrepeated in ip6geneve_set_tunnel and geneve_set_tunnel functions.\nGCC is able to see this and emits a warning.\nThe patch introduces a local struct that allocates enough space to\nsafely allow the write to opt_data field.\n\n-- progs/jeq_infer_not_null_fail.c --\n\nprogs/jeq_infer_not_null_fail.c:21:40: error: array subscript ‘struct\nbpf_map[0]’ is partly outside array bounds of ‘struct <anonymous>[1]’\n[-Werror=array-bounds=]\n   21 |         struct bpf_map *inner_map = map->inner_map_meta;\n      |                                        ^~\nprogs/jeq_infer_not_null_fail.c:14:3: note: object ‘m_hash’ of size 32\n   14 | } m_hash SEC("".maps"");\n\nThis example defines m_hash in the context of the compilation unit and\ncasts it to struct bpf_map which is much smaller than the size of struct\nbpf_map. It errors out in GCC when it attempts to access an element that\nwould be defined in struct bpf_map outsize of the defined limits for\nm_hash.\nThis patch disables the warning through a GCC pragma.\n\nThis changes were tested in bpf-next master selftests without any\nregressions.\n\nSigned-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>\nCc: jose.marchesi@oracle.com\nCc: david.faust@oracle.com\nCc: Yonghong Song <yonghong.song@linux.dev>\nCc: Eduard Zingerman <eddyz87@gmail.com>\nCc: Andrii Nakryiko <andrii.nakryiko@gmail.com>\nLink: https://lore.kernel.org/r/20240510183850.286661-2-cupertino.miranda@oracle.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fixes GCC warnings in eBPF selftests for successful compilation.,"GCC,warnings,selftests",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
792a04bed41caec79c787d105b0d442351b3bcc8,792a04bed41caec79c787d105b0d442351b3bcc8,David Faust,david.faust@oracle.com,1715196912,Alexei Starovoitov,ast@kernel.org,1715559572,137c791ff42c5609a74e395ba1564373b2d0e8b2,bbe91a9f6889934e661fa924144c7023f0a1c4cf,"bpf: avoid gcc overflow warning in test_xdp_vlan.c

This patch fixes an integer overflow warning raised by GCC in
xdp_prognum1 of progs/test_xdp_vlan.c:

  GCC-BPF  [test_maps] test_xdp_vlan.bpf.o
progs/test_xdp_vlan.c: In function 'xdp_prognum1':
progs/test_xdp_vlan.c:163:25: error: integer overflow in expression
 '(short int)(((__builtin_constant_p((int)vlan_hdr->h_vlan_TCI)) != 0
   ? (int)(short unsigned int)((short int)((int)vlan_hdr->h_vlan_TCI
   << 8 >> 8) << 8 | (short int)((int)vlan_hdr->h_vlan_TCI << 0 >> 8
   << 0)) & 61440 : (int)__builtin_bswap16(vlan_hdr->h_vlan_TCI)
   & 61440) << 8 >> 8) << 8' of type 'short int' results in '0' [-Werror=overflow]
  163 |                         bpf_htons((bpf_ntohs(vlan_hdr->h_vlan_TCI) & 0xf000)
      |                         ^~~~~~~~~

The problem lies with the expansion of the bpf_htons macro and the
expression passed into it.  The bpf_htons macro (and similarly the
bpf_ntohs macro) expand to a ternary operation using either
__builtin_bswap16 or ___bpf_swab16 to swap the bytes"," depending on
whether the expression is constant.

For an expression","["" with 'value' as a u16"", "" like:\n\n  bpf_htons (value & 0xf000)\n\nThe entire (value & 0xf000) is 'x' in the expansion of ___bpf_swab16\nand we get as one part of the expanded swab16:\n\n  ((__u16)(value & 0xf000) << 8 >> 8 << 8\n\nThis will always evaluate to 0"", ' which is intentional since this\nsubexpression deals with the byte guaranteed to be 0 by the mask.\n\nHowever', ' GCC warns because the precise reason this always evaluates to 0\nis an overflow.  Specifically', ' the plain 0xf000 in the expression is a\nsigned 32-bit integer', "" which causes 'value' to also be promoted to a\nsigned 32-bit integer"", "" and the combination of the 8-bit left shift and\ndown-cast back to __u16 results in a signed overflow (really a 'warning:\noverflow in conversion from int to __u16' which is propegated up through\nthe rest of the expression leading to the ultimate overflow warning\nabove)"", ' which is a valid warning despite being the intended result of\nthis code.\n\nClang does not warn on this case', ' likely because it performs constant\nfolding later in the compilation process relative to GCC.  It seems that\nby the time clang does constant folding for this expression', ' the side of\nthe ternary with this overflow has already been discarded.\n\nFortunately', ' this warning is easily silenced by simply making the 0xf000\nmask explicitly unsigned.  This has no impact on the result.\n\nSigned-off-by: David Faust <david.faust@oracle.com>\nCc: jose.marchesi@oracle.com\nCc: cupertino.miranda@oracle.com\nCc: Eduard Zingerman <eddyz87@gmail.com>\nCc: Yonghong Song <yonghong.song@linux.dev>\nLink: https://lore.kernel.org/r/20240508193512.152759-1-david.faust@oracle.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Fixed GCC overflow warning in xdp_prognum1 function of test_xdp_vlan.c program.,GCC overflow warning,It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['xdp like programs']
e9dd2290f1fb9a46c1c0e322cb0e53cf914903fb,e9dd2290f1fb9a46c1c0e322cb0e53cf914903fb,Alexei Starovoitov,ast@kernel.org,1715559043,Alexei Starovoitov,ast@kernel.org,1715559053,1fc450c4a6ec6974c72b36ba0415d5086968ef6f,20a759df3bba35bf5c3ddec0c02ad69b603b584c a3d3eb957ddc733d04c0da67024b1c30d8826cc2,"Merge branch 'retire-progs-test_sock_addr'

Jordan Rife says:

====================
Retire progs/test_sock_addr.c

This patch series migrates remaining tests from bpf/test_sock_addr.c to
prog_tests/sock_addr.c and progs/verifier_sock_addr.c in order to fully
retire the old-style test program and expands test coverage to test
previously untested scenarios related to sockaddr hooks.

This is a continuation of the work started recently during the expansion
of prog_tests/sock_addr.c.

Link: https://lore.kernel.org/bpf/20240429214529.2644801-1-jrife@google.com/T/#u

=======
Patches
=======
* Patch 1 moves tests that check valid return values for recvmsg hooks
  into progs/verifier_sock_addr.c"," a new addition to the verifier test
  suite.
* Patches 2-5 lay the groundwork for test migration","[' enabling\n  prog_tests/sock_addr.c to handle more test dimensions.\n* Patches 6-11 move existing tests to prog_tests/sock_addr.c.\n* Patch 12 removes some redundant test cases.\n* Patches 14-17 expand on existing test coverage.\n====================\n\nLink: https://lore.kernel.org/r/20240510190246.3247730-1-jrife@google.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",This commit migrates tests from bpf/test_sock_addr.c to prog_tests for better test coverage of sockaddr hooks.,"test migration, sockaddr hooks, verifier",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', 'socket like programs', 'other']"
a3d3eb957ddc733d04c0da67024b1c30d8826cc2,a3d3eb957ddc733d04c0da67024b1c30d8826cc2,Jordan Rife,jrife@google.com,1715367754,Alexei Starovoitov,ast@kernel.org,1715559042,1fc450c4a6ec6974c72b36ba0415d5086968ef6f,bc467e953e4fbafd94d04c355f875bf1adf438e2,"selftests/bpf: Expand ATTACH_REJECT tests

This expands coverage for ATTACH_REJECT tests to include connect_unix","
sendmsg_unix","[' recvmsg*', ' getsockname*', ' and getpeername*.\n\nSigned-off-by: Jordan Rife <jrife@google.com>\nLink: https://lore.kernel.org/r/20240510190246.3247730-18-jrife@google.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Expanded the ATTACH_REJECT test coverage to include connect_unix.,"ATTACH_REJECT,test coverage,connect_unix",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
bc467e953e4fbafd94d04c355f875bf1adf438e2,bc467e953e4fbafd94d04c355f875bf1adf438e2,Jordan Rife,jrife@google.com,1715367753,Alexei Starovoitov,ast@kernel.org,1715559042,1c303bfb6d17fe713f8c0d371084c2e2fcf574b6,dfb7539b47b501ccc0d23bae718500ada2157aee,"selftests/bpf: Expand getsockname and getpeername tests

This expands coverage for getsockname and getpeername hooks to include
getsockname4", getsockname6,"[' getpeername4', ' and getpeername6.\n\nSigned-off-by: Jordan Rife <jrife@google.com>\nLink: https://lore.kernel.org/r/20240510190246.3247730-17-jrife@google.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",This commit expands test coverage for BPF getsockname and getpeername hooks.,"getsockname, getpeername, hooks",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
dfb7539b47b501ccc0d23bae718500ada2157aee,dfb7539b47b501ccc0d23bae718500ada2157aee,Jordan Rife,jrife@google.com,1715367752,Alexei Starovoitov,ast@kernel.org,1715559042,af8bfb396616fb4fff15762645efa514dfd30f89,1e0a8367c89f82816735973d0e65a3c8e1b43179,"sefltests/bpf: Expand sockaddr hook deny tests

This patch expands test coverage for EPERM tests to include connect and
bind calls and rounds out the coverage for sendmsg by adding tests for
sendmsg_unix.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-16-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,"This commit adds expanded selftests for EPERM scenarios involving connect, bind, and sendmsg_unix calls.","selftests, EPERM, sockaddr",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"[""It's not related to any of the above.""]"
1e0a8367c89f82816735973d0e65a3c8e1b43179,1e0a8367c89f82816735973d0e65a3c8e1b43179,Jordan Rife,jrife@google.com,1715367751,Alexei Starovoitov,ast@kernel.org,1715559042,c2b50ce15599374463efe748b96ed2cd6e440614,61ecfdfce2647281e7d14119bfa529922ce2d8b2,"selftests/bpf: Expand sockaddr program return value tests

This patch expands verifier coverage for program return values to cover
bind", connect,"[' sendmsg', ' getsockname', ' and getpeername hooks. It also\nrounds out the recvmsg coverage by adding test cases for recvmsg_unix\nhooks.\n\nSigned-off-by: Jordan Rife <jrife@google.com>\nLink: https://lore.kernel.org/r/20240510190246.3247730-15-jrife@google.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit expands verifier tests for sockaddr program return values to include bind operations.,"verifier,sockaddr,tests",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
61ecfdfce2647281e7d14119bfa529922ce2d8b2,61ecfdfce2647281e7d14119bfa529922ce2d8b2,Jordan Rife,jrife@google.com,1715367750,Alexei Starovoitov,ast@kernel.org,1715559042,997aa2cf1c46ece51417afec7e46b21785dbff2d,9c3f17862faef89696d26655a6d10f90137df42e,"selftests/bpf: Retire test_sock_addr.(c|sh)

Fully remove test_sock_addr.c and test_sock_addr.sh"," as test coverage
has been fully moved to prog_tests/sock_addr.c.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-14-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],The commit removes obsolete test files due to test coverage relocation.,"remove,test,coverage",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
9c3f17862faef89696d26655a6d10f90137df42e,9c3f17862faef89696d26655a6d10f90137df42e,Jordan Rife,jrife@google.com,1715367749,Alexei Starovoitov,ast@kernel.org,1715559042,75ad865e531f7337eff9b23d6bf134295e079a94,cded71f595c0c4396acc9657911c5aa2a289a8dc,"selftests/bpf: Remove redundant sendmsg test cases

Remove these test cases completely"," as the same behavior is already
covered by other sendmsg* test cases in prog_tests/sock_addr.c. This
just rewrites the destination address similar to sendmsg_v4_prog and
sendmsg_v6_prog.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-13-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Remove redundant sendmsg test cases in selftests/bpf.,"remove, sendmsg, test cases",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
cded71f595c0c4396acc9657911c5aa2a289a8dc,cded71f595c0c4396acc9657911c5aa2a289a8dc,Jordan Rife,jrife@google.com,1715367748,Alexei Starovoitov,ast@kernel.org,1715559042,0a19936a1008dd0e3c96b7e1aa76b8de24fffe00,b0f3af0bffefc54650d9fb10810fc2f974365dfd,"selftests/bpf: Migrate ATTACH_REJECT test cases

Migrate test case from bpf/test_sock_addr.c ensuring that program
attachment fails when using an inappropriate attach type.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-12-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Migrates ATTACH_REJECT test cases to ensure proper program attachment failure handling in selftests/bpf.,"migrate, ATTACH_REJECT, selftests",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['tc/netfilter like programs', ""It's not related to any of the above.""]"
b0f3af0bffefc54650d9fb10810fc2f974365dfd,b0f3af0bffefc54650d9fb10810fc2f974365dfd,Jordan Rife,jrife@google.com,1715367747,Alexei Starovoitov,ast@kernel.org,1715559042,d5e5c90bda48c70de53351c7e89eb8f805acdb4a,8eaf8056a44b28a7b198aa699e35854bbec2c452,"selftests/bpf: Migrate expected_attach_type tests

Migrates tests from progs/test_sock_addr.c ensuring that programs fail
to load when the expected attach type does not match.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-11-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,This commit migrates bpf selftests to ensure program loading fails with incorrect attach types.,"migrate, selftests, expected_attach_type",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
8eaf8056a44b28a7b198aa699e35854bbec2c452,8eaf8056a44b28a7b198aa699e35854bbec2c452,Jordan Rife,jrife@google.com,1715367746,Alexei Starovoitov,ast@kernel.org,1715559041,bfaf6231145318930d61fed08e34f4e6fabfb1e2,54462e8452f139e313e315959e005408cd31a4e6,"selftests/bpf: Migrate wildcard destination rewrite test

Migrate test case from bpf/test_sock_addr.c ensuring that sendmsg
respects when sendmsg6 hooks rewrite the destination IP with the IPv6
wildcard IP"," [::].

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-10-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],The commit migrates a test case to ensure sendmsg hooks handle IPv6 wildcard IPs correctly.,"migrate,test case,sendmsg",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
54462e8452f139e313e315959e005408cd31a4e6,54462e8452f139e313e315959e005408cd31a4e6,Jordan Rife,jrife@google.com,1715367745,Alexei Starovoitov,ast@kernel.org,1715559041,734c9bbfac75e3c226610c0fc0fb57fab175a173,f46a10483b27cc5a62b45e7e727445de6430e785,"selftests/bpf: Migrate sendmsg6 v4 mapped address tests

Migrate test case from bpf/test_sock_addr.c ensuring that sendmsg
returns -ENOTSUPP when sending to an IPv4-mapped IPv6 address to
prog_tests/sock_addr.c.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-9-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Migrate IPv4-mapped IPv6 address test cases from bpf/test_sock_addr.c to prog_tests/sock_addr.c.,"migrate, test case, sock_addr",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
f46a10483b27cc5a62b45e7e727445de6430e785,f46a10483b27cc5a62b45e7e727445de6430e785,Jordan Rife,jrife@google.com,1715367744,Alexei Starovoitov,ast@kernel.org,1715559041,1bdf6bd6397d830524dc4dc6eb215300688a5040,d1b24fcf1c16290ce8cac467be2f7d6773de9da4,"selftests/bpf: Migrate sendmsg deny test cases

This set of tests checks that sendmsg calls are rejected (return -EPERM)
when the sendmsg* hook returns 0. Replace those in bpf/test_sock_addr.c
with corresponding tests in prog_tests/sock_addr.c.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-8-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Migrate sendmsg deny test cases from bpf/test_sock_addr.c to prog_tests/sock_addr.c.,"migrate,test cases,sendmsg",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
d1b24fcf1c16290ce8cac467be2f7d6773de9da4,d1b24fcf1c16290ce8cac467be2f7d6773de9da4,Jordan Rife,jrife@google.com,1715367743,Alexei Starovoitov,ast@kernel.org,1715559041,7bbbbab98e166d7c223e7dc38e2fe3cace4885ca,a2618c0d854235deaac2325cf8200a55274afa2b,"selftests/bpf: Migrate WILDCARD_IP test

Move wildcard IP sendmsg test case out of bpf/test_sock_addr.c into
prog_tests/sock_addr.c.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-7-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Migrated WILDCARD_IP test case to a new location in the source tree.,"Migrate,test,WILDCARD_IP",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
a2618c0d854235deaac2325cf8200a55274afa2b,a2618c0d854235deaac2325cf8200a55274afa2b,Jordan Rife,jrife@google.com,1715367742,Alexei Starovoitov,ast@kernel.org,1715559041,acd965f32b49da9fcaa8dfaf856b360d37113a9b,5a047b2226c0511d4528d1467dc90f08fffafc38,"selftests/bpf: Handle SYSCALL_EPERM and SYSCALL_ENOTSUPP test cases

In preparation to move test cases from bpf/test_sock_addr.c that expect
system calls to return ENOTSUPP or EPERM"," this patch propagates errno
from relevant system calls up to test_sock_addr() where the result can
be checked.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-6-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],The commit updates selftests for bpf to handle SYSCALL_EPERM and SYSCALL_ENOTSUPP cases in test_sock_addr.c.,"selftests, SYSCALL_EPERM, SYSCALL_ENOTSUPP",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
5a047b2226c0511d4528d1467dc90f08fffafc38,5a047b2226c0511d4528d1467dc90f08fffafc38,Jordan Rife,jrife@google.com,1715367741,Alexei Starovoitov,ast@kernel.org,1715559041,97c820a06655716e8ae686bec0c0ddc5b7310d72,5eff48f33fb733de9b88a5381e0428f3e873c670,"selftests/bpf: Handle ATTACH_REJECT test cases

In preparation to move test cases from bpf/test_sock_addr.c that expect
ATTACH_REJECT"," this patch adds BPF_SKEL_FUNCS_RAW to generate load and
destroy functions that use bpf_prog_attach() to control the attach_type.

The normal load functions use bpf_program__attach_cgroup which does not
have the same degree of control over the attach type","[' as\nbpf_program_attach_fd() calls bpf_link_create() with the attach type\nextracted from prog using bpf_program__expected_attach_type(). It is\ncurrently not possible to modify the attach type before\nbpf_program__attach_cgroup() is called', ' since\nbpf_program__set_expected_attach_type() has no effect after the program\nis loaded.\n\nSigned-off-by: Jordan Rife <jrife@google.com>\nLink: https://lore.kernel.org/r/20240510190246.3247730-5-jrife@google.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",This commit enhances selftests/bpf by handling ATTACH_REJECT test cases and improving attach type control in BPF skeleton functions.,"selftests,bpf,ATTACH_REJECT",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['cgroup like programs']
5eff48f33fb733de9b88a5381e0428f3e873c670,5eff48f33fb733de9b88a5381e0428f3e873c670,Jordan Rife,jrife@google.com,1715367740,Alexei Starovoitov,ast@kernel.org,1715559041,d83fbefb3068454dfc046b54263ea10fefc3bcc6,86b65c6db0190fb6c119e83da4de0eccf74fb1ff,"selftests/bpf: Handle LOAD_REJECT test cases

In preparation to move test cases from bpf/test_sock_addr.c that expect
LOAD_REJECT"," this patch adds expected_attach_type and extends load_fn to
accept an expected attach type and a flag indicating whether or not
rejection is expected.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-4-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Handle LOAD_REJECT test cases in selftests/bpf by adding expected_attach_type and extending load_fn function.,"LOAD_REJECT,test cases,expected_attach_type",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', ""It's not related to any of the above.""]"
86b65c6db0190fb6c119e83da4de0eccf74fb1ff,86b65c6db0190fb6c119e83da4de0eccf74fb1ff,Jordan Rife,jrife@google.com,1715367739,Alexei Starovoitov,ast@kernel.org,1715559040,260233ae794c406a0ac93a68de34ba2da6c15ba1,73964e9085bbea517a675d5d8ceeb1e609a34748,"selftests/bpf: Use program name for skel load/destroy functions

In preparation to migrate tests from bpf/test_sock_addr.c to
sock_addr.c"," update BPF_SKEL_FUNCS so that it generates functions
based on prog_name instead of skel_name. This allows us to differentiate
between programs in the same skeleton.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-3-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],"The commit updates BPF_SKEL_FUNCS to use program names for load/destroy functions in bpf self-tests, aiding migration of test_sock_addr to sock_addr.","BPF_SKEL_FUNCS, self-tests, program names",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
73964e9085bbea517a675d5d8ceeb1e609a34748,73964e9085bbea517a675d5d8ceeb1e609a34748,Jordan Rife,jrife@google.com,1715367738,Alexei Starovoitov,ast@kernel.org,1715559040,4e1246b3751bee60f2020a3ca71dec5c7c2e12d8,20a759df3bba35bf5c3ddec0c02ad69b603b584c,"selftests/bpf: Migrate recvmsg* return code tests to verifier_sock_addr.c

This set of tests check that the BPF verifier rejects programs with
invalid return codes (recvmsg4 and recvmsg6 hooks can only return 1).
This patch replaces the tests in test_sock_addr.c with
verifier_sock_addr.c", a new verifier prog_tests for sockaddr hooks,"[' in a\nstep towards fully retiring test_sock_addr.c.\n\nSigned-off-by: Jordan Rife <jrife@google.com>\nLink: https://lore.kernel.org/r/20240510190246.3247730-2-jrife@google.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Migrate and verify BPF tests for recvmsg return codes to verifier_sock_addr.c.,"BPF verifier, recvmsg, tests",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
ea558c86248b4955e5c5f3c0c921df450880605e,ea558c86248b4955e5c5f3c0c921df450880605e,Namhyung Kim,namhyung@kernel.org,1714433827,Arnaldo Carvalho de Melo,acme@redhat.com,1715558992,156c03a9f1da0c3b7ff5952fca1ebf0eb5d04ca2,d9c5f5f94c2d356fdf3503f7fcaf254512bc032d,"tools lib subcmd: Show parent options in help

I've just realized that help message in a subcommand didn't show one
in the parent command.  Since the option parser understands the parent","
display code should do the same.  For example","[' `perf ftrace latency -h`\nshould show options in the `perf ftrace` command too.\n\nBefore:\n\n  $ perf ftrace latency -h\n\n   Usage: perf ftrace [<options>] [<command>]\n      or: perf ftrace [<options>] -- [<command>] [<options>]\n      or: perf ftrace {trace|latency} [<options>] [<command>]\n      or: perf ftrace {trace|latency} [<options>] -- [<command>] [<options>]\n\n      -b', ' --use-bpf         Use BPF to measure function latency\n      -n', ' --use-nsec        Use nano-second histogram\n      -T', ' --trace-funcs <func>\n                            Show latency of given function\n\nAfter:\n\n  $ perf ftrace latency -h\n\n   Usage: perf ftrace [<options>] [<command>]\n      or: perf ftrace [<options>] -- [<command>] [<options>]\n      or: perf ftrace {trace|latency} [<options>] [<command>]\n      or: perf ftrace {trace|latency} [<options>] -- [<command>] [<options>]\n\n      -a', ' --all-cpus        System-wide collection from all CPUs\n      -b', ' --use-bpf         Use BPF to measure function latency\n      -C', ' --cpu <cpu>       List of cpus to monitor\n      -n', ' --use-nsec        Use nano-second histogram\n      -p', ' --pid <pid>       Trace on existing process id\n      -T', ' --trace-funcs <func>\n                            Show latency of given function\n      -v', ' --verbose         Be more verbose\n          --tid <tid>       Trace on existing thread id (exclusive to --pid)\n\nReviewed-by: Ian Rogers <irogers@google.com>\nSigned-off-by: Namhyung Kim <namhyung@kernel.org>\nCc: Adrian Hunter <adrian.hunter@intel.com>\nCc: Ingo Molnar <mingo@kernel.org>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Kan Liang <kan.liang@linux.intel.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nLink: https://lore.kernel.org/r/20240429233707.1511175-1-namhyung@kernel.org\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>\n', '']",Updated help message to show parent options in subcommands for tools library.,"help, subcommand, parser",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"[""It's not related to any of the above.""]"
20a759df3bba35bf5c3ddec0c02ad69b603b584c,20a759df3bba35bf5c3ddec0c02ad69b603b584c,Puranjay Mohan,puranjay@kernel.org,1714940193,Alexei Starovoitov,ast@kernel.org,1715558406,7006fd829bd640badfba46ab78baa7c03ff5f4d8,80c5a07ae673a740ef7ef0fe1ab588075a25ce8d,riscv," bpf: make some atomic operations fully ordered

The BPF atomic operations with the BPF_FETCH modifier along with
BPF_XCHG and BPF_CMPXCHG are fully ordered but the RISC-V JIT implements
all atomic operations except BPF_CMPXCHG with relaxed ordering.

Section 8.1 of the ""The RISC-V Instruction Set Manual Volume I:
Unprivileged ISA"" [1]","[' titled', ' ""Specifying Ordering of Atomic\nInstructions"" says:\n\n| To provide more efficient support for release consistency [5]', ' each\n| atomic instruction has two bits', ' aq and rl', ' used to specify additional\n| memory ordering constraints as viewed by other RISC-V harts.\n\nand\n\n| If only the aq bit is set', ' the atomic memory operation is treated as\n| an acquire access.\n| If only the rl bit is set', ' the atomic memory operation is treated as a\n| release access.\n|\n| If both the aq and rl bits are set', ' the atomic memory operation is\n| sequentially consistent.\n\nFix this by setting both aq and rl bits as 1 for operations with\nBPF_FETCH and BPF_XCHG.\n\n[1] https://riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf\n\nFixes: dd642ccb45ec (""riscv', ' bpf: Implement more atomic operations for RV64"")\nSigned-off-by: Puranjay Mohan <puranjay@kernel.org>\nReviewed-by: Pu Lehui <pulehui@huawei.com>\nLink: https://lore.kernel.org/r/20240505201633.123115-1-puranjay@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",RISC-V JIT updates atomic operations to be fully ordered in BPF contexts.,"RISC-V, atomic, JIT",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
80c5a07ae673a740ef7ef0fe1ab588075a25ce8d,80c5a07ae673a740ef7ef0fe1ab588075a25ce8d,Xiao Wang,xiao.w.wang@intel.com,1715080578,Alexei Starovoitov,ast@kernel.org,1715558203,3ee3909d6464aedf22dd0fa25d3407eec9ed0dfb,68378982f0b21de02ac3c6a11e2420badefcb4bc,riscv," bpf: Fix typo in comment

We can use either ""instruction"" or ""insn"" in the comment.

Signed-off-by: Xiao Wang <xiao.w.wang@intel.com>
Reviewed-by: Pu Lehui <pulehui@huawei.com>
Link: https://lore.kernel.org/r/20240507111618.437121-1-xiao.w.wang@intel.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Fix a typo in a comment for the RISC-V architecture support in eBPF.,"typo,fixed,comment",It's a documentation change or typo fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
68378982f0b21de02ac3c6a11e2420badefcb4bc,68378982f0b21de02ac3c6a11e2420badefcb4bc,Ilya Leoshkevich,iii@linux.ibm.com,1715040169,Alexei Starovoitov,ast@kernel.org,1715558157,21098308f0f3465e5e38a20e7bd06c2735b7dad5,55302bc1ca64160fec4dfa25e52142691ecb5dcd,"s390/bpf: Emit a barrier for BPF_FETCH instructions

BPF_ATOMIC_OP() macro documentation states that ""BPF_ADD | BPF_FETCH""
should be the same as atomic_fetch_add()"," which is currently not the
case on s390x: the serialization instruction ""bcr 14","['0"" is missing.\nThis applies to ""and""', ' ""or"" and ""xor"" variants too.\n\ns390x is allowed to reorder stores with subsequent fetches from\ndifferent addresses', ' so code relying on BPF_FETCH acting as a barrier', '\nfor example:\n\n  stw [%r0]', ' 1\n  afadd [%r1]', ' %r2\n  ldxw %r3', ' [%r4]\n\nmay be broken. Fix it by emitting ""bcr 14', '0"".\n\nNote that a separate serialization instruction is not needed for\nBPF_XCHG and BPF_CMPXCHG', ' because COMPARE AND SWAP performs\nserialization itself.\n\nFixes: ba3b86b9cef0 (""s390/bpf: Implement new atomic ops"")\nReported-by: Puranjay Mohan <puranjay12@gmail.com>\nCloses: https://lore.kernel.org/bpf/mb61p34qvq3wf.fsf@kernel.org/\nSigned-off-by: Ilya Leoshkevich <iii@linux.ibm.com>\nReviewed-by: Puranjay Mohan <puranjay@kernel.org>\nLink: https://lore.kernel.org/r/20240507000557.12048-1-iii@linux.ibm.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']","The commit addresses a serialization issue on s390x with BPF_FETCH instructions, ensuring proper atomic operations.","s390,bpf,atomic",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
55302bc1ca64160fec4dfa25e52142691ecb5dcd,55302bc1ca64160fec4dfa25e52142691ecb5dcd,Alexei Starovoitov,ast@kernel.org,1715558074,Alexei Starovoitov,ast@kernel.org,1715558075,fd23f2dc376d2db2d93c1831ad0abae58eb0868e,f122668ddcce450c2585f0be4bf4478d6fd6176b 75fe4c0b3e181f5e3b990128013ac192fdfd4012,"Merge branch 'bpf-inline-helpers-in-arm64-and-riscv-jits'

Puranjay Mohan says:

====================
bpf: Inline helpers in arm64 and riscv JITs

Changes in v5 -> v6:
arm64 v5: https://lore.kernel.org/all/20240430234739.79185-1-puranjay@kernel.org/
riscv v2: https://lore.kernel.org/all/20240430175834.33152-1-puranjay@kernel.org/
- Combine riscv and arm64 changes in single series
- Some coding style fixes

Changes in v4 -> v5:
v4: https://lore.kernel.org/all/20240429131647.50165-1-puranjay@kernel.org/
- Implement the inlining of the bpf_get_smp_processor_id() in the JIT.

NOTE: This needs to be based on:
https://lore.kernel.org/all/20240430175834.33152-1-puranjay@kernel.org/
to be built.

Manual run of bpf-ci with this series rebased on above:
https://github.com/kernel-patches/bpf/pull/6929

Changes in v3 -> v4:
v3: https://lore.kernel.org/all/20240426121349.97651-1-puranjay@kernel.org/
- Fix coding style issue related to C89 standards.

Changes in v2 -> v3:
v2: https://lore.kernel.org/all/20240424173550.16359-1-puranjay@kernel.org/
- Fixed the xlated dump of percpu mov to ""r0 = &(void __percpu *)(r0)""
- Made ARM64 and x86-64 use the same code for inlining. The only difference
  that remains is the per-cpu address of the cpu_number.

Changes in v1 -> v2:
v1: https://lore.kernel.org/all/20240405091707.66675-1-puranjay12@gmail.com/
- Add a patch to inline bpf_get_smp_processor_id()
- Fix an issue in MRS instruction encoding as pointed out by Will
- Remove CONFIG_SMP check because arm64 kernel always compiles with CONFIG_SMP

This series adds the support of internal only per-CPU instructions and inlines
the bpf_get_smp_processor_id() helper call for ARM64 and RISC-V BPF JITs.

Here is an example of calls to bpf_get_smp_processor_id() and
percpu_array_map_lookup_elem() before and after this series on ARM64.

                                         BPF
                                        =====
              BEFORE                                       AFTER
             --------                                     -------

int cpu = bpf_get_smp_processor_id();           int cpu = bpf_get_smp_processor_id();
(85) call bpf_get_smp_processor_id#229032       (85) call bpf_get_smp_processor_id#8

p = bpf_map_lookup_elem(map", &zero);            p = bpf_map_lookup_elem(map,"[' &zero);\n(18) r1 = map[id:78]                            (18) r1 = map[id:153]\n(18) r2 = map[id:82][0]+65536                   (18) r2 = map[id:157][0]+65536\n(85) call percpu_array_map_lookup_elem#313512   (07) r1 += 496\n                                                (61) r0 = *(u32 *)(r2 +0)\n                                                (35) if r0 >= 0x1 goto pc+5\n                                                (67) r0 <<= 3\n                                                (0f) r0 += r1\n                                                (79) r0 = *(u64 *)(r0 +0)\n                                                (bf) r0 = &(void __percpu *)(r0)\n                                                (05) goto pc+1\n                                                (b7) r0 = 0\n\n                                      ARM64 JIT\n                                     ===========\n\n              BEFORE                                       AFTER\n             --------                                     -------\n\nint cpu = bpf_get_smp_processor_id();           int cpu = bpf_get_smp_processor_id();\nmov     x10', ' #0xfffffffffffff4d0                mrs     x10', ' sp_el0\nmovk    x10', ' #0x802b', ' lsl #16                   ldr     w7', ' [x10', ' #24]\nmovk    x10', ' #0x8000', ' lsl #32\nblr     x10\nadd     x7', ' x0', ' #0x0\n\np = bpf_map_lookup_elem(map', ' &zero);            p = bpf_map_lookup_elem(map', ' &zero);\nmov     x0', ' #0xffff0003ffffffff                 mov     x0', ' #0xffff0003ffffffff\nmovk    x0', ' #0xce5c', ' lsl #16                    movk    x0', ' #0xe0f3', ' lsl #16\nmovk    x0', ' #0xca00                             movk    x0', ' #0x7c00\nmov     x1', ' #0xffff8000ffffffff                 mov     x1', ' #0xffff8000ffffffff\nmovk    x1', ' #0x8bdb', ' lsl #16                    movk    x1', ' #0xb0c7', ' lsl #16\nmovk    x1', ' #0x6000                             movk    x1', ' #0xe000\nmov     x10', ' #0xffffffffffff3ed0                add     x0', ' x0', ' #0x1f0\nmovk    x10', ' #0x802d', ' lsl #16                   ldr     w7', ' [x1]\nmovk    x10', ' #0x8000', ' lsl #32                   cmp     x7', ' #0x1\nblr     x10                                     b.cs    0x0000000000000090\nadd     x7', ' x0', ' #0x0                            lsl     x7', ' x7', ' #3\n                                                add     x7', ' x7', ' x0\n                                                ldr     x7', ' [x7]\n                                                mrs     x10', ' tpidr_el1\n                                                add     x7', ' x7', ' x10\n                                                b       0x0000000000000094\n                                                mov     x7', ' #0x0\n\n              Performance improvement found using benchmark[1]\n\n./benchs/run_bench_trigger.sh glob-arr-inc arr-inc hash-inc\n\n  +---------------+-------------------+-------------------+--------------+\n  |      Name     |      Before       |        After      |   % change   |\n  |---------------+-------------------+-------------------+--------------|\n  | glob-arr-inc  | 23.380 ± 1.675M/s | 25.893 ± 0.026M/s |   + 10.74%   |\n  | arr-inc       | 23.928 ± 0.034M/s | 25.213 ± 0.063M/s |   + 5.37%    |\n  | hash-inc      | 12.352 ± 0.005M/s | 12.609 ± 0.013M/s |   + 2.08%    |\n  +---------------+-------------------+-------------------+--------------+\n\n[1] https://github.com/anakryiko/linux/commit/8dec900975ef\n\n             RISCV64 JIT output for `call bpf_get_smp_processor_id`\n            =======================================================\n\n                  Before                           After\n                 --------                         -------\n\n           auipc   t1', '0x848c                  ld    a5', '32(tp)\n           jalr    604(t1)\n           mv      a5', 'a0\n\n  Benchmark using [1] on Qemu.\n\n  ./benchs/run_bench_trigger.sh glob-arr-inc arr-inc hash-inc\n\n  +---------------+------------------+------------------+--------------+\n  |      Name     |     Before       |       After      |   % change   |\n  |---------------+------------------+------------------+--------------|\n  | glob-arr-inc  | 1.077 ± 0.006M/s | 1.336 ± 0.010M/s |   + 24.04%   |\n  | arr-inc       | 1.078 ± 0.002M/s | 1.332 ± 0.015M/s |   + 23.56%   |\n  | hash-inc      | 0.494 ± 0.004M/s | 0.653 ± 0.001M/s |   + 32.18%   |\n  +---------------+------------------+------------------+--------------+\n====================\n\nLink: https://lore.kernel.org/r/20240502151854.9810-1-puranjay@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit merges inline helper support for ARM64 and RISC-V JITs in the BPF subsystem.,"inline helpers, ARM64, RISC-V",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
75fe4c0b3e181f5e3b990128013ac192fdfd4012,75fe4c0b3e181f5e3b990128013ac192fdfd4012,Puranjay Mohan,puranjay@kernel.org,1714663134,Alexei Starovoitov,ast@kernel.org,1715558074,fd23f2dc376d2db2d93c1831ad0abae58eb0868e,7a4c32222b0e14349a6311e72bf6ebd3e1d1064b,bpf," arm64: inline bpf_get_smp_processor_id() helper

Inline calls to bpf_get_smp_processor_id() helper in the JIT by emitting
a read from struct thread_info. The SP_EL0 system register holds the
pointer to the task_struct and thread_info is the first member of this
struct. We can read the cpu number from the thread_info.

Here is how the ARM64 JITed assembly changes after this commit:

                                      ARM64 JIT
                                     ===========

              BEFORE                                    AFTER
             --------                                  -------

int cpu = bpf_get_smp_processor_id();        int cpu = bpf_get_smp_processor_id();

mov     x10","[' #0xfffffffffffff4d0             mrs     x10', ' sp_el0\nmovk    x10', ' #0x802b', ' lsl #16                ldr     w7', ' [x10', ' #24]\nmovk    x10', ' #0x8000', ' lsl #32\nblr     x10\nadd     x7', ' x0', ' #0x0\n\n               Performance improvement using benchmark[1]\n\n./benchs/run_bench_trigger.sh glob-arr-inc arr-inc hash-inc\n\n+---------------+-------------------+-------------------+--------------+\n|      Name     |      Before       |        After      |   % change   |\n|---------------+-------------------+-------------------+--------------|\n| glob-arr-inc  | 23.380 ± 1.675M/s | 25.893 ± 0.026M/s |   + 10.74%   |\n| arr-inc       | 23.928 ± 0.034M/s | 25.213 ± 0.063M/s |   + 5.37%    |\n| hash-inc      | 12.352 ± 0.005M/s | 12.609 ± 0.013M/s |   + 2.08%    |\n+---------------+-------------------+-------------------+--------------+\n\n[1] https://github.com/anakryiko/linux/commit/8dec900975ef\n\nSigned-off-by: Puranjay Mohan <puranjay@kernel.org>\nAcked-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20240502151854.9810-5-puranjay@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Inline calls to bpf_get_smp_processor_id in ARM64 JIT using thread_info.,"inline,JIT,ARM64",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
7a4c32222b0e14349a6311e72bf6ebd3e1d1064b,7a4c32222b0e14349a6311e72bf6ebd3e1d1064b,Puranjay Mohan,puranjay12@gmail.com,1714663133,Alexei Starovoitov,ast@kernel.org,1715558074,9ddaf85ad93083fce7617d27bdae282c52eb2e16,2ddec2c80b4402c293c7e6e0881cecaaf77e8cec,arm64," bpf: add internal-only MOV instruction to resolve per-CPU addrs

Support an instruction for resolving absolute addresses of per-CPU
data from their per-CPU offsets. This instruction is internal-only and
users are not allowed to use them directly. They will only be used for
internal inlining optimizations for now between BPF verifier and BPF
JITs.

Since commit 7158627686f0 (""arm64: percpu: implement optimised pcpu
access using tpidr_el1"")","[' the per-cpu offset for the CPU is stored in\nthe tpidr_el1/2 register of that CPU.\n\nTo support this BPF instruction in the ARM64 JIT', ' the following ARM64\ninstructions are emitted:\n\nmov dst', ' src\t\t// Move src to dst', ' if src != dst\nmrs tmp', ' tpidr_el1/2\t// Move per-cpu offset of the current cpu in tmp.\nadd dst', ' dst', ' tmp\t// Add the per cpu offset to the dst.\n\nTo measure the performance improvement provided by this change', ' the\nbenchmark in [1] was used:\n\nBefore:\nglob-arr-inc   :   23.597 ± 0.012M/s\narr-inc        :   23.173 ± 0.019M/s\nhash-inc       :   12.186 ± 0.028M/s\n\nAfter:\nglob-arr-inc   :   23.819 ± 0.034M/s\narr-inc        :   23.285 ± 0.017M/s\nhash-inc       :   12.419 ± 0.011M/s\n\n[1] https://github.com/anakryiko/linux/commit/8dec900975ef\n\nSigned-off-by: Puranjay Mohan <puranjay12@gmail.com>\nAcked-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20240502151854.9810-4-puranjay@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Add internal-only MOV instruction for resolving absolute addresses of per-CPU data for inlining optimizations in BPF verifier and JITs on arm64.,"MOV instruction, per-CPU, optimization",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2ddec2c80b4402c293c7e6e0881cecaaf77e8cec,2ddec2c80b4402c293c7e6e0881cecaaf77e8cec,Puranjay Mohan,puranjay@kernel.org,1714663132,Alexei Starovoitov,ast@kernel.org,1715558074,89aee6a00fc8312f43c2fae605a8e0a4c9062721,19c56d4e5be102cd118162b9f72d9c6d353e76fc,riscv," bpf: inline bpf_get_smp_processor_id()

Inline the calls to bpf_get_smp_processor_id() in the riscv bpf jit.

RISCV saves the pointer to the CPU's task_struct in the TP (thread
pointer) register. This makes it trivial to get the CPU's processor id.
As thread_info is the first member of task_struct","[' we can read the\nprocessor id from TP + offsetof(struct thread_info', ' cpu).\n\n          RISCV64 JIT output for `call bpf_get_smp_processor_id`\n\t  ======================================================\n\n                Before                           After\n               --------                         -------\n\n         auipc   t1', '0x848c                  ld    a5', '32(tp)\n         jalr    604(t1)\n         mv      a5', 'a0\n\nBenchmark using [1] on Qemu.\n\n./benchs/run_bench_trigger.sh glob-arr-inc arr-inc hash-inc\n\n+---------------+------------------+------------------+--------------+\n|      Name     |     Before       |       After      |   % change   |\n|---------------+------------------+------------------+--------------|\n| glob-arr-inc  | 1.077 ± 0.006M/s | 1.336 ± 0.010M/s |   + 24.04%   |\n| arr-inc       | 1.078 ± 0.002M/s | 1.332 ± 0.015M/s |   + 23.56%   |\n| hash-inc      | 0.494 ± 0.004M/s | 0.653 ± 0.001M/s |   + 32.18%   |\n+---------------+------------------+------------------+--------------+\n\nNOTE: This benchmark includes changes from this patch and the previous\n      patch that implemented the per-cpu insn.\n\n[1] https://github.com/anakryiko/linux/commit/8dec900975ef\n\nSigned-off-by: Puranjay Mohan <puranjay@kernel.org>\nAcked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>\nAcked-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Björn Töpel <bjorn@kernel.org>\nLink: https://lore.kernel.org/r/20240502151854.9810-3-puranjay@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Inline bpf_get_smp_processor_id() calls in the RISC-V BPF JIT for efficient CPU processor ID retrieval.,"inline,RISC-V,JIT",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
19c56d4e5be102cd118162b9f72d9c6d353e76fc,19c56d4e5be102cd118162b9f72d9c6d353e76fc,Puranjay Mohan,puranjay@kernel.org,1714663131,Alexei Starovoitov,ast@kernel.org,1715558074,0b3078b5e18ca50af611fc29c79cb0222405853e,f122668ddcce450c2585f0be4bf4478d6fd6176b,riscv," bpf: add internal-only MOV instruction to resolve per-CPU addrs

Support an instruction for resolving absolute addresses of per-CPU
data from their per-CPU offsets. This instruction is internal-only and
users are not allowed to use them directly. They will only be used for
internal inlining optimizations for now between BPF verifier and BPF
JITs.

RISC-V uses generic per-cpu implementation where the offsets for CPUs
are kept in an array called __per_cpu_offset[cpu_number]. RISCV stores
the address of the task_struct in TP register. The first element in
task_struct is struct thread_info","[' and we can get the cpu number by\nreading from the TP register + offsetof(struct thread_info', ' cpu).\n\nOnce we have the cpu number in a register we read the offset for that\ncpu from address: &__per_cpu_offset + cpu_number << 3. Then we add this\noffset to the destination register.\n\nTo measure the improvement from this change', ' the benchmark in [1] was\nused on Qemu:\n\nBefore:\nglob-arr-inc   :    1.127 ± 0.013M/s\narr-inc        :    1.121 ± 0.004M/s\nhash-inc       :    0.681 ± 0.052M/s\n\nAfter:\nglob-arr-inc   :    1.138 ± 0.011M/s\narr-inc        :    1.366 ± 0.006M/s\nhash-inc       :    0.676 ± 0.001M/s\n\n[1] https://github.com/anakryiko/linux/commit/8dec900975ef\n\nSigned-off-by: Puranjay Mohan <puranjay@kernel.org>\nAcked-by: Björn Töpel <bjorn@kernel.org>\nLink: https://lore.kernel.org/r/20240502151854.9810-2-puranjay@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Add an internal-only MOV instruction for resolving per-CPU addresses in RISC-V architecture.,"MOV instruction,RISC-V,per-CPU",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
f122668ddcce450c2585f0be4bf4478d6fd6176b,f122668ddcce450c2585f0be4bf4478d6fd6176b,Shahab Vahedi,shahab@synopsys.com,1714488964,Alexei Starovoitov,ast@kernel.org,1715557896,728a4617241183e817241430b59315e81c41afc5,fcd1ed89a0439c45e1336bd9649485c44b7597c7,"ARC: Add eBPF JIT support

This will add eBPF JIT support to the 32-bit ARCv2 processors. The
implementation is qualified by running the BPF tests on a Synopsys HSDK
board with ""ARC HS38 v2.1c at 500 MHz"" as the 4-core CPU.

The test_bpf.ko reports 2-10 fold improvements in execution time of its
tests. For instance:

test_bpf: #33 tcpdump port 22 jited:0 704 1766 2104 PASS
test_bpf: #33 tcpdump port 22 jited:1 120  224  260 PASS

test_bpf: #141 ALU_DIV_X: 4294967295 / 4294967295 = 1 jited:0 238 PASS
test_bpf: #141 ALU_DIV_X: 4294967295 / 4294967295 = 1 jited:1  23 PASS

test_bpf: #776 JMP32_JGE_K: all ... magnitudes jited:0 2034681 PASS
test_bpf: #776 JMP32_JGE_K: all ... magnitudes jited:1 1020022 PASS

Deployment and structure
------------------------
The related codes are added to ""arch/arc/net"":

- bpf_jit.h       -- The interface that a back-end translator must provide
- bpf_jit_core.c  -- Knows how to handle the input eBPF byte stream
- bpf_jit_arcv2.c -- The back-end code that knows the translation logic

The bpf_int_jit_compile() at the end of bpf_jit_core.c is the entrance
to the whole process. Normally", the translation is done in one pass,"['\nnamely the ""normal pass"". In case some relocations are not known during\nthis pass', ' some data (arc_jit_data) is allocated for the next pass to\ncome. This possible next (and last) pass is called the ""extra pass"".\n\n1. Normal pass       # The necessary pass\n     1a. Dry run       # Get the whole JIT length', ' epilogue offset', ' etc.\n     1b. Emit phase    # Allocate memory and start emitting instructions\n2. Extra pass        # Only needed if there are relocations to be fixed\n     2a. Patch relocations\n\nSupport status\n--------------\nThe JIT compiler supports BPF instructions up to ""cpu=v4"". However', ' it\ndoes not yet provide support for:\n\n- Tail calls\n- Atomic operations\n- 64-bit division/remainder\n- BPF_PROBE_MEM* (exception table)\n\nThe result of ""test_bpf"" test suite on an HSDK board is:\n\nhsdk-lnx# insmod test_bpf.ko test_suite=test_bpf\n\n  test_bpf: Summary: 863 PASSED', ' 186 FAILED', "" [851/851 JIT'ed]\n\nAll the failing test cases are due to the ones that were not JIT'ed.\nCategorically"", ' they can be represented as:\n\n  .-----------.------------.-------------.\n  | test type |   opcodes  | # of cases  |\n  |-----------+------------+-------------|\n  | atomic    | 0xC3', ' 0xDB |         149 |\n  | div64     | 0x37', ' 0x3F |          22 |\n  | mod64     | 0x97', "" 0x9F |          15 |\n  `-----------^------------+-------------|\n                           | (total) 186 |\n                           `-------------'\n\nSetup: build config\n-------------------\nThe following configs must be set to have a working JIT test:\n\n  CONFIG_BPF_JIT=y\n  CONFIG_BPF_JIT_ALWAYS_ON=y\n  CONFIG_TEST_BPF=m\n\nThe following options are not necessary for the tests module"", '\nbut are good to have:\n\n  CONFIG_DEBUG_INFO=y             # prerequisite for below\n  CONFIG_DEBUG_INFO_BTF=y         # so bpftool can generate vmlinux.h\n\n  CONFIG_FTRACE=y                 #\n  CONFIG_BPF_SYSCALL=y            # all these options lead to\n  CONFIG_KPROBE_EVENTS=y          # having CONFIG_BPF_EVENTS=y\n  CONFIG_PERF_EVENTS=y            #\n\nSome BPF programs provide data through /sys/kernel/debug:\n  CONFIG_DEBUG_FS=y\narc# mount -t debugfs debugfs /sys/kernel/debug\n\nSetup: elfutils\n---------------\nThe libdw.{so', 'a} library that is used by pahole for processing\nthe final binary must come from elfutils 0.189 or newer. The\nsupport for ARCv2 [1] has been added since that version.\n\n[1]\nhttps://sourceware.org/git/?p=elfutils.git;a=commit;h=de3d46b3e7\n\nSetup: pahole\n-------------\nThe line below in linux/scripts/Makefile.btf must be commented out:\n\npahole-flags-$(call test-ge', ' $(pahole-ver)', ' 121) += --btf_gen_floats\n\nOr else', ' the build will fail:\n\n$ make V=1\n  ...\n  BTF     .btf.vmlinux.bin.o\npahole -J --btf_gen_floats                    \\\n       -j --lang_exclude=rust                 \\\n       --skip_encoding_btf_inconsistent_proto \\\n       --btf_gen_optimized .tmp_vmlinux.btf\nComplex', ' interval and imaginary float types are not supported\nEncountered error while encoding BTF.\n  ...\n  BTFIDS  vmlinux\n./tools/bpf/resolve_btfids/resolve_btfids vmlinux\nlibbpf: failed to find \'.BTF\' ELF section in vmlinux\nFAILED: load BTF from vmlinux: No data available\n\nThis is due to the fact that the ARC toolchains generate\n""complex float"" DIE entries in libgcc and at the moment', "" pahole\ncan't handle such entries.\n\nRunning the tests\n-----------------\nhost$ scp /bld/linux/lib/test_bpf.ko arc:\narc # sysctl net.core.bpf_jit_enable=1\narc # insmod test_bpf.ko test_suite=test_bpf\n      ...\n      test_bpf: #1048 Staggered jumps: JMP32_JSLE_X jited:1 697811 PASS\n      test_bpf: Summary: 863 PASSED"", ' 186 FAILED', "" [851/851 JIT'ed]\n\nAcknowledgments\n---------------\n- Claudiu Zissulescu for his unwavering support\n- Yuriy Kolerov for testing and troubleshooting\n- Vladimir Isaev for the pahole workaround\n- Sergey Matyukevich for paving the road by adding the interpreter support\n\nSigned-off-by: Shahab Vahedi <shahab@synopsys.com>\nLink: https://lore.kernel.org/r/20240430145604.38592-1-list+bpf@vahedi.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n"", '']",Adds eBPF JIT support to 32-bit ARCv2 processors for improved performance.,"eBPF JIT support, ARCv2, performance",It's a new feature.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
fcd1ed89a0439c45e1336bd9649485c44b7597c7,fcd1ed89a0439c45e1336bd9649485c44b7597c7,Alan Maguire,alan.maguire@oracle.com,1715090114,Andrii Nakryiko,andrii@kernel.org,1715291075,c094a419732049a99a3f9a9fab88485e735781f0,0d03a4d24bfa4f806ddc2cfa8ebd0eac81139b23,kbuild,"bpf: Switch to using --btf_features for pahole v1.26 and later

The btf_features list can be used for pahole v1.26 and later -
it is useful because if a feature is not yet implemented it will
not exit with a failure message.  This will allow us to add feature
requests to the pahole options without having to check pahole versions
in future; if the version of pahole supports the feature it will be
added.

Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Tested-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240507135514.490467-1-alan.maguire@oracle.com
",[''],Enable btf_features for pahole v1.26+ to avoid compatibility issues with future feature requests.,"btf_features,pahole,compatibility",It's a build system or CI/CD change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
7abbf38cd8edb92bc72fe3405f8a0bf19f7761c2,7abbf38cd8edb92bc72fe3405f8a0bf19f7761c2,Geliang Tang,tanggeliang@kylinos.cn,1714908913,Martin KaFai Lau,martin.lau@kernel.org,1715287238,00f58e7fa719f53892628b80a95ddd6be441ba67,65a3f0df44dd3db0f77e6ccff0a126969abc0da4,"selftests/bpf: Drop get_port in test_tcp_check_syncookie

The arguments ""addr"" and ""len"" of run_test() have dropped. This makes
function get_port() useless. Drop it from test_tcp_check_syncookie_user.c.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/a9b5c8064ab4cbf0f68886fe0e4706428b8d0d47.1714907662.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Removed the unused get_port function from test_tcp_check_syncookie due to dropped arguments.,"Dropped, test, function",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
65a3f0df44dd3db0f77e6ccff0a126969abc0da4,65a3f0df44dd3db0f77e6ccff0a126969abc0da4,Geliang Tang,tanggeliang@kylinos.cn,1714908912,Martin KaFai Lau,martin.lau@kernel.org,1715287238,a233cb5a677e66f6c4e198e7b37e4439588f95de,5059c73eca67e686dea42af079c41857cb00a5a6,"selftests/bpf: Use connect_to_fd in test_tcp_check_syncookie

This patch uses public helper connect_to_fd() exported in network_helpers.h
instead of the local defined function connect_to_server() in
test_tcp_check_syncookie_user.c. This can avoid duplicate code.

Then the arguments ""addr"" and ""len"" of run_test() become useless"," drop them
too.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/e0ae6b790ac0abc7193aadfb2660c8c9eb0fe1f0.1714907662.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],The commit replaces a locally defined function with a public helper to reduce code duplication in a BPF selftest.,"selftests,bpf,connect_to_fd",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tracepoints like programs']
5059c73eca67e686dea42af079c41857cb00a5a6,5059c73eca67e686dea42af079c41857cb00a5a6,Geliang Tang,tanggeliang@kylinos.cn,1714908911,Martin KaFai Lau,martin.lau@kernel.org,1715287238,21994083ea25f7265a4ec87328feda66d5a049d3,49e1fa8dbd81340f610057be3f3909f24c232807,"selftests/bpf: Use connect_to_fd in sockopt_inherit

This patch uses public helper connect_to_fd() exported in network_helpers.h
instead of the local defined function connect_to_server() in
prog_tests/sockopt_inherit.c. This can avoid duplicate code.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/71db79127cc160b0643fd9a12c70ae019ae076a1.1714907662.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,"Refactored sockopt_inherit test to use connect_to_fd from network_helpers.h, replacing local connect_to_server to eliminate code duplication.","refactoring, selftests, duplication",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
49e1fa8dbd81340f610057be3f3909f24c232807,49e1fa8dbd81340f610057be3f3909f24c232807,Geliang Tang,tanggeliang@kylinos.cn,1714908910,Martin KaFai Lau,martin.lau@kernel.org,1715287238,fc50583586dff003832a56fa604d97e424694266,5166b3e3e30a8eb93f7182283ed4db719bdfde1a,"selftests/bpf: Use start_server_addr in test_tcp_check_syncookie

Include network_helpers.h in test_tcp_check_syncookie_user.c"," use
public helper start_server_addr() in it instead of the local defined
function start_server(). This can avoid duplicate code.

Add two helpers v6only_true() and v6only_false() to set IPV6_V6ONLY
sockopt to true or false","[' set them to post_socket_cb pointer of struct\nnetwork_helper_opts', ' and pass it to start_server_setsockopt().\n\nIn order to use functions defined in network_helpers.c', ' Makefile needs\nto be updated too.\n\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nLink: https://lore.kernel.org/r/e0c5324f5da84f453f47543536e70f126eaa8678.1714907662.git.tanggeliang@kylinos.cn\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",The commit refactors test_tcp_check_syncookie to use start_server_addr and adds helpers to manage IPV6_V6ONLY sockopt.,"refactor, helpers, IPV6_V6ONLY",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"[""It's not related to any of the above.""]"
5166b3e3e30a8eb93f7182283ed4db719bdfde1a,5166b3e3e30a8eb93f7182283ed4db719bdfde1a,Geliang Tang,tanggeliang@kylinos.cn,1714908909,Martin KaFai Lau,martin.lau@kernel.org,1715287238,1411c5e983766b8bc25f2b8184adb1ce73d47f08,20434d2d896f85b38fa1fe91b8739afcd9cde3b3,"selftests/bpf: Use start_server_addr in sockopt_inherit

Include network_helpers.h in prog_tests/sockopt_inherit.c"," use public
helper start_server_addr() instead of the local defined function
start_server(). This can avoid duplicate code.

Add a helper custom_cb() to set SOL_CUSTOM sockopt looply","[' set it to\npost_socket_cb pointer of struct network_helper_opts', ' and pass it to\nstart_server_addr().\n\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nLink: https://lore.kernel.org/r/687af66f743a0bf15cdba372c5f71fe64863219e.1714907662.git.tanggeliang@kylinos.cn\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Refactor sockopt_inherit.c to use network_helpers and add custom_cb for SOL_CUSTOM sockopt loop.,network_helpers sockopt custom_cb,It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
20434d2d896f85b38fa1fe91b8739afcd9cde3b3,20434d2d896f85b38fa1fe91b8739afcd9cde3b3,Geliang Tang,tanggeliang@kylinos.cn,1714908908,Martin KaFai Lau,martin.lau@kernel.org,1715287229,3b55f7de36502ae460b7b7418222b99c9c5c9dd1,cbe35adf691a3227b11131a922245c4d6409d2d6,"selftests/bpf: Add post_socket_cb for network_helper_opts

__start_server() sets SO_REUSPORT through setsockopt() when the parameter
'reuseport' is set. This patch makes it more flexible by adding a function
pointer post_socket_cb into struct network_helper_opts. The
'const struct post_socket_opts *cb_opts' args in the post_socket_cb is
for the future extension.

The 'reuseport' parameter can be dropped.
Now the original start_reuseport_server() can be implemented by setting a
newly defined reuseport_cb() function pointer to post_socket_cb filed of
struct network_helper_opts.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/470cb82f209f055fc7fb39c66c6b090b5b7ed2b2.1714907662.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Introduced post_socket_cb function pointer to enhance flexibility in network_helper_opts for setting SO_REUSEPORT.,"post_socket_cb,function pointer,network_helper_opts",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
cbe35adf691a3227b11131a922245c4d6409d2d6,cbe35adf691a3227b11131a922245c4d6409d2d6,Alexei Starovoitov,ast@kernel.org,1715278392,Alexei Starovoitov,ast@kernel.org,1715278393,a1edbcb9da11f2300df7fd76ea17fb65c6bf9c03,009367099eb61a4fc2af44d4eb06b6b4de7de6db 6a650816b098a15c4690a22e3889858264d01aa8,"Merge branch 'selftests-bpf-retire-bpf_tcp_helpers-h'

Martin KaFai Lau says:

====================
selftests/bpf: Retire bpf_tcp_helpers.h

From: Martin KaFai Lau <martin.lau@kernel.org>

The earlier commit 8e6d9ae2e09f (""selftests/bpf: Use bpf_tracing.h instead of bpf_tcp_helpers.h"")
removed the bpf_tcp_helpers.h usages from the non networking tests.

This patch set is a continuation of this effort to retire
the bpf_tcp_helpers.h from the networking tests (mostly tcp-cc related).

The main usage of the bpf_tcp_helpers.h is the partial kernel
socket definitions (e.g. sock"," tcp_sock). New fields are kept adding
back to those partial socket definitions while everything is available
in the vmlinux.h. The recent bpf_cc_cubic.c test tried to extend
bpf_tcp_helpers.c but eventually used the vmlinux.h instead. To avoid
this unnecessary detour for new tests and have one consistent way
of using the kernel sockets","[' this patch set retires the bpf_tcp_helpers.h\nusages and consolidates the tests to use vmlinux.h instead.\n====================\n\nLink: https://lore.kernel.org/r/20240509175026.3423614-1-martin.lau@linux.dev\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",This commit retires the bpf_tcp_helpers.h from networking tests for consistent kernel socket usage via vmlinux.h.,"retire, bpf_tcp_helpers, vmlinux",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['tc/netfilter like programs']
6a650816b098a15c4690a22e3889858264d01aa8,6a650816b098a15c4690a22e3889858264d01aa8,Martin KaFai Lau,martin.lau@kernel.org,1715277026,Alexei Starovoitov,ast@kernel.org,1715278392,a1edbcb9da11f2300df7fd76ea17fb65c6bf9c03,c075c9c4af289bb5956b0164283a85cf9c293c8e,"selftests/bpf: Retire bpf_tcp_helpers.h

The previous patches have consolidated the tests to use
bpf_tracing_net.h (i.e. vmlinux.h) instead of bpf_tcp_helpers.h.

This patch can finally retire the bpf_tcp_helpers.h from
the repository.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-11-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,The commit retires bpf_tcp_helpers.h in favor of using bpf_tracing_net.h for selftests.,"retire,bpf_tcp_helpers.h,bpf_tracing_net.h",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tracepoints like programs']
c075c9c4af289bb5956b0164283a85cf9c293c8e,c075c9c4af289bb5956b0164283a85cf9c293c8e,Martin KaFai Lau,martin.lau@kernel.org,1715277025,Alexei Starovoitov,ast@kernel.org,1715278392,fc524d6ac07d95e055de20e54877ae6e2a3c4f96,6eee55aa769c241182da73a391980f51edba27dc,"selftests/bpf: Remove the bpf_tcp_helpers.h usages from other non tcp-cc tests

The patch removes the remaining bpf_tcp_helpers.h usages in the
non tcp-cc networking tests. It either replaces it with bpf_tracing_net.h
or just removed it because the test is not actually using any
kernel sockets. For the later"," the missing macro (mainly SOL_TCP) is
defined locally.

An exception is the test_sock_fields which is testing
the ""struct bpf_sock"" type instead of the kernel sock type.
Whenever ""vmlinux.h"" is used instead","[' it hits a verifier\nerror on doing arithmetic on the sock_common pointer:\n\n; return !a6[0] && !a6[1] && !a6[2] && a6[3] == bpf_htonl(1); @ test_sock_fields.c:54\n21: (61) r2 = *(u32 *)(r1 +28)        ; R1_w=sock_common() R2_w=scalar(smin=0', 'smax=umax=0xffffffff', 'var_off=(0x0; 0xffffffff))\n22: (56) if w2 != 0x0 goto pc-6       ; R2_w=0\n23: (b7) r3 = 28                      ; R3_w=28\n24: (bf) r2 = r1                      ; R1_w=sock_common() R2_w=sock_common()\n25: (0f) r2 += r3\nR2 pointer arithmetic on sock_common prohibited\n\nHence', ' instead of including bpf_tracing_net.h', ' the test_sock_fields test\ndefines a tcp_sock with one lsndtime field in it.\n\nAnother highlight is', ' in sockopt_qos_to_cc.c', ' the tcp_cc_eq()\nis replaced by bpf_strncmp(). tcp_cc_eq() was a workaround\nin bpf_tcp_helpers.h before bpf_strncmp had been added.\n\nThe SOL_IPV6 addition to bpf_tracing_net.h is needed by the\ntest_tcpbpf_kern test.\n\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\nLink: https://lore.kernel.org/r/20240509175026.3423614-10-martin.lau@linux.dev\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit removes inappropriate bpf_tcp_helpers.h references from non tcp-cc networking tests and updates test_sock_fields to use vmlinux.h.,"bpf_tcp_helpers,non tcp-cc,vmlinux",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
6eee55aa769c241182da73a391980f51edba27dc,6eee55aa769c241182da73a391980f51edba27dc,Martin KaFai Lau,martin.lau@kernel.org,1715277024,Alexei Starovoitov,ast@kernel.org,1715278392,80f567d24605f88f9035b337bb6f713b5bfbb1c9,6ad4e6e94697e960630594907666bc09e78a3b8a,"selftests/bpf: Remove bpf_tcp_helpers.h usages from other misc bpf tcp-cc tests

This patch removed the final few bpf_tcp_helpers.h usages
in some misc bpf tcp-cc tests and replace it with
bpf_tracing_net.h (i.e. vmlinux.h)

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-9-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,The commit removes usages of bpf_tcp_helpers.h in BPF tcp-cc tests and replaces it with bpf_tracing_net.h.,"bpf_tcp_helpers.h,tcp-cc,bpf_tracing_net.h",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tracepoints like programs']
6ad4e6e94697e960630594907666bc09e78a3b8a,6ad4e6e94697e960630594907666bc09e78a3b8a,Martin KaFai Lau,martin.lau@kernel.org,1715277023,Alexei Starovoitov,ast@kernel.org,1715278392,fd907e0e3e4a3bcef07fe49307fbe1885ec57535,a824c9a8a4d9a654d62674a8425c0f1abc9c3d33,"selftests/bpf: Use bpf_tracing_net.h in bpf_dctcp

This patch uses bpf_tracing_net.h (i.e. vmlinux.h) in bpf_dctcp.
This will allow to retire the bpf_tcp_helpers.h and consolidate
tcp-cc tests to vmlinux.h.

It will have a dup on min/max macros with the bpf_cubic. It could
be further refactored in the future.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-8-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,"The commit updates bpf_dctcp to use bpf_tracing_net.h, allowing tcp-cc tests consolidation into vmlinux.h.","bpf_dctcp,bpf_tracing_net,consolidation",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['tracepoints like programs']
a824c9a8a4d9a654d62674a8425c0f1abc9c3d33,a824c9a8a4d9a654d62674a8425c0f1abc9c3d33,Martin KaFai Lau,martin.lau@kernel.org,1715277022,Alexei Starovoitov,ast@kernel.org,1715278392,849109c0f9b65ebe1eaa9b52ba5c644ee82a6787,b1d87ae9b0d3d91767d85183e40c96f4229a6c21,"selftests/bpf: Use bpf_tracing_net.h in bpf_cubic

This patch uses bpf_tracing_net.h (i.e. vmlinux.h) in bpf_cubic.
This will allow to retire the bpf_tcp_helpers.h and consolidate
tcp-cc tests to vmlinux.h.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-7-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,The commit updates selftests to use bpf_tracing_net.h in bpf_cubic and retires bpf_tcp_helpers.h.,"bpf_tracing_net,vmlinux,tests",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
b1d87ae9b0d3d91767d85183e40c96f4229a6c21,b1d87ae9b0d3d91767d85183e40c96f4229a6c21,Martin KaFai Lau,martin.lau@kernel.org,1715277021,Alexei Starovoitov,ast@kernel.org,1715278392,4bc3ec298d3b0752201e926d57e4e430fab50e09,7d3851a31832bf8dc776a78494b788518734ad0f,"selftests/bpf: Rename tcp-cc private struct in bpf_cubic and bpf_dctcp

The ""struct bictcp"" and ""struct dctcp"" are private to the bpf prog
and they are stored in the private buffer in inet_csk(sk)->icsk_ca_priv.
Hence"," there is no bpf CO-RE required.

The same struct name exists in the vmlinux.h. To reuse vmlinux.h","['\nthey need to be renamed such that the bpf prog logic will be\nimmuned from the kernel tcp-cc changes.\n\nThis patch adds a ""bpf_"" prefix to them.\n\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\nLink: https://lore.kernel.org/r/20240509175026.3423614-6-martin.lau@linux.dev\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Rename private structs in bpf_cubic and bpf_dctcp to avoid name conflict with vmlinux.h.,"private structs, bpf_cubic, bpf_dctcp",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tc/netfilter like programs']
7d3851a31832bf8dc776a78494b788518734ad0f,7d3851a31832bf8dc776a78494b788518734ad0f,Martin KaFai Lau,martin.lau@kernel.org,1715277020,Alexei Starovoitov,ast@kernel.org,1715278391,b76899f62b243ae92c557b88d1e193b7de5dbd27,cc5b18ce1714160be3e0e3b9440a6306dc87e5c4,"selftests/bpf: Sanitize the SEC and inline usages in the bpf-tcp-cc tests

It is needed to remove the BPF_STRUCT_OPS usages from the tcp-cc tests
because it is defined in bpf_tcp_helpers.h which is going to be retired.
While at it"," this patch consolidates all tcp-cc struct_ops programs to
use the SEC(""struct_ops"") + BPF_PROG().

It also removes the unnecessary __always_inline usages from the
tcp-cc tests.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-5-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Refactor bpf-tcp-cc tests by removing BPF_STRUCT_OPS and unnecessary __always_inline usages for alignment with upcoming changes.,"bpf-tcp-cc,BPF_STRUCT_OPS,sanitize",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tc/netfilter like programs']
cc5b18ce1714160be3e0e3b9440a6306dc87e5c4,cc5b18ce1714160be3e0e3b9440a6306dc87e5c4,Martin KaFai Lau,martin.lau@kernel.org,1715277019,Alexei Starovoitov,ast@kernel.org,1715278391,8e2a74eea0b9dbcc527298c05cb7d124dae9dafa,cbaec46df6c08a2fab6be03d093d3d6ce74adc9a,"selftests/bpf: Reuse the tcp_sk() from the bpf_tracing_net.h

This patch removes the individual tcp_sk implementations from the
tcp-cc tests. The tcp_sk() implementation from the bpf_tracing_net.h
is reused instead.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-4-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Refactor selftests by reusing the tcp_sk() from bpf_tracing_net.h in tcp-cc tests.,"selftests,tcp_sk,bpf_tracing_net",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tracepoints like programs']
cbaec46df6c08a2fab6be03d093d3d6ce74adc9a,cbaec46df6c08a2fab6be03d093d3d6ce74adc9a,Martin KaFai Lau,martin.lau@kernel.org,1715277018,Alexei Starovoitov,ast@kernel.org,1715278391,c99c5157cb79050ec7f9326c8283d03edd32acd2,c0338e609e6e8aff8a7052c90cff83a6bc792ebc,"selftests/bpf: Add a few tcp helper functions and macros to bpf_tracing_net.h

This patch adds a few tcp related helper functions to bpf_tracing_net.h.
They will be useful for both tcp-cc and network tracing related
bpf progs. They have already been in the bpf_tcp_helpers.h. This change
is needed to retire the bpf_tcp_helpers.h and consolidate all tests
to vmlinux.h (i.e. bpf_tracing_net.h).

Some of the helpers (tcp_sk and inet_csk) are also defined in
bpf_cc_cubic.c and they are removed. While at it"," remove
the vmlinux.h from bpf_cc_cubic.c. bpf_tracing_net.h (which has
vmlinux.h after this patch) is enough and will be consistent
with the other tcp-cc tests in the later patches.

The other TCP_* macro additions will be needed for the bpf_dctcp
changes in the later patch.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-3-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],The commit adds TCP helper functions to bpf_tracing_net.h for tcp-cc and network tracing eBPF programs.,"tcp helper functions,tracing,consolidation",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'tc/netfilter like programs']"
c0338e609e6e8aff8a7052c90cff83a6bc792ebc,c0338e609e6e8aff8a7052c90cff83a6bc792ebc,Martin KaFai Lau,martin.lau@kernel.org,1715277017,Alexei Starovoitov,ast@kernel.org,1715278391,cc617e77d1df9e0cced592a750948baec8462ad2,009367099eb61a4fc2af44d4eb06b6b4de7de6db,"selftests/bpf: Remove bpf_tracing_net.h usages from two networking tests

This patch removes the bpf_tracing_net.h usage from the networking tests","
fib_lookup and test_lwt_redirect. Instead of using the (copied) macro
TC_ACT_SHOT and ETH_HLEN from bpf_tracing_net.h","[' they can directly\nuse the ones defined in the network header files under linux/.\n\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\nLink: https://lore.kernel.org/r/20240509175026.3423614-2-martin.lau@linux.dev\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit removes the usage of bpf_tracing_net.h in two networking tests.,"bpf_tracing_net, networking, tests",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tc/netfilter like programs']
009367099eb61a4fc2af44d4eb06b6b4de7de6db,009367099eb61a4fc2af44d4eb06b6b4de7de6db,Jose E. Marchesi,jose.marchesi@oracle.com,1715163193,Andrii Nakryiko,andrii@kernel.org,1715205655,fe2af65273e1e7981a195649bf2770c2cac00298,911edc69c832161b62a8ad10a6972290157a7bd3,"bpf: Avoid uninitialized value in BPF_CORE_READ_BITFIELD

[Changes from V1:
 - Use a default branch in the switch statement to initialize `val'.]

GCC warns that `val' may be used uninitialized in the
BPF_CRE_READ_BITFIELD macro"," defined in bpf_core_read.h as:

	[...]
	unsigned long long val;						      \
	[...]								      \
	switch (__CORE_RELO(s","[' field', "" BYTE_SIZE)) {\t\t\t      \\\n\tcase 1: val = *(const unsigned char *)p; break;\t\t\t      \\\n\tcase 2: val = *(const unsigned short *)p; break;\t\t      \\\n\tcase 4: val = *(const unsigned int *)p; break;\t\t\t      \\\n\tcase 8: val = *(const unsigned long long *)p; break;\t\t      \\\n        }       \t\t\t\t\t\t\t      \\\n\t[...]\n\tval;\t\t\t\t\t\t\t\t      \\\n\t}\t\t\t\t\t\t\t\t      \\\n\nThis patch adds a default entry in the switch statement that sets\n`val' to zero in order to avoid the warning"", ' and random values to be\nused in case __builtin_preserve_field_info returns unexpected values\nfor BPF_FIELD_BYTE_SIZE.\n\nTested in bpf-next master.\nNo regressions.\n\nSigned-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240508101313.16662-1-jose.marchesi@oracle.com\n', '']",Fixed potential uninitialized value warning in BPF_CORE_READ_BITFIELD macro.,"uninitialized,value,macro",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
911edc69c832161b62a8ad10a6972290157a7bd3,911edc69c832161b62a8ad10a6972290157a7bd3,Jose E. Marchesi,jose.marchesi@oracle.com,1715166212,Alexei Starovoitov,ast@kernel.org,1715187419,6cb2526411487c32f0356fe940e1d96e1ab69187,1209a523f6914404e8941d9e04caa42be7cab8d5,"bpf: guard BPF_NO_PRESERVE_ACCESS_INDEX in skb_pkt_end.c

This little patch is a follow-up to:
https://lore.kernel.org/bpf/20240507095011.15867-1-jose.marchesi@oracle.com/T/#u

The temporary workaround of passing -DBPF_NO_PRESERVE_ACCESS_INDEX
when building with GCC triggers a redefinition preprocessor error when
building progs/skb_pkt_end.c.  This patch adds a guard to avoid
redefinition.

Signed-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>
Cc: david.faust@oracle.com
Cc: cupertino.miranda@oracle.com
Cc: Eduard Zingerman <eddyz87@gmail.com>
Cc: Yonghong Song <yonghong.song@linux.dev>
Cc: Andrii Nakryiko <andrii.nakryiko@gmail.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240508110332.17332-1-jose.marchesi@oracle.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,This patch adds a guard to prevent preprocessor errors when building with BPF_NO_PRESERVE_ACCESS_INDEX.,"guard, preprocessor, GCC",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
1209a523f6914404e8941d9e04caa42be7cab8d5,1209a523f6914404e8941d9e04caa42be7cab8d5,Jose E. Marchesi,jose.marchesi@oracle.com,1715164551,Alexei Starovoitov,ast@kernel.org,1715187390,c69b8da8a03710c98bf85ec6f9da01f214373ba0,cd3fc3b9782130a5bc1dc3dfccffbc1657637a93,"bpf: avoid UB in usages of the __imm_insn macro

[Changes from V2:
 - no-strict-aliasing is only applied when building with GCC.
 - cpumask_failure.c is excluded"," as it doesn't use __imm_insn.]

The __imm_insn macro is defined in bpf_misc.h as:

  #define __imm_insn(name","[' expr) [name]""i""(*(long *)&(expr))\n\nThis may lead to type-punning and strict aliasing rules violations in\nit\'s typical usage where the address of a struct bpf_insn is passed as\nexpr', ' like in:\n\n  __imm_insn(st_mem', '\n             BPF_ST_MEM(BPF_W', ' BPF_REG_1', ' offsetof(struct __sk_buff', ' mark)', ' 42))\n\nWhere:\n\n  #define BPF_ST_MEM(SIZE', ' DST', ' OFF', ' IMM)\t\t\t\t\\\n\t((struct bpf_insn) {\t\t\t\t\t\\\n\t\t.code  = BPF_ST | BPF_SIZE(SIZE) | BPF_MEM', '\t\\\n\t\t.dst_reg = DST', '\t\t\t\t\t\\\n\t\t.src_reg = 0', '\t\t\t\t\t\\\n\t\t.off   = OFF', '\t\t\t\t\t\\\n\t\t.imm   = IMM })\n\nIn all the actual instances of this in the BPF selftests the value is\nfed to a volatile asm statement as soon as it gets read from memory', '\nand thus it is unlikely anti-aliasing rules breakage may lead to\nmisguided optimizations.\n\nHowever', ' GCC detects the potential problem (indirectly) by issuing a\nwarning stating that a temporary <Uxxxxxx> is used uninitialized', '\nwhere the temporary corresponds to the memory read by *(long *).\n\nThis patch adds -fno-strict-aliasing to the compilation flags of the\nparticular selftests that do type punning via __imm_insn', ' only for\nGCC.\n\nTested in master bpf-next.\nNo regressions.\n\nSigned-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>\nCc: david.faust@oracle.com\nCc: cupertino.miranda@oracle.com\nCc: Yonghong Song <yonghong.song@linux.dev>\nCc: Eduard Zingerman <eddyz87@gmail.com>\nAcked-by: Yonghong Song <yonghong.song@linux.dev>\nLink: https://lore.kernel.org/r/20240508103551.14955-1-jose.marchesi@oracle.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit addresses undefined behavior in the usage of the __imm_insn macro for BPF programs.,"undefined behavior, macro, GCC",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['kprobe/uprobe/ftrace like programs']
cd3fc3b9782130a5bc1dc3dfccffbc1657637a93,cd3fc3b9782130a5bc1dc3dfccffbc1657637a93,Jose E. Marchesi,jose.marchesi@oracle.com,1715107676,Alexei Starovoitov,ast@kernel.org,1715187327,cf872dd7603e1ac693cd05426198ccaa6fc13ffd,e612b5c1d3ee325aff991b4078b4999bf6bac096,"bpf: avoid uninitialized warnings in verifier_global_subprogs.c

[Changes from V1:
- The warning to disable is -Wmaybe-uninitialized"," not -Wuninitialized.
- This warning is only supported in GCC.]

The BPF selftest verifier_global_subprogs.c contains code that
purposedly performs out of bounds access to memory","[' to check whether\nthe kernel verifier is able to catch them.  For example:\n\n  __noinline int global_unsupp(const int *mem)\n  {\n\tif (!mem)\n\t\treturn 0;\n\treturn mem[100]; /* BOOM */\n  }\n\nWith -O1 and higher and no inlining', ' GCC notices this fact and emits a\n""maybe uninitialized"" warning.  This is by design.  Note that the\nemission of these warnings is highly dependent on the precise\noptimizations that are performed.\n\nThis patch adds a compiler pragma to verifier_global_subprogs.c to\nignore these warnings.\n\nTested in bpf-next master.\nNo regressions.\n\nSigned-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>\nCc: david.faust@oracle.com\nCc: cupertino.miranda@oracle.com\nCc: Yonghong Song <yonghong.song@linux.dev>\nCc: Eduard Zingerman <eddyz87@gmail.com>\nAcked-by: Yonghong Song <yonghong.song@linux.dev>\nLink: https://lore.kernel.org/r/20240507184756.1772-1-jose.marchesi@oracle.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit addresses uninitialized warnings in the BPF verifier by disabling specific GCC warnings in verifier_global_subprogs.c.,"uninitialized,warnings,BPF",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
e612b5c1d3ee325aff991b4078b4999bf6bac096,e612b5c1d3ee325aff991b4078b4999bf6bac096,Puranjay Mohan,puranjay@kernel.org,1714147876,Alexei Starovoitov,ast@kernel.org,1715179145,15ff3a2c8447fd6d735287ca9537d65d92656b9a,7e2c7a3f732b77623cea01b89b8cc6724c90a439,bpf," arm64: Add support for lse atomics in bpf_arena

When LSE atomics are available","[' BPF atomic instructions are implemented\nas single ARM64 atomic instructions', ' therefore it is easy to enable\nthese in bpf_arena using the currently available exception handling\nsetup.\n\nLL_SC atomics use loops and therefore would need more work to enable in\nbpf_arena.\n\nEnable LSE atomics based instructions in bpf_arena and use the\nbpf_jit_supports_insn() callback to reject atomics in bpf_arena if LSE\natomics are not available.\n\nAll atomics and arena_atomics selftests are passing:\n\n  [root@ip-172-31-2-216 bpf]# ./test_progs -a atomics', 'arena_atomics\n  #3/1     arena_atomics/add:OK\n  #3/2     arena_atomics/sub:OK\n  #3/3     arena_atomics/and:OK\n  #3/4     arena_atomics/or:OK\n  #3/5     arena_atomics/xor:OK\n  #3/6     arena_atomics/cmpxchg:OK\n  #3/7     arena_atomics/xchg:OK\n  #3       arena_atomics:OK\n  #10/1    atomics/add:OK\n  #10/2    atomics/sub:OK\n  #10/3    atomics/and:OK\n  #10/4    atomics/or:OK\n  #10/5    atomics/xor:OK\n  #10/6    atomics/cmpxchg:OK\n  #10/7    atomics/xchg:OK\n  #10      atomics:OK\n  Summary: 2/14 PASSED', ' 0 SKIPPED', ' 0 FAILED\n\nSigned-off-by: Puranjay Mohan <puranjay@kernel.org>\nLink: https://lore.kernel.org/r/20240426161116.441-1-puranjay@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Add support for LSE atomics in bpf_arena on arm64 architecture.,"LSE atomics, bpf_arena, arm64",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
7e2c7a3f732b77623cea01b89b8cc6724c90a439,7e2c7a3f732b77623cea01b89b8cc6724c90a439,Martin KaFai Lau,martin.lau@kernel.org,1715124120,Martin KaFai Lau,martin.lau@kernel.org,1715124313,587a047f502580fa81c3b74a17204016c926097a,93d1c2da15017a443cad812468450b72f43e3bd8 7b9959b8cdbc40b31b4c66bb900ec8d5e5b305bd,"Merge branch 'libbpf: further struct_ops fixes and improvements'

Andrii Nakryiko says:

====================
Fix yet another case of mishandling SEC(""struct_ops"") programs that were
nulled out programmatically through BPF skeleton by the user.

While at it", add some improvements around detecting and reporting errors,"['\nspecifically a common case of declaring SEC(""struct_ops"") program', ' but\nforgetting to actually make use of it by setting it as a callback\nimplementation in SEC("".struct_ops"") variable (i.e.', ' map) declaration.\n\nA bunch of new selftests are added as well.\n====================\n\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']","This commit addresses mishandling of SEC(""struct_ops"") programs and adds improvements for detecting and reporting errors in libbpf.","struct_ops, errors, improvements",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['LSM like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
7b9959b8cdbc40b31b4c66bb900ec8d5e5b305bd,7b9959b8cdbc40b31b4c66bb900ec8d5e5b305bd,Andrii Nakryiko,andrii@kernel.org,1715040815,Martin KaFai Lau,martin.lau@kernel.org,1715124119,587a047f502580fa81c3b74a17204016c926097a,41df0733ea414a49094258adab4d600db0420731,"selftests/bpf: shorten subtest names for struct_ops_module test

Drive-by clean up"," we shouldn't use meaningless ""test_"" prefix for
subtest names.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240507001335.1445325-8-andrii@kernel.org
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],The commit shortens subtest names for struct_ops_module in selftests to avoid meaningless prefixes.,"shorten,selftests,cleanup",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
41df0733ea414a49094258adab4d600db0420731,41df0733ea414a49094258adab4d600db0420731,Andrii Nakryiko,andrii@kernel.org,1715040814,Martin KaFai Lau,martin.lau@kernel.org,1715124119,aeec94caec6a45199bcc6668e4b00da233894564,c78420bafe7cf9ce14fa7ceb40ce62e1372e661d,"selftests/bpf: validate struct_ops early failure detection logic

Add a simple test that validates that libbpf will reject isolated
struct_ops program early with helpful warning message.

Also validate that explicit use of such BPF program through BPF skeleton
after BPF object is open won't trigger any warnings.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240507001335.1445325-7-andrii@kernel.org
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Add a test for early failure detection in struct_ops programs using BPF skeleton.,"selftests,bpf,struct_ops",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
c78420bafe7cf9ce14fa7ceb40ce62e1372e661d,c78420bafe7cf9ce14fa7ceb40ce62e1372e661d,Andrii Nakryiko,andrii@kernel.org,1715040813,Martin KaFai Lau,martin.lau@kernel.org,1715124119,5dee2aad44a0fc9a6254ff09125cf5aa4c8a1b39,548c2ede0dc81cb8c86f3a72c1c63fe1c179cbfe,"libbpf: improve early detection of doomed-to-fail BPF program loading

Extend libbpf's pre-load checks for BPF programs"," detecting more typical
conditions that are destinated to cause BPF program failure. This is an
opportunity to provide more helpful and actionable error message to
users","[' instead of potentially very confusing BPF verifier log and/or\nerror.\n\nIn this case', ' we detect struct_ops BPF program that was not referenced\nanywhere', ' but still attempted to be loaded (according to libbpf logic).\nSuggest that the program might need to be used in some struct_ops\nvariable. User will get a message of the following kind:\n\n  libbpf: prog \'test_1_forgotten\': SEC(""struct_ops"") program isn\'t referenced anywhere', ' did you forget to use it?\n\nSuggested-by: Tejun Heo <tj@kernel.org>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20240507001335.1445325-6-andrii@kernel.org\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",This commit enhances libbpf to provide better early detection and error messages for programs that are likely to fail during loading.,"libbpf, detection, error",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
548c2ede0dc81cb8c86f3a72c1c63fe1c179cbfe,548c2ede0dc81cb8c86f3a72c1c63fe1c179cbfe,Andrii Nakryiko,andrii@kernel.org,1715040812,Martin KaFai Lau,martin.lau@kernel.org,1715124119,7b7d7cdb28f3dd005ebaeb22fc423a70a25edfb0,9d66d60e968d85742569d025a2fb509cb57333bb,"libbpf: fix libbpf_strerror_r() handling unknown errors

strerror_r()"," used from libbpf-specific libbpf_strerror_r() wrapper is
documented to return error in two different ways","["" depending on glibc\nversion. Take that into account when handling strerror_r()'s own errors"", '\nwhich happens when we pass some non-standard (internal) kernel error to\nit. Before this patch we\'d have ""ERROR: strerror_r(524)=22""', ' which is\nquite confusing. Now for the same situation we\'ll see a bit less\nvisually scary ""unknown error (-524)"".\n\nAt least we won\'t confuse user with irrelevant EINVAL (22).\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20240507001335.1445325-5-andrii@kernel.org\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Fix incorrect handling of unknown errors in libbpf's strerror_r wrapper function.,"libbpf, strerror_r, errors",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
9d66d60e968d85742569d025a2fb509cb57333bb,9d66d60e968d85742569d025a2fb509cb57333bb,Andrii Nakryiko,andrii@kernel.org,1715040811,Martin KaFai Lau,martin.lau@kernel.org,1715124119,0056133a1840fba0679ecead0f07574264f7a33f,e18e2e70dbd1ee3099049557060067b6ec703efa,"selftests/bpf: add another struct_ops callback use case test

Add a test which tests the case that was just fixed. Kernel has full
type information about callback"," but user explicitly nulls out the
reference to declaratively set BPF program reference.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240507001335.1445325-4-andrii@kernel.org
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],Add a selftest for struct_ops callback handling in eBPF.,"selftests, struct_ops, callback",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
e18e2e70dbd1ee3099049557060067b6ec703efa,e18e2e70dbd1ee3099049557060067b6ec703efa,Andrii Nakryiko,andrii@kernel.org,1715040810,Martin KaFai Lau,martin.lau@kernel.org,1715124119,c3b020b972eac6993a7c63617a50bd141c5e13a0,8374b56b1df5566d19d645e49da2bf31b660bcfd,"libbpf: handle yet another corner case of nulling out struct_ops program

There is yet another corner case where user can set STRUCT_OPS program
reference in STRUCT_OPS map to NULL"," but libbpf will fail to disable
autoload for such BPF program. This time it's the case of ""new"" kernel
which has type information about callback field","[' but user explicitly\nnulled-out program reference from user-space after opening BPF object.\n\nFix', ' hopefully', ' the last remaining unhandled case.\n\nFixes: 0737df6de946 (""libbpf: better fix for handling nulled-out struct_ops program"")\nFixes: f973fccd43d3 (""libbpf: handle nulled-out program in struct_ops correctly"")\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20240507001335.1445325-3-andrii@kernel.org\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",The commit addresses a corner case in libbpf for handling null STRUCT_OPS program references in STRUCT_OPS maps on newer kernels.,"libbpf, STRUCT_OPS, null",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
8374b56b1df5566d19d645e49da2bf31b660bcfd,8374b56b1df5566d19d645e49da2bf31b660bcfd,Andrii Nakryiko,andrii@kernel.org,1715040809,Martin KaFai Lau,martin.lau@kernel.org,1715124119,a2ee3b0a2aa6b786ab10b3836c1f7bcaf09f6739,93d1c2da15017a443cad812468450b72f43e3bd8,"libbpf: remove unnecessary struct_ops prog validity check

libbpf ensures that BPF program references set in map->st_ops->progs[i]
during open phase are always valid STRUCT_OPS programs. This is done in
bpf_object__collect_st_ops_relos(). So there is no need to double-check
that in bpf_map__init_kern_struct_ops().

Simplify the code by removing unnecessary check. Also"," we avoid using
local prog variable to keep code similar to the upcoming fix","[' which adds\nsimilar logic in another part of bpf_map__init_kern_struct_ops().\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20240507001335.1445325-2-andrii@kernel.org\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']","The commit removes an unnecessary struct_ops prog validity check in libbpf, simplifying the code.","libbpf, struct_ops, simplify",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
93d1c2da15017a443cad812468450b72f43e3bd8,93d1c2da15017a443cad812468450b72f43e3bd8,Andrii Nakryiko,andrii@kernel.org,1715118060,Andrii Nakryiko,andrii@kernel.org,1715118061,e18c2e0d23aac8b9637d55b8ddf01a1ca28d950e,675b4e24bc50f4600b6bf3527fdbaa1f73498334 b2e086cb28aa358f7b5564888304908aff735827,"Merge branch 'fix-number-of-arguments-in-test'

Cupertino Miranda says:

====================
Fix number of arguments in test

Hi everyone","

This is a new version based on comments.

Regards","['\nCupertino\n\nChanges from v1:\n - Comment with gcc-bpf replaced by bpf_gcc.\n - Used pragma GCC optimize to disable GCC optimization in test.\n\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nCc: Andrii Nakryiko <andrii.nakryiko@gmail.com>\nCc: Eduard Zingerman <eddyz87@gmail.com>\nCc: Yonghong Song <yonghong.song@linux.dev>\nCc: David Faust <david.faust@oracle.com>\nCc: Jose Marchesi <jose.marchesi@oracle.com>\nCc: Elena Zannoni <elena.zannoni@oracle.com>\n====================\n\nLink: https://lore.kernel.org/r/20240507122220.207820-1-cupertino.miranda@oracle.com\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\n', '']",The commit fixes the number of arguments in a test case.,"fix, test, arguments",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
b2e086cb28aa358f7b5564888304908aff735827,b2e086cb28aa358f7b5564888304908aff735827,Cupertino Miranda,cupertino.miranda@oracle.com,1715084540,Andrii Nakryiko,andrii@kernel.org,1715118060,e18c2e0d23aac8b9637d55b8ddf01a1ca28d950e,207cf6e649ee551ab3bdb1cfe1b2848e6a4337a5,"selftests/bpf: Change functions definitions to support GCC

The test_xdp_noinline.c contains 2 functions that use more then 5
arguments. This patch collapses the 2 last arguments in an array.
Also in GCC and ipa_sra optimization increases the number of arguments
used in function encap_v4. This pass disables the optimization for that
particular file.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240507122220.207820-3-cupertino.miranda@oracle.com
",,Modify self-tests to ensure compatibility with GCC by adjusting function arguments.,"self-tests,GCC,arguments",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['xdp like programs']
207cf6e649ee551ab3bdb1cfe1b2848e6a4337a5,207cf6e649ee551ab3bdb1cfe1b2848e6a4337a5,Cupertino Miranda,cupertino.miranda@oracle.com,1715084539,Andrii Nakryiko,andrii@kernel.org,1715118060,f3082e2ad5d8f4b1fea3389e2d366c448ed43846,675b4e24bc50f4600b6bf3527fdbaa1f73498334,"selftests/bpf: Add CFLAGS per source file and runner

This patch adds support to specify CFLAGS per source file and per test
runner.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240507122220.207820-2-cupertino.miranda@oracle.com
",,This commit adds support for specifying CFLAGS per source file and test runner in selftests for BPF.,"CFLAGS,selftests,BPF",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
675b4e24bc50f4600b6bf3527fdbaa1f73498334,675b4e24bc50f4600b6bf3527fdbaa1f73498334,Jose E. Marchesi,jose.marchesi@oracle.com,1715075411,Andrii Nakryiko,andrii@kernel.org,1715118000,2cd0591f6a6783e93dcbc6be1ac408a6e4f8d57f,eda80aacd00c016d7c03a2bfe231fafdce0e16b0,"bpf: Temporarily define BPF_NO_PRESEVE_ACCESS_INDEX for GCC

The vmlinux.h file generated by bpftool makes use of compiler pragmas
in order to install the CO-RE preserve_access_index in all the struct
types derived from the BTF info:

  #ifndef __VMLINUX_H__
  #define __VMLINUX_H__

  #ifndef BPF_NO_PRESERVE_ACCESS_INDEX
  #pragma clang attribute push (__attribute__((preserve_access_index))"," apply_t = record
  #endif

  [... type definitions generated from kernel BTF ... ]

  #ifndef BPF_NO_PRESERVE_ACCESS_INDEX
  #pragma clang attribute pop
  #endif

The `clang attribute push/pop' pragmas are specific to clang/llvm and
are not supported by GCC.

At the moment the BTF dumping services in libbpf do not support
dicriminating between types dumped because they are directly referred
and types dumped because they are dependencies.  A suitable API is
being worked now. See [1] and [2].

In the interim","[' this patch changes the selftests/bpf Makefile so it\npasses -DBPF_NO_PRESERVE_ACCESS_INDEX to GCC when it builds the\nselftests.  This workaround is temporary', ' and may have an impact on\nthe results of the GCC-built tests.\n\n[1] https://lore.kernel.org/bpf/20240503111836.25275-1-jose.marchesi@oracle.com/T/#u\n[2] https://lore.kernel.org/bpf/20240504205510.24785-1-jose.marchesi@oracle.com/T/#u\n\nTested in bpf-next master.\nNo regressions.\n\nSigned-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240507095011.15867-1-jose.marchesi@oracle.com\n', '']",Temporarily define BPF_NO_PRESEVE_ACCESS_INDEX to ensure compatibility with GCC in vmlinux.h file generated by bpftool.,"BPF,GCC,libbpf",It's a build system or CI/CD change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
eda80aacd00c016d7c03a2bfe231fafdce0e16b0,eda80aacd00c016d7c03a2bfe231fafdce0e16b0,Andrii Nakryiko,andrii@kernel.org,1715117480,Andrii Nakryiko,andrii@kernel.org,1715117481,62e0a5e4524fc533da84a074294bff604acd5577,75b0fbf15d8466be618a997cae774eef445c0c7d b0fbdf759da05a35b67fd27b8859738b79af25d6,"Merge branch 'bpf-avoid-attribute-ignored-warnings-in-gcc'

Jose E. Marchesi says:

====================
bpf: avoid `attribute ignored' warnings in GCC

These two patches avoid warnings (turned into errors) when building
the BPF selftests with GCC.

[Changes from V1:
- As requested by reviewer"," an additional patch has been added in
  order to remove __hidden from the `private' macro in
  cpumask_common.h.
- Typo bening -> benign fixed in the commit message of the second
  patch.]
====================

Link: https://lore.kernel.org/r/20240507074227.4523-1-jose.marchesi@oracle.com
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
",[''],Avoid warnings in BPF selftests due to ignored attribute errors in GCC.,"warnings,BPF,GCC",It's a build system or CI/CD change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
b0fbdf759da05a35b67fd27b8859738b79af25d6,b0fbdf759da05a35b67fd27b8859738b79af25d6,Jose E. Marchesi,jose.marchesi@oracle.com,1715067747,Andrii Nakryiko,andrii@kernel.org,1715117480,62e0a5e4524fc533da84a074294bff604acd5577,2ce987e1650216638b2b5f44948c6efea67038ae,"bpf: Disable some `attribute ignored' warnings in GCC

This patch modifies selftests/bpf/Makefile to pass -Wno-attributes to
GCC.  This is because of the following attributes which are ignored:

- btf_decl_tag
- btf_type_tag

  There are many of these.  At the moment none of these are
  recognized/handled by gcc-bpf.

  We are aware that btf_decl_tag is necessary for some of the
  selftest harness to communicate test failure/success.  Support for
  it is in progress in GCC upstream:

  https://gcc.gnu.org/pipermail/gcc-patches/2024-May/650482.html

  However", the GCC master branch is not yet open,"[' so the series\n  above (currently under review upstream) wont be able to make it\n  there until 14.1 gets released', ' probably mid next week.\n\n  As for btf_type_tag', ' more extensive work will be needed in GCC\n  upstream to support it in both BTF and DWARF.  We have a WIP big\n  patch for that', ' but that is not needed to compile/build the\n  selftests.\n\n- used\n\n  There are SEC macros defined in the selftests as:\n\n  #define SEC(N) __attribute__((section(N)', ""used))\n\n  The SEC macro is used for both functions and global variables.\n  According to the GCC documentation `used' attribute is really only\n  meaningful for functions"", ' and it warns when the attribute is used\n  for other global objects', ' like for example ctl_array in\n  test_xdp_noinline.c.\n\n  Ignoring this is benign.\n\n- align_value\n\n  In progs/test_cls_redirect.c:127 there is:\n\n  typedef uint8_t *net_ptr __attribute__((align_value(8)));\n\n  GCC warns that it is ignoring this attribute', ' because it is not\n  implemented by GCC.\n\n  I think ignoring this attribute in GCC is benign', "" because according\n  to the clang documentation [1] its purpose seems to be merely\n  declarative and doesn't seem to translate into extra checks at\n  run-time"", ' only to perhaps better optimized code (""runtime behavior\n  is undefined if the pointed memory object is not aligned to the\n  specified alignment"").\n\n  [1] https://clang.llvm.org/docs/AttributeReference.html#align-value\n\nTested in bpf-next master.\n\nSigned-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Yonghong Song <yonghong.song@linux.dev>\nLink: https://lore.kernel.org/bpf/20240507074227.4523-3-jose.marchesi@oracle.com\n', '']",The commit updates the Makefile to disable certain GCC attribute warnings for btf_decl_tag and btf_type_tag.,"GCC, warnings, Makefile",It's a build system or CI/CD change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2ce987e1650216638b2b5f44948c6efea67038ae,2ce987e1650216638b2b5f44948c6efea67038ae,Jose E. Marchesi,jose.marchesi@oracle.com,1715067746,Andrii Nakryiko,andrii@kernel.org,1715117480,bbbf2a0a74ed23ada895ab0b7fdafc3b2a02ec3d,75b0fbf15d8466be618a997cae774eef445c0c7d,"bpf: Avoid __hidden__ attribute in static object

An object defined as `static' defaults to hidden visibility.  If
additionally the visibility(__weak__) compiler attribute is applied to
the declaration of the object"," GCC warns that the attribute gets
ignored.

This patch removes the only instance of this problem among the BPF
selftests.

Tested in bpf-next master.

Signed-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240507074227.4523-2-jose.marchesi@oracle.com
",[''],The commit removes the __hidden__ attribute for static objects in BPF selftests to resolve a compiler warning.,"__hidden__ attribute, static objects, BPF selftests",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
75b0fbf15d8466be618a997cae774eef445c0c7d,75b0fbf15d8466be618a997cae774eef445c0c7d,Haiyue Wang,haiyue.wang@intel.com,1715063619,Alexei Starovoitov,ast@kernel.org,1715116397,ce13ac4a304803e14b9bdd2ebbb9aa4198a12839,329a6720a3ebbc041983b267981ab2cac102de93,"bpf: Remove redundant page mask of vmf->address

As the comment described in ""struct vm_fault"":
	"".address""      : 'Faulting virtual address - masked'
	"".real_address"" : 'Faulting virtual address - unmasked'

The link [1] said: ""Whatever the routes"," all architectures end up to the
invocation of handle_mm_fault() which","[' in turn', ' (likely) ends up calling\n__handle_mm_fault() to carry out the actual work of allocating the page\ntables.""\n\n  __handle_mm_fault() does address assignment:\n\t.address = address & PAGE_MASK', '\n\t.real_address = address', '\n\nThis is debug dump by running `./test_progs -a ""*arena*""`:\n\n[   69.767494] arena fault: vmf->address = 10000001d000', ' vmf->real_address = 10000001d008\n[   69.767496] arena fault: vmf->address = 10000001c000', ' vmf->real_address = 10000001c008\n[   69.767499] arena fault: vmf->address = 10000001b000', ' vmf->real_address = 10000001b008\n[   69.767501] arena fault: vmf->address = 10000001a000', ' vmf->real_address = 10000001a008\n[   69.767504] arena fault: vmf->address = 100000019000', ' vmf->real_address = 100000019008\n[   69.769388] arena fault: vmf->address = 10000001e000', "" vmf->real_address = 10000001e1e8\n\nSo we can use the value of 'vmf->address' to do BPF arena kernel address\nspace cast directly.\n\n[1] https://docs.kernel.org/mm/page_tables.html\n\nSigned-off-by: Haiyue Wang <haiyue.wang@intel.com>\nLink: https://lore.kernel.org/r/20240507063358.8048-1-haiyue.wang@intel.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n"", '']",The commit removes a redundant page mask of vmf->address in the bpf code.,"redundant,page,mask",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The syscall interface,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
89ea968a9d759f71ac7b8d50949a8e5e5bcb1111,89ea968a9d759f71ac7b8d50949a8e5e5bcb1111,Benjamin Tissoires,bentiss@kernel.org,1715006172,Benjamin Tissoires,bentiss@kernel.org,1715089198,4323a95fbcc36568a41235c3b4b28da5670230d7,b22cbfb42c19a378cca5fae3a98395225af05384,"selftests/hid: skip tests with HID-BPF if udev-hid-bpf is not installed

udev-hid-bpf is still not installed everywhere"," and we should probably
not assume it is installed automatically.

Link: https://lore.kernel.org/r/20240506143612.148031-1-bentiss@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Skip HID-BPF self-tests if udev-hid-bpf is not installed.,"self-tests,HID-BPF,udev",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['HID driver like programs']
b22cbfb42c19a378cca5fae3a98395225af05384,b22cbfb42c19a378cca5fae3a98395225af05384,Benjamin Tissoires,bentiss@kernel.org,1712769578,Benjamin Tissoires,bentiss@kernel.org,1715089195,71d8ff440783b6ff25e0afb893f9058af55fb9e9,aa7e560454a90d4fe9924500f1ae2a3779806b85,"selftests/hid: add tests for the Raptor Mach 2 joystick

The only interesting bit is the HAT switch"," and we use a BPF program
to fix it. So ensure this works correctly.

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-18-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Add selftests for Raptor Mach 2 joystick using BPF program to ensure correct functionality of the HAT switch.,"selftests, joystick, BPF",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['HID driver like programs']
aa7e560454a90d4fe9924500f1ae2a3779806b85,aa7e560454a90d4fe9924500f1ae2a3779806b85,Benjamin Tissoires,bentiss@kernel.org,1712769577,Benjamin Tissoires,bentiss@kernel.org,1715089191,17b7e8bd4bfc0b94302842fba888d6ea07aac6b4,c6b03c736a523902bb53bb9897f5c75292b3424b,"selftests/hid: move the gamepads definitions in the test file

More in line with the other test_* files.

No code change

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-17-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,Moved gamepad definitions within selftests/hid to the test file for consistency.,"gamepads,hid,selftests",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['HID driver like programs']
c6b03c736a523902bb53bb9897f5c75292b3424b,c6b03c736a523902bb53bb9897f5c75292b3424b,Benjamin Tissoires,bentiss@kernel.org,1712769576,Benjamin Tissoires,bentiss@kernel.org,1715089187,3501bf56377d7fcf08997b751877e2b5c32d9bce,51de9ee0a6c7f0d06fa7b80ff2ef9f3f661c3eb6,"selftests/hid: import base_gamepad.py from hid-tools

We need to slightly change base_device.py for supporting HID-BPF","
so instead of monkey patching","["" let's just embed it in the kernel tree.\n\nLink: https://lore.kernel.org/r/20240410-bpf_sources-v1-16-a8bf16033ef8@kernel.org\nReviewed-by: Peter Hutterer <peter.hutterer@who-t.net>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n"", '']",This commit imports base_gamepad.py from hid-tools and modifies base_device.py to support HID-BPF.,"base_gamepad.py,hid-tools,HID-BPF",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['HID driver like programs']
51de9ee0a6c7f0d06fa7b80ff2ef9f3f661c3eb6,51de9ee0a6c7f0d06fa7b80ff2ef9f3f661c3eb6,Benjamin Tissoires,bentiss@kernel.org,1712769575,Benjamin Tissoires,bentiss@kernel.org,1715089183,0586f76bfa1d755dce02a60ffe49a4e39801f3cc,1b2c3caf7839adff892d8397995803d93e347974,"selftests/hid: add Huion Kamvas Pro 19 tests

This tablets gets a lot of things wrong:
- the secondary button is reported through Secondary Tip Switch
- the third button is reported through Invert

We need to add some out of proximity intermediate state when moving
back and forth with the eraser mode as it can only be triggered by
physically returning the pen"," meaning that the tolerated transitions
can never happen.

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-15-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Add tests for Huion Kamvas Pro 19 in HID selftests to address incorrect button reporting.,"HID selftests, Huion Kamvas, button",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['HID driver like programs']
1b2c3caf7839adff892d8397995803d93e347974,1b2c3caf7839adff892d8397995803d93e347974,Benjamin Tissoires,bentiss@kernel.org,1712769574,Benjamin Tissoires,bentiss@kernel.org,1715089179,0315b020072bf9ac1fd316e1da436e05093cfed7,03899011df4b2bb0f9b3ac57b1044b161a336f31,"selftests/hid: tablets: also check for XP-Pen offset correction

The values are taken from the HID-BPF file.
Basically we are recomputing the array provided there.

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-14-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,Added offset correction for XP-Pen in HID selftests for tablets.,"offset correction, XP-Pen, selftests",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['HID driver like programs']
03899011df4b2bb0f9b3ac57b1044b161a336f31,03899011df4b2bb0f9b3ac57b1044b161a336f31,Benjamin Tissoires,bentiss@kernel.org,1712769573,Benjamin Tissoires,bentiss@kernel.org,1715089174,9152c64498c1d1a4b6e10121f0280c82dc5c1ef0,e14d88d9b8dae40c6f612c6fc74b7d03d12f3c94,"selftests/hid: tablets: add a couple of XP-PEN tablets

Those tablets don't need special initialization"," but are reporting
the events with the wrong usages:
- tip switch is used when the eraser should be used
- eraser is used instead of the secondary barrel switch

Add tests for those so we don't regress in the future.

Currently we set x/y tilt to 0 to not trigger the bpf program
compensate_coordinates_by_tilt()

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-13-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Add test cases for XP-PEN tablets in selftests/hid to address event reporting issues.,"XP-PEN, selftests, tablets",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['HID driver like programs']
e14d88d9b8dae40c6f612c6fc74b7d03d12f3c94,e14d88d9b8dae40c6f612c6fc74b7d03d12f3c94,Benjamin Tissoires,bentiss@kernel.org,1712769572,Benjamin Tissoires,bentiss@kernel.org,1715089170,4b1aee3772a51e4c922b1deb3f7176f48472c199,e906463087cec0a179ddcafe08aeef5899af6b00,"selftests/hid: tablets: reduce the number of pen state

All the *_WITH*BUTTON states were almost identical except for the
button itself.

I need to add a new device with a third button"," and adding a bunch of
states is going to be quite cumbersome.

So convert the `button` parameter of PenState as a boolean","[' and store\nwhich button is the target as an argument to all functions that need it.\n\nLink: https://lore.kernel.org/r/20240410-bpf_sources-v1-12-a8bf16033ef8@kernel.org\nReviewed-by: Peter Hutterer <peter.hutterer@who-t.net>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Refactor the pen button state handling in HID selftests by converting button parameter to a boolean for simplicity.,"HID,selftests,refactor",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
e906463087cec0a179ddcafe08aeef5899af6b00,e906463087cec0a179ddcafe08aeef5899af6b00,Benjamin Tissoires,bentiss@kernel.org,1712769571,Benjamin Tissoires,bentiss@kernel.org,1715089166,09ee01e25e496756aaf1d42c4e3c3849355aefa9,a7def2e51c667578140d9aa3282533463ed3df91,"selftests/hid: add support for HID-BPF pre-loading before starting a test

few required changes:
- we need to count how many times a udev 'bind' event happens
- we need to tell `udev-hid-bpf` to not automatically attach the
  provided HID-BPF objects
- we need to manually attach the ones from the kernel tree"," and wait
  for the second udev 'bind' event to happen

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-11-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Add support for pre-loading HID-BPF in selftests before tests start.,"HID-BPF, selftests, udev",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['HID driver like programs']
a7def2e51c667578140d9aa3282533463ed3df91,a7def2e51c667578140d9aa3282533463ed3df91,Benjamin Tissoires,bentiss@kernel.org,1712769570,Benjamin Tissoires,bentiss@kernel.org,1715089163,d74968d1d3f3163c496e93b7cca9141f2d822dc0,0cd1465cac52d7d5b4584a29f97bddc5e8bb421f,"selftests/hid: import base_device.py from hid-tools

We need to slightly change base_device.py for supporting HID-BPF","
so instead of monkey patching","["" let's just embed it in the kernel tree.\n\nLink: https://lore.kernel.org/r/20240410-bpf_sources-v1-10-a8bf16033ef8@kernel.org\nReviewed-by: Peter Hutterer <peter.hutterer@who-t.net>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n"", '']",Import base_device.py from hid-tools and modify it to support HID-BPF.,"base_device.py,HID-BPF,selftests",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
0cd1465cac52d7d5b4584a29f97bddc5e8bb421f,0cd1465cac52d7d5b4584a29f97bddc5e8bb421f,Benjamin Tissoires,bentiss@kernel.org,1712769569,Benjamin Tissoires,bentiss@kernel.org,1715089159,1f586e10087f177e3566a5cbe4e1fe4ce31a2f34,9f1bf4c225329d27e85fc1c5b5af9e6ebf4a8ff3,"HID: bpf: add in-tree HID-BPF fix for the Raptor Mach 2

This device is already fixed by ""HID: do not assume HAT Switch
logical max < 8""", but for people without the fix already,"[' having the\nHID-BPF locally can fix the device while they wait for their\ndistribution to update.\n\nLink: https://lore.kernel.org/r/20240410-bpf_sources-v1-9-a8bf16033ef8@kernel.org\nReviewed-by: Peter Hutterer <peter.hutterer@who-t.net>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Add HID-BPF fix for Raptor Mach 2 to address compatibility with previous HID fix.,"HID,BPF,Raptor",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
9f1bf4c225329d27e85fc1c5b5af9e6ebf4a8ff3,9f1bf4c225329d27e85fc1c5b5af9e6ebf4a8ff3,Benjamin Tissoires,bentiss@kernel.org,1712769568,Benjamin Tissoires,bentiss@kernel.org,1715089156,8766e103998a9d4c235eb8386cd42f63196ff0b9,1c046d09c6ba4ff5fb959b2d195cacadb2ae6977,"HID: bpf: add in-tree HID-BPF fix for the Huion Kamvas Pro 19

This tablets gets a lot of things wrong:
- the secondary button is reported through Secondary Tip Switch
- the third button is reported through Invert

Fortunately", before entering eraser mode,"[' (so Invert = 1)', '\nthe tablet always sends an out-of-proximity event.\nSo we can detect that single event and:\n- if there was none but the invert bit was toggled: this is the\n  third button\n- if there was this out-of-proximity event', ' we are entering\n  eraser mode', ' and we will until the next out-of-proximity.\n\nLink: https://lore.kernel.org/r/20240410-bpf_sources-v1-8-a8bf16033ef8@kernel.org\nReviewed-by: Peter Hutterer <peter.hutterer@who-t.net>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Fixes HID-BPF issues with incorrect button mapping for Huion Kamvas Pro 19 tablet.,"HID-BPF, Huion Kamvas, fix",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
1c046d09c6ba4ff5fb959b2d195cacadb2ae6977,1c046d09c6ba4ff5fb959b2d195cacadb2ae6977,Benjamin Tissoires,bentiss@kernel.org,1712769567,Benjamin Tissoires,bentiss@kernel.org,1715089152,5943b580af384322d3373b1203d38a6fadc302df,d9e78973921d215a6453b609a6326dab9dbc5a60,"HID: bpf: add in-tree HID-BPF fix for the XBox Elite 2 over Bluetooth

When using the XBox Wireless Controller Elite 2 over Bluetooth","
the device exports the paddle on the back of the device as a single
bitfield value of usage ""Assign Selection"".

The kernel doesn't process those usages properly and report KEY_UNKNOWN
for it.

SDL doesn't know how to interprete that KEY_UNKNOWN and thus ignores the
paddles.

Given that over USB the kernel uses BTN_TRIGGER_HAPPY[5-8]","[' we\ncan tweak the report descriptor to make the kernel interprete it properly:\n- we need an application collection of gamepad (so we have to close the\n  current Consumer Control one)\n- we need to change the usage to be buttons from 0x15 to 0x18\n\nLink: https://lore.kernel.org/r/20240410-bpf_sources-v1-7-a8bf16033ef8@kernel.org\nReviewed-by: Peter Hutterer <peter.hutterer@who-t.net>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Fixes HID-BPF handling of Xbox Elite 2 paddle usage over Bluetooth in Linux.,"HID,Bluetooth,Xbox",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
d9e78973921d215a6453b609a6326dab9dbc5a60,d9e78973921d215a6453b609a6326dab9dbc5a60,Benjamin Tissoires,bentiss@kernel.org,1712769566,Benjamin Tissoires,bentiss@kernel.org,1715089147,26c150f33a55dccc1b6d3632d902dbddf89a6d9f,0bc8f89f40403cfbc3c6e676b0bee240a9349d3f,"HID: bpf: add in-tree HID-BPF fix for the Wacom ArtPen

This pen is compatible with multiple Wacom tablets"," but we only add support
for the Intuos Pro 2 M","[' as this is the one our user reported the bug\nagainst.\n\nWe can not generically add all compatible Wacom tablets as we are\nwriting the offsets by hand.\n\nThe point of this HID-BPF program is to work around a firmware limitation\nwhere the pressure is repeated every other report.\nGiven that we know this will happen', ' we can change the first new pressure\ninformation with the mean compared to the previous one. This way we\nsmooth the incoming pressure without losing information.\n\nCc: Ping Cheng <pinglinux@gmail.com>\nCc: Jason Gerecke <killertofu@gmail.com>\nCc: Aaron Armstrong Skomra <skomra@gmail.com>\nCc: Joshua Dickens <Joshua@joshua-dickens.com>\nLink: https://lore.kernel.org/r/20240410-bpf_sources-v1-6-a8bf16033ef8@kernel.org\nReviewed-by: Peter Hutterer <peter.hutterer@who-t.net>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Add HID-BPF support for the Wacom ArtPen compatible with Intuos Pro 2 M tablets.,"HID, BPF, Wacom",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
0bc8f89f40403cfbc3c6e676b0bee240a9349d3f,0bc8f89f40403cfbc3c6e676b0bee240a9349d3f,Benjamin Tissoires,bentiss@kernel.org,1712769565,Benjamin Tissoires,bentiss@kernel.org,1715089144,0538c95b2948c9464061233f7035aaade4d2574e,4e6d2a297dd5be26ad409b7a05b20bd033d1c95e,"HID: bpf: add in-tree HID-BPF fix for the IOGear Kaliber Gaming MMOmentum mouse

Allows to export more than 5 buttons on this 12 buttons mouse.

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-5-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,Add support in HID-BPF for more than 5 buttons on the IOGear Kaliber Gaming MMOmentum mouse.,"HID-BPF, IOGear, buttons",It's a new feature.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
4e6d2a297dd5be26ad409b7a05b20bd033d1c95e,4e6d2a297dd5be26ad409b7a05b20bd033d1c95e,Benjamin Tissoires,bentiss@kernel.org,1712769564,Benjamin Tissoires,bentiss@kernel.org,1715089140,ed9b98394858399f5d755642227deee2c0adccab,e0599675a32cb994a076a4b40d3e42d8353a5bb7,"HID: bpf: add in-tree HID-BPF fix for the HP Elite Presenter Mouse

Duplicate of commit 0db117359e47 (""HID: add quirk for 03f0:464a HP Elite
Presenter Mouse"")"," but in a slightly better way.

This time we actually change the application collection","[' making clearer\nfor userspace what the second mouse is.\n\nNote that having both hid-quirks fix and this HID-BPF fix is not a\nproblem at all.\n\nLink: https://lore.kernel.org/r/20240410-bpf_sources-v1-4-a8bf16033ef8@kernel.org\nReviewed-by: Peter Hutterer <peter.hutterer@who-t.net>\nSigned-off-by: Benjamin Tissoires <bentiss@kernel.org>\n', '']",Add in-tree HID-BPF fix for HP Elite Presenter Mouse with improved application collection changes.,"HID-BPF, HP, fix",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['HID driver like programs']
e0599675a32cb994a076a4b40d3e42d8353a5bb7,e0599675a32cb994a076a4b40d3e42d8353a5bb7,Benjamin Tissoires,bentiss@kernel.org,1712769563,Benjamin Tissoires,bentiss@kernel.org,1715089137,1dbdc5ce864409c8a8861476151bbec8383db6d3,04b3e5ab055553e074ea54ef316982b55cdde96b,"HID: bpf: add in-tree HID-BPF fix for the XPPen Artist 16

Same problem than the Artist 24: the second button on the pen is treated
like an eraser.
But the problem is even worse this time. There is an actual eraser at
the tail of the pen.

The compensation of the coordinates was done by Martin

Signed-off-by: Martin Sivak <mars@montik.net>
Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-3-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",,Fixes the HID-BPF handling for the XPPen Artist 16 to correctly recognize the pen eraser function.,"HID-BPF,XPPen Artist,eraser",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['HID driver like programs']
04b3e5ab055553e074ea54ef316982b55cdde96b,04b3e5ab055553e074ea54ef316982b55cdde96b,Benjamin Tissoires,bentiss@kernel.org,1712769562,Benjamin Tissoires,bentiss@kernel.org,1715089133,48c4349295d9509c46a65491fd522189746c4d18,65ad580a14e875c2d8c027cf1a2ca03b849ff843,"HID: bpf: add first in-tree HID-BPF fix for the XPPen Artist 24

This commit adds a fix for XPPen Artist 24 where the second button on
the pen is used as an eraser.

It's a ""feature"" from Microsoft"," but it turns out that it's actually
painful for artists. So we ship here a HID-BPF program that turns this
second button into an actual button.

Note that the HID-BPF program is not directly loaded by the kernel itself
but by udev-hid-bpf[0]. But having the sources here allows us to also
integrate tests into tools/testing/selftests/hid to ensure the HID-BPF
program are actually tested.

[0] https://gitlab.freedesktop.org/libevdev/udev-hid-bpf

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-2-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],Add HID-BPF fix for XPPen Artist 24 to turn second pen button into a functional button instead of an eraser.,"HID,BPF,XPPen",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
65ad580a14e875c2d8c027cf1a2ca03b849ff843,65ad580a14e875c2d8c027cf1a2ca03b849ff843,Benjamin Tissoires,bentiss@kernel.org,1712769561,Benjamin Tissoires,bentiss@kernel.org,1715089116,426b9017f1eec4f1b019e521777a08b93393e622,b912cf042072e12e93faa874265b30cc0aa521b9,"HID: do not assume HAT Switch logical max < 8

Turns out that the code can handle a greater range"," but the data stored
can not. This is problematic on the Raptor Mach 2 joystick which
logical max is 239. The kernel interprets it as `-15` and thus ignores
the Hat Switch handling.

Link: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/issues/17
Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-1-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
",[''],This commit fixes the handling of HAT Switch logical maximums greater than 8 in the Raptor Mach 2 joystick.,"HID, HAT Switch, joystick",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,['HID driver like programs']
8ecf3c1dab1c675721d3d0255556abe2306fa340,8ecf3c1dab1c675721d3d0255556abe2306fa340,Christophe Leroy,christophe.leroy@csgroup.eu,1709652983,Michael Ellerman,mpe@ellerman.id.au,1715084222,df05258dde6471d1198bcdf18f24a30306e70c9e,be140f1732b523947425aaafbe2e37b41b622d96,"powerpc/bpf/32: Fix failing test_bpf tests

Recent additions in BPF like cpu v4 instructions"," test_bpf module
exhibits the following failures:

  test_bpf: #82 ALU_MOVSX | BPF_B jited:1 ret 2 != 1 (0x2 != 0x1)FAIL (1 times)
  test_bpf: #83 ALU_MOVSX | BPF_H jited:1 ret 2 != 1 (0x2 != 0x1)FAIL (1 times)
  test_bpf: #84 ALU64_MOVSX | BPF_B jited:1 ret 2 != 1 (0x2 != 0x1)FAIL (1 times)
  test_bpf: #85 ALU64_MOVSX | BPF_H jited:1 ret 2 != 1 (0x2 != 0x1)FAIL (1 times)
  test_bpf: #86 ALU64_MOVSX | BPF_W jited:1 ret 2 != 1 (0x2 != 0x1)FAIL (1 times)

  test_bpf: #165 ALU_SDIV_X: -6 / 2 = -3 jited:1 ret 2147483645 != -3 (0x7ffffffd != 0xfffffffd)FAIL (1 times)
  test_bpf: #166 ALU_SDIV_K: -6 / 2 = -3 jited:1 ret 2147483645 != -3 (0x7ffffffd != 0xfffffffd)FAIL (1 times)

  test_bpf: #169 ALU_SMOD_X: -7 % 2 = -1 jited:1 ret 1 != -1 (0x1 != 0xffffffff)FAIL (1 times)
  test_bpf: #170 ALU_SMOD_K: -7 % 2 = -1 jited:1 ret 1 != -1 (0x1 != 0xffffffff)FAIL (1 times)

  test_bpf: #172 ALU64_SMOD_K: -7 % 2 = -1 jited:1 ret 1 != -1 (0x1 != 0xffffffff)FAIL (1 times)

  test_bpf: #313 BSWAP 16: 0x0123456789abcdef -> 0xefcd
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 301 PASS
  test_bpf: #314 BSWAP 32: 0x0123456789abcdef -> 0xefcdab89
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 555 PASS
  test_bpf: #315 BSWAP 64: 0x0123456789abcdef -> 0x67452301
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 268 PASS
  test_bpf: #316 BSWAP 64: 0x0123456789abcdef >> 32 -> 0xefcdab89
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 269 PASS
  test_bpf: #317 BSWAP 16: 0xfedcba9876543210 -> 0x1032
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 460 PASS
  test_bpf: #318 BSWAP 32: 0xfedcba9876543210 -> 0x10325476
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 320 PASS
  test_bpf: #319 BSWAP 64: 0xfedcba9876543210 -> 0x98badcfe
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 222 PASS
  test_bpf: #320 BSWAP 64: 0xfedcba9876543210 >> 32 -> 0x10325476
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 273 PASS

  test_bpf: #344 BPF_LDX_MEMSX | BPF_B
  eBPF filter opcode 0091 (@5) unsupported
  jited:0 432 PASS
  test_bpf: #345 BPF_LDX_MEMSX | BPF_H
  eBPF filter opcode 0089 (@5) unsupported
  jited:0 381 PASS
  test_bpf: #346 BPF_LDX_MEMSX | BPF_W
  eBPF filter opcode 0081 (@5) unsupported
  jited:0 505 PASS

  test_bpf: #490 JMP32_JA: Unconditional jump: if (true) return 1
  eBPF filter opcode 0006 (@1) unsupported
  jited:0 261 PASS

  test_bpf: Summary: 1040 PASSED","[' 10 FAILED', ' [924/1038 JIT\'ed]\n\nFix them by adding missing processing.\n\nFixes: daabb2b098e0 (""bpf/tests: add tests for cpuv4 instructions"")\nSigned-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://msgid.link/91de862dda99d170697eb79ffb478678af7e0b27.1709652689.git.christophe.leroy@csgroup.eu\n', '']",Fixes failing test_bpf cases on powerpc architecture related to BPF instructions and kernel tests.,"test_bpf,bpf,instructions",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
329a6720a3ebbc041983b267981ab2cac102de93,329a6720a3ebbc041983b267981ab2cac102de93,Alexei Starovoitov,ast@kernel.org,1715040552,Alexei Starovoitov,ast@kernel.org,1715040560,d5c433c0d9cf68d1e208cc06512d49f00d9e3a33,41b307ad756e1b7b618bf9d9c1cce3595705ede4 92956786b4e26ea22e5b3c1c86cc71f5c9b3b9d8,"Merge branch 'bpf-verifier-range-computation-improvements'

Cupertino Miranda says:

====================
bpf/verifier: range computation improvements

Hi everyone","

This is what I hope to be the last version. :)

Regards","['\nCupertino\n\nChanges from v1:\n - Reordered patches in the series.\n - Fix refactor to be acurate with original code.\n - Fixed other mentioned small problems.\n\nChanges from v2:\n - Added a patch to replace mark_reg_unknowon for __mark_reg_unknown in\n   the context of range computation.\n - Reverted implementation of refactor to v1 which used a simpler\n   boolean return value in check function.\n - Further relaxed MUL to allow it to still compute a range when neither\n   of its registers is a known value.\n - Simplified tests based on Eduards example.\n - Added messages in selftest commits.\n\nChanges from v3:\n - Improved commit message of patch nr 1.\n - Coding style fixes.\n - Improve XOR and OR tests.\n - Made function calls to pass struct bpf_reg_state pointer instead.\n - Improved final code as a last patch.\n\nChanges from v4:\n - Merged patch nr 7 in 2.\n\n====================\n\nLink: https://lore.kernel.org/r/20240506141849.185293-1-cupertino.miranda@oracle.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Improve bpf verifier with enhanced range computation methodology.,"verifier, range, computation",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
92956786b4e26ea22e5b3c1c86cc71f5c9b3b9d8,92956786b4e26ea22e5b3c1c86cc71f5c9b3b9d8,Cupertino Miranda,cupertino.miranda@oracle.com,1715005129,Alexei Starovoitov,ast@kernel.org,1715040552,d5c433c0d9cf68d1e208cc06512d49f00d9e3a33,41d047a871062f1a4d1871a1908d380c14e75428,"selftests/bpf: MUL range computation tests.

Added a test for bound computation in MUL when non constant
values are used and both registers have bounded ranges.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Andrii Nakryiko <andrii.nakryiko@gmail.com>
Cc: Yonghong Song <yonghong.song@linux.dev>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: David Faust <david.faust@oracle.com>
Cc: Jose Marchesi <jose.marchesi@oracle.com>
Cc: Elena Zannoni <elena.zannoni@oracle.com>
Link: https://lore.kernel.org/r/20240506141849.185293-7-cupertino.miranda@oracle.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Add test case for MUL range computation with non-constant values and bounded registers.,"test,MUL,range",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
41d047a871062f1a4d1871a1908d380c14e75428,41d047a871062f1a4d1871a1908d380c14e75428,Cupertino Miranda,cupertino.miranda@oracle.com,1715005128,Alexei Starovoitov,ast@kernel.org,1715040552,3461ffd9f5283a4ff853a704fb887b0d798ff767,5ec9a7d13f49b9c1c5ba854244d1f2ba414cf139,"bpf/verifier: relax MUL range computation check

MUL instruction required that src_reg would be a known value (i.e.
src_reg would be a const value). The condition in this case can be
relaxed"," since the range computation algorithm used in current code
already supports a proper range computation for any valid range value on
its operands.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Andrii Nakryiko <andrii.nakryiko@gmail.com>
Cc: Yonghong Song <yonghong.song@linux.dev>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: David Faust <david.faust@oracle.com>
Cc: Jose Marchesi <jose.marchesi@oracle.com>
Cc: Elena Zannoni <elena.zannoni@oracle.com>
Link: https://lore.kernel.org/r/20240506141849.185293-6-cupertino.miranda@oracle.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],The commit relaxes the MUL range computation check in the eBPF verifier.,"MUL,relax,verifier",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
5ec9a7d13f49b9c1c5ba854244d1f2ba414cf139,5ec9a7d13f49b9c1c5ba854244d1f2ba414cf139,Cupertino Miranda,cupertino.miranda@oracle.com,1715005127,Alexei Starovoitov,ast@kernel.org,1715040551,448928be55a8dfcc6c0855d697b78c850fdad69b,138cc42c05d11fd5ee82ee1606d2c9823373a926,"selftests/bpf: XOR and OR range computation tests.

Added a test for bound computation in XOR and OR when non constant
values are used and both registers have bounded ranges.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Cc: Yonghong Song <yonghong.song@linux.dev>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: David Faust <david.faust@oracle.com>
Cc: Jose Marchesi <jose.marchesi@oracle.com>
Cc: Elena Zannoni <elena.zannoni@oracle.com>
Cc: Andrii Nakryiko <andrii.nakryiko@gmail.com>
Link: https://lore.kernel.org/r/20240506141849.185293-5-cupertino.miranda@oracle.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",,Added XOR and OR range computation tests for non-constant values in eBPF selftests.,"XOR, OR, selftests",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
138cc42c05d11fd5ee82ee1606d2c9823373a926,138cc42c05d11fd5ee82ee1606d2c9823373a926,Cupertino Miranda,cupertino.miranda@oracle.com,1715005126,Alexei Starovoitov,ast@kernel.org,1715040551,383933f497a27b1046f720057b979d727e0d0516,0922c78f592c60e5a8fe6ab968479def124d4ff3,"bpf/verifier: improve XOR and OR range computation

Range for XOR and OR operators would not be attempted unless src_reg
would resolve to a single value"," i.e. a known constant value.
This condition is unnecessary","[' and the following XOR/OR operator\nhandling could compute a possible better range.\n\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\n\nSigned-off-by: Cupertino Miranda <cupertino.miranda@oracle.com\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nCc: Yonghong Song <yonghong.song@linux.dev>\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nCc: David Faust <david.faust@oracle.com>\nCc: Jose Marchesi <jose.marchesi@oracle.com>\nCc: Elena Zannoni <elena.zannoni@oracle.com>\nCc: Andrii Nakryiko <andrii.nakryiko@gmail.com>\nLink: https://lore.kernel.org/r/20240506141849.185293-4-cupertino.miranda@oracle.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",Improves range computation logic for XOR and OR operations in BPF verifier.,"verifier,XOR,OR",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
0922c78f592c60e5a8fe6ab968479def124d4ff3,0922c78f592c60e5a8fe6ab968479def124d4ff3,Cupertino Miranda,cupertino.miranda@oracle.com,1715005125,Alexei Starovoitov,ast@kernel.org,1715040551,c1b1bdf43c77e34bc31a2252067487e259a94e86,d786957ebd3fb4cfd9147dbcccd1e8f3871b45ce,"bpf/verifier: refactor checks for range computation

Split range computation checks in its own function"," isolating pessimitic
range set for dst_reg and failing return to a single point.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Cc: Yonghong Song <yonghong.song@linux.dev>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: David Faust <david.faust@oracle.com>
Cc: Jose Marchesi <jose.marchesi@oracle.com>
Cc: Elena Zannoni <elena.zannoni@oracle.com>
Cc: Andrii Nakryiko <andrii.nakryiko@gmail.com>

bpf/verifier: improve code after range computation recent changes.
Link: https://lore.kernel.org/r/20240506141849.185293-3-cupertino.miranda@oracle.com

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
",[''],Refactor range computation checks into a separate function in the eBPF verifier.,"refactor, range computation, verifier",It's a cleanup or refactoring in the code.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d786957ebd3fb4cfd9147dbcccd1e8f3871b45ce,d786957ebd3fb4cfd9147dbcccd1e8f3871b45ce,Cupertino Miranda,cupertino.miranda@oracle.com,1715005124,Alexei Starovoitov,ast@kernel.org,1715040551,8248921c59a99bdf7bfac780f92ea5c1246da626,41b307ad756e1b7b618bf9d9c1cce3595705ede4,"bpf/verifier: replace calls to mark_reg_unknown.

In order to further simplify the code in adjust_scalar_min_max_vals all
the calls to mark_reg_unknown are replaced by __mark_reg_unknown.

static void mark_reg_unknown(struct bpf_verifier_env *env","
  			     struct bpf_reg_state *regs","[' u32 regno)\n{\n\tif (WARN_ON(regno >= MAX_BPF_REG)) {\n\t\t... mark all regs not init ...\n\t\treturn;\n    }\n\t__mark_reg_unknown(env', "" regs + regno);\n}\n\nThe 'regno >= MAX_BPF_REG' does not apply to\nadjust_scalar_min_max_vals()"", ' because it is only called from the\nfollowing stack:\n  - check_alu_op\n    - adjust_reg_min_max_vals\n      - adjust_scalar_min_max_vals\n\nThe check_alu_op() does check_reg_arg() which verifies that both src and\ndst register numbers are within bounds.\n\nSigned-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>\nAcked-by: Eduard Zingerman <eddyz87@gmail.com>\nCc: Yonghong Song <yonghong.song@linux.dev>\nCc: Alexei Starovoitov <alexei.starovoitov@gmail.com>\nCc: David Faust <david.faust@oracle.com>\nCc: Jose Marchesi <jose.marchesi@oracle.com>\nCc: Elena Zannoni <elena.zannoni@oracle.com>\nCc: Andrii Nakryiko <andrii.nakryiko@gmail.com>\nLink: https://lore.kernel.org/r/20240506141849.185293-2-cupertino.miranda@oracle.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n', '']",The commit replaces calls to mark_reg_unknown with __mark_reg_unknown in the eBPF verifier for code simplification.,"mark_reg_unknown, bpf, verifier",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The eBPF verifier,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
41b307ad756e1b7b618bf9d9c1cce3595705ede4,41b307ad756e1b7b618bf9d9c1cce3595705ede4,John Hubbard,jhubbard@nvidia.com,1714950054,Andrii Nakryiko,andrii@kernel.org,1715031576,a41194186c6f374dc9093246364c1b0ed031553d,e549b39a0ab8880d7ae6c6495b00fc1cb8f36174,bpftool," selftests/hid/bpf: Fix 29 clang warnings

When building either tools/bpf/bpftool","[' or tools/testing/selftests/hid', '\n(the same Makefile is used for these)', ' clang generates many instances of\nthe following:\n\n    ""clang: warning: -lLLVM-17: \'linker\' input unused""\n\nQuentin points out that the LLVM version is only required in $(LIBS)', '\nnot in $(CFLAGS)', ' so the fix is to remove it from CFLAGS.\n\nSuggested-by: Quentin Monnet <qmo@kernel.org>\nSigned-off-by: John Hubbard <jhubbard@nvidia.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Quentin Monnet <qmo@kernel.org>\nLink: https://lore.kernel.org/bpf/20240505230054.13813-1-jhubbard@nvidia.com\n', '']",Fixes 29 clang warnings in selftests/hid/bpf for bpftool.,"clang,warnings,bpftool",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The bpftool utility,['HID driver like programs']
e549b39a0ab8880d7ae6c6495b00fc1cb8f36174,e549b39a0ab8880d7ae6c6495b00fc1cb8f36174,Michal Schmidt,mschmidt@redhat.com,1715007022,Andrii Nakryiko,andrii@kernel.org,1715028142,e2b4ed7f9f9cc6b2904155c29ccf6b4b63077b96,8e6d9ae2e09f1f6ba65614a5e5c5a2a2e335dcba,"selftests/bpf: Fix pointer arithmetic in test_xdp_do_redirect

Cast operation has a higher precedence than addition. The code here
wants to zero the 2nd half of the 64-bit metadata"," but due to a pointer
arithmetic mistake","[' it writes the zero at offset 16 instead.\n\nJust adding parentheses around ""data + 4"" would fix this', ' but I think\nthis will be slightly better readable with array syntax.\n\nI was unable to test this with tools/testing/selftests/bpf/vmtest.sh', '\nbecause my glibc is newer than glibc in the provided VM image.\nSo I just checked the difference in the compiled code.\nobjdump -S tools/testing/selftests/bpf/xdp_do_redirect.test.o:\n  -\t*((__u32 *)data) = 0x42; /* metadata test value */\n  +\t((__u32 *)data)[0] = 0x42; /* metadata test value */\n        be7:\t48 8d 85 30 fc ff ff \tlea    -0x3d0(%rbp)', '%rax\n        bee:\tc7 00 42 00 00 00    \tmovl   $0x42', '(%rax)\n  -\t*((__u32 *)data + 4) = 0;\n  +\t((__u32 *)data)[1] = 0;\n        bf4:\t48 8d 85 30 fc ff ff \tlea    -0x3d0(%rbp)', '%rax\n  -     bfb:\t48 83 c0 10          \tadd    $0x10', '%rax\n  +     bfb:\t48 83 c0 04          \tadd    $0x4', '%rax\n        bff:\tc7 00 00 00 00 00    \tmovl   $0x0', '(%rax)\n\nFixes: 5640b6d89434 (""selftests/bpf: fix ""metadata marker"" getting overwritten by the netstack"")\nSigned-off-by: Michal Schmidt <mschmidt@redhat.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nReviewed-by: Toke Høiland-Jørgensen <toke@redhat.com>\nLink: https://lore.kernel.org/bpf/20240506145023.214248-1-mschmidt@redhat.com\n', '']",Fixes pointer arithmetic mistake in test_xdp_do_redirect for selftests in BPF.,"pointer, arithmetic, selftests",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['xdp like programs']
8e6d9ae2e09f1f6ba65614a5e5c5a2a2e335dcba,8e6d9ae2e09f1f6ba65614a5e5c5a2a2e335dcba,Martin KaFai Lau,martin.lau@kernel.org,1714783845,Andrii Nakryiko,andrii@kernel.org,1715028024,811617fea13f0eb366fc71068a5e0ca0b1a56e6b,a9e7715ce8b3a62a2133e47e87107632a26ad1e2,"selftests/bpf: Use bpf_tracing.h instead of bpf_tcp_helpers.h

The bpf programs that this patch changes require the BPF_PROG macro.
The BPF_PROG macro is defined in the libbpf's bpf_tracing.h.
Some tests include bpf_tcp_helpers.h which includes bpf_tracing.h.
They don't need other things from bpf_tcp_helpers.h other than
bpf_tracing.h. This patch simplifies it by directly including
the bpf_tracing.h.

The motivation of this unnecessary code churn is to retire
the bpf_tcp_helpers.h by directly using vmlinux.h. Right now","
the main usage of the bpf_tcp_helpers.h is the partial kernel
socket definitions (e.g. socket","[' sock', ' tcp_sock). While the test\ncases continue to grow', ' fields are kept adding to those partial\nsocket definitions (e.g. the recent bpf_cc_cubic.c test which\ntried to extend bpf_tcp_helpers.c but eventually used the\nvmlinux.h instead).\n\nThe idea is to retire bpf_tcp_helpers.c and consistently use\nvmlinux.h for the tests that require the kernel sockets. This\npatch tackles the obvious tests that can directly use bpf_tracing.h\ninstead of bpf_tcp_helpers.h.\n\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240504005045.848376-1-martin.lau@linux.dev\n', '']",The commit simplifies code by directly including bpf_tracing.h instead of bpf_tcp_helpers.h in selftests/bpf.,"bpf_tracing.h,selftests,bpf_tcp_helpers.h",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['tracepoints like programs']
61688a82e047a4166436bf2665716cc070572ffa,61688a82e047a4166436bf2665716cc070572ffa,Hari Bathini,hbathini@linux.ibm.com,1714671125,Michael Ellerman,mpe@ellerman.id.au,1714997118,09628b901852a720ed6b8c9b8d6654109123a57f,2ecfe59cd7de1f202e9af2516a61fbbf93d0bd4d,"powerpc/bpf: enable kfunc call

Currently"," bpf jit code on powerpc assumes all the bpf functions and
helpers to be part of core kernel text. This is false for kfunc case","['\nas function addresses may not be part of core kernel text area. So', '\nadd support for addresses that are not within core kernel text area\ntoo', ' to enable kfunc support. Emit instructions based on whether the\nfunction address is within core kernel text address or not', ' to retain\noptimized instruction sequence where possible.\n\nIn case of PCREL', ' as a bpf function that is not within core kernel\ntext area is likely to go out of range with relative addressing on\nkernel base', ' use PC relative addressing. If that goes out of range', '\nload the full address with PPC_LI64().\n\nWith addresses that are not within core kernel text area supported', '\noverride bpf_jit_supports_kfunc_call() to enable kfunc support. Also', '\noverride bpf_jit_supports_far_kfunc_call() to enable 64-bit pointers', '\nas an address offset can be more than 32-bit long on PPC64.\n\nSigned-off-by: Hari Bathini <hbathini@linux.ibm.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://msgid.link/20240502173205.142794-2-hbathini@linux.ibm.com\n\n', '']",Enable kfunc calls in powerpc BPF JIT by addressing assumptions about BPF function locations.,"powerpc, kfunc, JIT",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
2ecfe59cd7de1f202e9af2516a61fbbf93d0bd4d,2ecfe59cd7de1f202e9af2516a61fbbf93d0bd4d,Hari Bathini,hbathini@linux.ibm.com,1714671124,Michael Ellerman,mpe@ellerman.id.au,1714997118,26b5ae261b36c0c074b43aa26749c306f2958f58,fae573060c8da4d84a2551c6753d272abfda8ddc,"powerpc/64/bpf: fix tail calls for PCREL addressing

With PCREL addressing", there is no kernel TOC. So,"["" it is not setup in\nprologue when PCREL addressing is used. But the number of instructions\nto skip on a tail call was not adjusted accordingly. That resulted in\nnot so obvious failures while using tailcalls. 'tailcalls' selftest\ncrashed the system with the below call trace:\n\n  bpf_test_run+0xe8/0x3cc (unreliable)\n  bpf_prog_test_run_skb+0x348/0x778\n  __sys_bpf+0xb04/0x2b00\n  sys_bpf+0x28/0x38\n  system_call_exception+0x168/0x340\n  system_call_vectored_common+0x15c/0x2ec\n\nAlso"", ' as bpf programs are always module addresses and a bpf helper in\ngeneral is a core kernel text address', ' using PC relative addressing\noften fails with ""out of range of pcrel address"" error. Switch to\nusing kernel base for relative addressing to handle this better.\n\nFixes: 7e3a68be42e1 (""powerpc/64: vmlinux support building with PCREL addresing"")\nCc: stable@vger.kernel.org # v6.4+\nSigned-off-by: Hari Bathini <hbathini@linux.ibm.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://msgid.link/20240502173205.142794-1-hbathini@linux.ibm.com\n\n', '']",Fixes tail call handling for PCREL addressing mode on powerpc/64 architecture.,"tail calls, PCREL, powerpc",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The JIT compiler,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
a9e7715ce8b3a62a2133e47e87107632a26ad1e2,a9e7715ce8b3a62a2133e47e87107632a26ad1e2,Jose E. Marchesi,jose.marchesi@oracle.com,1714669765,Andrii Nakryiko,andrii@kernel.org,1714715938,880720a0e92a73f85ef14201eafb8dc6d166d19f,cf9bea94f6b2934d409511c05337010b137316a3,"libbpf: Avoid casts from pointers to enums in bpf_tracing.h

[Differences from V1:
  - Do not introduce a global typedef"," as this is a public header.
  - Keep the void* casts in BPF_KPROBE_READ_RET_IP and
    BPF_KRETPROBE_READ_RET_IP","[' as these are necessary\n    for converting to a const void* argument of\n    bpf_probe_read_kernel.]\n\nThe BPF_PROG', ' BPF_KPROBE and BPF_KSYSCALL macros defined in\ntools/lib/bpf/bpf_tracing.h use a clever hack in order to provide a\nconvenient way to define entry points for BPF programs as if they were\nnormal C functions that get typed actual arguments', ' instead of as\nelements in a single ""context"" array argument.\n\nFor example', ' PPF_PROGS allows writing:\n\n  SEC(""struct_ops/cwnd_event"")\n  void BPF_PROG(cwnd_event', ' struct sock *sk', ' enum tcp_ca_event event)\n  {\n        bbr_cwnd_event(sk', ' event);\n        dctcp_cwnd_event(sk', ' event);\n        cubictcp_cwnd_event(sk', ' event);\n  }\n\nThat expands into a pair of functions:\n\n  void ____cwnd_event (unsigned long long *ctx', ' struct sock *sk', ' enum tcp_ca_event event)\n  {\n        bbr_cwnd_event(sk', ' event);\n        dctcp_cwnd_event(sk', ' event);\n        cubictcp_cwnd_event(sk', ' event);\n  }\n\n  void cwnd_event (unsigned long long *ctx)\n  {\n        _Pragma(""GCC diagnostic push"")\n        _Pragma(""GCC diagnostic ignored \\""-Wint-conversion\\"""")\n        return ____cwnd_event(ctx', ' (void*)ctx[0]', ' (void*)ctx[1]);\n        _Pragma(""GCC diagnostic pop"")\n  }\n\nNote how the 64-bit unsigned integers in the incoming CTX get casted\nto a void pointer', ' and then implicitly converted to whatever type of\nthe actual argument in the wrapped function.  In this case:\n\n  Arg1: unsigned long long -> void * -> struct sock *\n  Arg2: unsigned long long -> void * -> enum tcp_ca_event\n\nThe behavior of GCC and clang when facing such conversions differ:\n\n  pointer -> pointer\n\n    Allowed by the C standard.\n    GCC: no warning nor error.\n    clang: no warning nor error.\n\n  pointer -> integer type\n\n    [C standard says the result of this conversion is implementation\n     defined', ' and it may lead to unaligned pointer etc.]\n\n    GCC: error: integer from pointer without a cast [-Wint-conversion]\n    clang: error: incompatible pointer to integer conversion [-Wint-conversion]\n\n  pointer -> enumerated type\n\n    GCC: error: incompatible types in assigment (*)\n    clang: error: incompatible pointer to integer conversion [-Wint-conversion]\n\nThese macros work because converting pointers to pointers is allowed', '\nand converting pointers to integers also works provided a suitable\ninteger type even if it is implementation defined', ' much like casting a\npointer to uintptr_t is guaranteed to work by the C standard.  The\nconversion errors emitted by both compilers by default are silenced by\nthe pragmas.\n\nHowever', ' the GCC error marked with (*) above when assigning a pointer\nto an enumerated value is not associated with the -Wint-conversion\nwarning', ' and it is not possible to turn it off.\n\nThis is preventing building the BPF kernel selftests with GCC.\n\nThis patch fixes this by avoiding intermediate casts to void*', ""\nreplaced with casts to `unsigned long long'"", ' which is an integer type\ncapable of safely store a BPF pointer', ' much like the standard\nuintptr_t.\n\nTesting performed in bpf-next master:\n  - vmtest.sh -- ./test_verifier\n  - vmtest.sh -- ./test_progs\n  - make M=samples/bpf\nNo regressions.\n\nSigned-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/20240502170925.3194-1-jose.marchesi@oracle.com\n', '']",This commit avoids pointer-to-enum casts in the libbpf bpf_tracing.h code.,"libbpf, enums, casts",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,['kprobe/uprobe/ftrace like programs']
cf9bea94f6b2934d409511c05337010b137316a3,cf9bea94f6b2934d409511c05337010b137316a3,Jose E. Marchesi,jose.marchesi@oracle.com,1714303559,Andrii Nakryiko,andrii@kernel.org,1714715242,936bd3b2ecf89b3dbd8e8f848dfcec9042c61cd3,087d757fb4736ecbd3e42eebf9b39d5225d4a2ee,"libbpf: Fix bpf_ksym_exists() in GCC

The macro bpf_ksym_exists is defined in bpf_helpers.h as:

  #define bpf_ksym_exists(sym) ({								\
  	_Static_assert(!__builtin_constant_p(!!sym)"," #sym "" should be marked as __weak"");	\
  	!!sym;											\
  })

The purpose of the macro is to determine whether a given symbol has
been defined","[' given the address of the object associated with the\nsymbol.  It also has a compile-time check to make sure the object\nwhose address is passed to the macro has been declared as weak', "" which\nmakes the check on `sym' meaningful.\n\nAs it happens"", "" the check for weak doesn't work in GCC in all cases"", '\nbecause __builtin_constant_p not always folds at parse time when\noptimizing.  This is because optimizations that happen later in the\ncompilation process', ' like inlining', ' may make a previously non-constant\nexpression a constant.  This results in errors like the following when\nbuilding the selftests with GCC:\n\n  bpf_helpers.h:190:24: error: expression in static assertion is not constant\n  190 |         _Static_assert(!__builtin_constant_p(!!sym)', ' #sym "" should be marked as __weak"");       \\\n      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFortunately recent versions of GCC support a __builtin_has_attribute\nthat can be used to directly check for the __weak__ attribute.  This\npatch changes bpf_helpers.h to use that builtin when building with a\nrecent enough GCC', ' and to omit the check if GCC is too old to support\nthe builtin.\n\nThe macro used for GCC becomes:\n\n  #define bpf_ksym_exists(sym) ({\t\t\t\t\t\t\t\t\t\\\n\t_Static_assert(__builtin_has_attribute (*sym', ' __weak__)', ' #sym "" should be marked as __weak"");\t\\\n\t!!sym;\t\t\t\t\t\t\t\t\t\t\t\t\\\n  })\n\nNote that since bpf_ksym_exists is designed to get the address of the\nobject associated with symbol SYM', ' we pass *sym to\n__builtin_has_attribute instead of sym.  When an expression is passed\nto __builtin_has_attribute then it is the type of the passed\nexpression that is checked for the specified attribute.  The\nexpression itself is not evaluated.  This accommodates well with the\nexisting usages of the macro:\n\n- For function objects:\n\n  struct task_struct *bpf_task_acquire(struct task_struct *p) __ksym __weak;\n  [...]\n  bpf_ksym_exists(bpf_task_acquire)\n\n- For variable objects:\n\n  extern const struct rq runqueues __ksym __weak; /* typed */\n  [...]\n  bpf_ksym_exists(&runqueues)\n\nNote also that BPF support was added in GCC 10 and support for\n__builtin_has_attribute in GCC 9.\n\nLocally tested in bpf-next master branch.\nNo regressions.\n\nSigned-of-by: Jose E. Marchesi <jose.marchesi@oracle.com>\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Yonghong Song <yonghong.song@linux.dev>\nLink: https://lore.kernel.org/bpf/20240428112559.10518-1-jose.marchesi@oracle.com\n', '']",Fix issue with bpf_ksym_exists macro in GCC within the libbpf library.,"libbpf,GCC,macro",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
087d757fb4736ecbd3e42eebf9b39d5225d4a2ee,087d757fb4736ecbd3e42eebf9b39d5225d4a2ee,Andrii Nakryiko,andrii@kernel.org,1714508392,Martin KaFai Lau,martin.lau@kernel.org,1714693263,f3cbe0b31c148fc7e2957e0bb2874ab8c4d10a6c,00f0e08f23fc007f4a5a71cd7e37fcdb15af0c1b,"libbpf: fix ring_buffer__consume_n() return result logic

Add INT_MAX check to ring_buffer__consume_n(). We do the similar check
to handle int return result of all these ring buffer APIs in other APIs
and ring_buffer__consume_n() is missing one. This patch fixes this
omission.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Link: https://lore.kernel.org/r/20240430201952.888293-2-andrii@kernel.org
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Fix logic in libbpf's ring_buffer__consume_n() to properly handle INT_MAX case.,"libbpf,int,ring_buffer",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
00f0e08f23fc007f4a5a71cd7e37fcdb15af0c1b,00f0e08f23fc007f4a5a71cd7e37fcdb15af0c1b,Andrii Nakryiko,andrii@kernel.org,1714508391,Martin KaFai Lau,martin.lau@kernel.org,1714693262,9bf2f7de3fb366f9cda9f3566132e53885be313c,29f38ca3e5ca5cacc33291f22c4848c6907b9d2b,"libbpf: fix potential overflow in ring__consume_n()

ringbuf_process_ring() return int64_t"," while ring__consume_n() assigns
it to int. It's highly unlikely","[' but possible for ringbuf_process_ring()\nto return value larger than INT_MAX', ' so use int64_t. ring__consume_n()\ndoes check INT_MAX before returning int result to the user.\n\nFixes: 4d22ea94ea33 (""libbpf: Add ring__consume_n / ring_buffer__consume_n"")\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>\nLink: https://lore.kernel.org/r/20240430201952.888293-1-andrii@kernel.org\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Fix potential overflow in ring__consume_n function in libbpf by adjusting data type assignment.,"potential overflow, ring__consume_n, libbpf",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
29f38ca3e5ca5cacc33291f22c4848c6907b9d2b,29f38ca3e5ca5cacc33291f22c4848c6907b9d2b,Martin KaFai Lau,martin.lau@kernel.org,1714689590,Martin KaFai Lau,martin.lau@kernel.org,1714692730,8e45830a9f0b33c1d5b0f27b746b91ae350d88d6,f8c423d1ca4f4f4224bb6ca486478b7f51a91701 96c3490d6423b7f24d356e24a61c24de69f3de77,"Merge branch 'Add new args into tcp_congestion_ops' cong_control'

Miao Xu says:

====================
This patchset attempts to add two new arguments into the hookpoint
cong_control in tcp_congestion_ops. The new arguments are inherited
from the caller tcp_cong_control and can be used by any bpf cc prog
that implements its own logic inside this hookpoint.

Please review. Thanks a lot!

Changelog
=====
v2->v3:
  - Fixed the broken selftest caused by the new arguments.
  - Renamed the selftest file name and bpf prog name.

v1->v2:
  - Split the patchset into 3 separate patches.
  - Added highlights in the selftest prog.
  - Removed the dependency on bpf_tcp_helpers.h.
====================

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Merge to add new arguments to tcp_congestion_ops hook and fix related selftests.,"tcp, congestion-control, hookpoint",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['tc/netfilter like programs']
96c3490d6423b7f24d356e24a61c24de69f3de77,96c3490d6423b7f24d356e24a61c24de69f3de77,Miao Xu,miaxu@meta.com,1714623798,Martin KaFai Lau,martin.lau@kernel.org,1714692724,8e45830a9f0b33c1d5b0f27b746b91ae350d88d6,0325cbd21e3c26eff88bc7da303ffb46b4f5d294,"selftests/bpf: Add test for the use of new args in cong_control

This patch adds a selftest to show the usage of the new arguments in
cong_control. For simplicity's sake"," the testing example reuses cubic's
kernel functions.

Signed-off-by: Miao Xu <miaxu@meta.com>
Link: https://lore.kernel.org/r/20240502042318.801932-4-miaxu@meta.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],Add a selftest for demonstrating new arguments usage in cong_control.,"selftest,new arguments,cong control",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['other']
0325cbd21e3c26eff88bc7da303ffb46b4f5d294,0325cbd21e3c26eff88bc7da303ffb46b4f5d294,Miao Xu,miaxu@meta.com,1714623797,Martin KaFai Lau,martin.lau@kernel.org,1714692416,0be09be46ced079b7b53b2b5fa528212c23daea7,57bfc7605ca5b102ba336779ae9adbc5bbba1d96,"bpf: tcp: Allow to write tp->snd_cwnd_stamp in bpf_tcp_ca

This patch allows the write of tp->snd_cwnd_stamp in a bpf tcp
ca program. An use case of writing this field is to keep track
of the time whenever tp->snd_cwnd is raised or reduced inside
the `cong_control` callback.

Reviewed-by: Eric Dumazet <edumazet@google.com>
Signed-off-by: Miao Xu <miaxu@meta.com>
Link: https://lore.kernel.org/r/20240502042318.801932-3-miaxu@meta.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Allows writing tp->snd_cwnd_stamp in BPF TCP congestion control programs.,"bpf,tcp,snd_cwnd_stamp",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['cgroup like programs']
f8c423d1ca4f4f4224bb6ca486478b7f51a91701,f8c423d1ca4f4f4224bb6ca486478b7f51a91701,Martin KaFai Lau,martin.lau@kernel.org,1714676963,Martin KaFai Lau,martin.lau@kernel.org,1714688817,68733e5147e407466dbcdd8d6248ce797315cb8a,08e90da6872a9f9f63ca2911bbce6883b6fc1a19 e0c8a7e7526ff1526d4dcc7d71aad4e7fe2ec767,"Merge branch 'selftests/bpf: Add sockaddr tests for kernel networking'

Jordan Rife says:

====================
This patch series adds test coverage for BPF sockaddr hooks and their
interactions with kernel socket functions (i.e. kernel_bind()","
kernel_connect()","[' kernel_sendmsg()', ' sock_sendmsg()', '\nkernel_getpeername()', ' and kernel_getsockname()) while also rounding out\nIPv4 and IPv6 sockaddr hook coverage in prog_tests/sock_addr.c.\n\nAs with v1 of this patch series', ' we add regression coverage for the\nissues addressed by these patches', '\n\n- commit 0bdf399342c5(""net: Avoid address overwrite in kernel_connect"")\n- commit 86a7e0b69bd5(""net: prevent rewrite of msg_name in sock_sendmsg()"")\n- commit c889a99a21bf(""net: prevent address rewrite in kernel_bind()"")\n- commit 01b2885d9415(""net: Save and restore msg_namelen in sock_sendmsg"")\n\nbut broaden the focus a bit.\n\nIn order to extend prog_tests/sock_addr.c to test these kernel\nfunctions', ' we add a set of new kfuncs that wrap individual socket\noperations to bpf_testmod and invoke them through set of corresponding\nSYSCALL programs (progs/sock_addr_kern.c). Each test case can be\nconfigured to use a different set of ""sock_ops"" depending on whether it\nis testing kernel calls (kernel_bind()', ' kernel_connect()', ' etc.) or\nsystem calls (bind()', ' connect()', ' etc.).\n\n=======\nPatches\n=======\n* Patch 1 fixes the sock_addr bind test program to work for big endian\n  architectures such as s390x.\n* Patch 2 introduces the new kfuncs to bpf_testmod.\n* Patch 3 introduces the BPF program which allows us to invoke these\n  kfuncs invividually from the test program.\n* Patch 4 lays the groundwork for IPv4 and IPv6 sockaddr hook coverage\n  by migrating much of the environment setup logic from\n  bpf/test_sock_addr.sh into prog_tests/sock_addr.c and moves test cases\n  to cover bind4/6', ' connect4/6', ' sendmsg4/6 and recvmsg4/6 hooks.\n* Patch 5 makes the set of socket operations for each test case\n  configurable', ' laying the groundwork for Patch 6.\n* Patch 6 introduces two sets of sock_ops that invoke the kernel\n  equivalents of connect()', ' bind()', ' etc. and uses these to add coverage\n  for the kernel socket functions.\n\n=======\nChanges\n=======\nv2->v3\n------\n* Renamed bind helpers. Dropped ""_ntoh"" suffix.\n* Added guards to kfuncs to make sure addrlen and msglen do not exceed\n  the buffer capacity.\n* Added KF_SLEEPABLE flag to kfuncs.\n* Added a mutex (sock_lock) to kfuncs to serialize access to sock.\n* Added NULL check for sock to each kfunc.\n* Use the ""sock_addr"" networking namespace for all network interface\n  setup and testing.\n* Use ""nodad"" when calling ""ip -6 addr add"" during interface setup to\n  avoid delays and remove ping loop.\n* Removed test cases from test_sock_addr.c to make it clear what remains\n  to be migrated.\n* Removed unused parameter (expect_change) from sock_addr_op().\n\nLink: https://lore.kernel.org/bpf/20240412165230.2009746-1-jrife@google.com/T/#u\n\nv1->v2\n------\n* Dropped test_progs/sock_addr_kern.c and the sock_addr_kern test module\n  in favor of simply expanding bpf_testmod and test_progs/sock_addr.c.\n* Migrated environment setup logic from bpf/test_sock_addr.sh into\n  prog_tests/sock_addr.c rather than invoking the script from the test\n  program.\n* Added kfuncs to bpf_testmod as well as the sock_addr_kern BPF program\n  to enable us to invoke kernel socket functions from\n  test_progs/sock_addr.c.\n* Added test coverage for kernel socket functions to\n  test_progs/sock_addr.c.\n\nLink: https://lore.kernel.org/bpf/20240329191907.1808635-1-jrife@google.com/T/#u\n====================\n\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",This commit adds test coverage for BPF sockaddr hooks testing kernel socket functions like kernel_bind and kernel_connect.,"test coverage,sockaddr hooks,kernel functions",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
e0c8a7e7526ff1526d4dcc7d71aad4e7fe2ec767,e0c8a7e7526ff1526d4dcc7d71aad4e7fe2ec767,Jordan Rife,jrife@google.com,1714427123,Martin KaFai Lau,martin.lau@kernel.org,1714688611,68733e5147e407466dbcdd8d6248ce797315cb8a,524e05ac4e14bb50b4f442e1fe88540abc9b72fd,"selftests/bpf: Add kernel socket operation tests

This patch creates two sets of sock_ops that call out to the SYSCALL
hooks in the sock_addr_kern BPF program and uses them to construct
test cases for the range of supported operations (kernel_connect()","
kernel_bind()","[' kernel_sendms()', ' sock_sendmsg()', ' kernel_getsockname()', '\nkenel_getpeername()). This ensures that these interact with BPF sockaddr\nhooks as intended.\n\nBeyond this it also ensures that these operations do not modify their\naddress parameter', ' providing regression coverage for the issues\naddressed by this set of patches:\n\n- commit 0bdf399342c5(""net: Avoid address overwrite in kernel_connect"")\n- commit 86a7e0b69bd5(""net: prevent rewrite of msg_name in sock_sendmsg()"")\n- commit c889a99a21bf(""net: prevent address rewrite in kernel_bind()"")\n- commit 01b2885d9415(""net: Save and restore msg_namelen in sock_sendmsg"")\n\nSigned-off-by: Jordan Rife <jrife@google.com>\nLink: https://lore.kernel.org/r/20240429214529.2644801-7-jrife@google.com\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Added kernel socket operation tests in selftests for BPF programs involving syscall hooks.,socket tests syscall,It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
524e05ac4e14bb50b4f442e1fe88540abc9b72fd,524e05ac4e14bb50b4f442e1fe88540abc9b72fd,Jordan Rife,jrife@google.com,1714427122,Martin KaFai Lau,martin.lau@kernel.org,1714688611,765072b222024b6ccc7e4569d273de808bfa1195,8a9d22b8aeb2182cfe83991f11a88b3351084d3e,"selftests/bpf: Make sock configurable for each test case

In order to reuse the same test code for both socket system calls (e.g.
connect()", bind(),"[' etc.) and kernel socket functions (e.g.\nkernel_connect()', ' kernel_bind()', ' etc.)', ' this patch introduces the ""ops""\nfield to sock_addr_test. This field allows each test cases to configure\nthe set of functions used in the test case to create', ' manipulate', ' and\ntear down a socket.\n\nSigned-off-by: Jordan Rife <jrife@google.com>\nLink: https://lore.kernel.org/r/20240429214529.2644801-6-jrife@google.com\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",The commit makes socket configurations customizable in each eBPF selftest case.,"selftests,bpf,socket",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
8a9d22b8aeb2182cfe83991f11a88b3351084d3e,8a9d22b8aeb2182cfe83991f11a88b3351084d3e,Jordan Rife,jrife@google.com,1714427121,Martin KaFai Lau,martin.lau@kernel.org,1714688605,3537da922bc2becfa3c0230e14ef6078a1fa0f1f,15b6671efa508ff9c1fb995452913f8de85db73b,"selftests/bpf: Move IPv4 and IPv6 sockaddr test cases

This patch lays the groundwork for testing IPv4 and IPv6 sockaddr hooks
and their interaction with both socket syscalls and kernel functions
(e.g. kernel_connect", kernel_bind,"[' etc.). It moves some of the test\ncases from the old-style bpf/test_sock_addr.c self test into the\nsock_addr prog_test in a step towards fully retiring\nbpf/test_sock_addr.c. We will expand the test dimensions in the\nsock_addr prog_test in a later patch series in order to migrate the\nremaining test cases.\n\nSigned-off-by: Jordan Rife <jrife@google.com>\nLink: https://lore.kernel.org/r/20240429214529.2644801-5-jrife@google.com\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",The commit reorganizes IPv4 and IPv6 sockaddr test cases to facilitate testing hooks with socket syscalls and kernel functions.,"IPv4, IPv6, sockaddr",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
15b6671efa508ff9c1fb995452913f8de85db73b,15b6671efa508ff9c1fb995452913f8de85db73b,Jordan Rife,jrife@google.com,1714427120,Martin KaFai Lau,martin.lau@kernel.org,1714676962,490dac80cc2bad6118a4d518b95f0f5a51ab1809,bbb1cfdd02249dc8cf878e86a523b28814ed36c0,"selftests/bpf: Implement BPF programs for kernel socket operations

This patch lays out a set of SYSCALL programs that can be used to invoke
the socket operation kfuncs in bpf_testmod"," allowing a test program to
manipulate kernel socket operations from userspace.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240429214529.2644801-4-jrife@google.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],This commit implements BPF programs for testing kernel socket operations in selftests.,"BPF, socket, selftests",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['socket like programs']
bbb1cfdd02249dc8cf878e86a523b28814ed36c0,bbb1cfdd02249dc8cf878e86a523b28814ed36c0,Jordan Rife,jrife@google.com,1714427119,Martin KaFai Lau,martin.lau@kernel.org,1714676962,83c8c1aef023f1ed9d469c6365826914e1b97bf6,8e667a065daa6f4c01eadc20f3815f7bf13255bc,"selftests/bpf: Implement socket kfuncs for bpf_testmod

This patch adds a set of kfuncs to bpf_testmod that can be used to
manipulate a socket from kernel space.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240429214529.2644801-3-jrife@google.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Add kfuncs to bpf_testmod for manipulating sockets from kernel space.,"kfuncs,socket,bpf_testmod",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The helper and kfuncs,['socket like programs']
8e667a065daa6f4c01eadc20f3815f7bf13255bc,8e667a065daa6f4c01eadc20f3815f7bf13255bc,Jordan Rife,jrife@google.com,1714427118,Martin KaFai Lau,martin.lau@kernel.org,1714676962,c318b7d5d6a1964bf818346968d62112856a9c5b,08e90da6872a9f9f63ca2911bbce6883b6fc1a19,"selftests/bpf: Fix bind program for big endian systems

Without this fix"," the bind4 and bind6 programs will reject bind attempts
on big endian systems. This patch ensures that CI tests pass for the
s390x architecture.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240429214529.2644801-2-jrife@google.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],This commit fixes the bind program to work on big endian systems for selftests in s390x architecture.,"bind program, big endian, selftests",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
e958da0ddbe831197a0023251880a4a09d5ba268,e958da0ddbe831197a0023251880a4a09d5ba268,Jakub Kicinski,kuba@kernel.org,1714676713,Jakub Kicinski,kuba@kernel.org,1714676785,eacded26f9563064a44fd1afe730493898adadb9,dcc61472534e48a200262fd297ab21f8dd94d6cc 545c494465d24b10a4370545ba213c0916f70b95,"Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Cross-merge networking fixes after downstream PR.

Conflicts:

include/linux/filter.h
kernel/bpf/core.c
  66e13b615a0c (""bpf: verifier: prevent userspace memory access"")
  d503a04f8bc0 (""bpf: Add support for certain atomics in bpf_arena to x86 JIT"")
https://lore.kernel.org/all/20240429114939.210328b0@canb.auug.org.au/

No adjacent changes.

Signed-off-by: Jakub Kicinski <kuba@kernel.org>
",,Cross-merge of network-related fixes into main branch with handling of conflicts.,"cross-merge, networking, conflicts",It's other type of commit.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
08e90da6872a9f9f63ca2911bbce6883b6fc1a19,08e90da6872a9f9f63ca2911bbce6883b6fc1a19,Jose E. Marchesi,jose.marchesi@oracle.com,1714658911,Andrii Nakryiko,andrii@kernel.org,1714666921,24997d9e9fbde4e33637d21f8a9942c8e36677c6,7c13ef16e87ac2e44d16c0468b1191bceb06f95c,"bpf: Missing trailing slash in tools/testing/selftests/bpf/Makefile

tools/lib/bpf/Makefile assumes that the patch in OUTPUT is a directory
and that it includes a trailing slash.  This seems to be a common
expectation for OUTPUT among all the Makefiles.

In the rule for runqslower in tools/testing/selftests/bpf/Makefile the
variable BPFTOOL_OUTPUT is set to a directory name that lacks a
trailing slash.  This results in a malformed BPF_HELPER_DEFS being
defined in lib/bpf/Makefile.

This problem becomes evident when a file like
tools/lib/bpf/bpf_tracing.h gets updated.

This patch fixes the problem by adding the missing slash in the value
for BPFTOOL_OUTPUT in the $(OUTPUT)/runqslower rule.

Regtested by running selftests in bpf-next master and building
samples/bpf programs.

Signed-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240502140831.23915-1-jose.marchesi@oracle.com
",,Added missing trailing slash in BPFTOOL_OUTPUT to fix malformed BPF_HELPER_DEFS in Makefile.,"Makefile, trailing slash, BPFTOOL_OUTPUT",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
7c13ef16e87ac2e44d16c0468b1191bceb06f95c,7c13ef16e87ac2e44d16c0468b1191bceb06f95c,Jiri Olsa,jolsa@kernel.org,1714636541,Andrii Nakryiko,andrii@kernel.org,1714665384,ccee84d8045d808a904dcc4b45b5d831e81f6c8b,5a3941f84b8f91bb1e111499d803b32188d33e5d,"libbpf: Fix error message in attach_kprobe_multi

We just failed to retrieve pattern"," so we need to print spec instead.

Fixes: ddc6b04989eb (""libbpf: Add bpf_program__attach_kprobe_multi_opts function"")
Reported-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240502075541.1425761-2-jolsa@kernel.org
",[''],This commit fixes an error message in the libbpf function for attaching kprobe multiple options.,"libbpf,error message,kprobe",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,['kprobe/uprobe/ftrace like programs']
5a3941f84b8f91bb1e111499d803b32188d33e5d,5a3941f84b8f91bb1e111499d803b32188d33e5d,Jiri Olsa,jolsa@kernel.org,1714636540,Andrii Nakryiko,andrii@kernel.org,1714665383,b17b5aeba04269535dff4f7436c3503cf96c67fc,ac2f438c2a85acd07e0ac7dc2f69d45bda1bb498,"libbpf: Fix error message in attach_kprobe_session

We just failed to retrieve pattern"," so we need to print spec instead.

Fixes: 2ca178f02b2f (""libbpf: Add support for kprobe session attach"")
Reported-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240502075541.1425761-1-jolsa@kernel.org
",[''],The commit fixes the error message in libbpf during kprobe session attachment.,"libbpf,error message,kprobe",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
545c494465d24b10a4370545ba213c0916f70b95,545c494465d24b10a4370545ba213c0916f70b95,Linus Torvalds,torvalds@linux-foundation.org,1714665107,Linus Torvalds,torvalds@linux-foundation.org,1714665107,b672512df4f470eeaeee888703ff4db9cec6e456,0106679839f7c69632b3b9833c3268c316c0a9fc 78cfe547607a83de60cd25304fa2422777634712,"Merge tag 'net-6.9-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 ""Including fixes from bpf.

  Relatively calm week"," likely due to public holiday in most places. No
  known outstanding regressions.

  Current release - regressions:

   - rxrpc: fix wrong alignmask in __page_frag_alloc_align()

   - eth: e1000e: change usleep_range to udelay in PHY mdic access

  Previous releases - regressions:

   - gro: fix udp bad offset in socket lookup

   - bpf: fix incorrect runtime stat for arm64

   - tipc: fix UAF in error path

   - netfs: fix a potential infinite loop in extract_user_to_sg()

   - eth: ice: ensure the copied buf is NUL terminated

   - eth: qeth: fix kernel panic after setting hsuid

  Previous releases - always broken:

   - bpf:
       - verifier: prevent userspace memory access
       - xdp: use flags field to disambiguate broadcast redirect

   - bridge: fix multicast-to-unicast with fraglist GSO

   - mptcp: ensure snd_nxt is properly initialized on connect

   - nsh: fix outer header access in nsh_gso_segment().

   - eth: bcmgenet: fix racing registers access

   - eth: vxlan: fix stats counters.

  Misc:

   - a bunch of MAINTAINERS file updates""

* tag 'net-6.9-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (45 commits)
  MAINTAINERS: mark MYRICOM MYRI-10G as Orphan
  MAINTAINERS: remove Ariel Elior
  net: gro: add flush check in udp_gro_receive_segment
  net: gro: fix udp bad offset in socket lookup by adding {inner_}network_offset to napi_gro_cb
  ipv4: Fix uninit-value access in __ip_make_skb()
  s390/qeth: Fix kernel panic after setting hsuid
  vxlan: Pull inner IP header in vxlan_rcv().
  tipc: fix a possible memleak in tipc_buf_append
  tipc: fix UAF in error path
  rxrpc: Clients must accept conn from any address
  net: core: reject skb_copy(_expand) for fraglist GSO skbs
  net: bridge: fix multicast-to-unicast with fraglist GSO
  mptcp: ensure snd_nxt is properly initialized on connect
  e1000e: change usleep_range to udelay in PHY mdic access
  net: dsa: mv88e6xxx: Fix number of databases for 88E6141 / 88E6341
  cxgb4: Properly lock TX queue for the selftest.
  rxrpc: Fix using alignmask being zero for __page_frag_alloc_align()
  vxlan: Add missing VNI filter counter update in arp_reduce().
  vxlan: Fix racy device stats updates.
  net: qede: use return from qede_parse_actions()
  ...
",[''],"This commit merges networking fixes, including BPF-related issues and various other network component corrections.","networking,fixed,BPF",It's other type of commit.,"Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.",Other component related to eBPF but not listed above.,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
ac2f438c2a85acd07e0ac7dc2f69d45bda1bb498,ac2f438c2a85acd07e0ac7dc2f69d45bda1bb498,Vadim Fedorenko,vadfed@meta.com,1714582890,Martin KaFai Lau,martin.lau@kernel.org,1714595546,3dc85b54ee0f51405712da26609aa35e413f3017,0737df6de94661ae55fd3343ce9abec32c687e62,"bpf: crypto: fix build when CONFIG_CRYPTO=m

Crypto subsytem can be build as a module. In this case we still have to
build BPF crypto framework otherwise the build will fail.

Fixes: 3e1c6f35409f (""bpf: make common crypto API for TC/XDP programs"")
Reported-by: kernel test robot <lkp@intel.com>
Closes: https://lore.kernel.org/oe-kbuild-all/202405011634.4JK40epY-lkp@intel.com/
Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Link: https://lore.kernel.org/r/20240501170130.1682309-1-vadfed@meta.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Fix build issue in BPF crypto framework when crypto subsystem is built as a module.,"build, crypto, fix",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"['tc/netfilter like programs', 'xdp like programs']"
0737df6de94661ae55fd3343ce9abec32c687e62,0737df6de94661ae55fd3343ce9abec32c687e62,Andrii Nakryiko,andrii@kernel.org,1714537026,Martin KaFai Lau,martin.lau@kernel.org,1714583844,1928d9d9c26c2532e5c56c0d765c1570617c6442,d913aaa990b6024ce815b66e6ce64d88ba2cd0eb,"libbpf: better fix for handling nulled-out struct_ops program

Previous attempt to fix the handling of nulled-out (from skeleton)
struct_ops program is working well only if struct_ops program is defined
as non-autoloaded by default (i.e."," has SEC(""?struct_ops"") annotation","['\nwith question mark).\n\nUnfortunately', ' that fix is incomplete due to how\nbpf_object_adjust_struct_ops_autoload() is marking referenced or\nnon-referenced struct_ops program as autoloaded (or not). Because\nbpf_object_adjust_struct_ops_autoload() is run after\nbpf_map__init_kern_struct_ops() step', ' which sets program slot to NULL', '\nsuch programs won\'t be considered ""referenced""', "" and so its autoload\nproperty won't be changed.\n\nThis all sounds convoluted and it is"", ' but the desire is to have as\nnatural behavior (as far as struct_ops usage is concerned) as possible.\n\nThis fix is redoing the original fix but makes it work for\nautoloaded-by-default struct_ops programs as well. We achieve this by\nforcing prog->autoload to false if prog was declaratively set for some\nstruct_ops map', ' but then nulled-out from skeleton (programmatically).\nThis achieves desired effect of not autoloading it. If such program is\nstill referenced somewhere else (different struct_ops map or different\ncallback field)', ' it will get its autoload property adjusted by\nbpf_object_adjust_struct_ops_autoload() later.\n\nWe also fix selftest', ' which accidentally used SEC(""?struct_ops"")\nannotation. It was meant to use autoload-by-default program from the\nvery beginning.\n\nFixes: f973fccd43d3 (""libbpf: handle nulled-out program in struct_ops correctly"")\nCc: Kui-Feng Lee <thinker.li@gmail.com>\nCc: Eduard Zingerman <eddyz87@gmail.com>\nCc: Martin KaFai Lau <martin.lau@kernel.org>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20240501041706.3712608-1-andrii@kernel.org\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",Fixes handling of nulled-out struct_ops programs in libbpf for non-autoloaded by default cases.,"libbpf, struct_ops, autoloaded",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
d913aaa990b6024ce815b66e6ce64d88ba2cd0eb,d913aaa990b6024ce815b66e6ce64d88ba2cd0eb,Andrii Nakryiko,andrii@kernel.org,1714582428,Andrii Nakryiko,andrii@kernel.org,1714582428,a8820f8570a0b6634fc1f0e84099a18c8fac9137,9a1a2cb5a0e3531d68a2616663ddce49df85dfff 960635887c967338fd567def3e7905a294f5002b,"Merge branch 'libbpf-support-module-function-syntax-for-tracing-programs'

Viktor Malik says:

====================
libbpf: support ""module:function"" syntax for tracing programs

In some situations"," it is useful to explicitly specify a kernel module
to search for a tracing program target (e.g. when a function of the same
name exists in multiple modules or in vmlinux).

This change enables that by allowing the ""module:function"" syntax for
the find_kernel_btf_id function. Thanks to this","["" the syntax can be used\nboth from a SEC macro (i.e. `SEC(fentry/module:function)`) and via the\nbpf_program__set_attach_target API call.\n---\n\nChanges in v2:\n- stylistic changes (suggested by Andrii)\n- added Andrii's ack to the second patch\n====================\n\nLink: https://lore.kernel.org/r/cover.1714469650.git.vmalik@redhat.com\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\n"", '']","This commit adds support for ""module:function"" syntax in libbpf for tracing programs.","libbpf, module:function, tracing",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,['tracepoints like programs']
960635887c967338fd567def3e7905a294f5002b,960635887c967338fd567def3e7905a294f5002b,Viktor Malik,vmalik@redhat.com,1714469887,Andrii Nakryiko,andrii@kernel.org,1714582428,a8820f8570a0b6634fc1f0e84099a18c8fac9137,8f8a024272f3e335854515b41638bdf89c6d3146,"selftests/bpf: add tests for the ""module: Function"" syntax

The previous patch added support for the ""module:function"" syntax for
tracing programs. This adds tests for explicitly specifying the module
name via the SEC macro and via the bpf_program__set_attach_target call.

Signed-off-by: Viktor Malik <vmalik@redhat.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/8a076168ed847f7c8a6c25715737b1fea84e38be.1714469650.git.vmalik@redhat.com
",,Add selftests for module:function syntax in tracing programs using SEC macro and bpf_program__set_attach_target.,"selftests,module,function",It's a test case or test infrastructure change.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The test cases and makefiles,['tracepoints like programs']
8f8a024272f3e335854515b41638bdf89c6d3146,8f8a024272f3e335854515b41638bdf89c6d3146,Viktor Malik,vmalik@redhat.com,1714469886,Andrii Nakryiko,andrii@kernel.org,1714582427,ebd3594f73d8bd495851b1dc43559d04162656c7,9a1a2cb5a0e3531d68a2616663ddce49df85dfff,"libbpf: support ""module: Function"" syntax for tracing programs

In some situations"," it is useful to explicitly specify a kernel module
to search for a tracing program target (e.g. when a function of the same
name exists in multiple modules or in vmlinux).

This patch enables that by allowing the ""module:function"" syntax for the
find_kernel_btf_id function. Thanks to this","[' the syntax can be used both\nfrom a SEC macro (i.e. `SEC(fentry/module:function)`) and via the\nbpf_program__set_attach_target API call.\n\nSigned-off-by: Viktor Malik <vmalik@redhat.com>\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/bpf/9085a8cb9a552de98e554deb22ff7e977d025440.1714469650.git.vmalik@redhat.com\n', '']",The commit adds support for specifying a module for tracing programs using 'module:function' syntax in libbpf.,"libbpf, tracing programs, module function",It's a new feature.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The libbpf library,"['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']"
e03c05ac9813410d15c9c39ccf02c84efe563533,e03c05ac9813410d15c9c39ccf02c84efe563533,Andrii Nakryiko,andrii@kernel.org,1713467349,Masami Hiramatsu (Google),mhiramat@kernel.org,1714573128,87dc83a0f32ca2fd563cebeec0a164f8b7ae6ba1,b0e28a4b5becea84ae6fca5cbd8a6b80a134e223,"rethook: honor CONFIG_FTRACE_VALIDATE_RCU_IS_WATCHING in rethook_try_get()

Take into account CONFIG_FTRACE_VALIDATE_RCU_IS_WATCHING when validating
that RCU is watching when trying to setup rethooko on a function entry.

One notable exception when we force rcu_is_watching() check is
CONFIG_KPROBE_EVENTS_ON_NOTRACE=y case"," in which case kretprobes will use
old-style int3-based workflow instead of relying on ftrace","[' making RCU\nwatching check important to validate.\n\nThis further (in addition to improvements in the previous patch)\nimproves BPF multi-kretprobe (which rely on rethook) runtime throughput\nby 2.3%', ' according to BPF benchmarks ([0]).\n\n  [0] https://lore.kernel.org/bpf/CAEf4BzauQ2WKMjZdc9s0rBWa01BYbgwHN6aNDXQSHYia47pQ-w@mail.gmail.com/\n\nLink: https://lore.kernel.org/all/20240418190909.704286-2-andrii@kernel.org/\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Paul E. McKenney <paulmck@kernel.org>\nAcked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\n', '']",The commit updates rethook to honor CONFIG_FTRACE_VALIDATE_RCU_IS_WATCHING during function entry validation.,"rethook, ftrace, RCU",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.","['tracepoints like programs', 'kprobe/uprobe/ftrace like programs']"
b0e28a4b5becea84ae6fca5cbd8a6b80a134e223,b0e28a4b5becea84ae6fca5cbd8a6b80a134e223,Andrii Nakryiko,andrii@kernel.org,1713467348,Masami Hiramatsu (Google),mhiramat@kernel.org,1714573128,436194932eee40c5eced2d6019b6d28287ffaf7a,0dc715295d4143d1659879f7f50ad4e9a6f6a99c,"ftrace: make extra rcu_is_watching() validation check optional

Introduce CONFIG_FTRACE_VALIDATE_RCU_IS_WATCHING config option to
control whether ftrace low-level code performs additional
rcu_is_watching()-based validation logic in an attempt to catch noinstr
violations.

This check is expected to never be true and is mostly useful for
low-level validation of ftrace subsystem invariants. For most users it
should probably be kept disabled to eliminate unnecessary runtime
overhead.

This improves BPF multi-kretprobe (relying on ftrace and rethook
infrastructure) runtime throughput by 2%"," according to BPF benchmarks ([0]).

  [0] https://lore.kernel.org/bpf/CAEf4BzauQ2WKMjZdc9s0rBWa01BYbgwHN6aNDXQSHYia47pQ-w@mail.gmail.com/

Link: https://lore.kernel.org/all/20240418190909.704286-1-andrii@kernel.org/

Cc: Steven Rostedt <rostedt@goodmis.org>
Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Paul E. McKenney <paulmck@kernel.org>
Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
",[''],Introduce optional CONFIG_FTRACE_VALIDATE_RCU_IS_WATCHING for ftrace rcu_is_watching validation to improve BPF multi-kretprobe performance by 2%.,"ftrace, rcu_is_watching, BPF",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['kprobe/uprobe/ftrace like programs']
0dc715295d4143d1659879f7f50ad4e9a6f6a99c,0dc715295d4143d1659879f7f50ad4e9a6f6a99c,Jonathan Haslam,jonathan.haslam@gmail.com,1713781385,Masami Hiramatsu (Google),mhiramat@kernel.org,1714573127,8017d84b919d58f1515473f836593275d07e88a4,5120d167e21c674afd0630c65e7f6a00fa0667f1,"uprobes: reduce contention on uprobes_tree access

Active uprobes are stored in an RB tree and accesses to this tree are
dominated by read operations. Currently these accesses are serialized by
a spinlock but this leads to enormous contention when large numbers of
threads are executing active probes.

This patch converts the spinlock used to serialize access to the
uprobes_tree RB tree into a reader-writer spinlock. This lock type
aligns naturally with the overwhelmingly read-only nature of the tree
usage here. Although the addition of reader-writer spinlocks are
discouraged [0]"," this fix is proposed as an interim solution while an
RCU based approach is implemented (that work is in a nascent form). This
fix also has the benefit of being trivial","[' self contained and therefore\nsimple to backport.\n\nWe have used a uprobe benchmark from the BPF selftests [1] to estimate\nthe improvements. Each block of results below show 1 line per execution\nof the benchmark (""the ""Summary"" line) and each line is a run with one\nmore thread added - a thread is a ""producer"". The lines are edited to\nremove extraneous output.\n\nThe tests were executed with this driver script:\n\nfor num_threads in {1..20}\ndo\n  sudo ./bench -a -p $num_threads trig-uprobe-nop | grep Summary\ndone\n\nSPINLOCK (BEFORE)\n==================\nSummary: hits    1.396 ± 0.007M/s (  1.396M/prod)\nSummary: hits    1.656 ± 0.016M/s (  0.828M/prod)\nSummary: hits    2.246 ± 0.008M/s (  0.749M/prod)\nSummary: hits    2.114 ± 0.010M/s (  0.529M/prod)\nSummary: hits    2.013 ± 0.009M/s (  0.403M/prod)\nSummary: hits    1.753 ± 0.008M/s (  0.292M/prod)\nSummary: hits    1.847 ± 0.001M/s (  0.264M/prod)\nSummary: hits    1.889 ± 0.001M/s (  0.236M/prod)\nSummary: hits    1.833 ± 0.006M/s (  0.204M/prod)\nSummary: hits    1.900 ± 0.003M/s (  0.190M/prod)\nSummary: hits    1.918 ± 0.006M/s (  0.174M/prod)\nSummary: hits    1.925 ± 0.002M/s (  0.160M/prod)\nSummary: hits    1.837 ± 0.001M/s (  0.141M/prod)\nSummary: hits    1.898 ± 0.001M/s (  0.136M/prod)\nSummary: hits    1.799 ± 0.016M/s (  0.120M/prod)\nSummary: hits    1.850 ± 0.005M/s (  0.109M/prod)\nSummary: hits    1.816 ± 0.002M/s (  0.101M/prod)\nSummary: hits    1.787 ± 0.001M/s (  0.094M/prod)\nSummary: hits    1.764 ± 0.002M/s (  0.088M/prod)\n\nRW SPINLOCK (AFTER)\n===================\nSummary: hits    1.444 ± 0.020M/s (  1.444M/prod)\nSummary: hits    2.279 ± 0.011M/s (  1.139M/prod)\nSummary: hits    3.422 ± 0.014M/s (  1.141M/prod)\nSummary: hits    3.565 ± 0.017M/s (  0.891M/prod)\nSummary: hits    2.671 ± 0.013M/s (  0.534M/prod)\nSummary: hits    2.409 ± 0.005M/s (  0.401M/prod)\nSummary: hits    2.485 ± 0.008M/s (  0.355M/prod)\nSummary: hits    2.496 ± 0.003M/s (  0.312M/prod)\nSummary: hits    2.585 ± 0.002M/s (  0.287M/prod)\nSummary: hits    2.908 ± 0.011M/s (  0.291M/prod)\nSummary: hits    2.346 ± 0.016M/s (  0.213M/prod)\nSummary: hits    2.804 ± 0.004M/s (  0.234M/prod)\nSummary: hits    2.556 ± 0.001M/s (  0.197M/prod)\nSummary: hits    2.754 ± 0.004M/s (  0.197M/prod)\nSummary: hits    2.482 ± 0.002M/s (  0.165M/prod)\nSummary: hits    2.412 ± 0.005M/s (  0.151M/prod)\nSummary: hits    2.710 ± 0.003M/s (  0.159M/prod)\nSummary: hits    2.826 ± 0.005M/s (  0.157M/prod)\nSummary: hits    2.718 ± 0.001M/s (  0.143M/prod)\nSummary: hits    2.844 ± 0.006M/s (  0.142M/prod)\n\nThe numbers in parenthesis give averaged throughput per thread which is\nof greatest interest here as a measure of scalability. Improvements are\nin the order of 22 - 68% with this particular benchmark (mean = 43%).\n\nV2:\n - Updated commit message to include benchmark results.\n\n[0] https://docs.kernel.org/locking/spinlocks.html\n[1] https://github.com/torvalds/linux/blob/master/tools/testing/selftests/bpf/benchs/bench_trigger.c\n\nLink: https://lore.kernel.org/all/20240422102306.6026-1-jonathan.haslam@gmail.com/\n\nSigned-off-by: Jonathan Haslam <jonathan.haslam@gmail.com>\nAcked-by: Jiri Olsa <jolsa@kernel.org>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\n', '']",Convert spinlock on uprobes_tree to reader-writer spinlock to reduce contention for read-heavy operations.,"uprobes, contention, spinlock",It's a performance optimization.,"Simple, can be used without much configuration. For example, a simple helper function.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['kprobe/uprobe/ftrace like programs']
5120d167e21c674afd0630c65e7f6a00fa0667f1,5120d167e21c674afd0630c65e7f6a00fa0667f1,Kui-Feng Lee,thinker.li@gmail.com,1712598700,Masami Hiramatsu (Google),mhiramat@kernel.org,1714573127,982f06455fc8b5c7c659e351b4039aa16151e03e,73142cab3af1b99157837297f437b306d7a70bff,"rethook: Remove warning messages printed for finding return address of a frame.

The function rethook_find_ret_addr() prints a warning message and returns 0
when the target task is running and is not the ""current"" task in order to
prevent the incorrect return address"," although it still may return an
incorrect address.

However","[' the warning message turns into noise when BPF profiling programs\ncall bpf_get_task_stack() on running tasks in a firm with a large number of\nhosts.\n\nThe callers should be aware and willing to take the risk of receiving an\nincorrect return address from a task that is currently running other than\nthe ""current"" one. A warning is not needed here as the callers are intent\non it.\n\nLink: https://lore.kernel.org/all/20240408175140.60223-1-thinker.li@gmail.com/\n\nAcked-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: John Fastabend <john.fastabend@gmail.com>\nSigned-off-by: Kui-Feng Lee <thinker.li@gmail.com>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\n', '']",The commit removes warning messages in rethook for finding the return address of a frame when the target task is not the current task.,"rethook, warning, return address",It's a bug fix.,"Simple, can be used without much configuration. For example, a simple helper function.",Other component related to eBPF but not listed above.,['other']
cdf355cc60e388d992bdd205b8ee70dc4d533461,cdf355cc60e388d992bdd205b8ee70dc4d533461,Andrii Nakryiko,andrii@kernel.org,1710785848,Masami Hiramatsu (Google),mhiramat@kernel.org,1714573126,5532a4cd8753e22e94eb290b27f5fe4c7ec15c5b,1b8f85defbc82e2eb8f27c5f6060ea507ad4d5a3,"uprobes: add speculative lockless system-wide uprobe filter check

It's very common with BPF-based uprobe/uretprobe use cases to have
a system-wide (not PID specific) probes used. In this case uprobe's
trace_uprobe_filter->nr_systemwide counter is bumped at registration
time"," and actual filtering is short circuited at the time when
uprobe/uretprobe is triggered.

This is a great optimization","["" and the only issue with it is that to even\nget to checking this counter uprobe subsystem is taking\nread-side trace_uprobe_filter->rwlock. This is actually noticeable in\nprofiles and is just another point of contention when uprobe is\ntriggered on multiple CPUs simultaneously.\n\nThis patch moves this nr_systemwide check outside of filter list's\nrwlock scope"", ' as rwlock is meant to protect list modification', ' while\nnr_systemwide-based check is speculative and racy already', ' despite the\nlock (as discussed in [0]). trace_uprobe_filter_remove() and\ntrace_uprobe_filter_add() already check for filter->nr_systewide\nexplicitly outside of __uprobe_perf_filter', "" so no modifications are\nrequired there.\n\nConfirming with BPF selftests's based benchmarks.\n\nBEFORE (based on changes in previous patch)\n===========================================\nuprobe-nop     :    2.732 ± 0.022M/s\nuprobe-push    :    2.621 ± 0.016M/s\nuprobe-ret     :    1.105 ± 0.007M/s\nuretprobe-nop  :    1.396 ± 0.007M/s\nuretprobe-push :    1.347 ± 0.008M/s\nuretprobe-ret  :    0.800 ± 0.006M/s\n\nAFTER\n=====\nuprobe-nop     :    2.878 ± 0.017M/s (+5.5%"", ' total +8.3%)\nuprobe-push    :    2.753 ± 0.013M/s (+5.3%', ' total +10.2%)\nuprobe-ret     :    1.142 ± 0.010M/s (+3.8%', ' total +3.8%)\nuretprobe-nop  :    1.444 ± 0.008M/s (+3.5%', ' total +6.5%)\nuretprobe-push :    1.410 ± 0.010M/s (+4.8%', ' total +7.1%)\nuretprobe-ret  :    0.816 ± 0.002M/s (+2.0%', ' total +3.9%)\n\nIn the above', ' first percentage value is based on top of previous patch\n(lazy uprobe buffer optimization)', ' while the ""total"" percentage is\nbased on kernel without any of the changes in this patch set.\n\nAs can be seen', ' we get about 4% - 10% speed up', ' in total', ' with both lazy\nuprobe buffer and speculative filter check optimizations.\n\n  [0] https://lore.kernel.org/bpf/20240313131926.GA19986@redhat.com/\n\nReviewed-by: Jiri Olsa <jolsa@kernel.org>\nLink: https://lore.kernel.org/all/20240318181728.2795838-4-andrii@kernel.org/\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\n', '']",Introduces speculative lockless system-wide filtering for BPF-based uprobes for performance optimization.,"uprobes, system-wide, optimization",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['kprobe/uprobe/ftrace like programs']
1b8f85defbc82e2eb8f27c5f6060ea507ad4d5a3,1b8f85defbc82e2eb8f27c5f6060ea507ad4d5a3,Andrii Nakryiko,andrii@kernel.org,1710785847,Masami Hiramatsu (Google),mhiramat@kernel.org,1714573126,07ba60c9a2b07086f551ef79064a42a40e0e32cf,3eaea21b4d27cff0017c20549aeb53034c58fc23,"uprobes: prepare uprobe args buffer lazily

uprobe_cpu_buffer and corresponding logic to store uprobe args into it
are used for uprobes/uretprobes that are created through tracefs or
perf events.

BPF is yet another user of uprobe/uretprobe infrastructure"," but doesn't
need uprobe_cpu_buffer and associated data. For BPF-only use cases this
buffer handling and preparation is a pure overhead. At the same time","['\nBPF-only uprobe/uretprobe usage is very common in practice. Also', ' for\na lot of cases applications are very senstivie to performance overheads', '\nas they might be tracing a very high frequency functions like\nmalloc()/free()', ' so every bit of performance improvement matters.\n\nAll that is to say that this uprobe_cpu_buffer preparation is an\nunnecessary overhead that each BPF user of uprobes/uretprobe has to pay.\nThis patch is changing this by making uprobe_cpu_buffer preparation\noptional. It will happen only if either tracefs-based or perf event-based\nuprobe/uretprobe consumer is registered for given uprobe/uretprobe. For\nBPF-only use cases this step will be skipped.\n\nWe used uprobe/uretprobe benchmark which is part of BPF selftests (see [0])\nto estimate the improvements. We have 3 uprobe and 3 uretprobe\nscenarios', ' which vary an instruction that is replaced by uprobe: nop\n(fastest uprobe case)', ' `push rbp` (typical case)', ' and non-simulated\n`ret` instruction (slowest case). Benchmark thread is constantly calling\nuser space function in a tight loop. User space function has attached\nBPF uprobe or uretprobe program doing nothing but atomic counter\nincrements to count number of triggering calls. Benchmark emits\nthroughput in millions of executions per second.\n\nBEFORE these changes\n====================\nuprobe-nop     :    2.657 ± 0.024M/s\nuprobe-push    :    2.499 ± 0.018M/s\nuprobe-ret     :    1.100 ± 0.006M/s\nuretprobe-nop  :    1.356 ± 0.004M/s\nuretprobe-push :    1.317 ± 0.019M/s\nuretprobe-ret  :    0.785 ± 0.007M/s\n\nAFTER these changes\n===================\nuprobe-nop     :    2.732 ± 0.022M/s (+2.8%)\nuprobe-push    :    2.621 ± 0.016M/s (+4.9%)\nuprobe-ret     :    1.105 ± 0.007M/s (+0.5%)\nuretprobe-nop  :    1.396 ± 0.007M/s (+2.9%)\nuretprobe-push :    1.347 ± 0.008M/s (+2.3%)\nuretprobe-ret  :    0.800 ± 0.006M/s (+1.9)\n\nSo the improvements on this particular machine seems to be between 2% and 5%.\n\n  [0] https://github.com/torvalds/linux/blob/master/tools/testing/selftests/bpf/benchs/bench_trigger.c\n\nReviewed-by: Jiri Olsa <jolsa@kernel.org>\nLink: https://lore.kernel.org/all/20240318181728.2795838-3-andrii@kernel.org/\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nSigned-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\n', '']",Lazily prepare uprobe args buffer to optimize BPF use cases.,"uprobe,args,BPF",It's a performance optimization.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.","The attach events and bpf link. e.g. perf events, tracepoints, etc.",['kprobe/uprobe/ftrace like programs']
02b670c1f88e78f42a6c5aee155c7b26960ca054,02b670c1f88e78f42a6c5aee155c7b26960ca054,Linus Torvalds,torvalds@linux-foundation.org,1714377651,Ingo Molnar,mingo@kernel.org,1714549303,063bf87a22571419fb0eb304bb947b283e61cdd7,720a22fd6c1cdadf691281909950c0cbc5cdf17e,"x86/mm: Remove broken vsyscall emulation code from the page fault code

The syzbot-reported stack trace from hell in this discussion thread
actually has three nested page faults:

  https://lore.kernel.org/r/000000000000d5f4fc0616e816d4@google.com

... and I think that's actually the important thing here:

 - the first page fault is from user space"," and triggers the vsyscall
   emulation.

 - the second page fault is from __do_sys_gettimeofday()","[' and that should\n   just have caused the exception that then sets the return value to\n   -EFAULT\n\n - the third nested page fault is due to _raw_spin_unlock_irqrestore() ->\n   preempt_schedule() -> trace_sched_switch()', ' which then causes a BPF\n   trace program to run', ' which does that bpf_probe_read_compat()', "" which\n   causes that page fault under pagefault_disable().\n\nIt's quite the nasty backtrace"", "" and there's a lot going on.\n\nThe problem is literally the vsyscall emulation"", "" which sets\n\n        current->thread.sig_on_uaccess_err = 1;\n\nand that causes the fixup_exception() code to send the signal *despite* the\nexception being caught.\n\nAnd I think that is in fact completely bogus.  It's completely bogus\nexactly because it sends that signal even when it *shouldn't* be sent -\nlike for the BPF user mode trace gathering.\n\nIn other words"", ' I think the whole ""sig_on_uaccess_err"" thing is entirely\nbroken', ' because it makes any nested page-faults do all the wrong things.\n\nNow', ' arguably', "" I don't think anybody should enable vsyscall emulation any\nmore"", ' but this test case clearly does.\n\nI think we should just make the ""send SIGSEGV"" be something that the\nvsyscall emulation does on its own', ' not this broken per-thread state for\nsomething that isn\'t actually per thread.\n\nThe x86 page fault code actually tried to deal with the ""incorrect nesting""\nby having that:\n\n                if (in_interrupt())\n                        return;\n\nwhich ignores the sig_on_uaccess_err case when it happens in interrupts', '\nbut as shown by this example', ' these nested page faults do not need to be\nabout interrupts at all.\n\nIOW', ' I think the only right thing is to remove that horrendously broken\ncode.\n\nThe attached patch looks like the ObviouslyCorrect(tm) thing to do.\n\nNOTE! This broken code goes back to this commit in 2011:\n\n  4fc3490114bb (""x86-64: Set siginfo and context on vsyscall emulation faults"")\n\n... and back then the reason was to get all the siginfo details right.\nHonestly', "" I do not for a moment believe that it's worth getting the siginfo\ndetails right here"", ' but part of the commit says:\n\n    This fixes issues with UML when vsyscall=emulate.\n\n... and so my patch to remove this garbage will probably break UML in this\nsituation.\n\nI do not believe that anybody should be running with vsyscall=emulate in\n2024 in the first place', "" much less if you are doing things like UML. But\nlet's see if somebody screams.\n\nReported-and-tested-by: syzbot+83e7f982ca045ab4405c@syzkaller.appspotmail.com\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Ingo Molnar <mingo@kernel.org>\nTested-by: Jiri Olsa <jolsa@kernel.org>\nAcked-by: Andy Lutomirski <luto@kernel.org>\nLink: https://lore.kernel.org/r/CAHk-=wh9D6f7HUkDgZHKmDCHUQmp+Co89GP+b8+z+G56BKeyNg@mail.gmail.com\n"", '']",The commit removes broken vsyscall emulation code from x86 page fault handling.,"vsyscall, emulation, x86",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",Other component related to eBPF but not listed above.,"[""It's not related to any of the above.""]"
8405e6980f21e2b75f232e970edd76bc50cf1491,8405e6980f21e2b75f232e970edd76bc50cf1491,Geliang Tang,tanggeliang@kylinos.cn,1714015423,Martin KaFai Lau,martin.lau@kernel.org,1714518090,ac0583a8b1aab0fd602c83895039ac11a0675f7c,044032ee6c4e786746058aaf5527be13e831cc5c,"selftests/bpf: Drop start_server_proto helper

Protocol can be set by __start_server() helper directly now"," this makes
the heler start_server_proto() useless.

This patch drops it","[' and implenments start_server() using make_sockaddr()\nand __start_server().\n\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nLink: https://lore.kernel.org/r/55d8a04e0bb8240a5fda2da3e9bdffe6fc8547b2.1714014697.git.tanggeliang@kylinos.cn\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",This commit removes the now redundant start_server_proto helper in bpf selftests.,"remove,redundant,selftests",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
044032ee6c4e786746058aaf5527be13e831cc5c,044032ee6c4e786746058aaf5527be13e831cc5c,Geliang Tang,tanggeliang@kylinos.cn,1714015422,Martin KaFai Lau,martin.lau@kernel.org,1714518090,feea09398229788574db961ffc1fb5c8718e5e00,95b88500b97ca8bafc0b9c8e79e9716c2ddc40c6,"selftests/bpf: Make start_mptcp_server static

start_mptcp_server() shouldn't be a public helper"," it only be used in
MPTCP tests. This patch moves it into prog_tests/mptcp.c","[' and implenments\nit using make_sockaddr() and start_server_addr() instead of using\nstart_server_proto().\n\nSigned-off-by: Geliang Tang <tanggeliang@kylinos.cn>\nLink: https://lore.kernel.org/r/50ec7049e280c60a2924937940851f8fee2b73b8.1714014697.git.tanggeliang@kylinos.cn\nSigned-off-by: Martin KaFai Lau <martin.lau@kernel.org>\n', '']",The commit makes start_mptcp_server a static function specific to MPTCP tests.,"static,function,MPTCP",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
95b88500b97ca8bafc0b9c8e79e9716c2ddc40c6,95b88500b97ca8bafc0b9c8e79e9716c2ddc40c6,Geliang Tang,tanggeliang@kylinos.cn,1714015421,Martin KaFai Lau,martin.lau@kernel.org,1714518090,31466fbbc5903bee849809166e39f20b671ae732,06ebfd11678ad63cfd7021580e13d1582ee6c782,"selftests/bpf: Add opts argument for __start_server

This patch adds network_helper_opts parameter for __start_server()
instead of ""int protocol"" and ""int timeout_ms"". This not only reduces
the number of parameters"," but also makes it more flexible.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/127d2f0929980b41f757dcfebe1b667e6bfb43f1.1714014697.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],This commit adds a flexible opts argument for the __start_server function in selftests/bpf.,"opts, __start_server, selftests",It's a cleanup or refactoring in the code.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,"[""It's not related to any of the above.""]"
3e9bc0472b910d4115e16e9c2d684c7757cb6c60,3e9bc0472b910d4115e16e9c2d684c7757cb6c60,Martin KaFai Lau,martin.lau@kernel.org,1714499018,Martin KaFai Lau,martin.lau@kernel.org,1714499144,b874cd1679811cd8b572d84a8de80369f14528bb,b867247555c4181bf84eb10b72b176862c29112d 095ddb501b39b7842e5da555915ad89e370b9888,"Merge branch 'bpf: Add BPF_PROG_TYPE_CGROUP_SKB attach type enforcement in BPF_LINK_CREATE'

Stanislav Fomichev says:

====================
Syzkaller found a case where it's possible to attach cgroup_skb program
to the sockopt hooks. Apparently it's currently possible to do that","
but only when using BPF_LINK_CREATE API. The first patch in the series
has more info on why that happens.
====================

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",[''],Adds enforcement for BPF_PROG_TYPE_CGROUP_SKB attach type in BPF_LINK_CREATE API.,"BPF_LINK_CREATE, attach type, cgroup_skb",It's a bug fix.,"Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.",The syscall interface,['cgroup like programs']
095ddb501b39b7842e5da555915ad89e370b9888,095ddb501b39b7842e5da555915ad89e370b9888,Stanislav Fomichev,sdf@google.com,1714173380,Martin KaFai Lau,martin.lau@kernel.org,1714499017,b874cd1679811cd8b572d84a8de80369f14528bb,d70b2660e75b85bdaa9d75f9c4224c2f6f89cf23,"selftests/bpf: Add sockopt case to verify prog_type

Make sure only sockopt programs can be attached to the setsockopt
and getsockopt hooks.

Signed-off-by: Stanislav Fomichev <sdf@google.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240426231621.2716876-4-sdf@google.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
",,Added sockopt test case to ensure only sockopt programs attach to setsockopt/getsockopt hooks.,"sockopt,test case,prog_type",It's a test case or test infrastructure change.,"Simple, can be used without much configuration. For example, a simple helper function.",The test cases and makefiles,['socket like programs']
