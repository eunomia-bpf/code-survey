title: "Commit Classification Survey"
description: "A survey about the type, use cases and summary of commit in Linux eBPF."
questions:
- id: summary
  type: fill_in
  question: "Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence."
  required: true

- id: keywords
  type: fill_in
  question: "Please extract no more than 3 keywords from the commit. Only output 3 keywords without any special characters."
  required: true

- id: commit_classification
  type: single_choice
  question: "What may be the main type of the commit?"
  choices:
    - value: It's a bug fix.
    - value: It's a new feature.
    - value: It's a performance optimization.
    - value: It's a cleanup or refactoring in the code.
    - value: It's a documentation change or typo fix.
    - value: It's a test case or test infrastructure change.
    - value: It's a build system or CI/CD change.
    - value: It's a security fix.
    - value: It's other type of commit.

- id: commit_complexity
  type: single_choice
  question: "What is the estimated complexity of implementing this commit?"
  choices:
    - value: Simple can be used without much configuration. For example a simple helper function.
    - value: Moderate requires some setup or understanding of the system. For example a new map type or a new link type.
    - value: Complex needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.
    - value: It's a merge commit not related to any of the above.

- id: Major related implementation component
  type: single_choice
  question: "What major implementation component that the commit is modified on?"
  choices:
    - value: The eBPF verifier
    - value: The eBPF JIT compiler for different architectures
    - value: The helper and kfuncs
    - value: The syscall interface
    - value: The eBPF maps
    - value: The libbpf library
    - value: The bpftool utility
    - value: The test cases and makefiles
    - value: The attach events e.g. perf events tracepoints network HID LSM etc. This should be the modify on the event implements, e.g. change how uprobe works.
    - value: Other implementation component related to eBPF but not listed above.
    - value: It's a merge commit including changes to multiple implementation components.
    - value: It's not related to any of the above it's not related to bpf subsystem in Linux kernel may be wrong data.

- id: Major related logic component
  type: single_choice
  question: "What major logic component that the commit is related to? logic component is different to implementation component."
  choices:
    - value: A eBPF Instruction Logic for adding fixing or updating the way eBPF instructions are interpreted validated or executed by the eBPF virtual machine in the kernel. e.g. add fix optimized eBPF instructions.
    - value: A eBPF Program Logic related to different eBPF program types (e.g. XDP tc kprobes) and how the kernel manages attaches and runs these programs. e.g. add eBPF program type fix things related to eBPF program.
    - value: Runtime features Logic related to eBPF helper or kfunc functions which provide access to kernel resources from eBPF programs (e.g. reading from maps manipulating packet data). e.g. helpers kfuncs etc.
    - value: eBPF events Logic for handling events that trigger eBPF programs such as network packet reception system calls or tracing events. e.g. add new event fix things related to XDP HID perf events tracepoint etc.
    - value: Control Plane interface Logic for userspace control. This involves adding fixing or modifying syscalls that are part of the control plane interface for eBPF allowing userspace programs to interact with eBPF features in the kernel.
    - value: Maps Logic for how eBPF maps (data structures shared between kernel and user space) are created accessed and managed.
    - value: BPF Type Format (BTF) Logic. e.g. add fix things related to BTF, changes how eBPF programs are CO-RE, using BTF for verifier etc.
    - value: It's a merge commit including changes to multiple logic components.

- id: usecases_or_events
  type: multiple_choice
  question: "What eBPF usecases/events may the commit relate to and designed for?"
  choices:
    - value: xdp related type programs
    - value: socket related type programs
    - value: tc related type programs
    - value: netfilter related type programs
    - value: tracepoints related type programs
    - value: kprobe/ftrace like type kernel dynamic probe programs
    - value: uprobe/usdt like type user space dynamic probe programs
    - value: profile related type programs
    - value: LSM type relatde programs
    - value: cgroup type related programs
    - value: HID driver related type programs
    - value: scheduler relatde type programs
    - value: It improves the overall eBPF infrastructure (e.g. verifier runtime etc.)
    - value: It's an experimental feature that doesn't fit into existing categories.
    - value: It's not related to any of the above.
    - value: other type of usecases/bpf programs not listed above.
