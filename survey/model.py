# generated by datamodel-codegen:
#   filename:  schema.yml
#   timestamp: 2024-09-12T00:11:35+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Type(Enum):
    """
    The type of the question (single_choice for radio buttons, multiple_choice for checkboxes, and fill_in for open-ended questions)
    """

    single_choice = 'single_choice'
    multiple_choice = 'multiple_choice'
    fill_in = 'fill_in'


class Choice(BaseModel):
    value: Optional[str] = Field(None, description='The value of the option')
    subquestions: Optional[List[Items]] = Field(
        None, description='Follow-up questions if this option is selected'
    )


class Question(BaseModel):
    id: str = Field(..., description='Unique identifier for the question')
    type: Type = Field(
        ...,
        description='The type of the question (single_choice for radio buttons, multiple_choice for checkboxes, and fill_in for open-ended questions)',
    )
    question: str = Field(..., description='The question text')
    choices: Optional[List[Choice]] = Field(
        None,
        description='The list of options, applicable for single and multiple choice questions',
    )
    required: Optional[bool] = Field(
        None, description='Indicates whether this question is mandatory'
    )


class Model(BaseModel):
    title: str = Field(..., description='The title of the questionnaire')
    description: Optional[str] = Field(
        None, description='The description of the questionnaire'
    )
    questions: List[Question]


class Items(BaseModel):
    id: str = Field(..., description='Unique identifier for the question')
    type: Type = Field(
        ...,
        description='The type of the question (single_choice for radio buttons, multiple_choice for checkboxes, and fill_in for open-ended questions)',
    )
    question: str = Field(..., description='The question text')
    choices: Optional[List[Choice]] = Field(
        None,
        description='The list of options, applicable for single and multiple choice questions',
    )
    required: Optional[bool] = Field(
        None, description='Indicates whether this question is mandatory'
    )


Choice.update_forward_refs()
