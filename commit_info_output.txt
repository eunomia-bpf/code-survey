--------------------
Processing Commit ID: b831f83e40a24f07c8dcba5be408d93beedc820f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b831f83e40a24f07c8dcba5be408d93beedc820f
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1725592253
  Commit Message:
    Merge tag 'bpf-6.11-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Pull bpf fixes from Alexei Starovoitov:

 - Fix crash when btf_parse_base() returns an error (Martin Lau)

 - Fix out of bounds access in btf_name_valid_section() (Jeongjun Park)

* tag 'bpf-6.11-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:
  selftests/bpf: Add a selftest to check for incorrect names
  bpf: add check for invalid name in btf_name_valid_section()
  bpf: Fix a crash when btf_parse_base() returns an error pointer

  Parent Hashes: d759ee240d3c0c4a19f4d984eb21c36da76bc6ce 5390f315fc8c9b9f48105a0d88b56bc59fa2b3e0
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit is a merge containing bug fixes related to BTF parsing in the eBPF subsystem.', 'keywords': 'BTF,crash,fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d759ee240d3c0c4a19f4d984eb21c36da76bc6ce
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d759ee240d3c0c4a19f4d984eb21c36da76bc6ce
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1725581281
  Commit Message:
    Merge tag 'net-6.11-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 "Including fixes from can
  Parent Hashes: f95359996ac35206ff24e378052ce564d5bfdc94 031ae72825cef43e4650140b800ad58bf7a6a466
  Refs:  bluetooth and wireless.

  No known regressions at this point. Another calm week

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes from Jakub Kicinski into Linux kernel by Linus Torvalds.', 'keywords': 'networking, fixes, merge', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: f0417c50fddd628e534c336d87932e7e1e883df3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f0417c50fddd628e534c336d87932e7e1e883df3
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1725496657
  Commit Message:
    Merge branch '100GbE' of git://git.kernel.org/pub/scm/linux/kernel/git/tnguy/net-queue

Tony Nguyen says:

====================
ice: fix synchronization between .ndo_bpf() and reset

Larysa Zaremba says:

PF reset can be triggered asynchronously
  Parent Hashes: 2603d3152b1f646b0ef81a748fb703b799fcf9c3 04c7e14e5b0b6227e7b00d7a96ca2f2426ab9171
  Refs:  by tx_timeout or by a user. With some
unfortunate timings both ice_vsi_rebuild() and .ndo_bpf will try to access and
modify XDP rings at the same time

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix synchronization issue between .ndo_bpf() and reset in the ice driver due to async PF resets.', 'keywords': 'synchronization, reset, ice', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 5390f315fc8c9b9f48105a0d88b56bc59fa2b3e0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5390f315fc8c9b9f48105a0d88b56bc59fa2b3e0
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1725478504
  Commit Message:
    Merge branch 'bpf-fix-incorrect-name-check-pass-logic-in-btf_name_valid_section'

Jeongjun Park says:

====================
bpf: fix incorrect name check pass logic in btf_name_valid_section

This patch was written to fix an issue where btf_name_valid_section() would
not properly check names with certain conditions and would throw an OOB vuln.
And selftest was added to verify this patch.
====================

Link: https://lore.kernel.org/r/20240831054525.364353-1-aha310510@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: b408473ea01b2e499d23503e2bf898416da9d7ac 743070894724bf5ee0b2c77a28f838f6244d19bd
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes incorrect name check logic in btf_name_valid_section and adds a selftest.', 'keywords': 'fix, name check, btf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 743070894724bf5ee0b2c77a28f838f6244d19bd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 743070894724bf5ee0b2c77a28f838f6244d19bd
  Author Name: Jeongjun Park
  Author Email: aha310510@gmail.com
  Commit Date: 1725478459
  Commit Message:
    selftests/bpf: Add a selftest to check for incorrect names

Add selftest for cases where btf_name_valid_section() does not properly
check for certain types of names.

Suggested-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Jeongjun Park <aha310510@gmail.com>
Link: https://lore.kernel.org/r/20240831054742.364585-1-aha310510@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>

  Parent Hashes: bb6705c3f93bed2af03d43691743d4c43e3c8e6f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a selftest to verify btf_name_valid_section() function for incorrect names.', 'keywords': 'selftest, btf_name_valid_section, names', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bb6705c3f93bed2af03d43691743d4c43e3c8e6f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bb6705c3f93bed2af03d43691743d4c43e3c8e6f
  Author Name: Jeongjun Park
  Author Email: aha310510@gmail.com
  Commit Date: 1725476194
  Commit Message:
    bpf: add check for invalid name in btf_name_valid_section()

If the length of the name string is 1 and the value of name[0] is NULL
byte
  Parent Hashes: b408473ea01b2e499d23503e2bf898416da9d7ac
  Refs:  an OOB vulnerability occurs in btf_name_valid_section() and the
return value is true

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a check for invalid names in btf_name_valid_section to prevent an OOB vulnerability.', 'keywords': 'check, invalid, btf_name_valid_section', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 33f339a1ba54e56bba57ee9a77c71e385ab4825c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 33f339a1ba54e56bba57ee9a77c71e385ab4825c
  Author Name: Tze-nan Wu
  Author Email: Tze-nan.Wu@mediatek.com
  Commit Date: 1725390384
  Commit Message:
    bpf
  Parent Hashes: 77461c10819103eaee7b33c744174b32a8c78b40
  Refs:  net: Fix a potential race in do_sock_getsockopt()

There's a potential race when `cgroup_bpf_enabled(CGROUP_GETSOCKOPT)` is
false during the execution of `BPF_CGROUP_GETSOCKOPT_MAX_OPTLEN`

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix potential race condition in do_sock_getsockopt when cgroup_bpf_enabled is false for CGROUP_GETSOCKOPT.', 'keywords': 'race condition,cgroup_bpf_enabled,sock_getsockopt', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 04c7e14e5b0b6227e7b00d7a96ca2f2426ab9171
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 04c7e14e5b0b6227e7b00d7a96ca2f2426ab9171
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1725379540
  Commit Message:
    ice: do not bring the VSI up
  Parent Hashes: 7e3b407ccbea3259b8583ccc34807622025e390f
  Refs:  if it was down before the XDP setup

After XDP configuration is completed

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Prevent bringing up VSI if it was down before XDP setup.', 'keywords': 'VSI,XDP,setup', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: d8c40b9d3a6cef61eb5a0c58c34a3090ea938d89
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d8c40b9d3a6cef61eb5a0c58c34a3090ea938d89
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1725379268
  Commit Message:
    ice: check ICE_VSI_DOWN under rtnl_lock when preparing for reset

Consider the following scenario:

.ndo_bpf()		| ice_prepare_for_reset()		|
________________________|_______________________________________|
rtnl_lock()		|					|
ice_down()		|					|
			| test_bit(ICE_VSI_DOWN) - true		|
			| ice_dis_vsi() returns			|
ice_up()		|					|
			| proceeds to rebuild a running VSI	|

.ndo_bpf() is not the only rtnl-locked callback that toggles the interface
to apply new configuration. Another example is .set_channels().

To avoid the race condition above
  Parent Hashes: f50c68763436bc8f805712a7c5ceaf58cfcf5f07
  Refs:  act only after reading ICE_VSI_DOWN
under rtnl_lock.

Fixes: 0f9d5027a749 ("ice: Refactor VSI allocation

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit resolves a race condition by ensuring ICE_VSI_DOWN is checked under rtnl_lock before proceeding with reset preparation.', 'keywords': 'race, rtnl_lock, ICE_VSI_DOWN', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: f50c68763436bc8f805712a7c5ceaf58cfcf5f07
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f50c68763436bc8f805712a7c5ceaf58cfcf5f07
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1725379100
  Commit Message:
    ice: check for XDP rings instead of bpf program when unconfiguring

If VSI rebuild is pending
  Parent Hashes: 2504b8405768a57a71e660dbfd5abd59f679a03f
  Refs:  .ndo_bpf() can attach/detach the XDP program on
VSI without applying new ring configuration. When unconfiguring the VSI

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit checks XDP rings presence instead of bpf program during unconfiguration if VSI rebuild is pending.', 'keywords': 'XDP rings,VSI rebuild,unconfiguration', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 2a5dc090b92cfa5270e20056074241c6db5c9cdd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2a5dc090b92cfa5270e20056074241c6db5c9cdd
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1725378496
  Commit Message:
    ice: move netif_queue_set_napi to rtnl-protected sections

Currently
  Parent Hashes: cfd433cecef929b4d92685f570f1a480762ec260
  Refs:  netif_queue_set_napi() is called from ice_vsi_rebuild() that is
not rtnl-locked when called from the reset. This creates the need to take
the rtnl_lock just for a single function and complicates the
synchronization with .ndo_bpf. At the same time

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit moves netif_queue_set_napi to rtnl-protected sections for better synchronization.', 'keywords': 'netif_queue_set_napi,rtnl_lock,synchronization', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 287bd5cf06e0f2c02293ce942777ad1f18059ed3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 287bd5cf06e0f2c02293ce942777ad1f18059ed3
  Author Name: Namhyung Kim
  Author Email: namhyung@kernel.org
  Commit Date: 1725303564
  Commit Message:
    perf lock contention: Fix spinlock and rwlock accounting

The spinlock and rwlock use a single-element per-cpu array to track
current locks due to performance reason.  But this means the key is
always available and it cannot simply account lock stats in the array
because some of them are invalid.

In fact
  Parent Hashes: 1c7fb536e899a2f66f9b1719a0234570dda2e634
  Refs:  the contention_end() program in the BPF invalidates the entry
by setting the 'lock' value to 0 instead of deleting the entry for the
hashmap.  So it should skip entries with the lock value of 0 in the
account_end_timestamp().

Otherwise

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes accounting issues in spinlock and rwlock usage for perf lock contention related to BPF program.', 'keywords': 'spinlock rwlock accounting', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: fe1910f9337bd46a9343967b547ccab26b4b2c6e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fe1910f9337bd46a9343967b547ccab26b4b2c6e
  Author Name: Cong Wang
  Author Email: cong.wang@bytedance.com
  Commit Date: 1725041350
  Commit Message:
    tcp_bpf: fix return value of tcp_bpf_sendmsg()

When we cork messages in psock->cork
  Parent Hashes: 98d4435efcbf37801a3246fb53856c4b934a2613
  Refs:  the last message triggers the
flushing will result in sending a sk_msg larger than the current
message size. In this case

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix return value issue in tcp_bpf_sendmsg function when corking messages.', 'keywords': 'tcp_bpf,fix,sendmsg', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: b408473ea01b2e499d23503e2bf898416da9d7ac
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b408473ea01b2e499d23503e2bf898416da9d7ac
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1725039287
  Commit Message:
    bpf: Fix a crash when btf_parse_base() returns an error pointer

The pointer returned by btf_parse_base could be an error pointer.
IS_ERR() check is needed before calling btf_free(base_btf).

Fixes: 8646db238997 ("libbpf
  Parent Hashes: 872cf28b8df9c5c3a1e71a88ee750df7c2513971
  Refs: bpf: Share BTF relocate-related code with kernel")
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Alan Maguire <alan.maguire@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240830012214.1646005-1-martin.lau@linux.dev


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a crash caused by error pointer returned from btf_parse_base by adding IS_ERR() check before calling btf_free.', 'keywords': 'crash,error pointer,btf_parse_base', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2aeeef906d5a526dc60cf4af92eda69836c39b1f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2aeeef906d5a526dc60cf4af92eda69836c39b1f
  Author Name: Jianbo Liu
  Author Email: jianbol@nvidia.com
  Commit Date: 1724789497
  Commit Message:
    bonding: change ipsec_lock from spin lock to mutex

In the cited commit
  Parent Hashes: 907ed83a7583e8ffede88c5ac088392701a7d458
  Refs:  bond->ipsec_lock is added to protect ipsec_list

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit changes the ipsec_lock from a spin lock to a mutex for better protection of ipsec_list.', 'keywords': 'ipsec_lock, mutex, bonding', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 8baeef7616d5194045c5a6b97fd1246b87c55b13
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8baeef7616d5194045c5a6b97fd1246b87c55b13
  Author Name: Somnath Kotur
  Author Email: somnath.kotur@broadcom.com
  Commit Date: 1724287016
  Commit Message:
    bnxt_en: Fix double DMA unmapping for XDP_REDIRECT

Remove the dma_unmap_page_attrs() call in the driver's XDP_REDIRECT
code path.  This should have been removed when we let the page pool
handle the DMA mapping.  This bug causes the warning:

WARNING: CPU: 7 PID: 59 at drivers/iommu/dma-iommu.c:1198 iommu_dma_unmap_page+0xd5/0x100
CPU: 7 PID: 59 Comm: ksoftirqd/7 Tainted: G        W          6.8.0-1010-gcp #11-Ubuntu
Hardware name: Dell Inc. PowerEdge R7525/0PYVT1
  Parent Hashes: 58652e2422a7407e77ee50fcaaf4bf1885de8753
  Refs:  BIOS 2.15.2 04/02/2024
RIP: 0010:iommu_dma_unmap_page+0xd5/0x100
Code: 89 ee 48 89 df e8 cb f2 69 ff 48 83 c4 08 5b 41 5c 41 5d 41 5e 41 5f 5d 31 c0 31 d2 31 c9 31 f6 31 ff 45 31 c0 e9 ab 17 71 00 <0f> 0b 48 83 c4 08 5b 41 5c 41 5d 41 5e 41 5f 5d 31 c0 31 d2 31 c9
RSP: 0018:ffffab1fc0597a48 EFLAGS: 00010246
RAX: 0000000000000000 RBX: ffff99ff838280c8 RCX: 0000000000000000
RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
RBP: ffffab1fc0597a78 R08: 0000000000000002 R09: ffffab1fc0597c1c
R10: ffffab1fc0597cd3 R11: ffff99ffe375acd8 R12: 00000000e65b9000
R13: 0000000000000050 R14: 0000000000001000 R15: 0000000000000002
FS:  0000000000000000(0000) GS:ffff9a06efb80000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 0000565c34c37210 CR3: 00000005c7e3e000 CR4: 0000000000350ef0
? show_regs+0x6d/0x80
? __warn+0x89/0x150
? iommu_dma_unmap_page+0xd5/0x100
? report_bug+0x16a/0x190
? handle_bug+0x51/0xa0
? exc_invalid_op+0x18/0x80
? iommu_dma_unmap_page+0xd5/0x100
? iommu_dma_unmap_page+0x35/0x100
dma_unmap_page_attrs+0x55/0x220
? bpf_prog_4d7e87c0d30db711_xdp_dispatcher+0x64/0x9f
bnxt_rx_xdp+0x237/0x520 [bnxt_en]
bnxt_rx_pkt+0x640/0xdd0 [bnxt_en]
__bnxt_poll_work+0x1a1/0x3d0 [bnxt_en]
bnxt_poll+0xaa/0x1e0 [bnxt_en]
__napi_poll+0x33/0x1e0
net_rx_action+0x18a/0x2f0

Fixes: 578fcfd26e2a ("bnxt_en: Let the page pool manage the DMA mapping")
Reviewed-by: Andy Gospodarek <andrew.gospodarek@broadcom.com>
Reviewed-by: Kalesh AP <kalesh-anakkur.purayil@broadcom.com>
Signed-off-by: Somnath Kotur <somnath.kotur@broadcom.com>
Signed-off-by: Michael Chan <michael.chan@broadcom.com>
Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
Link: https://patch.msgid.link/20240820203415.168178-1-michael.chan@broadcom.com
Signed-off-by: Jakub Kicinski <kuba@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix to remove unnecessary DMA unmapping in bnxt_en driver for XDP_REDIRECT.', 'keywords': 'bnxt_en,DMA unmapping,XDP_REDIRECT', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: a069a22f391019e84390f4e8c1a9c531ba4fb28f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a069a22f391019e84390f4e8c1a9c531ba4fb28f
  Author Name: Masami Hiramatsu (Google)
  Author Email: mhiramat@kernel.org
  Commit Date: 1724262599
  Commit Message:
    tracing: fgraph: Fix to add new fgraph_ops to array after ftrace_startup_subops()

Since the register_ftrace_graph() assigns a new fgraph_ops to
fgraph_array before registring it by ftrace_startup_subops()
  Parent Hashes: 47ac09b91befbb6a235ab620c32af719f8208399
  Refs:  the new
fgraph_ops can be used in function_graph_enter().

In most cases

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix the order of operations when adding new fgraph ops to the array for ftrace graph functionality.', 'keywords': 'fgraph_ops,ftrace,tracing', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f8cde9805981c50d0c029063dc7d82821806fc44
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f8cde9805981c50d0c029063dc7d82821806fc44
  Author Name: Nikolay Aleksandrov
  Author Email: razor@blackwall.org
  Commit Date: 1724160569
  Commit Message:
    bonding: fix xfrm real_dev null pointer dereference

We shouldn't set real_dev to NULL because packets can be in transit and
xfrm might call xdo_dev_offload_ok() in parallel. All callbacks assume
real_dev is set.

 Example trace:
 kernel: BUG: unable to handle page fault for address: 0000000000001030
 kernel: bond0: (slave eni0np1): making interface the new active one
 kernel: #PF: supervisor write access in kernel mode
 kernel: #PF: error_code(0x0002) - not-present page
 kernel: PGD 0 P4D 0
 kernel: Oops: 0002 [#1] PREEMPT SMP
 kernel: CPU: 4 PID: 2237 Comm: ping Not tainted 6.7.7+ #12
 kernel: Hardware name: QEMU Standard PC (Q35 + ICH9
  Parent Hashes: 95c90e4ad89d493a7a14fa200082e466e2548f9d
  Refs:  2009)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Fixes a null pointer dereference in bonding related to xfrm's real_dev setting during packet transit.", 'keywords': 'bonding,null-pointer,xfrm', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 69139d2919dd4aa9a553c8245e7c63e82613e3fc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 69139d2919dd4aa9a553c8245e7c63e82613e3fc
  Author Name: Cong Wang
  Author Email: cong.wang@bytedance.com
  Commit Date: 1723716424
  Commit Message:
    vsock: fix recursive ->recvmsg calls

After a vsock socket has been added to a BPF sockmap
  Parent Hashes: b2ca1661c7db9693095cee7991c55d67c3b5d346
  Refs:  its prot->recvmsg
has been replaced with vsock_bpf_recvmsg(). Thus the following
recursiion could happen:

vsock_bpf_recvmsg()
 -> __vsock_recvmsg()
  -> vsock_connectible_recvmsg()
   -> prot->recvmsg()
    -> vsock_bpf_recvmsg() again

We need to fix it by calling the original ->recvmsg() without any BPF
sockmap logic in __vsock_recvmsg().

Fixes: 634f1a7110b4 ("vsock: support sockmap")
Reported-by: syzbot+bdb4bd87b5e22058e2a4@syzkaller.appspotmail.com
Tested-by: syzbot+bdb4bd87b5e22058e2a4@syzkaller.appspotmail.com
Cc: Bobby Eshleman <bobby.eshleman@bytedance.com>
Cc: Michael S. Tsirkin <mst@redhat.com>
Cc: Stefano Garzarella <sgarzare@redhat.com>
Signed-off-by: Cong Wang <cong.wang@bytedance.com>
Acked-by: Michael S. Tsirkin <mst@redhat.com>
Link: https://patch.msgid.link/20240812022153.86512-1-xiyou.wangcong@gmail.com
Signed-off-by: Paolo Abeni <pabeni@redhat.com>



- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes recursive calls in vsock recvmsg function after integration with BPF sockmap.', 'keywords': 'vsock,BPF,recvmsg', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['socket like programs', 'tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 02f8ca3d49055788f112c17052a3da65feb01835
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 02f8ca3d49055788f112c17052a3da65feb01835
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1723651044
  Commit Message:
    Merge tag 'bpf-6.11-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Pull bpf fixes from Alexei Starovoitov:

 - Fix bpftrace regression from Kyle Huey.

   Tracing bpf prog was called with perf_event input arguments causing
   bpftrace produce garbage output.

 - Fix verifier crash in stacksafe() from Yonghong Song.

   Daniel Hodges reported verifier crash when playing with sched-ext.
   The stack depth in the known verifier state was larger than stack
   depth in being explored state causing out-of-bounds access.

 - Fix update of freplace prog in prog_array from Leon Hwang.

   freplace prog type wasn't recognized correctly.

* tag 'bpf-6.11-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf:
  perf/bpf: Don't call bpf_overflow_handler() for tracing events
  selftests/bpf: Add a test to verify previous stacksafe() fix
  bpf: Fix a kernel verifier crash in stacksafe()
  bpf: Fix updating attached freplace prog in prog_array map

  Parent Hashes: 6b0f8db921abf0520081d779876d3a41069dab95 100bff23818eb61751ed05d64a7df36ce9728a4d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges bpf fixes including regression fixes, verifier crash fix, and update issues for the freplace prog in prog_array.', 'keywords': 'bpf, regression, verifier', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 100bff23818eb61751ed05d64a7df36ce9728a4d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 100bff23818eb61751ed05d64a7df36ce9728a4d
  Author Name: Kyle Huey
  Author Email: me@kylehuey.com
  Commit Date: 1723569928
  Commit Message:
    perf/bpf: Don't call bpf_overflow_handler() for tracing events

The regressing commit is new in 6.10. It assumed that anytime event->prog
is set bpf_overflow_handler() should be invoked to execute the attached bpf
program. This assumption is false for tracing events
  Parent Hashes: 662c3e2db00f92e50c26e9dc4fe47c52223d9982
  Refs:  and as a result the
regressing commit broke bpftrace by invoking the bpf handler with garbage
inputs on overflow.

Prior to the regression the overflow handlers formed a chain (of length 0

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes incorrect invocation of bpf_overflow_handler() for tracing events causing regression in bpftrace.', 'keywords': 'perf,BPF,tracing', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 6252690f7e1b173b86a4c27dfc046b351ab423e7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6252690f7e1b173b86a4c27dfc046b351ab423e7
  Author Name: Naohiro Aota
  Author Email: naohiro.aota@wdc.com
  Commit Date: 1723556217
  Commit Message:
    btrfs: fix invalid mapping of extent xarray state

In __extent_writepage_io()
  Parent Hashes: 46a6e10a1ab16cc71d4a3cab73e79aabadd6b8ea
  Refs:  we call btrfs_set_range_writeback() ->
folio_start_writeback()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes invalid extent xarray state mapping in btrfs during writepage IO operation.', 'keywords': 'btrfs,fix,xarray', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 662c3e2db00f92e50c26e9dc4fe47c52223d9982
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 662c3e2db00f92e50c26e9dc4fe47c52223d9982
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1723511733
  Commit Message:
    selftests/bpf: Add a test to verify previous stacksafe() fix

A selftest is added such that without the previous patch
  Parent Hashes: bed2eb964c70b780fb55925892a74f26cb590b25
  Refs: 
a crash can happen. With the previous patch

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftest to verify the previous stacksafe() bug fix in bpf.', 'keywords': 'selftest, stacksafe, verify', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bed2eb964c70b780fb55925892a74f26cb590b25
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bed2eb964c70b780fb55925892a74f26cb590b25
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1723511388
  Commit Message:
    bpf: Fix a kernel verifier crash in stacksafe()

Daniel Hodges reported a kernel verifier crash when playing with sched-ext.
Further investigation shows that the crash is due to invalid memory access
in stacksafe(). More specifically
  Parent Hashes: fdad456cbcca739bae1849549c7a999857c56f88
  Refs:  it is the following code:

    if (exact != NOT_EXACT &&
        old->stack[spi].slot_type[i % BPF_REG_SIZE] !=
        cur->stack[spi].slot_type[i % BPF_REG_SIZE])
            return false;

The 'i' iterates old->allocated_stack.
If cur->allocated_stack < old->allocated_stack the out-of-bound
access will happen.

To fix the issue add 'i >= cur->allocated_stack' check such that if
the condition is true

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a kernel verifier crash caused by invalid memory access in the stacksafe function.', 'keywords': 'kernel verifier, stacksafe, crash', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['scheduler like programs']}
--------------------
--------------------
Processing Commit ID: fdad456cbcca739bae1849549c7a999857c56f88
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fdad456cbcca739bae1849549c7a999857c56f88
  Author Name: Leon Hwang
  Author Email: leon.hwang@linux.dev
  Commit Date: 1723501549
  Commit Message:
    bpf: Fix updating attached freplace prog in prog_array map

The commit f7866c358733 ("bpf: Fix null pointer dereference in resolve_prog_type() for BPF_PROG_TYPE_EXT")
fixed a NULL pointer dereference panic
  Parent Hashes: d74da846046aeec9333e802f5918bd3261fb5509
  Refs:  but didn't fix the issue that
fails to update attached freplace prog to prog_array map.

Since commit 1c123c567fb1 ("bpf: Resolve fext program type when checking map compatibility")

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix issue with updating attached freplace prog in prog_array map.', 'keywords': 'bpf, fix, prog_array', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1fc2021941241bf32728a198bc0a7f38669e44a5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1fc2021941241bf32728a198bc0a7f38669e44a5
  Author Name: David S. Miller
  Author Email: davem@davemloft.net
  Commit Date: 1723459616
  Commit Message:
    Merge branch 'vsc73xx-fix-mdio-and-phy'

Pawel Dembicki says:

====================
net: dsa: vsc73xx: fix MDIO bus access and PHY opera

This series are extracted patches from net-next series [0].

The VSC73xx driver has issues with PHY configuration. This patch series
fixes most of them.

The first patch synchronizes the register configuration routine with the
datasheet recommendations.

Patches 2-3 restore proper communication on the MDIO bus. Currently
  Parent Hashes: 9ff2f816e2aa65ca9a1cdf0954842f8173c0f48d de7a670f8defe4ed2115552ad23dea0f432f7be4
  Refs: 
the write value isn't sent to the MDIO register

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes issues in the VSC73xx driver for MDIO bus access and PHY operations.', 'keywords': 'VSC73xx, MDIO, PHY', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 146430a0c26eb7b515abb04664e1a516078ec5c2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 146430a0c26eb7b515abb04664e1a516078ec5c2
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1723221826
  Commit Message:
    Merge tag 'probes-fixes-v6.11-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace

Pull kprobe fixes from Masami Hiramatsu:

 - Fix misusing str_has_prefix() parameter order to check symbol prefix
   correctly

 - bpf: remove unused declaring of bpf_kprobe_override

* tag 'probes-fixes-v6.11-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace:
  kprobes: Fix to check symbol prefixes correctly
  bpf: kprobe: remove unused declaring of bpf_kprobe_override

  Parent Hashes: b7768c4881d1b69bd95dad149d3b558c8e7de91a 8c8acb8f26cbde665b233dd1b9bbcbb9b86822dc
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge fixes for kprobes, including correcting symbol prefix checks and removing unused bpf_kprobe_override declaration.', 'keywords': 'kprobes, symbol prefix, bpf_kprobe_override', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 0e8b53979ac86eddb3fd76264025a70071a25574
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0e8b53979ac86eddb3fd76264025a70071a25574
  Author Name: Menglong Dong
  Author Email: menglong8.dong@gmail.com
  Commit Date: 1722834081
  Commit Message:
    bpf: kprobe: remove unused declaring of bpf_kprobe_override

After the commit 66665ad2f102 ("tracing/kprobe: bpf: Compare instruction
pointer with original one")
  Parent Hashes: de9c2c66ad8e787abec7c9d7eff4f8c3cdd28aed
  Refs:  "bpf_kprobe_override" is not used anywhere
anymore

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes the unused declaration of bpf_kprobe_override after a related change.', 'keywords': 'kprobe, unused, bpf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 183d46ff422ef9f3d755b6808ef3faa6d009ba3a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 183d46ff422ef9f3d755b6808ef3faa6d009ba3a
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1722530529
  Commit Message:
    Merge tag 'net-6.11-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 "Including fixes from wireless
  Parent Hashes: 21b136cc63d2a9ddd60d4699552b69c214b32964 25010bfdf8bbedc64c5c04d18f846412f5367d26
  Refs:  bleutooth

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes from Paolo Abeni including wireless fixes for Linux kernel.', 'keywords': 'networking, wireless, fixes', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 601df205896da88e654d7c97d4579fa4af0b4adf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 601df205896da88e654d7c97d4579fa4af0b4adf
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1722473340
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-07-31

We've added 2 non-merge commits during the last 2 day(s) which contain
a total of 2 files changed
  Parent Hashes: 0bf50cead4c4710d9f704778c32ab8af47ddf070 7764b9622db4382b2797b54a70f292c8da6ef417
  Refs:  2 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merge pull request for 'bpf' changes with 2 non-merge commits impacting 2 files.", 'keywords': 'merge,pull request,commits', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 5830aa863981d43560748aa93589c0695191d95d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5830aa863981d43560748aa93589c0695191d95d
  Author Name: Kuniyuki Iwashima
  Author Email: kuniyu@amazon.com
  Commit Date: 1722460850
  Commit Message:
    netfilter: iptables: Fix null-ptr-deref in iptable_nat_table_init().

We had a report that iptables-restore sometimes triggered null-ptr-deref
at boot time. [0]

The problem is that iptable_nat_table_init() is exposed to user space
before the kernel fully initialises netns.

In the small race window
  Parent Hashes: 0bf50cead4c4710d9f704778c32ab8af47ddf070
  Refs:  a user could call iptable_nat_table_init()
that accesses net_generic(net

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix null pointer dereference issue in iptable_nat_table_init() during kernel initialization sequence.', 'keywords': 'null-ptr-deref, iptables, netfilter', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 0bf50cead4c4710d9f704778c32ab8af47ddf070
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0bf50cead4c4710d9f704778c32ab8af47ddf070
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1722390070
  Commit Message:
    Merge branch '100GbE' of git://git.kernel.org/pub/scm/linux/kernel/git/tnguy/net-queue

Tony Nguyen says:

====================
ice: fix AF_XDP ZC timeout and concurrency issues

Maciej Fijalkowski says:

Changes included in this patchset address an issue that customer has
been facing when AF_XDP ZC Tx sockets were used in combination with flow
control and regular Tx traffic.

After executing:
ethtool --set-priv-flags $dev link-down-on-close on
ethtool -A $dev rx on tx on

launching multiple ZC Tx sockets on $dev + pinging remote interface (so
that regular Tx traffic is present) and then going through down/up of
$dev
  Parent Hashes: 89add40066f9ed9abe5f7f886fe5789ff7e0c50e 963fb4612295a5c35b1b89c8bff3bdd4f9127af6
  Refs:  Tx timeout occurred and then most of the time ice driver was unable
to recover from that state.

These patches combined together solve the described above issue on
customer side. Main focus here is to forbid producing Tx descriptors when
either carrier is not yet initialized or process of bringing interface
down has already started.

v1: https://lore.kernel.org/netdev/20240708221416.625850-1-anthony.l.nguyen@intel.com/

* '100GbE' of git://git.kernel.org/pub/scm/linux/kernel/git/tnguy/net-queue:
  ice: xsk: fix txq interrupt mapping
  ice: add missing WRITE_ONCE when clearing ice_rx_ring::xdp_prog
  ice: improve updating ice_{t

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes concurrency and timeout issues for AF_XDP ZC in the ice driver during network interface up/down cycles.', 'keywords': 'AF_XDP, ice driver, concurrency', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 7764b9622db4382b2797b54a70f292c8da6ef417
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7764b9622db4382b2797b54a70f292c8da6ef417
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1722372144
  Commit Message:
    bpf/selftests: Fix ASSERT_OK condition check in uprobe_syscall test

Fixing ASSERT_OK condition check in uprobe_syscall test
  Parent Hashes: 41c24102af7b6236277a214428b203d51a3462df
  Refs: 
otherwise we return from test on pipe success.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240726180847.684584-1-jolsa@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes the ASSERT_OK condition in the uprobe_syscall test of the bpf selftests.', 'keywords': 'fix, ASSERT_OK, uprobe_syscall', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 41c24102af7b6236277a214428b203d51a3462df
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 41c24102af7b6236277a214428b203d51a3462df
  Author Name: Stanislav Fomichev
  Author Email: sdf@fomichev.me
  Commit Date: 1722285811
  Commit Message:
    selftests/bpf: Filter out _GNU_SOURCE when compiling test_cpp

Jakub reports build failures when merging linux/master with net tree:

CXX      test_cpp
In file included from <built-in>:454:
<command line>:2:9: error: '_GNU_SOURCE' macro redefined [-Werror
  Parent Hashes: 039564d2fd37b122ec0d268e2ee6334e7169e225
  Refs: -Wmacro-redefined]
    2 | #define _GNU_SOURCE
      |         ^
<built-in>:445:9: note: previous definition is here
  445 | #define _GNU_SOURCE 1

The culprit is commit cc937dad85ae ("selftests: centralize -D_GNU_SOURCE= to
CFLAGS in lib.mk") which unconditionally added -D_GNU_SOUCE to CLFAGS.
Apparently clang++ also unconditionally adds it for the C++ targets [0]
which causes a conflict. Add small change in the selftests makefile
to filter it out for test_cpp.

Not sure which tree it should go via

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes build failure by filtering out _GNU_SOURCE for test_cpp in selftests makefile.', 'keywords': 'build failure, _GNU_SOURCE, makefile', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 6b5faec9f564ea627c66064a4a6a5904fe5a07dd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6b5faec9f564ea627c66064a4a6a5904fe5a07dd
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1722283625
  Commit Message:
    Merge tag 'for-linus-2024072901' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid

Pull HID fixes from Benjamin Tissoires:

 - fixes for HID-BPF after the merge with the bpf tree (Arnd Bergmann
   and Benjamin Tissoires)

 - some tool type fix for the Wacom driver (Tatsunosuke Tobita)

 - a reorder of the sensor discovery to ensure the HID AMD SFH is
   removed when no sensors are available (Basavaraj Natikar)

* tag 'for-linus-2024072901' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid:
  selftests/hid: add test for attaching multiple time the same struct_ops
  HID: bpf: prevent the same struct_ops to be attached more than once
  selftests/hid: disable struct_ops auto-attach
  selftests/hid: fix bpf_wq new API
  HID: amd_sfh: Move sensor discovery before HID device initialization
  hid: bpf: add BPF_JIT dependency
  HID: wacom: more appropriate tool type categorization
  HID: wacom: Modify pen IDs

  Parent Hashes: 10826505f52357c7c9e12358db97a3acbe82e958 facdbdfe0e6202d74758387ae9189c39f7b4b16c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge of HID fixes including HID-BPF, sensor discovery reordering, and Wacom driver tool type update.', 'keywords': 'HID, fixes, HID-BPF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 478574370bef7951fbd9ef5155537d6cbed49472
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 478574370bef7951fbd9ef5155537d6cbed49472
  Author Name: Boris Burkov
  Author Email: boris@bur.io
  Commit Date: 1722273651
  Commit Message:
    btrfs: make cow_file_range_inline() honor locked_page on error

The btrfs buffered write path runs through __extent_writepage() which
has some tricky return value handling for writepage_delalloc().
Specifically
  Parent Hashes: de9f46cb0044a9b9f825d7695ae235863461dc00
  Refs:  when that returns 1

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adjusts cow_file_range_inline() in btrfs to respect locked_page on errors in the buffered write path.', 'keywords': 'btrfs,cow_file_range_inline,locked_page', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: ebc33a3f8d0aeddf19fd5827add24b82ae171829
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ebc33a3f8d0aeddf19fd5827add24b82ae171829
  Author Name: Maciej Fijalkowski
  Author Email: maciej.fijalkowski@intel.com
  Commit Date: 1722268349
  Commit Message:
    ice: improve updating ice_{t
  Parent Hashes: 9da75a511c5558fa3da56759984fd1fa859186f0
  Refs: r}x_ring::xsk_pool

xsk_buff_pool pointers that ice ring structs hold are updated via
ndo_bpf that is executed in process context while it can be read by
remote CPU at the same time within NAPI poll. Use synchronize_net()
after pointer update and {READ

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit improves pointer updating mechanism for ice ring structures to prevent issues during concurrent read operations.', 'keywords': 'pointer, update, synchronize_net', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: d5922717994911e8f0eab736f3ba0d968c158823
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d5922717994911e8f0eab736f3ba0d968c158823
  Author Name: Maciej Fijalkowski
  Author Email: maciej.fijalkowski@intel.com
  Commit Date: 1722268349
  Commit Message:
    ice: modify error handling when setting XSK pool in ndo_bpf

Don't bail out right when spotting an error within ice_qp_{dis
  Parent Hashes: 405d9999aa0b4ae467ef391d1d9c7e0d30ad0841
  Refs: ena}()
but rather track error and go through whole flow of disabling and
enabling queue pair.

Fixes: 2d4238f55697 ("ice: Add support for AF_XDP")
Reviewed-by: Shannon Nelson <shannon.nelson@amd.com>
Tested-by: Chandan Kumar Rout <chandanx.rout@intel.com> (A Contingent Worker at Intel)
Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Updates error handling to track errors and ensure full flow execution in setting XSK pool in ndo_bpf on ice driver.', 'keywords': 'error, XSK pool, ice driver', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 1fd2c10acb7b35d72101a4619ee5b2cddb9efd3a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1fd2c10acb7b35d72101a4619ee5b2cddb9efd3a
  Author Name: Mikulas Patocka
  Author Email: mpatocka@redhat.com
  Commit Date: 1722262747
  Commit Message:
    parisc: fix unaligned accesses in BPF

There were spurious unaligned access warnings when calling BPF code.
Sometimes
  Parent Hashes: 8400291e289ee6b2bf9779ff1c83a291501f017b
  Refs:  the warnings were triggered with any incoming packet

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix unaligned access warnings in BPF on parisc architecture.', 'keywords': 'unaligned,access,parisc', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9da49aa80d686582bc3a027112a30484c9be6b6e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9da49aa80d686582bc3a027112a30484c9be6b6e
  Author Name: Jeongjun Park
  Author Email: aha310510@gmail.com
  Commit Date: 1722246915
  Commit Message:
    tun: Add missing bpf_net_ctx_clear() in do_xdp_generic()

There are cases where do_xdp_generic returns bpf_net_context without
clearing it. This causes various memory corruptions
  Parent Hashes: 301927d2d2eb8e541357ba850bc7a1a74dbbd670
  Refs:  so the missing
bpf_net_ctx_clear must be added.

Reported-by: syzbot+44623300f057a28baf1e@syzkaller.appspotmail.com
Fixes: fecef4cd42c6 ("tun: Assign missing bpf_net_context.")
Signed-off-by: Jeongjun Park <aha310510@gmail.com>
Acked-by: Jason Wang <jasowang@redhat.com>
Reviewed-by: Willem de Bruijn <willemb@google.com>
Reported-by: syzbot+3c2b6d5d4bec3b904933@syzkaller.appspotmail.com
Reported-by: syzbot+707d98c8649695eaf329@syzkaller.appspotmail.com
Reported-by: syzbot+c226757eb784a9da3e8b@syzkaller.appspotmail.com
Reported-by: syzbot+61a1cfc2b6632363d319@syzkaller.appspotmail.com
Reported-by: syzbot+709e4c85c904bcd62735@syzkaller.appspotmail.com
Signed-off-by: David S. Miller <davem@davemloft.net>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add missing bpf_net_ctx_clear() in do_xdp_generic to prevent memory corruption.', 'keywords': 'bpf_net_ctx_clear, do_xdp_generic, memory corruption', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 6557a28f3e3a54cff4f0dcdd1dfa649b26557ab3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6557a28f3e3a54cff4f0dcdd1dfa649b26557ab3
  Author Name: Sean Wang
  Author Email: sean.wang@mediatek.com
  Commit Date: 1721990060
  Commit Message:
    wifi: mt76: mt7921: fix null pointer access in mt792x_mac_link_bss_remove

Fix null pointer access in mt792x_mac_link_bss_remove.

To prevent null pointer access
  Parent Hashes: 189d7aae8f5a100b0db8b302debbd445475d01e6
  Refs:  we should assign the vif to bss_conf in
mt7921_add_interface. This ensures that subsequent operations on the BSS
can properly reference the correct vif.

[  T843] Call Trace:
[  T843]  <TASK>
[  T843]  ? __die+0x1e/0x60
[  T843]  ? page_fault_oops+0x157/0x450
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? search_bpf_extables+0x5a/0x80
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? exc_page_fault+0x2bb/0x670
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? lock_timer_base+0x71/0x90
[  T843]  ? asm_exc_page_fault+0x26/0x30
[  T843]  ? mt792x_mac_link_bss_remove+0x24/0x110 [mt792x_lib]
[  T843]  ? mt792x_remove_interface+0x6e/0x90 [mt792x_lib]
[  T843]  ? ieee80211_do_stop+0x507/0x7e0 [mac80211]
[  T843]  ? ieee80211_stop+0x53/0x190 [mac80211]
[  T843]  ? __dev_close_many+0xa5/0x120
[  T843]  ? __dev_change_flags+0x18c/0x220
[  T843]  ? dev_change_flags+0x21/0x60
[  T843]  ? do_setlink+0xdf9/0x11d0
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? security_sock_rcv_skb+0x33/0x50
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? __nla_validate_parse+0x61/0xd10
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? genl_done+0x53/0x80
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? netlink_dump+0x357/0x410
[  T843]  ? __rtnl_newlink+0x5d6/0x980
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? genl_family_rcv_msg_dumpit+0xdf/0xf0
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? __kmalloc_cache_noprof+0x44/0x210
[  T843]  ? rtnl_newlink+0x42/0x60
[  T843]  ? rtnetlink_rcv_msg+0x152/0x3f0
[  T843]  ? mptcp_pm_nl_dump_addr+0x180/0x180
[  T843]  ? rtnl_calcit.isra.0+0x130/0x130
[  T843]  ? netlink_rcv_skb+0x56/0x100
[  T843]  ? netlink_unicast+0x199/0x290
[  T843]  ? netlink_sendmsg+0x21d/0x490
[  T843]  ? __sock_sendmsg+0x78/0x80
[  T843]  ? ____sys_sendmsg+0x23f/0x2e0
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? copy_msghdr_from_user+0x68/0xa0
[  T843]  ? ___sys_sendmsg+0x81/0xd0
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? crng_fast_key_erasure+0xbc/0xf0
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? get_random_bytes_user+0x126/0x140
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? __fdget+0xb1/0xe0
[  T843]  ? __sys_sendmsg+0x56/0xa0
[  T843]  ? srso_alias_return_thunk+0x5/0xfbef5
[  T843]  ? do_syscall_64+0x5f/0x170
[  T843]  ? entry_SYSCALL_64_after_hwframe+0x55/0x5d
[  T843]  </TASK>

Fixes: 1541d63c5fe2 ("wifi: mt76: mt7925: add mt7925_mac_link_bss_remove to remove per-link BSS")
Reported-by: Bert Karwatzki <spasswolf@web.de>
Closes: https://lore.kernel.org/linux-wireless/2fee61f8c903d02a900ca3188c3742c7effd102e.camel@web.de/#b
Signed-off-by: Sean Wang <sean.wang@mediatek.com>
Tested-by: Bert Karwatzki <spasswolf@web.de>
Link: https://patch.msgid.link/20240718234633.12737-1-sean.wang@kernel.org
Signed-off-by: Johannes Berg <johannes.berg@intel.com>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix null pointer access issue in mt792x_mac_link_bss_remove in the wifi mt76 driver.', 'keywords': 'null pointer fix wifi', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 1722389b0d863056d78287a120a1d6cadb8d4f7b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1722389b0d863056d78287a120a1d6cadb8d4f7b
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1721939545
  Commit Message:
    Merge tag 'net-6.11-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 "Including fixes from bpf and netfilter.

  A lot of networking people were at a conference last week
  Parent Hashes: 8bf100092d60bf586bbc1a3a2cd833bb212d9d53 af65ea42bd1d28d818b74b9b3b4f8da7ada9f88b
  Refs:  busy
  catching COVID

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes from netdev including bpf and netfilter updates.', 'keywords': 'networking, bpf, netfilter', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tc/netfilter like programs', 'tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f7578df913041f08b680aac2c660ebd71f35af3a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f7578df913041f08b680aac2c660ebd71f35af3a
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1721918425
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-07-25

We've added 14 non-merge commits during the last 8 day(s) which contain
a total of 19 files changed
  Parent Hashes: c1668292689ad2ee16c9c1750a8044b0b0aad663 9b9969c40b0d63a8fca434d4ea01c60a39699aa3
  Refs:  177 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merged changes from 'for-netdev' branch in the Linux bpf repository.", 'keywords': 'merge,for-netdev,bpf', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 9b9969c40b0d63a8fca434d4ea01c60a39699aa3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9b9969c40b0d63a8fca434d4ea01c60a39699aa3
  Author Name: Stanislav Fomichev
  Author Email: sdf@fomichev.me
  Commit Date: 1721901453
  Commit Message:
    selftests/bpf: Add XDP_UMEM_TX_METADATA_LEN to XSK TX metadata test

This flag is now required to use tx_metadata_len.

Fixes: 40808a237d9c ("selftests/bpf: Add TX side to xdp_metadata")
Reported-by: Julian Schindel <mail@arctic-alpaca.de>
Signed-off-by: Stanislav Fomichev <sdf@fomichev.me>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Link: https://lore.kernel.org/bpf/20240713015253.121248-3-sdf@fomichev.me

  Parent Hashes: d5e726d9143c5624135f5dc9e4069799adeef734
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add XDP_UMEM_TX_METADATA_LEN flag to XSK TX metadata test for compliance.', 'keywords': 'XDP_UMEM_TX_METADATA_LEN,XSK,metadata', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: d5e726d9143c5624135f5dc9e4069799adeef734
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d5e726d9143c5624135f5dc9e4069799adeef734
  Author Name: Stanislav Fomichev
  Author Email: sdf@fomichev.me
  Commit Date: 1721901447
  Commit Message:
    xsk: Require XDP_UMEM_TX_METADATA_LEN to actuate tx_metadata_len

Julian reports that commit 341ac980eab9 ("xsk: Support tx_metadata_len")
can break existing use cases which don't zero-initialize xdp_umem_reg
padding. Introduce new XDP_UMEM_TX_METADATA_LEN to make sure we
interpret the padding as tx_metadata_len only when being explicitly
asked.

Fixes: 341ac980eab9 ("xsk: Support tx_metadata_len")
Reported-by: Julian Schindel <mail@arctic-alpaca.de>
Signed-off-by: Stanislav Fomichev <sdf@fomichev.me>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Link: https://lore.kernel.org/bpf/20240713015253.121248-2-sdf@fomichev.me

  Parent Hashes: fa5ef655615a01533035c6139248c5b33aa27028
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce XDP_UMEM_TX_METADATA_LEN to ensure explicit tx_metadata_len interpretation in XDP sockets.', 'keywords': 'XDP, tx_metadata_len, xsk', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: fa5ef655615a01533035c6139248c5b33aa27028
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fa5ef655615a01533035c6139248c5b33aa27028
  Author Name: Fred Li
  Author Email: dracodingfly@gmail.com
  Commit Date: 1721901014
  Commit Message:
    bpf: Fix a segment issue when downgrading gso_size

Linearize the skb when downgrading gso_size because it may trigger a
BUG_ON() later when the skb is segmented as described in [1
  Parent Hashes: 13c9b702e6cb8e406d5fa6b2dca422fa42d2f13e
  Refs: 2].

Fixes: 2be7e212d5419 ("bpf: add bpf_skb_adjust_room helper")
Signed-off-by: Fred Li <dracodingfly@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Willem de Bruijn <willemb@google.com>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/all/20240626065555.35460-2-dracodingfly@gmail.com [1]
Link: https://lore.kernel.org/all/668d5cf1ec330_1c18c32947@willemb.c.googlers.com.notmuch [2]
Link: https://lore.kernel.org/bpf/20240719024653.77006-1-dracodingfly@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a segment issue in eBPF by linearizing skb when downgrading gso_size to prevent potential BUG_ON errors.', 'keywords': 'bpf, segment issue, gso_size', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: facdbdfe0e6202d74758387ae9189c39f7b4b16c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: facdbdfe0e6202d74758387ae9189c39f7b4b16c
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1721838442
  Commit Message:
    selftests/hid: add test for attaching multiple time the same struct_ops

Turns out that we would en up in a bad state if we attempt to attach
twice the same HID-BPF struct_ops
  Parent Hashes: acd34cfc48b3dd46e5e4c4bdc99cc0c15568bac0
  Refs:  so have a test for it.

Link: https://patch.msgid.link/20240723-fix-6-11-bpf-v1-4-b9d770346784@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for attaching HID-BPF struct_ops multiple times to prevent bad state.', 'keywords': 'selftests,HID-BPF,struct_ops', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: acd34cfc48b3dd46e5e4c4bdc99cc0c15568bac0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: acd34cfc48b3dd46e5e4c4bdc99cc0c15568bac0
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1721838441
  Commit Message:
    HID: bpf: prevent the same struct_ops to be attached more than once

If the struct_ops is already attached
  Parent Hashes: f64c1a4593391c57accf32693a14ef45f8162b5c
  Refs:  we should bail out or we will
end up in various locks and pointer issues while unregistering.

Link: https://patch.msgid.link/20240723-fix-6-11-bpf-v1-3-b9d770346784@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Prevent attaching the same struct_ops multiple times to avoid locks and pointer issues.', 'keywords': 'HID,struct_ops,unregistering', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: f64c1a4593391c57accf32693a14ef45f8162b5c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f64c1a4593391c57accf32693a14ef45f8162b5c
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1721838441
  Commit Message:
    selftests/hid: disable struct_ops auto-attach

Since commit 08ac454e258e ("libbpf: Auto-attach struct_ops BPF maps in
BPF skeleton")
  Parent Hashes: ff9fbcafbaf13346c742c0d672a22f5ac20b9d92
  Refs:  libbpf automatically calls bpf_map__attach_struct_ops()
on every struct_ops it sees in the bpf object. The problem is that
our test bpf object has many of them but only one should be manually
loaded at a time

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Disable automatic struct_ops attachment in eBPF selftests for HID due to multiple struct_ops in a test bpf object.', 'keywords': 'selftests,hid,struct_ops', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', 'HID driver like programs']}
--------------------
--------------------
Processing Commit ID: ff9fbcafbaf13346c742c0d672a22f5ac20b9d92
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ff9fbcafbaf13346c742c0d672a22f5ac20b9d92
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1721838441
  Commit Message:
    selftests/hid: fix bpf_wq new API

Since commit f56f4d541eab ("bpf: helpers: fix bpf_wq_set_callback_impl
signature")
  Parent Hashes: 8031b001da700474c11d28629581480b12a0d8d4
  Refs:  the API for bpf_wq changed a bit.

We need to update the selftests/hid code to reflect that or the
bpf program will not load.

Link: https://patch.msgid.link/20240723-fix-6-11-bpf-v1-1-b9d770346784@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update selftests/hid code for compatibility with new bpf_wq API changes.', 'keywords': 'selftests, bpf_wq, API', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: bacc15e010fc5a235fb2020b06a29a9961b5db82
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bacc15e010fc5a235fb2020b06a29a9961b5db82
  Author Name: Arnd Bergmann
  Author Email: arnd@arndb.de
  Commit Date: 1721659925
  Commit Message:
    hid: bpf: add BPF_JIT dependency

The module does not do anything when the JIT is disabled
  Parent Hashes: 9c2913b962daf3e5a947babf93f2125765eeca09
  Refs:  but instead
causes a warning:

In file included from include/linux/bpf_verifier.h:7

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a BPF_JIT dependency to the HID module to prevent warnings when the JIT is disabled.', 'keywords': 'BPF_JIT, HID, dependency', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 13c9b702e6cb8e406d5fa6b2dca422fa42d2f13e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 13c9b702e6cb8e406d5fa6b2dca422fa42d2f13e
  Author Name: Liwei Song
  Author Email: liwei.song.lsong@gmail.com
  Commit Date: 1721658930
  Commit Message:
    tools/resolve_btfids: Fix comparison of distinct pointer types warning in resolve_btfids

Add a type cast for set8->pairs to fix below compile warning:

main.c: In function 'sets_patch':
main.c:699:50: warning: comparison of distinct pointer types lacks a cast
  699 |        BUILD_BUG_ON(set8->pairs != &set8->pairs[0].id);
      |                                 ^~

Fixes: 9707ac4fe2f5 ("tools/resolve_btfids: Refactor set sorting with types from btf_ids.h")
Signed-off-by: Liwei Song <liwei.song.lsong@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240722083305.4009723-1-liwei.song.lsong@gmail.com

  Parent Hashes: 0be9ae5486cd9e767138c13638820d240713f5f1
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes a warning by adding a type cast in resolve_btfids for distinct pointer types comparison.', 'keywords': 'type cast, pointer, warning', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 527eff227d4321c6ea453db1083bc4fdd4d3a3e8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 527eff227d4321c6ea453db1083bc4fdd4d3a3e8
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1721609782
  Commit Message:
    Merge tag 'mm-nonmm-stable-2024-07-21-15-07' of git://git.kernel.org/pub/scm/linux/kernel/git/akpm/mm

Pull non-MM updates from Andrew Morton:

 - In the series "treewide: Refactor heap related implementation"
  Parent Hashes: fbc90c042cd1dc7258ebfebe6d226017e5b5ac8c 67856f44da381973caf4eb692ad2cca1de7b2d37
  Refs: 
   Kuan-Wei Chiu has significantly reworked the min_heap library code
   and has taught bcachefs to use the new more generic implementation.

 - Yury Norov's series "Cleanup cpumask.h inclusion in core headers"
   reworks the cpumask and nodemask headers to make things generally
   more rational.

 - Kuan-Wei Chiu has sent along some maintenance work against our
   sorting library code in the series "lib/sort: Optimizations and
   cleanups".

 - More library maintainance work from Christophe Jaillet in the series
   "Remove usage of the deprecated ida_simple_xx() API".

 - Ryusuke Konishi continues with the nilfs2 fixes and clanups in the
   series "nilfs2: eliminate the call to inode_attach_wb()".

 - Kuan-Ying Lee has some fixes to the gdb scripts in the series "Fix
   GDB command error".

 - Plus the usual shower of singleton patches all over the place. Please
   see the relevant changelogs for details.

* tag 'mm-nonmm-stable-2024-07-21-15-07' of git://git.kernel.org/pub/scm/linux/kernel/git/akpm/mm: (98 commits)
  ia64: scrub ia64 from poison.h
  watchdog/perf: properly initialize the turbo mode timestamp and rearm counter
  tsacct: replace strncpy() with strscpy()
  lib/bch.c: use swap() to improve code
  test_bpf: convert comma to semicolon
  init/modpost: conditionally check section mismatch to __meminit*
  init: remove unused __MEMINIT* macros
  nilfs2: Constify struct kobj_type
  nilfs2: avoid undefined behavior in nilfs_cnt32_ge macro
  math: rational: add missing MODULE_DESCRIPTION() macro
  lib/zlib: add missing MODULE_DESCRIPTION() macro
  fs: ufs: add MODULE_DESCRIPTION()
  lib/rbtree.c: fix the example typo
  ocfs2: add bounds checking to ocfs2_check_dir_entry()
  fs: add kernel-doc comments to ocfs2_prepare_orphan_dir()
  coredump: simplify zap_process()
  selftests/fpu: add missing MODULE_DESCRIPTION() macro
  compiler.h: simplify data_race() macro
  build-id: require program headers to be right after ELF header
  resource: add missing MODULE_DESCRIPTION()
  ...


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge non-MM updates including refactoring and maintenance work across various kernel components.', 'keywords': 'refactor, maintenance, updates', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 7697a0fe0154468f5df35c23ebd7aa48994c2cdc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7697a0fe0154468f5df35c23ebd7aa48994c2cdc
  Author Name: Huacai Chen
  Author Email: chenhuacai@loongson.cn
  Commit Date: 1721486458
  Commit Message:
    LoongArch: Define __ARCH_WANT_NEW_STAT in unistd.h

Chromium sandbox apparently wants to deny statx [1] so it could properly
inspect arguments after the sandboxed process later falls back to fstat.
Because there's currently not a "fd-only" version of statx
  Parent Hashes: 256a6f430562c163f1fa07576c4cd4e996e953dd
  Refs:  so that the
sandbox has no way to ensure the path argument is empty without being
able to peek into the sandboxed process's memory. For architectures able
to do newfstatat though

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit defines __ARCH_WANT_NEW_STAT in unistd.h for LoongArch to address issues with Chromium sandbox and statx.', 'keywords': 'LoongArch, statx, unistd.h', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 3c3ff7be9729959699eb6cbc7fd7303566d74069
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3c3ff7be9729959699eb6cbc7fd7303566d74069
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1721448033
  Commit Message:
    Merge tag 'powerpc-6.11-1' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux

Pull powerpc updates from Michael Ellerman:

 - Remove support for 40x CPUs & platforms

 - Add support to the 64-bit BPF JIT for cpu v4 instructions

 - Fix PCI hotplug driver crash on powernv

 - Fix doorbell emulation for KVM on PAPR guests (nestedv2)

 - Fix KVM nested guest handling of some less used SPRs

 - Online NUMA nodes with no CPU/memory if they have a PCI device
   attached

 - Reduce memory overhead of enabling kfence on 64-bit Radix MMU kernels

 - Reimplement the iommu table_group_ops for pseries for VFIO SPAPR TCE

Thanks to: Anjali K
  Parent Hashes: 3f386cb8ee9f04ff4be164ca7a1d0ef3f81f7374 9ff0251b2eb54d17fbe4f6aff50f6edfd837adb6
  Refs:  Artem Savkov

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge powerpc updates including removal of 40x support and improvements to 64-bit BPF JIT.', 'keywords': 'powerpc,BPF JIT,40x CPUs', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0be9ae5486cd9e767138c13638820d240713f5f1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0be9ae5486cd9e767138c13638820d240713f5f1
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1721402796
  Commit Message:
    bpf
  Parent Hashes: 6caf9efaa169faea10a369dd6b36806ae6842584
  Refs:  events: Use prog to emit ksymbol event for main program

Since commit 0108a4e9f358 ("bpf: ensure main program has an extable")

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit ensures the main eBPF program emits ksymbol events using 'prog'.", 'keywords': 'ksymbol, events, prog', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 91bd008d4e2b4962ecb9a10e40c2fb666b0aeb92
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 91bd008d4e2b4962ecb9a10e40c2fb666b0aeb92
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1721330360
  Commit Message:
    Merge tag 'probes-v6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace

Pull probes updates from Masami Hiramatsu:
 "Uprobes:

   - x86/shstk: Make return uprobe work with shadow stack

   - Add uretprobe syscall which speeds up the uretprobe 10-30% faster.
     This syscall is automatically used from user-space trampolines
     which are generated by the uretprobe. If this syscall is used by
     normal user program
  Parent Hashes: cb273eb7c8390c70a484db6c79a797e377db09b5 c26b1b89b8a9fd8665e79cd798bd970e233772b6
  Refs:  it will cause SIGILL. Note that this is
     currently only implemented on x86_64.

     (This also has two fixes for adjusting the syscall number to avoid
     conflict with new *attrat syscalls.)

   - uprobes/perf: fix user stack traces in the presence of pending
     uretprobe. This corrects the uretprobe's trampoline address in the
     stacktrace with correct return address

   - selftests/x86: Add a return uprobe with shadow stack test

   - selftests/bpf: Add uretprobe syscall related tests.
      - test case for register integrity check
      - test case with register changing case
      - test case for uretprobe syscall without uprobes (expected to fail)
      - test case for uretprobe with shadow stack

   - selftests/bpf: add test validating uprobe/uretprobe stack traces

   - MAINTAINERS: Add uprobes entry. This does not specify the tree but
     to clarify who maintains and reviews the uprobes

  Kprobes:

   - tracing/kprobes: Test case cleanups.

     Replace redundant WARN_ON_ONCE() + pr_warn() with WARN_ONCE() and
     remove unnecessary code from selftest

   - tracing/kprobes: Add symbol counting check when module loads.

     This checks the uniqueness of the probed symbol on modules. The
     same check has already done for kernel symbols

     (This also has a fix for build error with CONFIG_MODULES=n)

  Cleanup:

   - Add MODULE_DESCRIPTION() macros for fprobe and kprobe examples"

* tag 'probes-v6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace:
  MAINTAINERS: Add uprobes entry
  selftests/bpf: Change uretprobe syscall number in uprobe_syscall test
  uprobe: Change uretprobe syscall scope and number
  tracing/kprobes: Fix build error when find_module() is not available
  tracing/kprobes: Add symbol counting check when module loads
  selftests/bpf: add test validating uprobe/uretprobe stack traces
  perf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge and update uprobes, including performance improvements and test cases, while fixing related issues on x86 architecture.', 'keywords': 'uprobes,x86_64,performance', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 120f1c857a73e52132e473dee89b340440cb692b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 120f1c857a73e52132e473dee89b340440cb692b
  Author Name: Pablo Neira Ayuso
  Author Email: pablo@netfilter.org
  Commit Date: 1721292737
  Commit Message:
    net: flow_dissector: use DEBUG_NET_WARN_ON_ONCE

The following splat is easy to reproduce upstream as well as in -stable
kernels. Florian Westphal provided the following commit:

  d1dab4f71d37 ("net: add and use __skb_get_hash_symmetric_net")

but this complementary fix has been also suggested by Willem de Bruijn
and it can be easily backported to -stable kernel which consists in
using DEBUG_NET_WARN_ON_ONCE instead to silence the following splat
given __skb_get_hash() is used by the nftables tracing infrastructure to
to identify packets in traces.

[69133.561393] ------------[ cut here ]------------
[69133.561404] WARNING: CPU: 0 PID: 43576 at net/core/flow_dissector.c:1104 __skb_flow_dissect+0x134f/
[...]
[69133.561944] CPU: 0 PID: 43576 Comm: socat Not tainted 6.10.0-rc7+ #379
[69133.561959] RIP: 0010:__skb_flow_dissect+0x134f/0x2ad0
[69133.561970] Code: 83 f9 04 0f 84 b3 00 00 00 45 85 c9 0f 84 aa 00 00 00 41 83 f9 02 0f 84 81 fc ff
ff 44 0f b7 b4 24 80 00 00 00 e9 8b f9 ff ff <0f> 0b e9 20 f3 ff ff 41 f6 c6 20 0f 84 e4 ef ff ff 48 8d 7b 12 e8
[69133.561979] RSP: 0018:ffffc90000006fc0 EFLAGS: 00010246
[69133.561988] RAX: 0000000000000000 RBX: ffffffff82f33e20 RCX: ffffffff81ab7e19
[69133.561994] RDX: dffffc0000000000 RSI: ffffc90000007388 RDI: ffff888103a1b418
[69133.562001] RBP: ffffc90000007310 R08: 0000000000000000 R09: 0000000000000000
[69133.562007] R10: ffffc90000007388 R11: ffffffff810cface R12: ffff888103a1b400
[69133.562013] R13: 0000000000000000 R14: ffffffff82f33e2a R15: ffffffff82f33e28
[69133.562020] FS:  00007f40f7131740(0000) GS:ffff888390800000(0000) knlGS:0000000000000000
[69133.562027] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[69133.562033] CR2: 00007f40f7346ee0 CR3: 000000015d200001 CR4: 00000000001706f0
[69133.562040] Call Trace:
[69133.562044]  <IRQ>
[69133.562049]  ? __warn+0x9f/0x1a0
[ 1211.841384]  ? __skb_flow_dissect+0x107e/0x2860
[...]
[ 1211.841496]  ? bpf_flow_dissect+0x160/0x160
[ 1211.841753]  __skb_get_hash+0x97/0x280
[ 1211.841765]  ? __skb_get_hash_symmetric+0x230/0x230
[ 1211.841776]  ? mod_find+0xbf/0xe0
[ 1211.841786]  ? get_stack_info_noinstr+0x12/0xe0
[ 1211.841798]  ? bpf_ksym_find+0x56/0xe0
[ 1211.841807]  ? __rcu_read_unlock+0x2a/0x70
[ 1211.841819]  nft_trace_init+0x1b9/0x1c0 [nf_tables]
[ 1211.841895]  ? nft_trace_notify+0x830/0x830 [nf_tables]
[ 1211.841964]  ? get_stack_info+0x2b/0x80
[ 1211.841975]  ? nft_do_chain_arp+0x80/0x80 [nf_tables]
[ 1211.842044]  nft_do_chain+0x79c/0x850 [nf_tables]

Fixes: 9b52e3f267a6 ("flow_dissector: handle no-skb use case")
Suggested-by: Willem de Bruijn <willemb@google.com>
Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
Reviewed-by: Willem de Bruijn <willemb@google.com>
Link: https://patch.msgid.link/20240715141442.43775-1-pablo@netfilter.org
Signed-off-by: Paolo Abeni <pabeni@redhat.com>


  Parent Hashes: c14112a5574ff5cf3de198ab6eeff53ac1234068
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix net flow dissector to silence warnings by using DEBUG_NET_WARN_ON_ONCE.', 'keywords': 'flow_dissector, DEBUG_NET_WARN_ON_ONCE, nftables', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: a7526fe8b94eced7d82aa00b2bcca44e39ae0769
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a7526fe8b94eced7d82aa00b2bcca44e39ae0769
  Author Name: Vlastimil Babka
  Author Email: vbabka@suse.cz
  Commit Date: 1721275518
  Commit Message:
    mm
  Parent Hashes: 7b7aca6d7c0f9b2d9400bfc57cb2b23cfbd5134d
  Refs:  slab: put should_failslab() back behind CONFIG_SHOULD_FAILSLAB

Patch series "revert unconditional slab and page allocator fault injection
calls".

These two patches largely revert commits that added function call overhead
into slab and page allocation hotpaths and that cannot be currently
disabled even though related CONFIG_ options do exist.

A much more involved solution that can keep the callsites always existing
but hidden behind a static key if unused

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Revert slab and page allocator fault injection function call overhead to improve performance by using static key solution.', 'keywords': 'revert, allocator, static key', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 6e504d2c61244a01226c5100c835e44fb9b85ca8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6e504d2c61244a01226c5100c835e44fb9b85ca8
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1721262511
  Commit Message:
    Merge tag 'for-linus-2024071601' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid

Pull HID updates from Benjamin Tissoires:

 - rewrite of the HID-BPF internal implementation to use bpf struct_ops
   instead of a tracing endpoint (Benjamin Tissoires)

 - add two new HID-BPF hooks to be able to intercept userspace calls
   targeting a HID device and filtering them (Benjamin Tissoires)

 - add support for various new devices through HID-BPF filters (Benjamin
   Tissoires)

 - add support for the magic keyboard backlight (Orlando Chamberlain)

 - add the missing MODULE_DESCRIPTION() macros in HID drivers (Jeff
   Johnson)

 - use of kvzalloc in case memory gets too fragmented (Hailong Liu)

 - retrieve the device firmware node in the child HID device (Danny
   Kaehn)

 - some hid-uclogic improvements (José Expósito)

 - some more typos
  Parent Hashes: 221fd1e154ee533c529280bd3866570c086ec792 30b866413e7bdd507a79854b5931528d3f6f438f
  Refs:  trivial fixes

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge HID updates including HID-BPF implementation changes and device support additions.', 'keywords': 'HID-BPF, hooks, struct_ops', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 6caf9efaa169faea10a369dd6b36806ae6842584
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6caf9efaa169faea10a369dd6b36806ae6842584
  Author Name: Michal Luczaj
  Author Email: mhal@rbox.co
  Commit Date: 1721249515
  Commit Message:
    selftests/bpf: Test sockmap redirect for AF_UNIX MSG_OOB

Verify that out-of-band packets are silently dropped before they reach the
redirection logic.

The idea is to test with a 2 byte long send(). Should a MSG_OOB flag be in
use
  Parent Hashes: 0befb349c4cdcc4e3c2f4aff81259a3a58c3b33e
  Refs:  only the last byte will be treated as out-of-band. Test fails if
verd_mapfd indicates a wrong number of packets processed (e.g. if OOB
wasn't dropped at the source) or if it was possible to recv() MSG_OOB from
the mapped socket

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test to verify MSG_OOB packet handling in sockmap redirection for AF_UNIX.', 'keywords': 'sockmap, MSG_OOB, AF_UNIX', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 0befb349c4cdcc4e3c2f4aff81259a3a58c3b33e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0befb349c4cdcc4e3c2f4aff81259a3a58c3b33e
  Author Name: Michal Luczaj
  Author Email: mhal@rbox.co
  Commit Date: 1721249510
  Commit Message:
    selftests/bpf: Parametrize AF_UNIX redir functions to accept send() flags

Extend pairs_redir_to_connected() and unix_inet_redir_to_connected() with a
send_flags parameter. Replace write() with send() allowing packets to be
sent as MSG_OOB.

Signed-off-by: Michal Luczaj <mhal@rbox.co>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
Link: https://lore.kernel.org/bpf/20240713200218.2140950-4-mhal@rbox.co

  Parent Hashes: 1b0ad43177c097d38b967b99c2b71d8be28b0223
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit parametrizes AF_UNIX redirection functions to accept send() flags, allowing packets to be sent as MSG_OOB.', 'keywords': 'AF_UNIX,send_flags,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1b0ad43177c097d38b967b99c2b71d8be28b0223
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1b0ad43177c097d38b967b99c2b71d8be28b0223
  Author Name: Michal Luczaj
  Author Email: mhal@rbox.co
  Commit Date: 1721249505
  Commit Message:
    selftests/bpf: Support SOCK_STREAM in unix_inet_redir_to_connected()

Function ignores the AF_UNIX socket type argument
  Parent Hashes: 638f32604385fd23059985da8de918e9c18f0b98
  Refs:  SOCK_DGRAM is hardcoded.
Fix to respect the argument provided.

Fixes: 75e0e27db6cf ("selftest/bpf: Change udp to inet in some function names")
Suggested-by: Jakub Sitnicki <jakub@cloudflare.com>
Signed-off-by: Michal Luczaj <mhal@rbox.co>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
Link: https://lore.kernel.org/bpf/20240713200218.2140950-3-mhal@rbox.co


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies selftests to support both SOCK_STREAM and SOCK_DGRAM types in unix_inet_redir_to_connected().', 'keywords': 'SOCK_STREAM, selftests, bpf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 638f32604385fd23059985da8de918e9c18f0b98
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 638f32604385fd23059985da8de918e9c18f0b98
  Author Name: Michal Luczaj
  Author Email: mhal@rbox.co
  Commit Date: 1721249340
  Commit Message:
    af_unix: Disable MSG_OOB handling for sockets in sockmap/sockhash

AF_UNIX socket tracks the most recent OOB packet (in its receive queue)
with an `oob_skb` pointer. BPF redirecting does not account for that: when
an OOB packet is moved between sockets
  Parent Hashes: 3c870059e9f8897c032f4256f90c41ee822218a8
  Refs:  `oob_skb` is left outdated. This
results in a single skb that may be accessed from two different sockets.

Take the easy way out: silently drop MSG_OOB data targeting any socket that
is in a sockmap or a sockhash. Note that such silent drop is akin to the
fate of redirected skb's scm_fp_list (SCM_RIGHTS

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit disables MSG_OOB handling for sockets in sockmap/sockhash to prevent outdated data issues.', 'keywords': 'MSG_OOB, sockmap, sockhash', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 3c870059e9f8897c032f4256f90c41ee822218a8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3c870059e9f8897c032f4256f90c41ee822218a8
  Author Name: Donald Hunter
  Author Email: donald.hunter@gmail.com
  Commit Date: 1721249158
  Commit Message:
    bpftool: Fix typo in usage help

The usage help for "bpftool prog help" contains a ° instead of the _
symbol for cgroup/sendmsg_unix. Fix the typo.

Fixes: 8b3cba987e6d ("bpftool: Add support for cgroup unix socket address hooks")
Signed-off-by: Donald Hunter <donald.hunter@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Quentin Monnet <qmo@kernel.org>
Link: https://lore.kernel.org/bpf/20240717134508.77488-1-donald.hunter@gmail.com

  Parent Hashes: 189f1a976e426011e6a5588f1d3ceedf71fe2965
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix typo in bpftool usage help for cgroup/sendmsg_unix by replacing ° with _ symbol.', 'keywords': 'bpftool, typo, cgroup', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 189f1a976e426011e6a5588f1d3ceedf71fe2965
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 189f1a976e426011e6a5588f1d3ceedf71fe2965
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1721248967
  Commit Message:
    libbpf: Fix no-args func prototype BTF dumping syntax

For all these years libbpf's BTF dumper has been emitting not strictly
valid syntax for function prototypes that have no input arguments.

Instead of `int (*blah)()` we should emit `int (*blah)(void)`.

This is not normally a problem
  Parent Hashes: c638b130e83e4aa47031c0e51455ecc961dfdc3d
  Refs:  but it manifests when we get kfuncs in
vmlinux.h that have no input arguments. Due to compiler internal
specifics

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes BTF dumping syntax for no-args function prototypes in libbpf.', 'keywords': 'BTF,idump,syntax', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c638b130e83e4aa47031c0e51455ecc961dfdc3d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c638b130e83e4aa47031c0e51455ecc961dfdc3d
  Author Name: Naveen N Rao
  Author Email: naveen@kernel.org
  Commit Date: 1721237238
  Commit Message:
    MAINTAINERS: Update powerpc BPF JIT maintainers

Hari Bathini has been updating and maintaining the powerpc BPF JIT since
a while now. Christophe Leroy has been doing the same for 32-bit
powerpc. Add them as maintainers for the powerpc BPF JIT.

I am no longer actively looking into the powerpc BPF JIT. Change my role
to that of a reviewer so that I can help with the odd query.

Signed-off-by: Naveen N Rao <naveen@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Acked-by: Christophe Leroy <christophe.leroy@csgroup.eu>
Acked-by: Hari Bathini <hbathini@linux.ibm.com>
Link: https://lore.kernel.org/bpf/24fea21d9d4458973aadd6a02bb1bf558b8bd0b2.1720944897.git.naveen@kernel.org

  Parent Hashes: afcc8e1ef7bb5c14100ba3e6ccfd4baebc80242e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates maintainers for the powerpc BPF JIT in the MAINTAINERS file.', 'keywords': 'powerpc BPF JIT, maintainers, MAINTAINERS file', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: afcc8e1ef7bb5c14100ba3e6ccfd4baebc80242e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: afcc8e1ef7bb5c14100ba3e6ccfd4baebc80242e
  Author Name: Naveen N Rao
  Author Email: naveen@kernel.org
  Commit Date: 1721237238
  Commit Message:
    MAINTAINERS: Update email address of Naveen

I have switched to using my @kernel.org id for my contributions. Update
MAINTAINERS and mailmap to reflect the same.

Signed-off-by: Naveen N Rao <naveen@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Link: https://lore.kernel.org/bpf/fb6ef126771c70538067709af69d960da3560ce7.1720944897.git.naveen@kernel.org

  Parent Hashes: e1ef78dce9b7b0fa7f9d88bb3554441d74d33b34
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates the MAINTAINERS file with a new email address for Naveen N Rao.', 'keywords': 'email update MAINTAINERS', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e1ef78dce9b7b0fa7f9d88bb3554441d74d33b34
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e1ef78dce9b7b0fa7f9d88bb3554441d74d33b34
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1721236964
  Commit Message:
    selftests/bpf: fexit_sleep: Fix stack allocation for arm64

On ARM64 the stack pointer should be aligned at a 16 byte boundary or
the SPAlignmentFault can occur. The fexit_sleep selftest allocates the
stack for the child process as a character array
  Parent Hashes: 0e03c643dc9389e61fa484562dae58c8d6e96d63
  Refs:  this is not guaranteed
to be aligned at 16 bytes.

Because of the SPAlignmentFault

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes stack alignment issue in fexit_sleep selftest on ARM64 to prevent SPAlignmentFault.', 'keywords': 'fexit_sleep, ARM64, stack alignment', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 51835949dda3783d4639cfa74ce13a3c9829de00
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 51835949dda3783d4639cfa74ce13a3c9829de00
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1721183314
  Commit Message:
    Merge tag 'net-next-6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next

Pull networking updates from Jakub Kicinski:
 "Not much excitement - a handful of large patchsets (devmem among them)
  did not make it in time.

  Core & protocols:

   - Use local_lock in addition to local_bh_disable() to protect per-CPU
     resources in networking
  Parent Hashes: 0434dbe32053d07d658165be681505120c6b1abc 77ae5e5b00720372af2860efdc4bc652ac682696
  Refs:  a step closer for local_bh_disable() not
     to act as a big lock on PREEMPT_RT

   - Use flex array for netdevice priv area

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking updates, including local_lock improvements for per-CPU resources and flex array usage for netdevice.', 'keywords': 'networking updates, local_lock, flex array', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: d80f2996b8502779c39221a9e7c9ea7e361c0ae4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d80f2996b8502779c39221a9e7c9ea7e361c0ae4
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1721156943
  Commit Message:
    Merge tag 'asm-generic-6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/arnd/asm-generic

Pull asm-generic updates from Arnd Bergmann:
 "Most of this is part of my ongoing work to clean up the system call
  tables. In this bit
  Parent Hashes: a5db8e4544a4dc7143f30a1438686a4d5fa6d775 1a7b7326d587c9a5e8ff067e70d6aaf0333f4bb3
  Refs:  all of the newer architectures are converted to
  use the machine readable syscall.tbl format instead in place of
  complex macros in include/uapi/asm-generic/unistd.h.

  This follows an earlier series that fixed various API mismatches and
  in turn is used as the base for planned simplifications.

  The other two patches are dead code removal and a warning fix"

* tag 'asm-generic-6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/arnd/asm-generic:
  vmlinux.lds.h: catch .bss..L* sections into BSS")
  fixmap: Remove unused set_fixmap_offset_io()
  riscv: convert to generic syscall table
  openrisc: convert to generic syscall table
  nios2: convert to generic syscall table
  loongarch: convert to generic syscall table
  hexagon: use new system call table
  csky: convert to generic syscall table
  arm64: rework compat syscall macros
  arm64: generate 64-bit syscall.tbl
  arm64: convert unistd_32.h to syscall.tbl format
  arc: convert to generic syscall table
  clone3: drop __ARCH_WANT_SYS_CLONE3 macro
  kbuild: add syscall table generation to scripts/Makefile.asm-headers
  kbuild: verify asm-generic header list
  loongarch: avoid generating extra header files
  um: don't generate asm/bpf_perf_event.h
  csky: drop asm/gpio.h wrapper
  syscalls: add generic scripts/syscall.tbl


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge asm-generic updates for syscall table conversion and cleanup.', 'keywords': 'asm-generic, syscall, cleanup', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 30b866413e7bdd507a79854b5931528d3f6f438f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 30b866413e7bdd507a79854b5931528d3f6f438f
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1721125646
  Commit Message:
    Merge branch 'for-6.11/bpf' into for-linus

- Rewrite of HID-BPF internal implementation to use bpf struct_ops
  instead of tracing (Benjamin Tissoires)
- Add new HID-BPF hooks to be able to intercept userspace calls
  targetting a HID device and filtering them (Benjamin Tissoires)
- Add support for various new devices through HID-BPF filters (Benjamin
  Tissoires)

  Parent Hashes: e518f368303d35017fe79f21f0fec7860ef71d0b a67a1deb11d9a692366100d9ba9fb3aeb0c7707b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor HID-BPF implementation to use struct_ops and add hooks for intercepting userspace calls and supporting new devices.', 'keywords': 'HID-BPF, struct_ops, hooks', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The helper and kfuncs', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: c49379dcda748adb8ba84d7a8eb3b02d4f1ebfcf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c49379dcda748adb8ba84d7a8eb3b02d4f1ebfcf
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1721051720
  Commit Message:
    Merge branch 'net-dsa-vsc73xx-implement-vlan-operations'

Pawel Dembicki says:

====================
net: dsa: vsc73xx: Implement VLAN operations

This patch series is a result of splitting a larger patch series [0]
  Parent Hashes: a8ea8d531d1edf7b29e559713fe1aaab3530d7d9 259a7061c2f14bbf5845598f69ac63cdb77d6346
  Refs: 
where some parts was merged before.

The first patch implements port state configuration

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merges branch 'net-dsa-vsc73xx-implement-vlan-operations' to add VLAN operations to VSC73XX.", 'keywords': 'VLAN,DSA,VSC73XX', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 3e301b431b91e4b973dbc520e90e220acb5b91f5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3e301b431b91e4b973dbc520e90e220acb5b91f5
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1721022590
  Commit Message:
    selftests/bpf: Change uretprobe syscall number in uprobe_syscall test

Fixing the syscall number value.

Link: https://lore.kernel.org/all/20240712135228.1619332-3-jolsa@kernel.org/

Fixes: 9e7f74e64ae5 ("selftests/bpf: Add uretprobe syscall call from user space test")
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>

  Parent Hashes: 63ded110979bdd8741542ec66fb9e2d2074aed8c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates the syscall number in the uprobe_syscall BPF self-test.', 'keywords': 'syscall, uprobe, self-test', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 41d4a174201e62fc95562dc8e53097baf8568f24
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 41d4a174201e62fc95562dc8e53097baf8568f24
  Author Name: Xuan Zhuo
  Author Email: xuanzhuo@linux.alibaba.com
  Commit Date: 1721014357
  Commit Message:
    virtio_net: replace VIRTIO_XDP_HEADROOM by XDP_PACKET_HEADROOM

virtio net has VIRTIO_XDP_HEADROOM that is equal to
XDP_PACKET_HEADROOM to calculate the headroom for xdp.

But here we should use the macro XDP_PACKET_HEADROOM from bpf.h to
calculate the headroom for xdp. So here we remove the
VIRTIO_XDP_HEADROOM
  Parent Hashes: e6c29506b2ec94e634819c03445ffe9eb350caed
  Refs:  and use the XDP_PACKET_HEADROOM to replace it.

Signed-off-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
Acked-by: Jason Wang <jasowang@redhat.com>
Acked-by: Michael S. Tsirkin <mst@redhat.com>
Link: https://patch.msgid.link/20240708112537.96291-2-xuanzhuo@linux.alibaba.com
Signed-off-by: Jakub Kicinski <kuba@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replace VIRTIO_XDP_HEADROOM with XDP_PACKET_HEADROOM to calculate XDP headroom in virtio_net.', 'keywords': 'virtio_net,XDP headroom,macro replacement', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 22767eecd62f7bb5c83541c291297cf24326a997
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 22767eecd62f7bb5c83541c291297cf24326a997
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1720910658
  Commit Message:
    Merge branch 'mlx5-misc-2023-07-08-sf-max-eq'

Saeed Mahameed says:

====================
mlx5 misc 2023-07-08 (sf max eq)

Link: https://patchwork.kernel.org/project/netdevbpf/patch/20240708080025.1593555-2-tariqt@nvidia.com/
====================

Link: https://patch.msgid.link/20240712003310.355106-1-saeed@kernel.org
Signed-off-by: Jakub Kicinski <kuba@kernel.org>

  Parent Hashes: f7023b3d697c6a7dfe2d9c70e0d8c2c580ccbd76 4b66be76a6fbe16918a01439bb9023da154d7694
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "This commit merges the 'mlx5 misc 2023-07-08 sf max eq' branch into the main codebase.", 'keywords': 'mlx5, merge, kernel', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 23e89e8ee7be73e21200947885a6d3a109a2c58d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 23e89e8ee7be73e21200947885a6d3a109a2c58d
  Author Name: Kuniyuki Iwashima
  Author Email: kuniyu@amazon.com
  Commit Date: 1720909189
  Commit Message:
    tcp: Don't drop SYN+ACK for simultaneous connect().

RFC 9293 states that in the case of simultaneous connect()
  Parent Hashes: 42ffe242860c401c34c62aa369c2add341a6eece
  Refs:  the connection
gets established when SYN+ACK is received. [0]

      TCP Peer A                                       TCP Peer B

  1.  CLOSED                                           CLOSED
  2.  SYN-SENT     --> <SEQ=100><CTL=SYN>              ...
  3.  SYN-RECEIVED <-- <SEQ=300><CTL=SYN>              <-- SYN-SENT
  4.               ... <SEQ=100><CTL=SYN>              --> SYN-RECEIVED
  5.  SYN-RECEIVED --> <SEQ=100><ACK=301><CTL=SYN

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix handling of SYN+ACK packets for simultaneous TCP connections to comply with RFC 9293.', 'keywords': 'TCP,SYN+ACK,connect', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 26f453176a66bb36bf9e3a8abad808b144a94f6a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 26f453176a66bb36bf9e3a8abad808b144a94f6a
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1720848354
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-07-12

We've added 23 non-merge commits during the last 3 day(s) which contain
a total of 18 files changed
  Parent Hashes: e5abd12f3df13e92e2fb3c02fe825aa6c57f8306 e435b043d89a267bd6eb3d5650d2319805d7924a
  Refs:  234 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "This commit merges changes from the 'for-netdev' branch, including 23 non-merge commits affecting 18 files.", 'keywords': 'merge, netdev, bpf-next', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4f5d4a1ba7a1a23173e356186f3f8b7c27d2e948
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4f5d4a1ba7a1a23173e356186f3f8b7c27d2e948
  Author Name: Chen Ni
  Author Email: nichen@iscas.ac.cn
  Commit Date: 1720827592
  Commit Message:
    test_bpf: convert comma to semicolon

Replace commas between expression statements with semicolons.

Link: https://lkml.kernel.org/r/20240709034323.586185-1-nichen@iscas.ac.cn
Signed-off-by: Chen Ni <nichen@iscas.ac.cn>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Eduard Zingerman <eddyz87@gmail.com>
Cc: Hao Luo <haoluo@google.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: KP Singh <kpsingh@kernel.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: Song Liu <song@kernel.org>
Cc: Stanislav Fomichev <sdf@fomichev.me>
Cc: Yonghong Song <yonghong.song@linux.dev>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

  Parent Hashes: 73db3abdca58c8a014ec4c88cf5ef925cbf63669
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Converted commas to semicolons in test_bpf expressions for correct syntax.', 'keywords': 'convert,comma,semicolon', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: acd4b2ecf3bb24a781aad7f703243fa00eb7efbb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: acd4b2ecf3bb24a781aad7f703243fa00eb7efbb
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1720824731
  Commit Message:
    fs/procfs: extract logic for getting VMA name constituents

Patch series "ioctl()-based API to query VMAs from /proc/<pid>/maps"
  Parent Hashes: 8d42e2a91dcf86b34461cd7f709797805afa9f43
  Refs:  v6.

Implement binary ioctl()-based interface to /proc/<pid>/maps file to allow
applications to query VMA information more efficiently than reading *all*
VMAs nonselectively through text-based interface of /proc/<pid>/maps file.

Patch #2 goes into a lot of details and background on some common patterns
of using /proc/<pid>/maps in the area of performance profiling and
subsequent symbolization of captured stack traces.  As mentioned in that
patch

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extract logic for acquiring VMA name elements in a patch for ioctl()-based API for querying VMAs through /proc/pid/maps.', 'keywords': 'ioctl,VMA,procfs', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: e435b043d89a267bd6eb3d5650d2319805d7924a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e435b043d89a267bd6eb3d5650d2319805d7924a
  Author Name: Tengda Wu
  Author Email: wutengda@huaweicloud.com
  Commit Date: 1720815261
  Commit Message:
    selftests/bpf: Test for null-pointer-deref bugfix in resolve_prog_type()

This test verifies that resolve_prog_type() works as expected when
`attach_prog_fd` is not passed in.

`prog->aux->dst_prog` in resolve_prog_type() is assigned by
`attach_prog_fd`
  Parent Hashes: f7866c35873377313ff94398f17d425b28b71de1
  Refs:  and would be NULL if `attach_prog_fd` is not provided.

Loading EXT prog with bpf_dynptr_from_skb() kfunc call in this way will
lead to null-pointer-deref.

Verify that the null-pointer-deref bug in resolve_prog_type() is fixed.

Signed-off-by: Tengda Wu <wutengda@huaweicloud.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240711145819.254178-3-wutengda@huaweicloud.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test case to verify fix for null-pointer dereference in resolve_prog_type for EXT progs.', 'keywords': 'null-pointer-deref, resolve_prog_type, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: f7866c35873377313ff94398f17d425b28b71de1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f7866c35873377313ff94398f17d425b28b71de1
  Author Name: Tengda Wu
  Author Email: wutengda@huaweicloud.com
  Commit Date: 1720815255
  Commit Message:
    bpf: Fix null pointer dereference in resolve_prog_type() for BPF_PROG_TYPE_EXT

When loading a EXT program without specifying `attr->attach_prog_fd`
  Parent Hashes: 517125f6749402e579f715519147145944f12ad9
  Refs: 
the `prog->aux->dst_prog` will be null. At this time

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a null pointer dereference in resolve_prog_type() for BPF_PROG_TYPE_EXT when attr->attach_prog_fd is not specified.', 'keywords': 'null pointer dereference', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 7a2fb5619cc1fb53cb8784154d5ef2bd99997436
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7a2fb5619cc1fb53cb8784154d5ef2bd99997436
  Author Name: Howard Chu
  Author Email: howardchu95@gmail.com
  Commit Date: 1720802942
  Commit Message:
    perf trace: Fix iteration of syscall ids in syscalltbl->entries

This is a bug found when implementing pretty-printing for the
landlock_add_rule system call
  Parent Hashes: 1553419c3c10cf386496e68b90b5d0ce966ac614
  Refs:  I decided to send this patch separately
because this is a serious bug that should be fixed fast.

I wrote a test program to do landlock_add_rule syscall in a loop

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix bug in iteration of syscall ids during landlock_add_rule syscall implementation.', 'keywords': 'bug, syscall, iteration', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 517125f6749402e579f715519147145944f12ad9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 517125f6749402e579f715519147145944f12ad9
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1720801070
  Commit Message:
    selftests/bpf: DENYLIST.aarch64: Skip fexit_sleep again

Revert commit 90dc946059b7 ("selftests/bpf: DENYLIST.aarch64: Remove
fexit_sleep") again. The fix in 19d3c179a377 ("bpf
  Parent Hashes: a1010fce1c0c2ce3b305aa6e8ff70e86f99e3226
  Refs:  arm64: Fix trampoline
for BPF_TRAMP_F_CALL_ORIG") does not address all of the issues and BPF
CI is still hanging and timing out:

   https://github.com/kernel-patches/bpf/actions/runs/9905842936/job/27366435436

   [...]
   #89/11   fexit_bpf2bpf/func_replace_global_func:OK
   #89/12   fexit_bpf2bpf/fentry_to_cgroup_bpf:OK
   #89/13   fexit_bpf2bpf/func_replace_progmap:OK
   #89      fexit_bpf2bpf:OK
   Error: The operation was canceled.

Thus more investigation work & fixing is needed before the test can be put
in place again.

Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Cc: Puranjay Mohan <puranjay@kernel.org>
Link: https://lore.kernel.org/bpf/20240705145009.32340-1-puranjay@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Revert a selftest change for bpf on aarch64 due to unresolved issues causing BPF CI failures.', 'keywords': 'DENYLIST aarch64 fexit_sleep', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: a1010fce1c0c2ce3b305aa6e8ff70e86f99e3226
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a1010fce1c0c2ce3b305aa6e8ff70e86f99e3226
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1720799657
  Commit Message:
    Merge branch 'use-overflow-h-helpers-to-check-for-overflows'

Shung-Hsi Yu says:

====================
Use overflow.h helpers to check for overflows

This patch set refactors kernel/bpf/verifier.c to use type-agnostic
  Parent Hashes: 2454075f8e2915cebbe52a1195631bc7efe2b7e1 deac5871eb0751454cb80b3ff6b69e42a6c1bab2
  Refs:  generic
overflow-check helpers defined in include/linux/overflow.h to check for addition
and subtraction overflow

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor eBPF verifier to use overflow.h helpers for checking arithmetic overflow.', 'keywords': 'overflow, refactor, helpers', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: deac5871eb0751454cb80b3ff6b69e42a6c1bab2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: deac5871eb0751454cb80b3ff6b69e42a6c1bab2
  Author Name: Shung-Hsi Yu
  Author Email: shung-hsi.yu@suse.com
  Commit Date: 1720799648
  Commit Message:
    bpf: use check_sub_overflow() to check for subtraction overflows

Similar to previous patch that drops signed_add*_overflows() and uses
(compiler) builtin-based check_add_overflow()
  Parent Hashes: 28a4411076b254c67842348e3b25c2fb41a94cad
  Refs:  do the same for
signed_sub*_overflows() and replace them with the generic
check_sub_overflow() to make future refactoring easier and have the
checks implemented more efficiently.

Unsigned overflow check for subtraction does not use helpers and are
simple enough already

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor subtraction overflow checks by replacing signed_sub*_overflows() with check_sub_overflow() for efficiency and easier future refactoring.', 'keywords': 'overflow, subtraction, refactoring', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 28a4411076b254c67842348e3b25c2fb41a94cad
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 28a4411076b254c67842348e3b25c2fb41a94cad
  Author Name: Shung-Hsi Yu
  Author Email: shung-hsi.yu@suse.com
  Commit Date: 1720799648
  Commit Message:
    bpf: use check_add_overflow() to check for addition overflows

signed_add*_overflows() was added back when there was no overflow-check
helper. With the introduction of such helpers in commit f0907827a8a91
("compiler.h: enable builtin overflow checkers and add fallback code")
  Parent Hashes: 4a04b4f0de59dd5c621e78f15803ee0b0544eeb8
  Refs:  we
can drop signed_add*_overflows() in kernel/bpf/verifier.c and use the
generic check_add_overflow() instead.

This will make future refactoring easier

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor to use check_add_overflow() for addition overflow checking in eBPF verifier.', 'keywords': 'overflow refactoring verifier', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4a04b4f0de59dd5c621e78f15803ee0b0544eeb8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4a04b4f0de59dd5c621e78f15803ee0b0544eeb8
  Author Name: Shung-Hsi Yu
  Author Email: shung-hsi.yu@suse.com
  Commit Date: 1720799647
  Commit Message:
    bpf: fix overflow check in adjust_jmp_off()

adjust_jmp_off() incorrectly used the insn->imm field for all overflow check
  Parent Hashes: 2454075f8e2915cebbe52a1195631bc7efe2b7e1
  Refs: 
which is incorrect as that should only be done or the BPF_JMP32 | BPF_JA case

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix incorrect overflow check in adjust_jmp_off() for BPF_JMP32 | BPF_JA case.', 'keywords': 'overflow, adjust_jmp_off, BPF_JMP32', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2454075f8e2915cebbe52a1195631bc7efe2b7e1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2454075f8e2915cebbe52a1195631bc7efe2b7e1
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1720796546
  Commit Message:
    bpf: Eliminate remaining "make W=1" warnings in kernel/bpf/btf.o

As reported by Mirsad [1] we still see format warnings in kernel/bpf/btf.o
at W=1 warning level:

  CC      kernel/bpf/btf.o
./kernel/bpf/btf.c: In function ‘btf_type_seq_show_flags’:
./kernel/bpf/btf.c:7553:21: warning: assignment left-hand side might be a candidate for a format attribute [-Wsuggest-attribute=format]
 7553 |         sseq.showfn = btf_seq_show;
      |                     ^
./kernel/bpf/btf.c: In function ‘btf_type_snprintf_show’:
./kernel/bpf/btf.c:7604:31: warning: assignment left-hand side might be a candidate for a format attribute [-Wsuggest-attribute=format]
 7604 |         ssnprintf.show.showfn = btf_snprintf_show;
      |                               ^

Combined with CONFIG_WERROR=y these can halt the build.

The fix (annotating the structure field with __printf())
suggested by Mirsad resolves these. Apologies I missed this last time.
No other W=1 warnings were observed in kernel/bpf after this fix.

[1] https://lore.kernel.org/bpf/92c9d047-f058-400c-9c7d-81d4dc1ef71b@gmail.com/

Fixes: b3470da314fd ("bpf: annotate BTF show functions with __printf")
Reported-by: Mirsad Todorovac <mtodorovac69@gmail.com>
Suggested-by: Mirsad Todorovac <mtodorovac69@gmail.com>
Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240712092859.1390960-1-alan.maguire@oracle.com

  Parent Hashes: b3470da314fd8018ee237e382000c4154a942420
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes remaining W=1 format warnings in kernel/bpf/btf.o by adding __printf annotation.', 'keywords': 'format warnings, __printf annotation, kernel bpf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b3470da314fd8018ee237e382000c4154a942420
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b3470da314fd8018ee237e382000c4154a942420
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1720732517
  Commit Message:
    bpf: annotate BTF show functions with __printf

-Werror=suggest-attribute=format warns about two functions
in kernel/bpf/btf.c [1]; add __printf() annotations to silence
these warnings since for CONFIG_WERROR=y they will trigger
build failures.

[1] https://lore.kernel.org/bpf/a8b20c72-6631-4404-9e1f-0410642d7d20@gmail.com/

Fixes: 31d0bc81637d ("bpf: Move to generic BTF show support
  Parent Hashes: 19d3c179a37730caf600a97fed3794feac2b197b
  Refs:  apply it to seq files/strings")
Reported-by: Mirsad Todorovac <mtodorovac69@gmail.com>
Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Tested-by: Mirsad Todorovac <mtodorovac69@yahoo.com>
Link: https://lore.kernel.org/r/20240711182321.963667-1-alan.maguire@oracle.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds __printf annotations to silence warning for BTF show functions to prevent build failures.', 'keywords': '__printf, annotations, warnings', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 51df8e0cbaefd432f7029dde94e6c7e4e5b19465
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 51df8e0cbaefd432f7029dde94e6c7e4e5b19465
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1720715389
  Commit Message:
    Merge tag 'net-6.10-rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 "Including fixes from bpf and netfilter.

  Current release - regressions:

   - core: fix rc7's __skb_datagram_iter() regression

  Current release - new code bugs:

   - eth: bnxt: fix crashes when reducing ring count with active RSS
     contexts

  Previous releases - regressions:

   - sched: fix UAF when resolving a clash

   - skmsg: skip zero length skb in sk_msg_recvmsg2

   - sunrpc: fix kernel free on connection failure in
     xs_tcp_setup_socket

   - tcp: avoid too many retransmit packets

   - tcp: fix incorrect undo caused by DSACK of TLP retransmit

   - udp: Set SOCK_RCU_FREE earlier in udp_lib_get_port().

   - eth: ks8851: fix deadlock with the SPI chip variant

   - eth: i40e: fix XDP program unloading while removing the driver

  Previous releases - always broken:

   - bpf:
       - fix too early release of tcx_entry
       - fail bpf_timer_cancel when callback is being cancelled
       - bpf: fix order of args in call to bpf_map_kvcalloc

   - netfilter: nf_tables: prefer nft_chain_validate

   - ppp: reject claimed-as-LCP but actually malformed packets

   - wireguard: avoid unaligned 64-bit memory accesses"

* tag 'net-6.10-rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (33 commits)
  net
  Parent Hashes: 83ab4b461eb7bdf90984eb56d4954dbe11e926d4 d7c199e77ef2fe259ad5b1beca5ddd6c951fcba2
  Refs:  sunrpc: Remap EPERM in case of connection failure in xs_tcp_setup_socket
  net/sched: Fix UAF when resolving a clash
  net: ks8851: Fix potential TX stall after interface reopen
  udp: Set SOCK_RCU_FREE earlier in udp_lib_get_port().
  netfilter: nf_tables: prefer nft_chain_validate
  netfilter: nfnetlink_queue: drop bogus WARN_ON
  ethtool: netlink: do not return SQI value if link is down
  ppp: reject claimed-as-LCP but actually malformed packets
  selftests/bpf: Add timer lockup selftest
  net: ethernet: mtk-star-emac: set mac_managed_pm when probing
  e1000e: fix force smbus during suspend flow
  tcp: avoid too many retransmit packets
  bpf: Defer work in bpf_timer_cancel_and_free
  bpf: Fail bpf_timer_cancel when callback is being cancelled
  bpf: fix order of args in call to bpf_map_kvcalloc
  net: ethernet: lantiq_etop: fix double free in detach
  i40e: Fix XDP program unloading while removing the driver
  net: fix rc7's __skb_datagram_iter()
  net: ks8851: Fix deadlock with the SPI chip variant
  octeontx2-af: Fix incorrect value output on error path in rvu_check_rsrc_availability()
  ...


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes related to bpf, netfilter, and other components for the 6.10-rc8 version.', 'keywords': 'networking, fixes, merge', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', 'tc/netfilter like programs', "It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 19d3c179a37730caf600a97fed3794feac2b197b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 19d3c179a37730caf600a97fed3794feac2b197b
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1720713390
  Commit Message:
    bpf
  Parent Hashes: 18a8a4c88fb4c261f72a29b769c9463362d9687a
  Refs:  arm64: Fix trampoline for BPF_TRAMP_F_CALL_ORIG

When BPF_TRAMP_F_CALL_ORIG is set

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix trampoline functionality for ARM64 architecture when BPF_TRAMP_F_CALL_ORIG is set.', 'keywords': 'trampoline, ARM64, BPF_TRAMP_F_CALL_ORIG', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: a819ff0cf9fa166881a3781d32909257e2033e86
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a819ff0cf9fa166881a3781d32909257e2033e86
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1720694313
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-07-11

The following pull-request contains BPF updates for your *net* tree.

We've added 4 non-merge commits during the last 2 day(s) which contain
a total of 4 files changed
  Parent Hashes: 626dfed5fa3bfb41e0dffd796032b555b69f9cde 50bd5a0c658d132507673c4d59347c025dd149ed
  Refs:  262 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merged BPF updates for net tree containing 4 non-merge commits with changes to 4 files.', 'keywords': 'BPF, updates, net', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 626dfed5fa3bfb41e0dffd796032b555b69f9cde
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 626dfed5fa3bfb41e0dffd796032b555b69f9cde
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1720693065
  Commit Message:
    net
  Parent Hashes: 26488172b0292bed837b95a006a3f3431d1898c3
  Refs:  sunrpc: Remap EPERM in case of connection failure in xs_tcp_setup_socket

When using a BPF program on kernel_connect()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remap EPERM error for tcp socket connection failure within sunrpc using a BPF program on kernel_connect.', 'keywords': 'Remap, EPERM, kernel_connect', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 5c0b485a8c6116516f33925b9ce5b6104a6eadfd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5c0b485a8c6116516f33925b9ce5b6104a6eadfd
  Author Name: Kuniyuki Iwashima
  Author Email: kuniyu@amazon.com
  Commit Date: 1720690107
  Commit Message:
    udp: Set SOCK_RCU_FREE earlier in udp_lib_get_port().

syzkaller triggered the warning [0] in udp_v4_early_demux().

In udp_v[46]_early_demux() and sk_lookup()
  Parent Hashes: c184cf94e73b04ff7048d045f5413899bc664788
  Refs:  we do not touch the refcount
of the looked-up sk and use sock_pfree() as skb->destructor

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit sets SOCK_RCU_FREE earlier in udp_lib_get_port to address a syzkaller-triggered warning.', 'keywords': 'udp, SOCK_RCU_FREE, syzkaller', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 50bd5a0c658d132507673c4d59347c025dd149ed
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 50bd5a0c658d132507673c4d59347c025dd149ed
  Author Name: Kumar Kartikeya Dwivedi
  Author Email: memxor@gmail.com
  Commit Date: 1720685911
  Commit Message:
    selftests/bpf: Add timer lockup selftest

Add a selftest that tries to trigger a situation where two timer callbacks
are attempting to cancel each other's timer. By running them continuously
  Parent Hashes: 0c237341d994adbafed2a0d372275de39efa4a98
  Refs: 
we hit a condition where both run in parallel and cancel each other.

Without the fix in the previous patch

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest to trigger timer lockup by running conflicting timer callbacks.', 'keywords': 'selftests,bpf,timer', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: fde318326daa48a4bb3ca8ee229bac4d14b5bc2a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fde318326daa48a4bb3ca8ee229bac4d14b5bc2a
  Author Name: Artem Savkov
  Author Email: asavkov@redhat.com
  Commit Date: 1720676421
  Commit Message:
    powerpc64/bpf: jit support for signed division and modulo

Add jit support for sign division and modulo. Tested using test_bpf
module.

Signed-off-by: Artem Savkov <asavkov@redhat.com>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20240517075650.248801-6-asavkov@redhat.com


  Parent Hashes: 597b1710982d10b8629697e4a548b30d0d93eeed
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add JIT support for signed division and modulo in powerpc64 architecture.', 'keywords': 'JIT,signed division,modulo', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 597b1710982d10b8629697e4a548b30d0d93eeed
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 597b1710982d10b8629697e4a548b30d0d93eeed
  Author Name: Artem Savkov
  Author Email: asavkov@redhat.com
  Commit Date: 1720676421
  Commit Message:
    powerpc64/bpf: jit support for sign extended mov

Add jit support for sign extended mov. Tested using test_bpf module.

Signed-off-by: Artem Savkov <asavkov@redhat.com>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20240517075650.248801-5-asavkov@redhat.com


  Parent Hashes: 717756c9c8ddad9f28389185bfb161d4d88e01a4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add JIT support for sign extended move on PowerPC64 architecture.', 'keywords': 'jit support,powerpc64,sign extended', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 717756c9c8ddad9f28389185bfb161d4d88e01a4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 717756c9c8ddad9f28389185bfb161d4d88e01a4
  Author Name: Artem Savkov
  Author Email: asavkov@redhat.com
  Commit Date: 1720676421
  Commit Message:
    powerpc64/bpf: jit support for sign extended load

Add jit support for sign extended load. Tested using test_bpf module.

Signed-off-by: Artem Savkov <asavkov@redhat.com>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20240517075650.248801-4-asavkov@redhat.com


  Parent Hashes: a71c0b09a14db72d59c48a8cda7a73032f4d418b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added JIT support for sign extended load on powerpc64 architecture.', 'keywords': 'JIT,powerpc64,sign-extended', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a71c0b09a14db72d59c48a8cda7a73032f4d418b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a71c0b09a14db72d59c48a8cda7a73032f4d418b
  Author Name: Artem Savkov
  Author Email: asavkov@redhat.com
  Commit Date: 1720676421
  Commit Message:
    powerpc64/bpf: jit support for unconditional byte swap

Add jit support for unconditional byte swap. Tested using BSWAP tests
from test_bpf module.

Signed-off-by: Artem Savkov <asavkov@redhat.com>
Reviewed-by: Hari Bathini <hbathini@linux.ibm.com>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20240517075650.248801-3-asavkov@redhat.com


  Parent Hashes: 3c086ce222cefcf16d412faa10d456161d076796
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add JIT support for unconditional byte swap on powerpc64 architecture.', 'keywords': 'JIT,support,byte swap', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3c086ce222cefcf16d412faa10d456161d076796
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3c086ce222cefcf16d412faa10d456161d076796
  Author Name: Artem Savkov
  Author Email: asavkov@redhat.com
  Commit Date: 1720676420
  Commit Message:
    powerpc64/bpf: jit support for 32bit offset jmp instruction

Add jit support for JMP32_JA instruction. Tested using test_bpf module.

Signed-off-by: Artem Savkov <asavkov@redhat.com>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20240517075650.248801-2-asavkov@redhat.com


  Parent Hashes: 20ce0c247b2500cb7060cb115274ba71abda2626
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added JIT support for 32-bit JMP32_JA instruction on powerpc64 architecture.', 'keywords': 'jit,powerpc64,instruction', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 0c237341d994adbafed2a0d372275de39efa4a98
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0c237341d994adbafed2a0d372275de39efa4a98
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1720653616
  Commit Message:
    Merge branch 'fixes-for-bpf-timer-lockup-and-uaf'

Kumar Kartikeya Dwivedi says:

====================
Fixes for BPF timer lockup and UAF

The following patches contain fixes for timer lockups and a
use-after-free scenario.

This set proposes to fix the following lockup situation for BPF timers.

CPU 1					CPU 2

bpf_timer_cb				bpf_timer_cb
  timer_cb1				  timer_cb2
    bpf_timer_cancel(timer_cb2)		    bpf_timer_cancel(timer_cb1)
      hrtimer_cancel			      hrtimer_cancel

In this case
  Parent Hashes: af253aef183a31ce62d2e39fc520b0ebfb562bb9 a6fcd19d7eac1335eb76bc16b6a66b7f574d1d69
  Refs:  both callbacks will continue waiting for each other to
finish synchronously

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes for timer lockups and use-after-free issues in BPF timers.', 'keywords': 'BPF,timer,lockup', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a6fcd19d7eac1335eb76bc16b6a66b7f574d1d69
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a6fcd19d7eac1335eb76bc16b6a66b7f574d1d69
  Author Name: Kumar Kartikeya Dwivedi
  Author Email: memxor@gmail.com
  Commit Date: 1720652384
  Commit Message:
    bpf: Defer work in bpf_timer_cancel_and_free

Currently
  Parent Hashes: d4523831f07a267a943f0dde844bf8ead7495f13
  Refs:  the same case as previous patch (two timer callbacks trying
to cancel each other) can be invoked through bpf_map_update_elem as
well

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit defers work in bpf_timer_cancel_and_free to handle timer callback conflicts through bpf_map_update_elem.', 'keywords': 'bpf_timer,defer,callback', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d4523831f07a267a943f0dde844bf8ead7495f13
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d4523831f07a267a943f0dde844bf8ead7495f13
  Author Name: Kumar Kartikeya Dwivedi
  Author Email: memxor@gmail.com
  Commit Date: 1720652384
  Commit Message:
    bpf: Fail bpf_timer_cancel when callback is being cancelled

Given a schedule:

timer1 cb			timer2 cb

bpf_timer_cancel(timer2);	bpf_timer_cancel(timer1);

Both bpf_timer_cancel calls would wait for the other callback to finish
executing
  Parent Hashes: af253aef183a31ce62d2e39fc520b0ebfb562bb9
  Refs:  introducing a lockup.

Add an atomic_t count named 'cancelling' in bpf_hrtimer. This keeps
track of all in-flight cancellation requests for a given BPF timer.
Whenever cancelling a BPF timer

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses a race condition in bpf_timer_cancel by introducing an atomic count for cancellation requests.', 'keywords': 'bpf_timer_cancel, atomic_t count, cancellation', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: af253aef183a31ce62d2e39fc520b0ebfb562bb9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: af253aef183a31ce62d2e39fc520b0ebfb562bb9
  Author Name: Mohammad Shehar Yaar Tausif
  Author Email: sheharyaar48@gmail.com
  Commit Date: 1720650679
  Commit Message:
    bpf: fix order of args in call to bpf_map_kvcalloc

The original function call passed size of smap->bucket before the number of
buckets which raises the error 'calloc-transposed-args' on compilation.

Vlastimil Babka added:

The order of parameters can be traced back all the way to 6ac99e8f23d4
("bpf: Introduce bpf sk local storage") accross several refactorings
  Parent Hashes: e1533b6319ab9c3a97dad314dd88b3783bc41b69
  Refs: 
and that's why the commit is used as a Fixes: tag.

In v6.10-rc1

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix incorrect argument order in bpf_map_kvcalloc call to resolve compilation error.', 'keywords': 'bpf, kvcalloc, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 18a8a4c88fb4c261f72a29b769c9463362d9687a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 18a8a4c88fb4c261f72a29b769c9463362d9687a
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1720640708
  Commit Message:
    Merge branch 'BPF selftests misc fixes'

Geliang Tang says:

====================
v2:
 - only check the first "link" (link_nl) in test_mixed_links().
 - Drop patch 2 in v1.

This patchset fixes a segfault and a bpf object leak in test_progs.

It is a resend patch 1 out of "skip ENOTSUPP BPF selftests" set as Eduard
suggested. Together with another fix for xdp_adjust_tail.
====================

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: ec5b8c76ab1c6d163762d60cfbedcd27e7527144 52b49ec1b2c78deb258596c3b231201445ef5380
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges fixes for BPF selftests including a segfault and a BPF object leak issue.', 'keywords': 'BPF selftests, segfault, object leak', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 52b49ec1b2c78deb258596c3b231201445ef5380
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 52b49ec1b2c78deb258596c3b231201445ef5380
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1720640570
  Commit Message:
    selftests/bpf: Close obj in error path in xdp_adjust_tail

If bpf_object__load() fails in test_xdp_adjust_frags_tail_grow()
  Parent Hashes: eef0532e900c20a6760da829e82dac3ee18688c5
  Refs:  "obj"
opened before this should be closed. So use "goto out" to close it instead
of using "return" here.

Fixes: 110221081aac ("bpf: selftests: update xdp_adjust_tail selftest to include xdp frags")
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/f282a1ed2d0e3fb38cceefec8e81cabb69cab260.1720615848.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes error handling in xdp_adjust_tail selftest by ensuring proper closure of object in error path.', 'keywords': 'selftests, xdp_adjust_tail, error', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: eef0532e900c20a6760da829e82dac3ee18688c5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: eef0532e900c20a6760da829e82dac3ee18688c5
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1720640118
  Commit Message:
    selftests/bpf: Null checks for links in bpf_tcp_ca

Run bpf_tcp_ca selftests (./test_progs -t bpf_tcp_ca) on a Loongarch
platform
  Parent Hashes: ec5b8c76ab1c6d163762d60cfbedcd27e7527144
  Refs:  some "Segmentation fault" errors occur:

'''
 test_dctcp:PASS:bpf_dctcp__open_and_load 0 nsec
 test_dctcp:FAIL:bpf_map__attach_struct_ops unexpected error: -524
 #29/1    bpf_tcp_ca/dctcp:FAIL
 test_cubic:PASS:bpf_cubic__open_and_load 0 nsec
 test_cubic:FAIL:bpf_map__attach_struct_ops unexpected error: -524
 #29/2    bpf_tcp_ca/cubic:FAIL
 test_dctcp_fallback:PASS:dctcp_skel 0 nsec
 test_dctcp_fallback:PASS:bpf_dctcp__load 0 nsec
 test_dctcp_fallback:FAIL:dctcp link unexpected error: -524
 #29/4    bpf_tcp_ca/dctcp_fallback:FAIL
 test_write_sk_pacing:PASS:open_and_load 0 nsec
 test_write_sk_pacing:FAIL:attach_struct_ops unexpected error: -524
 #29/6    bpf_tcp_ca/write_sk_pacing:FAIL
 test_update_ca:PASS:open 0 nsec
 test_update_ca:FAIL:attach_struct_ops unexpected error: -524
 settcpca:FAIL:setsockopt unexpected setsockopt: \
					actual -1 == expected -1
 (network_helpers.c:99: errno: No such file or directory) \
					Failed to call post_socket_cb
 start_test:FAIL:start_server_str unexpected start_server_str: \
					actual -1 == expected -1
 test_update_ca:FAIL:ca1_ca1_cnt unexpected ca1_ca1_cnt: \
					actual 0 <= expected 0
 #29/9    bpf_tcp_ca/update_ca:FAIL
 #29      bpf_tcp_ca:FAIL
 Caught signal #11!
 Stack trace:
 ./test_progs(crash_handler+0x28)[0x5555567ed91c]
 linux-vdso.so.1(__vdso_rt_sigreturn+0x0)[0x7ffffee408b0]
 ./test_progs(bpf_link__update_map+0x80)[0x555556824a78]
 ./test_progs(+0x94d68)[0x5555564c4d68]
 ./test_progs(test_bpf_tcp_ca+0xe8)[0x5555564c6a88]
 ./test_progs(+0x3bde54)[0x5555567ede54]
 ./test_progs(main+0x61c)[0x5555567efd54]
 /usr/lib64/libc.so.6(+0x22208)[0x7ffff2aaa208]
 /usr/lib64/libc.so.6(__libc_start_main+0xac)[0x7ffff2aaa30c]
 ./test_progs(_start+0x48)[0x55555646bca8]
 Segmentation fault
'''

This is because BPF trampoline is not implemented on Loongarch yet

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add null checks for links in bpf_tcp_ca selftests to address segmentation faults on Loongarch platform.', 'keywords': 'null checks, segmentation fault, bpf_tcp_ca', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9004054b1629d481fedea2d92b880f79fc6fa81b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9004054b1629d481fedea2d92b880f79fc6fa81b
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1720637782
  Commit Message:
    selftests/bpf: Use connect_fd_to_fd in sk_lookup

This patch uses public helper connect_fd_to_fd() exported in
network_helpers.h instead of using getsockname() + connect() in
run_lookup_prog() in prog_tests/sk_lookup.c. This can simplify
the code.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/7077c277cde5a1864cdc244727162fb75c8bb9c5.1720515893.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: d9810c43f660fd502c5003244a5e9c181aa7df99
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Simplify sk_lookup test code by using connect_fd_to_fd helper.', 'keywords': 'selftests,bpf,simplify', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: d9810c43f660fd502c5003244a5e9c181aa7df99
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d9810c43f660fd502c5003244a5e9c181aa7df99
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1720637782
  Commit Message:
    selftests/bpf: Use start_server_addr in sk_lookup

This patch uses public helper start_server_addr() in udp_recv_send()
in prog_tests/sk_lookup.c to simplify the code.

And use ASSERT_OK_FD() to check fd returned by start_server_addr().

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/f11cabfef4a2170ecb66a1e8e2e72116d8f621b3.1720515893.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 14fc6fcd35e7dde6d1de062b6711476b3050b22e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Simplify sk_lookup test using start_server_addr helper in udp_recv_send function.', 'keywords': 'selftests,bpf,start_server_addr', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 14fc6fcd35e7dde6d1de062b6711476b3050b22e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 14fc6fcd35e7dde6d1de062b6711476b3050b22e
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1720637782
  Commit Message:
    selftests/bpf: Use start_server_str in sk_lookup

This patch uses public helper start_server_str() to simplify make_server()
in prog_tests/sk_lookup.c.

Add a callback setsockopts() to do all sockopts
  Parent Hashes: adae187ebedcd95d02f045bc37dfecfd5b29434b
  Refs:  set it to post_socket_cb
pointer of struct network_helper_opts. And add a new struct cb_opts to save
the data needed to pass to the callback. Then pass this network_helper_opts
to start_server_str().

Also use ASSERT_OK_FD() to check fd returned by start_server_str().

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/5981539f5591d2c4998c962ef2bf45f34c940548.1720515893.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Simplified sk_lookup test by using start_server_str and added a callback for setsockopts.', 'keywords': 'sk_lookup,selftests,callback', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs', 'socket like programs', 'tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: adae187ebedcd95d02f045bc37dfecfd5b29434b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: adae187ebedcd95d02f045bc37dfecfd5b29434b
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1720637782
  Commit Message:
    selftests/bpf: Close fd in error path in drop_on_reuseport

In the error path when update_lookup_map() fails in drop_on_reuseport in
prog_tests/sk_lookup.c
  Parent Hashes: 7046345d48adcc3f519e7b6192184f6049908bdb
  Refs:  "server1"

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit closes a file descriptor in the error path of drop_on_reuseport in selftests/bpf.', 'keywords': 'fd, error path, drop_on_reuseport', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7046345d48adcc3f519e7b6192184f6049908bdb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7046345d48adcc3f519e7b6192184f6049908bdb
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1720637782
  Commit Message:
    selftests/bpf: Add ASSERT_OK_FD macro

Add a new dedicated ASSERT macro ASSERT_OK_FD to test whether a socket
FD is valid or not. It can be used to replace macros ASSERT_GT(fd
  Parent Hashes: a3016a27cea8e6d10b200b9e19c19961c402d106
  Refs:  0

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add ASSERT_OK_FD macro to validate socket file descriptors in BPF selftests.', 'keywords': 'ASSERT_OK_FD,socket FD,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: a3016a27cea8e6d10b200b9e19c19961c402d106
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a3016a27cea8e6d10b200b9e19c19961c402d106
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1720637782
  Commit Message:
    selftests/bpf: Add backlog for network_helper_opts

Some callers expect __start_server() helper to pass their own "backlog"
value to listen() instead of the default of 1. So this patch adds struct
member "backlog" for network_helper_opts to allow callers to set "backlog"
value via start_server_str() helper.

listen(fd
  Parent Hashes: eeb23b54e447ea62b247d89681f0140abab00d7f
  Refs:  0 /* backlog */) can be used to enforce syncookie. Meaning
backlog 0 is a legit value.

Using 0 as a default and changing it to 1 here is fine. It makes the test
program easier to write for the common case. Enforcing syncookie mode by
using backlog 0 is a niche use case but it should at least have a way for
the caller to do that. Thus

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Add 'backlog' member to network_helper_opts to allow custom 'backlog' settings via start_server_str() helper in selftests.", 'keywords': 'selftests,backlog,network_helper_opts', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: eeb23b54e447ea62b247d89681f0140abab00d7f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: eeb23b54e447ea62b247d89681f0140abab00d7f
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1720636787
  Commit Message:
    selftests/bpf: fix compilation failure when CONFIG_NF_FLOW_TABLE=m

In many cases
  Parent Hashes: c13fda93aca118b8e5cd202e339046728ee7dddb
  Refs:  kernel netfilter functionality is built as modules.
If CONFIG_NF_FLOW_TABLE=m in particular

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed compilation issue for selftests when CONFIG_NF_FLOW_TABLE is modular.', 'keywords': 'compilation, selftests, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c13fda93aca118b8e5cd202e339046728ee7dddb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c13fda93aca118b8e5cd202e339046728ee7dddb
  Author Name: Sebastian Andrzej Siewior
  Author Email: bigeasy@linutronix.de
  Commit Date: 1720630732
  Commit Message:
    bpf: Remove tst_run from lwt_seg6local_prog_ops.

The syzbot reported that the lwt_seg6 related BPF ops can be invoked
via bpf_test_run() without without entering input_action_end_bpf()
first.

Martin KaFai Lau said that self test for BPF_PROG_TYPE_LWT_SEG6LOCAL
probably didn't work since it was introduced in commit 04d4b274e2a
("ipv6: sr: Add seg6local action End.BPF"). The reason is that the
per-CPU variable seg6_bpf_srh_states::srh is never assigned in the self
test case but each BPF function expects it.

Remove test_run for BPF_PROG_TYPE_LWT_SEG6LOCAL.

Suggested-by: Martin KaFai Lau <martin.lau@linux.dev>
Reported-by: syzbot+608a2acde8c5a101d07d@syzkaller.appspotmail.com
Fixes: d1542d4ae4df ("seg6: Use nested-BH locking for seg6_bpf_srh_states.")
Fixes: 004d4b274e2a ("ipv6: sr: Add seg6local action End.BPF")
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/r/20240710141631.FbmHcQaX@linutronix.de
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 605c96997d89c01c11bbddb4db820ede570581c7
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove unsupported test run from lwt_seg6local BPF ops due to missing initialization.', 'keywords': 'lwt_seg6local,BPF,remove', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 0dd0e9437f8e500a384f12ec16bb407a49676147
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0dd0e9437f8e500a384f12ec16bb407a49676147
  Author Name: Arnd Bergmann
  Author Email: arnd@arndb.de
  Commit Date: 1720614210
  Commit Message:
    um: don't generate asm/bpf_perf_event.h

If we start validating the existence of the asm-generic side of
generated headers
  Parent Hashes: ed8023ae9d79eeebf694751d5c290b72ef871dc0
  Refs:  this one causes a warning:

make[3]: *** No rule to make target 'arch/um/include/generated/asm/bpf_perf_event.h'

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Prevent generation of asm/bpf_perf_event.h to avoid build errors in User Mode Linux.', 'keywords': 'generate, bpf_perf_event, warning', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 605c96997d89c01c11bbddb4db820ede570581c7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 605c96997d89c01c11bbddb4db820ede570581c7
  Author Name: Matt Bobrowski
  Author Email: mattbobrowski@google.com
  Commit Date: 1720577507
  Commit Message:
    bpf: relax zero fixed offset constraint on KF_TRUSTED_ARGS/KF_RCU

Currently
  Parent Hashes: 02779af2419a91f847c22e488f8d13ec301cf833
  Refs:  BPF kfuncs which accept trusted pointer arguments
i.e. those flagged as KF_TRUSTED_ARGS

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit relaxes the zero fixed offset constraint on KF_TRUSTED_ARGS and KF_RCU in eBPF kfuncs.', 'keywords': 'KF_TRUSTED_ARGS,KF_RCU,eBPF', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 02779af2419a91f847c22e488f8d13ec301cf833
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 02779af2419a91f847c22e488f8d13ec301cf833
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1720577016
  Commit Message:
    Merge branch 'fix-libbpf-bpf-skeleton-forward-backward-compat'

Andrii Nakryiko says:

====================
Fix libbpf BPF skeleton forward/backward compat

Fix recently identified (but long standing) bug with handling BPF skeleton
forward and backward compatibility. On libbpf side
  Parent Hashes: 746d684ea579927015cde53cff8fc365caaf93b7 a459f4bb27f2e2730039c57786b82288742c8c74
  Refs:  even though BPF skeleton
was always designed to be forward and backwards compatible through recording
actual size of constrituents of BPF skeleton itself (map/prog/var skeleton
definitions)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a bug in libbpf for BPF skeleton forward and backward compatibility.', 'keywords': 'libbpf, BPF skeleton, compatibility', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a459f4bb27f2e2730039c57786b82288742c8c74
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a459f4bb27f2e2730039c57786b82288742c8c74
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1720577016
  Commit Message:
    libbpf: improve old BPF skeleton handling for map auto-attach

Improve how we handle old BPF skeletons when it comes to BPF map
auto-attachment. Emit one warn-level message per each struct_ops map
that could have been auto-attached
  Parent Hashes: 99fb9531886d8ffa0aa9a693089784c7338518a3
  Refs:  if user provided recent enough BPF
skeleton version. Don't spam log if there are no relevant struct_ops
maps

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improved handling of old BPF skeletons for map auto-attachment in libbpf.', 'keywords': 'libbpf, BPF skeleton, auto-attachment', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['tc/netfilter like programs', 'tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 99fb9531886d8ffa0aa9a693089784c7338518a3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 99fb9531886d8ffa0aa9a693089784c7338518a3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1720577004
  Commit Message:
    libbpf: fix BPF skeleton forward/backward compat handling

BPF skeleton was designed from day one to be extensible. Generated BPF
skeleton code specifies actual sizes of map/prog/variable skeletons for
that reason and libbpf is supposed to work with newer/older versions
correctly.

Unfortunately
  Parent Hashes: 06e71ad534881d2a09ced7509d2ab0daedac4c96
  Refs:  it was missed that we implicitly embed hard-coded most
up-to-date (according to libbpf's version of libbpf.h header used to
compile BPF skeleton header) sizes of those structs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix forward and backward compatibility handling in libbpf BPF skeleton structures.', 'keywords': 'libbpf, BPF skeleton, compatibility', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 06e71ad534881d2a09ced7509d2ab0daedac4c96
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 06e71ad534881d2a09ced7509d2ab0daedac4c96
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1720576985
  Commit Message:
    bpftool: improve skeleton backwards compat with old buggy libbpfs

Old versions of libbpf don't handle varying sizes of bpf_map_skeleton
struct correctly. As such
  Parent Hashes: 746d684ea579927015cde53cff8fc365caaf93b7
  Refs:  BPF skeleton generated by newest bpftool
might not be compatible with older libbpf (though only when libbpf is
used as a shared library)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhanced bpftool to improve compatibility with older, buggy versions of libbpf.', 'keywords': 'bpftool, compatibility, libbpf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 01fc5142ae6b06b61ed51a624f2732d6525d8ea3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 01fc5142ae6b06b61ed51a624f2732d6525d8ea3
  Author Name: Michal Kubiak
  Author Email: michal.kubiak@intel.com
  Commit Date: 1720574714
  Commit Message:
    i40e: Fix XDP program unloading while removing the driver

The commit 6533e558c650 ("i40e: Fix reset path while removing
the driver") introduced a new PF state "__I40E_IN_REMOVE" to block
modifying the XDP program while the driver is being removed.
Unfortunately
  Parent Hashes: f153831097b4435f963e385304cc0f1acba1c657
  Refs:  such a change is useful only if the ".ndo_bpf()"
callback was called out of the rmmod context because unloading the
existing XDP program is also a part of driver removing procedure.
In other words

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes issue with XDP program unloading during i40e driver removal process.', 'keywords': 'i40e,XDP,driver', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 7b769adc2612b495d94a4b4537ffaa725861d763
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7b769adc2612b495d94a4b4537ffaa725861d763
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1720537306
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-07-08

The following pull-request contains BPF updates for your *net-next* tree.

We've added 102 non-merge commits during the last 28 day(s) which contain
a total of 127 files changed
  Parent Hashes: 870a1dbcbc2ebd2114d5f18bb0bd88a7ff07540f 90dc946059b7d346f077b870a8d8aaf03b4d0772
  Refs:  4606 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merge multiple updates from the 'bpf-next' branch into the 'net-next' tree.", 'keywords': 'merge, bpf-next, updates', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 528269fe117f3b19461733a0fa408c55a5270aff
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 528269fe117f3b19461733a0fa408c55a5270aff
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1720534916
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-07-09

The following pull-request contains BPF updates for your *net* tree.

We've added 3 non-merge commits during the last 1 day(s) which contain
a total of 5 files changed
  Parent Hashes: 0913ec336a6c0c4a2b296bd9f74f8e41c4c83c8c f0c18025693707ec344a70b6887f7450bf4c826b
  Refs:  81 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges BPF updates into the netdev tree.', 'keywords': 'merge, BPF, netdev', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: f0c18025693707ec344a70b6887f7450bf4c826b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f0c18025693707ec344a70b6887f7450bf4c826b
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1720513490
  Commit Message:
    skmsg: Skip zero length skb in sk_msg_recvmsg

When running BPF selftests (./test_progs -t sockmap_basic) on a Loongarch
platform
  Parent Hashes: 5f1d18de79180deac2822c93e431bbe547f7d3ce
  Refs:  the following kernel panic occurs:

  [...]
  Oops[#1]:
  CPU: 22 PID: 2824 Comm: test_progs Tainted: G           OE  6.10.0-rc2+ #18
  Hardware name: LOONGSON Dabieshan/Loongson-TC542F0

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes a kernel panic by skipping zero-length skb in sk_msg_recvmsg on Loongarch platform.', 'keywords': 'skmsg, zero length, kernel panic', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 5f1d18de79180deac2822c93e431bbe547f7d3ce
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5f1d18de79180deac2822c93e431bbe547f7d3ce
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1720472851
  Commit Message:
    selftests/bpf: Extend tcx tests to cover late tcx_entry release

Add a test case which replaces an active ingress qdisc while keeping the
miniq in-tact during the transition period to the new clsact qdisc.

  # ./vmtest.sh -- ./test_progs -t tc_link
  [...]
  ./test_progs -t tc_link
  [    3.412871] bpf_testmod: loading out-of-tree module taints kernel.
  [    3.413343] bpf_testmod: module verification failed: signature and/or required key missing - tainting kernel
  #332     tc_links_after:OK
  #333     tc_links_append:OK
  #334     tc_links_basic:OK
  #335     tc_links_before:OK
  #336     tc_links_chain_classic:OK
  #337     tc_links_chain_mixed:OK
  #338     tc_links_dev_chain0:OK
  #339     tc_links_dev_cleanup:OK
  #340     tc_links_dev_mixed:OK
  #341     tc_links_ingress:OK
  #342     tc_links_invalid:OK
  #343     tc_links_prepend:OK
  #344     tc_links_replace:OK
  #345     tc_links_revision:OK
  Summary: 14/0 PASSED
  Parent Hashes: 1cb6f0bae50441f4b4b32a28315853b279c7404e
  Refs:  0 SKIPPED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extend selftests for tcx to ensure correct release during ingress qdisc replacement.', 'keywords': 'tcx tests, ingress qdisc, test case', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 1cb6f0bae50441f4b4b32a28315853b279c7404e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1cb6f0bae50441f4b4b32a28315853b279c7404e
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1720472851
  Commit Message:
    bpf: Fix too early release of tcx_entry

Pedro Pinto and later independently also Hyunwoo Kim and Wongi Lee reported
an issue that the tcx_entry can be released too early leading to a use
after free (UAF) when an active old-style ingress or clsact qdisc with a
shared tc block is later replaced by another ingress or clsact instance.

Essentially
  Parent Hashes: 83c36e7cfd74e41a5c145640dba581b38f12aa15
  Refs:  the sequence to trigger the UAF (one example) can be as follows:

  1. A network namespace is created
  2. An ingress qdisc is created. This allocates a tcx_entry

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes an issue with premature release of tcx_entry causing use-after-free in tc block handling.', 'keywords': 'tcx_entry,use-after-free,ingress', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 90dc946059b7d346f077b870a8d8aaf03b4d0772
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 90dc946059b7d346f077b870a8d8aaf03b4d0772
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1720470294
  Commit Message:
    selftests/bpf: DENYLIST.aarch64: Remove fexit_sleep

fexit_sleep test runs successfully now on the BPF CI so remove it
from the deny list. ftrace direct calls was blocking tracing programs
on arm64 but it has been resolved by now. For more details see also
discussion in [*].

Signed-off-by: Puranjay Mohan <puranjay@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240705145009.32340-1-puranjay@kernel.org [*]

  Parent Hashes: 06507c7536f747867d6d83d605af6bd753fec6d3
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove fexit_sleep from the deny list as it now runs successfully on arm64 after ftrace direct calls issue resolved.', 'keywords': 'fexit_sleep,denylist,arm64', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 06507c7536f747867d6d83d605af6bd753fec6d3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 06507c7536f747867d6d83d605af6bd753fec6d3
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1720458108
  Commit Message:
    Merge branch 'small-api-fix-for-bpf_wq'

Benjamin Tissoires says:

====================
Small API fix for bpf_wq

I realized this while having a map containing both a struct bpf_timer and
a struct bpf_wq: the third argument provided to the bpf_wq callback is
not the struct bpf_wq pointer itself
  Parent Hashes: cedc12c5b57f7efa6dbebfb2b140e8675f5a2616 16e86f2e8199cdb8789573c8784eb5c1cd478f13
  Refs:  but the pointer to the value in
the map.

Which means that the users need to double cast the provided "value" as
this is not a struct bpf_wq *.

This is a change of API

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix for bpf_wq API to correctly handle callback arguments.', 'keywords': 'API, bpf_wq, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 16e86f2e8199cdb8789573c8784eb5c1cd478f13
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 16e86f2e8199cdb8789573c8784eb5c1cd478f13
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1720458108
  Commit Message:
    selftests/bpf: amend for wrong bpf_wq_set_callback_impl signature

See the previous patch: the API was wrong
  Parent Hashes: f56f4d541eab1ae060a46b56dd6ec9130d6e3a98
  Refs:  we were provided the pointer
to the value

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix the selftests for bpf by amending the incorrect bpf_wq_set_callback_impl signature.', 'keywords': 'selftests, signature, amend', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f56f4d541eab1ae060a46b56dd6ec9130d6e3a98
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f56f4d541eab1ae060a46b56dd6ec9130d6e3a98
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1720458108
  Commit Message:
    bpf: helpers: fix bpf_wq_set_callback_impl signature

I realized this while having a map containing both a struct bpf_timer and
a struct bpf_wq: the third argument provided to the bpf_wq callback is
not the struct bpf_wq pointer itself
  Parent Hashes: cedc12c5b57f7efa6dbebfb2b140e8675f5a2616
  Refs:  but the pointer to the value in
the map.

Which means that the users need to double cast the provided "value" as
this is not a struct bpf_wq *.

This is a change of API

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes the bpf_wq_set_callback_impl signature to correct argument handling for bpf_wq callbacks.', 'keywords': 'bpf_wq, callback, API change', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cedc12c5b57f7efa6dbebfb2b140e8675f5a2616
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cedc12c5b57f7efa6dbebfb2b140e8675f5a2616
  Author Name: Andreas Ziegler
  Author Email: ziegler.andreas@siemens.com
  Commit Date: 1720455187
  Commit Message:
    libbpf: Add NULL checks to bpf_object__{prev_map
  Parent Hashes: 02480fe8a6a6d44c16900b1d3a2a66d140d0a005
  Refs: next_map}

In the current state

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add NULL checks to bpf_object__prev_map and bpf_object__next_map functions in libbpf.', 'keywords': 'NULL checks, libbpf, functions', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 02480fe8a6a6d44c16900b1d3a2a66d140d0a005
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 02480fe8a6a6d44c16900b1d3a2a66d140d0a005
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1720449575
  Commit Message:
    selftests/bpf: Remove exceptions tests from DENYLIST.s390x

Now that the s390x JIT supports exceptions
  Parent Hashes: fa7bd4b000a7ae32eb6fc049125943561e5b46f3
  Refs:  remove the respective tests
from the denylist.

Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240703005047.40915-4-iii@linux.ibm.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove exception tests from s390x DENYLIST due to improved JIT support.', 'keywords': 'exceptions,JIT,DENYLIST', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fa7bd4b000a7ae32eb6fc049125943561e5b46f3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fa7bd4b000a7ae32eb6fc049125943561e5b46f3
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1720449575
  Commit Message:
    s390/bpf: Implement exceptions

Implement the following three pieces required from the JIT:

- A "top-level" BPF prog (exception_boundary) must save all
  non-volatile registers
  Parent Hashes: 7ba4f43e16de351fe9821de80e15d88c884b2967
  Refs:  and not only the ones that it clobbers.
- A "handler" BPF prog (exception_cb) must switch stack to that of
  exception_boundary

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit implements exceptions for s390 architecture in the BPF JIT compiler.', 'keywords': 's390, exceptions, JIT', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7ba4f43e16de351fe9821de80e15d88c884b2967
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7ba4f43e16de351fe9821de80e15d88c884b2967
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1720449575
  Commit Message:
    s390/bpf: Change seen_reg to a mask

Using a mask instead of an array saves a small amount of memory and
allows marking multiple registers as seen with a simple "or". Another
positive side-effect is that it speeds up verification with jitterbug.

Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240703005047.40915-2-iii@linux.ibm.com

  Parent Hashes: bc239eb271e5f35fcade689c6782c962ef3704c8
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimization of register handling in s390 architecture by using a mask instead of an array.', 'keywords': 's390,bpf,mask', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bc239eb271e5f35fcade689c6782c962ef3704c8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bc239eb271e5f35fcade689c6782c962ef3704c8
  Author Name: Dan Carpenter
  Author Email: dan.carpenter@linaro.org
  Commit Date: 1720448599
  Commit Message:
    bpf: Remove unnecessary loop in task_file_seq_get_next()

After commit 0ede61d8589c ("file: convert to SLAB_TYPESAFE_BY_RCU") this
loop always iterates exactly one time.  Delete the for statement and pull
the code in a tab.

Signed-off-by: Dan Carpenter <dan.carpenter@linaro.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Christian Brauner <brauner@kernel.org>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/ZoWJF51D4zWb6f5t@stanley.mountain

  Parent Hashes: a5912c37faf723c0812a6a2c9dd18ffbd34a233b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes an unnecessary loop in the task_file_seq_get_next function after a previous update.', 'keywords': 'remove, unnecessary, loop', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: a5912c37faf723c0812a6a2c9dd18ffbd34a233b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a5912c37faf723c0812a6a2c9dd18ffbd34a233b
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1720446248
  Commit Message:
    riscv
  Parent Hashes: fd8db07705c55a995c42b1e71afc42faad675b0b
  Refs:  bpf: Optimize stack usage of trampoline

When BPF_TRAMP_F_CALL_ORIG is not set

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize stack usage of BPF trampoline when BPF_TRAMP_F_CALL_ORIG is not set.', 'keywords': 'optimize, stack, trampoline', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fecef4cd42c689a200bdd39e6fffa71475904bc1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fecef4cd42c689a200bdd39e6fffa71475904bc1
  Author Name: Sebastian Andrzej Siewior
  Author Email: bigeasy@linutronix.de
  Commit Date: 1720223977
  Commit Message:
    tun: Assign missing bpf_net_context.

During the introduction of struct bpf_net_context handling for
XDP-redirect
  Parent Hashes: 3b2aef99221d395ce37efa426d7b50e7dcd621d6
  Refs:  the tun driver has been missed.
Jakub also pointed out that there is another call chain to
do_xdp_generic() originating from netif_receive_skb() and drivers may
use it outside from the NAPI context.

Set the bpf_net_context before invoking BPF XDP program within the TUN
driver. Set the bpf_net_context also in do_xdp_generic() if a xdp
program is available.

Reported-by: syzbot+0b5c75599f1d872bea6f@syzkaller.appspotmail.com
Reported-by: syzbot+5ae46b237278e2369cac@syzkaller.appspotmail.com
Reported-by: syzbot+c1e04a422bbc0f0f2921@syzkaller.appspotmail.com
Fixes: 401cb7dae8130 ("net: Reference bpf_redirect_info via task_struct on PREEMPT_RT.")
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Link: https://patch.msgid.link/20240704144815.j8xQda5r@linutronix.de
Signed-off-by: Jakub Kicinski <kuba@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Assign missing bpf_net_context to the TUN driver for handling XDP-redirect use cases.', 'keywords': 'bpf_net_context,XDP-redirect,TUN driver', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: a67a1deb11d9a692366100d9ba9fb3aeb0c7707b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a67a1deb11d9a692366100d9ba9fb3aeb0c7707b
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1720181311
  Commit Message:
    HID: samples: fix the 2 struct_ops definitions

Turns out that this is not compiling anymore because the hid_bpf_ops
struct_ops definition had a change during the revisions.

Fixes: e342d6f6f7d8 ("HID: samples: convert the 2 HID-BPF samples into struct_ops")
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: 3a904d2c771115154380caaae7ffaaf0095fb88f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix the struct_ops definitions in HID samples for compilation issues.', 'keywords': 'HID,struct_ops,fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 3a904d2c771115154380caaae7ffaaf0095fb88f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3a904d2c771115154380caaae7ffaaf0095fb88f
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1720181226
  Commit Message:
    HID: fix for amples in for-6.11/bpf

To: Jiri Kosina <jikos@kernel.org>
Cc: linux-input@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

---
Changes in v2:
- EDITME: describe what is new in this series revision.
- EDITME: use bulletpoints and terse descriptions.
- Link to v1: https://lore.kernel.org/r/20240705-for-6-11-bpf-v1-1-1960e3165c9e@kernel.org



--- b4-submit-tracking ---
# This section is used internally by b4 prep for tracking purposes.
{
  "series": {
    "revision": 2
  Parent Hashes: f58e7f404da44c94e46bfe657b8707195aebd25a
  Refs: 
    "change-id": "20240705-for-6-11-bpf-a349efc08df8"

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes HID driver issues in the BPF subsystem for version 6.11.', 'keywords': 'HID, fix, BPF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 3577dbb192419e37b6f54aced8777b6c81cd03d4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3577dbb192419e37b6f54aced8777b6c81cd03d4
  Author Name: Mateusz Guzik
  Author Email: mjguzik@gmail.com
  Commit Date: 1720060198
  Commit Message:
    mm: batch unlink_file_vma calls in free_pgd_range

Execs of dynamically linked binaries at 20-ish cores are bottlenecked on
the i_mmap_rwsem semaphore
  Parent Hashes: 1a3798dececa8cb26b9eee26840195ccc1a4d6c1
  Refs:  while the biggest singular contributor is
free_pgd_range inducing the lock acquire back-to-back for all consecutive
mappings of a given file.

Tracing the count of said acquires while building the kernel shows:
[1

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize free_pgd_range to batch unlink_file_vma calls to reduce semaphore bottlenecks in execs of dynamically linked binaries.', 'keywords': 'batch, semaphore, optimization', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: fd8db07705c55a995c42b1e71afc42faad675b0b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fd8db07705c55a995c42b1e71afc42faad675b0b
  Author Name: Florian Lehner
  Author Email: dev@der-flo.net
  Commit Date: 1719939925
  Commit Message:
    bpf
  Parent Hashes: 69716e44a74af464060faa68fa2b54f3af03c16a
  Refs:  devmap: Add .map_alloc_check

Use the .map_allock_check callback to perform allocation checks before
allocating memory for the devmap.

Signed-off-by: Florian Lehner <dev@der-flo.net>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240615101158.57889-1-dev@der-flo.net


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add .map_alloc_check callback for allocation checks in devmap memory allocation.', 'keywords': 'map_alloc_check, allocation, devmap', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 69716e44a74af464060faa68fa2b54f3af03c16a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 69716e44a74af464060faa68fa2b54f3af03c16a
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1719937912
  Commit Message:
    selftests/bpf: Remove arena tests from DENYLIST.s390x

Now that the s390x JIT supports arena
  Parent Hashes: 490c99d4ed99bb01dac8bf2896e27941403549c4
  Refs:  remove the respective tests from
the denylist.

Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240701234304.14336-13-iii@linux.ibm.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed arena tests from the s390x BPF selftests denylist due to JIT support.', 'keywords': 's390x,JIT,denylist', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 490c99d4ed99bb01dac8bf2896e27941403549c4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 490c99d4ed99bb01dac8bf2896e27941403549c4
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1719937912
  Commit Message:
    selftests/bpf: Add UAF tests for arena atomics

Check that __sync_*() functions don't cause kernel panics when handling
freed arena pages.

x86_64 does not support some arena atomics yet
  Parent Hashes: b6349fd3448cf349af327f90585a712d60265429
  Refs:  and aarch64 may or may
not support them

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce UAF tests for arena atomics in BPF selftests to ensure stability against kernel panics.', 'keywords': 'UAF tests, arena atomics, kernel panics', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b6349fd3448cf349af327f90585a712d60265429
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b6349fd3448cf349af327f90585a712d60265429
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1719937912
  Commit Message:
    selftests/bpf: Introduce __arena_global

While clang uses __attribute__((address_space(1))) both for defining
arena pointers and arena globals
  Parent Hashes: 2f9469484a3b52c66b799de73bd1ca75617bc8d5
  Refs:  GCC requires different syntax for
both. While __arena covers the first use case

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit introduces __arena_global for selftests in BPF to distinguish arena pointers and globals in GCC and clang.', 'keywords': '__arena_global,selftests,BPF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2f9469484a3b52c66b799de73bd1ca75617bc8d5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2f9469484a3b52c66b799de73bd1ca75617bc8d5
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1719937912
  Commit Message:
    s390/bpf: Support arena atomics

s390x supports most BPF atomics using single instructions
  Parent Hashes: 1e36027e39b8b3fa567ce3d743dbda5954dc0a56
  Refs:  which
makes implementing arena support a matter of adding arena address to
the base register (unfortunately atomics do not support index
registers)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds support for arena atomics in s390x BPF utilizing single instructions.', 'keywords': 'arena, atomics, s390x', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 1e36027e39b8b3fa567ce3d743dbda5954dc0a56
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1e36027e39b8b3fa567ce3d743dbda5954dc0a56
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1719937912
  Commit Message:
    s390/bpf: Enable arena

Now that BPF_PROBE_MEM32 and address space cast instructions are
implemented
  Parent Hashes: 555469cc9be4a7f52c0ad07a4a237d63e8c5c5f4
  Refs:  tell the verifier that the JIT supports arena.

Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240701234304.14336-9-iii@linux.ibm.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enabled arena support in s390 BPF by implementing BPF_PROBE_MEM32 and address space cast instructions.', 'keywords': 's390 BPF, arena, JIT', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 555469cc9be4a7f52c0ad07a4a237d63e8c5c5f4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 555469cc9be4a7f52c0ad07a4a237d63e8c5c5f4
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1719937912
  Commit Message:
    s390/bpf: Support address space cast instruction

The new address cast instruction translates arena offsets to userspace
addresses. NULL pointers must not be translated.

The common code sets up the mappings in such a way that it's enough to
replace the higher 32 bits to achieve the desired result. s390x has
just an instruction for this: INSERT IMMEDIATE.

Implement the sequence using 3 instruction: LOAD AND TEST
  Parent Hashes: 4d3a453b434fd2f389960890ae6d767f8d50c403
  Refs:  BRANCH
RELATIVE ON CONDITION and INSERT IMMEDIATE.

Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240701234304.14336-8-iii@linux.ibm.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Support for address space cast instruction added on s390 for eBPF.', 'keywords': 's390,bpf,address', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4d3a453b434fd2f389960890ae6d767f8d50c403
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4d3a453b434fd2f389960890ae6d767f8d50c403
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1719937912
  Commit Message:
    s390/bpf: Support BPF_PROBE_MEM32

BPF_PROBE_MEM32 is a new mode for LDX
  Parent Hashes: a1c04bcc41f9638460a9c68f894fb770596380de
  Refs:  ST and STX instructions. The JIT
is supposed to add the start address of the kernel arena mapping to the
%dst register

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for BPF_PROBE_MEM32 mode in s390 BPF JIT', 'keywords': 'BPF_PROBE_MEM32,s390,JIT', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a1c04bcc41f9638460a9c68f894fb770596380de
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a1c04bcc41f9638460a9c68f894fb770596380de
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1719937912
  Commit Message:
    s390/bpf: Land on the next JITed instruction after exception

Currently we land on the nop
  Parent Hashes: 89b933a2013794d8272d432591a2a7a9c41f6351
  Refs:  which is unnecessary: we can just as well
begin executing the next instruction. Furthermore

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize s390 JIT execution to continue from the next instruction after an exception.', 'keywords': 's390, JIT, exception', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 89b933a2013794d8272d432591a2a7a9c41f6351
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 89b933a2013794d8272d432591a2a7a9c41f6351
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1719937912
  Commit Message:
    s390/bpf: Introduce pre- and post- probe functions

Currently probe insns are handled by two "if" statements at the
beginning and at the end of bpf_jit_insn(). The first one needs to be
in sync with the huge insn->code statement that follows it
  Parent Hashes: 9a048587269174f218e8d8d737ebfa628589358f
  Refs:  which was
not a problem so far

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit introduces pre- and post-probe functions to improve BPF JIT instruction handling on s390 architecture.', 'keywords': 'probe, JIT, instruction', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9a048587269174f218e8d8d737ebfa628589358f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9a048587269174f218e8d8d737ebfa628589358f
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1719937911
  Commit Message:
    s390/bpf: Get rid of get_probe_mem_regno()

Commit 7fc8c362e782 ("s390/bpf: encode register within extable entry")
introduced explicit passing of the number of the register to be cleared
to ex_handler_bpf()
  Parent Hashes: d0736d8c491ddc7d31c7f839d281c907366e2562
  Refs:  which replaced deducing it from the respective
native load instruction using get_probe_mem_regno().

Replace the second and last usage in the same manner

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove get_probe_mem_regno() function and update register encoding in s390/bpf architecture.', 'keywords': 's390,bpf,register', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: d0736d8c491ddc7d31c7f839d281c907366e2562
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d0736d8c491ddc7d31c7f839d281c907366e2562
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1719937911
  Commit Message:
    s390/bpf: Factor out emitting probe nops

The upcoming arena support for the loop-based BPF_XCHG implementation
requires emitting nop and extable entries separately. Move nop handling
into a separate function
  Parent Hashes: df34ec9db6f521118895f22795da49f2ec01f8cf
  Refs:  and keep track of the nop offset.

Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240701234304.14336-3-iii@linux.ibm.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor s390 BPF code by moving NOP handling into a separate function for future BPF_XCHG changes.', 'keywords': 's390, nop, refactoring', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: df34ec9db6f521118895f22795da49f2ec01f8cf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: df34ec9db6f521118895f22795da49f2ec01f8cf
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1719937895
  Commit Message:
    bpf: Fix atomic probe zero-extension

Zero-extending results of atomic probe operations fails with:

    verifier bug. zext_dst is set
  Parent Hashes: da5f8fd1f0d393d5eaaba9ad8c22d1c26bb2bf9b
  Refs:  but no reg is defined

The problem is that insn_def_regno() handles BPF_ATOMICs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes zero-extension issues in atomic probe operations within the eBPF verifier.', 'keywords': 'atomic,probe,fails', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: da5f8fd1f0d393d5eaaba9ad8c22d1c26bb2bf9b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: da5f8fd1f0d393d5eaaba9ad8c22d1c26bb2bf9b
  Author Name: Tao Chen
  Author Email: chen.dylane@gmail.com
  Commit Date: 1719937232
  Commit Message:
    bpftool: Mount bpffs when pinmaps path not under the bpffs

As Quentin said [0]
  Parent Hashes: 9474f72cd6573ee788013147e3590be4a28e085a
  Refs:  BPF map pinning will fail if the pinmaps path is not
under the bpffs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Mount bpffs in bpftool when pinmaps path is not under bpffs to prevent map pinning failures.', 'keywords': 'bpftool, bpffs, pinmaps', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9474f72cd6573ee788013147e3590be4a28e085a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9474f72cd6573ee788013147e3590be4a28e085a
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1719928922
  Commit Message:
    selftests/bpf: Add testcase where 7th argment is struct

Add testcase where 7th argument is struct for architectures with 8 argument
registers
  Parent Hashes: 5d52ad36683af64f04da295d67fb943f94658929
  Refs:  and increase the complexity of the struct.

Signed-off-by: Pu Lehui <pulehui@huawei.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Björn Töpel <bjorn@rivosinc.com>
Acked-by: Björn Töpel <bjorn@kernel.org>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240702121944.1091530-4-pulehui@huaweicloud.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test case for architectures with 8 argument registers where the 7th argument is a struct.', 'keywords': 'testcase, struct, architectures', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5d52ad36683af64f04da295d67fb943f94658929
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5d52ad36683af64f04da295d67fb943f94658929
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1719928913
  Commit Message:
    selftests/bpf: Factor out many args tests from tracing_struct

Factor out many args tests from tracing_struct and rename some function names
to make more sense. Meanwhile
  Parent Hashes: 6801b0aef79db475591c3146a701ea373e4663b7
  Refs:  remove unnecessary skeleton detach operation
as it will be covered by skeleton destroy operation.

Signed-off-by: Pu Lehui <pulehui@huawei.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240702121944.1091530-3-pulehui@huaweicloud.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors many argument tests from tracing_struct and renames functions for clarity.', 'keywords': 'refactor, tracing_struct, selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 6801b0aef79db475591c3146a701ea373e4663b7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6801b0aef79db475591c3146a701ea373e4663b7
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1719928890
  Commit Message:
    riscv
  Parent Hashes: e4a195e2b95e4602c667ed19a20f71218df138c2
  Refs:  bpf: Add 12-argument support for RV64 bpf trampoline

This patch adds 12 function arguments support for riscv64 bpf trampoline.
The current bpf trampoline supports <= sizeof(u64) bytes scalar arguments [0]
and <= 16 bytes struct arguments [1]. Therefore

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for 12 function arguments in RISC-V 64-bit BPF trampoline.', 'keywords': 'riscv64,bpf,trampoline', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2a01a8895015ad479df7cfb8f127501d1c8da7c9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2a01a8895015ad479df7cfb8f127501d1c8da7c9
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1719926820
  Commit Message:
    Merge branch 'net-bpf_net_context-cleanups'

Sebastian Andrzej Siewior says:

====================
net: bpf_net_context cleanups.

a small series with bpf_net_context cleanups/ improvements.
Jakub asked for #1 and #2 and while looking around I made #3.
====================

Link: https://patch.msgid.link/20240628103020.1766241-1-bigeasy@linutronix.de
Signed-off-by: Paolo Abeni <pabeni@redhat.com>

  Parent Hashes: e27d7168f0c8c024344e9541513aa71d921402a5 e3d69f585d651aba877e18866de7e8cfa2476caa
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit performs cleanups and improvements on the bpf_net_context subsystem.', 'keywords': 'bpf_net_context,cleanups,improvements', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e3d69f585d651aba877e18866de7e8cfa2476caa
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e3d69f585d651aba877e18866de7e8cfa2476caa
  Author Name: Sebastian Andrzej Siewior
  Author Email: bigeasy@linutronix.de
  Commit Date: 1719926817
  Commit Message:
    net: Move flush list retrieval to where it is used.

The bpf_net_ctx_get_.*_flush_list() are used at the top of the function.
This means the variable is always assigned even if unused. By moving the
function to where it is used
  Parent Hashes: d839a73179ae91c07f5f2f97ccb9c69b2b7c3306
  Refs:  it is possible to delay the initialisation
until it is unavoidable.
Not sure how much this gains in reality but by looking at bq_enqueue()
(in devmap.c) gcc pushes one register less to the stack. \o/.

 Move flush list retrieval to where it is used.

Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Acked-by: Jesper Dangaard Brouer <hawk@kernel.org>
Reviewed-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Paolo Abeni <pabeni@redhat.com>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Move flush list retrieval to improve code efficiency by delaying initialization until necessary.', 'keywords': 'flush list, efficiency, initialization', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: d839a73179ae91c07f5f2f97ccb9c69b2b7c3306
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d839a73179ae91c07f5f2f97ccb9c69b2b7c3306
  Author Name: Sebastian Andrzej Siewior
  Author Email: bigeasy@linutronix.de
  Commit Date: 1719926817
  Commit Message:
    net: Optimize xdp_do_flush() with bpf_net_context infos.

Every NIC driver utilizing XDP should invoke xdp_do_flush() after
processing all packages. With the introduction of the bpf_net_context
logic the flush lists (for dev
  Parent Hashes: 2896624be30b049601ec3ef9b08df184d0c70495
  Refs:  CPU-map and xsk) are lazy initialized
only if used. However xdp_do_flush() tries to flush all three of them so
all three lists are always initialized and the likely empty lists are
"iterated".
Without the usage of XDP but with CONFIG_DEBUG_NET the lists are also
initialized due to xdp_do_check_flushed().

Jakub suggest to utilize the hints in bpf_net_context and avoid invoking
the flush function. This will also avoiding initializing the lists which
are otherwise unused.

Introduce bpf_net_ctx_get_all_used_flush_lists() to return the
individual list if not-empty. Use the logic in xdp_do_flush() and
xdp_do_check_flushed(). Remove the not needed .*_check_flush().

Suggested-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Reviewed-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Paolo Abeni <pabeni@redhat.com>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize xdp_do_flush() using bpf_net_context to prevent unnecessary list initialization and improve performance.', 'keywords': 'xdp_do_flush bpf_net_context optimization', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 2896624be30b049601ec3ef9b08df184d0c70495
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2896624be30b049601ec3ef9b08df184d0c70495
  Author Name: Sebastian Andrzej Siewior
  Author Email: bigeasy@linutronix.de
  Commit Date: 1719926817
  Commit Message:
    net: Remove task_struct::bpf_net_context init on fork.

There is no clone() invocation within a bpf_net_ctx_…() block. Therefore
the task_struct::bpf_net_context has always to be NULL and an explicit
initialisation is not required.

Remove the NULL assignment in the clone() path.

Suggested-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Reviewed-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Paolo Abeni <pabeni@redhat.com>

  Parent Hashes: e27d7168f0c8c024344e9541513aa71d921402a5
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove unnecessary NULL initialization of bpf_net_context on task_struct fork.', 'keywords': 'bpf_net_context, task_struct, NULL', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: e4a195e2b95e4602c667ed19a20f71218df138c2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e4a195e2b95e4602c667ed19a20f71218df138c2
  Author Name: Tushar Vyavahare
  Author Email: tushar.vyavahare@intel.com
  Commit Date: 1719925950
  Commit Message:
    selftests/xsk: Enhance batch size support with dynamic configurations

Introduce dynamic adjustment capabilities for fill_size and comp_size
parameters to support larger batch sizes beyond the previous 2K limit.

Update HW_SW_MAX_RING_SIZE test cases to evaluate AF_XDP's robustness by
pushing hardware and software ring sizes to their limits. This test
ensures AF_XDP's reliability amidst potential producer/consumer throttling
due to maximum ring utilization.

Signed-off-by: Tushar Vyavahare <tushar.vyavahare@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Link: https://lore.kernel.org/bpf/20240702055916.48071-3-tushar.vyavahare@intel.com

  Parent Hashes: d80d61ab0609f7f7168d59ec82ee5f055a4b6be7
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance selftests for AF_XDP by adding dynamic configuration support for larger batch sizes in fill_size and comp_size parameters.', 'keywords': 'AF_XDP, dynamic configuration, batch sizes', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: d80d61ab0609f7f7168d59ec82ee5f055a4b6be7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d80d61ab0609f7f7168d59ec82ee5f055a4b6be7
  Author Name: Tushar Vyavahare
  Author Email: tushar.vyavahare@intel.com
  Commit Date: 1719925950
  Commit Message:
    selftests/xsk: Ensure traffic validation proceeds after ring size adjustment in xskxceiver

Previously
  Parent Hashes: 03922e97bc305c6b2e8bc4b7cc765959ca63b05d
  Refs:  HW_SW_MIN_RING_SIZE and HW_SW_MAX_RING_SIZE test cases were
not validating Tx/Rx traffic at all due to early return after changing HW
ring size in testapp_validate_traffic().

Fix the flow by checking return value of set_ring_size() and act upon it
rather than terminating the test case there.

Signed-off-by: Tushar Vyavahare <tushar.vyavahare@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Link: https://lore.kernel.org/bpf/20240702055916.48071-2-tushar.vyavahare@intel.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes traffic validation issue after ring size adjustment in xskxceiver selftests.', 'keywords': 'traffic,validation,ring', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 03922e97bc305c6b2e8bc4b7cc765959ca63b05d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 03922e97bc305c6b2e8bc4b7cc765959ca63b05d
  Author Name: Zhu Jun
  Author Email: zhujun2@cmss.chinamobile.com
  Commit Date: 1719846950
  Commit Message:
    selftests/bpf: Delete extra blank lines in test_sockmap

Delete extra blank lines inside of test_selftest().

Signed-off-by: Zhu Jun <zhujun2@cmss.chinamobile.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240627031905.7133-1-zhujun2@cmss.chinamobile.com

  Parent Hashes: 2382a405c581ae8f39f898055654e2000e7dd0d3
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Clean up by removing extra blank lines in the BPF test_sockmap selftest.', 'keywords': 'selftests,bpf,clean', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 2382a405c581ae8f39f898055654e2000e7dd0d3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2382a405c581ae8f39f898055654e2000e7dd0d3
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1719846646
  Commit Message:
    riscv
  Parent Hashes: 9f1e16fb1fc9826001c69e0551d51fbbcd2d74e9
  Refs:  bpf: Use bpf_prog_pack for RV64 bpf trampoline

We used bpf_prog_pack to aggregate bpf programs into huge page to
relieve the iTLB pressure on the system. We can apply it to bpf
trampoline

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit uses bpf_prog_pack to optimize RV64 bpf trampoline by aggregating programs into huge pages to reduce iTLB pressure.', 'keywords': 'bpf_prog_pack, RV64, trampoline', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9f1e16fb1fc9826001c69e0551d51fbbcd2d74e9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9f1e16fb1fc9826001c69e0551d51fbbcd2d74e9
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1719846646
  Commit Message:
    riscv
  Parent Hashes: d1a426171d76b2cdf3dea5d52f6266090e4aa254
  Refs:  bpf: Fix out-of-bounds issue when preparing trampoline image

We get the size of the trampoline image during the dry run phase and
allocate memory based on that size. The allocated image will then be
populated with instructions during the real patch phase. But after
commit 26ef208c209a ("bpf: Use arch_bpf_trampoline_size")

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix out-of-bounds issue in BPF trampoline image allocation for RISC-V platform.', 'keywords': 'out-of-bounds, trampoline, RISC-V', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d1a426171d76b2cdf3dea5d52f6266090e4aa254
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d1a426171d76b2cdf3dea5d52f6266090e4aa254
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1719846646
  Commit Message:
    bpf: Use precise image size for struct_ops trampoline

For trampoline using bpf_prog_pack
  Parent Hashes: 5b747c23f17d791e08fdf4baa7e14b704625518c
  Refs:  we need to generate a rw_image
buffer with size of (image_end - image). For regular trampoline

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit optimizes struct_ops trampoline by using a precise image size with bpf_prog_pack.', 'keywords': 'struct_ops, trampoline, image', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5b747c23f17d791e08fdf4baa7e14b704625518c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5b747c23f17d791e08fdf4baa7e14b704625518c
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1719846308
  Commit Message:
    libbpf: Fix error handling in btf__distill_base()

Coverity points out that after calling btf__new_empty_split() the wrong
value is checked for error.

Fixes: 58e185a0dc35 ("libbpf: Add btf__distill_base() creating split BTF with distilled base BTF")
Reported-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240629100058.2866763-1-alan.maguire@oracle.com

  Parent Hashes: c77e572d3a8c0e21c5dca4cc2883c7cd8cbe981f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix error handling in btf__distill_base() function in libbpf.', 'keywords': 'libbpf,error handling,btf__distill_base', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c77e572d3a8c0e21c5dca4cc2883c7cd8cbe981f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c77e572d3a8c0e21c5dca4cc2883c7cd8cbe981f
  Author Name: Lorenzo Bianconi
  Author Email: lorenzo@kernel.org
  Commit Date: 1719846191
  Commit Message:
    selftests/bpf: Add selftest for bpf_xdp_flow_lookup kfunc

Introduce e2e selftest for bpf_xdp_flow_lookup kfunc through
xdp_flowtable utility.

Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/b74393fb4539aecbbd5ac7883605f86a95fb0b6b.1719698275.git.lorenzo@kernel.org

  Parent Hashes: 391bb6594fd3a567efb1cd3efc8136c78c4c9e31
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce an end-to-end selftest for bpf_xdp_flow_lookup kfunc using xdp_flowtable utility.', 'keywords': 'selftest,bpf_xdp_flow_lookup,xdp_flowtable', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 391bb6594fd3a567efb1cd3efc8136c78c4c9e31
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 391bb6594fd3a567efb1cd3efc8136c78c4c9e31
  Author Name: Lorenzo Bianconi
  Author Email: lorenzo@kernel.org
  Commit Date: 1719846181
  Commit Message:
    netfilter: Add bpf_xdp_flow_lookup kfunc

Introduce bpf_xdp_flow_lookup kfunc in order to perform the lookup
of a given flowtable entry based on a fib tuple of incoming traffic.
bpf_xdp_flow_lookup can be used as building block to offload in xdp
the processing of sw flowtable when hw flowtable is not available.

Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Acked-by: Pablo Neira Ayuso <pablo@netfilter.org>
Link: https://lore.kernel.org/bpf/55d38a4e5856f6d1509d823ff4e98aaa6d356097.1719698275.git.lorenzo@kernel.org

  Parent Hashes: 89cc8f1c5f22568142b7ad118c738204708e4207
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces the bpf_xdp_flow_lookup kfunc to facilitate flowtable entry lookup based on a FIB tuple in XDP programs.', 'keywords': 'bpf_xdp_flow_lookup, netfilter, flowtable', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['xdp like programs', 'tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 89cc8f1c5f22568142b7ad118c738204708e4207
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 89cc8f1c5f22568142b7ad118c738204708e4207
  Author Name: Florian Westphal
  Author Email: fw@strlen.de
  Commit Date: 1719846113
  Commit Message:
    netfilter: nf_tables: Add flowtable map for xdp offload

This adds a small internal mapping table so that a new bpf (xdp) kfunc
can perform lookups in a flowtable.

As-is
  Parent Hashes: a12978712d9001b060bcc10eaae42ad5102abe2b
  Refs:  xdp program has access to the device pointer

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a flowtable map for XDP offload in the nf_tables subsystem.', 'keywords': 'flowtable,XDP,netfilter', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: f58e7f404da44c94e46bfe657b8707195aebd25a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f58e7f404da44c94e46bfe657b8707195aebd25a
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719838124
  Commit Message:
    HID: bpf: Thrustmaster TCA Yoke Boeing joystick fix

This joystick's original HID descriptor is wrong & it shows a
ABS_MISC axis in Linux that doesn't exist on the hardware.

Link: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/merge_requests/82
Signed-off-by: K S Iyer <kumar.s.iyer65@gmail.com>
Link: https://patch.msgid.link/20240627-import-bpf-v1-6-0dbcda4a5b1f@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: 9b52d81115db681efc1f83ded1d572e5b0b4fd49
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes incorrect HID descriptor for the Thrustmaster TCA Yoke Boeing joystick.', 'keywords': 'HID, joystick, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 9b52d81115db681efc1f83ded1d572e5b0b4fd49
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9b52d81115db681efc1f83ded1d572e5b0b4fd49
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719838119
  Commit Message:
    HID: bpf: Add Huion Dial 2 bpf fixup

Pretty much similar to the Inspiroy 2
  Parent Hashes: f03741540dbab48f8a65da44aaadbe04216d9a42
  Refs:  but with 2 wheels and 8 buttons.

This bpf also works in both normal and vendor mode. If the device is
switched into vendor mode by huion-switcher

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add bpf fixup for Huion Dial 2 devices to ensure compatibility with normal and vendor modes.', 'keywords': 'HID, bpf, Huion', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: f03741540dbab48f8a65da44aaadbe04216d9a42
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f03741540dbab48f8a65da44aaadbe04216d9a42
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719838117
  Commit Message:
    HID: bpf: Add support for the XP-PEN Deco Mini 4

The XP-PEN Deco Mini 4 is a UGEE device with a frame with 6 buttons.
Its pen has 2 buttons and supports pressure reporting.

Fix their report descriptors and transform the frame button events to
support it.

Link: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/merge_requests/88
Signed-off-by: José Expósito <jose.exposito89@gmail.com>
Link: https://patch.msgid.link/20240627-import-bpf-v1-4-0dbcda4a5b1f@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: c4015aa7d8faa43ca53608dccad681eafc22db09
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for XP-PEN Deco Mini 4 device in HID BPF framework.', 'keywords': 'XP-PEN, HID, support', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: c4015aa7d8faa43ca53608dccad681eafc22db09
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c4015aa7d8faa43ca53608dccad681eafc22db09
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719838113
  Commit Message:
    HID: bpf: move the BIT() macro to hid_bpf_helpers.h

This macro can be useful in mopre than one place

Link: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/commit/7970a9c17aa0756bad63e89fccb6ee4f2ec83ccc
Signed-off-by: José Expósito <jose.exposito89@gmail.com>
Link: https://patch.msgid.link/20240627-import-bpf-v1-3-0dbcda4a5b1f@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: 09c555faedb855b07d62503e0a4cd8cdf726da20
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The BIT() macro is moved to hid_bpf_helpers.h for broader utility.', 'keywords': 'BIT macro, hid_bpf_helpers.h, utility', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 09c555faedb855b07d62503e0a4cd8cdf726da20
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 09c555faedb855b07d62503e0a4cd8cdf726da20
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719838103
  Commit Message:
    HID: bpf: add a driver for the Huion Inspiroy 2S (H641P)

This is a a driver for the Huion Inspiroy 2S in both modes (firmware mode
and tablet mode). This device has 6 buttons and a wheel
  Parent Hashes: 8a89db51873ca574de45b25fce68103f34266459
  Refs:  all of which
send key combinations (see the comments for the defaults). Luckily the
device is quite limited in that it only supports one button down at a
time

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a driver for the Huion Inspiroy 2S tablet supporting firmware and tablet modes.', 'keywords': 'driver, Huion, tablet', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 8a89db51873ca574de45b25fce68103f34266459
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8a89db51873ca574de45b25fce68103f34266459
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719838098
  Commit Message:
    HID: bpf: Add a HID report composition helper macros

These macros make it slightly easier and more modular to create
a HID report descriptor from scratch. Since they carry the annotation
we don't need to comment it and they cannot get stale.

For comparison
  Parent Hashes: c79de517a226b86419a5baa867e65e3f8118829f
  Refs:  before we had this:

        0x15

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added helper macros for easier and modular creation of HID report descriptors.', 'keywords': 'HID,bpf,macros', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: c79de517a226b86419a5baa867e65e3f8118829f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c79de517a226b86419a5baa867e65e3f8118829f
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719838096
  Commit Message:
    HID: bpf: doc fixes for hid_hw_request() hooks

We had the following errors while doing make htmldocs:

Documentation/hid/hid-bpf:185: include/linux/hid_bpf.h:167:
	ERROR: Unexpected indentation.

Also ensure consistency with the rest of the __u64 vs u64.

Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
Fixes: 9286675a2aed ("HID: bpf: add HID-BPF hooks for hid_hw_output_report")
Link: https://patch.msgid.link/20240701-fix-cki-v2-4-20564e2e1393@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: 260ffc9676b635c2ededc39285bfa41f83536ee1
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes documentation errors related to HID-BPF hooks in hid_hw_request().', 'keywords': 'HID, BPF, documentation', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 260ffc9676b635c2ededc39285bfa41f83536ee1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 260ffc9676b635c2ededc39285bfa41f83536ee1
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719838094
  Commit Message:
    HID: bpf: doc fixes for hid_hw_request() hooks

We had the following errors while doing make htmldocs:
Documentation/hid/hid-bpf:185: include/linux/hid_bpf.h:144:
	ERROR: Unexpected indentation.
Documentation/hid/hid-bpf:185: include/linux/hid_bpf.h:145:
	WARNING: Block quote ends without a blank line;
	unexpected unindent.
Documentation/hid/hid-bpf:185: include/linux/hid_bpf.h:147:
	ERROR: Unexpected indentation.

Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
Fixes: 8bd0488b5ea5 ("HID: bpf: add HID-BPF hooks for hid_hw_raw_requests")
Link: https://patch.msgid.link/20240701-fix-cki-v2-3-20564e2e1393@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: 762ced1630a97a457ad2fd5f5a36849009808431
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix documentation errors for HID-BPF related to hid_hw_request() hooks.', 'keywords': 'HID,BPF,documentation', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 762ced1630a97a457ad2fd5f5a36849009808431
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 762ced1630a97a457ad2fd5f5a36849009808431
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719838091
  Commit Message:
    HID: bpf: fix gcc warning and unify __u64 into u64

I've got multiple reports of:
error: cast from pointer to integer of different size
[-Werror=pointer-to-int-cast].

Let's use the same trick than kernel/bpf/helpers.c to shut up that warning.

Even if we were on an architecture with addresses on more than 64 bits
  Parent Hashes: fcdf830ea634cf0ee6543b6cd6a4932f92464fc7
  Refs: 
this isn't much of an issue as the address is not used as a pointer

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a gcc warning by unifying pointer casting to consistent u64 type in HID BPF implementation.', 'keywords': 'gcc warning, unify u64, pointer casting', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: fcdf830ea634cf0ee6543b6cd6a4932f92464fc7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fcdf830ea634cf0ee6543b6cd6a4932f92464fc7
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719838083
  Commit Message:
    selftests/hid: ensure CKI can compile our new tests on old kernels

In the same way than commit ae7487d112cf ("selftests/hid: ensure we can
compile the tests on kernels pre-6.3") we should expose struct hid_bpf_ops
when it's not available in vmlinux.h.

So unexpose an eventual struct hid_bpf_ops
  Parent Hashes: d3e15189bfd4d0a9d3a7ad8bd0e6ebb1c0419f93
  Refs:  include vmlinux.h

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Modify selftests to ensure compatibility with older kernels by managing the struct hid_bpf_ops exposure.', 'keywords': 'selftests, compatibility, hid_bpf_ops', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: d04bccd8c19d601232ed3e3c9e248c0040167d47
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d04bccd8c19d601232ed3e3c9e248c0040167d47
  Author Name: Christian Brauner
  Author Email: brauner@kernel.org
  Commit Date: 1719561209
  Commit Message:
    listmount: allow listing in reverse order

util-linux is about to implement listmount() and statmount() support.
Karel requested the ability to scan the mount table in backwards order
because that's what libmount currently does in order to get the latest
mount first. We currently don't support this in listmount(). Add a new
LISTMOUNT_REVERSE flag to allow listing mounts in reverse order. For
example
  Parent Hashes: 17e70161281bb66316e94e63a15d1a8498bf6f01
  Refs:  listing all child mounts of /sys without LISTMOUNT_REVERSE
gives:

    /sys/kernel/security @ mnt_id: 4294968369
    /sys/fs/cgroup @ mnt_id: 4294968370
    /sys/firmware/efi/efivars @ mnt_id: 4294968371
    /sys/fs/bpf @ mnt_id: 4294968372
    /sys/kernel/tracing @ mnt_id: 4294968373
    /sys/kernel/debug @ mnt_id: 4294968374
    /sys/fs/fuse/connections @ mnt_id: 4294968375
    /sys/kernel/config @ mnt_id: 4294968376

whereas with LISTMOUNT_REVERSE it gives:

    /sys/kernel/config @ mnt_id: 4294968376
    /sys/fs/fuse/connections @ mnt_id: 4294968375
    /sys/kernel/debug @ mnt_id: 4294968374
    /sys/kernel/tracing @ mnt_id: 4294968373
    /sys/fs/bpf @ mnt_id: 4294968372
    /sys/firmware/efi/efivars @ mnt_id: 4294968371
    /sys/fs/cgroup @ mnt_id: 4294968370
    /sys/kernel/security @ mnt_id: 4294968369

Link: https://lore.kernel.org/r/20240607-vfs-listmount-reverse-v1-4-7877a2bfa5e5@kernel.org
Reviewed-by: Josef Bacik <josef@toxicpanda.com>
Signed-off-by: Christian Brauner <brauner@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a LISTMOUNT_REVERSE flag to support listing mount points in reverse order.', 'keywords': 'listmount, reverse, mount', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: fd19d4a492af77b1e8fb0439781a3048d1d1f554
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fd19d4a492af77b1e8fb0439781a3048d1d1f554
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1719507935
  Commit Message:
    Merge tag 'net-6.10-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 "Including fixes from can
  Parent Hashes: 3c1d29e53d34537063e60f5eafe0482780a1735a b62cb6a7e83622783100182d9b70e9c70393cfbe
  Refs:  bpf and netfilter.

  There are a bunch of regressions addressed here

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges networking fixes addressing regressions in the kernel from the netdev and netfilter repositories.', 'keywords': 'networking, fixes, regressions', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 7e1f4eb9a60d40dd17a97d9b76818682a024a127
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7e1f4eb9a60d40dd17a97d9b76818682a024a127
  Author Name: Arnd Bergmann
  Author Email: arnd@arndb.de
  Commit Date: 1719503020
  Commit Message:
    kallsyms: rework symbol lookup return codes

Building with W=1 in some configurations produces a false positive
warning for kallsyms:

kernel/kallsyms.c: In function '__sprint_symbol.isra':
kernel/kallsyms.c:503:17: error: 'strcpy' source argument is the same as destination [-Werror=restrict]
  503 |                 strcpy(buffer
  Parent Hashes: 0fa8ab5f3533b307a7d0e438ab08ecd92725dad7
  Refs:  name);
      |                 ^~~~~~~~~~~~~~~~~~~~

This originally showed up while building with -O3

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Reworked symbol lookup return codes to fix a false positive warning in kallsyms when built with W=1.', 'keywords': 'kallsyms, symbol lookup, warning', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: d3e15189bfd4d0a9d3a7ad8bd0e6ebb1c0419f93
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d3e15189bfd4d0a9d3a7ad8bd0e6ebb1c0419f93
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719478849
  Commit Message:
    selftests/hid: add an infinite loop test for hid_bpf_try_input_report

We don't want this call to allow an infinite loop in HID-BPF
  Parent Hashes: 62f2e1a096cd4380eca7e55fa4369d50a8536ab8
  Refs:  so let's
have some tests.

Link: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-13-cfd60fb6c79f@kernel.org
Acked-by: Jiri Kosina <jkosina@suse.com>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add infinite loop test case for hid_bpf_try_input_report in HID selftests.', 'keywords': 'infinite loop, HID, tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 62f2e1a096cd4380eca7e55fa4369d50a8536ab8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 62f2e1a096cd4380eca7e55fa4369d50a8536ab8
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719478849
  Commit Message:
    selftests/hid: add another test for injecting an event from an event hook

Similar to test_multiply_events_wq: we receive one event and inject a
new one. But given that this time we are already in the event hook
  Parent Hashes: 9acbb7ba4589d4715141d4e14230a828ddc95f3d
  Refs:  we
can use hid_bpf_try_input_report() directly as this function will not
sleep.

Note that the injected event gets processed before the original one this
way.

Link: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-12-cfd60fb6c79f@kernel.org
Acked-by: Jiri Kosina <jkosina@suse.com>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest for event injection in HID drivers using an event hook.', 'keywords': 'selftest,HID,event injection', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 9acbb7ba4589d4715141d4e14230a828ddc95f3d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9acbb7ba4589d4715141d4e14230a828ddc95f3d
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719478848
  Commit Message:
    HID: bpf: allow hid_device_event hooks to inject input reports on self

This is the same logic than hid_hw_raw_request or hid_hw_output_report:
we can allow hid_bpf_try_input_report to be called from a hook on
hid_input_report if we ensure that the call can not be made twice in a
row.

There is one extra subtlety in which there is a lock in hid_input_report.
But given that we can detect if we are already in the hook
  Parent Hashes: fe8d561db3e82a1130c59ebc143d557b0bdb0cff
  Refs:  we can notify
hid_input_report to not take the lock. This is done by checking if
ctx_kern data is valid or null

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit allows HID BPF hooks to inject input reports on the device itself, ensuring no repeated calls.', 'keywords': 'HID, input, hook', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: fe8d561db3e82a1130c59ebc143d557b0bdb0cff
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fe8d561db3e82a1130c59ebc143d557b0bdb0cff
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719478848
  Commit Message:
    selftests/hid: add wq test for hid_bpf_input_report()

Now that bpf_wq is available
  Parent Hashes: fa03f398a8ac46f46927e0b509b302ebe0ed7e8a
  Refs:  we can write a test with it. Having
hid_bpf_input_report() waiting for the device means that we can
directly call it

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftest for hid_bpf_input_report using bpf_wq in HID driver.', 'keywords': 'selftests,hid_bpf_input_report,bpf_wq', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: fa03f398a8ac46f46927e0b509b302ebe0ed7e8a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fa03f398a8ac46f46927e0b509b302ebe0ed7e8a
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719478848
  Commit Message:
    HID: bpf: make hid_bpf_input_report() sleep until the device is ready

hid_bpf_input_report() is already marked to be used in sleepable context
only. So instead of hammering with timers the device to hopefully get
an available slot where the device is not sending events
  Parent Hashes: 3ac83fcd6e67c86d25040e6818972f2c36b51d23
  Refs:  we can make
that kfunc wait for the current event to be terminated before it goes in.

This allows to work with the following pseudo code:

in struct_ops/hid_device_event:
  - schedule a bpf_wq

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies hid_bpf_input_report() to wait until the device is ready.', 'keywords': 'HID,sleep,context', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 3ac83fcd6e67c86d25040e6818972f2c36b51d23
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3ac83fcd6e67c86d25040e6818972f2c36b51d23
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719478848
  Commit Message:
    selftests/hid: add tests for hid_hw_output_report HID-BPF hooks

We add 3 new tests:
- first
  Parent Hashes: 9286675a2aed40a517be8cc4e283a04f473275b5
  Refs:  we make sure we can prevent the output_report to happen
- second

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added three new selftests for hid_hw_output_report HID-BPF hooks.', 'keywords': 'selftests,hid,BPF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 9286675a2aed40a517be8cc4e283a04f473275b5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9286675a2aed40a517be8cc4e283a04f473275b5
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719478845
  Commit Message:
    HID: bpf: add HID-BPF hooks for hid_hw_output_report

Same story than hid_hw_raw_requests:

This allows to intercept and prevent or change the behavior of
hid_hw_output_report() from a bpf program.

The intent is to solve a couple of use case:
  - firewalling a HID device: a firewall can monitor who opens the hidraw
    nodes and then prevent or allow access to write operations on that
    hidraw node.
  - change the behavior of a device and emulate a new HID feature request

The hook is allowed to be run as sleepable so it can itself call
hid_hw_output_report()
  Parent Hashes: 015a4a2a439b285943da471d38b2721bbe4d8b39
  Refs:  which allows to "convert" one feature request into
another or even call the feature request on a different HID device on the
same physical device.

Link: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-7-cfd60fb6c79f@kernel.org
Acked-by: Jiri Kosina <jkosina@suse.com>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit introduces HID-BPF hooks for intercepting and modifying hid_hw_output_report behaviors.', 'keywords': 'HID-BPF, hooks, intercept', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 015a4a2a439b285943da471d38b2721bbe4d8b39
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 015a4a2a439b285943da471d38b2721bbe4d8b39
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719478812
  Commit Message:
    selftests/hid: add tests for hid_hw_raw_request HID-BPF hooks

We add 3 new tests:
- first
  Parent Hashes: 75839101ce52e319cb2154a027d14f1f0aa3be09
  Refs:  we make sure we can prevent the raw_request to happen
- second

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added self-tests for HID-BPF hooks using hid_hw_raw_request.', 'keywords': 'self-tests,HID-BPF,hooks', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 75839101ce52e319cb2154a027d14f1f0aa3be09
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 75839101ce52e319cb2154a027d14f1f0aa3be09
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719478812
  Commit Message:
    HID: bpf: prevent infinite recursions with hid_hw_raw_requests hooks

When we attach a sleepable hook to hid_hw_raw_requests
  Parent Hashes: 8bd0488b5ea58655ad6fdcbe0408ef49b16882b1
  Refs:  we can (and in
many cases should) call ourself hid_bpf_raw_request()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Prevent infinite recursion in HID BPF raw requests with sleepable hooks.', 'keywords': 'HID,BPF,infinite recursion', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 8bd0488b5ea58655ad6fdcbe0408ef49b16882b1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8bd0488b5ea58655ad6fdcbe0408ef49b16882b1
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719478807
  Commit Message:
    HID: bpf: add HID-BPF hooks for hid_hw_raw_requests

This allows to intercept and prevent or change the behavior of
hid_hw_raw_request() from a bpf program.

The intent is to solve a couple of use case:
- firewalling a HID device: a firewall can monitor who opens the hidraw
  nodes and then prevent or allow access to write operations on that
  hidraw node.
- change the behavior of a device and emulate a new HID feature request

The hook is allowed to be run as sleepable so it can itself call
hid_bpf_hw_request()
  Parent Hashes: 6cd735f0e57a6c8510ad92f5b63837a8d0cff3a7
  Refs:  which allows to "convert" one feature request into
another or even call the feature request on a different HID device on the
same physical device.

Link: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-4-cfd60fb6c79f@kernel.org
Acked-by: Jiri Kosina <jkosina@suse.com>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added HID-BPF hooks to intercept and modify hid_hw_raw_requests.', 'keywords': 'HID-BPF,hooks,intercept', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 6cd735f0e57a6c8510ad92f5b63837a8d0cff3a7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6cd735f0e57a6c8510ad92f5b63837a8d0cff3a7
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719478702
  Commit Message:
    HID: bpf: protect HID-BPF prog_list access by a SRCU

We want to add sleepable callbacks for hid_hw_raw_request() and
hid_hw_output_report()
  Parent Hashes: 67eccf151d76a9939ad8a50c6db5cb486b01df24
  Refs:  but we can not use a plain RCU for those.

Prepare for a SRCU so we can extend HID-BPF.

This changes a little bit how hid_bpf_device_init() behaves

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce SRCU to protect HID-BPF prog_list access and enable sleepable callbacks for certain HID functions.', 'keywords': 'SRCU,HID-BPF,callbacks', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 67eccf151d76a9939ad8a50c6db5cb486b01df24
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 67eccf151d76a9939ad8a50c6db5cb486b01df24
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719478699
  Commit Message:
    HID: add source argument to HID low level functions

This allows to know who actually sent what when we process the request
to the device.
This will be useful for a BPF firewall program to allow or not requests
coming from a dedicated hidraw node client.

Link: https://patch.msgid.link/20240626-hid_hw_req_bpf-v2-2-cfd60fb6c79f@kernel.org
Acked-by: Jiri Kosina <jkosina@suse.com>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: ebae0b2a6f4b3b949f30f076fbc65d3b0bb04785
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a source argument to HID low-level functions for BPF firewall use in managing requests.', 'keywords': 'HID,BPF,firewall', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ebae0b2a6f4b3b949f30f076fbc65d3b0bb04785
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ebae0b2a6f4b3b949f30f076fbc65d3b0bb04785
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1719478680
  Commit Message:
    HID: bpf: fix dispatch_hid_bpf_device_event uninitialized ret value

Looks like if a bpf program gets inserted and then removed
  Parent Hashes: 9e16bada9299d74fcce1f6b03606a08a2c16da81
  Refs: 
hdev->bpf.device_data is then allocated

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes uninitialized return value in dispatch_hid_bpf_device_event function.', 'keywords': 'fix, HID, uninitialized', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 9e16bada9299d74fcce1f6b03606a08a2c16da81
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9e16bada9299d74fcce1f6b03606a08a2c16da81
  Author Name: Luis Felipe Hernandez
  Author Email: luis.hernandez093@gmail.com
  Commit Date: 1719472900
  Commit Message:
    hid: bpf: Fix grammar

* spelling fix: XBox -> Xbox
  Parent Hashes: 33c0fb85b571b0f1bbdbf466e770eebeb29e6f41
  Refs:  lowercase 'b' as per Microsoft branding
* rephrase: paddle -> paddles

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes grammatical and spelling issues in the HID BPF documentation, including correct branding of Xbox.', 'keywords': 'grammar, spelling, Xbox', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: a12978712d9001b060bcc10eaae42ad5102abe2b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a12978712d9001b060bcc10eaae42ad5102abe2b
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1719446923
  Commit Message:
    selftests/bpf: Move ARRAY_SIZE to bpf_misc.h

ARRAY_SIZE is used on multiple places
  Parent Hashes: 0f31c2c61f6923747628c65a0fe36b2d4d7e21b0
  Refs:  move its definition in
bpf_misc.h header.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Alan Maguire <alan.maguire@oracle.com>
Link: https://lore.kernel.org/bpf/20240626134719.3893748-1-jolsa@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit moves ARRAY_SIZE definition to bpf_misc.h to centralize its usage.', 'keywords': 'ARRAY_SIZE, bpf_misc.h, selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 0f31c2c61f6923747628c65a0fe36b2d4d7e21b0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0f31c2c61f6923747628c65a0fe36b2d4d7e21b0
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1719445139
  Commit Message:
    libbpf: Fix clang compilation error in btf_relocate.c

When building with clang for ARCH=i386
  Parent Hashes: d07980f7373b4c57c85478f8e815cc7b9b394c05
  Refs:  the following errors are
observed:

  CC      kernel/bpf/btf_relocate.o
./tools/lib/bpf/btf_relocate.c:206:23: error: implicit truncation from 'int' to a one-bit wide bit-field changes value from 1 to -1 [-Werror

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed a clang compilation error in btf_relocate.c for i386 architecture.', 'keywords': 'clang, compilation, btf_relocate.c', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d07980f7373b4c57c85478f8e815cc7b9b394c05
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d07980f7373b4c57c85478f8e815cc7b9b394c05
  Author Name: Ma Ke
  Author Email: make24@iscas.ac.cn
  Commit Date: 1719445019
  Commit Message:
    selftests/bpf: Don't close(-1) in serial_test_fexit_stress()

Guard close() with extra link_fd[i] > 0 and fexit_fd[i] > 0
check to prevent close(-1).

Signed-off-by: Ma Ke <make24@iscas.ac.cn>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240623131753.2133829-1-make24@iscas.ac.cn

  Parent Hashes: aa293983d2020390e286544b120f3cd0a3d40749
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add checks to prevent closing file descriptors with invalid values in fexit_stress test.', 'keywords': 'close, file descriptors, serial_test_fexit_stress', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: aa293983d2020390e286544b120f3cd0a3d40749
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: aa293983d2020390e286544b120f3cd0a3d40749
  Author Name: Matt Bobrowski
  Author Email: mattbobrowski@google.com
  Commit Date: 1719433052
  Commit Message:
    bpf: add new negative selftests to cover missing check_func_arg_reg_off() and reg->type check

Add new negative selftests which are intended to cover the
out-of-bounds memory access that could be performed on a
CONST_PTR_TO_DYNPTR within functions taking a ARG_PTR_TO_DYNPTR |
MEM_RDONLY as an argument
  Parent Hashes: ec2b9a5e11e51fea1bb04c1e7e471952e887e874
  Refs:  and acceptance of invalid register types
i.e. PTR_TO_BTF_ID within functions taking a ARG_PTR_TO_DYNPTR |
MEM_RDONLY.

Reported-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Matt Bobrowski <mattbobrowski@google.com>
Link: https://lore.kernel.org/r/20240625062857.92760-2-mattbobrowski@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added new negative selftests to check out-of-bounds access and invalid register types in eBPF functions.', 'keywords': 'negative selftests,bpf,eBPF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ec2b9a5e11e51fea1bb04c1e7e471952e887e874
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ec2b9a5e11e51fea1bb04c1e7e471952e887e874
  Author Name: Matt Bobrowski
  Author Email: mattbobrowski@google.com
  Commit Date: 1719433052
  Commit Message:
    bpf: add missing check_func_arg_reg_off() to prevent out-of-bounds memory accesses

Currently
  Parent Hashes: d65f3767de20782e75d8a665fdc54f822f344802
  Refs:  it's possible to pass in a modified CONST_PTR_TO_DYNPTR to
a global function as an argument. The adverse effects of this is that
BPF helpers can continue to make use of this modified
CONST_PTR_TO_DYNPTR from within the context of the global function

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add missing check in BPF to prevent out-of-bounds memory access with CONST_PTR_TO_DYNPTR.', 'keywords': 'check memory access', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e8b86f0311a4b721663df8105a680e5968f21d4c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e8b86f0311a4b721663df8105a680e5968f21d4c
  Author Name: Veronika Molnarova
  Author Email: vmolnaro@redhat.com
  Commit Date: 1719425458
  Commit Message:
    perf test stat_bpf_counter.sh: Stabilize the test results

The test has been failing for some time when two separate runs of
perf benchmarks are recorded for cycles events and their counts are
compared
  Parent Hashes: e4b19e2cc3e5f9be8f159ba0b4ba6aed8d993abf
  Refs:  while once the recording was done with option --bpf-counters
and once without it. It is expected that the count of the samples
should be within a certain range

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit stabilizes test results for perf's stat_bpf_counter.sh by ensuring cycle event counts match expectations with and without --bpf-counters.", 'keywords': 'stabilize,test results,perf', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 9dabf4003423c8d3a2f4f8915c3ff2f1158302a0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9dabf4003423c8d3a2f4f8915c3ff2f1158302a0
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1719425280
  Commit Message:
    perf python: Switch module to linking libraries from building source

setup.py was building most perf sources causing setup.py to mimic the
Makefile logic as well as flex/bison code to be stubbed out
  Parent Hashes: e467705a9fb37f51595aa6deaca085ccb4005454
  Refs:  due to
complexity building. By using libraries fewer functions are stubbed
out

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Switch perf Python module to link libraries instead of building from source for reduced complexity.', 'keywords': 'perf, libraries, setup.py', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 60a6707f582ebbdfb6b378f45d7bf929106a1cd5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 60a6707f582ebbdfb6b378f45d7bf929106a1cd5
  Author Name: Palmer Dabbelt
  Author Email: palmer@rivosinc.com
  Commit Date: 1719416587
  Commit Message:
    Merge patch series "riscv: Memory Hot(Un)Plug support"

Björn Töpel <bjorn@kernel.org> says:

From: Björn Töpel <bjorn@rivosinc.com>

================================================================
Memory Hot(Un)Plug support (and ZONE_DEVICE) for the RISC-V port
================================================================

Introduction
============

To quote "Documentation/admin-guide/mm/memory-hotplug.rst": "Memory
hot(un)plug allows for increasing and decreasing the size of physical
memory available to a machine at runtime."

This series adds memory hot(un)plugging
  Parent Hashes: d6ecd188937fcddeffb37efc61b67a56809b266a 4705c1571ad39d9469321d2817faf4c4b78ddffb
  Refs:  and ZONE_DEVICE support for
the RISC-V Linux port.

MM configuration
================

RISC-V MM has the following configuration:

 * Memory blocks are 128M

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds memory hot(un)plug and ZONE_DEVICE support for RISC-V in the Linux port.', 'keywords': 'RISC-V, memory hotplug, ZONE_DEVICE', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 66673099f734fd6512055fee353b5c81dafec216
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 66673099f734fd6512055fee353b5c81dafec216
  Author Name: Björn Töpel
  Author Email: bjorn@rivosinc.com
  Commit Date: 1719416559
  Commit Message:
    riscv: mm: Pre-allocate vmemmap/direct map/kasan PGD entries

The RISC-V port copies the PGD table from init_mm/swapper_pg_dir to
all userland page tables
  Parent Hashes: e3ecf2fdc8f39a898f9e06481e935b460a097e10
  Refs:  which means that if the PGD level table is
changed

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit pre-allocates vmemmap/direct map/kasan PGD entries for RISC-V architecture in Linux kernel.', 'keywords': 'RISC-V, PGD, pre-allocate', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: d65f3767de20782e75d8a665fdc54f822f344802
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d65f3767de20782e75d8a665fdc54f822f344802
  Author Name: Leon Hwang
  Author Email: hffilwlqm@gmail.com
  Commit Date: 1719364364
  Commit Message:
    bpf: Fix tailcall cases in test_bpf

Since f663a03c8e35 ("bpf
  Parent Hashes: c73a9683cb21012b6c0f14217974837151c527a8
  Refs:  x64: Remove tail call detection")

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes issues with tailcall execution in BPF test cases.', 'keywords': 'bpf, tailcall, test', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 637c26f9b02d9c72448fcd5c9c4e3b08015404fc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 637c26f9b02d9c72448fcd5c9c4e3b08015404fc
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1719278138
  Commit Message:
    selftests/bpf: add test validating uprobe/uretprobe stack traces

Add a set of tests to validate that stack traces captured from or in the
presence of active uprobes and uretprobes are valid and complete.

For this we use BPF program that are installed either on entry or exit
of user function
  Parent Hashes: 4a365eb8a6d9940e838739935f1ce21f1ec8e33f
  Refs:  plus deep-nested USDT. One of target funtions
(target_1) is recursive to generate two different entries in the stack
trace for the same uprobe/uretprobe

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add tests for validating stack traces with active uprobes and uretprobes in selftests.', 'keywords': 'test,uprobes,stack traces', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 482000cf7fd5ff42214c0d71f30ed42c55bcb00a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 482000cf7fd5ff42214c0d71f30ed42c55bcb00a
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1719278122
  Commit Message:
    Merge tag 'for-netdev' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-06-24

We've added 12 non-merge commits during the last 10 day(s) which contain
a total of 10 files changed
  Parent Hashes: 058722ee350c0bdd664e467156feb2bf5d9cc271 7e9f79428372c6eab92271390851be34ab26bfb4
  Refs:  412 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge pull request for bpf branch containing 12 non-merge commits and 412 insertions over 10 days.', 'keywords': 'merge, pull request, bpf', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: bf2468f9afba8001c7432d104756a5dd3537bc76
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bf2468f9afba8001c7432d104756a5dd3537bc76
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1719272486
  Commit Message:
    Merge branch 'locking-introduce-nested-bh-locking'

Sebastian Andrzej Siewior says:

====================
locking: Introduce nested-BH locking.

Disabling bottoms halves acts as per-CPU BKL. On PREEMPT_RT code within
local_bh_disable() section remains preemtible. As a result high prior
tasks (or threaded interrupts) will be blocked by lower-prio task (or
threaded interrupts) which are long running which includes softirq
sections.

The proposed way out is to introduce explicit per-CPU locks for
resources which are protected by local_bh_disable() and use those only
on PREEMPT_RT so there is no additional overhead for !PREEMPT_RT builds.

The series introduces the infrastructure and converts large parts of
networking which is largest stake holder here. Once this done the
per-CPU lock from local_bh_disable() on PREEMPT_RT can be lifted.

Performance testing. Baseline is net-next as of commit 93bda33046e7a
("Merge branch'net-constify-ctl_table-arguments-of-utility-functions'")
plus v6.10-rc1. A 10GiG link is used between two hosts. The command
   xdp-bench redirect-cpu --cpu 3 --remote-action drop eth1 -e

was invoked on the receiving side with a ixgbe. The sending side uses
pktgen_sample03_burst_single_flow.sh on i40e.

Baseline:
| eth1->?                 9
  Parent Hashes: 568ebdaba6370c03360860f1524f646ddd5ca523 3f9fe37d9e16a6cfd5f4d1f536686ea71db3196f
  Refs: 018

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce nested bottom halves locking for improved task and interrupt handling on PREEMPT_RT systems.', 'keywords': 'nested-BH locking, PREEMPT_RT, networking', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3f9fe37d9e16a6cfd5f4d1f536686ea71db3196f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3f9fe37d9e16a6cfd5f4d1f536686ea71db3196f
  Author Name: Sebastian Andrzej Siewior
  Author Email: bigeasy@linutronix.de
  Commit Date: 1719272484
  Commit Message:
    net: Move per-CPU flush-lists to bpf_net_context on PREEMPT_RT.

The per-CPU flush lists
  Parent Hashes: 401cb7dae8130fd34eb84648e02ab4c506df7d5e
  Refs:  which are accessed from within the NAPI callback
(xdp_do_flush() for instance)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Move per-CPU flush lists to bpf_net_context on PREEMPT_RT for improved performance.', 'keywords': 'per-CPU, PREEMPT_RT, bpf_net_context', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 401cb7dae8130fd34eb84648e02ab4c506df7d5e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 401cb7dae8130fd34eb84648e02ab4c506df7d5e
  Author Name: Sebastian Andrzej Siewior
  Author Email: bigeasy@linutronix.de
  Commit Date: 1719272484
  Commit Message:
    net: Reference bpf_redirect_info via task_struct on PREEMPT_RT.

The XDP redirect process is two staged:
- bpf_prog_run_xdp() is invoked to run a eBPF program which inspects the
  packet and makes decisions. While doing that
  Parent Hashes: 78f520b7bbe579438dfc202226b3dac5607d8c7f
  Refs:  the per-CPU variable
  bpf_redirect_info is used.

- Afterwards xdp_do_redirect() is invoked and accesses bpf_redirect_info
  and it may also access other per-CPU variables like xskmap_flush_list.

At the very end of the NAPI callback

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance reference handling of bpf_redirect_info via task_struct in XDP for PREEMPT_RT.', 'keywords': 'bpf_redirect_info, xdp, PREEMPT_RT', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 78f520b7bbe579438dfc202226b3dac5607d8c7f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 78f520b7bbe579438dfc202226b3dac5607d8c7f
  Author Name: Sebastian Andrzej Siewior
  Author Email: bigeasy@linutronix.de
  Commit Date: 1719272483
  Commit Message:
    net: Use nested-BH locking for bpf_scratchpad.

bpf_scratchpad is a per-CPU variable and relies on disabled BH for its
locking. Without per-CPU locking in local_bh_disable() on PREEMPT_RT
this data structure requires explicit locking.

Add a local_lock_t to the data structure and use local_lock_nested_bh()
for locking. This change adds only lockdep coverage and does not alter
the functional behaviour for !PREEMPT_RT.

Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: Hao Luo <haoluo@google.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: KP Singh <kpsingh@kernel.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: Song Liu <song@kernel.org>
Cc: Stanislav Fomichev <sdf@google.com>
Cc: Yonghong Song <yonghong.song@linux.dev>
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Link: https://patch.msgid.link/20240620132727.660738-14-bigeasy@linutronix.de
Signed-off-by: Jakub Kicinski <kuba@kernel.org>

  Parent Hashes: d1542d4ae4dfdc47c9b3205ebe849ed23af213dd
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce nested-BH locking for bpf_scratchpad for better lockdep coverage in PREEMPT_RT.', 'keywords': 'nested-BH, bpf_scratchpad, locking', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d1542d4ae4dfdc47c9b3205ebe849ed23af213dd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d1542d4ae4dfdc47c9b3205ebe849ed23af213dd
  Author Name: Sebastian Andrzej Siewior
  Author Email: bigeasy@linutronix.de
  Commit Date: 1719272483
  Commit Message:
    seg6: Use nested-BH locking for seg6_bpf_srh_states.

The access to seg6_bpf_srh_states is protected by disabling preemption.
Based on the code
  Parent Hashes: 3414adbd6a6ad3702d0bdc49081ee7c9e9e1c600
  Refs:  the entry point is input_action_end_bpf() and
every other function (the bpf helper functions bpf_lwt_seg6_*())

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Use nested-BH locking for seg6_bpf_srh_states to protect access by disabling preemption.', 'keywords': 'nested-BH locking, seg6_bpf_srh_states, preemption', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: c73a9683cb21012b6c0f14217974837151c527a8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c73a9683cb21012b6c0f14217974837151c527a8
  Author Name: Antoine Tenart
  Author Email: atenart@kernel.org
  Commit Date: 1719245982
  Commit Message:
    libbpf: Skip base btf sanity checks

When upgrading to libbpf 1.3 we noticed a big performance hit while
loading programs using CORE on non base-BTF symbols. This was tracked
down to the new BTF sanity check logic. The issue is the base BTF
definitions are checked first for the base BTF and then again for every
module BTF.

Loading 5 dummy programs (using libbpf-rs) that are using CORE on a
non-base BTF symbol on my system:
- Before this fix: 3s.
- With this fix: 0.1s.

Fix this by only checking the types starting at the BTF start id. This
should ensure the base BTF is still checked as expected but only once
(btf->start_id == 1 when creating the base BTF)
  Parent Hashes: 5a532459aa919d055d822d8db4ea2c5c8d511568
  Refs:  and then only
additional types are checked for each module BTF.

Fixes: 3903802bb99a ("libbpf: Add basic BTF sanity validation")
Signed-off-by: Antoine Tenart <atenart@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Alan Maguire <alan.maguire@oracle.com>
Link: https://lore.kernel.org/bpf/20240624090908.171231-1-atenart@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit optimizes BTF sanity checks in libbpf to improve performance when loading programs using CORE on non-base BTF symbols.', 'keywords': 'libbpf, BTF, performance', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7e9f79428372c6eab92271390851be34ab26bfb4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7e9f79428372c6eab92271390851be34ab26bfb4
  Author Name: Daniil Dulov
  Author Email: d.dulov@aladdin.ru
  Commit Date: 1719229442
  Commit Message:
    xdp: Remove WARN() from __xdp_reg_mem_model()

syzkaller reports a warning in __xdp_reg_mem_model().

The warning occurs only if __mem_id_init_hash_table() returns an error. It
returns the error in two cases:

  1. memory allocation fails;
  2. rhashtable_init() fails when some fields of rhashtable_params
     struct are not initialized properly.

The second case cannot happen since there is a static const rhashtable_params
struct with valid fields. So
  Parent Hashes: 280e4ebffd16ea1b55dc09761448545e216f60a9
  Refs:  warning is only triggered when there is a
problem with memory allocation.

Thus

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove unnecessary warning in __xdp_reg_mem_model() related to memory allocation failures.', 'keywords': 'WARN, xdp, memory', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 280e4ebffd16ea1b55dc09761448545e216f60a9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 280e4ebffd16ea1b55dc09761448545e216f60a9
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1719229442
  Commit Message:
    selftests/bpf: Add tests for may_goto with negative offset.

Add few tests with may_goto and negative offset.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240619235355.85031-2-alexei.starovoitov@gmail.com

  Parent Hashes: 2b2efe1937ca9f8815884bd4dcd5b32733025103
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for may_goto functionality with negative offset in BPF.', 'keywords': 'selftests, may_goto, negative offset', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2b2efe1937ca9f8815884bd4dcd5b32733025103
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2b2efe1937ca9f8815884bd4dcd5b32733025103
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1719229442
  Commit Message:
    bpf: Fix may_goto with negative offset.

Zac's syzbot crafted a bpf prog that exposed two bugs in may_goto.
The 1st bug is the way may_goto is patched. When offset is negative
it should be patched differently.
The 2nd bug is in the verifier:
when current state may_goto_depth is equal to visited state may_goto_depth
it means there is an actual infinite loop. It's not correct to prune
exploration of the program at this point.
Note
  Parent Hashes: 316930d06b92a2419d8e767193266e678545b31d
  Refs:  that this check doesn't limit the program to only one may_goto insn

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes two issues in the bpf verifier related to may_goto with negative offsets.', 'keywords': 'bpf,may_goto,verifier', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 316930d06b92a2419d8e767193266e678545b31d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 316930d06b92a2419d8e767193266e678545b31d
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1719229435
  Commit Message:
    selftests/bpf: Add more ring buffer test coverage

Add test coverage for reservations beyond the ring buffer size in order
to validate that bpf_ringbuf_reserve() rejects the request with NULL
  Parent Hashes: cfa1a2329a691ffd991fcf7248a57d752e712881
  Refs:  all
other ring buffer tests keep passing as well:

  # ./vmtest.sh -- ./test_progs -t ringbuf
  [...]
  ./test_progs -t ringbuf
  [    1.165434] bpf_testmod: loading out-of-tree module taints kernel.
  [    1.165825] bpf_testmod: module verification failed: signature and/or required key missing - tainting kernel
  [    1.284001] tsc: Refined TSC clocksource calibration: 3407.982 MHz
  [    1.286871] clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x311fc34e357

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add additional test coverage for ring buffer reservations exceeding size to ensure proper rejection in bpf_ringbuf_reserve().', 'keywords': 'ring buffer, test coverage, bpf_ringbuf_reserve', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5a532459aa919d055d822d8db4ea2c5c8d511568
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5a532459aa919d055d822d8db4ea2c5c8d511568
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1719172202
  Commit Message:
    bpf: fix build when CONFIG_DEBUG_INFO_BTF[_MODULES] is undefined

Kernel test robot reports that kernel build fails with
resilient split BTF changes.

Examining the associated config and code we see that
btf_relocate_id() is defined under CONFIG_DEBUG_INFO_BTF_MODULES.
Moving it outside the #ifdef solves the issue.

Reported-by: kernel test robot <lkp@intel.com>
Closes: https://lore.kernel.org/oe-kbuild-all/202406221742.d2srFLVI-lkp@intel.com/
Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Link: https://lore.kernel.org/r/20240623135224.27981-1-alan.maguire@oracle.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 04efaebd72d1d3d9991841051fafc6b195f3676d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix kernel build failure by relocating btf_relocate_id() outside the CONFIG_DEBUG_INFO_BTF_MODULES conditional compilation block.', 'keywords': 'kernel,build,BTF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 04efaebd72d1d3d9991841051fafc6b195f3676d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 04efaebd72d1d3d9991841051fafc6b195f3676d
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1719159026
  Commit Message:
    bpf
  Parent Hashes: 93265a0b79e48fde8ee23fb6e1195d7d99717063
  Refs:  docs: Address comments from IETF Area Directors

This patch does the following to address IETF feedback:

* Remove mention of "program type" and reference future
  docs (and mention platform-specific docs exist) for
  helper functions and BTF. Addresses Roman Danyliw's
  comments based on GENART review from Ines Robles [0].

* Add reference for endianness as requested by John
  Scudder [1].

* Added bit numbers to top of 32-bit wide format diagrams
  as requested by Paul Wouters [2].

* Added more text about why BPF doesn't stand for anything

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses IETF feedback by modifying documentation, adding references, and updating diagrams related to BPF.', 'keywords': 'documentation, IETF, feedback', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 93265a0b79e48fde8ee23fb6e1195d7d99717063
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 93265a0b79e48fde8ee23fb6e1195d7d99717063
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1719006393
  Commit Message:
    Merge branch 'bpf-resilient-split-btf-followups'

Alan Maguire says:

====================
bpf: resilient split BTF followups

Follow-up to resilient split BTF series [1]
  Parent Hashes: cd387ce54834bc7808082c471fd745ce85a0e21f 47a8cf0c5b3f6769b9d558301735c75119a0a165
  Refs: 

- cleaning up libbpf relocation code (patch 1);
- adding 'struct module' support for base BTF data (patch 2);
- splitting out field iteration code into separate file (patch 3);
- sharing libbpf relocation code with the kernel (patch 4);
- adding a kbuild --btf_features flag to generate distilled base
  BTF in the module-specific case where KBUILD_EXTMOD is true
  (patch 5); and
- adding test coverage for module-based kfunc dtor (patch 6)

Generation of distilled base BTF for modules requires the pahole patch
at [2]

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces follow-ups to the resilient split BTF series focusing on libbpf improvements and test coverage additions.', 'keywords': 'resilient,BTF,libbpf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 47a8cf0c5b3f6769b9d558301735c75119a0a165
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 47a8cf0c5b3f6769b9d558301735c75119a0a165
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1719006389
  Commit Message:
    selftests/bpf: Add kfunc_call test for simple dtor in bpf_testmod

add simple kfuncs to create/destroy a context type to bpf_testmod
  Parent Hashes: 46fb0b62ea29c0dbcb3e44f1d67aafe79bc6e045
  Refs: 
register them and add a kfunc_call test to use them.  This provides
test coverage for registration of dtor kfuncs from modules.

By transferring the context pointer to a map value as a __kptr
we also trigger the map-based dtor cleanup logic

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added kfunc_call test for destructor logic in bpf_testmod selftests.', 'keywords': 'kfuncs,selftests,destructor', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 46fb0b62ea29c0dbcb3e44f1d67aafe79bc6e045
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 46fb0b62ea29c0dbcb3e44f1d67aafe79bc6e045
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1719006307
  Commit Message:
    kbuild
  Parent Hashes: 8646db238997df36c6ad71a9d7e0b52ceee221b2
  Refs: bpf: Add module-specific pahole flags for distilled base BTF

Support creation of module BTF along with distilled base BTF;
the latter is stored in a .BTF.base ELF section and supplements
split BTF references to base BTF with information about base types

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds support for module BTF and distilled base BTF with corresponding pahole flags.', 'keywords': 'module BTF, distilled BTF, pahole flags', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8646db238997df36c6ad71a9d7e0b52ceee221b2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8646db238997df36c6ad71a9d7e0b52ceee221b2
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1719006307
  Commit Message:
    libbpf
  Parent Hashes: e7ac331b30555cf1a0826784a346f36dbf800451
  Refs: bpf: Share BTF relocate-related code with kernel

Share relocation implementation with the kernel.  As part of this

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Share BTF relocation implementation code between libbpf and the kernel for unified handling.', 'keywords': 'BTF,relocation,kernel', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e7ac331b30555cf1a0826784a346f36dbf800451
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e7ac331b30555cf1a0826784a346f36dbf800451
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1719006307
  Commit Message:
    libbpf: Split field iter code into its own file kernel

This will allow it to be shared with the kernel.  No functional change.

Suggested-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240620091733.1967885-4-alan.maguire@oracle.com

  Parent Hashes: d4e48e3dd45017abdd69a19285d197de897ef44f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor field iterator code in libbpf to a separate file for kernel sharing.', 'keywords': 'libbpf, refactor, kernel', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d4e48e3dd45017abdd69a19285d197de897ef44f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d4e48e3dd45017abdd69a19285d197de897ef44f
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1719006307
  Commit Message:
    module
  Parent Hashes: d1cf840854bb603c0718a011bc993f69f2df014e
  Refs:  bpf: Store BTF base pointer in struct module

...as this will allow split BTF modules with a base BTF
representation (rather than the full vmlinux BTF at time of
BTF encoding) to resolve their references to kernel types in a
way that is more resilient to small changes in kernel types.

This will allow modules that are not built every time the kernel
is to provide more resilient BTF

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit stores the BTF base pointer in struct module to improve BTF resilience in split BTF modules.', 'keywords': 'BTF, module, resilience', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d1cf840854bb603c0718a011bc993f69f2df014e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d1cf840854bb603c0718a011bc993f69f2df014e
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1719006307
  Commit Message:
    libbpf: BTF relocation followup fixing naming
  Parent Hashes: cd387ce54834bc7808082c471fd745ce85a0e21f
  Refs:  loop logic

Use less verbose names in BTF relocation code and fix off-by-one error
and typo in btf_relocate.c.  Simplify loop over matching distilled
types

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix naming issues and simplify loop logic in BTF relocation code of libbpf.', 'keywords': 'BTF relocation, naming, fix', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: cd387ce54834bc7808082c471fd745ce85a0e21f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cd387ce54834bc7808082c471fd745ce85a0e21f
  Author Name: Mykyta Yatsenko
  Author Email: yatsenko@meta.com
  Commit Date: 1719005663
  Commit Message:
    selftests/bpf: Test struct_ops bpf map auto-attach

Adding selftest to verify that struct_ops maps are auto attached by
bpf skeleton's `*__attach` function.

Signed-off-by: Mykyta Yatsenko <yatsenko@meta.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240621180324.238379-1-yatsenko@meta.com

  Parent Hashes: 2bb138cb20a6a347cfed84381430cd25e05f118e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftest for verifying auto-attachment of struct_ops bpf maps by bpf skeleton.', 'keywords': 'selftest, struct_ops, auto-attach', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2bb138cb20a6a347cfed84381430cd25e05f118e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2bb138cb20a6a347cfed84381430cd25e05f118e
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1719005313
  Commit Message:
    bpf
  Parent Hashes: 2807db78ab302eab2c86c5924e4079adb63fd7c8
  Refs:  arm64: Inline bpf_get_current_task/_btf() helpers

On ARM64

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Inline bpf_get_current_task and bpf_get_current_btf helpers for ARM64 architecture.', 'keywords': 'bpf, ARM64, helpers', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 3e23c99764d465ae411f0729fd6d2e0e3edd0ade
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3e23c99764d465ae411f0729fd6d2e0e3edd0ade
  Author Name: Cupertino Miranda
  Author Email: cupertino.miranda@oracle.com
  Commit Date: 1719003263
  Commit Message:
    selftests/bpf: Match tests against regular expression

This patch changes a few tests to make use of regular expressions.
Fixed tests otherwise fail when compiled with GCC.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240617141458.471620-3-cupertino.miranda@oracle.com

  Parent Hashes: f06ae6194f278444201e0b041a00192d794f83b6
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This patch updates selftests to use regular expressions to fix compatibility issues with GCC.', 'keywords': 'selftests, regular expressions, GCC', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: f06ae6194f278444201e0b041a00192d794f83b6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f06ae6194f278444201e0b041a00192d794f83b6
  Author Name: Cupertino Miranda
  Author Email: cupertino.miranda@oracle.com
  Commit Date: 1719003263
  Commit Message:
    selftests/bpf: Support checks against a regular expression

Add support for __regex and __regex_unpriv macros to check the test
execution output against a regular expression. This is similar to __msg
and __msg_unpriv
  Parent Hashes: cc5083d1f3881624ad2de1f3cbb3a07e152cb254
  Refs:  however those expect do substring matching.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240617141458.471620-2-cupertino.miranda@oracle.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added support for regex matching in selftests to verify test outputs against regular expressions.', 'keywords': 'regex,selftests,macros', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cfa1a2329a691ffd991fcf7248a57d752e712881
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cfa1a2329a691ffd991fcf7248a57d752e712881
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1719000261
  Commit Message:
    bpf: Fix overrunning reservations in ringbuf

The BPF ring buffer internally is implemented as a power-of-2 sized circular
buffer
  Parent Hashes: 2673315947c9f3890ad34a8196f62142e4ddef5a
  Refs:  with two logical and ever-increasing counters: consumer_pos is the
consumer counter to show which logical position the consumer consumed the
data

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes an issue of overrunning reservations in the eBPF ring buffer.', 'keywords': 'bpf, ringbuf, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2673315947c9f3890ad34a8196f62142e4ddef5a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2673315947c9f3890ad34a8196f62142e4ddef5a
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1718993929
  Commit Message:
    selftests/bpf: Tests with may_goto and jumps to the 1st insn

Add few tests with may_goto and jumps to the 1st insn.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240619011859.79334-2-alexei.starovoitov@gmail.com

  Parent Hashes: 5337ac4c9b807bc46baa0713121a0afa8beacd70
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test cases for may_goto and jumps to the first instruction in selftests/bpf.', 'keywords': 'tests,may_goto,jumps', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5337ac4c9b807bc46baa0713121a0afa8beacd70
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5337ac4c9b807bc46baa0713121a0afa8beacd70
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1718993920
  Commit Message:
    bpf: Fix the corner case with may_goto and jump to the 1st insn.

When the following program is processed by the verifier:
L1: may_goto L2
    goto L1
L2: w0 = 0
    exit

the may_goto insn is first converted to:
L1: r11 = *(u64 *)(r10 -8)
    if r11 == 0x0 goto L2
    r11 -= 1
    *(u64 *)(r10 -8) = r11
    goto L1
L2: w0 = 0
    exit

then later as the last step the verifier inserts:
  *(u64 *)(r10 -8) = BPF_MAX_LOOPS
as the first insn of the program to initialize loop count.

When the first insn happens to be a branch target of some jmp the
bpf_patch_insn_data() logic will produce:
L1: *(u64 *)(r10 -8) = BPF_MAX_LOOPS
    r11 = *(u64 *)(r10 -8)
    if r11 == 0x0 goto L2
    r11 -= 1
    *(u64 *)(r10 -8) = r11
    goto L1
L2: w0 = 0
    exit

because instruction patching adjusts all jmps and calls
  Parent Hashes: 66b5867150630e8f9c9a2b7430e55a3beaa83a5b
  Refs:  but for this
particular corner case it's incorrect and the L1 label should be one
instruction down

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a corner case in the eBPF verifier related to jump target and loop initialization.', 'keywords': 'verifier, jump, loop', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cc5083d1f3881624ad2de1f3cbb3a07e152cb254
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cc5083d1f3881624ad2de1f3cbb3a07e152cb254
  Author Name: Donglin Peng
  Author Email: dolinux.peng@gmail.com
  Commit Date: 1718992817
  Commit Message:
    libbpf: Checking the btf_type kind when fixing variable offsets

I encountered an issue when building the test_progs from the repository [1]:

  $ pwd
  /work/Qemu/x86_64/linux-6.10-rc2/tools/testing/selftests/bpf/

  $ make test_progs V=1
  [...]
  ./tools/sbin/bpftool gen object ./ip_check_defrag.bpf.linked2.o ./ip_check_defrag.bpf.linked1.o
  libbpf: failed to find symbol for variable 'bpf_dynptr_slice' in section '.ksyms'
  Error: failed to link './ip_check_defrag.bpf.linked1.o': No such file or directory (2)
  [...]

Upon investigation
  Parent Hashes: 6ddf3a9abd9fdfdd63d8c906fc1393f7950c23f4
  Refs:  I discovered that the btf_types referenced in the '.ksyms'
section had a kind of BTF_KIND_FUNC instead of BTF_KIND_VAR:

  $ bpftool btf dump file ./ip_check_defrag.bpf.linked1.o
  [...]
  [2] DATASEC '.ksyms' size=0 vlen=2
        type_id=16 offset=0 size=0 (FUNC 'bpf_dynptr_from_skb')
        type_id=17 offset=0 size=0 (FUNC 'bpf_dynptr_slice')
  [...]
  [16] FUNC 'bpf_dynptr_from_skb' type_id=82 linkage=extern
  [17] FUNC 'bpf_dynptr_slice' type_id=85 linkage=extern
  [...]

For a detailed analysis

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit addresses an issue with BTF_KIND_FUNC being incorrectly used instead of BTF_KIND_VAR in the libbpf component.', 'keywords': 'btf_type, libbpf, variable', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6ddf3a9abd9fdfdd63d8c906fc1393f7950c23f4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6ddf3a9abd9fdfdd63d8c906fc1393f7950c23f4
  Author Name: Matt Bobrowski
  Author Email: mattbobrowski@google.com
  Commit Date: 1718992557
  Commit Message:
    bpf: Add security_file_post_open() LSM hook to sleepable_lsm_hooks

The new generic LSM hook security_file_post_open() was recently added
to the LSM framework in commit 8f46ff5767b0b ("security: Introduce
file_post_open hook"). Let's proactively add this generic LSM hook to
the sleepable_lsm_hooks BTF ID set
  Parent Hashes: 651337c7ca82c259bf5c8fe9beda9673531a0031
  Refs:  because I can't see there being
any strong reasons not to

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add security_file_post_open LSM hook to sleepable_lsm_hooks BTF ID set in eBPF.', 'keywords': 'security,Lsm hook,sleepable_lsm_hooks', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: 651337c7ca82c259bf5c8fe9beda9673531a0031
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 651337c7ca82c259bf5c8fe9beda9673531a0031
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1718992389
  Commit Message:
    bpftool: Allow compile-time checks of BPF map auto-attach support in skeleton

New versions of bpftool now emit additional link placeholders for BPF
maps (struct_ops maps are the only maps right now that support
attachment)
  Parent Hashes: 717d6313bba1b3179f0bf1026aaec6b7e26f484e
  Refs:  and set up BPF skeleton in such a way that libbpf will
auto-attach BPF maps automatically

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enhances bpftool to support compile-time checks for BPF map auto-attach in skeletons.', 'keywords': 'bpftool,BPF map,auto-attach', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 717d6313bba1b3179f0bf1026aaec6b7e26f484e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 717d6313bba1b3179f0bf1026aaec6b7e26f484e
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1718991156
  Commit Message:
    bpf: Change bpf_session_cookie return value to __u64 *

This reverts [1] and changes return value for bpf_session_cookie
in bpf selftests. Having long * might lead to problems on 32-bit
architectures.

Fixes: 2b8dd87332cd ("bpf: Make bpf_session_cookie() kfunc return long *")
Suggested-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240619081624.1620152-1-jolsa@kernel.org

  Parent Hashes: 1ae7a19e37630d3235bc68cac9da4e032cad8136
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit reverts and modifies the return type of bpf_session_cookie to __u64 * for compatibility with 32-bit architectures.', 'keywords': 'bpf, session_cookie, architectures', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c28947de2bed40217cf256c5d0d16880054fcf13
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c28947de2bed40217cf256c5d0d16880054fcf13
  Author Name: Ido Schimmel
  Author Email: idosch@nvidia.com
  Commit Date: 1718976632
  Commit Message:
    mlxsw: spectrum_buffers: Fix memory corruptions on Spectrum-4 systems

The following two shared buffer operations make use of the Shared Buffer
Status Register (SBSR):

 # devlink sb occupancy snapshot pci/0000:01:00.0
 # devlink sb occupancy clearmax pci/0000:01:00.0

The register has two masks of 256 bits to denote on which ingress /
egress ports the register should operate on. Spectrum-4 has more than
256 ports
  Parent Hashes: 0602697d6f4d72b0bc5edbc76afabf6aaa029a69
  Refs:  so the register was extended by cited commit with a new
'port_page' field.

However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed memory corruption issues on Spectrum-4 systems by adjusting shared buffer register operations.', 'keywords': 'memory corruption,Spectrum-4,register', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 8cab7cdcf5aebec354ede98bca28c08dd9df924c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8cab7cdcf5aebec354ede98bca28c08dd9df924c
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1718941364
  Commit Message:
    selftests/bpf: Use start_server_str in test_tcp_check_syncookie_user

Since start_server_str() is added now
  Parent Hashes: fb69f71cf585aabb2f59c6d7958bccfaebe64f5d
  Refs:  it can be used in script
test_tcp_check_syncookie_user.c instead of start_server_addr() to
simplify the code.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/5d2f442261d37cff16c1f1b21a2b188508ab67fa.1718932493.git.tanggeliang@kylinos.cn
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor test_tcp_check_syncookie_user.c to use start_server_str for code simplification.', 'keywords': 'selftests,bpf,simplify', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: fb69f71cf585aabb2f59c6d7958bccfaebe64f5d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fb69f71cf585aabb2f59c6d7958bccfaebe64f5d
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1718941364
  Commit Message:
    selftests/bpf: Use start_server_str in mptcp

Since start_server_str() is added now
  Parent Hashes: 7f0d5140a6d69d3e63467a220a2a1e0c9ec1463a
  Refs:  it can be used in mptcp.c in
start_mptcp_server() instead of using helpers make_sockaddr() and
start_server_addr() to simplify the code.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/16fb3e2cd60b64b5470b0e69f1aa233feaf2717c.1718932493.git.tanggeliang@kylinos.cn
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Simplify mptcp selftest code by using start_server_str function instead of additional helpers.', 'keywords': 'mptcp,selftests,simplify', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs', "It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 7f0d5140a6d69d3e63467a220a2a1e0c9ec1463a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7f0d5140a6d69d3e63467a220a2a1e0c9ec1463a
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1718941364
  Commit Message:
    selftests/bpf: Drop noconnect from network_helper_opts

In test_bpf_ip_check_defrag_ok()
  Parent Hashes: bbca57aa378b43d25af2ec360b3e8bc4185d65cf
  Refs:  the new helper client_socket() can be
used to replace connect_to_fd_opts() with "noconnect" opts

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit removes 'noconnect' option from network_helper_opts in selftests/bpf.", 'keywords': 'noconnect, network_helper_opts, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bbca57aa378b43d25af2ec360b3e8bc4185d65cf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bbca57aa378b43d25af2ec360b3e8bc4185d65cf
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1718941364
  Commit Message:
    selftests/bpf: Add client_socket helper

This patch extracts a new helper client_socket() from connect_to_fd_opts()
to create the client socket
  Parent Hashes: 08a5206240d3763e0c6d91a9a4a9bfbb8fc9600c
  Refs:  but don't connect to the server. Then
connect_to_fd_opts() can be implemented using client_socket() and
connect_fd_to_addr(). This helper can be used in connect_to_addr() too

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces a new client_socket helper function for socket management in selftests/bpf.', 'keywords': 'helper, client_socket, selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 08a5206240d3763e0c6d91a9a4a9bfbb8fc9600c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 08a5206240d3763e0c6d91a9a4a9bfbb8fc9600c
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1718941364
  Commit Message:
    selftests/bpf: Use connect_to_addr in connect_to_fd_opt

This patch moves "post_socket_cb" and "noconnect" into connect_to_addr()
  Parent Hashes: 34ad6ec972525b903d4680202d7b8360f71d0d89
  Refs: 
then connect_to_fd_opts() can be implemented by getsockname() and
connect_to_addr(). This change makes connect_to_* interfaces more unified.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/4569c30533e14c22fae6c05070aad809720551c1.1718932493.git.tanggeliang@kylinos.cn
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit unifies the connect_to_fd_opts and connect_to_addr interfaces in selftests/bpf by moving "post_socket_cb" and "noconnect" into connect_to_addr.', 'keywords': 'selftests,bpf,connect_to_addr', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 34ad6ec972525b903d4680202d7b8360f71d0d89
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 34ad6ec972525b903d4680202d7b8360f71d0d89
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1718941364
  Commit Message:
    selftests/bpf: Drop type from network_helper_opts

The opts.{type
  Parent Hashes: bf977ee4a9e2ad8a41b3a2497aada5e7eb09eaea
  Refs:  noconnect} is at least a bit non intuitive or unnecessary.
The only use case now is in test_bpf_ip_check_defrag_ok which ends up
bypassing most (or at least some) of the connect_to_fd_opts() logic. It's
much better that test should have its own connect_to_fd_opts() instead.

This patch adds a new "type" parameter for connect_to_fd_opts()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit modifies test logic in connect_to_fd_opts for better functionality separation in selftests/bpf.', 'keywords': 'selftests, network_helper_opts, connect_to_fd_opts', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bf977ee4a9e2ad8a41b3a2497aada5e7eb09eaea
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bf977ee4a9e2ad8a41b3a2497aada5e7eb09eaea
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1718938233
  Commit Message:
    Merge branch 'fix-compiler-warnings-looking-for-suggestions'

Rafael Passos says:

====================
Fix compiler warnings
  Parent Hashes: 3b06304370931f90cd6f50ea9dd55603429b13dc 21ab4980e02d495174bc64c00ceb4d3cf87fadb1
  Refs:  looking for suggestions

Hi

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes compiler warnings by merging relevant changes.', 'keywords': 'fix,compiler,warnings', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 21ab4980e02d495174bc64c00ceb4d3cf87fadb1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 21ab4980e02d495174bc64c00ceb4d3cf87fadb1
  Author Name: Rafael Passos
  Author Email: rafael@rcpassos.me
  Commit Date: 1718938226
  Commit Message:
    bpf: remove redeclaration of new_n in bpf_verifier_vlog

This new_n is defined in the start of this function.
Its value is overwritten by `new_n = min(n
  Parent Hashes: ab224b9ef7c4eaa752752455ea79bd7022209d5d
  Refs:  log->len_total);`
a couple lines before my change

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed redundant redeclaration of variable new_n in bpf_verifier_vlog function.', 'keywords': 'redundant,declaration,bpf_verifier', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ab224b9ef7c4eaa752752455ea79bd7022209d5d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ab224b9ef7c4eaa752752455ea79bd7022209d5d
  Author Name: Rafael Passos
  Author Email: rafael@rcpassos.me
  Commit Date: 1718938226
  Commit Message:
    bpf: remove unused parameter in __bpf_free_used_btfs

Fixes a compiler warning. The __bpf_free_used_btfs function
was taking an extra unused struct bpf_prog_aux *aux param

Signed-off-by: Rafael Passos <rafael@rcpassos.me>
Link: https://lore.kernel.org/r/20240615022641.210320-3-rafael@rcpassos.me
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 9919c5c98cb25dbf7e76aadb9beab55a2a25f830
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove unused parameter in __bpf_free_used_btfs function to fix compiler warning.', 'keywords': 'unused parameter, compiler warning, bpf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9919c5c98cb25dbf7e76aadb9beab55a2a25f830
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9919c5c98cb25dbf7e76aadb9beab55a2a25f830
  Author Name: Rafael Passos
  Author Email: rafael@rcpassos.me
  Commit Date: 1718938226
  Commit Message:
    bpf: remove unused parameter in bpf_jit_binary_pack_finalize

Fixes a compiler warning. the bpf_jit_binary_pack_finalize function
was taking an extra bpf_prog parameter that went unused.
This removves it and updates the callers accordingly.

Signed-off-by: Rafael Passos <rafael@rcpassos.me>
Link: https://lore.kernel.org/r/20240615022641.210320-2-rafael@rcpassos.me
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 3b06304370931f90cd6f50ea9dd55603429b13dc
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove unused parameter from bpf_jit_binary_pack_finalize to fix compiler warning.', 'keywords': 'unused parameter, compiler warning, bpf_jit_binary_pack_finalize', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3b06304370931f90cd6f50ea9dd55603429b13dc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3b06304370931f90cd6f50ea9dd55603429b13dc
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1718938109
  Commit Message:
    Merge branch 'bpf-verifier-correct-tail_call_reachable-for-bpf-prog'

Leon Hwang says:

====================
bpf
  Parent Hashes: f6afdaf72af7583d251bd569ded8d7d1eeb849c2 f663a03c8e35c5156bad073a4a8f5e673d656e3f
  Refs:  verifier: Correct tail_call_reachable for bpf prog

It's confusing to inspect 'prog->aux->tail_call_reachable' with drgn[0]

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge branch to correct tail_call_reachable for BPF programs.', 'keywords': 'merge, verifier, tail_call_reachable', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f663a03c8e35c5156bad073a4a8f5e673d656e3f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f663a03c8e35c5156bad073a4a8f5e673d656e3f
  Author Name: Leon Hwang
  Author Email: hffilwlqm@gmail.com
  Commit Date: 1718938109
  Commit Message:
    bpf
  Parent Hashes: 01793ed86b5d7df1e956520b5474940743eb7ed8
  Refs:  x64: Remove tail call detection

As 'prog->aux->tail_call_reachable' is correct for tail call present

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes tail call detection from x64, relying on prog->aux->tail_call_reachable.', 'keywords': 'tail call detection, x64, prog->aux->tail_call_reachable', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 01793ed86b5d7df1e956520b5474940743eb7ed8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 01793ed86b5d7df1e956520b5474940743eb7ed8
  Author Name: Leon Hwang
  Author Email: hffilwlqm@gmail.com
  Commit Date: 1718938109
  Commit Message:
    bpf
  Parent Hashes: f6afdaf72af7583d251bd569ded8d7d1eeb849c2
  Refs:  verifier: Correct tail_call_reachable for bpf prog

It's confusing to inspect 'prog->aux->tail_call_reachable' with drgn[0]

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Corrects faulty 'tail_call_reachable' inspection in eBPF verifier.", 'keywords': 'verifier, tail_call_reachable, bpf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d5a7fc58da039903b332041e8c67daae36f08b50
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d5a7fc58da039903b332041e8c67daae36f08b50
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1718905790
  Commit Message:
    Merge tag 'net-6.10-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 "Including fixes from wireless
  Parent Hashes: 042742a1ff1f37ca88c303a9e61afc8c56b23657 fba383985354e83474f95f36d7c65feb75dba19d
  Refs:  bpf and netfilter.

  Happy summer solstice! The line count is a bit inflated by a selftest
  and update to a driver's FW interface header

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes including wireless updates and selftest enhancements.', 'keywords': 'networking, wireless, selftest', 'commit_classification': "It's a bug fix.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 6cd4a78d962bebbaf8beb7d2ead3f34120e3f7b2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6cd4a78d962bebbaf8beb7d2ead3f34120e3f7b2
  Author Name: Ignat Korchagin
  Author Email: ignat@cloudflare.com
  Commit Date: 1718872994
  Commit Message:
    net: do not leave a dangling sk pointer
  Parent Hashes: f9ae848904289ddb16c7c9e4553ed4c64300de49
  Refs:  when socket creation fails

It is possible to trigger a use-after-free by:
  * attaching an fentry probe to __sock_release() and the probe calling the
    bpf_get_socket_cookie() helper
  * running traceroute -I 1.1.1.1 on a freshly booted VM

A KASAN enabled kernel will log something like below (decoded and stripped):
==================================================================
BUG: KASAN: slab-use-after-free in __sock_gen_cookie (./arch/x86/include/asm/atomic64_64.h:15 ./include/linux/atomic/atomic-arch-fallback.h:2583 ./include/linux/atomic/atomic-instrumented.h:1611 net/core/sock_diag.c:29)
Read of size 8 at addr ffff888007110dd8 by task traceroute/299

CPU: 2 PID: 299 Comm: traceroute Tainted: G            E      6.10.0-rc2+ #2
Hardware name: QEMU Standard PC (i440FX + PIIX

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix use-after-free vulnerability related to dangling socket pointer during certain network operations.', 'keywords': 'use-after-free,dangling pointer,socket', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 66b5867150630e8f9c9a2b7430e55a3beaa83a5b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 66b5867150630e8f9c9a2b7430e55a3beaa83a5b
  Author Name: Matt Bobrowski
  Author Email: mattbobrowski@google.com
  Commit Date: 1718724886
  Commit Message:
    bpf: Update BPF LSM maintainer list

After catching up with KP recently
  Parent Hashes: b90d77e5fd784ada62ddd714d15ee2400c28e1cf
  Refs:  we discussed that I will be now be
responsible for co-maintaining the BPF LSM. Adding myself as
designated maintainer of the BPF LSM

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added Matt Bobrowski as a co-maintainer for the BPF LSM component.', 'keywords': 'BPF LSM, maintainer, update', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: b90d77e5fd784ada62ddd714d15ee2400c28e1cf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b90d77e5fd784ada62ddd714d15ee2400c28e1cf
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1718723986
  Commit Message:
    bpf: Fix remap of arena.

The bpf arena logic didn't account for mremap operation. Add a refcnt for
multiple mmap events to prevent use-after-free in arena_vm_close.

Fixes: 317460317a02 ("bpf: Introduce bpf_arena.")
Reported-by: Pengfei Xu <pengfei.xu@intel.com>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Barret Rhoden <brho@google.com>
Tested-by: Pengfei Xu <pengfei.xu@intel.com>
Closes: https://lore.kernel.org/bpf/Zmuw29IhgyPNKnIM@xpf.sh.intel.com
Link: https://lore.kernel.org/bpf/20240617171812.76634-1-alexei.starovoitov@gmail.com

  Parent Hashes: bfbcb2c9d2978a28e9f0a77100170dc14fcf7c79
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix use-after-free bug in bpf_arena by adding a refcnt for mremap operations.', 'keywords': 'bpf, arena, refcnt', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f6afdaf72af7583d251bd569ded8d7d1eeb849c2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f6afdaf72af7583d251bd569ded8d7d1eeb849c2
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1718660505
  Commit Message:
    Merge branch 'bpf-support-resilient-split-btf'

Alan Maguire says:

====================
bpf: support resilient split BTF

Split BPF Type Format (BTF) provides huge advantages in that kernel
modules only have to provide type information for types that they do not
share with the core kernel; for core kernel types
  Parent Hashes: dedf56d775c0bebbc3003bfb988dddaf0a583c28 6ba77385f386053cea2a1cad33717de74a26db4e
  Refs:  split BTF refers to
core kernel BTF type ids.  So for a STRUCT sk_buff

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds support for resilient split BPF Type Format (BTF) to improve kernel module type handling.', 'keywords': 'resilient,BTF,kernel', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6ba77385f386053cea2a1cad33717de74a26db4e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6ba77385f386053cea2a1cad33717de74a26db4e
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1718660311
  Commit Message:
    resolve_btfids: Handle presence of .BTF.base section

Now that btf_parse_elf() handles .BTF.base section presence
  Parent Hashes: c86f180ffc993975fed5907a869fc9b1555d0cfb
  Refs: 
we need to ensure that resolve_btfids uses .BTF.base when present
rather than the vmlinux base BTF passed in via the -B option.
Detect .BTF.base section presence and unset the base BTF path
to ensure that BTF ELF parsing will do the right thing.

Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240613095014.357981-7-alan.maguire@oracle.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit ensures resolve_btfids uses the .BTF.base section when present for BTF ELF parsing.', 'keywords': 'BTF base, resolve_btfids, BTF ELF parsing', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c86f180ffc993975fed5907a869fc9b1555d0cfb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c86f180ffc993975fed5907a869fc9b1555d0cfb
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1718660311
  Commit Message:
    libbpf: Make btf_parse_elf process .BTF.base transparently

Update btf_parse_elf() to check if .BTF.base section is present.
The logic is as follows:

  if .BTF.base section exists:
     distilled_base := btf_new(.BTF.base)
  if distilled_base:
     btf := btf_new(.BTF
  Parent Hashes: affdeb50616b190c3236cc2bf116e1b931a43be2
  Refs:  .base_btf=distilled_base)
     if base_btf:
        btf_relocate(btf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance libbpf to handle .BTF.base section transparently in btf_parse_elf function.', 'keywords': 'libbpf,BTF,parse_elf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: affdeb50616b190c3236cc2bf116e1b931a43be2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: affdeb50616b190c3236cc2bf116e1b931a43be2
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1718660311
  Commit Message:
    selftests/bpf: Extend distilled BTF tests to cover BTF relocation

Ensure relocated BTF looks as expected; in this case identical to
original split BTF
  Parent Hashes: 19e00c897d5031bed969dd79af28e899e038009f
  Refs:  with a few duplicate anonymous types added to
split BTF by the relocation process.  Also add relocation tests
for edge cases like missing type in base BTF and multiple types
of the same name.

Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240613095014.357981-5-alan.maguire@oracle.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extend selftests for BPF to cover BTF relocation scenarios, ensuring consistency with original BTF.', 'keywords': 'BTF,relocation,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 19e00c897d5031bed969dd79af28e899e038009f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 19e00c897d5031bed969dd79af28e899e038009f
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1718660311
  Commit Message:
    libbpf: Split BTF relocation

Map distilled base BTF type ids referenced in split BTF and their
references to the base BTF passed in
  Parent Hashes: eb20e727c4343ad591cff2bef243590c77f62cf1
  Refs:  and if the mapping succeeds

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors BTF relocation to map base BTF type ids in libbpf.', 'keywords': 'BTF, libbpf, relocation', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: eb20e727c4343ad591cff2bef243590c77f62cf1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: eb20e727c4343ad591cff2bef243590c77f62cf1
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1718660311
  Commit Message:
    selftests/bpf: Test distilled base
  Parent Hashes: 58e185a0dc359a6c1c9eff348d7badfc9f722159
  Refs:  split BTF generation

Test generation of split+distilled base BTF

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Test case added for generating split and distilled base BTF.', 'keywords': 'selftests, BPF, BTF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 58e185a0dc359a6c1c9eff348d7badfc9f722159
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 58e185a0dc359a6c1c9eff348d7badfc9f722159
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1718660311
  Commit Message:
    libbpf: Add btf__distill_base() creating split BTF with distilled base BTF

To support more robust split BTF
  Parent Hashes: dedf56d775c0bebbc3003bfb988dddaf0a583c28
  Refs:  adding supplemental context for the
base BTF type ids that split BTF refers to is required.  Without such
references

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit introduces a new function btf__distill_base() to handle split BTF with distilled base BTF.', 'keywords': 'libbpf, split, BTF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bfbcb2c9d2978a28e9f0a77100170dc14fcf7c79
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bfbcb2c9d2978a28e9f0a77100170dc14fcf7c79
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1718646356
  Commit Message:
    Merge branch 'bpf-fix-missed-var_off-related-to-movsx-in-verifier'

Yonghong Song says:

====================
bpf: Fix missed var_off related to movsx in verifier

Zac reported a verification issue ([1]) where verification unexpectedly succeeded.
This is due to missing proper var_off setting in verifier related to
movsx insn. I found another similar issue as well. This patch set fixed
both problems and added three inline asm tests to test these fixes.

  [1] https://lore.kernel.org/bpf/CAADnVQLPU0Shz7dWV4bn2BgtGdxN3uFHPeobGBA72tpg5Xoykw@mail.gmail.com/
====================

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240615174621.3994321-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 143492fce36161402fa2f45a0756de7ff69c366a a62293c33b058415237c55058a6d20de313a2e61
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes a missed var_off issue related to movsx in the eBPF verifier and adds inline asm tests.', 'keywords': 'fix, var_off, verifier', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a62293c33b058415237c55058a6d20de313a2e61
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a62293c33b058415237c55058a6d20de313a2e61
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1718646347
  Commit Message:
    selftests/bpf: Add a few tests to cover

Add three unit tests in verifier_movsx.c to cover
cases where missed var_off setting can cause
unexpected verification success or failure.

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240615174637.3995589-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 44b7f7151dfc2e0947f39ed4b9bc4b0c2ccd46fc
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add three unit tests in verifier_movsx.c to improve eBPF verifier coverage.', 'keywords': 'unit tests, verifier, coverage', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 44b7f7151dfc2e0947f39ed4b9bc4b0c2ccd46fc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 44b7f7151dfc2e0947f39ed4b9bc4b0c2ccd46fc
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1718646346
  Commit Message:
    bpf: Add missed var_off setting in coerce_subreg_to_size_sx()

In coerce_subreg_to_size_sx()
  Parent Hashes: 380d5f89a4815ff88461a45de2fb6f28533df708
  Refs:  for the case where upper
sign extension bits are the same for smax32 and smin32
values

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds missing var_off setting in the coerce_subreg_to_size_sx() function for sign extension bits handling.', 'keywords': 'var_off, sign extension, coerce_subreg_to_size_sx', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 380d5f89a4815ff88461a45de2fb6f28533df708
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 380d5f89a4815ff88461a45de2fb6f28533df708
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1718646346
  Commit Message:
    bpf: Add missed var_off setting in set_sext32_default_val()

Zac reported a verification failure and Alexei reproduced the issue
with a simple reproducer ([1]). The verification failure is due to missed
setting for var_off.

The following is the reproducer in [1]:
  0: R1=ctx() R10=fp0
  0: (71) r3 = *(u8 *)(r10 -387)        ;
     R3_w=scalar(smin=smin32=0
  Parent Hashes: 143492fce36161402fa2f45a0756de7ff69c366a
  Refs: smax=umax=smax32=umax32=255

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a verification failure by adding a missed var_off setting in set_sext32_default_val function.', 'keywords': 'verification, var_off, sext32', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4314175af49668ab20c0d60d7d7657986e1d0c7c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4314175af49668ab20c0d60d7d7657986e1d0c7c
  Author Name: David S. Miller
  Author Email: davem@davemloft.net
  Commit Date: 1718626449
  Commit Message:
    Merge branch 'net-smc-IPPROTO_SMC'

D. Wythe says:

====================
Introduce IPPROTO_SMC

This patch allows to create smc socket via AF_INET
  Parent Hashes: f22b4b55edb507a2b30981e133b66b642be4d13f d25a92ccae6bed02327b63d138e12e7806830f78
  Refs: 
similar to the following code

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces new support for creating sockets using the IPPROTO_SMC protocol in the AF_INET socket family.', 'keywords': 'IPPROTO_SMC, smc socket, AF_INET', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: d25a92ccae6bed02327b63d138e12e7806830f78
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d25a92ccae6bed02327b63d138e12e7806830f78
  Author Name: D. Wythe
  Author Email: alibuda@linux.alibaba.com
  Commit Date: 1718626449
  Commit Message:
    net/smc: Introduce IPPROTO_SMC

This patch allows to create smc socket via AF_INET
  Parent Hashes: 13543d02c90d6195b31bef8fb51dfeff77c0b368
  Refs: 
similar to the following code

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces IPPROTO_SMC to allow creating smc sockets via AF_INET.', 'keywords': 'IPPROTO_SMC, smc, socket', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: c64da10adb57a135bf91e32202d7077931472533
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c64da10adb57a135bf91e32202d7077931472533
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1718413030
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-06-14

We've added 8 non-merge commits during the last 2 day(s) which contain
a total of 9 files changed
  Parent Hashes: 1afe4a64379f65e7bd0c841e6ba7adf312b4c928 7bdcedd5c8fb88e7176b93812b139eca5fe0aa46
  Refs:  92 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge tag for-netdev from BPF repository, incorporating 8 non-merge commits affecting 9 files.', 'keywords': 'merge, non-merge, netdev', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: dedf56d775c0bebbc3003bfb988dddaf0a583c28
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dedf56d775c0bebbc3003bfb988dddaf0a583c28
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1718394760
  Commit Message:
    selftests/bpf: Add tests for add_const

Improve arena based tests and add several C and asm tests
with specific pattern.
These tests would have failed without add_const verifier support.

Also add several loop_inside_iter*() tests that are not related to add_const
  Parent Hashes: 6870bdb3f4f2991193449f9de57109b3e263f55c
  Refs: 
but nice to have.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240613013815.953-5-alexei.starovoitov@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add and improve eBPF selftests for the add_const verifier feature.', 'keywords': 'selftests, add_const, verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6870bdb3f4f2991193449f9de57109b3e263f55c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6870bdb3f4f2991193449f9de57109b3e263f55c
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1718394760
  Commit Message:
    bpf: Support can_loop/cond_break on big endian

Add big endian support for can_loop/cond_break macros.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240613013815.953-4-alexei.starovoitov@gmail.com

  Parent Hashes: 98d7ca374ba4b39e7535613d40e159f09ca14da2
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for can_loop and cond_break macros on big endian systems.', 'keywords': 'big endian,can_loop,cond_break', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 98d7ca374ba4b39e7535613d40e159f09ca14da2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 98d7ca374ba4b39e7535613d40e159f09ca14da2
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1718394759
  Commit Message:
    bpf: Track delta between "linked" registers.

Compilers can generate the code
  r1 = r2
  r1 += 0x1
  if r2 < 1000 goto ...
  use knowledge of r2 range in subsequent r1 operations

So remember constant delta between r2 and r1 and update r1 after 'if' condition.

Unfortunately LLVM still uses this pattern for loops with 'can_loop' construct:
for (i = 0; i < 1000 && can_loop; i++)

The "undo" pass was introduced in LLVM
https://reviews.llvm.org/D121937
to prevent this optimization
  Parent Hashes: 124e8c2b1b5d08a10d3a44ed082eaaf98a78c91f
  Refs:  but it cannot cover all cases.
Instead of fighting middle end optimizer in BPF backend teach the verifier
about this pattern.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240613013815.953-3-alexei.starovoitov@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit teaches the eBPF verifier to track the delta between linked registers for improved optimization handling.', 'keywords': 'delta, verifier, registers', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 124e8c2b1b5d08a10d3a44ed082eaaf98a78c91f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 124e8c2b1b5d08a10d3a44ed082eaaf98a78c91f
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1718394759
  Commit Message:
    bpf: Relax tuple len requirement for sk helpers.

__bpf_skc_lookup() safely handles incorrect values of tuple len
  Parent Hashes: cdbde084d163835ef41cabb59be2292bb0421c51
  Refs: 
hence we can allow zero to be passed as tuple len.
This patch alone doesn't make an observable verifier difference.
It's a trivial improvement that might simplify bpf programs.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240613013815.953-2-alexei.starovoitov@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit relaxes tuple length requirements in bpf_skc_lookup for sk helpers to simplify BPF programs.', 'keywords': 'bpf, tuple len, sk helpers', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 7bdcedd5c8fb88e7176b93812b139eca5fe0aa46
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7bdcedd5c8fb88e7176b93812b139eca5fe0aa46
  Author Name: Tony Ambardar
  Author Email: tony.ambardar@gmail.com
  Commit Date: 1718385277
  Commit Message:
    bpf: Harden __bpf_kfunc tag against linker kfunc removal

BPF kfuncs are often not directly referenced and may be inadvertently
removed by optimization steps during kernel builds
  Parent Hashes: 0a5d3258d7c97295a89d22e54733b54aacb62562
  Refs:  thus the __bpf_kfunc
tag mitigates against this removal by including the __used macro. However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit hardens the __bpf_kfunc tag to prevent linker from removing BPF kfuncs during kernel build optimization.', 'keywords': 'bpf, kfunc, linker', 'commit_classification': "It's a security fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0a5d3258d7c97295a89d22e54733b54aacb62562
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0a5d3258d7c97295a89d22e54733b54aacb62562
  Author Name: Tony Ambardar
  Author Email: tony.ambardar@gmail.com
  Commit Date: 1718384912
  Commit Message:
    compiler_types.h: Define __retain for __attribute__((__retain__))

Some code includes the __used macro to prevent functions and data from
being optimized out. This macro implements __attribute__((__used__))
  Parent Hashes: 2bbe3e5a2f4ef69d13be54f1cf895b4658287080
  Refs: 
which operates at the compiler and IR-level

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit defines a new __retain macro using __attribute__ to enhance compiler-level function and data retention.', 'keywords': 'macro, attribute, retain', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 2bbe3e5a2f4ef69d13be54f1cf895b4658287080
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2bbe3e5a2f4ef69d13be54f1cf895b4658287080
  Author Name: Florian Westphal
  Author Email: fw@strlen.de
  Commit Date: 1718378421
  Commit Message:
    bpf: Avoid splat in pskb_pull_reason

syzkaller builds (CONFIG_DEBUG_NET=y) frequently trigger a debug
hint in pskb_may_pull.

We'd like to retain this debug check because it might hint at integer
overflows and other issues (kernel code should pull headers
  Parent Hashes: b99a95bc56c52a428befbce12d9451fd7a0f3bc2
  Refs:  not huge
value).

In bpf case

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses a debug issue in pskb_may_pull to prevent potential integer overflows when pull headers in BPF.', 'keywords': 'debug, pskb_may_pull, integer overflows', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 33c0fb85b571b0f1bbdbf466e770eebeb29e6f41
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 33c0fb85b571b0f1bbdbf466e770eebeb29e6f41
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356821
  Commit Message:
    HID: bpf: make part of struct hid_device writable

It is useful to change the name
  Parent Hashes: f1a5fb6c7cf637e991cedc799e1470e01e148669
  Refs:  the phys and/or the uniq of a
struct hid_device during .rdesc_fixup().

For example

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit makes part of the struct hid_device writable in the BPF subsystem.', 'keywords': 'HID, struct, writable', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: f1a5fb6c7cf637e991cedc799e1470e01e148669
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f1a5fb6c7cf637e991cedc799e1470e01e148669
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356821
  Commit Message:
    HID: bpf: rework hid_bpf_ops_btf_struct_access

The idea is to provide a list of stucts and their editable fields.

Currently no functional changes are introduced here
  Parent Hashes: bd0747543b3d973df6af0f43965f58965375d524
  Refs:  we will add some
more writeable fields in the next patch.

Acked-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-15-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Rework hid_bpf_ops_btf_struct_access to list structs and editable fields without functional changes.', 'keywords': 'HID,BPF,structs', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: bd0747543b3d973df6af0f43965f58965375d524
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bd0747543b3d973df6af0f43965f58965375d524
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356821
  Commit Message:
    bpf: allow bpf helpers to be used into HID-BPF struct_ops

Without this helpers like bpf_printk() or bpf_map_update() are not
available
  Parent Hashes: c94ae2189acac38b01be60e3b878605fb328782c
  Refs:  making anything but change of bytes impossible to do.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-14-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable bpf helpers within HID-BPF struct_ops to access functions like bpf_printk or bpf_map_update.', 'keywords': 'bpf helpers,HID-BPF,struct_ops', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: c94ae2189acac38b01be60e3b878605fb328782c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c94ae2189acac38b01be60e3b878605fb328782c
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356820
  Commit Message:
    HID: bpf: error on warnings when compiling bpf objects

There is no real reasons to paper over warnings for such small programs.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-13-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: 26ba1e0a982b9efe8b121d7e41dae4fdf118b048
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit ensures BPF object compilation errors on warnings for HID programs.', 'keywords': 'HID,BPF,compilation', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 26ba1e0a982b9efe8b121d7e41dae4fdf118b048
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 26ba1e0a982b9efe8b121d7e41dae4fdf118b048
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356820
  Commit Message:
    HID: bpf: Artist24: remove unused variable

warning: unused variable ‘tilt’ [-Wunused-variable]

Signed-off-by: Peter Hutterer <peter.hutterer@who-t.net>
Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-12-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: 5f42e19de53faf9e6d4455638f75b7c3a3f8d58f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Remove unused variable 'tilt' from HID bpf code.", 'keywords': 'remove, unused, variable', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 5f42e19de53faf9e6d4455638f75b7c3a3f8d58f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5f42e19de53faf9e6d4455638f75b7c3a3f8d58f
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356820
  Commit Message:
    Documentation: HID: add a small blurb on udev-hid-bpf

This is the current decision we took: we don't provide automatic loading
of HID-BPF by the kernel directly
  Parent Hashes: c5958697a5fa29d3ba9332205a88725afe9ed912
  Refs:  but rely on an external tool for it.

This tool is currently udev-hid-bpf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds documentation about using udev-hid-bpf for loading HID-BPF programs.', 'keywords': 'Documentation,HID-BPF,udev-hid-bpf', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: c5958697a5fa29d3ba9332205a88725afe9ed912
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c5958697a5fa29d3ba9332205a88725afe9ed912
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356820
  Commit Message:
    Documentation: HID: amend HID-BPF for struct_ops

Now that we are using struct_ops
  Parent Hashes: 05b3b8f19441b6bf039cec1990de3c75bb9dbbd9
  Refs:  the docs need to be changed.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-10-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates HID-BPF documentation to reflect changes involving struct_ops.', 'keywords': 'Documentation, HID, struct_ops', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 05b3b8f19441b6bf039cec1990de3c75bb9dbbd9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 05b3b8f19441b6bf039cec1990de3c75bb9dbbd9
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356820
  Commit Message:
    selftests/hid: add subprog call test

I got a weird verifier error with a subprog once
  Parent Hashes: 4a86220e046da009bef0948e9f51d1d26d68f93c
  Refs:  so let's have a test
for it.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-9-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a subprogram call test to HID selftests to debug a verifier error.', 'keywords': 'HID,selftests,subprog', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 4a86220e046da009bef0948e9f51d1d26d68f93c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4a86220e046da009bef0948e9f51d1d26d68f93c
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356820
  Commit Message:
    HID: bpf: remove tracing HID-BPF capability

We can now rely on struct_ops as we cleared the users in-tree.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-8-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: 50fe0fc6e206c9b85a0a6cc183ee5513d70179d1
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove HID-BPF tracing capability using struct_ops after clearing in-tree users.', 'keywords': 'HID,BPF,struct_ops', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 50fe0fc6e206c9b85a0a6cc183ee5513d70179d1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 50fe0fc6e206c9b85a0a6cc183ee5513d70179d1
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356820
  Commit Message:
    HID: bpf: convert in-tree fixes into struct_ops

Very mechanical:
- Change HID_BPF_DEVICE_EVENT and HID_BPF_RDESC_FIXUP #defines
- add a matching SEC(".struct_ops.link")
- in ArtistPro16Gen2 make the 2 functions static and have a new one
  calling them

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-7-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: df67602fb8d5a02e40f37efcf4b5cb958c8ca880
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Convert in-tree HID fixes into struct_ops for improved organization and functionality.', 'keywords': 'HID, struct_ops, conversion', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: df67602fb8d5a02e40f37efcf4b5cb958c8ca880
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: df67602fb8d5a02e40f37efcf4b5cb958c8ca880
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356820
  Commit Message:
    HID: bpf: add defines for HID-BPF SEC in in-tree bpf fixes

We are going to switch over struct_ops
  Parent Hashes: e342d6f6f7d82b48c4540b947d8032a3b7b3e6f8
  Refs:  so instead of having to manually
replace all fields one by one

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add defines for HID BPF SEC with in-tree bpf fixes and switch over struct_ops.', 'keywords': 'HID, BPF, fixes', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: e342d6f6f7d82b48c4540b947d8032a3b7b3e6f8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e342d6f6f7d82b48c4540b947d8032a3b7b3e6f8
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356820
  Commit Message:
    HID: samples: convert the 2 HID-BPF samples into struct_ops

This is mostly mechanical: attach_prog is dropped
  Parent Hashes: d7696738d66b4f1379fe77eef61cd1047d7f0773
  Refs:  and
the SEC are converted into struct_ops.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-5-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Convert HID-BPF samples into struct_ops to simplify implementations.', 'keywords': 'HID,struct_ops,samples', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: d7696738d66b4f1379fe77eef61cd1047d7f0773
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d7696738d66b4f1379fe77eef61cd1047d7f0773
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356819
  Commit Message:
    selftests/hid: convert the hid_bpf selftests with struct_ops

We drop the need for the attach() bpf syscall
  Parent Hashes: ebc0d8093e8c97de459615438edefad1a4ac352c
  Refs:  but we need to set up
the hid_id field before calling __load().

The .bpf.c part is mechanical: we create one struct_ops per HID-BPF
program

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit converts HID-BPF selftests to use struct_ops, removing the need for the attach() BPF syscall and setting up the hid_id field before loading.', 'keywords': 'hid_bpf,selftests,struct_ops', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: ebc0d8093e8c97de459615438edefad1a4ac352c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ebc0d8093e8c97de459615438edefad1a4ac352c
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356816
  Commit Message:
    HID: bpf: implement HID-BPF through bpf_struct_ops

We do this implementation in several steps to not have the CI failing:
- first (this patch)
  Parent Hashes: 99b40bf8053fa261d368ef78848961c04aa93c74
  Refs:  we add struct_ops while keeping the existing infra
  available
- then we change the selftests

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implement HID-BPF support using bpf_struct_ops while maintaining existing infrastructure.', 'keywords': 'HIDBPF, bpf_struct_ops, implementation', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 99b40bf8053fa261d368ef78848961c04aa93c74
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 99b40bf8053fa261d368ef78848961c04aa93c74
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356402
  Commit Message:
    HID: bpf: add hid_get/put_device() helpers

no code change
  Parent Hashes: 146a06a0d225cae240065233fd168fb0b95a10ff
  Refs:  but this way we reduce code duplication and we
can export it later.

Link: https://lore.kernel.org/r/20240608-hid_bpf_struct_ops-v3-2-6ac6ade58329@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add hid_get and hid_put_device helpers to reduce code duplication in HID.', 'keywords': 'hid_get, hid_put, helpers', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 146a06a0d225cae240065233fd168fb0b95a10ff
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 146a06a0d225cae240065233fd168fb0b95a10ff
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1718356402
  Commit Message:
    HID: rename struct hid_bpf_ops into hid_ops

Those operations are the ones from HID
  Parent Hashes: 061d1af7b0305227182bd9da60c7706c079348b7
  Refs:  not HID-BPF

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Renamed struct `hid_bpf_ops` to `hid_ops` for improved clarity.', 'keywords': 'HID, rename, ops', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: cdbde084d163835ef41cabb59be2292bb0421c51
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cdbde084d163835ef41cabb59be2292bb0421c51
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1718321585
  Commit Message:
    Merge branch 'bpf-make-trusted-args-nullable'

Vadim Fedorenko says:

====================
bpf: make trusted args nullable

Current verifier checks for the arg to be nullable after checking for
certain pointer types. It prevents programs to pass NULL to kfunc args
even if they are marked as nullable. This patchset adjusts verifier and
changes bpf crypto kfuncs to allow null for IV parameter which is
optional for some ciphers. Benchmark shows ~4% improvements when there
is no need to initialise 0-sized dynptr.

v3:
- add special selftest for nullable parameters
v2:
- adjust kdoc accordingly
====================

Link: https://lore.kernel.org/r/20240613211817.1551967-1-vadfed@meta.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 373a4e13ab4bc947f429fd92409d686fbec57132 2d45ab1eda469c802728d0a74e1601de5e71c098
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve the eBPF verifier to allow nullable kfunc arguments for better performance.', 'keywords': 'nullable, kfunc, verifier', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2d45ab1eda469c802728d0a74e1601de5e71c098
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2d45ab1eda469c802728d0a74e1601de5e71c098
  Author Name: Vadim Fedorenko
  Author Email: vadfed@meta.com
  Commit Date: 1718321584
  Commit Message:
    selftests: bpf: add testmod kfunc for nullable params

Add special test to be sure that only __nullable BTF params can be
replaced by NULL. This patch adds fake kfuncs in bpf_testmod to
properly test different params.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Link: https://lore.kernel.org/r/20240613211817.1551967-6-vadfed@meta.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 9b560751f75f7b2484fa22c781be68f4f9fec2b0
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a bpf_testmod test for nullable BTF parameter handling in kfuncs.', 'keywords': 'testmod,nullable,kfunc', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 9b560751f75f7b2484fa22c781be68f4f9fec2b0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9b560751f75f7b2484fa22c781be68f4f9fec2b0
  Author Name: Vadim Fedorenko
  Author Email: vadfed@meta.com
  Commit Date: 1718321584
  Commit Message:
    selftests: bpf: crypto: adjust bench to use nullable IV

The bench shows some improvements
  Parent Hashes: 9363dc8ddc4e222c4259013ae5428070712910b9
  Refs:  around 4% faster on decrypt.

Before:

Benchmark 'crypto-decrypt' started.
Iter   0 (325.719us): hits    5.105M/s (  5.105M/prod)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adjusts the selftests for bpf crypto to use a nullable IV, resulting in improved decryption performance.', 'keywords': 'selftests,bpf,crypto', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9363dc8ddc4e222c4259013ae5428070712910b9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9363dc8ddc4e222c4259013ae5428070712910b9
  Author Name: Vadim Fedorenko
  Author Email: vadfed@meta.com
  Commit Date: 1718321584
  Commit Message:
    selftests: bpf: crypto: use NULL instead of 0-sized dynptr

Adjust selftests to use nullable option for state and IV arg.

Reviewed-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Link: https://lore.kernel.org/r/20240613211817.1551967-4-vadfed@meta.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 65d6d61d25968d1f13a478a6f303ed8d6b978a77
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adjusts selftests to use nullable option for state and IV argument in BPF.', 'keywords': 'selftests,bpf,crypto', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 65d6d61d25968d1f13a478a6f303ed8d6b978a77
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 65d6d61d25968d1f13a478a6f303ed8d6b978a77
  Author Name: Vadim Fedorenko
  Author Email: vadfed@meta.com
  Commit Date: 1718321584
  Commit Message:
    bpf: crypto: make state and IV dynptr nullable

Some ciphers do not require state and IV buffer
  Parent Hashes: a90797993afcb0eaf6bf47a062ff47eb3810a6d5
  Refs:  but with current
implementation 0-sized dynptr is always needed. With adjustment to
verifier we can provide NULL instead of 0-sized dynptr. Make crypto
kfuncs ready for this.

Reviewed-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Link: https://lore.kernel.org/r/20240613211817.1551967-3-vadfed@meta.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "This commit allows the state and IV dynptr in bpf crypto functions to be nullable, supporting ciphers that don't require them.", 'keywords': 'crypto,state,dynptr', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a90797993afcb0eaf6bf47a062ff47eb3810a6d5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a90797993afcb0eaf6bf47a062ff47eb3810a6d5
  Author Name: Vadim Fedorenko
  Author Email: vadfed@meta.com
  Commit Date: 1718321584
  Commit Message:
    bpf: verifier: make kfuncs args nullalble

Some arguments to kfuncs might be NULL in some cases. But currently it's
not possible to pass NULL to any BTF structures because the check for
the suffix is located after all type checks. Move it to earlier place
to allow nullable args.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Link: https://lore.kernel.org/r/20240613211817.1551967-2-vadfed@meta.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 373a4e13ab4bc947f429fd92409d686fbec57132
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Allow nullable arguments for kfuncs in the BPF verifier by adjusting type check order.', 'keywords': 'verifier, kfuncs, nullable', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b99a95bc56c52a428befbce12d9451fd7a0f3bc2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b99a95bc56c52a428befbce12d9451fd7a0f3bc2
  Author Name: Maciej Żenczykowski
  Author Email: maze@google.com
  Commit Date: 1718303085
  Commit Message:
    bpf: fix UML x86_64 compile failure

pcpu_hot (defined in arch/x86) is not available on user mode linux (ARCH=um)

Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Fixes: 1ae6921009e5 ("bpf: inline bpf_get_smp_processor_id() helper")
Signed-off-by: Maciej Żenczykowski <maze@google.com>
Link: https://lore.kernel.org/r/20240613173146.2524647-1-maze@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: ceb65eb60026e03e1028a99f0ec94f22065e722a
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes UML x86_64 compilation failure by addressing problem with pcpu_hot not being available.', 'keywords': 'UML,x86_64,compile', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6a8260147745fe493d733d4e5f9b327da3720905
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6a8260147745fe493d733d4e5f9b327da3720905
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718302723
  Commit Message:
    bpf: selftests: Do not use generated kfunc prototypes for arena progs

When selftests are built with a new enough clang
  Parent Hashes: 78746f93e903d022c692b9bb3a3e2570167b2dc2
  Refs:  the arena selftests
opt-in to use LLVM address_space attribute annotations for arena
pointers.

These annotations are not emitted by kfunc prototype generation. This
causes compilation errors when clang sees conflicting prototypes.

Fix by opting arena selftests out of using generated kfunc prototypes.

Fixes: 770abbb5a25a ("bpftool: Support dumping kfunc prototypes from BTF")
Reported-by: kernel test robot <lkp@intel.com>
Closes: https://lore.kernel.org/r/202406131810.c1B8hTm8-lkp@intel.com/
Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/fc59a617439ceea9ad8dfbb4786843c2169496ae.1718295425.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix selftests by opting arena selftests out of generated kfunc prototypes due to conflicting prototypes with LLVM address_space attribute annotations.', 'keywords': 'selftests, kfunc prototypes, LLVM', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 78746f93e903d022c692b9bb3a3e2570167b2dc2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 78746f93e903d022c692b9bb3a3e2570167b2dc2
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718302723
  Commit Message:
    bpf: Fix bpf_dynptr documentation comments

The function argument names were changed but the doc comment was not.
Fix htmldocs build warning by updating doc comments.

Fixes: cce4c40b9606 ("bpf: treewide: Align kfunc signatures to prog point-of-view")
Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/d0b0eb05f91e12e5795966153b11998d3fc1d433.1718295425.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 041c1dc988fdffd5eb0c13f1ce5d1b3b0125f208
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix documentation comment mismatches for bpf_dynptr to resolve htmldocs build warnings.', 'keywords': 'documentation, comments, htmldocs', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: ceb65eb60026e03e1028a99f0ec94f22065e722a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ceb65eb60026e03e1028a99f0ec94f22065e722a
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1718302561
  Commit Message:
    selftests/bpf: Add test coverage for reg_set_min_max handling

Add a test case for the jmp32/k fix to ensure selftests have coverage.

Before fix:

  # ./vmtest.sh -- ./test_progs -t verifier_or_jmp32_k
  [...]
  ./test_progs -t verifier_or_jmp32_k
  tester_init:PASS:tester_log_buf 0 nsec
  process_subtest:PASS:obj_open_mem 0 nsec
  process_subtest:PASS:specs_alloc 0 nsec
  run_subtest:PASS:obj_open_mem 0 nsec
  run_subtest:FAIL:unexpected_load_success unexpected success: 0
  #492/1   verifier_or_jmp32_k/or_jmp32_k: bit ops + branch on unknown value:FAIL
  #492     verifier_or_jmp32_k:FAIL
  Summary: 0/0 PASSED
  Parent Hashes: e73cd1cfc2177654e562b04f514be5f0f0b96da2
  Refs:  0 SKIPPED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test case for verifying reg_set_min_max handling in eBPF selftests.', 'keywords': 'test, reg_set_min_max, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: e73cd1cfc2177654e562b04f514be5f0f0b96da2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e73cd1cfc2177654e562b04f514be5f0f0b96da2
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1718302561
  Commit Message:
    bpf: Reduce stack consumption in check_stack_write_fixed_off

The fake_reg moved into env->fake_reg given it consumes a lot of stack
space (120 bytes). Migrate the fake_reg in check_stack_write_fixed_off()
as well now that we have it.

Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/r/20240613115310.25383-2-daniel@iogearbox.net
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 92424801261d1564a0bb759da3cf3ccd69fdf5a2
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Reduced stack space by moving fake_reg to env->fake_reg in check_stack_write_fixed_off.', 'keywords': 'stack, fake_reg, consumption', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 92424801261d1564a0bb759da3cf3ccd69fdf5a2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 92424801261d1564a0bb759da3cf3ccd69fdf5a2
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1718302561
  Commit Message:
    bpf: Fix reg_set_min_max corruption of fake_reg

Juan reported that after doing some changes to buzzer [0] and implementing
a new fuzzing strategy guided by coverage
  Parent Hashes: 26ba7c3f139f843bf46ed0779e30d84641767959
  Refs:  they noticed the following in
one of the probes:

  [...]
  13: (79) r6 = *(u64 *)(r0 +0)         ; R0=map_value(ks=4

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes a corruption issue in reg_set_min_max for fake registers in eBPF.', 'keywords': 'reg_set_min_max, corruption, fake_reg', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 041c1dc988fdffd5eb0c13f1ce5d1b3b0125f208
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 041c1dc988fdffd5eb0c13f1ce5d1b3b0125f208
  Author Name: Vadim Fedorenko
  Author Email: vadfed@meta.com
  Commit Date: 1718281793
  Commit Message:
    selftests/bpf: Validate CHECKSUM_COMPLETE option

Adjust skb program test to run with checksum validation.

Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240606145851.229116-2-vadfed@meta.com

  Parent Hashes: a3cfe84cca28f205761a0450016593b0d728165e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add checksum validation to skb program selftest in bpf.', 'keywords': 'checksum, skb, selftest', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: a3cfe84cca28f205761a0450016593b0d728165e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a3cfe84cca28f205761a0450016593b0d728165e
  Author Name: Vadim Fedorenko
  Author Email: vadfed@meta.com
  Commit Date: 1718281787
  Commit Message:
    bpf: Add CHECKSUM_COMPLETE to bpf test progs

Add special flag to validate that TC BPF program properly updates
checksum information in skb.

Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Jakub Kicinski <kuba@kernel.org>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240606145851.229116-1-vadfed@meta.com

  Parent Hashes: 4ff5747158f323939e2ce8881ca61f3c646948c4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Add CHECKSUM_COMPLETE flag to test TC BPF program's checksum updates in skb.", 'keywords': 'CHECKSUM_COMPLETE, TC, skb', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: d2675fe95fc7e880aecad2d08626131527e084a6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d2675fe95fc7e880aecad2d08626131527e084a6
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1718228043
  Commit Message:
    Merge branch 'net-flow-dissector-allow-explicit-passing-of-netns'

Florian Westphal says:

====================
net: flow dissector: allow explicit passing of netns

Change since last version:
 fix kdoc comment warning reported by kbuild robot
  Parent Hashes: 91579c93a9b207725559e3199870419afd50220f d1dab4f71d372e00e2d34a9c32bf261623e3a95c
  Refs:  no other changes

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges changes to allow explicit passing of netns in net flow dissector.', 'keywords': 'flow,dissector,netns', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b975d3ee5962237c1e2f5d5aeeaaf0dc2173486c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b975d3ee5962237c1e2f5d5aeeaaf0dc2173486c
  Author Name: Florian Westphal
  Author Email: fw@strlen.de
  Commit Date: 1718228018
  Commit Message:
    net: add and use skb_get_hash_net

Years ago flow dissector gained ability to delegate flow dissection
to a bpf program
  Parent Hashes: 91579c93a9b207725559e3199870419afd50220f
  Refs:  scoped per netns.

Unfortunately

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit introduces skb_get_hash_net to leverage flow dissection by bpf programs in the network stack.', 'keywords': 'flow dissection,bpf program,network', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tc/netfilter like programs', 'socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4ff5747158f323939e2ce8881ca61f3c646948c4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4ff5747158f323939e2ce8881ca61f3c646948c4
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1718215292
  Commit Message:
    Merge branch 'bpf-support-dumping-kfunc-prototypes-from-btf'

Daniel Xu says:

====================
bpf: Support dumping kfunc prototypes from BTF

This patchset enables both detecting as well as dumping compilable
prototypes for kfuncs.

The first commit instructs pahole to DECL_TAG kfuncs when available.
This requires v1.27 which was released on 6/11/24. With it
  Parent Hashes: 98b303c9bf05dae932efbd71e18d81f6c64f20d8 770abbb5a25a5b767f1c60ba366aea503728e957
  Refs:  users will
be able to look at BTF inside vmlinux (or modules) and check if the
kfunc they want is available.

The final commit teaches bpftool how to dump kfunc prototypes. This
is done for developer convenience.

The rest of the commits are fixups to enable selftests to use the
newly dumped kfunc prototypes. With these

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds support for dumping kfunc prototypes from BTF for developer convenience.', 'keywords': 'kfunc, BTF, bpftool', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 770abbb5a25a5b767f1c60ba366aea503728e957
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 770abbb5a25a5b767f1c60ba366aea503728e957
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718215292
  Commit Message:
    bpftool: Support dumping kfunc prototypes from BTF

This patch enables dumping kfunc prototypes from bpftool. This is useful
b/c with this patch
  Parent Hashes: c567cba34585514f82600a10587c8813c50e3a7c
  Refs:  end users will no longer have to manually define
kfunc prototypes. For the kernel tree

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This patch enables bpftool to automatically dump kfunc prototypes from BTF, which aids users by eliminating the need for manual definitions.', 'keywords': 'bpftool, kfunc, BTF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c567cba34585514f82600a10587c8813c50e3a7c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c567cba34585514f82600a10587c8813c50e3a7c
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718215291
  Commit Message:
    bpf: selftests: xfrm: Opt out of using generated kfunc prototypes

The xfrm_info selftest locally defines an aliased type such that folks
with CONFIG_XFRM_INTERFACE=m/n configs can still build the selftests.
See commit aa67961f3243 ("selftests/bpf: Allow building bpf tests with CONFIG_XFRM_INTERFACE=[m|n]").

Thus
  Parent Hashes: f709124dd72fe7a3f6ba7764b2ed145c55c33e47
  Refs:  it is simpler if this selftest opts out of using enerated kfunc
prototypes. The preprocessor macro this commit uses will be introduced
in the final commit.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/afe0bb1c50487f52542cdd5230c4aef9e36ce250.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Opt out of using generated kfunc prototypes for xfrm selftest to support CONFIG_XFRM_INTERFACE configurations.', 'keywords': 'selftests, kfunc, xfrm', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f709124dd72fe7a3f6ba7764b2ed145c55c33e47
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f709124dd72fe7a3f6ba7764b2ed145c55c33e47
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718215291
  Commit Message:
    bpf: selftests: nf: Opt out of using generated kfunc prototypes

The bpf-nf selftests play various games with aliased types such that
folks with CONFIG_NF_CONNTRACK=m/n configs can still build the
selftests. See commits:

1058b6a78db2 ("selftests/bpf: Do not fail build if CONFIG_NF_CONNTRACK=m/n")
92afc5329a5b ("selftests/bpf: Fix build errors if CONFIG_NF_CONNTRACK=m")

Thus
  Parent Hashes: cce4c40b960673f9e020835def310f1e89d3a940
  Refs:  it is simpler if these selftests opt out of using generated kfunc
prototypes. The preprocessor macro this commit uses will be introduced
in the final commit.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/044a5b10cb3abd0d71cb1c818ee0bfc4a2239332.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit allows bpf-nf selftests to opt out of using generated kfunc prototypes for compatibility with different CONFIG_NF_CONNTRACK settings.', 'keywords': 'bpf-nf,selftests,kfunc', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cce4c40b960673f9e020835def310f1e89d3a940
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cce4c40b960673f9e020835def310f1e89d3a940
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718215291
  Commit Message:
    bpf: treewide: Align kfunc signatures to prog point-of-view

Previously
  Parent Hashes: ec209ad86324de84ef66990f0e9df0851e45e054
  Refs:  kfunc declarations in bpf_kfuncs.h (and others) used "user
facing" types for kfuncs prototypes while the actual kfunc definitions
used "kernel facing" types. More specifically: bpf_dynptr vs
bpf_dynptr_kern

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Align kfunc signatures to match the program's point-of-view in eBPF.", 'keywords': 'kfunc signatures, alignment, eBPF', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ec209ad86324de84ef66990f0e9df0851e45e054
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ec209ad86324de84ef66990f0e9df0851e45e054
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718215291
  Commit Message:
    bpf: verifier: Relax caller requirements for kfunc projection type args

Currently
  Parent Hashes: 0ce089cbdc6a393bf9ad04964427852800503a58
  Refs:  if a kfunc accepts a projection type as an argument (eg
struct __sk_buff *)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies the eBPF verifier to relax requirements for kfunc projection type arguments.', 'keywords': 'verifier, kfunc, projection', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0ce089cbdc6a393bf9ad04964427852800503a58
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0ce089cbdc6a393bf9ad04964427852800503a58
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718215291
  Commit Message:
    bpf: selftests: Namespace struct_opt callbacks in bpf_dctcp

With generated kfunc prototypes
  Parent Hashes: 2b8dd87332cd2782b5b3f0c423bd6693e487ed30
  Refs:  the existing callback names will
conflict. Fix by namespacing with a bpf_ prefix.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/efe7aadad8a054e5aeeba94b1d2e4502eee09d7a.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Namespace struct_opt callbacks in bpf_dctcp with bpf_ prefix to avoid conflicts.', 'keywords': 'namespace, callbacks, conflict', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2b8dd87332cd2782b5b3f0c423bd6693e487ed30
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2b8dd87332cd2782b5b3f0c423bd6693e487ed30
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718215291
  Commit Message:
    bpf: Make bpf_session_cookie() kfunc return long *

We will soon be generating kfunc prototypes from BTF. As part of that
  Parent Hashes: ac42f636dc11b2e8d6dea9dd5bb10a39c7bec342
  Refs: 
we need to align the manual signatures in bpf_kfuncs.h with the actual
kfunc definitions. There is currently a conflicting signature for
bpf_session_cookie() w.r.t. return type.

The original intent was to return long * and not __u64 *. You can see
evidence of that intent in a3a5113393cc ("selftests/bpf: Add kprobe
session cookie test").

Fix conflict by changing kfunc definition.

Fixes: 5c919acef851 ("bpf: Add support for kprobe session cookie")
Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/7043e1c251ab33151d6e3830f8ea1902ed2604ac.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes signature conflict by changing bpf_session_cookie() kfunc return type to long *.', 'keywords': 'kfunc,long *,signature', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: ac42f636dc11b2e8d6dea9dd5bb10a39c7bec342
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ac42f636dc11b2e8d6dea9dd5bb10a39c7bec342
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718215291
  Commit Message:
    bpf: selftests: Fix bpf_map_sum_elem_count() kfunc prototype

The prototype in progs/map_percpu_stats.c is not in line with how the
actual kfuncs are defined in kernel/bpf/map_iter.c. This causes
compilation errors when kfunc prototypes are generated from BTF.

Fix by aligning with actual kfunc definitions.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/0497e11a71472dcb71ada7c90ad691523ae87c3b.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 89f0b1abac497c47d0851b780abecc756c1e8734
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix the kfunc prototype for bpf_map_sum_elem_count in eBPF selftests to align with kernel definitions.', 'keywords': 'kfunc,prototype,selftests', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 89f0b1abac497c47d0851b780abecc756c1e8734
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 89f0b1abac497c47d0851b780abecc756c1e8734
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718215291
  Commit Message:
    bpf: selftests: Fix bpf_cpumask_first_zero() kfunc prototype

The prototype in progs/nested_trust_common.h is not in line with how the
actual kfuncs are defined in kernel/bpf/cpumask.c. This causes compilation
errors when kfunc prototypes are generated from BTF.

Fix by aligning with actual kfunc definitions.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/437936a4e554b02e04566dd6e3f0a5d08370cc8c.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: dff96e4f5078c6c61fc6c36dddf27b124c4318fc
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes prototype mismatch for bpf_cpumask_first_zero() in selftests to align with kernel kfunc definitions.', 'keywords': 'selftests, prototype, alignment', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: dff96e4f5078c6c61fc6c36dddf27b124c4318fc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dff96e4f5078c6c61fc6c36dddf27b124c4318fc
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718215290
  Commit Message:
    bpf: selftests: Fix fentry test kfunc prototypes

Some prototypes in progs/get_func_ip_test.c were not in line with how the
actual kfuncs are defined in net/bpf/test_run.c. This causes compilation
errors when kfunc prototypes are generated from BTF.

Fix by aligning with actual kfunc definitions.

Also remove two unused prototypes.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/1e68870e7626b7b9c6420e65076b307fc404a2f0.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 718135f5bd24ec10ff38aa0294a7da0a7b99fa89
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed fentry test kfunc prototypes in selftests for correct compilation with BTF.', 'keywords': 'fentry,kfunc,BTF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 718135f5bd24ec10ff38aa0294a7da0a7b99fa89
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 718135f5bd24ec10ff38aa0294a7da0a7b99fa89
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718215290
  Commit Message:
    bpf: selftests: Fix bpf_iter_task_vma_new() prototype

bpf_iter_task_vma_new() is defined as taking a u64 as its 3rd argument.
u64 is a unsigned long long. bpf_experimental.h was defining the
prototype as unsigned long.

Fix by using __u64.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/fab4509bfee914f539166a91c3ff41e949f3df30.1718207789.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: ebb79e96f1ea454fbcc8fe27dfe44e751bd74b4b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes prototype mismatch in bpf_iter_task_vma_new() by correcting the third argument type to __u64.', 'keywords': 'prototype,fix,__u64', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ebb79e96f1ea454fbcc8fe27dfe44e751bd74b4b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ebb79e96f1ea454fbcc8fe27dfe44e751bd74b4b
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1718215290
  Commit Message:
    kbuild: bpf: Tell pahole to DECL_TAG kfuncs

With [0]
  Parent Hashes: 98b303c9bf05dae932efbd71e18d81f6c64f20d8
  Refs:  pahole can now discover kfuncs and inject DECL_TAG
into BTF. With this commit

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable pahole to discover and inject DECL_TAG kfuncs into BTF.', 'keywords': 'pahole, kfuncs, BTF', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bf0baa5bbdc9b99ea081d360f245e5f96e835612
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bf0baa5bbdc9b99ea081d360f245e5f96e835612
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1718203459
  Commit Message:
    arm64: implement raw_smp_processor_id() using thread_info

Historically
  Parent Hashes: 7647e2b109f4d508fcb35bb8089a27c4fdd81f61
  Refs:  arm64 implemented raw_smp_processor_id() as a read of
current_thread_info()->cpu. This changed when arm64 moved thread_info into
task struct

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit implements raw_smp_processor_id using thread_info for the arm64 architecture.', 'keywords': 'arm64, raw_smp_processor_id, thread_info', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 7180f8d91fcbf252de572d9ffacc945effed0060
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7180f8d91fcbf252de572d9ffacc945effed0060
  Author Name: Mateusz Guzik
  Author Email: mjguzik@gmail.com
  Commit Date: 1718194199
  Commit Message:
    vfs: add rcu-based find_inode variants for iget ops

This avoids one inode hash lock acquire in the common case on inode
creation
  Parent Hashes: 1613e604df0cd359cf2a7fbd9be7a0bcfacfabd0
  Refs:  in effect significantly reducing contention.

On the stock kernel said lock is typically taken twice:
1. once to check if the inode happens to already be present
2. once to add it to the hash

The back-to-back lock/unlock pattern is known to degrade performance
significantly

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added RCU-based find_inode variants to iget operations for reduced inode hash lock contention.', 'keywords': 'RCU, inode, performance', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 30addd1dc6cc4558ec7024448f04bc77d508fe7d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 30addd1dc6cc4558ec7024448f04bc77d508fe7d
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1718149469
  Commit Message:
    selftests/bpf: Add uretprobe shadow stack test

Adding uretprobe shadow stack test that runs all existing
uretprobe tests with shadow stack enabled if it's available.

Link: https://lore.kernel.org/all/20240611112158.40795-9-jolsa@kernel.org/

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>

  Parent Hashes: 9e7f74e64ae58688a33a6445e4f9a4e291d0824f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for uretprobe to test shadow stack functionality.', 'keywords': 'uretprobe,shadow stack,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 9e7f74e64ae58688a33a6445e4f9a4e291d0824f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9e7f74e64ae58688a33a6445e4f9a4e291d0824f
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1718149468
  Commit Message:
    selftests/bpf: Add uretprobe syscall call from user space test

Adding test to verify that when called from outside of the
trampoline provided by kernel
  Parent Hashes: f42a58ffb8bb54e66bf9668a6be91477828c0c1b
  Refs:  the uretprobe syscall will cause
calling process to receive SIGILL signal and the attached bpf
program is not executed.

Link: https://lore.kernel.org/all/20240611112158.40795-8-jolsa@kernel.org/

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a test to verify uretprobe syscall behavior from user space in selftests.', 'keywords': 'selftests,bpf,uretprobe', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: f42a58ffb8bb54e66bf9668a6be91477828c0c1b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f42a58ffb8bb54e66bf9668a6be91477828c0c1b
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1718149468
  Commit Message:
    selftests/bpf: Add uretprobe syscall test for regs changes

Adding test that creates uprobe consumer on uretprobe which changes some
of the registers. Making sure the changed registers are propagated to the
user space when the ureptobe syscall trampoline is used on x86_64.

To be able to do this
  Parent Hashes: 3e8e25761a40194887336650673587191564e12c
  Refs:  adding support to bpf_testmod to create uprobe via
new attribute file:
  /sys/kernel/bpf_testmod_uprobe

This file is expecting file offset and creates related uprobe on current
process exe file and removes existing uprobe if offset is 0. The can be
only single uprobe at any time.

The uprobe has specific consumer that changes registers used in ureprobe
syscall trampoline and which are later checked in the test.

Link: https://lore.kernel.org/all/20240611112158.40795-7-jolsa@kernel.org/

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a selftest for uretprobe syscall to verify register changes on x86_64.', 'keywords': 'selftests,bpf,uretpobe', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 3e8e25761a40194887336650673587191564e12c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3e8e25761a40194887336650673587191564e12c
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1718149468
  Commit Message:
    selftests/bpf: Add uretprobe syscall test for regs integrity

Add uretprobe syscall test that compares register values before
and after the uretprobe is hit. It also compares the register
values seen from attached bpf program.

Link: https://lore.kernel.org/all/20240611112158.40795-6-jolsa@kernel.org/

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>

  Parent Hashes: 29edd8b003db897d81d82d950785327f164650d3
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add uretprobe syscall test to verify register integrity with BPF program comparison.', 'keywords': 'uretprobe,syscall,registers', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 29edd8b003db897d81d82d950785327f164650d3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 29edd8b003db897d81d82d950785327f164650d3
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1718149468
  Commit Message:
    selftests/x86: Add return uprobe shadow stack test

Adding return uprobe test for shadow stack and making sure it's
working properly. Borrowed some of the code from bpf selftests.

Link: https://lore.kernel.org/all/20240611112158.40795-5-jolsa@kernel.org/

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>

  Parent Hashes: ff474a78cef5cb5f32be52fe25b78441327a2e7c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a return uprobe test for shadow stack verification in selftests/x86.', 'keywords': 'uproprobe, shadow stack, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: ff474a78cef5cb5f32be52fe25b78441327a2e7c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ff474a78cef5cb5f32be52fe25b78441327a2e7c
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1718149468
  Commit Message:
    uprobe: Add uretprobe syscall to speed up return probe

Adding uretprobe syscall instead of trap to speed up return probe.

At the moment the uretprobe setup/path is:

  - install entry uprobe

  - when the uprobe is hit
  Parent Hashes: 190fec72df4a5d4d98b1e783c333f471e5e5f344
  Refs:  it overwrites probed function's return address
    on stack with address of the trampoline that contains breakpoint
    instruction

  - the breakpoint trap code handles the uretprobe consumers execution and
    jumps back to original return address

This patch replaces the above trampoline's breakpoint instruction with new
ureprobe syscall call. This syscall does exactly the same job as the trap
with some more extra work:

  - syscall trampoline must save original value for rax/r11/rcx registers
    on stack - rax is set to syscall number and r11/rcx are changed and
    used by syscall instruction

  - the syscall code reads the original values of those registers and
    restore those values in task's pt_regs area

  - only caller from trampoline exposed in '[uprobes]' is allowed

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit introduces a new uretprobe syscall to enhance the efficiency of return probes.', 'keywords': 'uretprobe, syscall, probe', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 98b303c9bf05dae932efbd71e18d81f6c64f20d8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 98b303c9bf05dae932efbd71e18d81f6c64f20d8
  Author Name: Kenta Tada
  Author Email: tadakentaso@gmail.com
  Commit Date: 1718131149
  Commit Message:
    bpftool: Query only cgroup-related attach types

When CONFIG_NETKIT=y
  Parent Hashes: bb678f01804ccaa861b012b2b9426d69673d8a84
  Refs: 
bpftool-cgroup shows error even if the cgroup's path is correct:

$ bpftool cgroup tree /sys/fs/cgroup
CgroupPath
ID       AttachType      AttachFlags     Name
Error: can't query bpf programs attached to /sys/fs/cgroup: No such device or address

>From strace and kernel tracing

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes an error in bpftool when querying cgroup-related attach types with CONFIG_NETKIT=y.', 'keywords': 'bpftool,cgroup,query', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: b1156532bc29ac9a8d1cf71510cabc8f68181540
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b1156532bc29ac9a8d1cf71510cabc8f68181540
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1718067734
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-06-06

We've added 54 non-merge commits during the last 10 day(s) which contain
a total of 50 files changed
  Parent Hashes: 93d4e8bb3f137e8037a65ea96f175f81c25c50e5 f85af9d955ac9601174e1c64f4b3308c1cae4a7e
  Refs:  1887 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge pull request for bpf-next containing 54 non-merge commits affecting 50 files.', 'keywords': 'merge, bpf-next, commits', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2ba6d15786f6c11b6e497eebe68b8baec52f7984
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2ba6d15786f6c11b6e497eebe68b8baec52f7984
  Author Name: David S. Miller
  Author Email: davem@davemloft.net
  Commit Date: 1718023686
  Commit Message:
    Merge branch 'fix-changing-dsa-conduit'

Marek Behún says:

====================
Fix changing DSA conduit

This series fixes an issue in the DSA code related to host interface UC
address installed into port FDB and port conduit address database when
live-changing port conduit.

The first patch refactores/deduplicates the installation/uninstallation
of the interface's MAC address and the second patch fixes the issue.

Cover letter for v1 and v2:
  https://patchwork.kernel.org/project/netdevbpf/cover/20240429163627.16031-1-kabel@kernel.org/
  https://patchwork.kernel.org/project/netdevbpf/cover/20240502122922.28139-1-kabel@kernel.org/
====================

Signed-off-by: David S. Miller <davem@davemloft.net>

  Parent Hashes: 395059c52e0104a5e01832f866caa8b15284dd9a eef8e906aea270f4b8912a0b51403b80aec54d30
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes an issue in the DSA code related to host interface UC address and port FDB database during conduit changes.', 'keywords': 'DSA, conduit, MAC', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b8481381d4e2549f06812eb6069198144696340c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b8481381d4e2549f06812eb6069198144696340c
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1717949091
  Commit Message:
    Merge tag 'perf-tools-fixes-for-v6.10-2-2024-06-09' of git://git.kernel.org/pub/scm/linux/kernel/git/perf/perf-tools

Pull perf tools fixes from Arnaldo Carvalho de Melo:

 - Update copies of kernel headers
  Parent Hashes: 637c2dfcd9f5e194ab2e879704460840edcde537 ca9680821dfec73c9100860bda4fab1f1309722e
  Refs:  which resulted in support for the
   new 'mseal' syscall

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge of perf tools fixes and update copies of kernel headers.', 'keywords': 'Merge,perf-tools,headers', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: f85af9d955ac9601174e1c64f4b3308c1cae4a7e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f85af9d955ac9601174e1c64f4b3308c1cae4a7e
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1717707846
  Commit Message:
    selftests/bpf: Drop useless arguments of do_test in bpf_tcp_ca

bpf_map_lookup_elem() has been removed from do_test()
  Parent Hashes: cd984b2ed62423eb3daceacb21d651115a612af6
  Refs:  it makes the
sk_stg_map argument of do_test() useless. In addition

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove unused arguments from do_test in bpf_tcp_ca selftests.', 'keywords': 'do_test,bpf_tcp_ca,selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: cd984b2ed62423eb3daceacb21d651115a612af6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cd984b2ed62423eb3daceacb21d651115a612af6
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1717707845
  Commit Message:
    selftests/bpf: Use start_test in test_dctcp in bpf_tcp_ca

The "if (sk_stg_map)" block in do_test() is only used by test_dctcp()
  Parent Hashes: 224eeb5598c30ee835dc9fea4c7ad85a8fb7eda4
  Refs: 
it makes sense to move it from do_test() into test_dctcp(). Then
do_test() can be used by other tests except test_dctcp().

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/9938916627b9810c877e5c03a621bc0ba5acf5c5.1717054461.git.tanggeliang@kylinos.cn


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor test_dctcp to use start_test, allowing do_test to be reused for other tests.', 'keywords': 'selftests,bpf,test_dctcp', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 224eeb5598c30ee835dc9fea4c7ad85a8fb7eda4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 224eeb5598c30ee835dc9fea4c7ad85a8fb7eda4
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1717707845
  Commit Message:
    selftests/bpf: Use start_test in test_dctcp_fallback in bpf_tcp_ca

The newly added helper start_test() can be used in test_dctcp_fallback()
too
  Parent Hashes: fee97d0c9a14b5dd5cce0ec1df3a54a6b963f40c
  Refs:  to replace start_server_str() and connect_to_fd_opts(). In that
way

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors test_dctcp_fallback to use the new start_test helper function in bpf_tcp_ca selftests.', 'keywords': 'start_test, test_dctcp_fallback, refactoring', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fee97d0c9a14b5dd5cce0ec1df3a54a6b963f40c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fee97d0c9a14b5dd5cce0ec1df3a54a6b963f40c
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1717707845
  Commit Message:
    selftests/bpf: Add start_test helper in bpf_tcp_ca

For moving the "if (sk_stg_map)" block out of do_test()
  Parent Hashes: 9abdfd8a212332c64f6d0a27fc2ad69e9e0335d1
  Refs:  extract the
code before this block as a new function start_test(). It creates
server-side and client-side sockets and returns them to the caller.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/48f2921ff9be958f5d3d28fe6bb7269a61cafa9f.1717054461.git.tanggeliang@kylinos.cn


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implemented a new start_test helper function in bpf_tcp_ca selftests to refactor socket creation.', 'keywords': 'start_test, bpf_tcp_ca, refactor', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9abdfd8a212332c64f6d0a27fc2ad69e9e0335d1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9abdfd8a212332c64f6d0a27fc2ad69e9e0335d1
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1717707845
  Commit Message:
    selftests/bpf: Use connect_to_fd_opts in do_test in bpf_tcp_ca

This patch uses connect_to_fd_opts() instead of using connect_fd_to_fd()
and settcpca() in do_test() in prog_tests/bpf_tcp_ca.c to accept a struct
network_helper_opts argument.

Then define a dctcp dedicated post_socket_cb callback stg_post_socket_cb()
  Parent Hashes: 08ac454e258e38813afb906650f19acce3afd982
  Refs: 
invoking both settcpca() and bpf_map_update_elem() in it

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor bpf_tcp_ca do_test function to use connect_to_fd_opts and introduce a dctcp post_socket callback.', 'keywords': 'bpf_tcp_ca, connect_to_fd_opts, dctcp', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0ac55d095d375e84fcdac5e51011613734e57854
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0ac55d095d375e84fcdac5e51011613734e57854
  Author Name: Paul E. McKenney
  Author Email: paulmck@kernel.org
  Commit Date: 1717699482
  Commit Message:
    tools/rcu: Add rcu-updaters.sh script

This commit adds a tools/rcu/rcu-updaters.sh script that uses bpftrace
to print a histogram of the RCU update-side primitives invoked during
the specified time interval
  Parent Hashes: b9f147cdc2c0bf54ca2c25ed185806f1fc6da65f
  Refs:  or until manually terminated if no interval
is specified.

Sample output on an idle laptop:

@counts[poll_state_synchronize_rcu]: 6
@counts[synchronize_srcu]: 13
@counts[call_rcu_tasks_trace]: 25
@counts[synchronize_rcu]: 54
@counts[kvfree_call_rcu]: 428
@counts[call_rcu]: 2134

Note that when run on a kernel missing one or more of the symbols

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a script using bpftrace to print a histogram of RCU update-side primitives.', 'keywords': 'bpftrace, RCU, script', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 08ac454e258e38813afb906650f19acce3afd982
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 08ac454e258e38813afb906650f19acce3afd982
  Author Name: Mykyta Yatsenko
  Author Email: yatsenko@meta.com
  Commit Date: 1717693565
  Commit Message:
    libbpf: Auto-attach struct_ops BPF maps in BPF skeleton

Similarly to `bpf_program`
  Parent Hashes: b24862bac7b5db326716ad07bbff7b6ee3b09a59
  Refs:  support `bpf_map` automatic attachment in
`bpf_object__attach_skeleton`. Currently only struct_ops maps could be
attached.

On bpftool side

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit enables automatic attachment of struct_ops BPF maps in BPF skeletons using libbpf.', 'keywords': 'libbpf,struct_ops,auto-attach', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d30d0e49da71de8df10bf3ff1b3de880653af562
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d30d0e49da71de8df10bf3ff1b3de880653af562
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1717692927
  Commit Message:
    Merge tag 'net-6.10-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 "Including fixes from BPF and big collection of fixes for WiFi core and
  drivers.

  Current release - regressions:

   - vxlan: fix regression when dropping packets due to invalid src
     addresses

   - bpf: fix a potential use-after-free in bpf_link_free()

   - xdp: revert support for redirect to any xsk socket bound to the
     same UMEM as it can result in a corruption

   - virtio_net:
      - add missing lock protection when reading return code from
        control_buf
      - fix false-positive lockdep splat in DIM
      - Revert "wifi: wilc1000: convert list management to RCU"

   - wifi: ath11k: fix error path in ath11k_pcic_ext_irq_config

  Previous releases - regressions:

   - rtnetlink: make the "split" NLM_DONE handling generic
  Parent Hashes: 2faf6332c506fc3bd23815f8fe8f6d0c35271c17 27bc86540899ee793ab2f4c846e745aa0de443f1
  Refs:  restore the
     old behavior for two cases where we started coalescing those
     messages with normal messages

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges networking and BPF-related fixes, addressing regressions and issues in vxlan, bpf, xdp, virtio_net, and wifi.', 'keywords': 'networking, BPF, wifi', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['xdp like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b24862bac7b5db326716ad07bbff7b6ee3b09a59
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b24862bac7b5db326716ad07bbff7b6ee3b09a59
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1717682190
  Commit Message:
    selftests/bpf: Add btf_field_iter selftests

The added selftests verify that for every BTF kind we iterate correctly
over consituent strings and ids.

Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240605153314.3727466-1-alan.maguire@oracle.com

  Parent Hashes: 7015843afcaf68c132784c89528dfddc0005e483
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Added new selftests for verifying BTF field iterators' correct iteration over strings and IDs.", 'keywords': 'selftests,BTF,iteration', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7015843afcaf68c132784c89528dfddc0005e483
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7015843afcaf68c132784c89528dfddc0005e483
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1717681753
  Commit Message:
    selftests/bpf: Fix send_signal test with nested CONFIG_PARAVIRT

Alexei reported that send_signal test may fail with nested CONFIG_PARAVIRT
configs. In this particular case
  Parent Hashes: 072088704433f75dacf9e33179dd7a81f0a238d4
  Refs:  the base VM is AMD with 166 cpus

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a send_signal test issue when using nested CONFIG_PARAVIRT configurations.', 'keywords': 'send_signal test, CONFIG_PARAVIRT, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 5899c885131a7b2926ed26f6a5df1fc3c878418d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5899c885131a7b2926ed26f6a5df1fc3c878418d
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1717640886
  Commit Message:
    Merge branch 'intel-wired-lan-driver-updates-2024-05-29-ice-igc'

Jacob Keller says:

====================
Intel Wired LAN Driver Updates 2024-05-29 (ice
  Parent Hashes: 886bf9172da06a85de3c68a651477d7d625fd6cc 7d67d11fbe194f71298263f48e33ae2afa38197e
  Refs:  igc)

This series includes fixes for the ice driver as well as a fix for the igc
driver.

Jacob fixes two issues in the ice driver with reading the NVM for providing
firmware data via devlink info. First

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges updates for the Intel wired LAN driver, with specific fixes to the ice and igc drivers.', 'keywords': 'Intel, LAN, driver', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: f3df4044254c98128890b512bf19cc05588f1fe5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f3df4044254c98128890b512bf19cc05588f1fe5
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1717640876
  Commit Message:
    ice: map XDP queues to vectors in ice_vsi_map_rings_to_vectors()

ice_pf_dcb_recfg() re-maps queues to vectors with
ice_vsi_map_rings_to_vectors()
  Parent Hashes: 744d197162c2070a6045a71e2666ed93a57cc65d
  Refs:  which does not restore the previous
state for XDP queues. This leads to no AF_XDP traffic after rebuild.

Map XDP queues to vectors in ice_vsi_map_rings_to_vectors().
Also

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes mapping of XDP queues to vectors to restore AF_XDP traffic after rebuild.', 'keywords': 'XDP,queues,vectors', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 744d197162c2070a6045a71e2666ed93a57cc65d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 744d197162c2070a6045a71e2666ed93a57cc65d
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1717640876
  Commit Message:
    ice: add flag to distinguish reset from .ndo_bpf in XDP rings config

Commit 6624e780a577 ("ice: split ice_vsi_setup into smaller functions")
has placed ice_vsi_free_q_vectors() after ice_destroy_xdp_rings() in
the rebuild process. The behaviour of the XDP rings config functions is
context-dependent
  Parent Hashes: adbf5a42341f6ea038d3626cd4437d9f0ad0b2dd
  Refs:  so the change of order has led to
ice_destroy_xdp_rings() doing additional work and removing XDP prog

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a flag to distinguish reset from .ndo_bpf in XDP rings configuration in the ice driver.', 'keywords': 'flag, reset, XDP', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 0105eaabb27f31d9b8d340aca6fb6a3420cab30f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0105eaabb27f31d9b8d340aca6fb6a3420cab30f
  Author Name: Cong Wang
  Author Email: cong.wang@bytedance.com
  Commit Date: 1717640365
  Commit Message:
    vmalloc: check CONFIG_EXECMEM in is_vmalloc_or_module_addr()

After commit 2c9e5d4a0082 ("bpf: remove CONFIG_BPF_JIT dependency on
CONFIG_MODULES of") CONFIG_BPF_JIT does not depend on CONFIG_MODULES any
more and bpf jit also uses the [MODULES_VADDR
  Parent Hashes: 7cc5a5d65011983952a9c62f170f5b79e24b1239
  Refs:  MODULES_END] memory region.
But is_vmalloc_or_module_addr() still checks CONFIG_MODULES

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Check CONFIG_EXECMEM in is_vmalloc_or_module_addr after changes to BPF JIT dependencies.', 'keywords': 'CONFIG_EXECMEM,BPF JIT,is_vmalloc_or_module_addr', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 886bf9172da06a85de3c68a651477d7d625fd6cc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 886bf9172da06a85de3c68a651477d7d625fd6cc
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1717639388
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-06-05

We've added 8 non-merge commits during the last 6 day(s) which contain
a total of 9 files changed
  Parent Hashes: 323a359f9b077f382f4483023d096a4d316fd135 03e38d315f3c5258270ad50f2ae784b6372e87c3
  Refs:  34 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merged branch with 8 non-merge eBPF related commits to the netdev subsystem.', 'keywords': 'eBPF, non-merge, netdev', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 072088704433f75dacf9e33179dd7a81f0a238d4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 072088704433f75dacf9e33179dd7a81f0a238d4
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1717599285
  Commit Message:
    libbpf: Remove callback-based type/string BTF field visitor helpers

Now that all libbpf/bpftool code switched to btf_field_iter
  Parent Hashes: e1a8630291fde2a0edac2955e3df48587dac9906
  Refs:  remove
btf_type_visit_type_ids() and btf_type_visit_str_offs() callback-based
helpers as not needed anymore.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Alan Maguire <alan.maguire@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240605001629.4061937-6-andrii@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes callback-based type/string BTF field visitor helpers from libbpf as they are now unnecessary.', 'keywords': 'libbpf,BTF,helpers', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e1a8630291fde2a0edac2955e3df48587dac9906
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e1a8630291fde2a0edac2955e3df48587dac9906
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1717599281
  Commit Message:
    bpftool: Use BTF field iterator in btfgen

Switch bpftool's code which is using libbpf-internal
btf_type_visit_type_ids() helper to new btf_field_iter functionality.

This makes bpftool code simpler
  Parent Hashes: c2641123696b572a3b059e1b45777317ba9f9086
  Refs:  but also unblocks removing libbpf's
btf_type_visit_type_ids() helper completely.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Alan Maguire <alan.maguire@oracle.com>
Reviewed-by: Quentin Monnet <qmo@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240605001629.4061937-5-andrii@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Replaced bpftool's libbpf-internal functionality with a new btf field iterator for simplification.", 'keywords': 'bpftool,BTF iterator,simplification', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c2641123696b572a3b059e1b45777317ba9f9086
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c2641123696b572a3b059e1b45777317ba9f9086
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1717599277
  Commit Message:
    libbpf: Make use of BTF field iterator in BTF handling code

Use new BTF field iterator logic to replace all the callback-based
visitor calls. There is still a .BTF.ext callback-based visitor APIs
that should be converted
  Parent Hashes: 2bce2c1cb2f0acbf619737a10575f99df0c43984
  Refs:  which will happens as a follow up.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Alan Maguire <alan.maguire@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240605001629.4061937-4-andrii@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit replaces callback-based visitor calls with a BTF field iterator in the libbpf code.', 'keywords': 'BTF,libbpf,iterator', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2bce2c1cb2f0acbf619737a10575f99df0c43984
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2bce2c1cb2f0acbf619737a10575f99df0c43984
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1717599272
  Commit Message:
    libbpf: Make use of BTF field iterator in BPF linker code

Switch all BPF linker code dealing with iterating BTF type ID and string
offset fields to new btf_field_iter facilities.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Alan Maguire <alan.maguire@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240605001629.4061937-3-andrii@kernel.org

  Parent Hashes: 68153bb2fffbe59804370e514482f95c4b2053ff
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Utilize BTF field iterator in BPF linker code for type ID and string offset fields.', 'keywords': 'BTF iterator linker', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 68153bb2fffbe59804370e514482f95c4b2053ff
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 68153bb2fffbe59804370e514482f95c4b2053ff
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1717599266
  Commit Message:
    libbpf: Add BTF field iterator

Implement iterator-based type ID and string offset BTF field iterator.
This is used extensively in BTF-handling code and BPF linker code for
various sanity checks
  Parent Hashes: 898ac74c5b5f8b551a377d6a60ca4e30023ac9d2
  Refs:  rewriting IDs/offsets

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce BTF field iterator for improved type ID and offset management in libbpf.', 'keywords': 'BTF,iterator,libbpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ca9680821dfec73c9100860bda4fab1f1309722e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ca9680821dfec73c9100860bda4fab1f1309722e
  Author Name: Namhyung Kim
  Author Email: namhyung@kernel.org
  Commit Date: 1717597980
  Commit Message:
    perf bpf: Fix handling of minimal vmlinux.h file when interrupting the build

Ingo reported that he was seeing these when hitting Control+C during a
perf tools build:

  Makefile.perf:1149: *** Missing bpftool input for generating vmlinux.h. Stop.

The failure happens when you don't have vmlinux.h or vmlinux with BTF.

ifeq ($(VMLINUX_H)
  Parent Hashes: 5b3cde198878b2f3269d5e7efbc0d514899b1fd8
  Refs: )
  ifeq ($(VMLINUX_BTF)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes handling of minimal vmlinux.h file when interrupting the perf tools build process.', 'keywords': 'perf bpf,vmlinux.h,build error', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 491aee894a08bc9b8bb52e7363b9d4bc6403f363
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 491aee894a08bc9b8bb52e7363b9d4bc6403f363
  Author Name: Taehee Yoo
  Author Email: ap420073@gmail.com
  Commit Date: 1717580967
  Commit Message:
    ionic: fix kernel panic in XDP_TX action

In the XDP_TX path
  Parent Hashes: 0a8d3f2e3e8d8aea8af017e14227b91d5989b696
  Refs:  ionic driver sends a packet to the TX path with rx
page and corresponding dma address.
After tx is done

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix kernel panic issue in the XDP_TX action of the ionic driver.', 'keywords': 'kernel panic,XDP_TX ionic', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 03e38d315f3c5258270ad50f2ae784b6372e87c3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 03e38d315f3c5258270ad50f2ae784b6372e87c3
  Author Name: Magnus Karlsson
  Author Email: magnus.karlsson@intel.com
  Commit Date: 1717573385
  Commit Message:
    Revert "xsk: Document ability to redirect to any socket bound to the same umem"

This reverts commit 968595a93669b6b4f6d1fcf80cf2d97956b6868f.

Reported-by: Yuval El-Hanany <YuvalE@radware.com>
Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/xdp-newbies/8100DBDC-0B7C-49DB-9995-6027F6E63147@radware.com
Link: https://lore.kernel.org/bpf/20240604122927.29080-3-magnus.karlsson@gmail.com

  Parent Hashes: 7fcf26b315bbb728036da0862de6b335da83dff2
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit reverts a previous documentation update regarding xsk socket redirection.', 'keywords': 'revert,xsk,umem', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 7fcf26b315bbb728036da0862de6b335da83dff2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7fcf26b315bbb728036da0862de6b335da83dff2
  Author Name: Magnus Karlsson
  Author Email: magnus.karlsson@intel.com
  Commit Date: 1717573350
  Commit Message:
    Revert "xsk: Support redirect to any socket bound to the same umem"

This reverts commit 2863d665ea41282379f108e4da6c8a2366ba66db.

This patch introduced a potential kernel crash when multiple napi instances
redirect to the same AF_XDP socket. By removing the queue_index check
  Parent Hashes: d0d1df8ba18abc57f28fb3bc053b2bf319367f2c
  Refs:  it is
possible for multiple napi instances to access the Rx ring at the same time

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Revert commit 2863d665ea4 due to potential kernel crash with xsk redirect to same AF_XDP socket.', 'keywords': 'Revert, xsk, AF_XDP', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs', 'other']}
--------------------
--------------------
Processing Commit ID: d0d1df8ba18abc57f28fb3bc053b2bf319367f2c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d0d1df8ba18abc57f28fb3bc053b2bf319367f2c
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1717573293
  Commit Message:
    bpf: Set run context for rawtp test_run callback

syzbot reported crash when rawtp program executed through the
test_run interface calls bpf_get_attach_cookie helper or any
other helper that touches task->bpf_ctx pointer.

Setting the run context (task->bpf_ctx pointer) for test_run
callback.

Fixes: 7adfc6c9b315 ("bpf: Add bpf_get_attach_cookie() BPF helper to access bpf_cookie value")
Reported-by: syzbot+3ab78ff125b7979e45f9@syzkaller.appspotmail.com
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Closes: https://syzkaller.appspot.com/bug?extid=3ab78ff125b7979e45f9
Link: https://lore.kernel.org/bpf/20240604150024.359247-1-jolsa@kernel.org

  Parent Hashes: 2884dc7d08d98a89d8d65121524bb7533183a63a
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes crash by setting run context for raw tracepoint test_run callbacks in BPF.', 'keywords': 'run context, rawtp, crash', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 898ac74c5b5f8b551a377d6a60ca4e30023ac9d2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 898ac74c5b5f8b551a377d6a60ca4e30023ac9d2
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1717530584
  Commit Message:
    selftests/bpf: Ignore .llvm.<hash> suffix in kallsyms_find()

I hit the following failure when running selftests with
internal backported upstream kernel:
  test_ksyms:PASS:kallsyms_fopen 0 nsec
  test_ksyms:FAIL:ksym_find symbol 'bpf_link_fops' not found
  #123     ksyms:FAIL

In /proc/kallsyms
  Parent Hashes: 61ce0ea7591fef2eb6e89ce40ffcc24fda4dbbc5
  Refs:  we have
  $ cat /proc/kallsyms | grep bpf_link_fops
  ffffffff829f0cb0 d bpf_link_fops.llvm.12608678492448798416
The CONFIG_LTO_CLANG_THIN is enabled in the kernel which is responsible
for bpf_link_fops.llvm.12608678492448798416 symbol name.

In prog_tests/ksyms.c we have
  kallsyms_find("bpf_link_fops"

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix kallsyms_find() to ignore .llvm.<hash> suffix for proper symbol resolution in selftests.', 'keywords': 'selftests,kallsyms,llvm', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 61ce0ea7591fef2eb6e89ce40ffcc24fda4dbbc5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 61ce0ea7591fef2eb6e89ce40ffcc24fda4dbbc5
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1717525074
  Commit Message:
    selftests/bpf: Fix bpf_cookie and find_vma in nested VM

bpf_cookie and find_vma are flaky in nested VMs
  Parent Hashes: 49df0019f36798d414e6b913bec30a3a0cd47c70
  Refs:  which is used by some CI
systems. It turns out these failures are caused by unreliable perf event
in nested VM. Fix these by:

  1. Use PERF_COUNT_SW_CPU_CLOCK in find_vma;
  2. Increase sample_freq in bpf_cookie.

Signed-off-by: Song Liu <song@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240604070700.3032142-1-song@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix unreliable perf event issues in bpf_cookie and find_vma selftests within nested VMs.', 'keywords': 'bpf_cookie,nested VM,perf event', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 8d4e21bd4cca8013d2c6f55d42df85838d4ebce6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8d4e21bd4cca8013d2c6f55d42df85838d4ebce6
  Author Name: Steven Rostedt (Google)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511920
  Commit Message:
    selftests/ftrace: Add fgraph-multi.tc test

Add a test that creates 3 instances and enables function_graph tracer in
each as well as the top instance
  Parent Hashes: 35b944a997e25962122c3dea68b020e7fbb06cbd
  Refs:  where each will enable a filter (but one
that traces all functions) and check that they are filtering properly.

Link: https://lore.kernel.org/linux-trace-kernel/20240603190825.252845939@goodmis.org

Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftest for function_graph tracing with multiple instances and filtering.', 'keywords': 'selftests,ftrace,function_graph', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 35b944a997e25962122c3dea68b020e7fbb06cbd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 35b944a997e25962122c3dea68b020e7fbb06cbd
  Author Name: Steven Rostedt (Google)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511908
  Commit Message:
    selftests/ftrace: Add function_graph tracer to func-filter-pid test

The function tracer is tested to see if pid filtering works. Add a test to
test function_graph tracer as well
  Parent Hashes: fe835e3ca40e172aa8ad12f4ed2898c181fafab0
  Refs:  but only if the function_graph tracer
is enabled for the top level or instance.

Link: https://lore.kernel.org/linux-trace-kernel/20240603190825.083048115@goodmis.org

Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a test for the function_graph tracer to check if pid filtering works in selftests for ftrace.', 'keywords': 'function_graph,tracer,pid-filtering', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: fe835e3ca40e172aa8ad12f4ed2898c181fafab0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fe835e3ca40e172aa8ad12f4ed2898c181fafab0
  Author Name: Steven Rostedt (Google)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511903
  Commit Message:
    function_graph: Use static_call and branch to optimize return function

In most cases function graph is used by a single user. Instead of calling
a loop to call function graph callbacks in this case
  Parent Hashes: cc60ee813b50334b32343861057dc9e981e9c7f0
  Refs:  call the function
return callback directly.

Use the static_key that is set when the function graph tracer has less
than 2 callbacks registered. It will do the direct call in that case

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize function graph tracer by using static calls for single callback scenarios.', 'keywords': 'function_graph, static_call, optimize', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: cc60ee813b50334b32343861057dc9e981e9c7f0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cc60ee813b50334b32343861057dc9e981e9c7f0
  Author Name: Steven Rostedt (Google)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511895
  Commit Message:
    function_graph: Use static_call and branch to optimize entry function

In most cases function graph is used by a single user. Instead of calling
a loop to call function graph callbacks in this case
  Parent Hashes: a5b6d4da0218a0539c36ad6794c624c2c6ca7b32
  Refs:  call the function
entry callback directly.

Add a static_key that will be used to set the function graph logic to
either do the loop (when more than one callback is registered) or to call
the callback directly if there is only one registered callback.

Link: https://lore.kernel.org/linux-trace-kernel/20240603190824.766858241@goodmis.org

Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize function graph entry function by using static_call and branch to reduce overhead when only one callback is registered.', 'keywords': 'function_graph, static_call, optimization', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a5b6d4da0218a0539c36ad6794c624c2c6ca7b32
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a5b6d4da0218a0539c36ad6794c624c2c6ca7b32
  Author Name: Steven Rostedt (Google)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511890
  Commit Message:
    function_graph: Use bitmask to loop on fgraph entry

Instead of looping through all the elements of fgraph_array[] to see if
there's an gops attached to one and then calling its gops->func(). Create
a fgraph_array_bitmask that sets bits when an index in the array is
reserved (via the simple lru algorithm). Then only the bits set in this
bitmask needs to be looked at where only elements in the array that have
ops registered need to be looked at.

Note
  Parent Hashes: 420e1354bcb6f006f183a1b6fe5dd21f60a457ef
  Refs:  we do not care about races. If a bit is set before the gops is
assigned

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit optimizes function graph processing using a bitmask for improved performance in handling function operations.', 'keywords': 'bitmask, fgraph, optimization', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 420e1354bcb6f006f183a1b6fe5dd21f60a457ef
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 420e1354bcb6f006f183a1b6fe5dd21f60a457ef
  Author Name: Steven Rostedt (Google)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511883
  Commit Message:
    function_graph: Use for_each_set_bit() in __ftrace_return_to_handler()

Instead of iterating through the entire fgraph_array[] and seeing if one
of the bitmap bits are set to know to call the array's retfunc() function
  Parent Hashes: dd120af2d5f8f3d2d742a64cefc4a529d382ab06
  Refs: 
use for_each_set_bit() on the bitmap itself. This will only iterate for
the number of set bits.

Link: https://lore.kernel.org/linux-trace-kernel/20240603190824.447448026@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimized function_graph handling by using for_each_set_bit to iterate only over set bits in __ftrace_return_to_handler().', 'keywords': 'function_graph,for_each_set_bit,ftrace', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: dd120af2d5f8f3d2d742a64cefc4a529d382ab06
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dd120af2d5f8f3d2d742a64cefc4a529d382ab06
  Author Name: Masami Hiramatsu (Google)
  Author Email: mhiramat@kernel.org
  Commit Date: 1717511879
  Commit Message:
    ftrace: Add multiple fgraph storage selftest

Add a selftest for multiple function graph tracer with storage on a same
function. In this case
  Parent Hashes: 47c3c70aa36971c90e32e91f9254110195d67a02
  Refs:  the shadow stack entry will be shared among those
fgraph with different data storage. So this will ensure the fgraph will
not mixed those storage data.

Link: https://lore.kernel.org/linux-trace-kernel/171509111465.162236.3795819216426570800.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190824.284049716@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Suggested-by: Steven Rostedt (Google) <rostedt@goodmis.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a selftest for multiple function graph tracer with shared storage to ensure data is not mixed.', 'keywords': 'ftrace,selftest,fgraph', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 47c3c70aa36971c90e32e91f9254110195d67a02
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 47c3c70aa36971c90e32e91f9254110195d67a02
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511872
  Commit Message:
    function_graph: Add selftest for passing local variables

Add boot up selftest that passes variables from a function entry to a
function exit
  Parent Hashes: 91c46b0aa917546432b5b219494859cda0edc39e
  Refs:  and make sure that they do get passed around.

Co-developed with Masami Hiramatsu:
Link: https://lore.kernel.org/linux-trace-kernel/171509110271.162236.11047551496319744627.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190824.122952310@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a boot up selftest for validating passing of local variables in function_graph tracing.', 'keywords': 'selftest,function_graph,local variables', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 91c46b0aa917546432b5b219494859cda0edc39e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 91c46b0aa917546432b5b219494859cda0edc39e
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511868
  Commit Message:
    function_graph: Implement fgraph_reserve_data() and fgraph_retrieve_data()

Added functions that can be called by a fgraph_ops entryfunc and retfunc to
store state between the entry of the function being traced to the exit of
the same function. The fgraph_ops entryfunc() may call
fgraph_reserve_data() to store up to 32 words onto the task's shadow
ret_stack and this then can be retrieved by fgraph_retrieve_data() called
by the corresponding retfunc().

Co-developed with Masami Hiramatsu:
Link: https://lore.kernel.org/linux-trace-kernel/171509109089.162236.11372474169781184034.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190823.959703050@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>

  Parent Hashes: b84214890a9bc56f0fe4ec4fc72f2307ed05096d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implement functions for storing and retrieving data across function entry and exit in function graph tracing.', 'keywords': 'fgraph, tracing, state', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b84214890a9bc56f0fe4ec4fc72f2307ed05096d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b84214890a9bc56f0fe4ec4fc72f2307ed05096d
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511864
  Commit Message:
    function_graph: Move graph notrace bit to shadow stack global var

The use of the task->trace_recursion for the logic used for the function
graph no-trace was a bit of an abuse of that variable. Now that there
exists global vars that are per stack for registered graph traces
  Parent Hashes: 068da098eb504469dc195137ae35eeacfe0c8de9
  Refs:  use
that instead.

Link: https://lore.kernel.org/linux-trace-kernel/171509107907.162236.6564679266777519065.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190823.796709456@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Move graph notrace logic to use shadow stack global variable instead of task trace_recursion.', 'keywords': 'function_graph, notrace, shadow_stack', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 068da098eb504469dc195137ae35eeacfe0c8de9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 068da098eb504469dc195137ae35eeacfe0c8de9
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511860
  Commit Message:
    function_graph: Move graph depth stored data to shadow stack global var

The use of the task->trace_recursion for the logic used for the function
graph depth was a bit of an abuse of that variable. Now that there
exists global vars that are per stack for registered graph traces
  Parent Hashes: 12117f3307b63f287756d7ec8cc4f11b94e1206a
  Refs:  use that
instead.

Link: https://lore.kernel.org/linux-trace-kernel/171509106728.162236.2398372644430125344.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190823.634870264@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Moved function graph depth data to global shadow stack variable for cleaner implementation.', 'keywords': 'function_graph, shadow stack, global variable', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 12117f3307b63f287756d7ec8cc4f11b94e1206a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 12117f3307b63f287756d7ec8cc4f11b94e1206a
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511855
  Commit Message:
    function_graph: Move set_graph_function tests to shadow stack global var

The use of the task->trace_recursion for the logic used for the
set_graph_function was a bit of an abuse of that variable. Now that there
exists global vars that are per stack for registered graph traces
  Parent Hashes: 4497412a1f7b5d9e0849f125652f2cc58cdba562
  Refs:  use that
instead.

Link: https://lore.kernel.org/linux-trace-kernel/171509105520.162236.10339831553995971290.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190823.472955399@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor function graph logic by moving set_graph_function tests to use shadow stack global variables.', 'keywords': 'function_graph, shadow stack, refactor', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 4497412a1f7b5d9e0849f125652f2cc58cdba562
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4497412a1f7b5d9e0849f125652f2cc58cdba562
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511849
  Commit Message:
    function_graph: Add "task variables" per task for fgraph_ops

Add a "task variables" array on the tasks shadow ret_stack that is the
size of longs for each possible registered fgraph_ops. That's a total
of 16
  Parent Hashes: 6d4786592ac88aa31f45fde6bfaad3162e3a92a4
  Refs:  taking up 8 * 16 = 128 bytes (out of a page size 4k).

This will allow for fgraph_ops to do specific features on a per task basis
having a way to maintain state for each task.

Co-developed with Masami Hiramatsu:
Link: https://lore.kernel.org/linux-trace-kernel/171509104383.162236.12239656156685718550.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190823.308806126@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add task-specific variables to shadow ret_stack for maintaining state with fgraph_ops in function graph tracing.', 'keywords': 'task variables,fgraph_ops,shadow ret_stack', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 6d4786592ac88aa31f45fde6bfaad3162e3a92a4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6d4786592ac88aa31f45fde6bfaad3162e3a92a4
  Author Name: Masami Hiramatsu (Google)
  Author Email: mhiramat@kernel.org
  Commit Date: 1717511841
  Commit Message:
    function_graph: Use a simple LRU for fgraph_array index number

Since the fgraph_array index is used for the bitmap on the shadow
stack
  Parent Hashes: df3ec5da6a1e7f6e142680d7c5266d3af187170b
  Refs:  it may leave some entries after a function_graph instance is
removed. Thus if another instance reuses the fgraph_array index soon
after releasing it

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implement a simple LRU for fgraph_array index number in function_graph to manage bitmap in shadow stack.', 'keywords': 'LRU,fgraph_array,shadow stack', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: df3ec5da6a1e7f6e142680d7c5266d3af187170b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: df3ec5da6a1e7f6e142680d7c5266d3af187170b
  Author Name: Steven Rostedt (Google)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511831
  Commit Message:
    function_graph: Add pid tracing back to function graph tracer

Now that the function_graph has a main callback that handles the function
graph subops tracing
  Parent Hashes: c132be2c4fcc1150ad0791c2a85dd4c9ad0bd0c8
  Refs:  it no longer honors the pid filtering of ftrace. Add
back this logic in the function_graph code to update the gops callback for
the entry function to test if it should trace the current task or not.

Link: https://lore.kernel.org/linux-trace-kernel/20240603190822.991720703@goodmis.org

Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Reintroduce PID filtering in the function graph tracer within the function_graph subsystem.', 'keywords': 'function_graph,tracer,PID', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: c132be2c4fcc1150ad0791c2a85dd4c9ad0bd0c8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c132be2c4fcc1150ad0791c2a85dd4c9ad0bd0c8
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511812
  Commit Message:
    function_graph: Have the instances use their own ftrace_ops for filtering

Allow for instances to have their own ftrace_ops part of the fgraph_ops
that makes the funtion_graph tracer filter on the set_ftrace_filter file
of the instance and not the top instance.

This uses the new ftrace_startup_subops()
  Parent Hashes: d9bbfbd14f58d2955cc7a3efa8ae6d4e09ee5995
  Refs:  by using graph_ops as the
"manager ops" that defines the callback function and adds the functions
defined by the filters of the ops for each trace instance. The callback
defined by the manager ops will call the registered fgraph ops that were
added to the fgraph_array.

Co-developed with Masami Hiramatsu:
Link: https://lore.kernel.org/linux-trace-kernel/171509102088.162236.15758883237657317789.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190822.832946261@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit allows function graph tracer instances to use their own ftrace_ops for filtering instead of the top instance.', 'keywords': 'function_graph, ftrace_ops, filtering', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: d9bbfbd14f58d2955cc7a3efa8ae6d4e09ee5995
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d9bbfbd14f58d2955cc7a3efa8ae6d4e09ee5995
  Author Name: Steven Rostedt (Google)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511804
  Commit Message:
    ftrace: Allow subops filtering to be modified

The subops filters use a "manager" ops to enable and disable its filters.
The manager ops can handle more than one subops
  Parent Hashes: 5fccc7552ccbc521bad61653ee739b1196b1bc53
  Refs:  and its filter is what
controls what functions get set. Add a ftrace_hash_move_and_update_subops()
function that will update the manager ops when the subops filters change.

Link: https://lore.kernel.org/linux-trace-kernel/20240603190822.673932251@goodmis.org

Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhances ftrace by allowing suboperation filters to be modified through manager operations.', 'keywords': 'ftrace, subops, filters', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 5fccc7552ccbc521bad61653ee739b1196b1bc53
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5fccc7552ccbc521bad61653ee739b1196b1bc53
  Author Name: Steven Rostedt (Google)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511798
  Commit Message:
    ftrace: Add subops logic to allow one ops to manage many

There are cases where a single system will use a single function callback
to handle multiple users. For example
  Parent Hashes: ab6b84630382914ffcbab59f4913c9a60971d034
  Refs:  to allow function_graph tracer to
have multiple users where each can trace their own set of functions

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhances ftrace with subops logic to support multiple users managing their own function callbacks.', 'keywords': 'ftrace,subops,callbacks', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ab6b84630382914ffcbab59f4913c9a60971d034
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ab6b84630382914ffcbab59f4913c9a60971d034
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511793
  Commit Message:
    ftrace: Allow ftrace startup flags to exist without dynamic ftrace

Some of the flags for ftrace_startup() may be exposed even when
CONFIG_DYNAMIC_FTRACE is not configured in. This is fine as the difference
between dynamic ftrace and static ftrace is done within the internals of
ftrace itself. No need to have use cases fail to compile because dynamic
ftrace is disabled.

This change is needed to move some of the logic of what is passed to
ftrace_startup() out of the parameters of ftrace_startup().

Link: https://lore.kernel.org/linux-trace-kernel/171509100890.162236.4362350342549122222.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190822.350654104@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>

  Parent Hashes: 26dda5631d1bb2f254f4c94aa87ee6c92a89cfdb
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable ftrace startup flags to function without dynamic ftrace configuration.', 'keywords': 'ftrace, dynamic, flags', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 26dda5631d1bb2f254f4c94aa87ee6c92a89cfdb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 26dda5631d1bb2f254f4c94aa87ee6c92a89cfdb
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511788
  Commit Message:
    ftrace: Allow function_graph tracer to be enabled in instances

Now that function graph tracing can handle more than one user
  Parent Hashes: 37238abe3cb47b8daaa8706c9949f67b2a705cf1
  Refs:  allow it to
be enabled in the ftrace instances. Note

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enables function graph tracing for multiple ftrace instances.', 'keywords': 'function graph, ftrace, instances', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 37238abe3cb47b8daaa8706c9949f67b2a705cf1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 37238abe3cb47b8daaa8706c9949f67b2a705cf1
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511782
  Commit Message:
    ftrace/function_graph: Pass fgraph_ops to function graph callbacks

Pass the fgraph_ops structure to the function graph callbacks. This will
allow callbacks to add a descriptor to a fgraph_ops private field that wil
be added in the future and use it for the callbacks. This will be useful
when more than one callback can be registered to the function graph tracer.

Co-developed with Masami Hiramatsu:
Link: https://lore.kernel.org/linux-trace-kernel/171509098588.162236.4787930115997357578.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190822.035147698@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>

  Parent Hashes: 2fbb549983763b2cc32a1ab840fe59cc1822e06d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enables passing fgraph_ops to function graph callbacks for enhanced functionality.', 'keywords': 'fgraph_ops,function graph,callbacks', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 2fbb549983763b2cc32a1ab840fe59cc1822e06d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2fbb549983763b2cc32a1ab840fe59cc1822e06d
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511771
  Commit Message:
    function_graph: Remove logic around ftrace_graph_entry and return

The function pointers ftrace_graph_entry and ftrace_graph_return are no
longer called via the function_graph tracer. Instead
  Parent Hashes: 375bb57292f49fa0956cc2739c81749b88e69510
  Refs:  an array structure is
now used that will allow for multiple users of the function_graph
infrastructure. The variables are still used by the architecture code for
non dynamic ftrace configs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes legacy logic for ftrace_graph_entry and ftrace_graph_return in function_graph tracer to support multiple users.', 'keywords': 'function_graph,tracer,ftrace', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 375bb57292f49fa0956cc2739c81749b88e69510
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 375bb57292f49fa0956cc2739c81749b88e69510
  Author Name: Masami Hiramatsu (Google)
  Author Email: mhiramat@kernel.org
  Commit Date: 1717511765
  Commit Message:
    function_graph: Handle tail calls for stack unwinding

For the tail-call
  Parent Hashes: 7aa1eaef9f4282c9acd39588b1fdc9dda7e73f34
  Refs:  there would be 2 or more ftrace_ret_stacks on the
ret_stack

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve stack unwinding by handling tail calls in function_graph tracer.', 'keywords': 'function_graph,tail calls,stack unwinding', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 7aa1eaef9f4282c9acd39588b1fdc9dda7e73f34
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7aa1eaef9f4282c9acd39588b1fdc9dda7e73f34
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511758
  Commit Message:
    function_graph: Allow multiple users to attach to function graph

Allow for multiple users to attach to function graph tracer at the same
time. Only 16 simultaneous users can attach to the tracer. This is because
there's an array that stores the pointers to the attached fgraph_ops. When
a function being traced is entered
  Parent Hashes: 518d6804a865772735588c5b2203d6c0c0bf98a9
  Refs:  each of the ftrace_ops entryfunc is
called and if it returns non zero

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit enables multiple users to attach to the function graph tracer concurrently, with a maximum limit of 16 users.', 'keywords': 'function_graph,tracer,multiple_users', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 518d6804a865772735588c5b2203d6c0c0bf98a9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 518d6804a865772735588c5b2203d6c0c0bf98a9
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511753
  Commit Message:
    function_graph: Add an array structure that will allow multiple callbacks

Add an array structure that will eventually allow the function graph tracer
to have up to 16 simultaneous callbacks attached. It's an array of 16
fgraph_ops pointers
  Parent Hashes: 59e5f04e4184181227889663618e01dce676e671
  Refs:  that is assigned when one is registered. On entry of a
function the entry of the first item in the array is called

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add array structure for multiple callbacks in function graph tracer.', 'keywords': 'array,crafter,function', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 59e5f04e4184181227889663618e01dce676e671
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 59e5f04e4184181227889663618e01dce676e671
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511740
  Commit Message:
    fgraph: Use BUILD_BUG_ON() to make sure we have structures divisible by long

Instead of using "ALIGN()"
  Parent Hashes: 42675b723b4842bca7bfb0f209aa9a493a10324a
  Refs:  use BUILD_BUG_ON() as the structures should
always be divisible by sizeof(long).

Co-developed with Masami Hiramatsu:
Link: https://lore.kernel.org/linux-trace-kernel/171509093949.162236.14518699447151894536.stgit@devnote2
Link: http://lkml.kernel.org/r/20190524111144.GI2589@hirez.programming.kicks-ass.net
Link: https://lore.kernel.org/linux-trace-kernel/20240603190821.232168933@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Suggested-by: Peter Zijlstra <peterz@infradead.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit replaces ALIGN() with BUILD_BUG_ON() to ensure structures are divisible by long.', 'keywords': 'BUILD_BUG_ON, structures, divisible', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 42675b723b4842bca7bfb0f209aa9a493a10324a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 42675b723b4842bca7bfb0f209aa9a493a10324a
  Author Name: Steven Rostedt (VMware)
  Author Email: rostedt@goodmis.org
  Commit Date: 1717511709
  Commit Message:
    function_graph: Convert ret_stack to a series of longs

In order to make it possible to have multiple callbacks registered with the
function_graph tracer
  Parent Hashes: c3f38fa61af77b49866b006939479069cd451173
  Refs:  the retstack needs to be converted from an array of
ftrace_ret_stack structures to an array of longs. This will allow to store
the list of callbacks on the stack for the return side of the functions.

Link: https://lore.kernel.org/linux-trace-kernel/171509092742.162236.4427737821399314856.stgit@devnote2
Link: https://lore.kernel.org/linux-trace-kernel/20240603190821.073111754@goodmis.org

Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Cc: Andrew Morton <akpm@linux-foundation.org>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: Florent Revest <revest@chromium.org>
Cc: Martin KaFai Lau <martin.lau@linux.dev>
Cc: bpf <bpf@vger.kernel.org>
Cc: Sven Schnelle <svens@linux.ibm.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alan Maguire <alan.maguire@oracle.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Guo Ren <guoren@kernel.org>
Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Convert ret_stack from ftrace_ret_stack structures to longs for multi-callback support in function_graph tracer.', 'keywords': 'function_graph,ret_stack,longs', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 49df0019f36798d414e6b913bec30a3a0cd47c70
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 49df0019f36798d414e6b913bec30a3a0cd47c70
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1717473163
  Commit Message:
    Merge branch 'enable-bpf-programs-to-declare-arrays-of-kptr-bpf_rb_root-and-bpf_list_head'

Kui-Feng Lee says:

====================
Enable BPF programs to declare arrays of kptr
  Parent Hashes: 49784c7979321c49a8055f5c588d24c34a8c55fc 43d50ffb1f7e32865cdd343224659614d8b558b9
  Refs:  bpf_rb_root

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable BPF programs to declare arrays of kptrs using bpf_rb_root and bpf_list_head.', 'keywords': 'BPF, arrays, kptrs', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 43d50ffb1f7e32865cdd343224659614d8b558b9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 43d50ffb1f7e32865cdd343224659614d8b558b9
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717473163
  Commit Message:
    selftests/bpf: Test global bpf_list_head arrays.

Make sure global arrays of bpf_list_heads and fields of bpf_list_heads in
nested struct types work correctly.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-10-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: d55c765a9b2d54b53ef86a62d6209e2e5eb62585
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added tests for global bpf_list_head arrays and nested structures in selftests/bpf.', 'keywords': 'bpf_list_head, selftests, arrays', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d55c765a9b2d54b53ef86a62d6209e2e5eb62585
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d55c765a9b2d54b53ef86a62d6209e2e5eb62585
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717473162
  Commit Message:
    selftests/bpf: Test global bpf_rb_root arrays and fields in nested struct types.

Make sure global arrays of bpf_rb_root and fields of bpf_rb_root in nested
struct types work correctly.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-9-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: c4c6c3b785a0b1426add15d078da61f899abeaac
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for global bpf_rb_root arrays and nested struct types.', 'keywords': 'selftests,bpf_rb_root,nested_struct', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c4c6c3b785a0b1426add15d078da61f899abeaac
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c4c6c3b785a0b1426add15d078da61f899abeaac
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717473162
  Commit Message:
    selftests/bpf: Test kptr arrays and kptrs in nested struct fields.

Make sure that BPF programs can declare global kptr arrays and kptr fields
in struct types that is the type of a global variable or the type of a
nested descendant field in a global variable.

An array with only one element is special case
  Parent Hashes: f19caf57d80f4432acea61d858d45ce194444389
  Refs:  that it treats the element
like a non-array kptr field. Nested arrays are also tested to ensure they
are handled properly.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-8-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Test kptr arrays and nested struct fields in BPF programs.', 'keywords': 'kptr,struct,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f19caf57d80f4432acea61d858d45ce194444389
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f19caf57d80f4432acea61d858d45ce194444389
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717473162
  Commit Message:
    bpf: limit the number of levels of a nested struct type.

Limit the number of levels looking into struct types to avoid running out
of stack space.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-7-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 64e8ee814819f21beeeda00d4119221443d77992
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Limit the inspection depth of nested struct types in BPF to prevent stack overflow.', 'keywords': 'nested struct, stack space, limit', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 64e8ee814819f21beeeda00d4119221443d77992
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 64e8ee814819f21beeeda00d4119221443d77992
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717473162
  Commit Message:
    bpf: look into the types of the fields of a struct type recursively.

The verifier has field information for specific special types
  Parent Hashes: 994796c0256c4001633488fd24c3d54691949f8d
  Refs:  such as
kptr

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enhances the eBPF verifier to recursively check struct field types.', 'keywords': 'verifier, struct, recursive', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 994796c0256c4001633488fd24c3d54691949f8d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 994796c0256c4001633488fd24c3d54691949f8d
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717473162
  Commit Message:
    bpf: create repeated fields for arrays.

The verifier uses field information for certain special types
  Parent Hashes: a7db0d4f872a869feb7c0201c0fa736c309192d5
  Refs:  such as
kptr

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit introduces repeated fields for arrays to enhance the eBPF verifier's handling of special types.", 'keywords': 'repeated, arrays, verifier', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a7db0d4f872a869feb7c0201c0fa736c309192d5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a7db0d4f872a869feb7c0201c0fa736c309192d5
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717473162
  Commit Message:
    bpf: refactor btf_find_struct_field() and btf_find_datasec_var().

Move common code of the two functions to btf_find_field_one().

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-4-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 482f7133791e894b94a57ab3251e03d4c98ea42b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactored btf_find_struct_field and btf_find_datasec_var into btf_find_field_one for code simplification.', 'keywords': 'refactor,btf,functions', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 482f7133791e894b94a57ab3251e03d4c98ea42b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 482f7133791e894b94a57ab3251e03d4c98ea42b
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717473162
  Commit Message:
    bpf: Remove unnecessary call to btf_field_type_size().

field->size has been initialized by bpf_parse_fields() with the value
returned by btf_field_type_size(). Use it instead of calling
btf_field_type_size() again.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-3-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: c95a3be45ad22ee8925d6d1ab531d5ba98216311
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes an unnecessary call to the btf_field_type_size function in the bpf code.', 'keywords': 'bpf, btf, field', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c95a3be45ad22ee8925d6d1ab531d5ba98216311
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c95a3be45ad22ee8925d6d1ab531d5ba98216311
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717473162
  Commit Message:
    bpf: Remove unnecessary checks on the offset of btf_field.

reg_find_field_offset() always return a btf_field with a matching offset
value. Checking the offset of the returned btf_field is unnecessary.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240523174202.461236-2-thinker.li@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 49784c7979321c49a8055f5c588d24c34a8c55fc
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes unnecessary checks on the offset of btf_field returned by reg_find_field_offset.', 'keywords': 'offset,btf_field,checks', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 49784c7979321c49a8055f5c588d24c34a8c55fc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 49784c7979321c49a8055f5c588d24c34a8c55fc
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1717435975
  Commit Message:
    selftests/bpf: Drop duplicate bpf_map_lookup_elem in test_sockmap

bpf_map_lookup_elem is invoked in bpf_prog3() already
  Parent Hashes: de1b5ea789dc28066cc8dc634b6825bd6148f38b
  Refs:  no need to invoke
it again. This patch drops it.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/ea8458462b876ee445173e3effb535fd126137ed.1716446893.git.tanggeliang@kylinos.cn


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove duplicate invocation of bpf_map_lookup_elem in test_sockmap function in selftests.', 'keywords': 'selftests,sockmap,duplicate', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: de1b5ea789dc28066cc8dc634b6825bd6148f38b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: de1b5ea789dc28066cc8dc634b6825bd6148f38b
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1717435975
  Commit Message:
    selftests/bpf: Check length of recv in test_sockmap

The value of recv in msg_loop may be negative
  Parent Hashes: dcb681b659f2a0a546752730c9daa92dc6120d52
  Refs:  like EWOULDBLOCK

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a check for negative recv length in test_sockmap selftests.', 'keywords': 'recv,length,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: dcb681b659f2a0a546752730c9daa92dc6120d52
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dcb681b659f2a0a546752730c9daa92dc6120d52
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1717435974
  Commit Message:
    selftests/bpf: Fix size of map_fd in test_sockmap

The array size of map_fd[] is 9
  Parent Hashes: 467a0c79b5514d7301ae679770380679a8e32668
  Refs:  not 8. This patch changes it as a more
general form: ARRAY_SIZE(map_fd).

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/0972529ee01ebf8a8fd2b310bdec90831c94be77.1716446893.git.tanggeliang@kylinos.cn


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed the array size definition of map_fd in selftests/bpf for test_sockmap to use ARRAY_SIZE macro.', 'keywords': 'array, map_fd, test_sockmap', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 467a0c79b5514d7301ae679770380679a8e32668
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 467a0c79b5514d7301ae679770380679a8e32668
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1717435974
  Commit Message:
    selftests/bpf: Drop prog_fd array in test_sockmap

The program fds can be got by using bpf_program__fd(progs[])
  Parent Hashes: 24bb90a42633ea47256d4f13289dd3181236e028
  Refs:  then
prog_fd becomes useless. This patch drops it.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/9a6335e4d8dbab23c0d8906074457ceddd61e74b.1716446893.git.tanggeliang@kylinos.cn


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes the unused prog_fd array from the test_sockmap in selftests.', 'keywords': 'prog_fd, test_sockmap, bpf_program__fd', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 24bb90a42633ea47256d4f13289dd3181236e028
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 24bb90a42633ea47256d4f13289dd3181236e028
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1717435974
  Commit Message:
    selftests/bpf: Replace tx_prog_fd with tx_prog in test_sockmap

bpf_program__attach_sockmap() needs to take a parameter of type bpf_program
instead of an fd
  Parent Hashes: 3f32a115f61d31049e3e91d469bca849f712a979
  Refs:  so tx_prog_fd becomes useless. This patch uses a pointer
tx_prog to point to an item in progs[] array.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/23b37f932c547dd1ebfe154bbc0b0e957be21ee6.1716446893.git.tanggeliang@kylinos.cn


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactored test_sockmap to use bpf_program pointer instead of file descriptor for attaching programs.', 'keywords': 'bpf_program, sockmap, refactor', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3f32a115f61d31049e3e91d469bca849f712a979
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3f32a115f61d31049e3e91d469bca849f712a979
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1717435974
  Commit Message:
    selftests/bpf: Use bpf_link attachments in test_sockmap

Switch attachments to bpf_link using bpf_program__attach_sockmap() instead
of bpf_prog_attach().

This patch adds a new array progs[] to replace prog_fd[] array
  Parent Hashes: a9f0ea175948c21640ae1cc145e679db7fc45fa6
  Refs:  set in
populate_progs() for each program in bpf object.

And another new array links[] to save the attached bpf_link. It is
initalized as NULL in populate_progs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Use bpf_link attachments in test_sockmap by switching to bpf_program__attach_sockmap.', 'keywords': 'bpf_link, attachments, test_sockmap', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a9f0ea175948c21640ae1cc145e679db7fc45fa6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a9f0ea175948c21640ae1cc145e679db7fc45fa6
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1717435974
  Commit Message:
    selftests/bpf: Drop duplicate definition of i in test_sockmap

There's already a definition of i in run_options() at the beginning
  Parent Hashes: d95ba15b97847f4ae520db83bd98b61d50fb3068
  Refs:  no
need to define a new one in "if (tx_prog_fd > 0)" block.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/8d690682330a59361562bca75d6903253d16f312.1716446893.git.tanggeliang@kylinos.cn


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes a duplicate variable definition in the test_sockmap function of selftests for BPF.', 'keywords': 'duplicate, definition, test_sockmap', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d95ba15b97847f4ae520db83bd98b61d50fb3068
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d95ba15b97847f4ae520db83bd98b61d50fb3068
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1717435974
  Commit Message:
    selftests/bpf: Fix tx_prog_fd values in test_sockmap

The values of tx_prog_fd in run_options() should not be 0
  Parent Hashes: ec1249d3278183d419276b9a7fe73591cd3dd505
  Refs:  so set it as -1
in else branch

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix incorrect tx_prog_fd values in selftests/bpf test_sockmap.', 'keywords': 'selftests,bpf,tx_prog_fd', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 2884dc7d08d98a89d8d65121524bb7533183a63a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2884dc7d08d98a89d8d65121524bb7533183a63a
  Author Name: Cong Wang
  Author Email: cong.wang@bytedance.com
  Commit Date: 1717431379
  Commit Message:
    bpf: Fix a potential use-after-free in bpf_link_free()

After commit 1a80dbcb2dba
  Parent Hashes: 2317dc2c22cc353b699c7d1db47b2fe91f54055c
  Refs:  bpf_link can be freed by
link->ops->dealloc_deferred

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a potential use-after-free issue in bpf_link_free function.', 'keywords': 'use-after-free,bpf_link_free,fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2317dc2c22cc353b699c7d1db47b2fe91f54055c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2317dc2c22cc353b699c7d1db47b2fe91f54055c
  Author Name: Thorsten Blum
  Author Email: thorsten.blum@toblux.com
  Commit Date: 1717427363
  Commit Message:
    bpf
  Parent Hashes: 7d0b3953f6d832daec10a0d76e2d4db405768a8b
  Refs:  devmap: Remove unnecessary if check in for loop

The iterator variable dst cannot be NULL and the if check can be removed.
Remove it and fix the following Coccinelle/coccicheck warning reported
by itnull.cocci:

	ERROR: iterator variable bound on line 762 cannot be NULL

Signed-off-by: Thorsten Blum <thorsten.blum@toblux.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Toke Høiland-Jørgensen <toke@redhat.com>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240529101900.103913-2-thorsten.blum@toblux.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove unnecessary NULL check in bpf devmap iterator variable to fix coccicheck warning.', 'keywords': 'devmap, NULL check, coccicheck', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ec1249d3278183d419276b9a7fe73591cd3dd505
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ec1249d3278183d419276b9a7fe73591cd3dd505
  Author Name: Jeff Johnson
  Author Email: quic_jjohnson@quicinc.com
  Commit Date: 1717427021
  Commit Message:
    test_bpf: Add missing MODULE_DESCRIPTION()

make allmodconfig && make W=1 C=1 reports:
WARNING: modpost: missing MODULE_DESCRIPTION() in lib/test_bpf.o

Add the missing invocation of the MODULE_DESCRIPTION() macro.

Signed-off-by: Jeff Johnson <quic_jjohnson@quicinc.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240531-md-lib-test_bpf-v1-1-868e4bd2f9ed@quicinc.com

  Parent Hashes: ce5249b91e34d81255c00950d415ebd4c3cae8d4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add missing MODULE_DESCRIPTION() macro to resolve modpost warning in test_bpf module.', 'keywords': 'MODULE_DESCRIPTION, test_bpf, warning', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: ce5249b91e34d81255c00950d415ebd4c3cae8d4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ce5249b91e34d81255c00950d415ebd4c3cae8d4
  Author Name: Swan Beaujard
  Author Email: beaujardswan@gmail.com
  Commit Date: 1717426707
  Commit Message:
    bpftool: Fix typo in MAX_NUM_METRICS macro name

Correct typo in bpftool profiler and change all instances of 'MATRICS' to
'METRICS' in the profiler.bpf.c file.

Signed-off-by: Swan Beaujard <beaujardswan@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Quentin Monnet <qmo@kernel.org>
Link: https://lore.kernel.org/bpf/20240602225812.81171-1-beaujardswan@gmail.com

  Parent Hashes: a450d36b05fa225b071ce9fbf522544caea06594
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes a typo in the MAX_NUM_METRICS macro name in bpftool.', 'keywords': 'typo, bpftool, metrics', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a450d36b05fa225b071ce9fbf522544caea06594
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a450d36b05fa225b071ce9fbf522544caea06594
  Author Name: Dr. David Alan Gilbert
  Author Email: linux@treblig.org
  Commit Date: 1717426386
  Commit Message:
    selftests/bpf: Remove unused struct 'libcap'

'libcap' is unused since commit b1c2768a82b9 ("bpf: selftests: Remove libcap
usage from test_verifier"). Remove it.

Signed-off-by: Dr. David Alan Gilbert <linux@treblig.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240602234112.225107-4-linux@treblig.org

  Parent Hashes: 3f67639d8e582c89c79549c619b22a00dd330e4e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "This commit removes the unused struct 'libcap' from selftests/bpf in Linux eBPF.", 'keywords': 'selftests,bpf,libcap', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 3f67639d8e582c89c79549c619b22a00dd330e4e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3f67639d8e582c89c79549c619b22a00dd330e4e
  Author Name: Dr. David Alan Gilbert
  Author Email: linux@treblig.org
  Commit Date: 1717426377
  Commit Message:
    selftests/bpf: Remove unused 'key_t' structs

'key_t' is unused in a couple of files since the original commit 60dd49ea6539
("selftests/bpf: Add test for bpf array map iterators"). Remove it.

Signed-off-by: Dr. David Alan Gilbert <linux@treblig.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240602234112.225107-3-linux@treblig.org

  Parent Hashes: dfa7c9ffa607235119e029b70ced72f29059f8f3
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Remove unused 'key_t' structs in selftests/bpf related files.", 'keywords': 'remove, key_t, selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: dfa7c9ffa607235119e029b70ced72f29059f8f3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dfa7c9ffa607235119e029b70ced72f29059f8f3
  Author Name: Dr. David Alan Gilbert
  Author Email: linux@treblig.org
  Commit Date: 1717426362
  Commit Message:
    selftests/bpf: Remove unused struct 'scale_test_def'

'scale_test_def' is unused since commit 3762a39ce85f ("selftests/bpf: Split out
bpf_verif_scale selftests into multiple tests"). Remove it.

Signed-off-by: Dr. David Alan Gilbert <linux@treblig.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240602234112.225107-2-linux@treblig.org

  Parent Hashes: 96a27ee76f0e95b56f94b6902da7a5ebef372612
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit removes an unused struct 'scale_test_def' from selftests/bpf.", 'keywords': 'unused, struct, selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 96a27ee76f0e95b56f94b6902da7a5ebef372612
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 96a27ee76f0e95b56f94b6902da7a5ebef372612
  Author Name: Xiao Wang
  Author Email: xiao.w.wang@intel.com
  Commit Date: 1717425923
  Commit Message:
    riscv
  Parent Hashes: 531876c80004ecff7bfdbd8ba6c6b48835ef5e22
  Refs:  bpf: Introduce shift add helper with Zba optimization

Zba extension is very useful for generating addresses that index into array
of basic data types. This patch introduces sh2add and sh3add helpers for
RV32 and RV64 respectively

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce sh2add and sh3add helpers for RISC-V with Zba optimization for address generation.', 'keywords': 'RISC-V, helpers, optimization', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 83814698cf48ce3aadc5d88a3f577f04482ff92a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 83814698cf48ce3aadc5d88a3f577f04482ff92a
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1717288475
  Commit Message:
    Merge tag 'powerpc-6.10-2' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux

Pull powerpc fixes from Michael Ellerman:

 - Enforce full ordering for ATOMIC operations with BPF_FETCH

 - Fix uaccess build errors seen with GCC 13/14

 - Fix build errors on ppc32 due to ARCH_HAS_KERNEL_FPU_SUPPORT

 - Drop error message from lparcfg guest name lookup

Thanks to Christophe Leroy
  Parent Hashes: 54bec8ed5732339438271d07376890454fa58046 be2fc65d66e0406cc9d39d40becaecdf4ee765f3
  Refs:  Guenter Roeck

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merges powerpc-related fixes including ATOMIC operations ordering and build error corrections.', 'keywords': 'powerpc, atomic, build', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 531876c80004ecff7bfdbd8ba6c6b48835ef5e22
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 531876c80004ecff7bfdbd8ba6c6b48835ef5e22
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1717212955
  Commit Message:
    libbpf: keep FD_CLOEXEC flag when dup()'ing FD

Make sure to preserve and/or enforce FD_CLOEXEC flag on duped FDs.
Use dup3() with O_CLOEXEC flag for that.

Without this fix libbpf effectively clears FD_CLOEXEC flag on each of BPF
map/prog FD
  Parent Hashes: 3f8fde319524411b96badee3c96f35831300388a
  Refs:  which is definitely not the right or expected behavior.

Reported-by: Lennart Poettering <lennart@poettering.net>
Fixes: bc308d011ab8 ("libbpf: call dup2() syscall directly")
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/r/20240529223239.504241-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes FD_CLOEXEC flag handling in libbpf by using dup3().', 'keywords': 'FD_CLOEXEC, libbpf, dup3', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7d0b3953f6d832daec10a0d76e2d4db405768a8b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7d0b3953f6d832daec10a0d76e2d4db405768a8b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1717192611
  Commit Message:
    libbpf: don't close(-1) in multi-uprobe feature detector

Guard close(link_fd) with extra link_fd >= 0 check to prevent close(-1).

Detected by Coverity static analysis.

Fixes: 04d939a2ab22 ("libbpf: detect broken PID filtering logic for multi-uprobe")
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/r/20240529231212.768828-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: aeb8fe0283d4d3b0f27a87c5f5c938e7324f7d8f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Guard added to ensure link_fd >= 0 before calling close to prevent errors in libbpf.', 'keywords': 'libbpf, close, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: aeb8fe0283d4d3b0f27a87c5f5c938e7324f7d8f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: aeb8fe0283d4d3b0f27a87c5f5c938e7324f7d8f
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1717192488
  Commit Message:
    bpf: Fix bpf_session_cookie BTF_ID in special_kfunc_set list

The bpf_session_cookie is unavailable for !CONFIG_FPROBE as reported
by Sebastian [1].

To fix that we remove CONFIG_FPROBE ifdef for session kfuncs
  Parent Hashes: 62da3acd28955e7299babebdfcb14243b789e773
  Refs:  which
is fine

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes bpf_session_cookie BTF_ID availability issue by removing CONFIG_FPROBE dependency for session kfuncs.', 'keywords': 'bpf_session_cookie, BTF_ID, CONFIG_FPROBE', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 62da3acd28955e7299babebdfcb14243b789e773
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 62da3acd28955e7299babebdfcb14243b789e773
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1717192465
  Commit Message:
    selftests/bpf: fix inet_csk_accept prototype in test_sk_storage_tracing.c

Recent kernel change ([0]) changed inet_csk_accept() prototype. Adapt
progs/test_sk_storage_tracing.c to take that into account.

  [0] 92ef0fd55ac8 ("net: change proto and proto_ops accept type")

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240528223218.3445297-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: d8ec19857b095b39d114ae299713bd8ea6c1e66a
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix inet_csk_accept prototype in test_sk_storage_tracing.c due to recent kernel change.', 'keywords': 'selftests,bpf,inet_csk_accept', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: bba1f6758a9ec90c1adac5dcf78f8a15f1bad65b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bba1f6758a9ec90c1adac5dcf78f8a15f1bad65b
  Author Name: Al Viro
  Author Email: viro@zeniv.linux.org.uk
  Commit Date: 1717127906
  Commit Message:
    lirc: rc_dev_get_from_fd(): fix file leak

missing fdput() on a failure exit

Fixes: 6a9d552483d50 "media: rc: bpf attach/detach requires write permission" # v6.9
Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

  Parent Hashes: b4cf5fc01ce83e5c0bcf3dbb9f929428646b9098
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Fixes a file descriptor leak in lirc's rc_dev_get_from_fd() function by ensuring fdput() is called on failure.", 'keywords': 'file leak, lirc, fdput', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 3f8fde319524411b96badee3c96f35831300388a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3f8fde319524411b96badee3c96f35831300388a
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1717108454
  Commit Message:
    Merge branch 'Notify user space when a struct_ops object is detached/unregistered'

Kui-Feng Lee says:

====================
The subsystems managing struct_ops objects may need to detach a
struct_ops object due to errors or other reasons. It would be useful
to notify user space programs so that error recovery or logging can be
carried out.

This patch set enables the detach feature for struct_ops links and
send an event to epoll when a link is detached.  Subsystems could call
link->ops->detach() to detach a link and notify user space programs
through epoll.

The signatures of callback functions in "struct bpf_struct_ops" have
been changed as well to pass an extra link argument to
subsystems. Subsystems could detach the links received from reg() and
update() callbacks if there is. This also provides a way that
subsystems can distinguish registrations for an object that has been
registered multiple times for several links.

However
  Parent Hashes: 46253c4ae96162a840ad65c1394de63796d7798a d14c1fac0c9722c4ec79589921c9e798601ca9d5
  Refs:  bpf struct_ops maps without BPF_F_LINK have no any link.
Subsystems will receive NULL link pointer for this case.
---
Changes from v6:

 - Fix the missing header at patch 5.

 - Move RCU_INIT_POINTER() back to its original position.

Changes from v5:

 - Change the commit title of the patch for bpftool.

Changes from v4:

 - Change error code for bpf_struct_ops_map_link_update()

 - Always return 0 for bpf_struct_ops_map_link_detach()

 - Hold update_mutex in bpf_struct_ops_link_create()

 - Add a separated instance of file_operations for links supporting
    poll.

 - Fix bpftool for bpf_link_fops_poll.

Changes from v3:

 - Add a comment to explain why holding update_mutex is not necessary
    in bpf_struct_ops_link_create()

 - Use rcu_access_pointer() in bpf_struct_ops_map_link_poll().

Changes from v2:

 - Rephrased commit logs and comments.

 - Addressed some mistakes from patch splitting.

 - Replace mutex with spinlock in bpf_testmod.c to address lockdep
    Splat and simplify the implementation.

 - Fix an argument passing to rcu_dereference_protected().

Changes from v1:

 - Pass a link to reg

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implement notification for user space when struct_ops objects are detached or unregistered using epoll.', 'keywords': 'struct_ops, detach, epoll', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d14c1fac0c9722c4ec79589921c9e798601ca9d5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d14c1fac0c9722c4ec79589921c9e798601ca9d5
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717108454
  Commit Message:
    bpftool: Change pid_iter.bpf.c to comply with the change of bpf_link_fops.

To support epoll
  Parent Hashes: 1a4b858b6a045828de1b536cfab7819c50864ed6
  Refs:  a new instance of file_operations

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Update bpftool's pid_iter.bpf.c to align with changes in bpf_link_fops for epoll support.", 'keywords': 'bpftool,bpf_link,epoll', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1a4b858b6a045828de1b536cfab7819c50864ed6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1a4b858b6a045828de1b536cfab7819c50864ed6
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717108454
  Commit Message:
    selftests/bpf: test struct_ops with epoll

Verify whether a user space program is informed through epoll with EPOLLHUP
when a struct_ops object is detached.

The BPF code in selftests/bpf/progs/struct_ops_module.c has become
complex. Therefore
  Parent Hashes: 67c3e8353f45c27800eecc46e00e8272f063f7d1
  Refs:  struct_ops_detach.c has been added to segregate the BPF
code for detachment tests from the BPF code for other tests based on the
recommendation of Andrii Nakryiko.

Suggested-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240530065946.979330-6-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Tests have been added to verify epoll notifications for struct_ops detachment in selftests.', 'keywords': 'epoll, struct_ops, detachment', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 67c3e8353f45c27800eecc46e00e8272f063f7d1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 67c3e8353f45c27800eecc46e00e8272f063f7d1
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717108453
  Commit Message:
    bpf: export bpf_link_inc_not_zero.

bpf_link_inc_not_zero() will be used by kernel modules.  We will use it in
bpf_testmod.c later.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240530065946.979330-5-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 1adddc97aa44c8783f9f0276ea70854d56f9f6df
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit exports the function bpf_link_inc_not_zero for use by kernel modules.', 'keywords': 'export,bpf_link,kernel', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1adddc97aa44c8783f9f0276ea70854d56f9f6df
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1adddc97aa44c8783f9f0276ea70854d56f9f6df
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717108453
  Commit Message:
    bpf: support epoll from bpf struct_ops links.

Add epoll support to bpf struct_ops links to trigger EPOLLHUP event upon
detachment.

This patch implements the "poll" of the "struct file_operations" for BPF
links and introduces a new "poll" operator in the "struct bpf_link_ops". By
implementing "poll" of "struct bpf_link_ops" for the links of struct_ops
  Parent Hashes: 6fb2544ea1493f52e50b753604791c01bd2cf897
  Refs: 
the file descriptor of a struct_ops link can be added to an epoll file
descriptor to receive EPOLLHUP events.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240530065946.979330-4-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds epoll support to bpf struct_ops links to handle EPOLLHUP events.', 'keywords': 'epoll, struct_ops, EPOLLHUP', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6fb2544ea1493f52e50b753604791c01bd2cf897
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6fb2544ea1493f52e50b753604791c01bd2cf897
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717108453
  Commit Message:
    bpf: enable detaching links of struct_ops objects.

Implement the detach callback in bpf_link_ops for struct_ops so that user
programs can detach a struct_ops link. The subsystems that struct_ops
objects are registered to can also use this callback to detach the links
being passed to them.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240530065946.979330-3-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 73287fe228721b05690e671adbcccc6cf5435be6
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implemented the detach callback in bpf_link_ops to enable detaching links of struct_ops objects.', 'keywords': 'detach, struct_ops, bpf_link_ops', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 73287fe228721b05690e671adbcccc6cf5435be6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 73287fe228721b05690e671adbcccc6cf5435be6
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1717108453
  Commit Message:
    bpf: pass bpf_struct_ops_link to callbacks in bpf_struct_ops.

Pass an additional pointer of bpf_struct_ops_link to callback function reg
  Parent Hashes: 46253c4ae96162a840ad65c1394de63796d7798a
  Refs: 
unreg

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit passes an additional pointer of bpf_struct_ops_link to callback functions in bpf_struct_ops.', 'keywords': 'bpf_struct_ops, callbacks, pointer', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 46253c4ae96162a840ad65c1394de63796d7798a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 46253c4ae96162a840ad65c1394de63796d7798a
  Author Name: Jakub Sitnicki
  Author Email: jakub@cloudflare.com
  Commit Date: 1717105337
  Commit Message:
    selftests/bpf: use section names understood by libbpf in test_sockmap

libbpf can deduce program type and attach type from the ELF section name.
We don't need to pass it out-of-band if we switch to libbpf convention [1].

[1] https://docs.kernel.org/bpf/libbpf/program_types.html

Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240522080936.2475833-1-jakub@cloudflare.com

  Parent Hashes: f088cabffcb646b559055464bb5fa79206752f07
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update selftests to use libbpf-convention section names for program type deduction in test_sockmap.', 'keywords': 'selftests, libbpf, section names', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: af752016340021d433a962063067e819dba889b1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: af752016340021d433a962063067e819dba889b1
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1717088757
  Commit Message:
    perf top: Allow filters on events

Allow filters to be added to perf top events. One use is to workaround
issues with:
```
$ perf top --uid="$(id -u)"
```
which tries to scan /proc find processes belonging to the uid and can
fail in such a pid terminates between the scan and the
perf_event_open reporting:
```
Error:
The sys_perf_event_open() syscall returned with 3 (No such process) for event (cycles:P).
/bin/dmesg | grep -i perf may provide additional information.
```
A similar filter:
```
$ perf top -e cycles:P --filter "uid == $(id -u)"
```
doesn't fail this way.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: bpf@vger.kernel.org
Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: https://lore.kernel.org/r/20240524205227.244375-4-irogers@google.com

  Parent Hashes: d92aa899fe0a66350303a1986d6dc7ec4b3a1ea7
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds filters to Perf top events to address issues caused by terminated processes.', 'keywords': 'filters, events, perf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: d92aa899fe0a66350303a1986d6dc7ec4b3a1ea7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d92aa899fe0a66350303a1986d6dc7ec4b3a1ea7
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1717088757
  Commit Message:
    perf bpf filter: Add uid and gid terms

Allow the BPF filter to use the uid and gid terms determined by the
bpf_get_current_uid_gid BPF helper. For example
  Parent Hashes: 63b9cbd7941aa9ec5cb61567042176c4ce04b020
  Refs:  the following will
record the cpu-clock event system wide discarding samples that don't
belong to the current user.

$ perf record -e cpu-clock --filter "uid == $(id -u)" -a sleep 0.1

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: bpf@vger.kernel.org
Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: https://lore.kernel.org/r/20240524205227.244375-3-irogers@google.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds uid and gid filtering capability to the perf BPF filter using bpf_get_current_uid_gid.', 'keywords': 'uid,gid,filter', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 63b9cbd7941aa9ec5cb61567042176c4ce04b020
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 63b9cbd7941aa9ec5cb61567042176c4ce04b020
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1717088757
  Commit Message:
    perf bpf filter: Give terms their own enum

Give the term types their own enum so that additional terms can be
added that don't correspond to a PERF_SAMPLE_xx flag. The term values
are numerically ascending rather than bit field positions
  Parent Hashes: d163d60258c755845cbc9cfe0e45fca71e649488
  Refs:  this means
they need translating to a PERF_SAMPLE_xx bit field in certain places
using a shift.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: bpf@vger.kernel.org
Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: https://lore.kernel.org/r/20240524205227.244375-2-irogers@google.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor perf BPF filter to assign unique enums to term types for expansion beyond PERF_SAMPLE_xx flags.', 'keywords': 'perf,BPF,enum', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['profile like programs']}
--------------------
--------------------
Processing Commit ID: d8ec19857b095b39d114ae299713bd8ea6c1e66a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d8ec19857b095b39d114ae299713bd8ea6c1e66a
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1717083184
  Commit Message:
    Merge tag 'net-6.10-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 "Including fixes from bpf and netfilter.

  Current release - regressions:

   - gro: initialize network_offset in network layer

   - tcp: reduce accepted window in NEW_SYN_RECV state

  Current release - new code bugs:

   - eth: mlx5e: do not use ptp structure for tx ts stats when not
     initialized

   - eth: ice: check for unregistering correct number of devlink params

  Previous releases - regressions:

   - bpf: Allow delete from sockmap/sockhash only if update is allowed

   - sched: taprio: extend minimum interval restriction to entire cycle
     too

   - netfilter: ipset: add list flush to cancel_gc

   - ipv4: fix address dump when IPv4 is disabled on an interface

   - sock_map: avoid race between sock_map_close and sk_psock_put

   - eth: mlx5: use mlx5_ipsec_rx_status_destroy to correctly delete
     status rules

  Previous releases - always broken:

   - core: fix __dst_negative_advice() race

   - bpf:
       - fix multi-uprobe PID filtering logic
       - fix pkt_type override upon netkit pass verdict

   - netfilter: tproxy: bail out if IP has been disabled on the device

   - af_unix: annotate data-race around unix_sk(sk)->addr

   - eth: mlx5e: fix UDP GSO for encapsulated packets

   - eth: idpf: don't enable NAPI and interrupts prior to allocating Rx
     buffers

   - eth: i40e: fully suspend and resume IO operations in EEH case

   - eth: octeontx2-pf: free send queue buffers incase of leaf to inner

   - eth: ipvlan: dont Use skb->sk in ipvlan_process_v{4
  Parent Hashes: 4a4be1ad3a6efea16c56615f31117590fd881358 13c7c941e72908b8cce5a84b45a7b5e485ca12ed
  Refs: 6}_outbound"

* tag 'net-6.10-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (69 commits)
  netdev: add qstat for csum complete
  ipvlan: Dont Use skb->sk in ipvlan_process_v{4

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges networking fixes addressing regressions and bugs for the current and previous Linux kernel releases.', 'keywords': 'networking, bugs, bpf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: f088cabffcb646b559055464bb5fa79206752f07
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f088cabffcb646b559055464bb5fa79206752f07
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1717023708
  Commit Message:
    Merge branch 'bpf-add-a-generic-bits-iterator'

Yafang Shao says:

====================
bpf: Add a generic bits iterator

Three new kfuncs
  Parent Hashes: fbe3e8473f391adbf67eb0f317305fe62c66096c 6ba7acdb93b4ecb554d5838fca3f5f0fcf9fff14
  Refs:  namely bpf_iter_bits_{new

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a generic bits iterator with new kfuncs to the BPF subsystem.', 'keywords': 'generic, bits, iterator', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6ba7acdb93b4ecb554d5838fca3f5f0fcf9fff14
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6ba7acdb93b4ecb554d5838fca3f5f0fcf9fff14
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1717023708
  Commit Message:
    selftests/bpf: Add selftest for bits iter

Add test cases for the bits iter:

- Positive cases
  - Bit mask representing a single word (8-byte unit)
  - Bit mask representing data spanning more than one word
  - The index of the set bit

- Nagative cases
  - bpf_iter_bits_destroy() is required after calling
    bpf_iter_bits_new()
  - bpf_iter_bits_destroy() can only destroy an initialized iter
  - bpf_iter_bits_next() must use an initialized iter
  - Bit mask representing zero words
  - Bit mask representing fewer words than expected
  - Case for ENOMEM
  - Case for NULL pointer

Signed-off-by: Yafang Shao <laoar.shao@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240517023034.48138-3-laoar.shao@gmail.com

  Parent Hashes: 4665415975b0827e9646cab91c61d02a6b364d59
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for bits iterator handling various positive and negative cases in the BPF environment.', 'keywords': 'selftests,bits iterator,test cases', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4665415975b0827e9646cab91c61d02a6b364d59
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4665415975b0827e9646cab91c61d02a6b364d59
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1717023707
  Commit Message:
    bpf: Add bits iterator

Add three new kfuncs for the bits iterator:
- bpf_iter_bits_new
  Initialize a new bits iterator for a given memory area. Due to the
  limitation of bpf memalloc
  Parent Hashes: fbe3e8473f391adbf67eb0f317305fe62c66096c
  Refs:  the max number of words (8-byte units) that
  can be iterated over is limited to (4096 / 8).
- bpf_iter_bits_next
  Get the next bit in a bpf_iter_bits
- bpf_iter_bits_destroy
  Destroy a bpf_iter_bits

The bits iterator facilitates the iteration of the bits of a memory area

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit introduces three new kernel functions for bits iteration within a memory area using a bits iterator.', 'keywords': 'bits, iterator, kfuncs', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: b1e7cee96127468c2483cf10c2899c9b5cf79bf8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b1e7cee96127468c2483cf10c2899c9b5cf79bf8
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1716984762
  Commit Message:
    powerpc/bpf: enforce full ordering for ATOMIC operations with BPF_FETCH

The Linux Kernel Memory Model [1][2] requires RMW operations that have a
return value to be fully ordered.

BPF atomic operations with BPF_FETCH (including BPF_XCHG and
BPF_CMPXCHG) return a value back so they need to be JITed to fully
ordered operations. POWERPC currently emits relaxed operations for
these.

We can show this by running the following litmus-test:

  PPC SB+atomic_add+fetch

  {
      0:r0=x;  (* dst reg assuming offset is 0 *)
      0:r1=2;  (* src reg *)
      0:r2=1;
      0:r4=y;  (* P0 writes to this
  Parent Hashes: 1613e604df0cd359cf2a7fbd9be7a0bcfacfabd0
  Refs:  P1 reads this *)
      0:r5=z;  (* P1 writes to this

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enforce full memory ordering for POWERPC BPF atomic operations using BPF_FETCH.', 'keywords': 'POWERPC, BPF_FETCH, ordering', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fbe3e8473f391adbf67eb0f317305fe62c66096c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fbe3e8473f391adbf67eb0f317305fe62c66096c
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1716959775
  Commit Message:
    Merge branch 'use network helpers
  Parent Hashes: eb4e7726279a344c82e3c23be396bcfd0a4d5669 ed61271af5230cef9b9329bb1eacc1b1a9800d07
  Refs:  part 5'

Geliang Tang says:

====================
This patchset uses post_socket_cb callbacks of struct network_helper_opts
to refactor do_test() in bpf_tcp_ca.c.

v5:
 - address Martin's comments in v4 (thanks)
 - add patch 4

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor do_test() in bpf_tcp_ca.c using network helpers post_socket_cb callbacks.', 'keywords': 'network, refactor, callbacks', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: ed61271af5230cef9b9329bb1eacc1b1a9800d07
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ed61271af5230cef9b9329bb1eacc1b1a9800d07
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1716943984
  Commit Message:
    selftests/bpf: Use start_server_str in do_test in bpf_tcp_ca

This patch uses new helper start_server_str() in do_test() in bpf_tcp_ca.c
to accept a struct network_helper_opts argument instead of using
start_server() and settcpca(). Then change the type of the first paramenter
of do_test() into a struct network_helper_opts one.

Define its own cb_opts and opts for each test
  Parent Hashes: 79b330c57debe6b15f441e999bb62042afd5b08e
  Refs:  set its own cc name into
cb_opts.cc

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor bpf_tcp_ca test to use start_server_str with network_helper_opts for better test configuration.', 'keywords': 'start_server_str, network_helper_opts, do_test', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 79b330c57debe6b15f441e999bb62042afd5b08e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 79b330c57debe6b15f441e999bb62042afd5b08e
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1716943984
  Commit Message:
    selftests/bpf: Use post_socket_cb in start_server_str

This patch uses start_server_str() helper in test_dctcp_fallback() in
bpf_tcp_ca.c
  Parent Hashes: e078255abd53ac44c9133fd98d51645dbd196123
  Refs:  instead of using start_server() and settcpca(). For
support opts in start_server_str() helper

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Use start_server_str helper in bpf_tcp_ca.c tests for DCTCP fallback.', 'keywords': 'start_server_str,test_dctcp_fallback,bpf_tcp_ca', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: e078255abd53ac44c9133fd98d51645dbd196123
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e078255abd53ac44c9133fd98d51645dbd196123
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1716943984
  Commit Message:
    selftests/bpf: Use post_socket_cb in connect_to_fd_opts

Since the post_socket_cb() callback is added in struct network_helper_opts
  Parent Hashes: 6f802cb8988e8e41f2fdb74ac949d3a0ef9a9594
  Refs: 
it's make sense to use it not only in __start_server()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies BPF selftests to use the post_socket_cb callback in connect_to_fd_opts for consistency.', 'keywords': 'selftests,bpf,callback', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 6f802cb8988e8e41f2fdb74ac949d3a0ef9a9594
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6f802cb8988e8e41f2fdb74ac949d3a0ef9a9594
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1716943983
  Commit Message:
    selftests/bpf: Add start_server_str helper

It's a tech debt that start_server() does not take the "opts" argument.
It's pretty handy to have start_server() as a helper that takes string
address.

So this patch creates a new helper start_server_str(). Then start_server()
can be a wrapper of it.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/606e6cfd7e1aff8bc51ede49862eed0802e52170.1716638248.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: ed31adf6874db172e3212ac1ebaf701ed6190650
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add start_server_str helper to enhance start_server() functionality in BPF selftests.', 'keywords': 'start_server_str, helper, selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ed31adf6874db172e3212ac1ebaf701ed6190650
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ed31adf6874db172e3212ac1ebaf701ed6190650
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1716943983
  Commit Message:
    selftests/bpf: Drop struct post_socket_opts

It's not possible to have one generic/common "struct post_socket_opts"
for all tests. It's better to have the individual test define its own
callback opts struct.

So this patch drops struct post_socket_opts
  Parent Hashes: eb4e7726279a344c82e3c23be396bcfd0a4d5669
  Refs:  and changes the second
parameter of post_socket_cb as "void *" type.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/f8bda41c7cb9cb6979b2779f89fb3a684234304f.1716638248.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes the generic struct post_socket_opts in selftests for more test-specific callback structures.', 'keywords': 'selftests,struct,callback', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: eb4e7726279a344c82e3c23be396bcfd0a4d5669
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: eb4e7726279a344c82e3c23be396bcfd0a4d5669
  Author Name: Mykyta Yatsenko
  Author Email: yatsenko@meta.com
  Commit Date: 1716938706
  Commit Message:
    libbpf: Configure log verbosity with env variable

Configure logging verbosity by setting LIBBPF_LOG_LEVEL environment
variable
  Parent Hashes: 4b3529edbb8ff069d762c6947e055e10c1748170
  Refs:  which is applied only to default logger. Once user set their
custom logging callback

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds the ability to configure logging verbosity in libbpf using an environment variable.', 'keywords': 'log verbosity, libbpf, environment', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 4b3529edbb8ff069d762c6947e055e10c1748170
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4b3529edbb8ff069d762c6947e055e10c1748170
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1716906449
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-05-28

We've added 23 non-merge commits during the last 11 day(s) which contain
a total of 45 files changed
  Parent Hashes: c30ff5f3aec3f77e13cfd7373390639bfdcffba7 d9cbd8343b010016fcaabc361c37720dcafddcbe
  Refs:  696 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merge tag 'for-netdev' from the bpf-next branch into the current branch.", 'keywords': 'merge, bpf-next, netdev', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 4b4647add7d3c8530493f7247d11e257ee425bf0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4b4647add7d3c8530493f7247d11e257ee425bf0
  Author Name: Thadeu Lima de Souza Cascardo
  Author Email: cascardo@igalia.com
  Commit Date: 1716890719
  Commit Message:
    sock_map: avoid race between sock_map_close and sk_psock_put

sk_psock_get will return NULL if the refcount of psock has gone to 0
  Parent Hashes: c519cf9b7434183bb56ed1e200ac577a5fd34d9b
  Refs:  which
will happen when the last call of sk_psock_put is done. However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix potential race condition between sock_map_close and sk_psock_put functions.', 'keywords': 'race, sock_map, refcount', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: d9cbd8343b010016fcaabc361c37720dcafddcbe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d9cbd8343b010016fcaabc361c37720dcafddcbe
  Author Name: yunshui
  Author Email: jiangyunshui@kylinos.cn
  Commit Date: 1716890651
  Commit Message:
    bpf
  Parent Hashes: e245ef8a0b06fa5a18ca3bdcf82430166419283e
  Refs:  net: Use DEV_STAT_INC()

syzbot/KCSAN reported that races happen when multiple CPUs updating
dev->stats.tx_error concurrently. Adopt SMP safe DEV_STATS_INC() to
update the dev->stats fields.

Reported-by: syzbot <syzkaller@googlegroups.com>
Signed-off-by: yunshui <jiangyunshui@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240523033520.4029314-1-jiangyunshui@kylinos.cn


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix race condition in network stats update using SMP safe DEV_STATS_INC().', 'keywords': 'race condition, SMP safe, DEV_STATS_INC', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 2786ae339ef504f480753b54219b65471aaf98e8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2786ae339ef504f480753b54219b65471aaf98e8
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1716852390
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-05-27

We've added 15 non-merge commits during the last 7 day(s) which contain
a total of 18 files changed
  Parent Hashes: 52a2f0608366a629d43dacd3191039c95fef74ba a63bf556160fb19591183383da6757f52119981d
  Refs:  583 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merged changes from the 'for-netdev' branch containing updates to the Linux kernel's BPF subsystem.", 'keywords': 'merge, bpf, netdev', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a63bf556160fb19591183383da6757f52119981d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a63bf556160fb19591183383da6757f52119981d
  Author Name: Jakub Sitnicki
  Author Email: jakub@cloudflare.com
  Commit Date: 1716831266
  Commit Message:
    selftests/bpf: Cover verifier checks for mutating sockmap/sockhash

Verifier enforces that only certain program types can mutate sock{map
  Parent Hashes: 3b9ce0491a43e9af7f108b2f1bced7cd35931660
  Refs: hash}
maps

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add self-tests for verifying sockmap and sockhash mutation rules in the eBPF verifier.', 'keywords': 'selftests, verifier, sockmap', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', "It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 3b9ce0491a43e9af7f108b2f1bced7cd35931660
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3b9ce0491a43e9af7f108b2f1bced7cd35931660
  Author Name: Jakub Sitnicki
  Author Email: jakub@cloudflare.com
  Commit Date: 1716831265
  Commit Message:
    Revert "bpf
  Parent Hashes: 98e948fb60d41447fd8d2d0c3b8637fc6b6dc26d
  Refs:  sockmap: Prevent lock inversion deadlock in map delete elem"

This reverts commit ff91059932401894e6c86341915615c5eb0eca48.

This check is no longer needed. BPF programs attached to tracepoints are
now rejected by the verifier when they attempt to delete from a
sockmap/sockhash maps.

Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20240527-sockmap-verify-deletes-v1-2-944b372f2101@cloudflare.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Revert commit to remove unnecessary check for tracepoints in sockmap/sockhash operations.', 'keywords': 'revert, sockmap, tracepoints', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 98e948fb60d41447fd8d2d0c3b8637fc6b6dc26d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 98e948fb60d41447fd8d2d0c3b8637fc6b6dc26d
  Author Name: Jakub Sitnicki
  Author Email: jakub@cloudflare.com
  Commit Date: 1716831220
  Commit Message:
    bpf: Allow delete from sockmap/sockhash only if update is allowed

We have seen an influx of syzkaller reports where a BPF program attached to
a tracepoint triggers a locking rule violation by performing a map_delete
on a sockmap/sockhash.

We don't intend to support this artificial use scenario. Extend the
existing verifier allowed-program-type check for updating sockmap/sockhash
to also cover deleting from a map.

From now on only BPF programs which were previously allowed to update
sockmap/sockhash can delete from these map types.

Fixes: ff9105993240 ("bpf
  Parent Hashes: 95348e463eabc803341c67d562f9e0a5f0a48fe6
  Refs:  sockmap: Prevent lock inversion deadlock in map delete elem")
Reported-by: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Reported-by: syzbot+ec941d6e24f633a59172@syzkaller.appspotmail.com
Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: syzbot+ec941d6e24f633a59172@syzkaller.appspotmail.com
Acked-by: John Fastabend <john.fastabend@gmail.com>
Closes: https://syzkaller.appspot.com/bug?extid=ec941d6e24f633a59172
Link: https://lore.kernel.org/bpf/20240527-sockmap-verify-deletes-v1-1-944b372f2101@cloudflare.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance verifier to restrict sockmap/sockhash delete operations to permitted BPF program types to avoid locking rule violations.', 'keywords': 'sockmap,sockhash,locking', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: e245ef8a0b06fa5a18ca3bdcf82430166419283e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e245ef8a0b06fa5a18ca3bdcf82430166419283e
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1716742722
  Commit Message:
    bpf
  Parent Hashes: f980f13e4eb299abba6692365315196e1ba6fd2c
  Refs:  docs: Fix instruction.rst indentation

The table captions patch corrected indented most tables to work with
the table directive for adding a caption but missed two of them.

Signed-off-by: Dave Thaler <dthaler1968@gmail.com>
Reviewed-by: Christoph Hellwig <hch@lst.de>
Link: https://lore.kernel.org/r/20240526061815.22497-1-dthaler1968@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix indentation issues in instruction.rst table captions for proper rendering.', 'keywords': 'indentation, documentation, table', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 2313022ec5942e3ddd2e4e57002ed71926887f87
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2313022ec5942e3ddd2e4e57002ed71926887f87
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1716668268
  Commit Message:
    Merge tag 'uml-for-linus-6.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/uml/linux

Pull UML updates from Richard Weinberger:

 - Fixes for -Wmissing-prototypes warnings and further cleanup

 - Remove callback returning void from rtc and virtio drivers

 - Fix bash location

* tag 'uml-for-linus-6.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/uml/linux: (26 commits)
  um: virtio_uml: Convert to platform remove callback returning void
  um: rtc: Convert to platform remove callback returning void
  um: Remove unused do_get_thread_area function
  um: Fix -Wmissing-prototypes warnings for __vdso_*
  um: Add an internal header shared among the user code
  um: Fix the declaration of kasan_map_memory
  um: Fix the -Wmissing-prototypes warning for get_thread_reg
  um: Fix the -Wmissing-prototypes warning for __switch_mm
  um: Fix -Wmissing-prototypes warnings for (rt_)sigreturn
  um: Stop tracking host PID in cpu_tasks
  um: process: remove unused 'n' variable
  um: vector: remove unused len variable/calculation
  um: vector: fix bpfflash parameter evaluation
  um: slirp: remove set but unused variable 'pid'
  um: signal: move pid variable where needed
  um: Makefile: use bash from the environment
  um: Add winch to winch_handlers before registering winch IRQ
  um: Fix -Wmissing-prototypes warnings for __warp_* and foo
  um: Fix -Wmissing-prototypes warnings for text_poke*
  um: Move declarations to proper headers
  ...

  Parent Hashes: 56fb6f92854f29dcb6c3dc3ba92eeda1b615e88c 919e3ece7f5aaf7b5f3c54538d5303b6eeeb053b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merged UML updates focusing on cleanup and fixing -Wmissing-prototypes warnings from the Linux kernel.', 'keywords': 'UML, cleanup, warnings', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 95348e463eabc803341c67d562f9e0a5f0a48fe6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 95348e463eabc803341c67d562f9e0a5f0a48fe6
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1716659591
  Commit Message:
    selftests/bpf: Add netkit test for pkt_type

Add a test case to assert that the skb->pkt_type which was set from the BPF
program is retained from the netkit xmit side to the peer's device at tcx
ingress location.

  # ./vmtest.sh -- ./test_progs -t netkit
  [...]
  ./test_progs -t netkit
  [    1.140780] bpf_testmod: loading out-of-tree module taints kernel.
  [    1.141127] bpf_testmod: module verification failed: signature and/or required key missing - tainting kernel
  [    1.284601] tsc: Refined TSC clocksource calibration: 3408.006 MHz
  [    1.286672] clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x311fd9b189d
  Parent Hashes: 998ffeb2738e26f134dc8e63b5dcaece22573957
  Refs:  max_idle_ns: 440795225691 ns
  [    1.290384] clocksource: Switched to clocksource tsc
  #345     tc_netkit_basic:OK
  #346     tc_netkit_device:OK
  #347     tc_netkit_multi_links:OK
  #348     tc_netkit_multi_opts:OK
  #349     tc_netkit_neigh_links:OK
  #350     tc_netkit_pkt_type:OK
  Summary: 6/0 PASSED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a test for verifying pkt_type in BPF netkit selftests.', 'keywords': 'selftests,netkit,pkt_type', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 998ffeb2738e26f134dc8e63b5dcaece22573957
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 998ffeb2738e26f134dc8e63b5dcaece22573957
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1716659337
  Commit Message:
    selftests/bpf: Add netkit tests for mac address

This adds simple tests around setting MAC addresses in the different
netkit modes.

Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/r/20240524163619.26001-3-daniel@iogearbox.net
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 3998d184267dfcff858aaa84d3de17429253629d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds selftests for netkit involving MAC address settings.', 'keywords': 'selftests, netkit, MAC', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 3998d184267dfcff858aaa84d3de17429253629d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3998d184267dfcff858aaa84d3de17429253629d
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1716659337
  Commit Message:
    netkit: Fix pkt_type override upon netkit pass verdict

When running Cilium connectivity test suite with netkit in L2 mode
  Parent Hashes: d6fe532b7499e4575f9647879b7a34625817fe7f
  Refs:  we
found that compared to tcx a few tests were failing which pushed traffic
into an L7 proxy sitting in host namespace. The problem in particular is
around the invocation of eth_type_trans() in netkit.

In case of tcx

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes pkt_type override issue in netkit affecting connectivity tests with traffic directed to L7 proxy.', 'keywords': 'netkit, pkt_type, Cilium', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: d6fe532b7499e4575f9647879b7a34625817fe7f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d6fe532b7499e4575f9647879b7a34625817fe7f
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1716659337
  Commit Message:
    netkit: Fix setting mac address in l2 mode

When running Cilium connectivity test suite with netkit in L2 mode
  Parent Hashes: dd6a403795f0c7b5c566f86f2ee6b687278d3c1c
  Refs:  we
found that it is expected to be able to specify a custom MAC address for
the devices

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes the issue of setting MAC addresses in Netkit when in L2 mode for Cilium connectivity tests.', 'keywords': 'Netkit, MAC address, L2 mode', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: dd6a403795f0c7b5c566f86f2ee6b687278d3c1c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dd6a403795f0c7b5c566f86f2ee6b687278d3c1c
  Author Name: Shahab Vahedi
  Author Email: shahab@synopsys.com
  Commit Date: 1716659241
  Commit Message:
    ARC
  Parent Hashes: 590016ad83de770153a09151336d95544d6bd7ad
  Refs:  bpf: Fix issues reported by the static analyzers

Also updated couple of comments along the way.

One of the issues reported was indeed a bug in the code:

  memset(ctx

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes issues reported by static analyzers, including a bug in the code, and updates some comments.', 'keywords': 'bug, static analyzers, comments', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 590016ad83de770153a09151336d95544d6bd7ad
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 590016ad83de770153a09151336d95544d6bd7ad
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1716659163
  Commit Message:
    Merge branch 'fix-bpf-multi-uprobe-pid-filtering-logic'

Andrii Nakryiko says:

====================
Fix BPF multi-uprobe PID filtering logic

It turns out that current implementation of multi-uprobe PID filtering logic
is broken. It filters by thread
  Parent Hashes: 44382b3ed6b2787710c8ade06c0e97f5970a47c8 198034a87dfeb64d5a8359a5089022c6b923646e
  Refs:  while the promise is filtering by process.
Patch #1 fixes the logic trivially. The rest is testing and mitigations that
are necessary for libbpf to not break users of USDT programs.

v1->v2:
  - fix selftest in last patch (CI);
  - use semicolon in patch #3 (Jiri).
====================

Link: https://lore.kernel.org/r/20240521163401.3005045-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes BPF multi-uprobe PID filtering logic from filtering by thread to filtering by process.', 'keywords': 'BPF, uprobe, filtering', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 198034a87dfeb64d5a8359a5089022c6b923646e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 198034a87dfeb64d5a8359a5089022c6b923646e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1716659162
  Commit Message:
    selftests/bpf: extend multi-uprobe tests with USDTs

Validate libbpf's USDT-over-multi-uprobe logic by adding USDTs to
existing multi-uprobe tests. This checks correct libbpf fallback to
singular uprobes (when run on older kernels with buggy PID filtering).
We reuse already established child process and child thread testing
infrastructure
  Parent Hashes: 70342420a1cf1173bdec456e5fa574a804e422db
  Refs:  so additions are minimal. These test fail on either
older kernels or older version of libbpf that doesn't detect PID
filtering problems.

Acked-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240521163401.3005045-6-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Enhanced multi-uprobe tests with USDTs to validate libbpf's logic and improve testing on older kernels.", 'keywords': 'multi-uprobe, USDTs, libbpf', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 70342420a1cf1173bdec456e5fa574a804e422db
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 70342420a1cf1173bdec456e5fa574a804e422db
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1716659162
  Commit Message:
    selftests/bpf: extend multi-uprobe tests with child thread case

Extend existing multi-uprobe tests to test that PID filtering works
correctly. We already have child *process* tests
  Parent Hashes: 04d939a2ab229a3821f04fc81f7c027842f501f1
  Refs:  but we need also child
*thread* tests. This patch adds spawn_thread() helper to start child
thread

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extend multi-uprobe tests to include PID filtering for child threads.', 'keywords': 'multi-uprobe,PIDs,threads', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 04d939a2ab229a3821f04fc81f7c027842f501f1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 04d939a2ab229a3821f04fc81f7c027842f501f1
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1716659162
  Commit Message:
    libbpf: detect broken PID filtering logic for multi-uprobe

Libbpf is automatically (and transparently to user) detecting
multi-uprobe support in the kernel
  Parent Hashes: 4a8f635a60540888dab3804992e86410360339c8
  Refs:  and

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Libbpf now detects broken PID filtering logic for multi-uprobe support in the kernel.', 'keywords': 'libbpf,multi-uprobe,PID-filtering', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 4a8f635a60540888dab3804992e86410360339c8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4a8f635a60540888dab3804992e86410360339c8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1716659162
  Commit Message:
    bpf: remove unnecessary rcu_read_{lock
  Parent Hashes: 46ba0e49b64232adac35a2bc892f1710c5b0fb7f
  Refs: unlock}() in multi-uprobe attach logic

get_pid_task() internally already calls rcu_read_lock() and
rcu_read_unlock()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed redundant RCU read locks in the multi-uprobe attach logic for bpf.', 'keywords': 'bpf, RCU, uprobe', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 46ba0e49b64232adac35a2bc892f1710c5b0fb7f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 46ba0e49b64232adac35a2bc892f1710c5b0fb7f
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1716659162
  Commit Message:
    bpf: fix multi-uprobe PID filtering logic

Current implementation of PID filtering logic for multi-uprobes in
uprobe_prog_run() is filtering down to exact *thread*
  Parent Hashes: 44382b3ed6b2787710c8ade06c0e97f5970a47c8
  Refs:  while the intent
for PID filtering it to filter by *process* instead. The check in
uprobe_prog_run() also differs from the analogous one in
uprobe_multi_link_filter() for some reason. The latter is correct

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix process PID filtering logic for multi-uprobes in the uprobe_prog_run function.', 'keywords': 'PID filtering, multi-uprobes, logic', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: f980f13e4eb299abba6692365315196e1ba6fd2c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f980f13e4eb299abba6692365315196e1ba6fd2c
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1716658917
  Commit Message:
    bpf
  Parent Hashes: 6a6d8b6f00ade597e0030669fae3fdf57cfba33b
  Refs:  docs: Clarify call local offset

In the Jump instructions section it explains that the offset is
"relative to the instruction following the jump instruction".
But the program-local section confusingly said "referenced by
offset from the call instruction

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Clarifies documentation on offset referencing in program-local section for BPF jump and call instructions.', 'keywords': 'documentation, offset, jump', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 6a6d8b6f00ade597e0030669fae3fdf57cfba33b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6a6d8b6f00ade597e0030669fae3fdf57cfba33b
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1716658771
  Commit Message:
    bpf
  Parent Hashes: 4e1215d9a1903fc9e976aa8903674d050c7af5ff
  Refs:  docs: Add table captions

As suggested by Ines Robles in his IETF GENART review at
https://datatracker.ietf.org/doc/review-ietf-bpf-isa-02-genart-lc-robles-2024-05-16/

Signed-off-by: Dave Thaler <dthaler1968@gmail.com>
Link: https://lore.kernel.org/r/20240524164618.18894-1-dthaler1968@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds table captions to documentation as per an IETF GENART review suggestion.', 'keywords': 'table captions, documentation, review', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 4e1215d9a1903fc9e976aa8903674d050c7af5ff
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4e1215d9a1903fc9e976aa8903674d050c7af5ff
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1716658743
  Commit Message:
    bpf
  Parent Hashes: a985fdca5e7e665d58dc40c92a67c8b67b6291db
  Refs:  docs: clarify sign extension of 64-bit use of 32-bit imm

imm is defined as a 32-bit signed integer.

{MOV

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Clarify documentation regarding sign extension of 64-bit use of 32-bit immediate values.', 'keywords': 'sign extension, 64-bit, documentation', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a985fdca5e7e665d58dc40c92a67c8b67b6291db
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a985fdca5e7e665d58dc40c92a67c8b67b6291db
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1716658715
  Commit Message:
    bpf
  Parent Hashes: 4652072e7b9d643edc9ebb04e3e2c021461b7af0
  Refs:  docs: Use RFC 2119 language for ISA requirements

Per IETF convention and discussion at LSF/MM/BPF

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update documentation to use RFC 2119 language for ISA requirements.', 'keywords': 'documentation, RFC 2119, ISA', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 4652072e7b9d643edc9ebb04e3e2c021461b7af0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4652072e7b9d643edc9ebb04e3e2c021461b7af0
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1716658669
  Commit Message:
    bpf
  Parent Hashes: 2c1713a8f1c94033a6e00aae4693ab03e8a3b9f1
  Refs:  docs: Move sentence about returning R0 to abi.rst

As discussed at LSF/MM/BPF

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Moved documentation sentence about returning R0 to abi.rst in bpf.', 'keywords': 'documentation, returning, R0', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b1480ed230acf4f7f069a7f5e3ddda62bbf4ba97
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b1480ed230acf4f7f069a7f5e3ddda62bbf4ba97
  Author Name: Will Deacon
  Author Email: will@kernel.org
  Commit Date: 1716576906
  Commit Message:
    arm64: patching: fix handling of execmem addresses

Klara Modin reported warnings for a kernel configured with BPF_JIT but
without MODULES:

[   44.131296] Trying to vfree() bad address (000000004a17c299)
[   44.138024] WARNING: CPU: 1 PID: 193 at mm/vmalloc.c:3189 remove_vm_area (mm/vmalloc.c:3189 (discriminator 1))
[   44.146675] CPU: 1 PID: 193 Comm: kworker/1:2 Tainted: G      D W          6.9.0-01786-g2c9e5d4a0082 #25
[   44.158229] Hardware name: Raspberry Pi 3 Model B (DT)
[   44.164433] Workqueue: events bpf_prog_free_deferred
[   44.170492] pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
[   44.178601] pc : remove_vm_area (mm/vmalloc.c:3189 (discriminator 1))
[   44.183705] lr : remove_vm_area (mm/vmalloc.c:3189 (discriminator 1))
[   44.188772] sp : ffff800082a13c70
[   44.193112] x29: ffff800082a13c70 x28: 0000000000000000 x27: 0000000000000000
[   44.201384] x26: 0000000000000000 x25: ffff00003a44efa0 x24: 00000000d4202000
[   44.209658] x23: ffff800081223dd0 x22: ffff00003a198a40 x21: ffff8000814dd880
[   44.217924] x20: 00000000d4202000 x19: ffff8000814dd880 x18: 0000000000000006
[   44.226206] x17: 0000000000000000 x16: 0000000000000020 x15: 0000000000000002
[   44.234460] x14: ffff8000811a6370 x13: 0000000020000000 x12: 0000000000000000
[   44.242710] x11: ffff8000811a6370 x10: 0000000000000144 x9 : ffff8000811fe370
[   44.250959] x8 : 0000000000017fe8 x7 : 00000000fffff000 x6 : ffff8000811fe370
[   44.259206] x5 : 0000000000000000 x4 : 0000000000000000 x3 : 0000000000000000
[   44.267457] x2 : 0000000000000000 x1 : 0000000000000000 x0 : ffff000002203240
[   44.275703] Call trace:
[   44.279158] remove_vm_area (mm/vmalloc.c:3189 (discriminator 1))
[   44.283858] vfree (mm/vmalloc.c:3322)
[   44.287835] execmem_free (mm/execmem.c:70)
[   44.292347] bpf_jit_free_exec+0x10/0x1c
[   44.297283] bpf_prog_pack_free (kernel/bpf/core.c:1006)
[   44.302457] bpf_jit_binary_pack_free (kernel/bpf/core.c:1195)
[   44.307951] bpf_jit_free (include/linux/filter.h:1083 arch/arm64/net/bpf_jit_comp.c:2474)
[   44.312342] bpf_prog_free_deferred (kernel/bpf/core.c:2785)
[   44.317785] process_one_work (kernel/workqueue.c:3273)
[   44.322684] worker_thread (kernel/workqueue.c:3342 (discriminator 2) kernel/workqueue.c:3429 (discriminator 2))
[   44.327292] kthread (kernel/kthread.c:388)
[   44.331342] ret_from_fork (arch/arm64/kernel/entry.S:861)

The problem is because bpf_arch_text_copy() silently fails to write to the
read-only area as a result of patch_map() faulting and the resulting
-EFAULT being chucked away.

Update patch_map() to use CONFIG_EXECMEM instead of
CONFIG_STRICT_MODULE_RWX to check for vmalloc addresses.

Link: https://lkml.kernel.org/r/20240521213813.703309-1-rppt@kernel.org
Fixes: 2c9e5d4a0082 ("bpf: remove CONFIG_BPF_JIT dependency on CONFIG_MODULES of")
Signed-off-by: Will Deacon <will@kernel.org>
Signed-off-by: Mike Rapoport (IBM) <rppt@kernel.org>
Reported-by: Klara Modin <klarasmodin@gmail.com>
Closes: https://lore.kernel.org/all/7983fbbf-0127-457c-9394-8d6e4299c685@gmail.com
Tested-by: Klara Modin <klarasmodin@gmail.com>
Cc: Björn Töpel <bjorn@kernel.org>
Cc: Luis Chamberlain <mcgrof@kernel.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

  Parent Hashes: fb9293b6b0156fbf6ab97a1625d99a29c36d9f0c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix handling of execmem addresses in arm64 patching to address a BPF_JIT warning when configured without modules.', 'keywords': 'arm64, execmem, BPF_JIT', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2c1713a8f1c94033a6e00aae4693ab03e8a3b9f1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2c1713a8f1c94033a6e00aae4693ab03e8a3b9f1
  Author Name: Thomas Weißschuh
  Author Email: linux@weissschuh.net
  Commit Date: 1716565472
  Commit Message:
    bpf: constify member bpf_sysctl_kern:: Table

The sysctl core is preparing to only expose instances of struct ctl_table
as "const". This will also affect the ctl_table argument of sysctl handlers
  Parent Hashes: 99fa63d9ca60c4c1cc843fde205e4bc6e86b218f
  Refs: 
for which bpf_sysctl_kern::table is also used.

As the function prototype of all sysctl handlers throughout the tree
needs to stay consistent that change will be done in one commit.

To reduce the size of that final commit

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies bpf_sysctl_kern to constify the table parameter in preparation for changes to sysctl handler consistency.', 'keywords': 'bpf_sysctl_kern,constify,sysctl', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The syscall interface', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 99fa63d9ca60c4c1cc843fde205e4bc6e86b218f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 99fa63d9ca60c4c1cc843fde205e4bc6e86b218f
  Author Name: Xiao Wang
  Author Email: xiao.w.wang@intel.com
  Commit Date: 1716565233
  Commit Message:
    riscv
  Parent Hashes: e944fc8152744a41dc62e720995538e48b053bb9
  Refs:  bpf: Try RVC for reg move within BPF_CMPXCHG JIT

We could try to emit compressed insn for reg move operation during CMPXCHG
JIT

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit attempts to emit compressed instructions for register move operations during CMPXCHG JIT for RISC-V architecture.', 'keywords': 'RISC-V,compressed,insn', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e944fc8152744a41dc62e720995538e48b053bb9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e944fc8152744a41dc62e720995538e48b053bb9
  Author Name: Xiao Wang
  Author Email: xiao.w.wang@intel.com
  Commit Date: 1716563816
  Commit Message:
    riscv
  Parent Hashes: c12603e76ef666ce5c51a9d6faf155c9e3de7601
  Refs:  bpf: Use STACK_ALIGN macro for size rounding up

Use the macro STACK_ALIGN that is defined in asm/processor.h for stack size
rounding up

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit utilizes the STACK_ALIGN macro for stack size rounding up in the RISC-V architecture.', 'keywords': 'STACK_ALIGN, stack, RISC-V', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 44382b3ed6b2787710c8ade06c0e97f5970a47c8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 44382b3ed6b2787710c8ade06c0e97f5970a47c8
  Author Name: Friedrich Vock
  Author Email: friedrich.vock@gmx.de
  Commit Date: 1716563532
  Commit Message:
    bpf: Fix potential integer overflow in resolve_btfids

err is a 32-bit integer
  Parent Hashes: 8d00547ea8754afdc4a550af2fb7af2e3ba93cf8
  Refs:  but elf_update returns an off_t

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix potential integer overflow in resolve_btfids function.', 'keywords': 'integer,overflow,resolve_btfids', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c12603e76ef666ce5c51a9d6faf155c9e3de7601
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c12603e76ef666ce5c51a9d6faf155c9e3de7601
  Author Name: Xiao Wang
  Author Email: xiao.w.wang@intel.com
  Commit Date: 1716562392
  Commit Message:
    riscv
  Parent Hashes: ecec1887e24f11a3fcc391aa0f33fe0802be0804
  Refs:  bpf: Optimize zextw insn with Zba extension

The Zba extension provides add.uw insn which can be used to implement
zext.w with rs2 set as ZERO.

Signed-off-by: Xiao Wang <xiao.w.wang@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Pu Lehui <pulehui@huawei.com>
Reviewed-by: Andrew Jones <ajones@ventanamicro.com>
Reviewed-by: Pu Lehui <pulehui@huawei.com>
Link: https://lore.kernel.org/bpf/20240516090430.493122-1-xiao.w.wang@intel.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize zextw instruction with Zba extension for RISC-V architecture.', 'keywords': 'Zba extension,zextw,RISC-V', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ecec1887e24f11a3fcc391aa0f33fe0802be0804
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ecec1887e24f11a3fcc391aa0f33fe0802be0804
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1716498890
  Commit Message:
    Merge branch 'Replace mono_delivery_time with tstamp_type'

Abhishek Chauhan says:

====================
Patch 1 :- This patch takes care of only renaming the mono delivery
timestamp to tstamp_type with no change in functionality of
existing available code in kernel also
Starts assigning tstamp_type with either mono or real and
introduces a new enum in the skbuff.h
  Parent Hashes: a87f34e742d279d54d529e4bc4763fdaab32a466 c34e3ab2a76e6a55a64e0d56acc5607062c2bad9
  Refs:  again no change in functionality
of the existing available code in kernel 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Renames mono delivery timestamp to tstamp_type without changing functionality in the kernel.', 'keywords': 'rename,tstamp_type,enum', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: c34e3ab2a76e6a55a64e0d56acc5607062c2bad9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c34e3ab2a76e6a55a64e0d56acc5607062c2bad9
  Author Name: Abhishek Chauhan
  Author Email: quic_abchauha@quicinc.com
  Commit Date: 1716498883
  Commit Message:
    selftests/bpf: Handle forwarding of UDP CLOCK_TAI packets

With changes in the design to forward CLOCK_TAI in the skbuff
framework
  Parent Hashes: 1693c5db6ab8262e6f5263f9d211855959aa5acd
  Refs:   existing selftest framework needs modification
to handle forwarding of UDP packets with CLOCK_TAI as clockid.

Signed-off-by: Abhishek Chauhan <quic_abchauha@quicinc.com>
Reviewed-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509211834.3235191-4-quic_abchauha@quicinc.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Modified selftests/bpf to handle forwarding of UDP packets with CLOCK_TAI in the skbuff framework.', 'keywords': 'selftests, UDP, CLOCK_TAI', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: a87f34e742d279d54d529e4bc4763fdaab32a466
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a87f34e742d279d54d529e4bc4763fdaab32a466
  Author Name: Brad Cowie
  Author Email: brad@faucet.nz
  Commit Date: 1716415256
  Commit Message:
    selftests/bpf: Update tests for new ct zone opts for nf_conntrack kfuncs

Add test for allocating and looking up ct entry in a
non-default ct zone with kfuncs bpf_{xdp
  Parent Hashes: ece4b296904167336d0aaab26bd7122018835202
  Refs: skb}_ct_alloc
and bpf_{xdp

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit updates self-tests for new connection tracking zone options in nf_conntrack kfuncs.', 'keywords': 'self-tests, nf_conntrack, kfuncs', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['xdp like programs', 'tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: ece4b296904167336d0aaab26bd7122018835202
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ece4b296904167336d0aaab26bd7122018835202
  Author Name: Brad Cowie
  Author Email: brad@faucet.nz
  Commit Date: 1716415256
  Commit Message:
    net: netfilter: Make ct zone opts configurable for bpf ct helpers

Add ct zone id and direction to bpf_ct_opts so that arbitrary ct zones
can be used for xdp/tc bpf ct helper functions bpf_{xdp
  Parent Hashes: 6c8d7598dfed759bf1d9d0322b4c2b42eb7252d8
  Refs: skb}_ct_alloc
and bpf_{xdp

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Make connection tracking zone options configurable for BPF connection tracking helpers in xdp/tc programs.', 'keywords': 'ct zone, bpf ct, netfilter', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['xdp like programs', 'tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 6c8d7598dfed759bf1d9d0322b4c2b42eb7252d8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6c8d7598dfed759bf1d9d0322b4c2b42eb7252d8
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1716314841
  Commit Message:
    selftests/bpf: Fix prog numbers in test_sockmap

bpf_prog5 and bpf_prog7 are removed from progs/test_sockmap_kern.h in
commit d79a32129b21 ("bpf: Selftests
  Parent Hashes: 1b0215a3633a4c54ed7ec3af93e7a782dda8d965
  Refs:  remove prints from sockmap tests")

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes program numbering in selftests related to sockmap handling in BPF.', 'keywords': 'selftests, sockmap, fix', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 1b0215a3633a4c54ed7ec3af93e7a782dda8d965
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1b0215a3633a4c54ed7ec3af93e7a782dda8d965
  Author Name: Ying Zhang
  Author Email: yingzhang098@163.com
  Commit Date: 1716313699
  Commit Message:
    bpf: Remove unused variable "prev_state"

The variable "prev_state" is not used for any actual operations

v2: Fix commit message and description.

Signed-off-by: Ying Zhang <yingzhang098@163.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240521161702.4339-1-yingzhang098@163.com

  Parent Hashes: f4aba3471cfb9ccf69b476463f19b4c50fef6b14
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove the unused variable "prev_state" from the BPF codebase.', 'keywords': 'remove, unused, variable', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f4aba3471cfb9ccf69b476463f19b4c50fef6b14
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f4aba3471cfb9ccf69b476463f19b4c50fef6b14
  Author Name: Ivan Babrou
  Author Email: ivan@cloudflare.com
  Commit Date: 1716312988
  Commit Message:
    bpftool: Un-const bpf_func_info to fix it for llvm 17 and newer

LLVM 17 started treating const structs as constants:

* https://github.com/llvm/llvm-project/commit/0b2d5b967d98

Combined with pointer laundering via ptr_to_u64
  Parent Hashes: 6f130e4d4a5f7174f98300376f3994817ad7e21c
  Refs:  which takes a const ptr

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit modifies bpftool to handle non-const bpf_func_info to ensure compatibility with LLVM version 17 and newer.', 'keywords': 'bpftool, LLVM 17, bpf_func_info', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6f130e4d4a5f7174f98300376f3994817ad7e21c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6f130e4d4a5f7174f98300376f3994817ad7e21c
  Author Name: Mohammad Shehar Yaar Tausif
  Author Email: sheharyaar48@gmail.com
  Commit Date: 1716054376
  Commit Message:
    bpf: Fix order of args in call to bpf_map_kvcalloc

The original function call passed size of smap->bucket before the number of
buckets which raises the error 'calloc-transposed-args' on compilation.

Signed-off-by: Mohammad Shehar Yaar Tausif <sheharyaar48@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240516072411.42016-1-sheharyaar48@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 34021caef79f76e70ac31247d321ecd0683c4939
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix order of arguments in bpf_map_kvcalloc to resolve calloc-transposed-args compilation error.', 'keywords': 'args, bpf_map_kvcalloc, calloc', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 34021caef79f76e70ac31247d321ecd0683c4939
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 34021caef79f76e70ac31247d321ecd0683c4939
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1716054376
  Commit Message:
    kbuild
  Parent Hashes: e7b64f9d3f5b10186038201e0b91f734cbd7fc3d
  Refs:  bpf: Use test-ge check for v1.25-only pahole

There is no need to set the pahole v1.25-only flags in an
"ifeq" version clause; we are already in a <= v1.25 branch
of "ifeq"

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Simplified kbuild configurations by removing redundant pahole version check for v1.25.', 'keywords': 'kbuild,pahole,version', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e7b64f9d3f5b10186038201e0b91f734cbd7fc3d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e7b64f9d3f5b10186038201e0b91f734cbd7fc3d
  Author Name: Artem Savkov
  Author Email: asavkov@redhat.com
  Commit Date: 1716054376
  Commit Message:
    bpftool: Fix make dependencies for vmlinux.h

With pre-generated vmlinux.h there is no dependency on neither vmlinux
nor bootstrap bpftool. Define dependencies separately for both modes.
This avoids needless rebuilds in some corner cases.

Suggested-by: Jan Stancek <jstancek@redhat.com>
Signed-off-by: Artem Savkov <asavkov@redhat.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Quentin Monnet <qmo@kernel.org>
Link: https://lore.kernel.org/bpf/20240513112658.43691-1-asavkov@redhat.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 94133cf24bb33889aac267a7f0e3e6a08b8a8e5a
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix make dependencies for vmlinux.h in bpftool to avoid unnecessary rebuilds.', 'keywords': 'bpftool,vmlinux,dependencies', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 94133cf24bb33889aac267a7f0e3e6a08b8a8e5a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 94133cf24bb33889aac267a7f0e3e6a08b8a8e5a
  Author Name: Mykyta Yatsenko
  Author Email: yatsenko@meta.com
  Commit Date: 1716054376
  Commit Message:
    bpftool: Introduce btf c dump sorting

Sort bpftool c dump output; aiming to simplify vmlinux.h diffing and
forcing more natural type definitions ordering.

Definitions are sorted first by their BTF kind ranks
  Parent Hashes: 4b377b4868ef17b040065bd468668c707d2477a5
  Refs:  then by their base
type name and by their own name.

Type ranks

Assign ranks to btf kinds (defined in function btf_type_rank) to set
next order:
1. Anonymous enums/enums64
2. Named enums/enums64
3. Trivial types typedefs (ints

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Sorts bpftool's BTF c dump output to improve diffing and type ordering.", 'keywords': 'bpftool, BTF, sorting', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: f08a1e912d3e60bf3028ea1c5199a609d12cd37c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f08a1e912d3e60bf3028ea1c5199a609d12cd37c
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1715997434
  Commit Message:
    Merge tag 'net-6.10-rc0' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 "Current release - regressions:

   - virtio_net: fix missed error path rtnl_unlock after control queue
     locking rework

  Current release - new code bugs:

   - bpf: fix KASAN slab-out-of-bounds in percpu_array_map_gen_lookup
  Parent Hashes: 26aa834ff2eef00a863a64b1a94a5a88a94eb963 fe56d6e4a99a40f50e64d5a8043f1fa838b1f7a1
  Refs: 
     caused by missing nested map handling

   - drv: dsa: correct initialization order for KSZ88x3 ports

  Previous releases - regressions:

   - af_packet: do not call packet_read_pending() from
     tpacket_destruct_skb() fix performance regression

   - ipv6: fix route deleting failure when metric equals 0

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge with networking fixes including bug resolutions for bpf and virtio_net.', 'keywords': 'networking, fixes, bpf', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 91b6163be404e36baea39fc978e4739fd0448ebd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 91b6163be404e36baea39fc978e4739fd0448ebd
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1715992284
  Commit Message:
    Merge tag 'sysctl-6.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/sysctl/sysctl

Pull sysctl updates from Joel Granados:

 - Remove sentinel elements from ctl_table structs in kernel/*

   Removing sentinels in ctl_table arrays reduces the build time size
   and runtime memory consumed by ~64 bytes per array. Removals for
   net/
  Parent Hashes: 06f054b1fee83415fe35204845708988fc16ef22 a35dd3a786f57903151b18275b1eed105084cf72
  Refs:  io_uring/

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge sysctl updates to remove sentinel elements from ctl_table structs for reduced memory and build time size.', 'keywords': 'sysctl, ctl_table, memory reduction', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 52d94c180a9f6e586c8234b7feb7c8b9282f53c9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 52d94c180a9f6e586c8234b7feb7c8b9282f53c9
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1715906884
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-05-17

We've added 7 non-merge commits during the last 2 day(s) which contain
a total of 8 files changed
  Parent Hashes: 83e93942796db58652288f0391ac00072401816f 51e2b8d33199df9675d2a36ec6aad0c27e91c6fe
  Refs:  20 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merged updates from bpf repository containing 8 file changes.', 'keywords': 'merge, bpf, updates', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 51e2b8d33199df9675d2a36ec6aad0c27e91c6fe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 51e2b8d33199df9675d2a36ec6aad0c27e91c6fe
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715903411
  Commit Message:
    selftests/bpf: Adjust btf_dump test to reflect recent change in file_operations

The btf_dump test fails:

test_btf_dump_struct_data:FAIL:file_operations unexpected file_operations: actual '(struct file_operations){
	.owner = (struct module *)0xffffffffffffffff
  Parent Hashes: 5405807edd4168c2dc2f307f3c6b70e9579bf7be
  Refs: 
	.fop_flags = (fop_flags_t)4294967295

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adjust btf_dump selftest to align with changes in file_operations structure.', 'keywords': 'btf_dump,test,file_operations', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5405807edd4168c2dc2f307f3c6b70e9579bf7be
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5405807edd4168c2dc2f307f3c6b70e9579bf7be
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715903296
  Commit Message:
    selftests/bpf: Adjust test_access_variable_array after a kernel function name change

After commit 4c3e509ea9f2 ("sched/balancing: Rename load_balance() => sched_balance_rq()")
  Parent Hashes: 2322113ac9d0c5653017adbab504fb307b0e92e2
  Refs: 
the load_balance kernel function is renamed to sched_balance_rq.

This patch adjusts the fentry program in test_access_variable_array.c
to reflect this kernel function name change.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240516170140.2689430-1-martin.lau@linux.dev


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adjusts the bpf selftest for a changed kernel function name after a recent rename.', 'keywords': 'selftests,bpf,sched_balance_rq', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: a49468240e89628236b738b5ab9416eae8f90c15
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a49468240e89628236b738b5ab9416eae8f90c15
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1715807108
  Commit Message:
    Merge tag 'modules-6.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/mcgrof/linux

Pull modules updates from Luis Chamberlain:
 "Finally something fun. Mike Rapoport does some cleanup to allow us to
  take out module_alloc() out of modules into a new paint shedded
  execmem_alloc() and execmem_free() so to make emphasis these helpers
  are actually used outside of modules.

  It starts with a non-functional changes API rename / placeholders to
  then allow architectures to define their requirements into a new shiny
  struct execmem_info with ranges
  Parent Hashes: 8c06da67d0bd3139a97f301b4aa9c482b9d4f29e 2c9e5d4a008293407836d29d35dfd4353615bd2f
  Refs:  and requirements for those ranges.

  Archs now can intitialize this execmem_info as the last part of
  mm_core_init() if they have to diverge from the norm. Each range is a
  known type clearly articulated and spelled out in enum execmem_type.

  Although a lot of this is major cleanup and prep work for future
  enhancements an immediate clear gain is we get to enable KPROBES
  without MODULES now. That is ultimately what motiviated to pick this
  work up again

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit integrates module updates for execmem helper functions and architecture execution memory info struct for future enhancements and kprobe enabling.', 'keywords': 'execmem, cleanup, kprobes', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 2322113ac9d0c5653017adbab504fb307b0e92e2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2322113ac9d0c5653017adbab504fb307b0e92e2
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1715790894
  Commit Message:
    selftests/bpf: add more variations of map-in-map situations

Add test cases validating usage of PERCPU_ARRAY and PERCPU_HASH maps as
inner maps.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Link: https://lore.kernel.org/r/20240515062440.846086-2-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 9ee98229083186837199912a7debb666146b8c17
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test cases for using PERCPU_ARRAY and PERCPU_HASH maps as inner maps in selftests.', 'keywords': 'test cases, inner maps, PERCPU', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9ee98229083186837199912a7debb666146b8c17
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9ee98229083186837199912a7debb666146b8c17
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1715790894
  Commit Message:
    bpf: save extended inner map info for percpu array maps as well

ARRAY_OF_MAPS and HASH_OF_MAPS map types have special logic to save
a few extra fields required for correct operations of ARRAY maps
  Parent Hashes: 325423cafc12031a69692363ddcabc63113bb3d6
  Refs:  when
they are used as inner maps. PERCPU_ARRAY maps have similar
requirements as they now support generating inline element lookup
logic. So make sure that both classes of maps are handled correctly.

Reported-by: Jakub Kicinski <kuba@kernel.org>
Fixes: db69718b8efa ("bpf: inline bpf_map_lookup_elem() for PERCPU_ARRAY maps")
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Link: https://lore.kernel.org/r/20240515062440.846086-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit extends inner map handling to include PERCPU_ARRAY maps for enhanced element lookup logic.', 'keywords': 'inner map, PERCPU_ARRAY, element lookup', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', 'other']}
--------------------
--------------------
Processing Commit ID: 7a8030057f6791d35dd20987f9ff15855c01c1bb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7a8030057f6791d35dd20987f9ff15855c01c1bb
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1715790894
  Commit Message:
    bpf
  Parent Hashes: 1de27bba6d50a909647f304eadc0f7c59a842a50
  Refs:  docs: Fix the description of 'src' in ALU instructions

An ALU instruction's source operand can be the value in the source
register or the 32-bit immediate value encoded in the instruction. This
is controlled by the 's' bit of the 'opcode'.

The current description explicitly uses the phrase 'value of the source
register' when defining the meaning of 'src'.

Change the description to use 'source operand' in place of 'value of the
source register'.

Signed-off-by: Puranjay Mohan <puranjay@kernel.org>
Acked-by: Dave Thaler <dthaler1968@gmail.com>
Link: https://lore.kernel.org/r/20240514130303.113607-1-puranjay@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update documentation to clarify the description of the source operand in ALU instructions.', 'keywords': 'ALU,instruction,operand', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 1de27bba6d50a909647f304eadc0f7c59a842a50
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1de27bba6d50a909647f304eadc0f7c59a842a50
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1715790893
  Commit Message:
    libbpf: fix feature detectors when using token_fd

Adjust `union bpf_attr` size passed to kernel in two feature-detecting
functions to take into account prog_token_fd field.

Libbpf is avoiding memset()'ing entire `union bpf_attr` by only using
minimal set of bpf_attr's fields. Two places have been missed when
wiring BPF token support in libbpf's feature detection logic.

Fix them trivially.

Fixes: f3dcee938f48 ("libbpf: Wire up token_fd into feature probing logic")
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240513180804.403775-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 621cde16e49b3ecf7d59a8106a20aaebfb4a59a9
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix feature detection logic in libbpf by adjusting bpf_attr size for token_fd support.', 'keywords': 'libbpf,feature detection,token_fd', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8bd67ebb50c0145fd2ca8681ab65eb7e8cde1afc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8bd67ebb50c0145fd2ca8681ab65eb7e8cde1afc
  Author Name: Nikolay Aleksandrov
  Author Email: razor@blackwall.org
  Commit Date: 1715769662
  Commit Message:
    net: bridge: xmit: make sure we have at least eth header len bytes

syzbot triggered an uninit value[1] error in bridge device's xmit path
by sending a short (less than ETH_HLEN bytes) skb. To fix it check if
we can actually pull that amount instead of assuming.

Tested with dropwatch:
 drop at: br_dev_xmit+0xb93/0x12d0 [bridge] (0xffffffffc06739b3)
 origin: software
 timestamp: Mon May 13 11:31:53 2024 778214037 nsec
 protocol: 0x88a8
 length: 2
 original length: 2
 drop reason: PKT_TOO_SMALL

[1]
BUG: KMSAN: uninit-value in br_dev_xmit+0x61d/0x1cb0 net/bridge/br_device.c:65
 br_dev_xmit+0x61d/0x1cb0 net/bridge/br_device.c:65
 __netdev_start_xmit include/linux/netdevice.h:4903 [inline]
 netdev_start_xmit include/linux/netdevice.h:4917 [inline]
 xmit_one net/core/dev.c:3531 [inline]
 dev_hard_start_xmit+0x247/0xa20 net/core/dev.c:3547
 __dev_queue_xmit+0x34db/0x5350 net/core/dev.c:4341
 dev_queue_xmit include/linux/netdevice.h:3091 [inline]
 __bpf_tx_skb net/core/filter.c:2136 [inline]
 __bpf_redirect_common net/core/filter.c:2180 [inline]
 __bpf_redirect+0x14a6/0x1620 net/core/filter.c:2187
 ____bpf_clone_redirect net/core/filter.c:2460 [inline]
 bpf_clone_redirect+0x328/0x470 net/core/filter.c:2432
 ___bpf_prog_run+0x13fe/0xe0f0 kernel/bpf/core.c:1997
 __bpf_prog_run512+0xb5/0xe0 kernel/bpf/core.c:2238
 bpf_dispatcher_nop_func include/linux/bpf.h:1234 [inline]
 __bpf_prog_run include/linux/filter.h:657 [inline]
 bpf_prog_run include/linux/filter.h:664 [inline]
 bpf_test_run+0x499/0xc30 net/bpf/test_run.c:425
 bpf_prog_test_run_skb+0x14ea/0x1f20 net/bpf/test_run.c:1058
 bpf_prog_test_run+0x6b7/0xad0 kernel/bpf/syscall.c:4269
 __sys_bpf+0x6aa/0xd90 kernel/bpf/syscall.c:5678
 __do_sys_bpf kernel/bpf/syscall.c:5767 [inline]
 __se_sys_bpf kernel/bpf/syscall.c:5765 [inline]
 __x64_sys_bpf+0xa0/0xe0 kernel/bpf/syscall.c:5765
 x64_sys_call+0x96b/0x3b50 arch/x86/include/generated/asm/syscalls_64.h:322
 do_syscall_x64 arch/x86/entry/common.c:52 [inline]
 do_syscall_64+0xcf/0x1e0 arch/x86/entry/common.c:83
 entry_SYSCALL_64_after_hwframe+0x77/0x7f

Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
Reported-by: syzbot+a63a1f6a062033cf0f40@syzkaller.appspotmail.com
Closes: https://syzkaller.appspot.com/bug?extid=a63a1f6a062033cf0f40
Signed-off-by: Nikolay Aleksandrov <razor@blackwall.org>
Signed-off-by: David S. Miller <davem@davemloft.net>

  Parent Hashes: aea27a92a41dae14843f92c79e9e42d8f570105c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix uninitialized value error in bridge xmit path by ensuring minimum Ethernet header length.', 'keywords': 'bridge,xmit,error', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1b294a1f35616977caddaddf3e9d28e576a1adbc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1b294a1f35616977caddaddf3e9d28e576a1adbc
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1715740944
  Commit Message:
    Merge tag 'net-next-6.10' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next

Pull networking updates from Jakub Kicinski:
 "Core & protocols:

   - Complete rework of garbage collection of AF_UNIX sockets.

     AF_UNIX is prone to forming reference count cycles due to fd
     passing functionality. New method based on Tarjan's Strongly
     Connected Components algorithm should be both faster and remove a
     lot of workarounds we accumulated over the years.

   - Add TCP fraglist GRO support
  Parent Hashes: b850dc206a57ae272c639e31ac202ec0c2f46960 654de42f3fc6edc29d743c1dbcd1424f7793f63d
  Refs:  allowing chaining multiple TCP
     packets and forwarding them together. Useful for small switches /
     routers which lack basic checksum offload in some scenarios (e.g.
     PPPoE).

   - Support using SMP threads for handling packet backlog i.e. packet
     processing from software interfaces and old drivers which don't use
     NAPI. This helps move the processing out of the softirq jumble.

   - Continue work of converting from rtnl lock to RCU protection.

     Don't require rtnl lock when reading: IPv6 routing FIB

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking updates including AF_UNIX rework, TCP fraglist GRO support, and SMP threads usage for packet backlog.', 'keywords': 'networking, AF_UNIX, TCP', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 614da38e2f7afe9e01c6e359dfa09285f26fa381
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 614da38e2f7afe9e01c6e359dfa09285f26fa381
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1715724766
  Commit Message:
    Merge tag 'hid-for-linus-2024051401' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid

Pull HID updates from Jiri Kosina:

 - Firmware loading from host support in intel-ish driver
  Parent Hashes: ce952d8f0e9b58dc6a2bde7e47ca7fa7925583cc c9c92fc4c2ef4e2f11af0ba19cb18d9b5e3e6f08
  Refs:  needed to
   support Lunar Lake and later (Zhang Lixu)

 - updates to HID-BPF infrastructure

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge HID updates including intel-ish driver firmware loading support and HID-BPF infrastructure improvements.', 'keywords': 'HID,BPF,firmware', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 21c38a3bd4ee3fb7337d013a638302fb5e5f9dc2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 21c38a3bd4ee3fb7337d013a638302fb5e5f9dc2
  Author Name: Jesper Dangaard Brouer
  Author Email: hawk@kernel.org
  Commit Date: 1715715797
  Commit Message:
    cgroup/rstat: add cgroup_rstat_cpu_lock helpers and tracepoints

This closely resembles helpers added for the global cgroup_rstat_lock in
commit fc29e04ae1ad ("cgroup/rstat: add cgroup_rstat_lock helpers and
tracepoints"). This is for the per CPU lock cgroup_rstat_cpu_lock.

Based on production workloads
  Parent Hashes: c1457d9aad5ee2feafcf85aa9a58ab50500159d2
  Refs:  we observe the fast-path "update" function
cgroup_rstat_updated() is invoked around 3 million times per sec

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add cgroup_rstat_cpu_lock helpers and tracepoints for improved cgroup statistics locking efficiency.', 'keywords': 'cgroup,helpers,tracepoints', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e29fd84c5b49085cf27e1d5f27237d2fb19edefe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e29fd84c5b49085cf27e1d5f27237d2fb19edefe
  Author Name: Jiri Kosina
  Author Email: jkosina@suse.com
  Commit Date: 1715687089
  Commit Message:
    Merge branch 'for-6.10/hid-bpf' into for-linus

- updates to HID-BPF infrastructure
  Parent Hashes: bc5fbae23a880ebe42d4843294667e932379fb71 89ea968a9d759f71ac7b8d50949a8e5e5bcb1111
  Refs:  with some of the specific
  fixes (e.g. rdesc fixups) abstracted into separate BPF programs
  for consumption by libevdev/udev-hid-bpf (Benjamin Tissoires)


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merges updates to the HID-BPF infrastructure including rdesc fixups abstracted into separate BPF programs.', 'keywords': 'HID-BPF,infrastructure,fixups', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['HID driver like programs', "It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 2c9e5d4a008293407836d29d35dfd4353615bd2f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2c9e5d4a008293407836d29d35dfd4353615bd2f
  Author Name: Mike Rapoport (IBM)
  Author Email: rppt@kernel.org
  Commit Date: 1715672189
  Commit Message:
    bpf: remove CONFIG_BPF_JIT dependency on CONFIG_MODULES of

BPF just-in-time compiler depended on CONFIG_MODULES because it used
module_alloc() to allocate memory for the generated code.

Since code allocations are now implemented with execmem
  Parent Hashes: 7582b7be16d0ba90e3dbd9575a730cabd9eb852a
  Refs:  drop dependency of
CONFIG_BPF_JIT on CONFIG_MODULES and make it select CONFIG_EXECMEM.

Suggested-by: Björn Töpel <bjorn@kernel.org>
Signed-off-by: Mike Rapoport (IBM) <rppt@kernel.org>
Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove CONFIG_BPF_JIT dependency on CONFIG_MODULES, now using CONFIG_EXECMEM for memory allocation.', 'keywords': 'BPF JIT, CONFIG_MODULES, CONFIG_EXECMEM', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e2effa2235d9c7d0e9410637a2602bc69ee4f800
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e2effa2235d9c7d0e9410637a2602bc69ee4f800
  Author Name: Mike Rapoport (IBM)
  Author Email: rppt@kernel.org
  Commit Date: 1715671903
  Commit Message:
    arm64: extend execmem_info for generated code allocations

The memory allocations for kprobes and BPF on arm64 can be placed
anywhere in vmalloc address space and currently this is implemented with
overrides of alloc_insn_page() and bpf_jit_alloc_exec() in arm64.

Define EXECMEM_KPROBES and EXECMEM_BPF ranges in arm64::execmem_info and
drop overrides of alloc_insn_page() and bpf_jit_alloc_exec().

Signed-off-by: Mike Rapoport (IBM) <rppt@kernel.org>
Acked-by: Will Deacon <will@kernel.org>
Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>

  Parent Hashes: 4d7b321a9ce0782a953874ec69acc2b12b9cb2cd
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance arm64 execmem_info for improved management of kprobes and BPF memory allocations.', 'keywords': 'arm64, execmem_info, memory', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 4d7b321a9ce0782a953874ec69acc2b12b9cb2cd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4d7b321a9ce0782a953874ec69acc2b12b9cb2cd
  Author Name: Mike Rapoport (IBM)
  Author Email: rppt@kernel.org
  Commit Date: 1715671903
  Commit Message:
    riscv: extend execmem_params for generated code allocations

The memory allocations for kprobes and BPF on RISC-V are not placed in
the modules area and these custom allocations are implemented with
overrides of alloc_insn_page() and  bpf_jit_alloc_exec().

Define MODULES_VADDR and MODULES_END as VMALLOC_START and VMALLOC_END for
32 bit and slightly reorder execmem_params initialization to support both
32 and 64 bit variants
  Parent Hashes: 223b5e57d0d50b0c07b933350dbcde92018d3080
  Refs:  define EXECMEM_KPROBES and EXECMEM_BPF ranges in
riscv::execmem_params and drop overrides of alloc_insn_page() and
bpf_jit_alloc_exec().

Signed-off-by: Mike Rapoport (IBM) <rppt@kernel.org>
Reviewed-by: Alexandre Ghiti <alexghiti@rivosinc.com>
Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extend execmem_params for custom memory allocations for kprobes and BPF on RISC-V.', 'keywords': 'execmem_params,RISC-V,BPF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 17ca7fc22f4bbc795e4d136449521b2fecb88e06
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 17ca7fc22f4bbc795e4d136449521b2fecb88e06
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1715645627
  Commit Message:
    Merge tag 'perf-core-2024-05-13' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip

Pull perf events updates from Ingo Molnar:

 - Combine perf and BPF for fast evalution of HW breakpoint
   conditions

 - Add LBR capture support outside of hardware events

 - Trigger IO signals for watermark_wakeup

 - Add RAPL support for Intel Arrow Lake and Lunar Lake

 - Optimize frequency-throttling

 - Miscellaneous cleanups & fixes

* tag 'perf-core-2024-05-13' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (21 commits)
  perf/bpf: Mark perf_event_set_bpf_handler() and perf_event_free_bpf_handler() as inline too
  selftests/perf_events: Test FASYNC with watermark wakeups
  perf/ring_buffer: Trigger IO signals for watermark_wakeup
  perf: Move perf_event_fasync() to perf_event.h
  perf/bpf: Change the !CONFIG_BPF_SYSCALL stubs to static inlines
  selftest/bpf: Test a perf BPF program that suppresses side effects
  perf/bpf: Allow a BPF program to suppress all sample side effects
  perf/bpf: Remove unneeded uses_default_overflow_handler()
  perf/bpf: Call BPF handler directly
  Parent Hashes: 48fc82c40bc29a80361b1eab0e4a9494628a7144 854dd99b5ddc9d90e31e5f112462a5994dd31810
  Refs:  not through overflow machinery
  perf/bpf: Remove #ifdef CONFIG_BPF_SYSCALL from struct perf_event members
  perf/bpf: Create bpf_overflow_handler() stub for !CONFIG_BPF_SYSCALL
  perf/bpf: Reorder bpf_overflow_handler() ahead of __perf_event_overflow()
  perf/x86/rapl: Add support for Intel Lunar Lake
  perf/x86/rapl: Add support for Intel Arrow Lake
  perf/core: Reduce PMU access to adjust sample freq
  perf/core: Optimize perf_adjust_freq_unthr_context()
  perf/x86/amd: Don't reject non-sampling events with configured LBR
  perf/x86/amd: Support capturing LBR from software events
  perf/x86/amd: Avoid taking branches before disabling LBR
  perf/x86/amd: Ensure amd_pmu_core_disable_all() is always inlined
  ...


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges perf updates including BPF integration for hardware breakpoint conditions and miscellaneous cleanups and optimizations.', 'keywords': 'perf, BPF, optimizations', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6e62702feb6d474e969b52f0379de93e9729e457
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6e62702feb6d474e969b52f0379de93e9729e457
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1715643670
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-05-13

We've added 119 non-merge commits during the last 14 day(s) which contain
a total of 134 files changed
  Parent Hashes: afd29f36aaf733985df1ba162424581b8b8853b4 ba39486d2c43ba7c103c438540aa56c8bde3b6c7
  Refs:  9462 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges multiple changes from the bpf-next branch into the main branch.', 'keywords': 'merge, bpf-next, commit', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c9f9df3f6347b33ae770747c40bae38836e3658c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c9f9df3f6347b33ae770747c40bae38836e3658c
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1715631048
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-05-13

We've added 3 non-merge commits during the last 2 day(s) which contain
a total of 2 files changed
  Parent Hashes: 1164057b3c0093240e45517d711da2d1fd86789a 3e9bc0472b910d4115e16e9c2d684c7757cb6c60
  Refs:  62 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges changes from the bpf repository affecting 2 files with 62 insertions.', 'keywords': 'bpf,merge,changes', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c0b9620bc3f0a0f914996cc6631522d41870a9e0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c0b9620bc3f0a0f914996cc6631522d41870a9e0
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1715618946
  Commit Message:
    Merge tag 'rcu.next.v6.10' of https://github.com/urezki/linux

Pull RCU updates from Uladzislau Rezki:

 - Fix a lockdep complain for lazy-preemptible kernel
  Parent Hashes: 736676f5c3abd1fc01c41813a95246e892937f6d 64619b283bb35b12a96129e82b40304f7e5551b7
  Refs:  remove redundant
   BH disable for TINY_RCU

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge RCU updates to fix a lockdep complaint in lazy-preemptible kernel.', 'keywords': 'RCU, lockdep, preemptible', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: ba39486d2c43ba7c103c438540aa56c8bde3b6c7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ba39486d2c43ba7c103c438540aa56c8bde3b6c7
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1715560904
  Commit Message:
    bpf: make list_for_each_entry portable

[Changes from V1:
- The __compat_break has been abandoned in favor of
  a more readable can_loop macro that can be used anywhere
  Parent Hashes: 6a2f786e6905007e82bac212296deca29815916d
  Refs:  including
  loop conditions.]

The macro list_for_each_entry is defined in bpf_arena_list.h as
follows:

  #define list_for_each_entry(pos

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improves portability of list_for_each_entry macro in bpf_arena_list.h by using can_loop macro.', 'keywords': 'list_for_each_entry, portability, can_loop', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6a2f786e6905007e82bac212296deca29815916d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6a2f786e6905007e82bac212296deca29815916d
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1715560284
  Commit Message:
    bpf: ignore expected GCC warning in test_global_func10.c

The BPF selftest global_func10 in progs/test_global_func10.c contains:

  struct Small {
  	long x;
  };

  struct Big {
  	long x;
  	long y;
  };

  [...]

  __noinline int foo(const struct Big *big)
  {
	if (!big)
		return 0;

	return bpf_get_prandom_u32() < big->y;
  }

  [...]

  SEC("cgroup_skb/ingress")
  __failure __msg("invalid indirect access to stack")
  int global_func10(struct __sk_buff *skb)
  {
	const struct Small small = {.x = skb->len };

	return foo((struct Big *)&small) ? 1 : 0;
  }

GCC emits a "maybe uninitialized" warning for the code above
  Parent Hashes: 73868988c90d2701587ab2a48b5858ab935afb17
  Refs:  because
it knows `foo' accesses `big->y'.

Since the purpose of this selftest is to check that the verifier will
fail on this sort of invalid memory access

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies a BPF selftest to ignore a specific GCC warning indicating uninitialized data access.', 'keywords': 'BPF selftest, GCC warning, verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 73868988c90d2701587ab2a48b5858ab935afb17
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 73868988c90d2701587ab2a48b5858ab935afb17
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1715560215
  Commit Message:
    bpf: disable strict aliasing in test_global_func9.c

The BPF selftest test_global_func9.c performs type punning and breaks
srict-aliasing rules.

In particular
  Parent Hashes: a3c1c95538e22283ef6fa529e3ffa0e6d47ee190
  Refs:  given:

  int global_func9(struct __sk_buff *skb)
  {
	int result = 0;

	[...]
	{
		const struct C c = {.x = skb->len

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Disable strict aliasing in test_global_func9.c due to type punning violations.', 'keywords': 'disable, strict aliasing, selftest', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs', 'other']}
--------------------
--------------------
Processing Commit ID: a3c1c95538e22283ef6fa529e3ffa0e6d47ee190
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a3c1c95538e22283ef6fa529e3ffa0e6d47ee190
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1715560122
  Commit Message:
    selftests/bpf: Free strdup memory in xdp_hw_metadata

The strdup() function returns a pointer to a new string which is a
duplicate of the string "ifname". Memory for the new string is obtained
with malloc()
  Parent Hashes: 5ddafcc377f98778acc08f660dee6400aece6a62
  Refs:  and need to be freed with free().

This patch adds this missing "free(saved_hwtstamp_ifname)" in cleanup()
to avoid a potential memory leak in xdp_hw_metadata.c.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/af9bcccb96655e82de5ce2b4510b88c9c8ed5ed0.1715417367.git.tanggeliang@kylinos.cn
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a potential memory leak by adding a missing free operation in xdp_hw_metadata.c.', 'keywords': 'memory leak, free, strdup', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 5ddafcc377f98778acc08f660dee6400aece6a62
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5ddafcc377f98778acc08f660dee6400aece6a62
  Author Name: Cupertino Miranda
  Author Email: cupertino.miranda@oracle.com
  Commit Date: 1715559914
  Commit Message:
    selftests/bpf: Fix a few tests for GCC related warnings.

This patch corrects a few warnings to allow selftests to compile for
GCC.

-- progs/cpumask_failure.c --

progs/bpf_misc.h:136:22: error: ‘cpumask’ is used uninitialized
[-Werror=uninitialized]
  136 | #define __sink(expr) asm volatile("" : "+g"(expr))
      |                      ^~~
progs/cpumask_failure.c:68:9: note: in expansion of macro ‘__sink’
   68 |         __sink(cpumask);

The macro __sink(cpumask) with the '+' contraint modifier forces the
the compiler to expect a read and write from cpumask. GCC detects
that cpumask is never initialized and reports an error.
This patch removes the spurious non required definitions of cpumask.

-- progs/dynptr_fail.c --

progs/dynptr_fail.c:1444:9: error: ‘ptr1’ may be used uninitialized
[-Werror=maybe-uninitialized]
 1444 |         bpf_dynptr_clone(&ptr1
  Parent Hashes: 792a04bed41caec79c787d105b0d442351b3bcc8
  Refs:  &ptr2);

Many of the tests in the file are related to the detection of
uninitialized pointers by the verifier. GCC is able to detect possible
uninitialized values

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes GCC warnings in eBPF selftests for successful compilation.', 'keywords': 'GCC,warnings,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 792a04bed41caec79c787d105b0d442351b3bcc8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 792a04bed41caec79c787d105b0d442351b3bcc8
  Author Name: David Faust
  Author Email: david.faust@oracle.com
  Commit Date: 1715559572
  Commit Message:
    bpf: avoid gcc overflow warning in test_xdp_vlan.c

This patch fixes an integer overflow warning raised by GCC in
xdp_prognum1 of progs/test_xdp_vlan.c:

  GCC-BPF  [test_maps] test_xdp_vlan.bpf.o
progs/test_xdp_vlan.c: In function 'xdp_prognum1':
progs/test_xdp_vlan.c:163:25: error: integer overflow in expression
 '(short int)(((__builtin_constant_p((int)vlan_hdr->h_vlan_TCI)) != 0
   ? (int)(short unsigned int)((short int)((int)vlan_hdr->h_vlan_TCI
   << 8 >> 8) << 8 | (short int)((int)vlan_hdr->h_vlan_TCI << 0 >> 8
   << 0)) & 61440 : (int)__builtin_bswap16(vlan_hdr->h_vlan_TCI)
   & 61440) << 8 >> 8) << 8' of type 'short int' results in '0' [-Werror=overflow]
  163 |                         bpf_htons((bpf_ntohs(vlan_hdr->h_vlan_TCI) & 0xf000)
      |                         ^~~~~~~~~

The problem lies with the expansion of the bpf_htons macro and the
expression passed into it.  The bpf_htons macro (and similarly the
bpf_ntohs macro) expand to a ternary operation using either
__builtin_bswap16 or ___bpf_swab16 to swap the bytes
  Parent Hashes: bbe91a9f6889934e661fa924144c7023f0a1c4cf
  Refs:  depending on
whether the expression is constant.

For an expression

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed GCC overflow warning in xdp_prognum1 function of test_xdp_vlan.c program.', 'keywords': 'GCC overflow warning', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: e9dd2290f1fb9a46c1c0e322cb0e53cf914903fb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e9dd2290f1fb9a46c1c0e322cb0e53cf914903fb
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1715559053
  Commit Message:
    Merge branch 'retire-progs-test_sock_addr'

Jordan Rife says:

====================
Retire progs/test_sock_addr.c

This patch series migrates remaining tests from bpf/test_sock_addr.c to
prog_tests/sock_addr.c and progs/verifier_sock_addr.c in order to fully
retire the old-style test program and expands test coverage to test
previously untested scenarios related to sockaddr hooks.

This is a continuation of the work started recently during the expansion
of prog_tests/sock_addr.c.

Link: https://lore.kernel.org/bpf/20240429214529.2644801-1-jrife@google.com/T/#u

=======
Patches
=======
* Patch 1 moves tests that check valid return values for recvmsg hooks
  into progs/verifier_sock_addr.c
  Parent Hashes: 20a759df3bba35bf5c3ddec0c02ad69b603b584c a3d3eb957ddc733d04c0da67024b1c30d8826cc2
  Refs:  a new addition to the verifier test
  suite.
* Patches 2-5 lay the groundwork for test migration

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit migrates tests from bpf/test_sock_addr.c to prog_tests for better test coverage of sockaddr hooks.', 'keywords': 'test migration, sockaddr hooks, verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', 'socket like programs', 'other']}
--------------------
--------------------
Processing Commit ID: a3d3eb957ddc733d04c0da67024b1c30d8826cc2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a3d3eb957ddc733d04c0da67024b1c30d8826cc2
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559042
  Commit Message:
    selftests/bpf: Expand ATTACH_REJECT tests

This expands coverage for ATTACH_REJECT tests to include connect_unix
  Parent Hashes: bc467e953e4fbafd94d04c355f875bf1adf438e2
  Refs: 
sendmsg_unix

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Expanded the ATTACH_REJECT test coverage to include connect_unix.', 'keywords': 'ATTACH_REJECT,test coverage,connect_unix', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: bc467e953e4fbafd94d04c355f875bf1adf438e2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bc467e953e4fbafd94d04c355f875bf1adf438e2
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559042
  Commit Message:
    selftests/bpf: Expand getsockname and getpeername tests

This expands coverage for getsockname and getpeername hooks to include
getsockname4
  Parent Hashes: dfb7539b47b501ccc0d23bae718500ada2157aee
  Refs:  getsockname6

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit expands test coverage for BPF getsockname and getpeername hooks.', 'keywords': 'getsockname, getpeername, hooks', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: dfb7539b47b501ccc0d23bae718500ada2157aee
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dfb7539b47b501ccc0d23bae718500ada2157aee
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559042
  Commit Message:
    sefltests/bpf: Expand sockaddr hook deny tests

This patch expands test coverage for EPERM tests to include connect and
bind calls and rounds out the coverage for sendmsg by adding tests for
sendmsg_unix.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-16-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 1e0a8367c89f82816735973d0e65a3c8e1b43179
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds expanded selftests for EPERM scenarios involving connect, bind, and sendmsg_unix calls.', 'keywords': 'selftests, EPERM, sockaddr', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 1e0a8367c89f82816735973d0e65a3c8e1b43179
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1e0a8367c89f82816735973d0e65a3c8e1b43179
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559042
  Commit Message:
    selftests/bpf: Expand sockaddr program return value tests

This patch expands verifier coverage for program return values to cover
bind
  Parent Hashes: 61ecfdfce2647281e7d14119bfa529922ce2d8b2
  Refs:  connect

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit expands verifier tests for sockaddr program return values to include bind operations.', 'keywords': 'verifier,sockaddr,tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 61ecfdfce2647281e7d14119bfa529922ce2d8b2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 61ecfdfce2647281e7d14119bfa529922ce2d8b2
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559042
  Commit Message:
    selftests/bpf: Retire test_sock_addr.(c|sh)

Fully remove test_sock_addr.c and test_sock_addr.sh
  Parent Hashes: 9c3f17862faef89696d26655a6d10f90137df42e
  Refs:  as test coverage
has been fully moved to prog_tests/sock_addr.c.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-14-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes obsolete test files due to test coverage relocation.', 'keywords': 'remove,test,coverage', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 9c3f17862faef89696d26655a6d10f90137df42e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9c3f17862faef89696d26655a6d10f90137df42e
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559042
  Commit Message:
    selftests/bpf: Remove redundant sendmsg test cases

Remove these test cases completely
  Parent Hashes: cded71f595c0c4396acc9657911c5aa2a289a8dc
  Refs:  as the same behavior is already
covered by other sendmsg* test cases in prog_tests/sock_addr.c. This
just rewrites the destination address similar to sendmsg_v4_prog and
sendmsg_v6_prog.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-13-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove redundant sendmsg test cases in selftests/bpf.', 'keywords': 'remove, sendmsg, test cases', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: cded71f595c0c4396acc9657911c5aa2a289a8dc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cded71f595c0c4396acc9657911c5aa2a289a8dc
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559042
  Commit Message:
    selftests/bpf: Migrate ATTACH_REJECT test cases

Migrate test case from bpf/test_sock_addr.c ensuring that program
attachment fails when using an inappropriate attach type.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-12-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: b0f3af0bffefc54650d9fb10810fc2f974365dfd
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Migrates ATTACH_REJECT test cases to ensure proper program attachment failure handling in selftests/bpf.', 'keywords': 'migrate, ATTACH_REJECT, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs', "It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b0f3af0bffefc54650d9fb10810fc2f974365dfd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b0f3af0bffefc54650d9fb10810fc2f974365dfd
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559042
  Commit Message:
    selftests/bpf: Migrate expected_attach_type tests

Migrates tests from progs/test_sock_addr.c ensuring that programs fail
to load when the expected attach type does not match.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-11-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 8eaf8056a44b28a7b198aa699e35854bbec2c452
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit migrates bpf selftests to ensure program loading fails with incorrect attach types.', 'keywords': 'migrate, selftests, expected_attach_type', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 8eaf8056a44b28a7b198aa699e35854bbec2c452
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8eaf8056a44b28a7b198aa699e35854bbec2c452
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559041
  Commit Message:
    selftests/bpf: Migrate wildcard destination rewrite test

Migrate test case from bpf/test_sock_addr.c ensuring that sendmsg
respects when sendmsg6 hooks rewrite the destination IP with the IPv6
wildcard IP
  Parent Hashes: 54462e8452f139e313e315959e005408cd31a4e6
  Refs:  [::].

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-10-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit migrates a test case to ensure sendmsg hooks handle IPv6 wildcard IPs correctly.', 'keywords': 'migrate,test case,sendmsg', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 54462e8452f139e313e315959e005408cd31a4e6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 54462e8452f139e313e315959e005408cd31a4e6
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559041
  Commit Message:
    selftests/bpf: Migrate sendmsg6 v4 mapped address tests

Migrate test case from bpf/test_sock_addr.c ensuring that sendmsg
returns -ENOTSUPP when sending to an IPv4-mapped IPv6 address to
prog_tests/sock_addr.c.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-9-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: f46a10483b27cc5a62b45e7e727445de6430e785
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Migrate IPv4-mapped IPv6 address test cases from bpf/test_sock_addr.c to prog_tests/sock_addr.c.', 'keywords': 'migrate, test case, sock_addr', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f46a10483b27cc5a62b45e7e727445de6430e785
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f46a10483b27cc5a62b45e7e727445de6430e785
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559041
  Commit Message:
    selftests/bpf: Migrate sendmsg deny test cases

This set of tests checks that sendmsg calls are rejected (return -EPERM)
when the sendmsg* hook returns 0. Replace those in bpf/test_sock_addr.c
with corresponding tests in prog_tests/sock_addr.c.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-8-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: d1b24fcf1c16290ce8cac467be2f7d6773de9da4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Migrate sendmsg deny test cases from bpf/test_sock_addr.c to prog_tests/sock_addr.c.', 'keywords': 'migrate,test cases,sendmsg', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: d1b24fcf1c16290ce8cac467be2f7d6773de9da4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d1b24fcf1c16290ce8cac467be2f7d6773de9da4
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559041
  Commit Message:
    selftests/bpf: Migrate WILDCARD_IP test

Move wildcard IP sendmsg test case out of bpf/test_sock_addr.c into
prog_tests/sock_addr.c.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-7-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: a2618c0d854235deaac2325cf8200a55274afa2b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Migrated WILDCARD_IP test case to a new location in the source tree.', 'keywords': 'Migrate,test,WILDCARD_IP', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: a2618c0d854235deaac2325cf8200a55274afa2b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a2618c0d854235deaac2325cf8200a55274afa2b
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559041
  Commit Message:
    selftests/bpf: Handle SYSCALL_EPERM and SYSCALL_ENOTSUPP test cases

In preparation to move test cases from bpf/test_sock_addr.c that expect
system calls to return ENOTSUPP or EPERM
  Parent Hashes: 5a047b2226c0511d4528d1467dc90f08fffafc38
  Refs:  this patch propagates errno
from relevant system calls up to test_sock_addr() where the result can
be checked.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-6-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates selftests for bpf to handle SYSCALL_EPERM and SYSCALL_ENOTSUPP cases in test_sock_addr.c.', 'keywords': 'selftests, SYSCALL_EPERM, SYSCALL_ENOTSUPP', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5a047b2226c0511d4528d1467dc90f08fffafc38
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5a047b2226c0511d4528d1467dc90f08fffafc38
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559041
  Commit Message:
    selftests/bpf: Handle ATTACH_REJECT test cases

In preparation to move test cases from bpf/test_sock_addr.c that expect
ATTACH_REJECT
  Parent Hashes: 5eff48f33fb733de9b88a5381e0428f3e873c670
  Refs:  this patch adds BPF_SKEL_FUNCS_RAW to generate load and
destroy functions that use bpf_prog_attach() to control the attach_type.

The normal load functions use bpf_program__attach_cgroup which does not
have the same degree of control over the attach type

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit enhances selftests/bpf by handling ATTACH_REJECT test cases and improving attach type control in BPF skeleton functions.', 'keywords': 'selftests,bpf,ATTACH_REJECT', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 5eff48f33fb733de9b88a5381e0428f3e873c670
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5eff48f33fb733de9b88a5381e0428f3e873c670
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559041
  Commit Message:
    selftests/bpf: Handle LOAD_REJECT test cases

In preparation to move test cases from bpf/test_sock_addr.c that expect
LOAD_REJECT
  Parent Hashes: 86b65c6db0190fb6c119e83da4de0eccf74fb1ff
  Refs:  this patch adds expected_attach_type and extends load_fn to
accept an expected attach type and a flag indicating whether or not
rejection is expected.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-4-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Handle LOAD_REJECT test cases in selftests/bpf by adding expected_attach_type and extending load_fn function.', 'keywords': 'LOAD_REJECT,test cases,expected_attach_type', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', "It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 86b65c6db0190fb6c119e83da4de0eccf74fb1ff
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 86b65c6db0190fb6c119e83da4de0eccf74fb1ff
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559040
  Commit Message:
    selftests/bpf: Use program name for skel load/destroy functions

In preparation to migrate tests from bpf/test_sock_addr.c to
sock_addr.c
  Parent Hashes: 73964e9085bbea517a675d5d8ceeb1e609a34748
  Refs:  update BPF_SKEL_FUNCS so that it generates functions
based on prog_name instead of skel_name. This allows us to differentiate
between programs in the same skeleton.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240510190246.3247730-3-jrife@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates BPF_SKEL_FUNCS to use program names for load/destroy functions in bpf self-tests, aiding migration of test_sock_addr to sock_addr.', 'keywords': 'BPF_SKEL_FUNCS, self-tests, program names', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 73964e9085bbea517a675d5d8ceeb1e609a34748
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 73964e9085bbea517a675d5d8ceeb1e609a34748
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1715559040
  Commit Message:
    selftests/bpf: Migrate recvmsg* return code tests to verifier_sock_addr.c

This set of tests check that the BPF verifier rejects programs with
invalid return codes (recvmsg4 and recvmsg6 hooks can only return 1).
This patch replaces the tests in test_sock_addr.c with
verifier_sock_addr.c
  Parent Hashes: 20a759df3bba35bf5c3ddec0c02ad69b603b584c
  Refs:  a new verifier prog_tests for sockaddr hooks

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Migrate and verify BPF tests for recvmsg return codes to verifier_sock_addr.c.', 'keywords': 'BPF verifier, recvmsg, tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: ea558c86248b4955e5c5f3c0c921df450880605e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ea558c86248b4955e5c5f3c0c921df450880605e
  Author Name: Namhyung Kim
  Author Email: namhyung@kernel.org
  Commit Date: 1715558992
  Commit Message:
    tools lib subcmd: Show parent options in help

I've just realized that help message in a subcommand didn't show one
in the parent command.  Since the option parser understands the parent
  Parent Hashes: d9c5f5f94c2d356fdf3503f7fcaf254512bc032d
  Refs: 
display code should do the same.  For example

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Updated help message to show parent options in subcommands for tools library.', 'keywords': 'help, subcommand, parser', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 20a759df3bba35bf5c3ddec0c02ad69b603b584c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 20a759df3bba35bf5c3ddec0c02ad69b603b584c
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1715558406
  Commit Message:
    riscv
  Parent Hashes: 80c5a07ae673a740ef7ef0fe1ab588075a25ce8d
  Refs:  bpf: make some atomic operations fully ordered

The BPF atomic operations with the BPF_FETCH modifier along with
BPF_XCHG and BPF_CMPXCHG are fully ordered but the RISC-V JIT implements
all atomic operations except BPF_CMPXCHG with relaxed ordering.

Section 8.1 of the "The RISC-V Instruction Set Manual Volume I:
Unprivileged ISA" [1]

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'RISC-V JIT updates atomic operations to be fully ordered in BPF contexts.', 'keywords': 'RISC-V, atomic, JIT', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 80c5a07ae673a740ef7ef0fe1ab588075a25ce8d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 80c5a07ae673a740ef7ef0fe1ab588075a25ce8d
  Author Name: Xiao Wang
  Author Email: xiao.w.wang@intel.com
  Commit Date: 1715558203
  Commit Message:
    riscv
  Parent Hashes: 68378982f0b21de02ac3c6a11e2420badefcb4bc
  Refs:  bpf: Fix typo in comment

We can use either "instruction" or "insn" in the comment.

Signed-off-by: Xiao Wang <xiao.w.wang@intel.com>
Reviewed-by: Pu Lehui <pulehui@huawei.com>
Link: https://lore.kernel.org/r/20240507111618.437121-1-xiao.w.wang@intel.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix a typo in a comment for the RISC-V architecture support in eBPF.', 'keywords': 'typo,fixed,comment', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 68378982f0b21de02ac3c6a11e2420badefcb4bc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 68378982f0b21de02ac3c6a11e2420badefcb4bc
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1715558157
  Commit Message:
    s390/bpf: Emit a barrier for BPF_FETCH instructions

BPF_ATOMIC_OP() macro documentation states that "BPF_ADD | BPF_FETCH"
should be the same as atomic_fetch_add()
  Parent Hashes: 55302bc1ca64160fec4dfa25e52142691ecb5dcd
  Refs:  which is currently not the
case on s390x: the serialization instruction "bcr 14

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses a serialization issue on s390x with BPF_FETCH instructions, ensuring proper atomic operations.', 'keywords': 's390,bpf,atomic', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 55302bc1ca64160fec4dfa25e52142691ecb5dcd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 55302bc1ca64160fec4dfa25e52142691ecb5dcd
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1715558075
  Commit Message:
    Merge branch 'bpf-inline-helpers-in-arm64-and-riscv-jits'

Puranjay Mohan says:

====================
bpf: Inline helpers in arm64 and riscv JITs

Changes in v5 -> v6:
arm64 v5: https://lore.kernel.org/all/20240430234739.79185-1-puranjay@kernel.org/
riscv v2: https://lore.kernel.org/all/20240430175834.33152-1-puranjay@kernel.org/
- Combine riscv and arm64 changes in single series
- Some coding style fixes

Changes in v4 -> v5:
v4: https://lore.kernel.org/all/20240429131647.50165-1-puranjay@kernel.org/
- Implement the inlining of the bpf_get_smp_processor_id() in the JIT.

NOTE: This needs to be based on:
https://lore.kernel.org/all/20240430175834.33152-1-puranjay@kernel.org/
to be built.

Manual run of bpf-ci with this series rebased on above:
https://github.com/kernel-patches/bpf/pull/6929

Changes in v3 -> v4:
v3: https://lore.kernel.org/all/20240426121349.97651-1-puranjay@kernel.org/
- Fix coding style issue related to C89 standards.

Changes in v2 -> v3:
v2: https://lore.kernel.org/all/20240424173550.16359-1-puranjay@kernel.org/
- Fixed the xlated dump of percpu mov to "r0 = &(void __percpu *)(r0)"
- Made ARM64 and x86-64 use the same code for inlining. The only difference
  that remains is the per-cpu address of the cpu_number.

Changes in v1 -> v2:
v1: https://lore.kernel.org/all/20240405091707.66675-1-puranjay12@gmail.com/
- Add a patch to inline bpf_get_smp_processor_id()
- Fix an issue in MRS instruction encoding as pointed out by Will
- Remove CONFIG_SMP check because arm64 kernel always compiles with CONFIG_SMP

This series adds the support of internal only per-CPU instructions and inlines
the bpf_get_smp_processor_id() helper call for ARM64 and RISC-V BPF JITs.

Here is an example of calls to bpf_get_smp_processor_id() and
percpu_array_map_lookup_elem() before and after this series on ARM64.

                                         BPF
                                        =====
              BEFORE                                       AFTER
             --------                                     -------

int cpu = bpf_get_smp_processor_id();           int cpu = bpf_get_smp_processor_id();
(85) call bpf_get_smp_processor_id#229032       (85) call bpf_get_smp_processor_id#8

p = bpf_map_lookup_elem(map
  Parent Hashes: f122668ddcce450c2585f0be4bf4478d6fd6176b 75fe4c0b3e181f5e3b990128013ac192fdfd4012
  Refs:  &zero);            p = bpf_map_lookup_elem(map

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges inline helper support for ARM64 and RISC-V JITs in the BPF subsystem.', 'keywords': 'inline helpers, ARM64, RISC-V', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 75fe4c0b3e181f5e3b990128013ac192fdfd4012
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 75fe4c0b3e181f5e3b990128013ac192fdfd4012
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1715558074
  Commit Message:
    bpf
  Parent Hashes: 7a4c32222b0e14349a6311e72bf6ebd3e1d1064b
  Refs:  arm64: inline bpf_get_smp_processor_id() helper

Inline calls to bpf_get_smp_processor_id() helper in the JIT by emitting
a read from struct thread_info. The SP_EL0 system register holds the
pointer to the task_struct and thread_info is the first member of this
struct. We can read the cpu number from the thread_info.

Here is how the ARM64 JITed assembly changes after this commit:

                                      ARM64 JIT
                                     ===========

              BEFORE                                    AFTER
             --------                                  -------

int cpu = bpf_get_smp_processor_id();        int cpu = bpf_get_smp_processor_id();

mov     x10

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Inline calls to bpf_get_smp_processor_id in ARM64 JIT using thread_info.', 'keywords': 'inline,JIT,ARM64', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7a4c32222b0e14349a6311e72bf6ebd3e1d1064b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7a4c32222b0e14349a6311e72bf6ebd3e1d1064b
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1715558074
  Commit Message:
    arm64
  Parent Hashes: 2ddec2c80b4402c293c7e6e0881cecaaf77e8cec
  Refs:  bpf: add internal-only MOV instruction to resolve per-CPU addrs

Support an instruction for resolving absolute addresses of per-CPU
data from their per-CPU offsets. This instruction is internal-only and
users are not allowed to use them directly. They will only be used for
internal inlining optimizations for now between BPF verifier and BPF
JITs.

Since commit 7158627686f0 ("arm64: percpu: implement optimised pcpu
access using tpidr_el1")

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add internal-only MOV instruction for resolving absolute addresses of per-CPU data for inlining optimizations in BPF verifier and JITs on arm64.', 'keywords': 'MOV instruction, per-CPU, optimization', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2ddec2c80b4402c293c7e6e0881cecaaf77e8cec
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2ddec2c80b4402c293c7e6e0881cecaaf77e8cec
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1715558074
  Commit Message:
    riscv
  Parent Hashes: 19c56d4e5be102cd118162b9f72d9c6d353e76fc
  Refs:  bpf: inline bpf_get_smp_processor_id()

Inline the calls to bpf_get_smp_processor_id() in the riscv bpf jit.

RISCV saves the pointer to the CPU's task_struct in the TP (thread
pointer) register. This makes it trivial to get the CPU's processor id.
As thread_info is the first member of task_struct

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Inline bpf_get_smp_processor_id() calls in the RISC-V BPF JIT for efficient CPU processor ID retrieval.', 'keywords': 'inline,RISC-V,JIT', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 19c56d4e5be102cd118162b9f72d9c6d353e76fc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 19c56d4e5be102cd118162b9f72d9c6d353e76fc
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1715558074
  Commit Message:
    riscv
  Parent Hashes: f122668ddcce450c2585f0be4bf4478d6fd6176b
  Refs:  bpf: add internal-only MOV instruction to resolve per-CPU addrs

Support an instruction for resolving absolute addresses of per-CPU
data from their per-CPU offsets. This instruction is internal-only and
users are not allowed to use them directly. They will only be used for
internal inlining optimizations for now between BPF verifier and BPF
JITs.

RISC-V uses generic per-cpu implementation where the offsets for CPUs
are kept in an array called __per_cpu_offset[cpu_number]. RISCV stores
the address of the task_struct in TP register. The first element in
task_struct is struct thread_info

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add an internal-only MOV instruction for resolving per-CPU addresses in RISC-V architecture.', 'keywords': 'MOV instruction,RISC-V,per-CPU', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f122668ddcce450c2585f0be4bf4478d6fd6176b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f122668ddcce450c2585f0be4bf4478d6fd6176b
  Author Name: Shahab Vahedi
  Author Email: shahab@synopsys.com
  Commit Date: 1715557896
  Commit Message:
    ARC: Add eBPF JIT support

This will add eBPF JIT support to the 32-bit ARCv2 processors. The
implementation is qualified by running the BPF tests on a Synopsys HSDK
board with "ARC HS38 v2.1c at 500 MHz" as the 4-core CPU.

The test_bpf.ko reports 2-10 fold improvements in execution time of its
tests. For instance:

test_bpf: #33 tcpdump port 22 jited:0 704 1766 2104 PASS
test_bpf: #33 tcpdump port 22 jited:1 120  224  260 PASS

test_bpf: #141 ALU_DIV_X: 4294967295 / 4294967295 = 1 jited:0 238 PASS
test_bpf: #141 ALU_DIV_X: 4294967295 / 4294967295 = 1 jited:1  23 PASS

test_bpf: #776 JMP32_JGE_K: all ... magnitudes jited:0 2034681 PASS
test_bpf: #776 JMP32_JGE_K: all ... magnitudes jited:1 1020022 PASS

Deployment and structure
------------------------
The related codes are added to "arch/arc/net":

- bpf_jit.h       -- The interface that a back-end translator must provide
- bpf_jit_core.c  -- Knows how to handle the input eBPF byte stream
- bpf_jit_arcv2.c -- The back-end code that knows the translation logic

The bpf_int_jit_compile() at the end of bpf_jit_core.c is the entrance
to the whole process. Normally
  Parent Hashes: fcd1ed89a0439c45e1336bd9649485c44b7597c7
  Refs:  the translation is done in one pass

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds eBPF JIT support to 32-bit ARCv2 processors for improved performance.', 'keywords': 'eBPF JIT support, ARCv2, performance', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fcd1ed89a0439c45e1336bd9649485c44b7597c7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fcd1ed89a0439c45e1336bd9649485c44b7597c7
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1715291075
  Commit Message:
    kbuild
  Parent Hashes: 0d03a4d24bfa4f806ddc2cfa8ebd0eac81139b23
  Refs: bpf: Switch to using --btf_features for pahole v1.26 and later

The btf_features list can be used for pahole v1.26 and later -
it is useful because if a feature is not yet implemented it will
not exit with a failure message.  This will allow us to add feature
requests to the pahole options without having to check pahole versions
in future; if the version of pahole supports the feature it will be
added.

Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Tested-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240507135514.490467-1-alan.maguire@oracle.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable btf_features for pahole v1.26+ to avoid compatibility issues with future feature requests.', 'keywords': 'btf_features,pahole,compatibility', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7abbf38cd8edb92bc72fe3405f8a0bf19f7761c2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7abbf38cd8edb92bc72fe3405f8a0bf19f7761c2
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1715287238
  Commit Message:
    selftests/bpf: Drop get_port in test_tcp_check_syncookie

The arguments "addr" and "len" of run_test() have dropped. This makes
function get_port() useless. Drop it from test_tcp_check_syncookie_user.c.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/a9b5c8064ab4cbf0f68886fe0e4706428b8d0d47.1714907662.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 65a3f0df44dd3db0f77e6ccff0a126969abc0da4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed the unused get_port function from test_tcp_check_syncookie due to dropped arguments.', 'keywords': 'Dropped, test, function', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 65a3f0df44dd3db0f77e6ccff0a126969abc0da4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 65a3f0df44dd3db0f77e6ccff0a126969abc0da4
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1715287238
  Commit Message:
    selftests/bpf: Use connect_to_fd in test_tcp_check_syncookie

This patch uses public helper connect_to_fd() exported in network_helpers.h
instead of the local defined function connect_to_server() in
test_tcp_check_syncookie_user.c. This can avoid duplicate code.

Then the arguments "addr" and "len" of run_test() become useless
  Parent Hashes: 5059c73eca67e686dea42af079c41857cb00a5a6
  Refs:  drop them
too.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/e0ae6b790ac0abc7193aadfb2660c8c9eb0fe1f0.1714907662.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit replaces a locally defined function with a public helper to reduce code duplication in a BPF selftest.', 'keywords': 'selftests,bpf,connect_to_fd', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 5059c73eca67e686dea42af079c41857cb00a5a6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5059c73eca67e686dea42af079c41857cb00a5a6
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1715287238
  Commit Message:
    selftests/bpf: Use connect_to_fd in sockopt_inherit

This patch uses public helper connect_to_fd() exported in network_helpers.h
instead of the local defined function connect_to_server() in
prog_tests/sockopt_inherit.c. This can avoid duplicate code.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/71db79127cc160b0643fd9a12c70ae019ae076a1.1714907662.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 49e1fa8dbd81340f610057be3f3909f24c232807
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactored sockopt_inherit test to use connect_to_fd from network_helpers.h, replacing local connect_to_server to eliminate code duplication.', 'keywords': 'refactoring, selftests, duplication', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 49e1fa8dbd81340f610057be3f3909f24c232807
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 49e1fa8dbd81340f610057be3f3909f24c232807
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1715287238
  Commit Message:
    selftests/bpf: Use start_server_addr in test_tcp_check_syncookie

Include network_helpers.h in test_tcp_check_syncookie_user.c
  Parent Hashes: 5166b3e3e30a8eb93f7182283ed4db719bdfde1a
  Refs:  use
public helper start_server_addr() in it instead of the local defined
function start_server(). This can avoid duplicate code.

Add two helpers v6only_true() and v6only_false() to set IPV6_V6ONLY
sockopt to true or false

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors test_tcp_check_syncookie to use start_server_addr and adds helpers to manage IPV6_V6ONLY sockopt.', 'keywords': 'refactor, helpers, IPV6_V6ONLY', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 5166b3e3e30a8eb93f7182283ed4db719bdfde1a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5166b3e3e30a8eb93f7182283ed4db719bdfde1a
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1715287238
  Commit Message:
    selftests/bpf: Use start_server_addr in sockopt_inherit

Include network_helpers.h in prog_tests/sockopt_inherit.c
  Parent Hashes: 20434d2d896f85b38fa1fe91b8739afcd9cde3b3
  Refs:  use public
helper start_server_addr() instead of the local defined function
start_server(). This can avoid duplicate code.

Add a helper custom_cb() to set SOL_CUSTOM sockopt looply

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor sockopt_inherit.c to use network_helpers and add custom_cb for SOL_CUSTOM sockopt loop.', 'keywords': 'network_helpers sockopt custom_cb', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 20434d2d896f85b38fa1fe91b8739afcd9cde3b3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 20434d2d896f85b38fa1fe91b8739afcd9cde3b3
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1715287229
  Commit Message:
    selftests/bpf: Add post_socket_cb for network_helper_opts

__start_server() sets SO_REUSPORT through setsockopt() when the parameter
'reuseport' is set. This patch makes it more flexible by adding a function
pointer post_socket_cb into struct network_helper_opts. The
'const struct post_socket_opts *cb_opts' args in the post_socket_cb is
for the future extension.

The 'reuseport' parameter can be dropped.
Now the original start_reuseport_server() can be implemented by setting a
newly defined reuseport_cb() function pointer to post_socket_cb filed of
struct network_helper_opts.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/470cb82f209f055fc7fb39c66c6b090b5b7ed2b2.1714907662.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: cbe35adf691a3227b11131a922245c4d6409d2d6
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduced post_socket_cb function pointer to enhance flexibility in network_helper_opts for setting SO_REUSEPORT.', 'keywords': 'post_socket_cb,function pointer,network_helper_opts', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: cbe35adf691a3227b11131a922245c4d6409d2d6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cbe35adf691a3227b11131a922245c4d6409d2d6
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1715278393
  Commit Message:
    Merge branch 'selftests-bpf-retire-bpf_tcp_helpers-h'

Martin KaFai Lau says:

====================
selftests/bpf: Retire bpf_tcp_helpers.h

From: Martin KaFai Lau <martin.lau@kernel.org>

The earlier commit 8e6d9ae2e09f ("selftests/bpf: Use bpf_tracing.h instead of bpf_tcp_helpers.h")
removed the bpf_tcp_helpers.h usages from the non networking tests.

This patch set is a continuation of this effort to retire
the bpf_tcp_helpers.h from the networking tests (mostly tcp-cc related).

The main usage of the bpf_tcp_helpers.h is the partial kernel
socket definitions (e.g. sock
  Parent Hashes: 009367099eb61a4fc2af44d4eb06b6b4de7de6db 6a650816b098a15c4690a22e3889858264d01aa8
  Refs:  tcp_sock). New fields are kept adding
back to those partial socket definitions while everything is available
in the vmlinux.h. The recent bpf_cc_cubic.c test tried to extend
bpf_tcp_helpers.c but eventually used the vmlinux.h instead. To avoid
this unnecessary detour for new tests and have one consistent way
of using the kernel sockets

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit retires the bpf_tcp_helpers.h from networking tests for consistent kernel socket usage via vmlinux.h.', 'keywords': 'retire, bpf_tcp_helpers, vmlinux', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 6a650816b098a15c4690a22e3889858264d01aa8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6a650816b098a15c4690a22e3889858264d01aa8
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715278392
  Commit Message:
    selftests/bpf: Retire bpf_tcp_helpers.h

The previous patches have consolidated the tests to use
bpf_tracing_net.h (i.e. vmlinux.h) instead of bpf_tcp_helpers.h.

This patch can finally retire the bpf_tcp_helpers.h from
the repository.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-11-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: c075c9c4af289bb5956b0164283a85cf9c293c8e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit retires bpf_tcp_helpers.h in favor of using bpf_tracing_net.h for selftests.', 'keywords': 'retire,bpf_tcp_helpers.h,bpf_tracing_net.h', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: c075c9c4af289bb5956b0164283a85cf9c293c8e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c075c9c4af289bb5956b0164283a85cf9c293c8e
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715278392
  Commit Message:
    selftests/bpf: Remove the bpf_tcp_helpers.h usages from other non tcp-cc tests

The patch removes the remaining bpf_tcp_helpers.h usages in the
non tcp-cc networking tests. It either replaces it with bpf_tracing_net.h
or just removed it because the test is not actually using any
kernel sockets. For the later
  Parent Hashes: 6eee55aa769c241182da73a391980f51edba27dc
  Refs:  the missing macro (mainly SOL_TCP) is
defined locally.

An exception is the test_sock_fields which is testing
the "struct bpf_sock" type instead of the kernel sock type.
Whenever "vmlinux.h" is used instead

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes inappropriate bpf_tcp_helpers.h references from non tcp-cc networking tests and updates test_sock_fields to use vmlinux.h.', 'keywords': 'bpf_tcp_helpers,non tcp-cc,vmlinux', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6eee55aa769c241182da73a391980f51edba27dc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6eee55aa769c241182da73a391980f51edba27dc
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715278392
  Commit Message:
    selftests/bpf: Remove bpf_tcp_helpers.h usages from other misc bpf tcp-cc tests

This patch removed the final few bpf_tcp_helpers.h usages
in some misc bpf tcp-cc tests and replace it with
bpf_tracing_net.h (i.e. vmlinux.h)

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-9-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 6ad4e6e94697e960630594907666bc09e78a3b8a
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes usages of bpf_tcp_helpers.h in BPF tcp-cc tests and replaces it with bpf_tracing_net.h.', 'keywords': 'bpf_tcp_helpers.h,tcp-cc,bpf_tracing_net.h', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 6ad4e6e94697e960630594907666bc09e78a3b8a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6ad4e6e94697e960630594907666bc09e78a3b8a
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715278392
  Commit Message:
    selftests/bpf: Use bpf_tracing_net.h in bpf_dctcp

This patch uses bpf_tracing_net.h (i.e. vmlinux.h) in bpf_dctcp.
This will allow to retire the bpf_tcp_helpers.h and consolidate
tcp-cc tests to vmlinux.h.

It will have a dup on min/max macros with the bpf_cubic. It could
be further refactored in the future.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-8-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: a824c9a8a4d9a654d62674a8425c0f1abc9c3d33
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates bpf_dctcp to use bpf_tracing_net.h, allowing tcp-cc tests consolidation into vmlinux.h.', 'keywords': 'bpf_dctcp,bpf_tracing_net,consolidation', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: a824c9a8a4d9a654d62674a8425c0f1abc9c3d33
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a824c9a8a4d9a654d62674a8425c0f1abc9c3d33
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715278392
  Commit Message:
    selftests/bpf: Use bpf_tracing_net.h in bpf_cubic

This patch uses bpf_tracing_net.h (i.e. vmlinux.h) in bpf_cubic.
This will allow to retire the bpf_tcp_helpers.h and consolidate
tcp-cc tests to vmlinux.h.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-7-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: b1d87ae9b0d3d91767d85183e40c96f4229a6c21
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates selftests to use bpf_tracing_net.h in bpf_cubic and retires bpf_tcp_helpers.h.', 'keywords': 'bpf_tracing_net,vmlinux,tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b1d87ae9b0d3d91767d85183e40c96f4229a6c21
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b1d87ae9b0d3d91767d85183e40c96f4229a6c21
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715278392
  Commit Message:
    selftests/bpf: Rename tcp-cc private struct in bpf_cubic and bpf_dctcp

The "struct bictcp" and "struct dctcp" are private to the bpf prog
and they are stored in the private buffer in inet_csk(sk)->icsk_ca_priv.
Hence
  Parent Hashes: 7d3851a31832bf8dc776a78494b788518734ad0f
  Refs:  there is no bpf CO-RE required.

The same struct name exists in the vmlinux.h. To reuse vmlinux.h

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Rename private structs in bpf_cubic and bpf_dctcp to avoid name conflict with vmlinux.h.', 'keywords': 'private structs, bpf_cubic, bpf_dctcp', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 7d3851a31832bf8dc776a78494b788518734ad0f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7d3851a31832bf8dc776a78494b788518734ad0f
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715278391
  Commit Message:
    selftests/bpf: Sanitize the SEC and inline usages in the bpf-tcp-cc tests

It is needed to remove the BPF_STRUCT_OPS usages from the tcp-cc tests
because it is defined in bpf_tcp_helpers.h which is going to be retired.
While at it
  Parent Hashes: cc5b18ce1714160be3e0e3b9440a6306dc87e5c4
  Refs:  this patch consolidates all tcp-cc struct_ops programs to
use the SEC("struct_ops") + BPF_PROG().

It also removes the unnecessary __always_inline usages from the
tcp-cc tests.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-5-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor bpf-tcp-cc tests by removing BPF_STRUCT_OPS and unnecessary __always_inline usages for alignment with upcoming changes.', 'keywords': 'bpf-tcp-cc,BPF_STRUCT_OPS,sanitize', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: cc5b18ce1714160be3e0e3b9440a6306dc87e5c4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cc5b18ce1714160be3e0e3b9440a6306dc87e5c4
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715278391
  Commit Message:
    selftests/bpf: Reuse the tcp_sk() from the bpf_tracing_net.h

This patch removes the individual tcp_sk implementations from the
tcp-cc tests. The tcp_sk() implementation from the bpf_tracing_net.h
is reused instead.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-4-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: cbaec46df6c08a2fab6be03d093d3d6ce74adc9a
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor selftests by reusing the tcp_sk() from bpf_tracing_net.h in tcp-cc tests.', 'keywords': 'selftests,tcp_sk,bpf_tracing_net', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: cbaec46df6c08a2fab6be03d093d3d6ce74adc9a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cbaec46df6c08a2fab6be03d093d3d6ce74adc9a
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715278391
  Commit Message:
    selftests/bpf: Add a few tcp helper functions and macros to bpf_tracing_net.h

This patch adds a few tcp related helper functions to bpf_tracing_net.h.
They will be useful for both tcp-cc and network tracing related
bpf progs. They have already been in the bpf_tcp_helpers.h. This change
is needed to retire the bpf_tcp_helpers.h and consolidate all tests
to vmlinux.h (i.e. bpf_tracing_net.h).

Some of the helpers (tcp_sk and inet_csk) are also defined in
bpf_cc_cubic.c and they are removed. While at it
  Parent Hashes: c0338e609e6e8aff8a7052c90cff83a6bc792ebc
  Refs:  remove
the vmlinux.h from bpf_cc_cubic.c. bpf_tracing_net.h (which has
vmlinux.h after this patch) is enough and will be consistent
with the other tcp-cc tests in the later patches.

The other TCP_* macro additions will be needed for the bpf_dctcp
changes in the later patch.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240509175026.3423614-3-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds TCP helper functions to bpf_tracing_net.h for tcp-cc and network tracing eBPF programs.', 'keywords': 'tcp helper functions,tracing,consolidation', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: c0338e609e6e8aff8a7052c90cff83a6bc792ebc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c0338e609e6e8aff8a7052c90cff83a6bc792ebc
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715278391
  Commit Message:
    selftests/bpf: Remove bpf_tracing_net.h usages from two networking tests

This patch removes the bpf_tracing_net.h usage from the networking tests
  Parent Hashes: 009367099eb61a4fc2af44d4eb06b6b4de7de6db
  Refs: 
fib_lookup and test_lwt_redirect. Instead of using the (copied) macro
TC_ACT_SHOT and ETH_HLEN from bpf_tracing_net.h

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes the usage of bpf_tracing_net.h in two networking tests.', 'keywords': 'bpf_tracing_net, networking, tests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 009367099eb61a4fc2af44d4eb06b6b4de7de6db
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 009367099eb61a4fc2af44d4eb06b6b4de7de6db
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1715205655
  Commit Message:
    bpf: Avoid uninitialized value in BPF_CORE_READ_BITFIELD

[Changes from V1:
 - Use a default branch in the switch statement to initialize `val'.]

GCC warns that `val' may be used uninitialized in the
BPF_CRE_READ_BITFIELD macro
  Parent Hashes: 911edc69c832161b62a8ad10a6972290157a7bd3
  Refs:  defined in bpf_core_read.h as:

	[...]
	unsigned long long val;						      \
	[...]								      \
	switch (__CORE_RELO(s

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed potential uninitialized value warning in BPF_CORE_READ_BITFIELD macro.', 'keywords': 'uninitialized,value,macro', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 911edc69c832161b62a8ad10a6972290157a7bd3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 911edc69c832161b62a8ad10a6972290157a7bd3
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1715187419
  Commit Message:
    bpf: guard BPF_NO_PRESERVE_ACCESS_INDEX in skb_pkt_end.c

This little patch is a follow-up to:
https://lore.kernel.org/bpf/20240507095011.15867-1-jose.marchesi@oracle.com/T/#u

The temporary workaround of passing -DBPF_NO_PRESERVE_ACCESS_INDEX
when building with GCC triggers a redefinition preprocessor error when
building progs/skb_pkt_end.c.  This patch adds a guard to avoid
redefinition.

Signed-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>
Cc: david.faust@oracle.com
Cc: cupertino.miranda@oracle.com
Cc: Eduard Zingerman <eddyz87@gmail.com>
Cc: Yonghong Song <yonghong.song@linux.dev>
Cc: Andrii Nakryiko <andrii.nakryiko@gmail.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240508110332.17332-1-jose.marchesi@oracle.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 1209a523f6914404e8941d9e04caa42be7cab8d5
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This patch adds a guard to prevent preprocessor errors when building with BPF_NO_PRESERVE_ACCESS_INDEX.', 'keywords': 'guard, preprocessor, GCC', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1209a523f6914404e8941d9e04caa42be7cab8d5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1209a523f6914404e8941d9e04caa42be7cab8d5
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1715187390
  Commit Message:
    bpf: avoid UB in usages of the __imm_insn macro

[Changes from V2:
 - no-strict-aliasing is only applied when building with GCC.
 - cpumask_failure.c is excluded
  Parent Hashes: cd3fc3b9782130a5bc1dc3dfccffbc1657637a93
  Refs:  as it doesn't use __imm_insn.]

The __imm_insn macro is defined in bpf_misc.h as:

  #define __imm_insn(name

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses undefined behavior in the usage of the __imm_insn macro for BPF programs.', 'keywords': 'undefined behavior, macro, GCC', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: cd3fc3b9782130a5bc1dc3dfccffbc1657637a93
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cd3fc3b9782130a5bc1dc3dfccffbc1657637a93
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1715187327
  Commit Message:
    bpf: avoid uninitialized warnings in verifier_global_subprogs.c

[Changes from V1:
- The warning to disable is -Wmaybe-uninitialized
  Parent Hashes: e612b5c1d3ee325aff991b4078b4999bf6bac096
  Refs:  not -Wuninitialized.
- This warning is only supported in GCC.]

The BPF selftest verifier_global_subprogs.c contains code that
purposedly performs out of bounds access to memory

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses uninitialized warnings in the BPF verifier by disabling specific GCC warnings in verifier_global_subprogs.c.', 'keywords': 'uninitialized,warnings,BPF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e612b5c1d3ee325aff991b4078b4999bf6bac096
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e612b5c1d3ee325aff991b4078b4999bf6bac096
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1715179145
  Commit Message:
    bpf
  Parent Hashes: 7e2c7a3f732b77623cea01b89b8cc6724c90a439
  Refs:  arm64: Add support for lse atomics in bpf_arena

When LSE atomics are available

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for LSE atomics in bpf_arena on arm64 architecture.', 'keywords': 'LSE atomics, bpf_arena, arm64', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7e2c7a3f732b77623cea01b89b8cc6724c90a439
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7e2c7a3f732b77623cea01b89b8cc6724c90a439
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715124313
  Commit Message:
    Merge branch 'libbpf: further struct_ops fixes and improvements'

Andrii Nakryiko says:

====================
Fix yet another case of mishandling SEC("struct_ops") programs that were
nulled out programmatically through BPF skeleton by the user.

While at it
  Parent Hashes: 93d1c2da15017a443cad812468450b72f43e3bd8 7b9959b8cdbc40b31b4c66bb900ec8d5e5b305bd
  Refs:  add some improvements around detecting and reporting errors

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit addresses mishandling of SEC("struct_ops") programs and adds improvements for detecting and reporting errors in libbpf.', 'keywords': 'struct_ops, errors, improvements', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['LSM like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7b9959b8cdbc40b31b4c66bb900ec8d5e5b305bd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7b9959b8cdbc40b31b4c66bb900ec8d5e5b305bd
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1715124119
  Commit Message:
    selftests/bpf: shorten subtest names for struct_ops_module test

Drive-by clean up
  Parent Hashes: 41df0733ea414a49094258adab4d600db0420731
  Refs:  we shouldn't use meaningless "test_" prefix for
subtest names.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240507001335.1445325-8-andrii@kernel.org
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit shortens subtest names for struct_ops_module in selftests to avoid meaningless prefixes.', 'keywords': 'shorten,selftests,cleanup', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 41df0733ea414a49094258adab4d600db0420731
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 41df0733ea414a49094258adab4d600db0420731
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1715124119
  Commit Message:
    selftests/bpf: validate struct_ops early failure detection logic

Add a simple test that validates that libbpf will reject isolated
struct_ops program early with helpful warning message.

Also validate that explicit use of such BPF program through BPF skeleton
after BPF object is open won't trigger any warnings.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240507001335.1445325-7-andrii@kernel.org
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: c78420bafe7cf9ce14fa7ceb40ce62e1372e661d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test for early failure detection in struct_ops programs using BPF skeleton.', 'keywords': 'selftests,bpf,struct_ops', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c78420bafe7cf9ce14fa7ceb40ce62e1372e661d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c78420bafe7cf9ce14fa7ceb40ce62e1372e661d
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1715124119
  Commit Message:
    libbpf: improve early detection of doomed-to-fail BPF program loading

Extend libbpf's pre-load checks for BPF programs
  Parent Hashes: 548c2ede0dc81cb8c86f3a72c1c63fe1c179cbfe
  Refs:  detecting more typical
conditions that are destinated to cause BPF program failure. This is an
opportunity to provide more helpful and actionable error message to
users

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit enhances libbpf to provide better early detection and error messages for programs that are likely to fail during loading.', 'keywords': 'libbpf, detection, error', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 548c2ede0dc81cb8c86f3a72c1c63fe1c179cbfe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 548c2ede0dc81cb8c86f3a72c1c63fe1c179cbfe
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1715124119
  Commit Message:
    libbpf: fix libbpf_strerror_r() handling unknown errors

strerror_r()
  Parent Hashes: 9d66d60e968d85742569d025a2fb509cb57333bb
  Refs:  used from libbpf-specific libbpf_strerror_r() wrapper is
documented to return error in two different ways

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Fix incorrect handling of unknown errors in libbpf's strerror_r wrapper function.", 'keywords': 'libbpf, strerror_r, errors', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9d66d60e968d85742569d025a2fb509cb57333bb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9d66d60e968d85742569d025a2fb509cb57333bb
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1715124119
  Commit Message:
    selftests/bpf: add another struct_ops callback use case test

Add a test which tests the case that was just fixed. Kernel has full
type information about callback
  Parent Hashes: e18e2e70dbd1ee3099049557060067b6ec703efa
  Refs:  but user explicitly nulls out the
reference to declaratively set BPF program reference.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240507001335.1445325-4-andrii@kernel.org
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest for struct_ops callback handling in eBPF.', 'keywords': 'selftests, struct_ops, callback', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e18e2e70dbd1ee3099049557060067b6ec703efa
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e18e2e70dbd1ee3099049557060067b6ec703efa
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1715124119
  Commit Message:
    libbpf: handle yet another corner case of nulling out struct_ops program

There is yet another corner case where user can set STRUCT_OPS program
reference in STRUCT_OPS map to NULL
  Parent Hashes: 8374b56b1df5566d19d645e49da2bf31b660bcfd
  Refs:  but libbpf will fail to disable
autoload for such BPF program. This time it's the case of "new" kernel
which has type information about callback field

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses a corner case in libbpf for handling null STRUCT_OPS program references in STRUCT_OPS maps on newer kernels.', 'keywords': 'libbpf, STRUCT_OPS, null', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8374b56b1df5566d19d645e49da2bf31b660bcfd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8374b56b1df5566d19d645e49da2bf31b660bcfd
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1715124119
  Commit Message:
    libbpf: remove unnecessary struct_ops prog validity check

libbpf ensures that BPF program references set in map->st_ops->progs[i]
during open phase are always valid STRUCT_OPS programs. This is done in
bpf_object__collect_st_ops_relos(). So there is no need to double-check
that in bpf_map__init_kern_struct_ops().

Simplify the code by removing unnecessary check. Also
  Parent Hashes: 93d1c2da15017a443cad812468450b72f43e3bd8
  Refs:  we avoid using
local prog variable to keep code similar to the upcoming fix

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes an unnecessary struct_ops prog validity check in libbpf, simplifying the code.', 'keywords': 'libbpf, struct_ops, simplify', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 93d1c2da15017a443cad812468450b72f43e3bd8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 93d1c2da15017a443cad812468450b72f43e3bd8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1715118061
  Commit Message:
    Merge branch 'fix-number-of-arguments-in-test'

Cupertino Miranda says:

====================
Fix number of arguments in test

Hi everyone
  Parent Hashes: 675b4e24bc50f4600b6bf3527fdbaa1f73498334 b2e086cb28aa358f7b5564888304908aff735827
  Refs: 

This is a new version based on comments.

Regards

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes the number of arguments in a test case.', 'keywords': 'fix, test, arguments', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b2e086cb28aa358f7b5564888304908aff735827
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b2e086cb28aa358f7b5564888304908aff735827
  Author Name: Cupertino Miranda
  Author Email: cupertino.miranda@oracle.com
  Commit Date: 1715118060
  Commit Message:
    selftests/bpf: Change functions definitions to support GCC

The test_xdp_noinline.c contains 2 functions that use more then 5
arguments. This patch collapses the 2 last arguments in an array.
Also in GCC and ipa_sra optimization increases the number of arguments
used in function encap_v4. This pass disables the optimization for that
particular file.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240507122220.207820-3-cupertino.miranda@oracle.com

  Parent Hashes: 207cf6e649ee551ab3bdb1cfe1b2848e6a4337a5
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Modify self-tests to ensure compatibility with GCC by adjusting function arguments.', 'keywords': 'self-tests,GCC,arguments', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 207cf6e649ee551ab3bdb1cfe1b2848e6a4337a5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 207cf6e649ee551ab3bdb1cfe1b2848e6a4337a5
  Author Name: Cupertino Miranda
  Author Email: cupertino.miranda@oracle.com
  Commit Date: 1715118060
  Commit Message:
    selftests/bpf: Add CFLAGS per source file and runner

This patch adds support to specify CFLAGS per source file and per test
runner.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240507122220.207820-2-cupertino.miranda@oracle.com

  Parent Hashes: 675b4e24bc50f4600b6bf3527fdbaa1f73498334
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds support for specifying CFLAGS per source file and test runner in selftests for BPF.', 'keywords': 'CFLAGS,selftests,BPF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 675b4e24bc50f4600b6bf3527fdbaa1f73498334
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 675b4e24bc50f4600b6bf3527fdbaa1f73498334
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1715118000
  Commit Message:
    bpf: Temporarily define BPF_NO_PRESEVE_ACCESS_INDEX for GCC

The vmlinux.h file generated by bpftool makes use of compiler pragmas
in order to install the CO-RE preserve_access_index in all the struct
types derived from the BTF info:

  #ifndef __VMLINUX_H__
  #define __VMLINUX_H__

  #ifndef BPF_NO_PRESERVE_ACCESS_INDEX
  #pragma clang attribute push (__attribute__((preserve_access_index))
  Parent Hashes: eda80aacd00c016d7c03a2bfe231fafdce0e16b0
  Refs:  apply_t = record
  #endif

  [... type definitions generated from kernel BTF ... ]

  #ifndef BPF_NO_PRESERVE_ACCESS_INDEX
  #pragma clang attribute pop
  #endif

The `clang attribute push/pop' pragmas are specific to clang/llvm and
are not supported by GCC.

At the moment the BTF dumping services in libbpf do not support
dicriminating between types dumped because they are directly referred
and types dumped because they are dependencies.  A suitable API is
being worked now. See [1] and [2].

In the interim

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Temporarily define BPF_NO_PRESEVE_ACCESS_INDEX to ensure compatibility with GCC in vmlinux.h file generated by bpftool.', 'keywords': 'BPF,GCC,libbpf', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: eda80aacd00c016d7c03a2bfe231fafdce0e16b0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: eda80aacd00c016d7c03a2bfe231fafdce0e16b0
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1715117481
  Commit Message:
    Merge branch 'bpf-avoid-attribute-ignored-warnings-in-gcc'

Jose E. Marchesi says:

====================
bpf: avoid `attribute ignored' warnings in GCC

These two patches avoid warnings (turned into errors) when building
the BPF selftests with GCC.

[Changes from V1:
- As requested by reviewer
  Parent Hashes: 75b0fbf15d8466be618a997cae774eef445c0c7d b0fbdf759da05a35b67fd27b8859738b79af25d6
  Refs:  an additional patch has been added in
  order to remove __hidden from the `private' macro in
  cpumask_common.h.
- Typo bening -> benign fixed in the commit message of the second
  patch.]
====================

Link: https://lore.kernel.org/r/20240507074227.4523-1-jose.marchesi@oracle.com
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Avoid warnings in BPF selftests due to ignored attribute errors in GCC.', 'keywords': 'warnings,BPF,GCC', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b0fbdf759da05a35b67fd27b8859738b79af25d6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b0fbdf759da05a35b67fd27b8859738b79af25d6
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1715117480
  Commit Message:
    bpf: Disable some `attribute ignored' warnings in GCC

This patch modifies selftests/bpf/Makefile to pass -Wno-attributes to
GCC.  This is because of the following attributes which are ignored:

- btf_decl_tag
- btf_type_tag

  There are many of these.  At the moment none of these are
  recognized/handled by gcc-bpf.

  We are aware that btf_decl_tag is necessary for some of the
  selftest harness to communicate test failure/success.  Support for
  it is in progress in GCC upstream:

  https://gcc.gnu.org/pipermail/gcc-patches/2024-May/650482.html

  However
  Parent Hashes: 2ce987e1650216638b2b5f44948c6efea67038ae
  Refs:  the GCC master branch is not yet open

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates the Makefile to disable certain GCC attribute warnings for btf_decl_tag and btf_type_tag.', 'keywords': 'GCC, warnings, Makefile', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2ce987e1650216638b2b5f44948c6efea67038ae
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2ce987e1650216638b2b5f44948c6efea67038ae
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1715117480
  Commit Message:
    bpf: Avoid __hidden__ attribute in static object

An object defined as `static' defaults to hidden visibility.  If
additionally the visibility(__weak__) compiler attribute is applied to
the declaration of the object
  Parent Hashes: 75b0fbf15d8466be618a997cae774eef445c0c7d
  Refs:  GCC warns that the attribute gets
ignored.

This patch removes the only instance of this problem among the BPF
selftests.

Tested in bpf-next master.

Signed-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240507074227.4523-2-jose.marchesi@oracle.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes the __hidden__ attribute for static objects in BPF selftests to resolve a compiler warning.', 'keywords': '__hidden__ attribute, static objects, BPF selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 75b0fbf15d8466be618a997cae774eef445c0c7d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 75b0fbf15d8466be618a997cae774eef445c0c7d
  Author Name: Haiyue Wang
  Author Email: haiyue.wang@intel.com
  Commit Date: 1715116397
  Commit Message:
    bpf: Remove redundant page mask of vmf->address

As the comment described in "struct vm_fault":
	".address"      : 'Faulting virtual address - masked'
	".real_address" : 'Faulting virtual address - unmasked'

The link [1] said: "Whatever the routes
  Parent Hashes: 329a6720a3ebbc041983b267981ab2cac102de93
  Refs:  all architectures end up to the
invocation of handle_mm_fault() which

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes a redundant page mask of vmf->address in the bpf code.', 'keywords': 'redundant,page,mask', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 89ea968a9d759f71ac7b8d50949a8e5e5bcb1111
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 89ea968a9d759f71ac7b8d50949a8e5e5bcb1111
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089198
  Commit Message:
    selftests/hid: skip tests with HID-BPF if udev-hid-bpf is not installed

udev-hid-bpf is still not installed everywhere
  Parent Hashes: b22cbfb42c19a378cca5fae3a98395225af05384
  Refs:  and we should probably
not assume it is installed automatically.

Link: https://lore.kernel.org/r/20240506143612.148031-1-bentiss@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Skip HID-BPF self-tests if udev-hid-bpf is not installed.', 'keywords': 'self-tests,HID-BPF,udev', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: b22cbfb42c19a378cca5fae3a98395225af05384
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b22cbfb42c19a378cca5fae3a98395225af05384
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089195
  Commit Message:
    selftests/hid: add tests for the Raptor Mach 2 joystick

The only interesting bit is the HAT switch
  Parent Hashes: aa7e560454a90d4fe9924500f1ae2a3779806b85
  Refs:  and we use a BPF program
to fix it. So ensure this works correctly.

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-18-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for Raptor Mach 2 joystick using BPF program to ensure correct functionality of the HAT switch.', 'keywords': 'selftests, joystick, BPF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: aa7e560454a90d4fe9924500f1ae2a3779806b85
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: aa7e560454a90d4fe9924500f1ae2a3779806b85
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089191
  Commit Message:
    selftests/hid: move the gamepads definitions in the test file

More in line with the other test_* files.

No code change

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-17-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: c6b03c736a523902bb53bb9897f5c75292b3424b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Moved gamepad definitions within selftests/hid to the test file for consistency.', 'keywords': 'gamepads,hid,selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: c6b03c736a523902bb53bb9897f5c75292b3424b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c6b03c736a523902bb53bb9897f5c75292b3424b
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089187
  Commit Message:
    selftests/hid: import base_gamepad.py from hid-tools

We need to slightly change base_device.py for supporting HID-BPF
  Parent Hashes: 51de9ee0a6c7f0d06fa7b80ff2ef9f3f661c3eb6
  Refs: 
so instead of monkey patching

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit imports base_gamepad.py from hid-tools and modifies base_device.py to support HID-BPF.', 'keywords': 'base_gamepad.py,hid-tools,HID-BPF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 51de9ee0a6c7f0d06fa7b80ff2ef9f3f661c3eb6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 51de9ee0a6c7f0d06fa7b80ff2ef9f3f661c3eb6
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089183
  Commit Message:
    selftests/hid: add Huion Kamvas Pro 19 tests

This tablets gets a lot of things wrong:
- the secondary button is reported through Secondary Tip Switch
- the third button is reported through Invert

We need to add some out of proximity intermediate state when moving
back and forth with the eraser mode as it can only be triggered by
physically returning the pen
  Parent Hashes: 1b2c3caf7839adff892d8397995803d93e347974
  Refs:  meaning that the tolerated transitions
can never happen.

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-15-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add tests for Huion Kamvas Pro 19 in HID selftests to address incorrect button reporting.', 'keywords': 'HID selftests, Huion Kamvas, button', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 1b2c3caf7839adff892d8397995803d93e347974
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1b2c3caf7839adff892d8397995803d93e347974
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089179
  Commit Message:
    selftests/hid: tablets: also check for XP-Pen offset correction

The values are taken from the HID-BPF file.
Basically we are recomputing the array provided there.

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-14-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: 03899011df4b2bb0f9b3ac57b1044b161a336f31
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added offset correction for XP-Pen in HID selftests for tablets.', 'keywords': 'offset correction, XP-Pen, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 03899011df4b2bb0f9b3ac57b1044b161a336f31
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 03899011df4b2bb0f9b3ac57b1044b161a336f31
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089174
  Commit Message:
    selftests/hid: tablets: add a couple of XP-PEN tablets

Those tablets don't need special initialization
  Parent Hashes: e14d88d9b8dae40c6f612c6fc74b7d03d12f3c94
  Refs:  but are reporting
the events with the wrong usages:
- tip switch is used when the eraser should be used
- eraser is used instead of the secondary barrel switch

Add tests for those so we don't regress in the future.

Currently we set x/y tilt to 0 to not trigger the bpf program
compensate_coordinates_by_tilt()

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-13-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test cases for XP-PEN tablets in selftests/hid to address event reporting issues.', 'keywords': 'XP-PEN, selftests, tablets', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: e14d88d9b8dae40c6f612c6fc74b7d03d12f3c94
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e14d88d9b8dae40c6f612c6fc74b7d03d12f3c94
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089170
  Commit Message:
    selftests/hid: tablets: reduce the number of pen state

All the *_WITH*BUTTON states were almost identical except for the
button itself.

I need to add a new device with a third button
  Parent Hashes: e906463087cec0a179ddcafe08aeef5899af6b00
  Refs:  and adding a bunch of
states is going to be quite cumbersome.

So convert the `button` parameter of PenState as a boolean

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor the pen button state handling in HID selftests by converting button parameter to a boolean for simplicity.', 'keywords': 'HID,selftests,refactor', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: e906463087cec0a179ddcafe08aeef5899af6b00
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e906463087cec0a179ddcafe08aeef5899af6b00
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089166
  Commit Message:
    selftests/hid: add support for HID-BPF pre-loading before starting a test

few required changes:
- we need to count how many times a udev 'bind' event happens
- we need to tell `udev-hid-bpf` to not automatically attach the
  provided HID-BPF objects
- we need to manually attach the ones from the kernel tree
  Parent Hashes: a7def2e51c667578140d9aa3282533463ed3df91
  Refs:  and wait
  for the second udev 'bind' event to happen

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-11-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for pre-loading HID-BPF in selftests before tests start.', 'keywords': 'HID-BPF, selftests, udev', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: a7def2e51c667578140d9aa3282533463ed3df91
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a7def2e51c667578140d9aa3282533463ed3df91
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089163
  Commit Message:
    selftests/hid: import base_device.py from hid-tools

We need to slightly change base_device.py for supporting HID-BPF
  Parent Hashes: 0cd1465cac52d7d5b4584a29f97bddc5e8bb421f
  Refs: 
so instead of monkey patching

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Import base_device.py from hid-tools and modify it to support HID-BPF.', 'keywords': 'base_device.py,HID-BPF,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 0cd1465cac52d7d5b4584a29f97bddc5e8bb421f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0cd1465cac52d7d5b4584a29f97bddc5e8bb421f
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089159
  Commit Message:
    HID: bpf: add in-tree HID-BPF fix for the Raptor Mach 2

This device is already fixed by "HID: do not assume HAT Switch
logical max < 8"
  Parent Hashes: 9f1bf4c225329d27e85fc1c5b5af9e6ebf4a8ff3
  Refs:  but for people without the fix already

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add HID-BPF fix for Raptor Mach 2 to address compatibility with previous HID fix.', 'keywords': 'HID,BPF,Raptor', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 9f1bf4c225329d27e85fc1c5b5af9e6ebf4a8ff3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9f1bf4c225329d27e85fc1c5b5af9e6ebf4a8ff3
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089156
  Commit Message:
    HID: bpf: add in-tree HID-BPF fix for the Huion Kamvas Pro 19

This tablets gets a lot of things wrong:
- the secondary button is reported through Secondary Tip Switch
- the third button is reported through Invert

Fortunately
  Parent Hashes: 1c046d09c6ba4ff5fb959b2d195cacadb2ae6977
  Refs:  before entering eraser mode

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes HID-BPF issues with incorrect button mapping for Huion Kamvas Pro 19 tablet.', 'keywords': 'HID-BPF, Huion Kamvas, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 1c046d09c6ba4ff5fb959b2d195cacadb2ae6977
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1c046d09c6ba4ff5fb959b2d195cacadb2ae6977
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089152
  Commit Message:
    HID: bpf: add in-tree HID-BPF fix for the XBox Elite 2 over Bluetooth

When using the XBox Wireless Controller Elite 2 over Bluetooth
  Parent Hashes: d9e78973921d215a6453b609a6326dab9dbc5a60
  Refs: 
the device exports the paddle on the back of the device as a single
bitfield value of usage "Assign Selection".

The kernel doesn't process those usages properly and report KEY_UNKNOWN
for it.

SDL doesn't know how to interprete that KEY_UNKNOWN and thus ignores the
paddles.

Given that over USB the kernel uses BTN_TRIGGER_HAPPY[5-8]

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes HID-BPF handling of Xbox Elite 2 paddle usage over Bluetooth in Linux.', 'keywords': 'HID,Bluetooth,Xbox', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: d9e78973921d215a6453b609a6326dab9dbc5a60
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d9e78973921d215a6453b609a6326dab9dbc5a60
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089147
  Commit Message:
    HID: bpf: add in-tree HID-BPF fix for the Wacom ArtPen

This pen is compatible with multiple Wacom tablets
  Parent Hashes: 0bc8f89f40403cfbc3c6e676b0bee240a9349d3f
  Refs:  but we only add support
for the Intuos Pro 2 M

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add HID-BPF support for the Wacom ArtPen compatible with Intuos Pro 2 M tablets.', 'keywords': 'HID, BPF, Wacom', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 0bc8f89f40403cfbc3c6e676b0bee240a9349d3f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0bc8f89f40403cfbc3c6e676b0bee240a9349d3f
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089144
  Commit Message:
    HID: bpf: add in-tree HID-BPF fix for the IOGear Kaliber Gaming MMOmentum mouse

Allows to export more than 5 buttons on this 12 buttons mouse.

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-5-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: 4e6d2a297dd5be26ad409b7a05b20bd033d1c95e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support in HID-BPF for more than 5 buttons on the IOGear Kaliber Gaming MMOmentum mouse.', 'keywords': 'HID-BPF, IOGear, buttons', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 4e6d2a297dd5be26ad409b7a05b20bd033d1c95e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4e6d2a297dd5be26ad409b7a05b20bd033d1c95e
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089140
  Commit Message:
    HID: bpf: add in-tree HID-BPF fix for the HP Elite Presenter Mouse

Duplicate of commit 0db117359e47 ("HID: add quirk for 03f0:464a HP Elite
Presenter Mouse")
  Parent Hashes: e0599675a32cb994a076a4b40d3e42d8353a5bb7
  Refs:  but in a slightly better way.

This time we actually change the application collection

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add in-tree HID-BPF fix for HP Elite Presenter Mouse with improved application collection changes.', 'keywords': 'HID-BPF, HP, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: e0599675a32cb994a076a4b40d3e42d8353a5bb7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e0599675a32cb994a076a4b40d3e42d8353a5bb7
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089137
  Commit Message:
    HID: bpf: add in-tree HID-BPF fix for the XPPen Artist 16

Same problem than the Artist 24: the second button on the pen is treated
like an eraser.
But the problem is even worse this time. There is an actual eraser at
the tail of the pen.

The compensation of the coordinates was done by Martin

Signed-off-by: Martin Sivak <mars@montik.net>
Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-3-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: 04b3e5ab055553e074ea54ef316982b55cdde96b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes the HID-BPF handling for the XPPen Artist 16 to correctly recognize the pen eraser function.', 'keywords': 'HID-BPF,XPPen Artist,eraser', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 04b3e5ab055553e074ea54ef316982b55cdde96b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 04b3e5ab055553e074ea54ef316982b55cdde96b
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089133
  Commit Message:
    HID: bpf: add first in-tree HID-BPF fix for the XPPen Artist 24

This commit adds a fix for XPPen Artist 24 where the second button on
the pen is used as an eraser.

It's a "feature" from Microsoft
  Parent Hashes: 65ad580a14e875c2d8c027cf1a2ca03b849ff843
  Refs:  but it turns out that it's actually
painful for artists. So we ship here a HID-BPF program that turns this
second button into an actual button.

Note that the HID-BPF program is not directly loaded by the kernel itself
but by udev-hid-bpf[0]. But having the sources here allows us to also
integrate tests into tools/testing/selftests/hid to ensure the HID-BPF
program are actually tested.

[0] https://gitlab.freedesktop.org/libevdev/udev-hid-bpf

Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-2-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add HID-BPF fix for XPPen Artist 24 to turn second pen button into a functional button instead of an eraser.', 'keywords': 'HID,BPF,XPPen', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 65ad580a14e875c2d8c027cf1a2ca03b849ff843
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 65ad580a14e875c2d8c027cf1a2ca03b849ff843
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1715089116
  Commit Message:
    HID: do not assume HAT Switch logical max < 8

Turns out that the code can handle a greater range
  Parent Hashes: b912cf042072e12e93faa874265b30cc0aa521b9
  Refs:  but the data stored
can not. This is problematic on the Raptor Mach 2 joystick which
logical max is 239. The kernel interprets it as `-15` and thus ignores
the Hat Switch handling.

Link: https://gitlab.freedesktop.org/libevdev/udev-hid-bpf/-/issues/17
Link: https://lore.kernel.org/r/20240410-bpf_sources-v1-1-a8bf16033ef8@kernel.org
Reviewed-by: Peter Hutterer <peter.hutterer@who-t.net>
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes the handling of HAT Switch logical maximums greater than 8 in the Raptor Mach 2 joystick.', 'keywords': 'HID, HAT Switch, joystick', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 8ecf3c1dab1c675721d3d0255556abe2306fa340
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8ecf3c1dab1c675721d3d0255556abe2306fa340
  Author Name: Christophe Leroy
  Author Email: christophe.leroy@csgroup.eu
  Commit Date: 1715084222
  Commit Message:
    powerpc/bpf/32: Fix failing test_bpf tests

Recent additions in BPF like cpu v4 instructions
  Parent Hashes: be140f1732b523947425aaafbe2e37b41b622d96
  Refs:  test_bpf module
exhibits the following failures:

  test_bpf: #82 ALU_MOVSX | BPF_B jited:1 ret 2 != 1 (0x2 != 0x1)FAIL (1 times)
  test_bpf: #83 ALU_MOVSX | BPF_H jited:1 ret 2 != 1 (0x2 != 0x1)FAIL (1 times)
  test_bpf: #84 ALU64_MOVSX | BPF_B jited:1 ret 2 != 1 (0x2 != 0x1)FAIL (1 times)
  test_bpf: #85 ALU64_MOVSX | BPF_H jited:1 ret 2 != 1 (0x2 != 0x1)FAIL (1 times)
  test_bpf: #86 ALU64_MOVSX | BPF_W jited:1 ret 2 != 1 (0x2 != 0x1)FAIL (1 times)

  test_bpf: #165 ALU_SDIV_X: -6 / 2 = -3 jited:1 ret 2147483645 != -3 (0x7ffffffd != 0xfffffffd)FAIL (1 times)
  test_bpf: #166 ALU_SDIV_K: -6 / 2 = -3 jited:1 ret 2147483645 != -3 (0x7ffffffd != 0xfffffffd)FAIL (1 times)

  test_bpf: #169 ALU_SMOD_X: -7 % 2 = -1 jited:1 ret 1 != -1 (0x1 != 0xffffffff)FAIL (1 times)
  test_bpf: #170 ALU_SMOD_K: -7 % 2 = -1 jited:1 ret 1 != -1 (0x1 != 0xffffffff)FAIL (1 times)

  test_bpf: #172 ALU64_SMOD_K: -7 % 2 = -1 jited:1 ret 1 != -1 (0x1 != 0xffffffff)FAIL (1 times)

  test_bpf: #313 BSWAP 16: 0x0123456789abcdef -> 0xefcd
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 301 PASS
  test_bpf: #314 BSWAP 32: 0x0123456789abcdef -> 0xefcdab89
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 555 PASS
  test_bpf: #315 BSWAP 64: 0x0123456789abcdef -> 0x67452301
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 268 PASS
  test_bpf: #316 BSWAP 64: 0x0123456789abcdef >> 32 -> 0xefcdab89
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 269 PASS
  test_bpf: #317 BSWAP 16: 0xfedcba9876543210 -> 0x1032
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 460 PASS
  test_bpf: #318 BSWAP 32: 0xfedcba9876543210 -> 0x10325476
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 320 PASS
  test_bpf: #319 BSWAP 64: 0xfedcba9876543210 -> 0x98badcfe
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 222 PASS
  test_bpf: #320 BSWAP 64: 0xfedcba9876543210 >> 32 -> 0x10325476
  eBPF filter opcode 00d7 (@2) unsupported
  jited:0 273 PASS

  test_bpf: #344 BPF_LDX_MEMSX | BPF_B
  eBPF filter opcode 0091 (@5) unsupported
  jited:0 432 PASS
  test_bpf: #345 BPF_LDX_MEMSX | BPF_H
  eBPF filter opcode 0089 (@5) unsupported
  jited:0 381 PASS
  test_bpf: #346 BPF_LDX_MEMSX | BPF_W
  eBPF filter opcode 0081 (@5) unsupported
  jited:0 505 PASS

  test_bpf: #490 JMP32_JA: Unconditional jump: if (true) return 1
  eBPF filter opcode 0006 (@1) unsupported
  jited:0 261 PASS

  test_bpf: Summary: 1040 PASSED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes failing test_bpf cases on powerpc architecture related to BPF instructions and kernel tests.', 'keywords': 'test_bpf,bpf,instructions', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 329a6720a3ebbc041983b267981ab2cac102de93
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 329a6720a3ebbc041983b267981ab2cac102de93
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1715040560
  Commit Message:
    Merge branch 'bpf-verifier-range-computation-improvements'

Cupertino Miranda says:

====================
bpf/verifier: range computation improvements

Hi everyone
  Parent Hashes: 41b307ad756e1b7b618bf9d9c1cce3595705ede4 92956786b4e26ea22e5b3c1c86cc71f5c9b3b9d8
  Refs: 

This is what I hope to be the last version. :)

Regards

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve bpf verifier with enhanced range computation methodology.', 'keywords': 'verifier, range, computation', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 92956786b4e26ea22e5b3c1c86cc71f5c9b3b9d8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 92956786b4e26ea22e5b3c1c86cc71f5c9b3b9d8
  Author Name: Cupertino Miranda
  Author Email: cupertino.miranda@oracle.com
  Commit Date: 1715040552
  Commit Message:
    selftests/bpf: MUL range computation tests.

Added a test for bound computation in MUL when non constant
values are used and both registers have bounded ranges.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Andrii Nakryiko <andrii.nakryiko@gmail.com>
Cc: Yonghong Song <yonghong.song@linux.dev>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: David Faust <david.faust@oracle.com>
Cc: Jose Marchesi <jose.marchesi@oracle.com>
Cc: Elena Zannoni <elena.zannoni@oracle.com>
Link: https://lore.kernel.org/r/20240506141849.185293-7-cupertino.miranda@oracle.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 41d047a871062f1a4d1871a1908d380c14e75428
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test case for MUL range computation with non-constant values and bounded registers.', 'keywords': 'test,MUL,range', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 41d047a871062f1a4d1871a1908d380c14e75428
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 41d047a871062f1a4d1871a1908d380c14e75428
  Author Name: Cupertino Miranda
  Author Email: cupertino.miranda@oracle.com
  Commit Date: 1715040552
  Commit Message:
    bpf/verifier: relax MUL range computation check

MUL instruction required that src_reg would be a known value (i.e.
src_reg would be a const value). The condition in this case can be
relaxed
  Parent Hashes: 5ec9a7d13f49b9c1c5ba854244d1f2ba414cf139
  Refs:  since the range computation algorithm used in current code
already supports a proper range computation for any valid range value on
its operands.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Andrii Nakryiko <andrii.nakryiko@gmail.com>
Cc: Yonghong Song <yonghong.song@linux.dev>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: David Faust <david.faust@oracle.com>
Cc: Jose Marchesi <jose.marchesi@oracle.com>
Cc: Elena Zannoni <elena.zannoni@oracle.com>
Link: https://lore.kernel.org/r/20240506141849.185293-6-cupertino.miranda@oracle.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit relaxes the MUL range computation check in the eBPF verifier.', 'keywords': 'MUL,relax,verifier', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5ec9a7d13f49b9c1c5ba854244d1f2ba414cf139
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5ec9a7d13f49b9c1c5ba854244d1f2ba414cf139
  Author Name: Cupertino Miranda
  Author Email: cupertino.miranda@oracle.com
  Commit Date: 1715040551
  Commit Message:
    selftests/bpf: XOR and OR range computation tests.

Added a test for bound computation in XOR and OR when non constant
values are used and both registers have bounded ranges.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Cc: Yonghong Song <yonghong.song@linux.dev>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: David Faust <david.faust@oracle.com>
Cc: Jose Marchesi <jose.marchesi@oracle.com>
Cc: Elena Zannoni <elena.zannoni@oracle.com>
Cc: Andrii Nakryiko <andrii.nakryiko@gmail.com>
Link: https://lore.kernel.org/r/20240506141849.185293-5-cupertino.miranda@oracle.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 138cc42c05d11fd5ee82ee1606d2c9823373a926
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added XOR and OR range computation tests for non-constant values in eBPF selftests.', 'keywords': 'XOR, OR, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 138cc42c05d11fd5ee82ee1606d2c9823373a926
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 138cc42c05d11fd5ee82ee1606d2c9823373a926
  Author Name: Cupertino Miranda
  Author Email: cupertino.miranda@oracle.com
  Commit Date: 1715040551
  Commit Message:
    bpf/verifier: improve XOR and OR range computation

Range for XOR and OR operators would not be attempted unless src_reg
would resolve to a single value
  Parent Hashes: 0922c78f592c60e5a8fe6ab968479def124d4ff3
  Refs:  i.e. a known constant value.
This condition is unnecessary

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improves range computation logic for XOR and OR operations in BPF verifier.', 'keywords': 'verifier,XOR,OR', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0922c78f592c60e5a8fe6ab968479def124d4ff3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0922c78f592c60e5a8fe6ab968479def124d4ff3
  Author Name: Cupertino Miranda
  Author Email: cupertino.miranda@oracle.com
  Commit Date: 1715040551
  Commit Message:
    bpf/verifier: refactor checks for range computation

Split range computation checks in its own function
  Parent Hashes: d786957ebd3fb4cfd9147dbcccd1e8f3871b45ce
  Refs:  isolating pessimitic
range set for dst_reg and failing return to a single point.

Signed-off-by: Cupertino Miranda <cupertino.miranda@oracle.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Cc: Yonghong Song <yonghong.song@linux.dev>
Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Cc: David Faust <david.faust@oracle.com>
Cc: Jose Marchesi <jose.marchesi@oracle.com>
Cc: Elena Zannoni <elena.zannoni@oracle.com>
Cc: Andrii Nakryiko <andrii.nakryiko@gmail.com>

bpf/verifier: improve code after range computation recent changes.
Link: https://lore.kernel.org/r/20240506141849.185293-3-cupertino.miranda@oracle.com

Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor range computation checks into a separate function in the eBPF verifier.', 'keywords': 'refactor, range computation, verifier', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d786957ebd3fb4cfd9147dbcccd1e8f3871b45ce
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d786957ebd3fb4cfd9147dbcccd1e8f3871b45ce
  Author Name: Cupertino Miranda
  Author Email: cupertino.miranda@oracle.com
  Commit Date: 1715040551
  Commit Message:
    bpf/verifier: replace calls to mark_reg_unknown.

In order to further simplify the code in adjust_scalar_min_max_vals all
the calls to mark_reg_unknown are replaced by __mark_reg_unknown.

static void mark_reg_unknown(struct bpf_verifier_env *env
  Parent Hashes: 41b307ad756e1b7b618bf9d9c1cce3595705ede4
  Refs: 
  			     struct bpf_reg_state *regs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit replaces calls to mark_reg_unknown with __mark_reg_unknown in the eBPF verifier for code simplification.', 'keywords': 'mark_reg_unknown, bpf, verifier', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 41b307ad756e1b7b618bf9d9c1cce3595705ede4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 41b307ad756e1b7b618bf9d9c1cce3595705ede4
  Author Name: John Hubbard
  Author Email: jhubbard@nvidia.com
  Commit Date: 1715031576
  Commit Message:
    bpftool
  Parent Hashes: e549b39a0ab8880d7ae6c6495b00fc1cb8f36174
  Refs:  selftests/hid/bpf: Fix 29 clang warnings

When building either tools/bpf/bpftool

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes 29 clang warnings in selftests/hid/bpf for bpftool.', 'keywords': 'clang,warnings,bpftool', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: e549b39a0ab8880d7ae6c6495b00fc1cb8f36174
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e549b39a0ab8880d7ae6c6495b00fc1cb8f36174
  Author Name: Michal Schmidt
  Author Email: mschmidt@redhat.com
  Commit Date: 1715028142
  Commit Message:
    selftests/bpf: Fix pointer arithmetic in test_xdp_do_redirect

Cast operation has a higher precedence than addition. The code here
wants to zero the 2nd half of the 64-bit metadata
  Parent Hashes: 8e6d9ae2e09f1f6ba65614a5e5c5a2a2e335dcba
  Refs:  but due to a pointer
arithmetic mistake

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes pointer arithmetic mistake in test_xdp_do_redirect for selftests in BPF.', 'keywords': 'pointer, arithmetic, selftests', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 8e6d9ae2e09f1f6ba65614a5e5c5a2a2e335dcba
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8e6d9ae2e09f1f6ba65614a5e5c5a2a2e335dcba
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1715028024
  Commit Message:
    selftests/bpf: Use bpf_tracing.h instead of bpf_tcp_helpers.h

The bpf programs that this patch changes require the BPF_PROG macro.
The BPF_PROG macro is defined in the libbpf's bpf_tracing.h.
Some tests include bpf_tcp_helpers.h which includes bpf_tracing.h.
They don't need other things from bpf_tcp_helpers.h other than
bpf_tracing.h. This patch simplifies it by directly including
the bpf_tracing.h.

The motivation of this unnecessary code churn is to retire
the bpf_tcp_helpers.h by directly using vmlinux.h. Right now
  Parent Hashes: a9e7715ce8b3a62a2133e47e87107632a26ad1e2
  Refs: 
the main usage of the bpf_tcp_helpers.h is the partial kernel
socket definitions (e.g. socket

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit simplifies code by directly including bpf_tracing.h instead of bpf_tcp_helpers.h in selftests/bpf.', 'keywords': 'bpf_tracing.h,selftests,bpf_tcp_helpers.h', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 61688a82e047a4166436bf2665716cc070572ffa
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 61688a82e047a4166436bf2665716cc070572ffa
  Author Name: Hari Bathini
  Author Email: hbathini@linux.ibm.com
  Commit Date: 1714997118
  Commit Message:
    powerpc/bpf: enable kfunc call

Currently
  Parent Hashes: 2ecfe59cd7de1f202e9af2516a61fbbf93d0bd4d
  Refs:  bpf jit code on powerpc assumes all the bpf functions and
helpers to be part of core kernel text. This is false for kfunc case

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable kfunc calls in powerpc BPF JIT by addressing assumptions about BPF function locations.', 'keywords': 'powerpc, kfunc, JIT', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2ecfe59cd7de1f202e9af2516a61fbbf93d0bd4d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2ecfe59cd7de1f202e9af2516a61fbbf93d0bd4d
  Author Name: Hari Bathini
  Author Email: hbathini@linux.ibm.com
  Commit Date: 1714997118
  Commit Message:
    powerpc/64/bpf: fix tail calls for PCREL addressing

With PCREL addressing
  Parent Hashes: fae573060c8da4d84a2551c6753d272abfda8ddc
  Refs:  there is no kernel TOC. So

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes tail call handling for PCREL addressing mode on powerpc/64 architecture.', 'keywords': 'tail calls, PCREL, powerpc', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a9e7715ce8b3a62a2133e47e87107632a26ad1e2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a9e7715ce8b3a62a2133e47e87107632a26ad1e2
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1714715938
  Commit Message:
    libbpf: Avoid casts from pointers to enums in bpf_tracing.h

[Differences from V1:
  - Do not introduce a global typedef
  Parent Hashes: cf9bea94f6b2934d409511c05337010b137316a3
  Refs:  as this is a public header.
  - Keep the void* casts in BPF_KPROBE_READ_RET_IP and
    BPF_KRETPROBE_READ_RET_IP

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit avoids pointer-to-enum casts in the libbpf bpf_tracing.h code.', 'keywords': 'libbpf, enums, casts', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: cf9bea94f6b2934d409511c05337010b137316a3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cf9bea94f6b2934d409511c05337010b137316a3
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1714715242
  Commit Message:
    libbpf: Fix bpf_ksym_exists() in GCC

The macro bpf_ksym_exists is defined in bpf_helpers.h as:

  #define bpf_ksym_exists(sym) ({								\
  	_Static_assert(!__builtin_constant_p(!!sym)
  Parent Hashes: 087d757fb4736ecbd3e42eebf9b39d5225d4a2ee
  Refs:  #sym " should be marked as __weak");	\
  	!!sym;											\
  })

The purpose of the macro is to determine whether a given symbol has
been defined

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix issue with bpf_ksym_exists macro in GCC within the libbpf library.', 'keywords': 'libbpf,GCC,macro', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 087d757fb4736ecbd3e42eebf9b39d5225d4a2ee
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 087d757fb4736ecbd3e42eebf9b39d5225d4a2ee
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1714693263
  Commit Message:
    libbpf: fix ring_buffer__consume_n() return result logic

Add INT_MAX check to ring_buffer__consume_n(). We do the similar check
to handle int return result of all these ring buffer APIs in other APIs
and ring_buffer__consume_n() is missing one. This patch fixes this
omission.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Link: https://lore.kernel.org/r/20240430201952.888293-2-andrii@kernel.org
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 00f0e08f23fc007f4a5a71cd7e37fcdb15af0c1b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Fix logic in libbpf's ring_buffer__consume_n() to properly handle INT_MAX case.", 'keywords': 'libbpf,int,ring_buffer', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 00f0e08f23fc007f4a5a71cd7e37fcdb15af0c1b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 00f0e08f23fc007f4a5a71cd7e37fcdb15af0c1b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1714693262
  Commit Message:
    libbpf: fix potential overflow in ring__consume_n()

ringbuf_process_ring() return int64_t
  Parent Hashes: 29f38ca3e5ca5cacc33291f22c4848c6907b9d2b
  Refs:  while ring__consume_n() assigns
it to int. It's highly unlikely

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix potential overflow in ring__consume_n function in libbpf by adjusting data type assignment.', 'keywords': 'potential overflow, ring__consume_n, libbpf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 29f38ca3e5ca5cacc33291f22c4848c6907b9d2b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 29f38ca3e5ca5cacc33291f22c4848c6907b9d2b
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1714692730
  Commit Message:
    Merge branch 'Add new args into tcp_congestion_ops' cong_control'

Miao Xu says:

====================
This patchset attempts to add two new arguments into the hookpoint
cong_control in tcp_congestion_ops. The new arguments are inherited
from the caller tcp_cong_control and can be used by any bpf cc prog
that implements its own logic inside this hookpoint.

Please review. Thanks a lot!

Changelog
=====
v2->v3:
  - Fixed the broken selftest caused by the new arguments.
  - Renamed the selftest file name and bpf prog name.

v1->v2:
  - Split the patchset into 3 separate patches.
  - Added highlights in the selftest prog.
  - Removed the dependency on bpf_tcp_helpers.h.
====================

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: f8c423d1ca4f4f4224bb6ca486478b7f51a91701 96c3490d6423b7f24d356e24a61c24de69f3de77
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge to add new arguments to tcp_congestion_ops hook and fix related selftests.', 'keywords': 'tcp, congestion-control, hookpoint', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 96c3490d6423b7f24d356e24a61c24de69f3de77
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 96c3490d6423b7f24d356e24a61c24de69f3de77
  Author Name: Miao Xu
  Author Email: miaxu@meta.com
  Commit Date: 1714692724
  Commit Message:
    selftests/bpf: Add test for the use of new args in cong_control

This patch adds a selftest to show the usage of the new arguments in
cong_control. For simplicity's sake
  Parent Hashes: 0325cbd21e3c26eff88bc7da303ffb46b4f5d294
  Refs:  the testing example reuses cubic's
kernel functions.

Signed-off-by: Miao Xu <miaxu@meta.com>
Link: https://lore.kernel.org/r/20240502042318.801932-4-miaxu@meta.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest for demonstrating new arguments usage in cong_control.', 'keywords': 'selftest,new arguments,cong control', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 0325cbd21e3c26eff88bc7da303ffb46b4f5d294
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0325cbd21e3c26eff88bc7da303ffb46b4f5d294
  Author Name: Miao Xu
  Author Email: miaxu@meta.com
  Commit Date: 1714692416
  Commit Message:
    bpf: tcp: Allow to write tp->snd_cwnd_stamp in bpf_tcp_ca

This patch allows the write of tp->snd_cwnd_stamp in a bpf tcp
ca program. An use case of writing this field is to keep track
of the time whenever tp->snd_cwnd is raised or reduced inside
the `cong_control` callback.

Reviewed-by: Eric Dumazet <edumazet@google.com>
Signed-off-by: Miao Xu <miaxu@meta.com>
Link: https://lore.kernel.org/r/20240502042318.801932-3-miaxu@meta.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 57bfc7605ca5b102ba336779ae9adbc5bbba1d96
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Allows writing tp->snd_cwnd_stamp in BPF TCP congestion control programs.', 'keywords': 'bpf,tcp,snd_cwnd_stamp', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: f8c423d1ca4f4f4224bb6ca486478b7f51a91701
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f8c423d1ca4f4f4224bb6ca486478b7f51a91701
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1714688817
  Commit Message:
    Merge branch 'selftests/bpf: Add sockaddr tests for kernel networking'

Jordan Rife says:

====================
This patch series adds test coverage for BPF sockaddr hooks and their
interactions with kernel socket functions (i.e. kernel_bind()
  Parent Hashes: 08e90da6872a9f9f63ca2911bbce6883b6fc1a19 e0c8a7e7526ff1526d4dcc7d71aad4e7fe2ec767
  Refs: 
kernel_connect()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds test coverage for BPF sockaddr hooks testing kernel socket functions like kernel_bind and kernel_connect.', 'keywords': 'test coverage,sockaddr hooks,kernel functions', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: e0c8a7e7526ff1526d4dcc7d71aad4e7fe2ec767
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e0c8a7e7526ff1526d4dcc7d71aad4e7fe2ec767
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1714688611
  Commit Message:
    selftests/bpf: Add kernel socket operation tests

This patch creates two sets of sock_ops that call out to the SYSCALL
hooks in the sock_addr_kern BPF program and uses them to construct
test cases for the range of supported operations (kernel_connect()
  Parent Hashes: 524e05ac4e14bb50b4f442e1fe88540abc9b72fd
  Refs: 
kernel_bind()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added kernel socket operation tests in selftests for BPF programs involving syscall hooks.', 'keywords': 'socket tests syscall', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 524e05ac4e14bb50b4f442e1fe88540abc9b72fd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 524e05ac4e14bb50b4f442e1fe88540abc9b72fd
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1714688611
  Commit Message:
    selftests/bpf: Make sock configurable for each test case

In order to reuse the same test code for both socket system calls (e.g.
connect()
  Parent Hashes: 8a9d22b8aeb2182cfe83991f11a88b3351084d3e
  Refs:  bind()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit makes socket configurations customizable in each eBPF selftest case.', 'keywords': 'selftests,bpf,socket', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 8a9d22b8aeb2182cfe83991f11a88b3351084d3e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8a9d22b8aeb2182cfe83991f11a88b3351084d3e
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1714688605
  Commit Message:
    selftests/bpf: Move IPv4 and IPv6 sockaddr test cases

This patch lays the groundwork for testing IPv4 and IPv6 sockaddr hooks
and their interaction with both socket syscalls and kernel functions
(e.g. kernel_connect
  Parent Hashes: 15b6671efa508ff9c1fb995452913f8de85db73b
  Refs:  kernel_bind

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit reorganizes IPv4 and IPv6 sockaddr test cases to facilitate testing hooks with socket syscalls and kernel functions.', 'keywords': 'IPv4, IPv6, sockaddr', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 15b6671efa508ff9c1fb995452913f8de85db73b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 15b6671efa508ff9c1fb995452913f8de85db73b
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1714676962
  Commit Message:
    selftests/bpf: Implement BPF programs for kernel socket operations

This patch lays out a set of SYSCALL programs that can be used to invoke
the socket operation kfuncs in bpf_testmod
  Parent Hashes: bbb1cfdd02249dc8cf878e86a523b28814ed36c0
  Refs:  allowing a test program to
manipulate kernel socket operations from userspace.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240429214529.2644801-4-jrife@google.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit implements BPF programs for testing kernel socket operations in selftests.', 'keywords': 'BPF, socket, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: bbb1cfdd02249dc8cf878e86a523b28814ed36c0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bbb1cfdd02249dc8cf878e86a523b28814ed36c0
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1714676962
  Commit Message:
    selftests/bpf: Implement socket kfuncs for bpf_testmod

This patch adds a set of kfuncs to bpf_testmod that can be used to
manipulate a socket from kernel space.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240429214529.2644801-3-jrife@google.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 8e667a065daa6f4c01eadc20f3815f7bf13255bc
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add kfuncs to bpf_testmod for manipulating sockets from kernel space.', 'keywords': 'kfuncs,socket,bpf_testmod', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 8e667a065daa6f4c01eadc20f3815f7bf13255bc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8e667a065daa6f4c01eadc20f3815f7bf13255bc
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1714676962
  Commit Message:
    selftests/bpf: Fix bind program for big endian systems

Without this fix
  Parent Hashes: 08e90da6872a9f9f63ca2911bbce6883b6fc1a19
  Refs:  the bind4 and bind6 programs will reject bind attempts
on big endian systems. This patch ensures that CI tests pass for the
s390x architecture.

Signed-off-by: Jordan Rife <jrife@google.com>
Link: https://lore.kernel.org/r/20240429214529.2644801-2-jrife@google.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes the bind program to work on big endian systems for selftests in s390x architecture.', 'keywords': 'bind program, big endian, selftests', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e958da0ddbe831197a0023251880a4a09d5ba268
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e958da0ddbe831197a0023251880a4a09d5ba268
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1714676785
  Commit Message:
    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Cross-merge networking fixes after downstream PR.

Conflicts:

include/linux/filter.h
kernel/bpf/core.c
  66e13b615a0c ("bpf: verifier: prevent userspace memory access")
  d503a04f8bc0 ("bpf: Add support for certain atomics in bpf_arena to x86 JIT")
https://lore.kernel.org/all/20240429114939.210328b0@canb.auug.org.au/

No adjacent changes.

Signed-off-by: Jakub Kicinski <kuba@kernel.org>

  Parent Hashes: dcc61472534e48a200262fd297ab21f8dd94d6cc 545c494465d24b10a4370545ba213c0916f70b95
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Cross-merge of network-related fixes into main branch with handling of conflicts.', 'keywords': 'cross-merge, networking, conflicts', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 08e90da6872a9f9f63ca2911bbce6883b6fc1a19
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 08e90da6872a9f9f63ca2911bbce6883b6fc1a19
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1714666921
  Commit Message:
    bpf: Missing trailing slash in tools/testing/selftests/bpf/Makefile

tools/lib/bpf/Makefile assumes that the patch in OUTPUT is a directory
and that it includes a trailing slash.  This seems to be a common
expectation for OUTPUT among all the Makefiles.

In the rule for runqslower in tools/testing/selftests/bpf/Makefile the
variable BPFTOOL_OUTPUT is set to a directory name that lacks a
trailing slash.  This results in a malformed BPF_HELPER_DEFS being
defined in lib/bpf/Makefile.

This problem becomes evident when a file like
tools/lib/bpf/bpf_tracing.h gets updated.

This patch fixes the problem by adding the missing slash in the value
for BPFTOOL_OUTPUT in the $(OUTPUT)/runqslower rule.

Regtested by running selftests in bpf-next master and building
samples/bpf programs.

Signed-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240502140831.23915-1-jose.marchesi@oracle.com

  Parent Hashes: 7c13ef16e87ac2e44d16c0468b1191bceb06f95c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added missing trailing slash in BPFTOOL_OUTPUT to fix malformed BPF_HELPER_DEFS in Makefile.', 'keywords': 'Makefile, trailing slash, BPFTOOL_OUTPUT', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 7c13ef16e87ac2e44d16c0468b1191bceb06f95c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7c13ef16e87ac2e44d16c0468b1191bceb06f95c
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1714665384
  Commit Message:
    libbpf: Fix error message in attach_kprobe_multi

We just failed to retrieve pattern
  Parent Hashes: 5a3941f84b8f91bb1e111499d803b32188d33e5d
  Refs:  so we need to print spec instead.

Fixes: ddc6b04989eb ("libbpf: Add bpf_program__attach_kprobe_multi_opts function")
Reported-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240502075541.1425761-2-jolsa@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes an error message in the libbpf function for attaching kprobe multiple options.', 'keywords': 'libbpf,error message,kprobe', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 5a3941f84b8f91bb1e111499d803b32188d33e5d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5a3941f84b8f91bb1e111499d803b32188d33e5d
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1714665383
  Commit Message:
    libbpf: Fix error message in attach_kprobe_session

We just failed to retrieve pattern
  Parent Hashes: ac2f438c2a85acd07e0ac7dc2f69d45bda1bb498
  Refs:  so we need to print spec instead.

Fixes: 2ca178f02b2f ("libbpf: Add support for kprobe session attach")
Reported-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240502075541.1425761-1-jolsa@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes the error message in libbpf during kprobe session attachment.', 'keywords': 'libbpf,error message,kprobe', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 545c494465d24b10a4370545ba213c0916f70b95
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 545c494465d24b10a4370545ba213c0916f70b95
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1714665107
  Commit Message:
    Merge tag 'net-6.9-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 "Including fixes from bpf.

  Relatively calm week
  Parent Hashes: 0106679839f7c69632b3b9833c3268c316c0a9fc 78cfe547607a83de60cd25304fa2422777634712
  Refs:  likely due to public holiday in most places. No
  known outstanding regressions.

  Current release - regressions:

   - rxrpc: fix wrong alignmask in __page_frag_alloc_align()

   - eth: e1000e: change usleep_range to udelay in PHY mdic access

  Previous releases - regressions:

   - gro: fix udp bad offset in socket lookup

   - bpf: fix incorrect runtime stat for arm64

   - tipc: fix UAF in error path

   - netfs: fix a potential infinite loop in extract_user_to_sg()

   - eth: ice: ensure the copied buf is NUL terminated

   - eth: qeth: fix kernel panic after setting hsuid

  Previous releases - always broken:

   - bpf:
       - verifier: prevent userspace memory access
       - xdp: use flags field to disambiguate broadcast redirect

   - bridge: fix multicast-to-unicast with fraglist GSO

   - mptcp: ensure snd_nxt is properly initialized on connect

   - nsh: fix outer header access in nsh_gso_segment().

   - eth: bcmgenet: fix racing registers access

   - eth: vxlan: fix stats counters.

  Misc:

   - a bunch of MAINTAINERS file updates"

* tag 'net-6.9-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (45 commits)
  MAINTAINERS: mark MYRICOM MYRI-10G as Orphan
  MAINTAINERS: remove Ariel Elior
  net: gro: add flush check in udp_gro_receive_segment
  net: gro: fix udp bad offset in socket lookup by adding {inner_}network_offset to napi_gro_cb
  ipv4: Fix uninit-value access in __ip_make_skb()
  s390/qeth: Fix kernel panic after setting hsuid
  vxlan: Pull inner IP header in vxlan_rcv().
  tipc: fix a possible memleak in tipc_buf_append
  tipc: fix UAF in error path
  rxrpc: Clients must accept conn from any address
  net: core: reject skb_copy(_expand) for fraglist GSO skbs
  net: bridge: fix multicast-to-unicast with fraglist GSO
  mptcp: ensure snd_nxt is properly initialized on connect
  e1000e: change usleep_range to udelay in PHY mdic access
  net: dsa: mv88e6xxx: Fix number of databases for 88E6141 / 88E6341
  cxgb4: Properly lock TX queue for the selftest.
  rxrpc: Fix using alignmask being zero for __page_frag_alloc_align()
  vxlan: Add missing VNI filter counter update in arp_reduce().
  vxlan: Fix racy device stats updates.
  net: qede: use return from qede_parse_actions()
  ...


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges networking fixes, including BPF-related issues and various other network component corrections.', 'keywords': 'networking,fixed,BPF', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ac2f438c2a85acd07e0ac7dc2f69d45bda1bb498
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ac2f438c2a85acd07e0ac7dc2f69d45bda1bb498
  Author Name: Vadim Fedorenko
  Author Email: vadfed@meta.com
  Commit Date: 1714595546
  Commit Message:
    bpf: crypto: fix build when CONFIG_CRYPTO=m

Crypto subsytem can be build as a module. In this case we still have to
build BPF crypto framework otherwise the build will fail.

Fixes: 3e1c6f35409f ("bpf: make common crypto API for TC/XDP programs")
Reported-by: kernel test robot <lkp@intel.com>
Closes: https://lore.kernel.org/oe-kbuild-all/202405011634.4JK40epY-lkp@intel.com/
Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Link: https://lore.kernel.org/r/20240501170130.1682309-1-vadfed@meta.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 0737df6de94661ae55fd3343ce9abec32c687e62
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix build issue in BPF crypto framework when crypto subsystem is built as a module.', 'keywords': 'build, crypto, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tc/netfilter like programs', 'xdp like programs']}
--------------------
--------------------
Processing Commit ID: 0737df6de94661ae55fd3343ce9abec32c687e62
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0737df6de94661ae55fd3343ce9abec32c687e62
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1714583844
  Commit Message:
    libbpf: better fix for handling nulled-out struct_ops program

Previous attempt to fix the handling of nulled-out (from skeleton)
struct_ops program is working well only if struct_ops program is defined
as non-autoloaded by default (i.e.
  Parent Hashes: d913aaa990b6024ce815b66e6ce64d88ba2cd0eb
  Refs:  has SEC("?struct_ops") annotation

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes handling of nulled-out struct_ops programs in libbpf for non-autoloaded by default cases.', 'keywords': 'libbpf, struct_ops, autoloaded', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d913aaa990b6024ce815b66e6ce64d88ba2cd0eb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d913aaa990b6024ce815b66e6ce64d88ba2cd0eb
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1714582428
  Commit Message:
    Merge branch 'libbpf-support-module-function-syntax-for-tracing-programs'

Viktor Malik says:

====================
libbpf: support "module:function" syntax for tracing programs

In some situations
  Parent Hashes: 9a1a2cb5a0e3531d68a2616663ddce49df85dfff 960635887c967338fd567def3e7905a294f5002b
  Refs:  it is useful to explicitly specify a kernel module
to search for a tracing program target (e.g. when a function of the same
name exists in multiple modules or in vmlinux).

This change enables that by allowing the "module:function" syntax for
the find_kernel_btf_id function. Thanks to this

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds support for "module:function" syntax in libbpf for tracing programs.', 'keywords': 'libbpf, module:function, tracing', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 960635887c967338fd567def3e7905a294f5002b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 960635887c967338fd567def3e7905a294f5002b
  Author Name: Viktor Malik
  Author Email: vmalik@redhat.com
  Commit Date: 1714582428
  Commit Message:
    selftests/bpf: add tests for the "module: Function" syntax

The previous patch added support for the "module:function" syntax for
tracing programs. This adds tests for explicitly specifying the module
name via the SEC macro and via the bpf_program__set_attach_target call.

Signed-off-by: Viktor Malik <vmalik@redhat.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/8a076168ed847f7c8a6c25715737b1fea84e38be.1714469650.git.vmalik@redhat.com

  Parent Hashes: 8f8a024272f3e335854515b41638bdf89c6d3146
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for module:function syntax in tracing programs using SEC macro and bpf_program__set_attach_target.', 'keywords': 'selftests,module,function', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 8f8a024272f3e335854515b41638bdf89c6d3146
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8f8a024272f3e335854515b41638bdf89c6d3146
  Author Name: Viktor Malik
  Author Email: vmalik@redhat.com
  Commit Date: 1714582427
  Commit Message:
    libbpf: support "module: Function" syntax for tracing programs

In some situations
  Parent Hashes: 9a1a2cb5a0e3531d68a2616663ddce49df85dfff
  Refs:  it is useful to explicitly specify a kernel module
to search for a tracing program target (e.g. when a function of the same
name exists in multiple modules or in vmlinux).

This patch enables that by allowing the "module:function" syntax for the
find_kernel_btf_id function. Thanks to this

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit adds support for specifying a module for tracing programs using 'module:function' syntax in libbpf.", 'keywords': 'libbpf, tracing programs, module function', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e03c05ac9813410d15c9c39ccf02c84efe563533
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e03c05ac9813410d15c9c39ccf02c84efe563533
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1714573128
  Commit Message:
    rethook: honor CONFIG_FTRACE_VALIDATE_RCU_IS_WATCHING in rethook_try_get()

Take into account CONFIG_FTRACE_VALIDATE_RCU_IS_WATCHING when validating
that RCU is watching when trying to setup rethooko on a function entry.

One notable exception when we force rcu_is_watching() check is
CONFIG_KPROBE_EVENTS_ON_NOTRACE=y case
  Parent Hashes: b0e28a4b5becea84ae6fca5cbd8a6b80a134e223
  Refs:  in which case kretprobes will use
old-style int3-based workflow instead of relying on ftrace

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates rethook to honor CONFIG_FTRACE_VALIDATE_RCU_IS_WATCHING during function entry validation.', 'keywords': 'rethook, ftrace, RCU', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: b0e28a4b5becea84ae6fca5cbd8a6b80a134e223
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b0e28a4b5becea84ae6fca5cbd8a6b80a134e223
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1714573128
  Commit Message:
    ftrace: make extra rcu_is_watching() validation check optional

Introduce CONFIG_FTRACE_VALIDATE_RCU_IS_WATCHING config option to
control whether ftrace low-level code performs additional
rcu_is_watching()-based validation logic in an attempt to catch noinstr
violations.

This check is expected to never be true and is mostly useful for
low-level validation of ftrace subsystem invariants. For most users it
should probably be kept disabled to eliminate unnecessary runtime
overhead.

This improves BPF multi-kretprobe (relying on ftrace and rethook
infrastructure) runtime throughput by 2%
  Parent Hashes: 0dc715295d4143d1659879f7f50ad4e9a6f6a99c
  Refs:  according to BPF benchmarks ([0]).

  [0] https://lore.kernel.org/bpf/CAEf4BzauQ2WKMjZdc9s0rBWa01BYbgwHN6aNDXQSHYia47pQ-w@mail.gmail.com/

Link: https://lore.kernel.org/all/20240418190909.704286-1-andrii@kernel.org/

Cc: Steven Rostedt <rostedt@goodmis.org>
Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Paul E. McKenney <paulmck@kernel.org>
Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce optional CONFIG_FTRACE_VALIDATE_RCU_IS_WATCHING for ftrace rcu_is_watching validation to improve BPF multi-kretprobe performance by 2%.', 'keywords': 'ftrace, rcu_is_watching, BPF', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 0dc715295d4143d1659879f7f50ad4e9a6f6a99c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0dc715295d4143d1659879f7f50ad4e9a6f6a99c
  Author Name: Jonathan Haslam
  Author Email: jonathan.haslam@gmail.com
  Commit Date: 1714573127
  Commit Message:
    uprobes: reduce contention on uprobes_tree access

Active uprobes are stored in an RB tree and accesses to this tree are
dominated by read operations. Currently these accesses are serialized by
a spinlock but this leads to enormous contention when large numbers of
threads are executing active probes.

This patch converts the spinlock used to serialize access to the
uprobes_tree RB tree into a reader-writer spinlock. This lock type
aligns naturally with the overwhelmingly read-only nature of the tree
usage here. Although the addition of reader-writer spinlocks are
discouraged [0]
  Parent Hashes: 5120d167e21c674afd0630c65e7f6a00fa0667f1
  Refs:  this fix is proposed as an interim solution while an
RCU based approach is implemented (that work is in a nascent form). This
fix also has the benefit of being trivial

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Convert spinlock on uprobes_tree to reader-writer spinlock to reduce contention for read-heavy operations.', 'keywords': 'uprobes, contention, spinlock', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 5120d167e21c674afd0630c65e7f6a00fa0667f1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5120d167e21c674afd0630c65e7f6a00fa0667f1
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1714573127
  Commit Message:
    rethook: Remove warning messages printed for finding return address of a frame.

The function rethook_find_ret_addr() prints a warning message and returns 0
when the target task is running and is not the "current" task in order to
prevent the incorrect return address
  Parent Hashes: 73142cab3af1b99157837297f437b306d7a70bff
  Refs:  although it still may return an
incorrect address.

However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes warning messages in rethook for finding the return address of a frame when the target task is not the current task.', 'keywords': 'rethook, warning, return address', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: cdf355cc60e388d992bdd205b8ee70dc4d533461
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cdf355cc60e388d992bdd205b8ee70dc4d533461
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1714573126
  Commit Message:
    uprobes: add speculative lockless system-wide uprobe filter check

It's very common with BPF-based uprobe/uretprobe use cases to have
a system-wide (not PID specific) probes used. In this case uprobe's
trace_uprobe_filter->nr_systemwide counter is bumped at registration
time
  Parent Hashes: 1b8f85defbc82e2eb8f27c5f6060ea507ad4d5a3
  Refs:  and actual filtering is short circuited at the time when
uprobe/uretprobe is triggered.

This is a great optimization

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces speculative lockless system-wide filtering for BPF-based uprobes for performance optimization.', 'keywords': 'uprobes, system-wide, optimization', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 1b8f85defbc82e2eb8f27c5f6060ea507ad4d5a3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1b8f85defbc82e2eb8f27c5f6060ea507ad4d5a3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1714573126
  Commit Message:
    uprobes: prepare uprobe args buffer lazily

uprobe_cpu_buffer and corresponding logic to store uprobe args into it
are used for uprobes/uretprobes that are created through tracefs or
perf events.

BPF is yet another user of uprobe/uretprobe infrastructure
  Parent Hashes: 3eaea21b4d27cff0017c20549aeb53034c58fc23
  Refs:  but doesn't
need uprobe_cpu_buffer and associated data. For BPF-only use cases this
buffer handling and preparation is a pure overhead. At the same time

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Lazily prepare uprobe args buffer to optimize BPF use cases.', 'keywords': 'uprobe,args,BPF', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 02b670c1f88e78f42a6c5aee155c7b26960ca054
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 02b670c1f88e78f42a6c5aee155c7b26960ca054
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1714549303
  Commit Message:
    x86/mm: Remove broken vsyscall emulation code from the page fault code

The syzbot-reported stack trace from hell in this discussion thread
actually has three nested page faults:

  https://lore.kernel.org/r/000000000000d5f4fc0616e816d4@google.com

... and I think that's actually the important thing here:

 - the first page fault is from user space
  Parent Hashes: 720a22fd6c1cdadf691281909950c0cbc5cdf17e
  Refs:  and triggers the vsyscall
   emulation.

 - the second page fault is from __do_sys_gettimeofday()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes broken vsyscall emulation code from x86 page fault handling.', 'keywords': 'vsyscall, emulation, x86', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 8405e6980f21e2b75f232e970edd76bc50cf1491
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8405e6980f21e2b75f232e970edd76bc50cf1491
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1714518090
  Commit Message:
    selftests/bpf: Drop start_server_proto helper

Protocol can be set by __start_server() helper directly now
  Parent Hashes: 044032ee6c4e786746058aaf5527be13e831cc5c
  Refs:  this makes
the heler start_server_proto() useless.

This patch drops it

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit removes the now redundant start_server_proto helper in bpf selftests.', 'keywords': 'remove,redundant,selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 044032ee6c4e786746058aaf5527be13e831cc5c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 044032ee6c4e786746058aaf5527be13e831cc5c
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1714518090
  Commit Message:
    selftests/bpf: Make start_mptcp_server static

start_mptcp_server() shouldn't be a public helper
  Parent Hashes: 95b88500b97ca8bafc0b9c8e79e9716c2ddc40c6
  Refs:  it only be used in
MPTCP tests. This patch moves it into prog_tests/mptcp.c

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit makes start_mptcp_server a static function specific to MPTCP tests.', 'keywords': 'static,function,MPTCP', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 95b88500b97ca8bafc0b9c8e79e9716c2ddc40c6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 95b88500b97ca8bafc0b9c8e79e9716c2ddc40c6
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1714518090
  Commit Message:
    selftests/bpf: Add opts argument for __start_server

This patch adds network_helper_opts parameter for __start_server()
instead of "int protocol" and "int timeout_ms". This not only reduces
the number of parameters
  Parent Hashes: 06ebfd11678ad63cfd7021580e13d1582ee6c782
  Refs:  but also makes it more flexible.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/127d2f0929980b41f757dcfebe1b667e6bfb43f1.1714014697.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a flexible opts argument for the __start_server function in selftests/bpf.', 'keywords': 'opts, __start_server, selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 3e9bc0472b910d4115e16e9c2d684c7757cb6c60
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3e9bc0472b910d4115e16e9c2d684c7757cb6c60
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1714499144
  Commit Message:
    Merge branch 'bpf: Add BPF_PROG_TYPE_CGROUP_SKB attach type enforcement in BPF_LINK_CREATE'

Stanislav Fomichev says:

====================
Syzkaller found a case where it's possible to attach cgroup_skb program
to the sockopt hooks. Apparently it's currently possible to do that
  Parent Hashes: b867247555c4181bf84eb10b72b176862c29112d 095ddb501b39b7842e5da555915ad89e370b9888
  Refs: 
but only when using BPF_LINK_CREATE API. The first patch in the series
has more info on why that happens.
====================

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds enforcement for BPF_PROG_TYPE_CGROUP_SKB attach type in BPF_LINK_CREATE API.', 'keywords': 'BPF_LINK_CREATE, attach type, cgroup_skb', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 095ddb501b39b7842e5da555915ad89e370b9888
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 095ddb501b39b7842e5da555915ad89e370b9888
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1714499017
  Commit Message:
    selftests/bpf: Add sockopt case to verify prog_type

Make sure only sockopt programs can be attached to the setsockopt
and getsockopt hooks.

Signed-off-by: Stanislav Fomichev <sdf@google.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240426231621.2716876-4-sdf@google.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: d70b2660e75b85bdaa9d75f9c4224c2f6f89cf23
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added sockopt test case to ensure only sockopt programs attach to setsockopt/getsockopt hooks.', 'keywords': 'sockopt,test case,prog_type', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: d70b2660e75b85bdaa9d75f9c4224c2f6f89cf23
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d70b2660e75b85bdaa9d75f9c4224c2f6f89cf23
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1714499017
  Commit Message:
    selftests/bpf: Extend sockopt tests to use BPF_LINK_CREATE

Run all existing test cases with the attachment created via
BPF_LINK_CREATE. Next commit will add extra test cases to verify
link_create attach_type enforcement.

Signed-off-by: Stanislav Fomichev <sdf@google.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240426231621.2716876-3-sdf@google.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 543576ec15b17c0c93301ac8297333c7b6e84ac7
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extend existing BPF sockopt tests to utilize BPF_LINK_CREATE for attachment.', 'keywords': 'selftests,bpf,BPF_LINK_CREATE', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 543576ec15b17c0c93301ac8297333c7b6e84ac7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 543576ec15b17c0c93301ac8297333c7b6e84ac7
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1714499017
  Commit Message:
    bpf: Add BPF_PROG_TYPE_CGROUP_SKB attach type enforcement in BPF_LINK_CREATE

bpf_prog_attach uses attach_type_to_prog_type to enforce proper
attach type for BPF_PROG_TYPE_CGROUP_SKB. link_create uses
bpf_prog_get and relies on bpf_prog_attach_check_attach_type
to properly verify prog_type <> attach_type association.

Add missing attach_type enforcement for the link_create case.
Otherwise
  Parent Hashes: b867247555c4181bf84eb10b72b176862c29112d
  Refs:  it's currently possible to attach cgroup_skb prog
types to other cgroup hooks.

Fixes: af6eea57437a ("bpf: Implement bpf_link-based cgroup BPF program attachment")
Link: https://lore.kernel.org/bpf/0000000000004792a90615a1dde0@google.com/
Reported-by: syzbot+838346b979830606c854@syzkaller.appspotmail.com
Signed-off-by: Stanislav Fomichev <sdf@google.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240426231621.2716876-2-sdf@google.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit enforces attach type verification for cgroup_skb programs in BPF_LINK_CREATE.', 'keywords': 'attach type, cgroup_skb, link_create', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 06ebfd11678ad63cfd7021580e13d1582ee6c782
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 06ebfd11678ad63cfd7021580e13d1582ee6c782
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1714497807
  Commit Message:
    Merge branch 'bpf-introduce-kprobe_multi-session-attach'

Jiri Olsa says:

====================
bpf: Introduce kprobe_multi session attach

hi
  Parent Hashes: 05cbc217aafbc631a6c2fab4accf95850cb48358 a3a5113393ccfad2eb23ca091aa6e55b5bd67eb4
  Refs: 
adding support to attach kprobe program through kprobe_multi link
in a session mode

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce support for attaching kprobe programs using kprobe_multi in session mode.', 'keywords': 'kprobe, session, attach', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: a3a5113393ccfad2eb23ca091aa6e55b5bd67eb4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a3a5113393ccfad2eb23ca091aa6e55b5bd67eb4
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1714497805
  Commit Message:
    selftests/bpf: Add kprobe session cookie test

Adding kprobe session test that verifies the cookie value
get properly propagated from entry to return program.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240430112830.1184228-8-jolsa@kernel.org

  Parent Hashes: 0983b1697aefbf69f465f907b934b89bbce467ea
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a kprobe selftest to verify cookie propagation from entry to return program.', 'keywords': 'kprobe,selftest,cookie', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 0983b1697aefbf69f465f907b934b89bbce467ea
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0983b1697aefbf69f465f907b934b89bbce467ea
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1714497781
  Commit Message:
    selftests/bpf: Add kprobe session test

Adding kprobe session test and testing that the entry program
return value controls execution of the return probe program.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240430112830.1184228-7-jolsa@kernel.org

  Parent Hashes: 7b94965429f2fa32a83e1275c6bf6ed0add08603
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Add test case for kprobe session to verify entry program's control over return probe execution.", 'keywords': 'kprobe,test,session', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 7b94965429f2fa32a83e1275c6bf6ed0add08603
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7b94965429f2fa32a83e1275c6bf6ed0add08603
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1714495553
  Commit Message:
    libbpf: Add kprobe session attach type name to attach_type_name

Adding kprobe session attach type name to attach_type_name
  Parent Hashes: 2ca178f02b2f4e523e970894def16282e4adbc39
  Refs: 
so libbpf_bpf_attach_type_str returns proper string name for
BPF_TRACE_KPROBE_SESSION attach type.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240430112830.1184228-6-jolsa@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add kprobe session attach type name to attach_type_name in libbpf.', 'keywords': 'libbpf,kprobe,attach type', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 2ca178f02b2f4e523e970894def16282e4adbc39
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2ca178f02b2f4e523e970894def16282e4adbc39
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1714495553
  Commit Message:
    libbpf: Add support for kprobe session attach

Adding support to attach program in kprobe session mode
with bpf_program__attach_kprobe_multi_opts function.

Adding session bool to bpf_kprobe_multi_opts struct that allows
to load and attach the bpf program via kprobe session.
the attachment to create kprobe multi session.

Also adding new program loader section that allows:
 SEC("kprobe.session/bpf_fentry_test*")

and loads/attaches kprobe program as kprobe session.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240430112830.1184228-5-jolsa@kernel.org

  Parent Hashes: 5c919acef85147886eb2abf86fb147f94680a8b0
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for kprobe session mode attachment to bpf programs with new loader section and options.', 'keywords': 'kprobe, session, attach', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 5c919acef85147886eb2abf86fb147f94680a8b0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5c919acef85147886eb2abf86fb147f94680a8b0
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1714495553
  Commit Message:
    bpf: Add support for kprobe session cookie

Adding support for cookie within the session of kprobe multi
entry and return program.

The session cookie is u64 value and can be retrieved be new
kfunc bpf_session_cookie
  Parent Hashes: adf46d88ae4b2557f7e2e02547a25fb866935711
  Refs:  which returns pointer to the cookie
value. The bpf program can use the pointer to store (on entry)
and load (on return) the value.

The cookie value is implemented via fprobe feature that allows
to share values between entry and return ftrace fprobe callbacks.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240430112830.1184228-4-jolsa@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds support for a session cookie in kprobe programs using fprobe to share values between entry and return callbacks.', 'keywords': 'kprobe, session cookie, fprobe', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: adf46d88ae4b2557f7e2e02547a25fb866935711
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: adf46d88ae4b2557f7e2e02547a25fb866935711
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1714495553
  Commit Message:
    bpf: Add support for kprobe session context

Adding struct bpf_session_run_ctx object to hold session related
data
  Parent Hashes: 535a3692ba7245792e6f23654507865d4293c850
  Refs:  which is atm is_return bool and data pointer coming in
following changes.

Placing bpf_session_run_ctx layer in between bpf_run_ctx and
bpf_kprobe_multi_run_ctx so the session data can be retrieved
regardless of if it's kprobe_multi or uprobe_multi link

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds kprobe session context support by introducing struct bpf_session_run_ctx for session data management.', 'keywords': 'kprobe, session, context', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 535a3692ba7245792e6f23654507865d4293c850
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 535a3692ba7245792e6f23654507865d4293c850
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1714495553
  Commit Message:
    bpf: Add support for kprobe session attach

Adding support to attach bpf program for entry and return probe
of the same function. This is common use case which at the moment
requires to create two kprobe multi links.

Adding new BPF_TRACE_KPROBE_SESSION attach type that instructs
kernel to attach single link program to both entry and exit probe.

It's possible to control execution of the bpf program on return
probe simply by returning zero or non zero from the entry bpf
program execution to execute or not the bpf program on return
probe respectively.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240430112830.1184228-2-jolsa@kernel.org

  Parent Hashes: 05cbc217aafbc631a6c2fab4accf95850cb48358
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for attaching BPF programs to both entry and return kprobe sessions with a single link.', 'keywords': 'kprobe,BPF,attach', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 32a4ca1361d7a51e5003d4af4dfbf570f1b5fd00
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 32a4ca1361d7a51e5003d4af4dfbf570f1b5fd00
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1714490132
  Commit Message:
    selftests: net: py: extract tool logic

The main use of the ip() wrapper over cmd() is that it can parse JSON.
cmd("ip -j link show") will return stdout as a string
  Parent Hashes: ff4b2bfa63bd07cca35f6e704dc5035650595950
  Refs:  and test has
to call json.loads(). With ip("link show"

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor selftests to improve JSON parsing by extracting tool logic into the ip() wrapper.', 'keywords': 'selftests, JSON, wrapper', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 05cbc217aafbc631a6c2fab4accf95850cb48358
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 05cbc217aafbc631a6c2fab4accf95850cb48358
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1714487338
  Commit Message:
    selftests/bpf: Drop an unused local variable

Some copy/paste leftover
  Parent Hashes: a891711d0166133ec5120615fcf365d9745d82b2
  Refs:  this is never used.

Fixes: e3d9eac99afd ("selftests/bpf: wq: add bpf_wq_init() checks")
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Link: https://lore.kernel.org/bpf/20240430-bpf-next-v3-3-27afe7f3b17c@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes an unused local variable in selftests/bpf.', 'keywords': 'unused variable, selftests, cleanup', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: a891711d0166133ec5120615fcf365d9745d82b2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a891711d0166133ec5120615fcf365d9745d82b2
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1714487326
  Commit Message:
    bpf: Do not walk twice the hash map on free

If someone stores both a timer and a workqueue in a hash map
  Parent Hashes: b98a5c68ccaa94e93b9e898091fe2cf21c1500e6
  Refs:  on free

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize hash map free operation to prevent double walking in bpf subsystem.', 'keywords': 'hash map, bpf, optimize', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b98a5c68ccaa94e93b9e898091fe2cf21c1500e6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b98a5c68ccaa94e93b9e898091fe2cf21c1500e6
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1714487313
  Commit Message:
    bpf: Do not walk twice the map on free

If someone stores both a timer and a workqueue in a map
  Parent Hashes: 1bba3b3d373dbafae891e7cb06b8c82c8d62aba1
  Refs:  on free
we would walk it twice.

Add a check in array_map_free_timers_wq and free the timers and
workqueues if they are present.

Fixes: 246331e3f1ea ("bpf: allow struct bpf_wq to be embedded in arraymaps and hashmaps")
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Link: https://lore.kernel.org/bpf/20240430-bpf-next-v3-1-27afe7f3b17c@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Prevent twice traversal of map containing timers and workqueues during free operation in eBPF.', 'keywords': 'map,free,twice', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 1bba3b3d373dbafae891e7cb06b8c82c8d62aba1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1bba3b3d373dbafae891e7cb06b8c82c8d62aba1
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1714434513
  Commit Message:
    selftests/bpf: validate nulled-out struct_ops program is handled properly

Add a selftests validating that it's possible to have some struct_ops
callback set declaratively
  Parent Hashes: f973fccd43d34b096077d5d21d051ef75b22a7ea
  Refs:  then disable it (by setting to NULL)
programmatically. Libbpf should detect that such program should
not be loaded. Otherwise

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added selftests to ensure struct_ops program handles nulled-out callbacks properly in libbpf.', 'keywords': 'selftests, struct_ops, libbpf', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f973fccd43d34b096077d5d21d051ef75b22a7ea
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f973fccd43d34b096077d5d21d051ef75b22a7ea
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1714434366
  Commit Message:
    libbpf: handle nulled-out program in struct_ops correctly

If struct_ops has one of program callbacks set declaratively and host
kernel is old and doesn't support this callback
  Parent Hashes: cfd3bfe9507b4aa39f7e86772e60b50b799e490e
  Refs:  libbpf will allow to
load such struct_ops as long as that callback was explicitly nulled-out
(presumably through skeleton). This is all working correctly

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Ensure libbpf handles nulled-out program callbacks in struct_ops for compatibility with older kernels.', 'keywords': 'libbpf,struct_ops,nulled-out', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cfd3bfe9507b4aa39f7e86772e60b50b799e490e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cfd3bfe9507b4aa39f7e86772e60b50b799e490e
  Author Name: Dmitrii Bundin
  Author Email: dmitrii.bundin.a@gmail.com
  Commit Date: 1714433287
  Commit Message:
    bpf: Include linux/types.h for u32

Inclusion of the header linux/btf_ids.h relies on indirect inclusion of
the header linux/types.h. Including it directly on the top level helps
to avoid potential problems if linux/types.h hasn't been included
before.

The main motivation to introduce this it is to avoid similar problems that
have shown up in the bpftool where GNU libc indirectly pulls
linux/types.h causing compile error of the form:

   error: unknown type name 'u32'
                             u32 cnt;
                             ^~~

The bpftool compile error was fixed in
62248b22d01e ("tools/resolve_btfids: fix build with musl libc").

Signed-off-by: Dmitrii Bundin <dmitrii.bundin.a@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240420042457.3198883-1-dmitrii.bundin.a@gmail.com

  Parent Hashes: 789d9a53d2f633317c64de3eba0940f31a8f0cd6
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Directly include linux/types.h to prevent build errors related to missing u32 type in bpftool.', 'keywords': 'linux types, bpftool, u32', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 25927d0a1bec5091d371693c9fdd9640478837de
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 25927d0a1bec5091d371693c9fdd9640478837de
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1714432635
  Commit Message:
    selftests/bpf: Free strdup memory in veristat

The strdup() function returns a pointer to a new string which is a
duplicate of the string "input". Memory for the new string is obtained
with malloc()
  Parent Hashes: 237c522c1d5d19e8d3057a38ce690c753020c7d1
  Refs:  and need to be freed with free().

This patch adds these missing "free(input)" in parse_stats() to avoid
memory leak in veristat.c.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/ded44f8865cd7f337f52fc5fb0a5fbed7d6bd641.1714374022.git.tanggeliang@kylinos.cn


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes a memory leak by freeing strdup memory in the selftests for veristat.', 'keywords': 'memory, leak, free', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 237c522c1d5d19e8d3057a38ce690c753020c7d1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 237c522c1d5d19e8d3057a38ce690c753020c7d1
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1714432635
  Commit Message:
    selftests/bpf: Free strdup memory in test_sockmap

The strdup() function returns a pointer to a new string which is a
duplicate of the string "ptr". Memory for the new string is obtained
with malloc()
  Parent Hashes: 19468ed51488dae19254e8a67c75d583b05fa5e3
  Refs:  and need to be freed with free().

This patch adds these missing "free(ptr)" in check_whitelist() and
check_blacklist() to avoid memory leaks in test_sockmap.c.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/b76f2f4c550aebe4ab8ea73d23c4cbe4f06ea996.1714374022.git.tanggeliang@kylinos.cn


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes memory leaks by adding missing free calls in test_sockmap.c for strdup allocations.', 'keywords': 'memory leak, strdup, test_sockmap', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 19468ed51488dae19254e8a67c75d583b05fa5e3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 19468ed51488dae19254e8a67c75d583b05fa5e3
  Author Name: Viktor Malik
  Author Email: vmalik@redhat.com
  Commit Date: 1714432451
  Commit Message:
    selftests/bpf: Run cgroup1_hierarchy test in own mount namespace

The cgroup1_hierarchy test uses setup_classid_environment to setup
cgroupv1 environment. The problem is that the environment is set in
/sys/fs/cgroup and therefore
  Parent Hashes: a3034872cd90a6881ad4e10ca6d30e1215a99ada
  Refs:  if not run under an own mount namespace

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies the cgroup1_hierarchy test to run in its own mount namespace to avoid environment setup conflicts.', 'keywords': 'cgroup1_hierarchy,mount namespace,environment', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a3034872cd90a6881ad4e10ca6d30e1215a99ada
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a3034872cd90a6881ad4e10ca6d30e1215a99ada
  Author Name: Andy Shevchenko
  Author Email: andriy.shevchenko@linux.intel.com
  Commit Date: 1714432394
  Commit Message:
    bpf: Switch to krealloc_array()

Let the krealloc_array() copy the original data and
check for a multiplication overflow.

Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240429120005.3539116-1-andriy.shevchenko@linux.intel.com

  Parent Hashes: cb01621b6d91567ac74c8b95e4db731febdbdec3
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Switches to using krealloc_array() for memory allocation with overflow check in eBPF.', 'keywords': 'krealloc_array,memory overflow', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cb01621b6d91567ac74c8b95e4db731febdbdec3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cb01621b6d91567ac74c8b95e4db731febdbdec3
  Author Name: Andy Shevchenko
  Author Email: andriy.shevchenko@linux.intel.com
  Commit Date: 1714432323
  Commit Message:
    bpf: Use struct_size()

Use struct_size() instead of hand writing it.
This is less verbose and more robust.

Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240429121323.3818497-1-andriy.shevchenko@linux.intel.com

  Parent Hashes: 397658ddc88ce3c21d2aa3bed8e15fc69dfec946
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor code to use struct_size() for improved code robustness and clarity.', 'keywords': 'struct_size, robust, refactor', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 397658ddc88ce3c21d2aa3bed8e15fc69dfec946
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 397658ddc88ce3c21d2aa3bed8e15fc69dfec946
  Author Name: Tao Chen
  Author Email: chen.dylane@gmail.com
  Commit Date: 1714432203
  Commit Message:
    samples/bpf: Add valid info for VMLINUX_BTF

When I use the command 'make M=samples/bpf' to compile samples/bpf code
in ubuntu 22.04
  Parent Hashes: 0db63c0b86e981a1e97d2596d64ceceba1a5470e
  Refs:  the error info occured:
Cannot find a vmlinux for VMLINUX_BTF at any of "  /home/ubuntu/code/linux/vmlinux"

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add valid information to VMLINUX_BTF in samples/bpf for compile error resolution.', 'keywords': 'samples,bpf,VMLINUX_BTF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 0db63c0b86e981a1e97d2596d64ceceba1a5470e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0db63c0b86e981a1e97d2596d64ceceba1a5470e
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1714425401
  Commit Message:
    bpf: Fix verifier assumptions about socket->sk

The verifier assumes that 'sk' field in 'struct socket' is valid
and non-NULL when 'socket' pointer itself is trusted and non-NULL.
That may not be the case when socket was just created and
passed to LSM socket_accept hook.
Fix this verifier assumption and adjust tests.

Reported-by: Liam Wisehart <liamwisehart@meta.com>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Fixes: 6fcd486b3a0a ("bpf: Refactor RCU enforcement in the verifier.")
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/r/20240427002544.68803-1-alexei.starovoitov@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 89de2db19317fb89a6e9163f33c3a7b23ee75a18
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Fix verifier assumptions regarding non-NULL 'sk' field in sockets when accepted by LSM hooks.", 'keywords': 'verifier, socket, non-NULL', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['socket like programs', 'LSM like programs']}
--------------------
--------------------
Processing Commit ID: 89de2db19317fb89a6e9163f33c3a7b23ee75a18
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 89de2db19317fb89a6e9163f33c3a7b23ee75a18
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1714421539
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-04-29

We've added 147 non-merge commits during the last 32 day(s) which contain
a total of 158 files changed
  Parent Hashes: b3f1a08fcf0dd58d99b14b9f8fbd1929f188b746 07801a24e2f18624cd2400ce15f14569eb416c9a
  Refs:  9400 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge update includes 147 non-merge commits with multiple file changes from bpf-next branch.', 'keywords': 'merge, commits, bpf-next', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 07801a24e2f18624cd2400ce15f14569eb416c9a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 07801a24e2f18624cd2400ce15f14569eb416c9a
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1714384482
  Commit Message:
    bpf
  Parent Hashes: 6e25bcf06af0341691f7058e17e04800f6a19e26
  Refs:  docs: Clarify PC use in instruction-set.rst

This patch elaborates on the use of PC by expanding the PC acronym

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit clarifies the use of the PC acronym in the bpf instruction set documentation.', 'keywords': 'PC,documentation,clarity', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 8524d71cebfa6ddcfbb89f0fe0e174c8d0477c6d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8524d71cebfa6ddcfbb89f0fe0e174c8d0477c6d
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1714180390
  Commit Message:
    perf build: Pretend scandirat is missing with msan

Memory sanitizer lacks an interceptor for scandirat
  Parent Hashes: e101a05f79fd4ee3e89d2f3fb716493c33a33708
  Refs:  reporting all
memory it allocates as uninitialized. Memory sanitizer has a scandir
interceptor so use the fallback function in this case. This allows
'perf test' to run under memory sanitizer.

Additional notes from Ian on running in this mode:

Note

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies the perf build to use a fallback function for scandirat with memory sanitizer.', 'keywords': 'perf, msan, scandirat', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b2ff42c6d3abc26ef0f395fe9ee8c64364fbaa22
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b2ff42c6d3abc26ef0f395fe9ee8c64364fbaa22
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1714178213
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-04-26

We've added 12 non-merge commits during the last 22 day(s) which contain
a total of 14 files changed
  Parent Hashes: 6a30653b604aaad1bf0f2e74b068ceb8b6fc7aea a86538a2efb826b9a62c7b41e0499948b04aec7d
  Refs:  168 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merged bpf-related changes from the 'for-netdev' tag into the main branch involving 12 non-merge commits.", 'keywords': 'bpf, netdev, merge', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: a86538a2efb826b9a62c7b41e0499948b04aec7d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a86538a2efb826b9a62c7b41e0499948b04aec7d
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1714149919
  Commit Message:
    Merge branch 'bpf-prevent-userspace-memory-access'

Puranjay Mohan says:

====================
bpf: prevent userspace memory access

V5: https://lore.kernel.org/bpf/20240324185356.59111-1-puranjay12@gmail.com/
Changes in V6:
- Disable the verifier's instrumentation in x86-64 and update the JIT to
  take care of vsyscall page in addition to userspace addresses.
- Update bpf_testmod to test for vsyscall addresses.

V4: https://lore.kernel.org/bpf/20240321124640.8870-1-puranjay12@gmail.com/
Changes in V5:
- Use TASK_SIZE_MAX + PAGE_SIZE
  Parent Hashes: 5bcf0dcbf9066348058b88a510c57f70f384c92c 7cd6750d9a560fa69bb640a7280479d6a67999ad
  Refs:  VSYSCALL_ADDR as userspace boundary in
  x86-64 JIT.
- Added Acked-by: Ilya Leoshkevich <iii@linux.ibm.com>

V3: https://lore.kernel.org/bpf/20240321120842.78983-1-puranjay12@gmail.com/
Changes in V4:
- Disable this feature on architectures that don't define
  CONFIG_ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE.
- By doing the above

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit prevents userspace memory access in eBPF by updating the verifier and JIT on x86-64.', 'keywords': 'userspace memory access, verifier, JIT', 'commit_classification': "It's a security fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7cd6750d9a560fa69bb640a7280479d6a67999ad
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7cd6750d9a560fa69bb640a7280479d6a67999ad
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1714149918
  Commit Message:
    selftests/bpf: Test PROBE_MEM of VSYSCALL_ADDR on x86-64

The vsyscall is a legacy API for fast execution of system calls. It maps
a page at address VSYSCALL_ADDR into the userspace program. This address
is in the top 10MB of the address space:

ffffffffff600000 - ffffffffff600fff |    4 kB | legacy vsyscall ABI

The last commit fixes the x86-64 BPF JIT to skip accessing addresses in
this memory region. Add this address to bpf_testmod_return_ptr() so we
can make sure that it is fixed.

After this change and without the previous commit
  Parent Hashes: b599d7d26d6ad1fc9975218574bc2ca6d0293cfd
  Refs:  subprogs_extable
selftest will crash the kernel.

Signed-off-by: Puranjay Mohan <puranjay@kernel.org>
Link: https://lore.kernel.org/r/20240424100210.11982-4-puranjay@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Test PROBE_MEM of VSYSCALL_ADDR in BPF selftests on x86-64 architecture.', 'keywords': 'PROBE_MEM, VSYSCALL_ADDR, x86-64', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's an experimental feature that doesn't fit into existing categories."]}
--------------------
--------------------
Processing Commit ID: b599d7d26d6ad1fc9975218574bc2ca6d0293cfd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b599d7d26d6ad1fc9975218574bc2ca6d0293cfd
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1714149918
  Commit Message:
    bpf
  Parent Hashes: 66e13b615a0ce76b785d780ecc9776ba71983629
  Refs:  x86: Fix PROBE_MEM runtime load check

When a load is marked PROBE_MEM - e.g. due to PTR_UNTRUSTED access - the
address being loaded from is not necessarily valid. The BPF jit sets up
exception handlers for each such load which catch page faults and 0 out
the destination register.

If the address for the load is outside kernel address space

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix PROBE_MEM runtime load check and exception handling in the BPF JIT compiler for untrusted pointer accesses.', 'keywords': 'PROBE_MEM,BPF JIT,exception', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 66e13b615a0ce76b785d780ecc9776ba71983629
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 66e13b615a0ce76b785d780ecc9776ba71983629
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1714149918
  Commit Message:
    bpf: verifier: prevent userspace memory access

With BPF_PROBE_MEM
  Parent Hashes: 5bcf0dcbf9066348058b88a510c57f70f384c92c
  Refs:  BPF allows de-referencing an untrusted pointer. To
thwart invalid memory accesses

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit improves memory access safety in BPF by using BPF_PROBE_MEM to prevent userspace memory access issues.', 'keywords': 'verifier, memory, prevention', 'commit_classification': "It's a security fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6e25bcf06af0341691f7058e17e04800f6a19e26
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6e25bcf06af0341691f7058e17e04800f6a19e26
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1714144204
  Commit Message:
    bpf_helpers.h: Define bpf_tail_call_static when building with GCC

The definition of bpf_tail_call_static in tools/lib/bpf/bpf_helpers.h
is guarded by a preprocessor check to assure that clang is recent
enough to support it.  This patch updates the guard so the function is
compiled when using GCC 13 or later as well.

Tested in bpf-next master. No regressions.

Signed-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240426145158.14409-1-jose.marchesi@oracle.com

  Parent Hashes: e51b907d40329d4b4517a155e0bc0bf593d6767d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added support for bpf_tail_call_static function in GCC 13 or later.', 'keywords': 'bpf_tail_call_static,GCC,compile', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 15fd021bc4270273d8f4b7f58fdda8a16214a377
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 15fd021bc4270273d8f4b7f58fdda8a16214a377
  Author Name: Song Yoong Siang
  Author Email: yoong.siang.song@intel.com
  Commit Date: 1714137839
  Commit Message:
    igc: Add Tx hardware timestamp request for AF_XDP zero-copy packet

This patch adds support to per-packet Tx hardware timestamp request to
AF_XDP zero-copy packet via XDP Tx metadata framework. Please note that
user needs to enable Tx HW timestamp capability via igc_ioctl() with
SIOCSHWTSTAMP cmd before sending xsk Tx hardware timestamp request.

Same as implementation in RX timestamp XDP hints kfunc metadata
  Parent Hashes: dba86b7d8778102998a6a2989f6a2d935efc6d47
  Refs:  Timer 0
(adjustable clock) is used in xsk Tx hardware timestamp. i225/i226 have
four sets of timestamping registers. *skb and *xsk_tx_buffer pointers
are used to indicate whether the timestamping register is already occupied.

Furthermore

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds Tx hardware timestamp support for AF_XDP zero-copy packets using XDP Tx metadata framework.', 'keywords': 'Tx hardware timestamp, AF_XDP, zero-copy', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: e51b907d40329d4b4517a155e0bc0bf593d6767d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e51b907d40329d4b4517a155e0bc0bf593d6767d
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1714097721
  Commit Message:
    bpf
  Parent Hashes: 876373985efb87844ca7cacd2d1d3ef4c9398c9c
  Refs:  docs: Add introduction for use in the ISA Internet Draft

The proposed intro paragraph text is derived from the first paragraph
of the IETF BPF WG charter at https://datatracker.ietf.org/wg/bpf/about/

Signed-off-by: Dave Thaler <dthaler1968@gmail.com>
Acked-by: David Vernet <void@manifault.com>
Link: https://lore.kernel.org/r/20240422190942.24658-1-dthaler1968@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add introduction text for BPF ISA in the related Internet Draft documentation.', 'keywords': 'BPF, ISA, documentation', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 876373985efb87844ca7cacd2d1d3ef4c9398c9c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 876373985efb87844ca7cacd2d1d3ef4c9398c9c
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1714079345
  Commit Message:
    Merge branch 'bpf: add mrtt and srtt as ctx->args for BPF_SOCK_OPS_RTT_CB'

Philo Lu says:

====================
These provides more information about tcp RTT estimation. The selftest for
BPF_SOCK_OPS_RTT_CB is extended for the added args.

changelogs
-> v1:
- extend rtt selftest for added args (suggested by Stanislav)
====================

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: a311c3f9c342fc12e6c8a27e22c81955ab2a336c 7eb4f66b38069eec9c86c9d115f0bba1cf73ef2c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge branch to add mrtt and srtt as ctx->args for BPF_SOCK_OPS_RTT_CB with extended selftests.', 'keywords': 'mrtt, srtt, BPF_SOCK_OPS_RTT_CB', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 7eb4f66b38069eec9c86c9d115f0bba1cf73ef2c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7eb4f66b38069eec9c86c9d115f0bba1cf73ef2c
  Author Name: Philo Lu
  Author Email: lulie@linux.alibaba.com
  Commit Date: 1714079345
  Commit Message:
    selftests/bpf: extend BPF_SOCK_OPS_RTT_CB test for srtt and mrtt_us

Because srtt and mrtt_us are added as args in bpf_sock_ops at
BPF_SOCK_OPS_RTT_CB
  Parent Hashes: 48e2cd3e3dcfe04f212df4fb189fa04c2a87b980
  Refs:  a simple check is added to make sure they are both
non-zero.

$ ./test_progs -t tcp_rtt
  #373     tcp_rtt:OK
  Summary: 1/0 PASSED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extend BPF_SOCK_OPS_RTT_CB test to include checks for non-zero srtt and mrtt_us arguments.', 'keywords': 'BPF_SOCK_OPS_RTT_CB,srtt,mrtt_us', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 48e2cd3e3dcfe04f212df4fb189fa04c2a87b980
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 48e2cd3e3dcfe04f212df4fb189fa04c2a87b980
  Author Name: Philo Lu
  Author Email: lulie@linux.alibaba.com
  Commit Date: 1714079345
  Commit Message:
    bpf: add mrtt and srtt as BPF_SOCK_OPS_RTT_CB args

Two important arguments in RTT estimation
  Parent Hashes: a311c3f9c342fc12e6c8a27e22c81955ab2a336c
  Refs:  mrtt and srtt

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add new arguments mrtt and srtt to BPF_SOCK_OPS_RTT_CB for RTT estimation.', 'keywords': 'mrtt,srtt,RTT', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: a311c3f9c342fc12e6c8a27e22c81955ab2a336c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a311c3f9c342fc12e6c8a27e22c81955ab2a336c
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1714074163
  Commit Message:
    Merge branch 'check-bpf_dummy_struct_ops-program-params-for-test-runs'

Eduard Zingerman says:

====================
check bpf_dummy_struct_ops program params for test runs

When doing BPF_PROG_TEST_RUN for bpf_dummy_struct_ops programs
  Parent Hashes: 638a485c4996be1d38303cf25ea8d12dfd16011b 6a2d30d3c5bf9f088dcfd5f3746b04d84f2fab83
  Refs: 
execution should be rejected when NULL is passed for non-nullable
params

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Ensure BPF_PROG_TEST_RUN rejects NULL non-nullable parameters for bpf_dummy_struct_ops programs.', 'keywords': 'BPF_PROG_TEST_RUN,NULL,params', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6a2d30d3c5bf9f088dcfd5f3746b04d84f2fab83
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6a2d30d3c5bf9f088dcfd5f3746b04d84f2fab83
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1714074163
  Commit Message:
    selftests/bpf: dummy_st_ops should reject 0 for non-nullable params

Check if BPF_PROG_TEST_RUN for bpf_dummy_struct_ops programs
rejects execution if NULL is passed for non-nullable parameter.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240424012821.595216-6-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 980ca8ceeae69ddf362870ea9183f389ae26324a
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Ensure bpf_dummy_struct_ops programs reject null parameters in BPF_PROG_TEST_RUN tests.', 'keywords': 'selftests,bpf,rejects', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 980ca8ceeae69ddf362870ea9183f389ae26324a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 980ca8ceeae69ddf362870ea9183f389ae26324a
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1714074163
  Commit Message:
    bpf: check bpf_dummy_struct_ops program params for test runs

When doing BPF_PROG_TEST_RUN for bpf_dummy_struct_ops programs
  Parent Hashes: f612210d456a0b969a0adca91e68dbea0e0ea301
  Refs: 
reject execution when NULL is passed for non-nullable params.
For programs with non-nullable params verifier assumes that
such params are never NULL and thus might optimize out NULL checks.

Suggested-by: Kui-Feng Lee <sinquersw@gmail.com>
Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240424012821.595216-5-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Reject BPF_PROG_TEST_RUN for bpf_dummy_struct_ops with nullable params to prevent incorrect verifier optimizations.', 'keywords': 'bpf_dummy_struct_ops, BPF_PROG_TEST_RUN, nullable', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f612210d456a0b969a0adca91e68dbea0e0ea301
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f612210d456a0b969a0adca91e68dbea0e0ea301
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1714074163
  Commit Message:
    selftests/bpf: do not pass NULL for non-nullable params in dummy_st_ops

dummy_st_ops.test_2 and dummy_st_ops.test_sleepable do not have their
'state' parameter marked as nullable. Update dummy_st_ops.c to avoid
passing NULL for such parameters
  Parent Hashes: 3b3b84aacb4420226576c9732e7b539ca7b79633
  Refs:  as the next patch would allow kernel
to enforce this restriction.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240424012821.595216-4-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Correct selftests/bpf by avoiding NULL parameters for non-nullable 'state' params in dummy_st_ops functions.", 'keywords': 'selftests,bpf,dummy_st_ops', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 3b3b84aacb4420226576c9732e7b539ca7b79633
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3b3b84aacb4420226576c9732e7b539ca7b79633
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1714074163
  Commit Message:
    selftests/bpf: adjust dummy_st_ops_success to detect additional error

As reported by Jose E. Marchesi in off-list discussion
  Parent Hashes: 1479eaff1f16983d8fda7c5a08a586c21891087d
  Refs:  GCC and LLVM
generate slightly different code for dummy_st_ops_success/test_1():

  SEC("struct_ops/test_1")
  int BPF_PROG(test_1

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adjusts selftests in bpf to detect additional error cases highlighted by Jose E. Marchesi.', 'keywords': 'selftests,bpf,error', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 1479eaff1f16983d8fda7c5a08a586c21891087d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1479eaff1f16983d8fda7c5a08a586c21891087d
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1714074163
  Commit Message:
    bpf: mark bpf_dummy_struct_ops.test_1 parameter as nullable

Test case dummy_st_ops/dummy_init_ret_value passes NULL as the first
parameter of the test_1() function. Mark this parameter as nullable to
make verifier aware of such possibility.
Otherwise
  Parent Hashes: 638a485c4996be1d38303cf25ea8d12dfd16011b
  Refs:  NULL check in the test_1() code:

      SEC("struct_ops/test_1")
      int BPF_PROG(test_1

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit marks the bpf_dummy_struct_ops.test_1 parameter as nullable to improve verifier awareness.', 'keywords': 'nullable,test_1,verifier', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 638a485c4996be1d38303cf25ea8d12dfd16011b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 638a485c4996be1d38303cf25ea8d12dfd16011b
  Author Name: Andrea Righi
  Author Email: andrea.righi@canonical.com
  Commit Date: 1714070764
  Commit Message:
    selftests/bpf: Add ring_buffer__consume_n test.

Add a testcase for the ring_buffer__consume_n() API.

The test produces multiple samples in a ring buffer
  Parent Hashes: 8ec3bf5c31d2a59c320ff59397f6ac362341d9d7
  Refs:  using a
sys_getpid() fentry prog

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test case for ring_buffer__consume_n in selftests/bpf.', 'keywords': 'testcase, ring_buffer, API', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 8ec3bf5c31d2a59c320ff59397f6ac362341d9d7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8ec3bf5c31d2a59c320ff59397f6ac362341d9d7
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1714067320
  Commit Message:
    bpf: Add bpf_guard_preempt() convenience macro

Add bpf_guard_preempt() macro that uses newly introduced
bpf_preempt_disable/enable() kfuncs to guard a critical section.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Link: https://lore.kernel.org/r/20240424225529.16782-1-alexei.starovoitov@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 52578f7f53ff8fe3a8f6f3bc8b5956615c07a16e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce bpf_guard_preempt() macro for critical section protection using new bpf_preempt_disable/enable() kfuncs.', 'keywords': 'bpf, macro, preempt', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: caf93883f623ebd29989e3c35423f386ea4a41bb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: caf93883f623ebd29989e3c35423f386ea4a41bb
  Author Name: David S. Miller
  Author Email: davem@davemloft.net
  Commit Date: 1714031532
  Commit Message:
    Merge branch 'tcp-trace-next'

Philo Lu says:

====================
tcp: update TCPCB_EVER_RETRANS after trace_tcp_retransmit_skb()

Move TCPCB_EVER_RETRANS updating after the trace_tcp_retransmit_skb()
in __tcp_retransmit_skb()
  Parent Hashes: d806871612712f1d08eb7ce81efd4ca81ca5bca1 2bf90a57f0e682872c5cfb66ffa45e432bb9c7ae
  Refs:  and then we are aware of whether the skb has
ever been retransmitted in this tracepoint. This can be used

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates TCPCB_EVER_RETRANS after trace_tcp_retransmit_skb in TCP retransmission handling.', 'keywords': 'TCP,tracepoint,retransmission', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 14b5fb2145caeb909a1cd57d9cd5e0c3cd005642
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 14b5fb2145caeb909a1cd57d9cd5e0c3cd005642
  Author Name: Philo Lu
  Author Email: lulie@linux.alibaba.com
  Commit Date: 1714031532
  Commit Message:
    tcp: move tcp_skb_cb->sacked flags to enum

Move the flag definitions for tcp_skb_cb->sacked into a new enum named
tcp_skb_cb_sacked_flags
  Parent Hashes: d806871612712f1d08eb7ce81efd4ca81ca5bca1
  Refs:  then we can get access to them in bpf via
vmlinux.h

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Move tcp_skb_cb->sacked flags to a new enum for better access via vmlinux.h in BPF.', 'keywords': 'tcp,flags,enum', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d806871612712f1d08eb7ce81efd4ca81ca5bca1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d806871612712f1d08eb7ce81efd4ca81ca5bca1
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1714014947
  Commit Message:
    Merge branch 'selftests-net-extract-bpf-building-logic-from-the-makefile'

Jakub Kicinski says:

====================
selftests: net: extract BPF building logic from the Makefile

This has been sitting in my tree for a while. I will soon add YNL/libynl
support for networking selftests. This prompted a small cleanup of
the selftest makefile for net/. We don't want to be piling logic
for each library in there. YNL will get its own .mk file which can
be included. Do the same for the BPF building section
  Parent Hashes: 2fa809b90617817fec2802c7cfaeb2c66fd04c2b 3f584c211d8cc049848620472aaec1bebd8ddaae
  Refs:  already.

No funcional changes here

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit extracts BPF building logic from the network selftests Makefile for better organization.', 'keywords': 'selftests, BPF, Makefile', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6b88ce902f0bdcb3694a6ceddc8b3d0b40db3772
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6b88ce902f0bdcb3694a6ceddc8b3d0b40db3772
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1714014945
  Commit Message:
    selftests: net: name bpf objects consistently and simplify Makefile

The BPF sources moved with bpf_offload.py have a suffix of .bpf.c
which seems to be useful convention. Rename the 2 other BPF sources
we had. Use wildcard in the Makefile
  Parent Hashes: 2fa809b90617817fec2802c7cfaeb2c66fd04c2b
  Refs:  since we can match all those
files easily now.

Link: https://lore.kernel.org/r/20240423183542.3807234-2-kuba@kernel.org
Signed-off-by: Jakub Kicinski <kuba@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit renames BPF source files and simplifies the Makefile in the selftests for net.', 'keywords': 'rename, Makefile, selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8000e627dc98efc44658af6150fd81c62d936b1b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8000e627dc98efc44658af6150fd81c62d936b1b
  Author Name: Vadim Fedorenko
  Author Email: vadfed@meta.com
  Commit Date: 1713999670
  Commit Message:
    selftests: bpf: crypto: add benchmark for crypto functions

Some simple benchmarks are added to understand the baseline of
performance.

Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Link: https://lore.kernel.org/r/20240422225024.2847039-5-vadfed@meta.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 91541ab192fc7f573e6c711ba9c2ae22a299c408
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added benchmark tests for eBPF crypto functions to assess baseline performance.', 'keywords': 'benchmark, crypto functions, performance', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 91541ab192fc7f573e6c711ba9c2ae22a299c408
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 91541ab192fc7f573e6c711ba9c2ae22a299c408
  Author Name: Vadim Fedorenko
  Author Email: vadfed@meta.com
  Commit Date: 1713999670
  Commit Message:
    selftests: bpf: crypto skcipher algo selftests

Add simple tc hook selftests to show the way to work with new crypto
BPF API. Some tricky dynptr initialization is used to provide empty iv
dynptr. Simple AES-ECB algo is used to demonstrate encryption and
decryption of fixed size buffers.

Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Link: https://lore.kernel.org/r/20240422225024.2847039-4-vadfed@meta.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: fda4f71282b21a8cf230b656781efb0a41371fd4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for tc hook using the new crypto BPF API with AES-ECB encryption demonstration.', 'keywords': 'selftests, crypto, AES', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: fda4f71282b21a8cf230b656781efb0a41371fd4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fda4f71282b21a8cf230b656781efb0a41371fd4
  Author Name: Vadim Fedorenko
  Author Email: vadfed@meta.com
  Commit Date: 1713999670
  Commit Message:
    bpf: crypto: add skcipher to bpf crypto

Implement skcipher crypto in BPF crypto framework.

Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
Link: https://lore.kernel.org/r/20240422225024.2847039-3-vadfed@meta.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 3e1c6f35409f9e447bf37f64840f5b65576bfb78
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add skcipher cryptographic support to BPF crypto framework.', 'keywords': 'skcipher,crypto,BPF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3e1c6f35409f9e447bf37f64840f5b65576bfb78
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3e1c6f35409f9e447bf37f64840f5b65576bfb78
  Author Name: Vadim Fedorenko
  Author Email: vadfed@meta.com
  Commit Date: 1713999670
  Commit Message:
    bpf: make common crypto API for TC/XDP programs

Add crypto API support to BPF to be able to decrypt or encrypt packets
in TC/XDP BPF programs. Special care should be taken for initialization
part of crypto algo because crypto alloc) doesn't work with preemtion
disabled
  Parent Hashes: 95c07d58250ca3ed01855c20be568cf04e15382f
  Refs:  it can be run only in sleepable BPF program. Also async crypto
is not supported because of the very same issue - TC/XDP BPF programs
are not sleepable.

Signed-off-by: Vadim Fedorenko <vadfed@meta.com>
Link: https://lore.kernel.org/r/20240422225024.2847039-2-vadfed@meta.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce crypto API to enable packet encryption and decryption in TC/XDP BPF programs.', 'keywords': 'crypto,API,TC/XDP', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['xdp like programs', 'tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 95c07d58250ca3ed01855c20be568cf04e15382f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 95c07d58250ca3ed01855c20be568cf04e15382f
  Author Name: Haiyue Wang
  Author Email: haiyue.wang@intel.com
  Commit Date: 1713999506
  Commit Message:
    bpf: update the comment for BTF_FIELDS_MAX

The commit d56b63cf0c0f ("bpf: add support for bpf_wq user type")
changes the fields support number to 11
  Parent Hashes: 82e38a505c9868e784ec31e743fd8a9fa5ca1084
  Refs:  just sync the comment.

Signed-off-by: Haiyue Wang <haiyue.wang@intel.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240424054526.8031-1-haiyue.wang@intel.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update comment for BTF_FIELDS_MAX to reflect support for 11 fields.', 'keywords': 'BTF_FIELDS_MAX,comment,update', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 82e38a505c9868e784ec31e743fd8a9fa5ca1084
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 82e38a505c9868e784ec31e743fd8a9fa5ca1084
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1713992705
  Commit Message:
    selftests/bpf: Fix wq test.

The wq test was missing destroy(skel) part which was causing bpf progs to stay
loaded. That was causing test_progs to complain with
"Failed to unload bpf_testmod.ko from kernel: -11" message
  Parent Hashes: 5305b378b351dc5fd55f5f1f37ef362ae0e11d7e
  Refs:  but adding
destroy() wasn't enough

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes wq test by adding missing destroy(skel) to unload BPF programs correctly.', 'keywords': 'wq test, destroy, unload', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e4c68bbaff1153e8730c16f566c78a25b2046372
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e4c68bbaff1153e8730c16f566c78a25b2046372
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1713989549
  Commit Message:
    selftests/bpf: Use make_sockaddr in test_sock_addr

This patch uses public helper make_sockaddr() exported in network_helpers.h
instead of the local defined function mk_sockaddr() in test_sock_addr.c.
This can avoid duplicate code.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/1473e189d6ca1a3925de4c5354d191a14eca0f3f.1713868264.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: c6c40798428180516df80ce89da7bbfe1f6a828a
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactored test_sock_addr to use make_sockaddr from network_helpers.h, reducing code duplication.', 'keywords': 'selftests,bpf,make_sockaddr', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: c6c40798428180516df80ce89da7bbfe1f6a828a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c6c40798428180516df80ce89da7bbfe1f6a828a
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1713989548
  Commit Message:
    selftests/bpf: Use connect_to_addr in test_sock_addr

This patch uses public network helper connect_to_addr() exported in
network_helpers.h instead of the local defined function connect_to_server()
in test_sock_addr.c. This can avoid duplicate code.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/f263797712d93fdfaf2943585c5dfae56714a00b.1713868264.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: e1cdb70d075e02b1f410b8446a8ff959fa15f0ee
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replace local function connect_to_server with public helper connect_to_addr in bpf selftests.', 'keywords': 'selftests,bpf,connect_to_addr', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: e1cdb70d075e02b1f410b8446a8ff959fa15f0ee
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e1cdb70d075e02b1f410b8446a8ff959fa15f0ee
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1713989548
  Commit Message:
    selftests/bpf: Use start_server_addr in test_sock_addr

Include network_helpers.h in test_sock_addr.c
  Parent Hashes: 285cffbaa8e6056c2595e07e3a320e55c71870ad
  Refs:  use the newly added public
helper start_server_addr() instead of the local defined function
start_server(). This can avoid duplicate code.

In order to use functions defined in network_helpers.c in test_sock_addr.c

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor test_sock_addr to use the start_server_addr helper from network_helpers for cleaner code.', 'keywords': 'selftests,bpf,network_helpers', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 285cffbaa8e6056c2595e07e3a320e55c71870ad
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 285cffbaa8e6056c2595e07e3a320e55c71870ad
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1713989548
  Commit Message:
    selftests/bpf: Use log_err in open_netns/close_netns

ASSERT helpers defined in test_progs.h shouldn't be used in public
functions like open_netns() and close_netns(). Since they depend on
test__fail() which defined in test_progs.c. Public functions may be
used not only in test_progs.c
  Parent Hashes: 151f7442436658ee84076681d8f52e987fe147ea
  Refs:  but in other tests like test_sock_addr.c
in the next commit.

This patch uses log_err() to replace ASSERT helpers in open_netns()
and close_netns() in network_helpers.c to decouple dependencies

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replaced ASSERT helpers with log_err in open_netns and close_netns to reduce dependencies.', 'keywords': 'log_err, open_netns, dependencies', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 151f7442436658ee84076681d8f52e987fe147ea
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 151f7442436658ee84076681d8f52e987fe147ea
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1713989548
  Commit Message:
    selftests/bpf: Fix a fd leak in error paths in open_netns

As Martin mentioned in review comment
  Parent Hashes: 55d30cc90fd42587594345a025b34399585e6e19
  Refs:  there is an existing bug that
orig_netns_fd will be leaked in the later "goto fail;" case after
open("/proc/self/ns/net") in open_netns() in network_helpers.c. This
patch adds "close(token->orig_netns_fd);" before "free(token);" to
fix it.

Fixes: a30338840fa5 ("selftests/bpf: Move open_netns() and close_netns() into network_helpers.c")
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/a104040b47c3c34c67f3f125cdfdde244a870d3c.1713868264.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix a file descriptor leak in open_netns() in the BPF selftests network_helpers.c file.', 'keywords': 'fd leak,selftests,BPF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 55d30cc90fd42587594345a025b34399585e6e19
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 55d30cc90fd42587594345a025b34399585e6e19
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1713977285
  Commit Message:
    Merge branch 'introduce-bpf_preempt_-disable-enable'

Kumar Kartikeya Dwivedi says:

====================
Introduce bpf_preempt_{disable
  Parent Hashes: dc92febf7b93da5049fe177804e6b1961fcc6bd7 3134396f1cba939783b87c63dae3a54708285a9a
  Refs: enable}

This set introduces two kfuncs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce new kfuncs for managing preemption in eBPF programs.', 'keywords': 'kfuncs,preemption,eBPF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3134396f1cba939783b87c63dae3a54708285a9a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3134396f1cba939783b87c63dae3a54708285a9a
  Author Name: Kumar Kartikeya Dwivedi
  Author Email: memxor@gmail.com
  Commit Date: 1713977269
  Commit Message:
    selftests/bpf: Add tests for preempt kfuncs

Add tests for nested cases
  Parent Hashes: fc7566ad0a826cdc8886c5dbbb39ce72a0dc6333
  Refs:  nested count preservation upon different
subprog calls that disable/enable preemption

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for nested preempt kfunc cases in BPF.', 'keywords': 'selftests, preempt, kfuncs', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fc7566ad0a826cdc8886c5dbbb39ce72a0dc6333
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fc7566ad0a826cdc8886c5dbbb39ce72a0dc6333
  Author Name: Kumar Kartikeya Dwivedi
  Author Email: memxor@gmail.com
  Commit Date: 1713977269
  Commit Message:
    bpf: Introduce bpf_preempt_[disable
  Parent Hashes: dc92febf7b93da5049fe177804e6b1961fcc6bd7
  Refs: enable] kfuncs

Introduce two new BPF kfuncs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce two new BPF kfuncs for preempt disable support.', 'keywords': 'BPF kfuncs preempt', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: dc92febf7b93da5049fe177804e6b1961fcc6bd7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dc92febf7b93da5049fe177804e6b1961fcc6bd7
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1713974810
  Commit Message:
    bpf: Don't check for recursion in bpf_wq_work.

__bpf_prog_enter_sleepable_recur does recursion check which is not applicable
to wq callback. The callback function is part of bpf program and bpf prog might
be running on the same cpu. So recursion check would incorrectly prevent
callback from running. The code can call __bpf_prog_enter_sleepable()
  Parent Hashes: 6e10b6350a67d398c795ac0b93a7bb7103633fe4
  Refs:  but
run_ctx would be fake

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove unnecessary recursion check in bpf_wq_work callback function.', 'keywords': 'recursion, bpf_wq_work, callback', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 1adb825af946fa6b2104c1713ad4999283e09fbc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1adb825af946fa6b2104c1713ad4999283e09fbc
  Author Name: Joel Granados
  Author Email: j.granados@samsung.com
  Commit Date: 1713944634
  Commit Message:
    bpf: Remove the now superfluous sentinel elements from ctl_table array

This commit comes at the tail end of a greater effort to remove the
empty elements at the end of the ctl_table arrays (sentinels) which
will reduce the overall build time size of the kernel and run time
memory bloat by ~64 bytes per sentinel (further information Link :
https://lore.kernel.org/all/ZO5Yx5JFogGi%2FcBo@bombadil.infradead.org/)

Remove sentinel element from bpf_syscall_table.

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Joel Granados <j.granados@samsung.com>

  Parent Hashes: f15843f725a55d7232aa9b699be52c2c3da06982
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit removes superfluous sentinel elements from the ctl_table array to reduce kernel build size and memory usage.', 'keywords': 'sentinel, ctl_table, bpf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6e10b6350a67d398c795ac0b93a7bb7103633fe4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6e10b6350a67d398c795ac0b93a7bb7103633fe4
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1713926817
  Commit Message:
    Merge branch 'introduce-bpf_wq'

Benjamin Tissoires says:

====================
Introduce bpf_wq

This is a followup of sleepable bpf_timer[0].

When discussing sleepable bpf_timer
  Parent Hashes: a7de265cb2d849f8986a197499ad58dca0a4f209 8290dba51910d36721ced6ccf03049ed6b7ea2ce
  Refs:  it was thought that we should give
a try to bpf_wq

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces a new bpf_wq following the development of sleepable bpf_timer.', 'keywords': 'bpf_wq,sleepable,bpf_timer', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8290dba51910d36721ced6ccf03049ed6b7ea2ce
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8290dba51910d36721ced6ccf03049ed6b7ea2ce
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713926817
  Commit Message:
    selftests/bpf: wq: add bpf_wq_start() checks

Allows to test if allocation/free works

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240420-bpf_wq-v2-16-6c986a5a741f@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 8e83da9732d91c60fdc651b2486c8e5935eb0ca2
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds bpf_wq_start() checks in selftests for allocation and free operations.', 'keywords': 'bpf_wq_start, selftests, allocation', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8e83da9732d91c60fdc651b2486c8e5935eb0ca2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8e83da9732d91c60fdc651b2486c8e5935eb0ca2
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713926817
  Commit Message:
    bpf: add bpf_wq_start

again
  Parent Hashes: 01b7b1c5f3cc029bdd2652eba61e953ccd286c0e
  Refs:  copy/paste from bpf_timer_start().

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240420-bpf_wq-v2-15-6c986a5a741f@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a new function bpf_wq_start to the eBPF subsystem.', 'keywords': 'bpf, wq, start', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 01b7b1c5f3cc029bdd2652eba61e953ccd286c0e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 01b7b1c5f3cc029bdd2652eba61e953ccd286c0e
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713926817
  Commit Message:
    selftests/bpf: add checks for bpf_wq_set_callback()

We assign the callback and set everything up.
The actual tests of these callbacks will be done when bpf_wq_start() is
available.

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240420-bpf_wq-v2-14-6c986a5a741f@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 81f1d7a583fa1fa14f0c4e6140d34b5e3d08d227
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added selftests for bpf_wq_set_callback() function but await further tests with bpf_wq_start().', 'keywords': 'selftests, bpf_wq_set_callback, callback', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 81f1d7a583fa1fa14f0c4e6140d34b5e3d08d227
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 81f1d7a583fa1fa14f0c4e6140d34b5e3d08d227
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713926817
  Commit Message:
    bpf: wq: add bpf_wq_set_callback_impl

To support sleepable async callbacks
  Parent Hashes: e3d9eac99afd94980475833479332fefd74c5c2b
  Refs:  we need to tell push_async_cb()
whether the cb is sleepable or not.

The verifier now detects that we are in bpf_wq_set_callback_impl and
can allow a sleepable callback to happen.

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240420-bpf_wq-v2-13-6c986a5a741f@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add bpf_wq_set_callback_impl to support sleepable async callbacks in eBPF.', 'keywords': 'bpf, wq, sleepable', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e3d9eac99afd94980475833479332fefd74c5c2b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e3d9eac99afd94980475833479332fefd74c5c2b
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713926817
  Commit Message:
    selftests/bpf: wq: add bpf_wq_init() checks

Allows to test if allocation/free works

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240420-bpf_wq-v2-12-6c986a5a741f@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: eb48f6cd41a0f7803770a76bbffb6bd5b1b2ae2f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for bpf_wq_init to verify allocation and free operations.', 'keywords': 'selftests,bpf_wq_init,allocation', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: eb48f6cd41a0f7803770a76bbffb6bd5b1b2ae2f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: eb48f6cd41a0f7803770a76bbffb6bd5b1b2ae2f
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713926817
  Commit Message:
    bpf: wq: add bpf_wq_init

We need to teach the verifier about the second argument which is declared
as void * but which is of type KF_ARG_PTR_TO_MAP. We could have dropped
this extra case if we declared the second argument as struct bpf_map *
  Parent Hashes: b4abee7c1ae3d59440e7915da28c6d2cd394738a
  Refs: 
but that means users will have to do extra casting to have their program
compile.

We also need to duplicate the timer code for the checking if the map
argument is matching the provided workqueue.

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240420-bpf_wq-v2-11-6c986a5a741f@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add bpf_wq_init with type check for the second argument to handle pointers to maps in eBPF verifier.', 'keywords': 'bpf_wq_init,pointer,map', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b4abee7c1ae3d59440e7915da28c6d2cd394738a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b4abee7c1ae3d59440e7915da28c6d2cd394738a
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713926813
  Commit Message:
    selftests/bpf: add bpf_wq tests

We simply try in all supported map types if we can store/load a bpf_wq.

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240420-bpf_wq-v2-10-6c986a5a741f@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 246331e3f1eac905170a923f0ec76725c2558232
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds tests for storing/loading bpf_wq in all supported eBPF map types.', 'keywords': 'bpf_wq,test,map', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 58a4c9b1e5a3e53c9148e80b90e1e43897ce77d1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 58a4c9b1e5a3e53c9148e80b90e1e43897ce77d1
  Author Name: Eric Dumazet
  Author Email: edumazet@google.com
  Commit Date: 1713924177
  Commit Message:
    ipv4: check for NULL idev in ip_route_use_hint()

syzbot was able to trigger a NULL deref in fib_validate_source()
in an old tree [1].

It appears the bug exists in latest trees.

All calls to __in_dev_get_rcu() must be checked for a NULL result.

[1]
general protection fault
  Parent Hashes: 3584718cf2ec7e79b6814f2596dcf398c5fb2eca
  Refs:  probably for non-canonical address 0xdffffc0000000000: 0000 [#1] SMP KASAN
KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
CPU: 2 PID: 3257 Comm: syz-executor.3 Not tainted 5.10.0-syzkaller #0
Hardware name: QEMU Standard PC (Q35 + ICH9

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a NULL pointer dereference in ip_route_use_hint by ensuring __in_dev_get_rcu() results are checked for NULL.', 'keywords': 'NULL dereference, ipv4, ip_route_use_hint', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 246331e3f1eac905170a923f0ec76725c2558232
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 246331e3f1eac905170a923f0ec76725c2558232
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713922285
  Commit Message:
    bpf: allow struct bpf_wq to be embedded in arraymaps and hashmaps

Currently bpf_wq_cancel_and_free() is just a placeholder as there is
no memory allocation for bpf_wq just yet.

Again
  Parent Hashes: d940c9b94d7e6d9cff288623e3e8bf5fdea98b79
  Refs:  duplication of the bpf_timer approach

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240420-bpf_wq-v2-9-6c986a5a741f@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Allow embedding of struct bpf_wq in arraymaps and hashmaps.', 'keywords': 'bpf_wq,arraymaps,hashmaps', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d940c9b94d7e6d9cff288623e3e8bf5fdea98b79
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d940c9b94d7e6d9cff288623e3e8bf5fdea98b79
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713922285
  Commit Message:
    bpf: add support for KF_ARG_PTR_TO_WORKQUEUE

Introduce support for KF_ARG_PTR_TO_WORKQUEUE. The kfuncs will use bpf_wq
as argument and that will be recognized as workqueue argument by verifier.
bpf_wq_kern casting can happen inside kfunc
  Parent Hashes: ad2c03e691be3268eefc75ff1d892db3f0e79f62
  Refs:  but using bpf_wq in
argument makes life easier for users who work with non-kern type in BPF
progs.

Duplicate process_timer_func into process_wq_func.
meta argument is only needed to ensure bpf_wq_init's workqueue and map
arguments are coming from the same map (map_uid logic is necessary for
correct inner-map handling)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds support for KF_ARG_PTR_TO_WORKQUEUE to recognize workqueue arguments within kfuncs for eBPF programs.', 'keywords': 'KF_ARG_PTR_TO_WORKQUEUE,bpf_wq,verifier', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ad2c03e691be3268eefc75ff1d892db3f0e79f62
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ad2c03e691be3268eefc75ff1d892db3f0e79f62
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713922284
  Commit Message:
    bpf: verifier: bail out if the argument is not a map

When a kfunc is declared with a KF_ARG_PTR_TO_MAP
  Parent Hashes: f1d0a2fbb0088675cceeab73d1f4b4308b289984
  Refs:  we should have
reg->map_ptr set to a non NULL value

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a check to ensure reg->map_ptr is non-NULL when kfunc declares with KF_ARG_PTR_TO_MAP.', 'keywords': 'bpf,verifier,map', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f1d0a2fbb0088675cceeab73d1f4b4308b289984
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f1d0a2fbb0088675cceeab73d1f4b4308b289984
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713922284
  Commit Message:
    tools: sync include/uapi/linux/bpf.h

cp include/uapi/linux/bpf.h tools/include/uapi/linux/bpf.h

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240420-bpf_wq-v2-6-6c986a5a741f@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: d56b63cf0c0f71e1b2e04dd8220b408f049e67ff
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Syncs bpf.h header files between include and tools directories.', 'keywords': 'sync,uapi,bpf.h', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: d56b63cf0c0f71e1b2e04dd8220b408f049e67ff
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d56b63cf0c0f71e1b2e04dd8220b408f049e67ff
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713922284
  Commit Message:
    bpf: add support for bpf_wq user type

Mostly a copy/paste from the bpf_timer API
  Parent Hashes: fc22d9495f0b32d75b5d25a17b300b7aad05c55d
  Refs:  without the initialization
and free

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added support for a new bpf_wq user type in eBPF, similar to bpf_timer API.', 'keywords': 'bpf_wq,user,type', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fc22d9495f0b32d75b5d25a17b300b7aad05c55d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fc22d9495f0b32d75b5d25a17b300b7aad05c55d
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713922284
  Commit Message:
    bpf: replace bpf_timer_cancel_and_free with a generic helper

Same reason than most bpf_timer* functions
  Parent Hashes: 073f11b0264310b85754b6a0946afee753790c66
  Refs:  we need almost the same for
workqueues.
So extract the generic part out of it so bpf_wq_cancel_and_free can reuse
it.

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240420-bpf_wq-v2-4-6c986a5a741f@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor bpf_timer_cancel_and_free to a generic helper for reuse in bpf_wq_cancel_and_free.', 'keywords': 'bpf timer helper', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 073f11b0264310b85754b6a0946afee753790c66
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 073f11b0264310b85754b6a0946afee753790c66
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713922284
  Commit Message:
    bpf: replace bpf_timer_set_callback with a generic helper

In the same way we have a generic __bpf_async_init()
  Parent Hashes: 56b4a177ae6322173360a93ea828ad18570a5a14
  Refs:  we also need
to share code between timer and workqueue for the set_callback call.

We just add an unused flags parameter

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit replaces bpf_timer_set_callback with a generic helper function for shared code between timer and workqueue.', 'keywords': 'bpf,generic,helper', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 56b4a177ae6322173360a93ea828ad18570a5a14
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 56b4a177ae6322173360a93ea828ad18570a5a14
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713922284
  Commit Message:
    bpf: replace bpf_timer_init with a generic helper

No code change except for the new flags argument being stored in the
local data struct.

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240420-bpf_wq-v2-2-6c986a5a741f@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: be2749beff62e0d63cf97fe63cabc79a68443139
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit replaces bpf_timer_init with a generic helper function while adding a new flags argument.', 'keywords': 'bpf_timer_init,generic helper,flags argument', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: be2749beff62e0d63cf97fe63cabc79a68443139
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: be2749beff62e0d63cf97fe63cabc79a68443139
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1713922284
  Commit Message:
    bpf: make timer data struct more generic

To be able to add workqueues and reuse most of the timer code
  Parent Hashes: a7de265cb2d849f8986a197499ad58dca0a4f209
  Refs:  we need
to make bpf_hrtimer more generic.

There is no code change except that the new struct gets a new u64 flags
attribute. We are still below 2 cache lines

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor the bpf_hrtimer to be more generic and reusable for workqueues.', 'keywords': 'bpf_hrtimer,generic,reusable', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b240fc56b8fd5d383bd00e59ddf67a4f66b86bb8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b240fc56b8fd5d383bd00e59ddf67a4f66b86bb8
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1713820892
  Commit Message:
    Merge branch 'net-dsa-vsc73xx-convert-to-phylink-and-do-some-cleanup'

Pawel Dembicki says:

====================
net: dsa: vsc73xx: convert to PHYLINK and do some cleanup

This patch series is a result of splitting a larger patch series [0]
  Parent Hashes: c51db4ac10d57c366f9a92121e3889bfc6c324cd 96944aafaaa64e6ead1d3d227a1493dd8196a827
  Refs: 
where some parts needed to be refactored.

The first patch switches from a poll loop to read_poll_timeout.

The second patch is a simple conversion to phylink because adjust_link
won't work anymore.

The third patch is preparation for future use. Using the
"phy_interface_mode_is_rgmii" macro allows for the proper recognition
of all RGMII modes.

Patches 4-5 involve some cleanup: The fourth patch introduces
a definition with the maximum number of ports to avoid using
magic numbers. The next one fills in documentation.

[0] https://patchwork.kernel.org/project/netdevbpf/list/?series=841034&state=%2A&archive=both
====================

Link: https://lore.kernel.org/r/20240417205048.3542839-1-paweldembicki@gmail.com
Signed-off-by: Jakub Kicinski <kuba@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit converts net-dsa-vsc73xx to PHYLINK and includes code cleanup and refactoring.', 'keywords': 'PHYLINK, cleanup, refactoring', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 584ed2f76ff5fe360d87a04d17b6520c7999e06b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 584ed2f76ff5fe360d87a04d17b6520c7999e06b
  Author Name: Johannes Berg
  Author Email: johannes.berg@intel.com
  Commit Date: 1713817720
  Commit Message:
    um: vector: fix bpfflash parameter evaluation

With W=1 the build complains about a pointer compared to
zero
  Parent Hashes: e3cce8d87d6407f83a5741c3c5d54bf1365c6ac6
  Refs:  clearly the result should've been compared.

Fixes: 9807019a62dc ("um: Loadable BPF "Firmware" for vector drivers")
Signed-off-by: Johannes Berg <johannes.berg@intel.com>
Reviewed-by: Tiwei Bie <tiwei.btw@antgroup.com>
Signed-off-by: Richard Weinberger <richard@nod.at>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes pointer comparison issue in bpfflash parameter evaluation for vector drivers in UML.', 'keywords': 'bpfflash,vector,UML', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 5bcf0dcbf9066348058b88a510c57f70f384c92c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5bcf0dcbf9066348058b88a510c57f70f384c92c
  Author Name: Toke Høiland-Jørgensen
  Author Email: toke@redhat.com
  Commit Date: 1713806681
  Commit Message:
    xdp: use flags field to disambiguate broadcast redirect

When redirecting a packet using XDP
  Parent Hashes: c6f48506ba30c722dd9d89aa6a40eb1926277dff
  Refs:  the bpf_redirect_map() helper will set
up the redirect destination information in struct bpf_redirect_info (using
the __bpf_xdp_redirect_map() helper function)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit utilizes flags to clarify broadcast redirects in XDP packet redirection.', 'keywords': 'xdp, broadcast, redirect', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: a7de265cb2d849f8986a197499ad58dca0a4f209
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a7de265cb2d849f8986a197499ad58dca0a4f209
  Author Name: Rafael Passos
  Author Email: rafael@rcpassos.me
  Commit Date: 1713800888
  Commit Message:
    bpf: Fix typos in comments

Found the following typos in comments
  Parent Hashes: e1a7545981e2086feaa40dcb7b0db8de0bdada19
  Refs:  and fixed them:

s/unpriviledged/unprivileged/
s/reponsible/responsible/
s/possiblities/possibilities/
s/Divison/Division/
s/precsion/precision/
s/havea/have a/
s/reponsible/responsible/
s/responsibile/responsible/
s/tigher/tighter/
s/respecitve/respective/

Signed-off-by: Rafael Passos <rafael@rcpassos.me>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/6af7deb4-bb24-49e8-b3f1-8dd410597337@smtp-relay.sendinblue.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed multiple typos in comments in the bpf subsystem code.', 'keywords': 'typos, comments, bpf', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: c6f48506ba30c722dd9d89aa6a40eb1926277dff
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c6f48506ba30c722dd9d89aa6a40eb1926277dff
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1713799565
  Commit Message:
    arm32
  Parent Hashes: 10541b374aa05c8118cc6a529a615882e53f261b
  Refs:  bpf: Reimplement sign-extension mov instruction

The current implementation of the mov instruction with sign extension has the
following problems:

  1. It clobbers the source register if it is not stacked because it
     sign extends the source and then moves it to the destination.
  2. If the dst_reg is stacked

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit reimplements the ARM32 sign-extension mov instruction to address issues with source register clobbering and stacked destination registers.', 'keywords': 'ARM32, sign-extension, mov instruction', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e1a7545981e2086feaa40dcb7b0db8de0bdada19
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e1a7545981e2086feaa40dcb7b0db8de0bdada19
  Author Name: Rafael Passos
  Author Email: rafael@rcpassos.me
  Commit Date: 1713798725
  Commit Message:
    bpf: Fix typo in function save_aux_ptr_type

I found this typo in the save_aux_ptr_type function.
s/allow_trust_missmatch/allow_trust_mismatch/
I did not find this anywhere else in the codebase.

Signed-off-by: Rafael Passos <rafael@rcpassos.me>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/fbe1d636-8172-4698-9a5a-5a3444b55322@smtp-relay.sendinblue.com

  Parent Hashes: 735f5b8a7ccf383e50d76f7d1c25769eee474812
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Fixes a typo in the save_aux_ptr_type function's variable name.", 'keywords': 'typo, save_aux_ptr_type, fix', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 735f5b8a7ccf383e50d76f7d1c25769eee474812
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 735f5b8a7ccf383e50d76f7d1c25769eee474812
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1713719352
  Commit Message:
    bpf
  Parent Hashes: db50040d09cc511889b2c949a0c93d017e44f081
  Refs:  docs: Fix formatting nit in instruction-set.rst

Other places that had pseudocode were prefixed with ::
so as to appear in a literal block

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes formatting in the instruction-set documentation by using pseudocode blocks.', 'keywords': 'formatting, pseudocode, documentation', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: db50040d09cc511889b2c949a0c93d017e44f081
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: db50040d09cc511889b2c949a0c93d017e44f081
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1713719336
  Commit Message:
    bpf
  Parent Hashes: 2ea0aa535818622395fb55e01086ef2a490fc734
  Refs:  docs: Clarify helper ID and pointer terms in instruction-set.rst

Per IETF 119 meeting discussion and mailing list discussion at
https://mailarchive.ietf.org/arch/msg/bpf/2JwWQwFdOeMGv0VTbD0CKWwAOEA/
the following changes are made.

First

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Clarifies helper ID and pointer terms in bpf instruction-set documentation based on IETF and mailing list discussions.', 'keywords': 'documentation,helper ID,pointer', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 63a51820d29bdfcf52abed2db2d32b4f6843988e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 63a51820d29bdfcf52abed2db2d32b4f6843988e
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1713572009
  Commit Message:
    selftests/bpf: Use connect_to_addr in sk_assign

This patch uses public helper connect_to_addr() exported in
network_helpers.h instead of the local defined function connect_to_server()
in prog_tests/sk_assign.c. This can avoid duplicate code.

The code that sets SO_SNDTIMEO timeout as timeo_sec (3s) can be dropped
  Parent Hashes: 805b4d90c0df79a88907623b2528954a0125313d
  Refs: 
since connect_to_addr() sets default timeout as 3s.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/98fdd384872bda10b2adb052e900a2212c9047b9.1713427236.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor sk_assign test by replacing connect_to_server with connect_to_addr to reduce code duplication.', 'keywords': 'connect_to_addr, sk_assign, refactor', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 805b4d90c0df79a88907623b2528954a0125313d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 805b4d90c0df79a88907623b2528954a0125313d
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1713572009
  Commit Message:
    selftests/bpf: Use connect_to_addr in cls_redirect

This patch uses public helper connect_to_addr() exported in
network_helpers.h instead of the local defined function connect_to_server()
in prog_tests/cls_redirect.c. This can avoid duplicate code.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/4a03ac92d2d392f8721f398fa449a83ac75577bc.1713427236.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: db9994d022ecd42006354609f6e4e3f57e5a4b03
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor cls_redirect test to use connect_to_addr helper to avoid code duplication.', 'keywords': 'selftests,bpf,refactor', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: db9994d022ecd42006354609f6e4e3f57e5a4b03
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: db9994d022ecd42006354609f6e4e3f57e5a4b03
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1713572008
  Commit Message:
    selftests/bpf: Update arguments of connect_to_addr

Move the third argument "int type" of connect_to_addr() to the first one
which is closer to how the socket syscall is doing it. And add a
network_helper_opts argument as the fourth one. Then change its usages in
sock_addr.c too.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/088ea8a95055f93409c5f57d12f0e58d43059ac4.1713427236.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: a2e4979536c440838794ee292955ce9ed55ad181
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Reorder and update arguments of connect_to_addr in selftests/bpf to match socket syscall style.', 'keywords': 'connect_to_addr, arguments, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: a2e4979536c440838794ee292955ce9ed55ad181
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a2e4979536c440838794ee292955ce9ed55ad181
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1713572008
  Commit Message:
    selftests/bpf: Use start_server_addr in sk_assign

Include network_helpers.h in prog_tests/sk_assign.c
  Parent Hashes: 9851382fb3697efb2f4234d70596bd845b3af535
  Refs:  use the newly
added public helper start_server_addr() instead of the local defined
function start_server(). This can avoid duplicate code.

The code that sets SO_RCVTIMEO timeout as timeo_sec (3s) can be dropped

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactored sk_assign.c to use public helper start_server_addr and removed duplicate timeout setting.', 'keywords': 'refactor, sk_assign, network_helpers', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 9851382fb3697efb2f4234d70596bd845b3af535
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9851382fb3697efb2f4234d70596bd845b3af535
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1713572008
  Commit Message:
    selftests/bpf: Use start_server_addr in cls_redirect

Include network_helpers.h in prog_tests/cls_redirect.c
  Parent Hashes: 9c598a83b7eab7b05002911fd25b0be7b996ce6d
  Refs:  use the newly
added public helper start_server_addr() instead of the local defined
function start_server(). This can avoid duplicate code.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/13f336cb4c6680175d50bb963d9532e11528c758.1713427236.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor selftests to use start_server_addr in cls_redirect for code reuse.', 'keywords': 'start_server_addr,code reuse,selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 9c598a83b7eab7b05002911fd25b0be7b996ce6d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9c598a83b7eab7b05002911fd25b0be7b996ce6d
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1713572008
  Commit Message:
    selftests/bpf: Add start_server_addr helper

In order to pair up with connect_to_addr()
  Parent Hashes: 462e5e2a5938d0241ad146d21dd0da1be8e7eaf0
  Refs:  this patch adds a new helper
start_server_addr()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Added a new helper function 'start_server_addr' to bpf selftests for pairing with 'connect_to_addr'.", 'keywords': 'helper,selftests,bpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 50449ca66cc5a8cbc64749cf4b9f3d3fc5f4b457
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 50449ca66cc5a8cbc64749cf4b9f3d3fc5f4b457
  Author Name: Yaxiong Tian
  Author Email: tianyaxiong@kylinos.cn
  Commit Date: 1713540780
  Commit Message:
    arm64: hibernate: Fix level3 translation fault in swsusp_save()

On arm64 machines
  Parent Hashes: 34e526cb7d46726b2ae5f83f2892d00ebb088509
  Refs:  swsusp_save() faults if it attempts to access
MEMBLOCK_NOMAP memory ranges. This can be reproduced in QEMU using UEFI
when booting with rodata=off debug_pagealloc=off and CONFIG_KFENCE=n:

  Unable to handle kernel paging request at virtual address ffffff8000000000
  Mem abort info:
    ESR = 0x0000000096000007
    EC = 0x25: DABT (current EL)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix the translation fault in swsusp_save() for arm64 during hibernation.', 'keywords': 'arm64, hibernate, translation', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 61ba075d9911d2a6db181fbb5602762a24d5d0a9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 61ba075d9911d2a6db181fbb5602762a24d5d0a9
  Author Name: Arnaldo Carvalho de Melo
  Author Email: acme@redhat.com
  Commit Date: 1713489772
  Commit Message:
    Revert "tools headers: Remove almost unused copy of uapi/stat.h
  Parent Hashes: c15ed4442981ccf8e7e0d885f5cb500400dde9d7
  Refs:  add few conditional defines"

This reverts commit a672af9139a843eb7a48fd7846bb6df8f81b5f86.

By now it is not used for building tools/perf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit reverts a previous removal of a uapi/stat.h copy for building perf tools.', 'keywords': 'revert, uapi/stat, tools', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: d9bd1d4264baddf7ab8baae86e91674d369f22de
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d9bd1d4264baddf7ab8baae86e91674d369f22de
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1713489771
  Commit Message:
    perf test bpf-counters: Add test for BPF event modifier

Refactor test to better enable sharing of logic
  Parent Hashes: eb4d27cf9aef3e6c9bcaf8fa1a1cadc2433d847b
  Refs:  to give an idea of
progress and introduce test functions. Add test of measuring both
cycles and cycles:b simultaneously.

Signed-off-by: Ian Rogers <irogers@google.com>
Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Song Liu <song@kernel.org>
Cc: Thomas Richter <tmricht@linux.ibm.com>
Link: https://lore.kernel.org/r/20240416170014.985191-2-irogers@google.com
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors perf test to add BPF event modifier and improve test logic sharing.', 'keywords': 'perf test, BPF event, refactor', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: eb4d27cf9aef3e6c9bcaf8fa1a1cadc2433d847b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: eb4d27cf9aef3e6c9bcaf8fa1a1cadc2433d847b
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1713489771
  Commit Message:
    perf docs: Document bpf event modifier

Document that 'b' is used as a modifier to make an event use a BPF
counter.

Fixes: 01bd8efcec444468 ("perf stat: Introduce ':b' modifier")
Signed-off-by: Ian Rogers <irogers@google.com>
Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Song Liu <song@kernel.org>
Cc: Thomas Richter <tmricht@linux.ibm.com>
Link: https://lore.kernel.org/r/20240416170014.985191-1-irogers@google.com
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

  Parent Hashes: 6b718ac6874c2233b8dec369a8a377d6c5b638e6
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Document the 'b' modifier used in perf events for BPF counters.", 'keywords': 'perf, BPF, event', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 462e5e2a5938d0241ad146d21dd0da1be8e7eaf0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 462e5e2a5938d0241ad146d21dd0da1be8e7eaf0
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1713456201
  Commit Message:
    bpf: Fix JIT of is_mov_percpu_addr instruction.

The codegen for is_mov_percpu_addr instruction works for rax/r8 registers
only. Fix it to generate proper x86 byte code for other registers.

Fixes: 7bdbf7446305 ("bpf: add special internal-only MOV instruction to resolve per-CPU addrs")
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240417214406.15788-1-alexei.starovoitov@gmail.com

  Parent Hashes: e739e01d8df8bf26dbc9dcaeaee3c8c55e8ffa71
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix JIT to properly handle is_mov_percpu_addr instruction for x86 registers other than rax/r8.', 'keywords': 'JIT, x86, percpu', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6fc6d7f59376c7cda4d866159b29fe96d96afe83
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6fc6d7f59376c7cda4d866159b29fe96d96afe83
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1713403119
  Commit Message:
    selftests: adopt BPF's approach to quieter builds

selftest build is fairly noisy
  Parent Hashes: 2bd99aef1b19e6da09eff692bc0a09d61d785782
  Refs:  it's easy to miss warnings.
It's standard practice to add alternative messages in
the Makefile. I was grepping for existing solutions

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit reduces noise in selftest builds by adopting BPF's approach to quieter build outputs.", 'keywords': 'selftests, quieter builds, Makefile', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e739e01d8df8bf26dbc9dcaeaee3c8c55e8ffa71
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e739e01d8df8bf26dbc9dcaeaee3c8c55e8ffa71
  Author Name: Quentin Deslandes
  Author Email: qde@naccy.de
  Commit Date: 1713360242
  Commit Message:
    libbpf: Fix dump of subsequent char arrays

When dumping a character array
  Parent Hashes: 9213e52970a5997c9eb176c7afcc6ec67b1b1e6f
  Refs:  libbpf will watch for a '\0' and set
is_array_terminated=true if found. This prevents libbpf from printing
the remaining characters of the array

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes libbpf to correctly handle termination of character arrays when dumping.', 'keywords': 'libbpf, character, arrays', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9213e52970a5997c9eb176c7afcc6ec67b1b1e6f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9213e52970a5997c9eb176c7afcc6ec67b1b1e6f
  Author Name: Quentin Deslandes
  Author Email: qde@naccy.de
  Commit Date: 1713360224
  Commit Message:
    libbpf: Fix misaligned array closing bracket

In btf_dump_array_data()
  Parent Hashes: ad2d22b617b7c0ca2cff4da6dc063183822484bb
  Refs:  libbpf will call btf_dump_dump_type_data() for
each element. For an array of characters

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Fixes misaligned array closing bracket in libbpf's btf_dump_array_data function.", 'keywords': 'libbpf, array, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: fc29e04ae1ad4c99422c0b8ae4b43cfe99c70429
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fc29e04ae1ad4c99422c0b8ae4b43cfe99c70429
  Author Name: Jesper Dangaard Brouer
  Author Email: hawk@kernel.org
  Commit Date: 1713305442
  Commit Message:
    cgroup/rstat: add cgroup_rstat_lock helpers and tracepoints

This commit enhances the ability to troubleshoot the global
cgroup_rstat_lock by introducing wrapper helper functions for the lock
along with associated tracepoints.

Although global
  Parent Hashes: 15b8b9ab5081d8dce9aa27a594ba4db2c29cefc0
  Refs:  the cgroup_rstat_lock helper APIs and tracepoints take
arguments such as cgroup pointer and cpu_in_loop variable. This
adjustment is made because flushing occurs per cgroup despite the lock
being global. Hence

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds helper functions and tracepoints for better management and troubleshooting of cgroup_rstat_lock.', 'keywords': 'cgroup,rstat,tracepoints', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: ad2d22b617b7c0ca2cff4da6dc063183822484bb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ad2d22b617b7c0ca2cff4da6dc063183822484bb
  Author Name: Quentin Monnet
  Author Email: qmo@kernel.org
  Commit Date: 1713283105
  Commit Message:
    bpftool: Address minor issues in bash completion

This commit contains a series of clean-ups and fixes for bpftool's bash
completion file:

- Make sure all local variables are declared as such.
- Make sure variables are initialised before being read.
- Update ELF section ("maps" -> ".maps") for looking up map names in
  object files.
- Fix call to _init_completion.
- Move definition for MAP_TYPE and PROG_TYPE higher up in the scope to
  avoid defining them multiple times
  Parent Hashes: 986e7663f98ec7441d9d948263ec0dda71e7479f
  Refs:  reuse MAP_TYPE where relevant.
- Simplify completion for "duration" keyword in "bpftool prog profile".
- Fix completion for "bpftool struct_ops register" and "bpftool link
  (pin|detach)" where we would repeatedly suggest file names instead of
  suggesting just one name.
- Fix completion for "bpftool iter pin ... map MAP" to account for the
  "map" keyword.
- Add missing "detach" suggestion for "bpftool link".

Signed-off-by: Quentin Monnet <qmo@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240413011427.14402-3-qmo@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes and refines bash completion in bpftool by addressing variable declarations, initialization, and improving command completion suggestions.', 'keywords': 'bash completion, bpftool, fixes', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 986e7663f98ec7441d9d948263ec0dda71e7479f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 986e7663f98ec7441d9d948263ec0dda71e7479f
  Author Name: Quentin Monnet
  Author Email: qmo@kernel.org
  Commit Date: 1713283105
  Commit Message:
    bpftool: Update documentation where progs/maps can be passed by name

When using references to BPF programs
  Parent Hashes: 1f586614f3ffa80fdf2116b2a1bebcdb5969cef8
  Refs:  bpftool supports passing programs
by name on the command line. The manual pages for "bpftool prog" and
"bpftool map" (for prog_array updates) mention it

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update bpftool documentation to include support for passing programs and maps by name on the command line.', 'keywords': 'bpftool, documentation, command-line', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1f586614f3ffa80fdf2116b2a1bebcdb5969cef8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1f586614f3ffa80fdf2116b2a1bebcdb5969cef8
  Author Name: Harishankar Vishwanathan
  Author Email: harishankar.vishwanathan@gmail.com
  Commit Date: 1713282927
  Commit Message:
    bpf: Harden and/or/xor value tracking in verifier

This patch addresses a latent unsoundness issue in the
scalar(32)_min_max_and/or/xor functions. While it is not a bugfix
  Parent Hashes: dac045fc9fa653e250f991ea8350b32cfec690d2
  Refs: 
it ensures that the functions produce sound outputs for all inputs.

The issue occurs in these functions when setting signed bounds. The
following example illustrates the issue for scalar_min_max_and()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit hardens the and/or/xor value tracking in the eBPF verifier to address potential unsoundness.', 'keywords': 'harden, verifier, tracking', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: dac045fc9fa653e250f991ea8350b32cfec690d2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dac045fc9fa653e250f991ea8350b32cfec690d2
  Author Name: Chen Pei
  Author Email: cp0613@linux.alibaba.com
  Commit Date: 1713280938
  Commit Message:
    bpf
  Parent Hashes: fc5eb4a84e4c063e75a6a6e92308e9533c0f19b5
  Refs:  tests: Fix typos in comments

Currently

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix typographical errors in test comment documentation for clarity.', 'keywords': 'typos,test,comments', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 10541b374aa05c8118cc6a529a615882e53f261b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 10541b374aa05c8118cc6a529a615882e53f261b
  Author Name: Xu Kuohai
  Author Email: xukuohai@huawei.com
  Commit Date: 1713280781
  Commit Message:
    riscv
  Parent Hashes: dc7d7447b56bcc9cf79a9c22e4edad200a298e4c
  Refs:  bpf: Fix incorrect runtime stats

When __bpf_prog_enter() returns zero

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed incorrect runtime statistics when __bpf_prog_enter() returns zero for riscv architecture.', 'keywords': 'runtime, stats, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: dc7d7447b56bcc9cf79a9c22e4edad200a298e4c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dc7d7447b56bcc9cf79a9c22e4edad200a298e4c
  Author Name: Xu Kuohai
  Author Email: xukuohai@huawei.com
  Commit Date: 1713280770
  Commit Message:
    bpf
  Parent Hashes: 37eacb9f6e89fb399a79e952bc9c78eb3e16290e
  Refs:  arm64: Fix incorrect runtime stats

When __bpf_prog_enter() returns zero

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix incorrect runtime statistics on ARM64 when __bpf_prog_enter() returns zero.', 'keywords': 'ARM64, fix, runtime', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fc5eb4a84e4c063e75a6a6e92308e9533c0f19b5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fc5eb4a84e4c063e75a6a6e92308e9533c0f19b5
  Author Name: Ard Biesheuvel
  Author Email: ardb@kernel.org
  Commit Date: 1713278113
  Commit Message:
    btf: Avoid weak external references

If the BTF code is enabled in the build configuration
  Parent Hashes: 4d4992ff587604455e8843a0e76dce0b99175319
  Refs:  the start/stop
BTF markers are guaranteed to exist. Only when CONFIG_DEBUG_INFO_BTF=n

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies BTF code to avoid weak external references when CONFIG_DEBUG_INFO_BTF is not set.', 'keywords': 'BTF, weak references, CONFIG_DEBUG_INFO_BTF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 854dd99b5ddc9d90e31e5f112462a5994dd31810
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 854dd99b5ddc9d90e31e5f112462a5994dd31810
  Author Name: Ingo Molnar
  Author Email: mingo@kernel.org
  Commit Date: 1713126926
  Commit Message:
    perf/bpf: Mark perf_event_set_bpf_handler() and perf_event_free_bpf_handler() as inline too

They can be unused with certain Kconfig variations:

  kernel/events/core.c:9622:13: warning: ‘perf_event_free_bpf_handler’ defined but not used [-Wunused-function]
  kernel/events/core.c:9586:12: warning: ‘perf_event_set_bpf_handler’ defined but not used [-Wunused-function]

Since they are both single-use
  Parent Hashes: e224d1c1fb93f258030186b4878abe105c296ac1
  Refs:  mark them inline.

Signed-off-by: Ingo Molnar <mingo@kernel.org>
Cc: linux-kernel@vger.kernel.org
Cc: Kyle Huey <khuey@kylehuey.com>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Marking perf_event_set_bpf_handler and perf_event_free_bpf_handler as inline to avoid unused function warnings.', 'keywords': 'inline, perf_event, unused', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 459fee7b508231cd4622b3bd94aaa85e8e16b888
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 459fee7b508231cd4622b3bd94aaa85e8e16b888
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1712955242
  Commit Message:
    perf bench uprobe: Remove lib64 from libc.so.6 binary path

bpf_program__attach_uprobe_opts will search LD_LIBRARY_PATH and so
specifying `/lib64` is unnecessary and causes failures for libc.so.6
paths like `/lib/x86_64-linux-gnu/libc.so.6`.

Fixes: 7b47623b8cae8149 ("perf bench uprobe trace_printk: Add entry attaching an BPF program that does a trace_printk")
Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Andrei Vagin <avagin@google.com>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: Kees Kook <keescook@chromium.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Link: https://lore.kernel.org/r/20240406040911.1603801-1-irogers@google.com
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

  Parent Hashes: 2b8c43e7688fa61b842ea2b21d4159c67d6f2fd1
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed unnecessary /lib64 directory from libc.so.6 path to prevent failures in perf bench uprobe.', 'keywords': 'libc.so.6, LD_LIBRARY_PATH, uprobe', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 37eacb9f6e89fb399a79e952bc9c78eb3e16290e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 37eacb9f6e89fb399a79e952bc9c78eb3e16290e
  Author Name: Anton Protopopov
  Author Email: aspsk@isovalent.com
  Commit Date: 1712939840
  Commit Message:
    bpf: Fix a verifier verbose message

Long ago a map file descriptor in a pseudo ldimm64 instruction could
only be present as an immediate value insn[0].imm
  Parent Hashes: 6648e613226e18897231ab5e42ffc29e63fa3365
  Refs:  and thus this value
was used in a verbose verifier message printed when the file descriptor
wasn't valid. Since addition of BPF_PSEUDO_MAP_IDX_VALUE/BPF_PSEUDO_MAP_IDX
the insn[0].imm field can also contain an index pointing to the file
descriptor in the attr.fd_array array. However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a verbose message issue in the eBPF verifier for map descriptors.', 'keywords': 'fix, verifier, message', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4d4992ff587604455e8843a0e76dce0b99175319
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4d4992ff587604455e8843a0e76dce0b99175319
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1712939121
  Commit Message:
    selftests/bpf: Add read_trace_pipe_iter function

We have two printk tests reading trace_pipe in non blocking way
  Parent Hashes: 23cc4fe44f1df5ccce088a7c9398f96794047c2a
  Refs: 
with the very same code. Moving that in new read_trace_pipe_iter
function.

Current read_trace_pipe is used from samples/bpf and needs to
do blocking read and printf of the trace_pipe data

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor selftests/bpf to introduce a new non-blocking read_trace_pipe_iter function.', 'keywords': 'read_trace_pipe_iter, selftests, non-blocking', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 23cc4fe44f1df5ccce088a7c9398f96794047c2a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 23cc4fe44f1df5ccce088a7c9398f96794047c2a
  Author Name: Thorsten Blum
  Author Email: thorsten.blum@toblux.com
  Commit Date: 1712938749
  Commit Message:
    bpftool: Fix typo in error message

s/at at/at a/

Signed-off-by: Thorsten Blum <thorsten.blum@toblux.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Quentin Monnet <qmo@kernel.org>
Link: https://lore.kernel.org/bpf/20240411164258.533063-3-thorsten.blum@toblux.com

  Parent Hashes: c53e853c2d8145859f57c63662030f7aaa61cfdc
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix a typo in the error message within bpftool utility.', 'keywords': 'bpftool, typo, error message', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 93d3fde7fd19c2e2cde7220e7986f9a75e9c5680
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 93d3fde7fd19c2e2cde7220e7986f9a75e9c5680
  Author Name: Ingo Molnar
  Author Email: mingo@kernel.org
  Commit Date: 1712915760
  Commit Message:
    perf/bpf: Change the !CONFIG_BPF_SYSCALL stubs to static inlines

Otherwise the compiler will be unhappy if they go unused
  Parent Hashes: a265c9f6d52ac760e6e572bac73a11b60b998779
  Refs: 
which they do on allnoconfigs.

Signed-off-by: Ingo Molnar <mingo@kernel.org>
Cc: Kyle Huey <me@kylehuey.com>
Link: https://lore.kernel.org/r/ZhkE9F4dyfR2dH2D@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Change stubs to static inlines in perf/bpf to avoid compiler warnings with !CONFIG_BPF_SYSCALL.', 'keywords': 'perf,bpf,stubs', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The syscall interface', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: a265c9f6d52ac760e6e572bac73a11b60b998779
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a265c9f6d52ac760e6e572bac73a11b60b998779
  Author Name: Kyle Huey
  Author Email: me@kylehuey.com
  Commit Date: 1712915391
  Commit Message:
    selftest/bpf: Test a perf BPF program that suppresses side effects

The test sets a hardware breakpoint and uses a BPF program to suppress the
side effects of a perf event sample
  Parent Hashes: c4fcc7d1f41532e878087c7c43f4cf247604d68b
  Refs:  including I/O availability signals

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest for perf BPF program to suppress side effects of perf event samples.', 'keywords': 'selftest, perf, side-effects', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: c4fcc7d1f41532e878087c7c43f4cf247604d68b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c4fcc7d1f41532e878087c7c43f4cf247604d68b
  Author Name: Kyle Huey
  Author Email: me@kylehuey.com
  Commit Date: 1712915390
  Commit Message:
    perf/bpf: Allow a BPF program to suppress all sample side effects

Returning zero from a BPF program attached to a perf event already
suppresses any data output. Return early from __perf_event_overflow() in
this case so it will also suppress event_limit accounting
  Parent Hashes: 76f6d58845829e5d6ef55532e67a323e7d30c26e
  Refs:  SIGTRAP
generation

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit allows BPF programs to suppress all sample side effects by returning zero from __perf_event_overflow.', 'keywords': 'BPF program, perf event, suppress', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'profile like programs']}
--------------------
--------------------
Processing Commit ID: 76f6d58845829e5d6ef55532e67a323e7d30c26e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 76f6d58845829e5d6ef55532e67a323e7d30c26e
  Author Name: Kyle Huey
  Author Email: me@kylehuey.com
  Commit Date: 1712915390
  Commit Message:
    perf/bpf: Remove unneeded uses_default_overflow_handler()

Now that struct perf_event's orig_overflow_handler is gone
  Parent Hashes: f11f10bfa1ca23b32020b2073aa13131a27978fe
  Refs:  there's no need
for the functions and macros to support looking past overflow_handler to
orig_overflow_handler.

This patch is solely a refactoring and results in no behavior change.

Signed-off-by: Kyle Huey <khuey@kylehuey.com>
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Acked-by: Will Deacon <will@kernel.org>
Acked-by: Song Liu <song@kernel.org>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240412015019.7060-6-khuey@kylehuey.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove unneeded functions in perf/bpf after orig_overflow_handler removal.', 'keywords': 'refactoring, perf, overflow_handler', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: f11f10bfa1ca23b32020b2073aa13131a27978fe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f11f10bfa1ca23b32020b2073aa13131a27978fe
  Author Name: Kyle Huey
  Author Email: me@kylehuey.com
  Commit Date: 1712915389
  Commit Message:
    perf/bpf: Call BPF handler directly
  Parent Hashes: 14e40a9578b70cc5323e55f61292a7e021f6037c
  Refs:  not through overflow machinery

To ultimately allow BPF programs attached to perf events to completely
suppress all of the effects of a perf event overflow (rather than just the
sample output

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit allows BPF programs to suppress all effects of perf event overflow by calling the handler directly.', 'keywords': 'BPF, perf, overflow', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 14e40a9578b70cc5323e55f61292a7e021f6037c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 14e40a9578b70cc5323e55f61292a7e021f6037c
  Author Name: Kyle Huey
  Author Email: me@kylehuey.com
  Commit Date: 1712915389
  Commit Message:
    perf/bpf: Remove #ifdef CONFIG_BPF_SYSCALL from struct perf_event members

This will allow __perf_event_overflow() (which is independent of
CONFIG_BPF_SYSCALL) to use struct perf_event's prog to decide whether to
call bpf_overflow_handler().

Suggested-by: Ingo Molnar <mingo@kernel.org>
Signed-off-by: Kyle Huey <khuey@kylehuey.com>
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Link: https://lore.kernel.org/r/20240412015019.7060-4-khuey@kylehuey.com

  Parent Hashes: 924d934393f98fa6a41d6ea27352faf79c2bbaf6
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove CONFIG_BPF_SYSCALL dependency from perf_event structure to enable independent functionality.', 'keywords': 'perf_event,BPF_SYSCALL,bpf_overflow_handler', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 924d934393f98fa6a41d6ea27352faf79c2bbaf6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 924d934393f98fa6a41d6ea27352faf79c2bbaf6
  Author Name: Kyle Huey
  Author Email: me@kylehuey.com
  Commit Date: 1712915388
  Commit Message:
    perf/bpf: Create bpf_overflow_handler() stub for !CONFIG_BPF_SYSCALL

This will allow __perf_event_overflow() (which is independent of
CONFIG_BPF_SYSCALL) to call bpf_overflow_handler().

Signed-off-by: Kyle Huey <khuey@kylehuey.com>
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Link: https://lore.kernel.org/r/20240412015019.7060-3-khuey@kylehuey.com

  Parent Hashes: 4c03fe11b96bda60610aca77002e83f37b4a2242
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Create a bpf_overflow_handler stub for systems without CONFIG_BPF_SYSCALL.', 'keywords': 'bpf_overflow_handler, CONFIG_BPF_SYSCALL, perf_event_overflow', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 4c03fe11b96bda60610aca77002e83f37b4a2242
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4c03fe11b96bda60610aca77002e83f37b4a2242
  Author Name: Kyle Huey
  Author Email: me@kylehuey.com
  Commit Date: 1712915388
  Commit Message:
    perf/bpf: Reorder bpf_overflow_handler() ahead of __perf_event_overflow()

This will allow __perf_event_overflow() to call bpf_overflow_handler().

Signed-off-by: Kyle Huey <khuey@kylehuey.com>
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Link: https://lore.kernel.org/r/20240412015019.7060-2-khuey@kylehuey.com

  Parent Hashes: acf68d98cae8a60dc4af2e9feaaa799bf0aa5c04
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Reorders function definitions to allow __perf_event_overflow() to call bpf_overflow_handler().', 'keywords': 'bpf reordering overflow', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1e52af7f023c44859868306fac1a4b6b556cf47b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1e52af7f023c44859868306fac1a4b6b556cf47b
  Author Name: Paul E. McKenney
  Author Email: paulmck@kernel.org
  Commit Date: 1712913805
  Commit Message:
    bpf: Choose RCU Tasks based on TASKS_RCU rather than PREEMPTION

The advent of CONFIG_PREEMPT_AUTO
  Parent Hashes: 02b3c5fcdfe46f9c9dd5d3fc199612b13bf47c06
  Refs:  AKA lazy preemption

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates eBPF RCU tasks selection to use TASKS_RCU instead of preemption settings.', 'keywords': 'RCU,TASKS_RCU,PREEMPTION', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c53e853c2d8145859f57c63662030f7aaa61cfdc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c53e853c2d8145859f57c63662030f7aaa61cfdc
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1712862407
  Commit Message:
    Merge branch 'export send_recv_data'

Geliang Tang says:

====================
v5:
 - address Martin's comments for v4 (thanks).
 - update patch 2
  Parent Hashes: d75142dbeb2bd1587b9cc19f841578f541275a64 dc34e44ea6a1c11cc517adc6df527b457acb9eaf
  Refs:  use 'return err' instead of 'return -1/0'.
 - drop patch 3 in v4.

v4:
 - fix a bug in v3

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges branch updates to export send and receive data functions with bug fixes and code improvements.', 'keywords': 'merge, bugfix, export', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: dc34e44ea6a1c11cc517adc6df527b457acb9eaf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dc34e44ea6a1c11cc517adc6df527b457acb9eaf
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1712862402
  Commit Message:
    selftests/bpf: Export send_recv_data helper

This patch extracts the code to send and receive data into a new
helper named send_recv_data() in network_helpers.c and export it
in network_helpers.h.

This helper will be used for MPTCP BPF selftests.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Link: https://lore.kernel.org/r/5231103be91fadcce3674a589542c63b6a5eedd4.1712813933.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 68acca6e6f99b1f928a2c05b92bb1c272edb8ae7
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Export send_recv_data helper for MPTCP BPF selftests in network_helpers files.', 'keywords': 'send_recv_data,BPF,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 68acca6e6f99b1f928a2c05b92bb1c272edb8ae7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 68acca6e6f99b1f928a2c05b92bb1c272edb8ae7
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1712859476
  Commit Message:
    selftests/bpf: Add struct send_recv_arg

Avoid setting total_bytes and stop as global variables
  Parent Hashes: d75142dbeb2bd1587b9cc19f841578f541275a64
  Refs:  this patch adds
a new struct named send_recv_arg to pass arguments between threads. Put
these two variables together with fd into this struct and pass it to
server thread

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add struct send_recv_arg to pass arguments between threads in selftests/bpf.', 'keywords': 'selftests,bpf,struct', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f3408580bac8ce5cd76e7391e529c0a22e7c7eb2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f3408580bac8ce5cd76e7391e529c0a22e7c7eb2
  Author Name: Namhyung Kim
  Author Email: namhyung@kernel.org
  Commit Date: 1712856606
  Commit Message:
    perf lock contention: Add a missing NULL check

I got a report for a failure in BPF verifier on a recent kernel with
perf lock contention command.  It checks task->sighand->siglock without
checking if sighand is NULL or not.  Let's add one.

  ; if (&curr->sighand->siglock == (void *)lock)
  265: (79) r1 = *(u64 *)(r0 +2624)     ; frame1: R0_w=trusted_ptr_task_struct(off=0
  Parent Hashes: 2b8dbf69ec60faf6c7db49e57d7f316409ccec92
  Refs: imm=0)
                                        ;         R1_w=rcu_ptr_or_null_sighand_struct(off=0

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a NULL check in the perf lock contention command for a potential BPF verifier failure.', 'keywords': 'NULL check, BPF verifier, perf lock', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d75142dbeb2bd1587b9cc19f841578f541275a64
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d75142dbeb2bd1587b9cc19f841578f541275a64
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1712856565
  Commit Message:
    selftests/bpf: Fix umount cgroup2 error in test_sockmap

This patch fixes the following "umount cgroup2" error in test_sockmap.c:

 (cgroup_helpers.c:353: errno: Device or resource busy) umount cgroup2

Cgroup fd cg_fd should be closed before cleanup_cgroup_environment().

Fixes: 13a5f3ffd202 ("bpf: Selftests
  Parent Hashes: ffa6b26b4d8a0520b78636ca9373ab842cb3b1a8
  Refs:  sockmap test prog run without setting cgroup")
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/0399983bde729708773416b8488bac2cd5e022b8.1712639568.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit fixes an 'umount cgroup2' error in selftests related to BPF test_sockmap.", 'keywords': 'fix,selftests,cgroup2', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: b912cf042072e12e93faa874265b30cc0aa521b9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b912cf042072e12e93faa874265b30cc0aa521b9
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1712844121
  Commit Message:
    HID: bpf: fix hid_bpf_input_report() when hid-core is not ready

Reported by linux-next:
After merging the hid tree
  Parent Hashes: 685dadafbde29dc3d6b7a13be284d684b06d4d4f
  Refs:  today's linux-next build (x86_64 allmodconfig)
failed like this:

x86_64-linux-gnu-ld: vmlinux.o: in function `hid_bpf_input_report':
(.text+0x1c75181): undefined reference to `hid_input_report'

Caused by commit 9be50ac30a83 ("HID: bpf: allow to inject HID event
from BPF")

I just forgot to put the indirection in place.

Link: https://lore.kernel.org/linux-kernel/20240411105131.7830f966@canb.auug.org.au/
Fixes: 9be50ac30a83 ("HID: bpf: allow to inject HID event from BPF")
Link: https://lore.kernel.org/r/20240411-fix-hid-bpf-v1-1-4ae913031a8c@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes HID BPF input report handling by adding necessary indirection when hid-core is not ready.', 'keywords': 'HID,BPF,fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: ffa6b26b4d8a0520b78636ca9373ab842cb3b1a8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ffa6b26b4d8a0520b78636ca9373ab842cb3b1a8
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1712804335
  Commit Message:
    selftests/bpf: Enable tests for atomics with cpuv4

When looking at Alexei's patch ([1]) which added tests for atomics
  Parent Hashes: ded8c00990b9f84e4daf4b3f4c881bace6cc990e
  Refs: 
I noticed that the tests will be skipped with cpuv4. For example

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable selftests for atomic operations compatibility with cpuv4 in BPF.', 'keywords': 'selftests, atomics, cpuv4', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ded8c00990b9f84e4daf4b3f4c881bace6cc990e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ded8c00990b9f84e4daf4b3f4c881bace6cc990e
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1712803946
  Commit Message:
    Merge branch 'bpf-add-bpf_link-support-for-sk_msg-and-sk_skb-progs'

Yonghong Song says:

====================
bpf: Add bpf_link support for sk_msg and sk_skb progs

One of our internal services started to use sk_msg program and currently
it used existing prog attach/detach2 as demonstrated in selftests.
But attach/detach of all other bpf programs are based on bpf_link.
Consistent attach/detach APIs for all programs will make things easy to
undersand and less error prone. So this patch added bpf_link
support for BPF_PROG_TYPE_SK_MSG. Based on comments from
previous RFC patch
  Parent Hashes: d0a2ba197bcbeaa795c5c961d927bcaf55964669 8ba218e625f0dfb3ef46fe0721dcdf565726ff76
  Refs:  I added BPF_PROG_TYPE_SK_SKB support as well
as both program types have similar treatment w.r.t. bpf_link
handling.

For the patch series

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added bpf_link support for sk_msg and sk_skb programs for consistent API usage.', 'keywords': 'bpf_link, sk_msg, sk_skb', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8ba218e625f0dfb3ef46fe0721dcdf565726ff76
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8ba218e625f0dfb3ef46fe0721dcdf565726ff76
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1712803945
  Commit Message:
    selftests/bpf: Add some tests with new bpf_program__attach_sockmap() APIs

Add a few more tests in sockmap_basic.c and sockmap_listen.c to
test bpf_link based APIs for SK_MSG and SK_SKB programs.
Link attach/detach/update are all tested.

All tests are passed.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Reviewed-by: John Fastabend <john.fastabend@gmail.com>
Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240410043547.3738448-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: a15d58b2bc82abd8c4c994af158b0410424a18d3
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add new tests for bpf_program__attach_sockmap() APIs in the selftests suite.', 'keywords': 'selftests, sockmap, APIs', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: a15d58b2bc82abd8c4c994af158b0410424a18d3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a15d58b2bc82abd8c4c994af158b0410424a18d3
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1712803945
  Commit Message:
    selftests/bpf: Refactor out helper functions for a few tests

These helper functions will be used later new tests as well.
There are no functionality change.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Reviewed-by: John Fastabend <john.fastabend@gmail.com>
Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240410043542.3738166-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 1f3e2091d25b2b140967480177fcaee2f0eebfb1
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor test cases by extracting helper functions for reuse in future tests without changing functionality.', 'keywords': 'selftests, refactor, helper', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 1f3e2091d25b2b140967480177fcaee2f0eebfb1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1f3e2091d25b2b140967480177fcaee2f0eebfb1
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1712803945
  Commit Message:
    bpftool: Add link dump support for BPF_LINK_TYPE_SOCKMAP

An example output looks like:
  $ bpftool link
    1776: sk_skb  prog 49730
            map_id 0  attach_type sk_skb_verdict
            pids test_progs(8424)
    1777: sk_skb  prog 49755
            map_id 0  attach_type sk_skb_stream_verdict
            pids test_progs(8424)
    1778: sk_msg  prog 49770
            map_id 8208  attach_type sk_msg_verdict
            pids test_progs(8424)

Reviewed-by: John Fastabend <john.fastabend@gmail.com>
Reviewed-by: Quentin Monnet <qmo@kernel.org>
Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240410043537.3737928-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 849989af61added13b2a9005608b1cf46f36f88b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds support for link dumping of BPF_LINK_TYPE_SOCKMAP to bpftool.', 'keywords': 'bpftool, link dump, SOCKMAP', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 849989af61added13b2a9005608b1cf46f36f88b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 849989af61added13b2a9005608b1cf46f36f88b
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1712803945
  Commit Message:
    libbpf: Add bpf_link support for BPF_PROG_TYPE_SOCKMAP

Introduce a libbpf API function bpf_program__attach_sockmap()
which allow user to get a bpf_link for their corresponding programs.

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Reviewed-by: John Fastabend <john.fastabend@gmail.com>
Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240410043532.3737722-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 699c23f02c65cbfc3e638f14ce0d70c23a2e1f02
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces a new libbpf API function to attach BPF_PROG_TYPE_SOCKMAP using bpf_link.', 'keywords': 'bpf_link, sockmap, libbpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 699c23f02c65cbfc3e638f14ce0d70c23a2e1f02
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 699c23f02c65cbfc3e638f14ce0d70c23a2e1f02
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1712803945
  Commit Message:
    bpf: Add bpf_link support for sk_msg and sk_skb progs

Add bpf_link support for sk_msg and sk_skb programs. We have an
internal request to support bpf_link for sk_msg programs so user
space can have a uniform handling with bpf_link based libbpf
APIs. Using bpf_link based libbpf API also has a benefit which
makes system robust by decoupling prog life cycle and
attachment life cycle.

Reviewed-by: John Fastabend <john.fastabend@gmail.com>
Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240410043527.3737160-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: d0a2ba197bcbeaa795c5c961d927bcaf55964669
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add bpf_link support for sk_msg and sk_skb programs to enhance robustness and uniform handling with libbpf APIs.', 'keywords': 'bpf_link, sk_msg, sk_skb', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 414e576fb08f108b061cbc1fb964e51ff3467985
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 414e576fb08f108b061cbc1fb964e51ff3467985
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1712782994
  Commit Message:
    Merge branch 'selftests-move-bpf-offload-test-from-bpf-to-net'

Jakub Kicinski says:

====================
selftests: move bpf-offload test from bpf to net

The test_offload.py test fits in networking and bpf equally
well. We started adding more Python tests in networking
and some of the code in test_offload.py can be reused
  Parent Hashes: 2ecd487b670fcbb1ad4893fff1af4aafdecb6023 6ce2b689932ba8288ceef9a82c1caf029b0b23f9
  Refs: 
so move it to networking. Looks like it bit rotted over
time and some fixes are needed.

Admittedly more code could be extracted but I only had
the time for a minor cleanup :(
====================

Link: https://lore.kernel.org/r/20240409031549.3531084-1-kuba@kernel.org
Signed-off-by: Jakub Kicinski <kuba@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Move bpf-offload test from bpf to networking for better code reuse and minor cleanup.', 'keywords': 'bpf-offload, test, networking', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6ce2b689932ba8288ceef9a82c1caf029b0b23f9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6ce2b689932ba8288ceef9a82c1caf029b0b23f9
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1712782992
  Commit Message:
    selftests: net: reuse common code in bpf_offload

net/lib/py/nsim.py already contains the most useful parts
of the netdevsim wrapper classes. Reuse them.

Acked-by: Stanislav Fomichev <sdf@google.com>
Acked-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240409031549.3531084-5-kuba@kernel.org
Signed-off-by: Jakub Kicinski <kuba@kernel.org>

  Parent Hashes: b1c2ce11d42886d08cfa28e38ee07f2b606ced0b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor bpf_offload self-tests to reuse existing code from netdevsim wrapper classes.', 'keywords': 'selftests, bpf_offload, netdevsim', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b1c2ce11d42886d08cfa28e38ee07f2b606ced0b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b1c2ce11d42886d08cfa28e38ee07f2b606ced0b
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1712782992
  Commit Message:
    selftests: net: declare section names for bpf_offload

Non-ancient ip (iproute2-5.15.0
  Parent Hashes: fc50c698c28bcf307dfb14ba9d0b3cacb091c1cb
  Refs:  libbpf 0.7.0) refuses to load
the sample with maps because we don't generate BTF:

   libbpf: BTF is required

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Declare section names for bpf_offload in selftests to ensure compatibility with newer iproute2 versions requiring BTF.', 'keywords': 'selftests, bpf_offload, BTF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fc50c698c28bcf307dfb14ba9d0b3cacb091c1cb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fc50c698c28bcf307dfb14ba9d0b3cacb091c1cb
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1712782992
  Commit Message:
    selftests: net: bpf_offload: wait for maps

Maps are removed asynchronously. Either there's a bigger delay
now or the test has always been flaky. Retry waiting in the loop.

Acked-by: Stanislav Fomichev <sdf@google.com>
Acked-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240409031549.3531084-3-kuba@kernel.org
Signed-off-by: Jakub Kicinski <kuba@kernel.org>

  Parent Hashes: e59f0e93e92e0ddfd17e3373d586218cf638571e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit modifies self-tests to add a wait loop for map removals due to asynchronous behavior.', 'keywords': 'selftests, maps, asynchronous', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e59f0e93e92e0ddfd17e3373d586218cf638571e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e59f0e93e92e0ddfd17e3373d586218cf638571e
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1712782992
  Commit Message:
    selftests: move bpf-offload test from bpf to net

We're building more python tests on the netdev side
  Parent Hashes: 2ecd487b670fcbb1ad4893fff1af4aafdecb6023
  Refs:  and some
of the classes from the venerable BPF offload tests can be reused.

Acked-by: Stanislav Fomichev <sdf@google.com>
Acked-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240409031549.3531084-2-kuba@kernel.org
Signed-off-by: Jakub Kicinski <kuba@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit moves the bpf-offload test from bpf to net for improved reusability.', 'keywords': 'selftests,bpf-offload,net', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 685dadafbde29dc3d6b7a13be284d684b06d4d4f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 685dadafbde29dc3d6b7a13be284d684b06d4d4f
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1712759917
  Commit Message:
    HID: bpf: allow to use bpf_timer_set_sleepable_cb() in tracing callbacks.

Export the sleepable kfuncs we have on HID-BPF in tracing bpf programs
  Parent Hashes: 2c0e8ced7d4bf746923fc424415844d695f07808
  Refs: 
but with the condition of being used in a sleepable context.
This allows to use the bpf_timer when used in a sleepable context
through bpf_timer_set_sleepable_cb() and initiate work from a device event.

Link: https://lore.kernel.org/r/20240315-b4-hid-bpf-new-funcs-v4-7-079c282469d3@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable use of bpf_timer_set_sleepable_cb() in HID tracing bpf programs for sleepable contexts.', 'keywords': 'HID,BPF,sleepable', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 2c0e8ced7d4bf746923fc424415844d695f07808
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2c0e8ced7d4bf746923fc424415844d695f07808
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1712759917
  Commit Message:
    selftests/hid: add tests for hid_bpf_input_report

Usual way of testing
  Parent Hashes: 9be50ac30a83896a753ab9f64e941763bb7900be
  Refs:  we call the function and ensures we receive
the event

Link: https://lore.kernel.org/r/20240315-b4-hid-bpf-new-funcs-v4-6-079c282469d3@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add self-tests for the hid_bpf_input_report function in HID driver.', 'keywords': 'selftests,hid_bpf_input_report,HID', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 9be50ac30a83896a753ab9f64e941763bb7900be
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9be50ac30a83896a753ab9f64e941763bb7900be
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1712759891
  Commit Message:
    HID: bpf: allow to inject HID event from BPF

It can be interesting to inject events from BPF as if the event were
to come from the device.
For example
  Parent Hashes: db624e82c55f227b84ac9ebfa3de2f6f5fad666b
  Refs:  some multitouch devices do not all the time send a proximity
out event

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces the capability to inject HID events from eBPF, simulating device-originated events.', 'keywords': 'HID,BPF,event', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: db624e82c55f227b84ac9ebfa3de2f6f5fad666b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: db624e82c55f227b84ac9ebfa3de2f6f5fad666b
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1712759843
  Commit Message:
    selftests/hid: Add test for hid_bpf_hw_output_report

This time we need to ensure uhid receives it
  Parent Hashes: c8a1495947ffcab18d9a85144ab4abc570720e65
  Refs:  thus the new mutex and
condition.

Link: https://lore.kernel.org/r/20240315-b4-hid-bpf-new-funcs-v4-4-079c282469d3@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a selftest for HID to ensure uhid receives hid_bpf_hw_output_report correctly.', 'keywords': 'selftests,HID,uhid', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: c8a1495947ffcab18d9a85144ab4abc570720e65
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c8a1495947ffcab18d9a85144ab4abc570720e65
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1712759843
  Commit Message:
    selftests/hid: add KASAN to the VM tests

It's always a good idea to have KASAN in tests.

Link: https://lore.kernel.org/r/20240315-b4-hid-bpf-new-funcs-v4-3-079c282469d3@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>

  Parent Hashes: 5599f80196612efde96dbe6ef18f6ecc0cb4ba19
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds KASAN to the selftests for HID drivers in virtual machines.', 'keywords': 'KASAN,selftests,HID', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 5599f80196612efde96dbe6ef18f6ecc0cb4ba19
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5599f80196612efde96dbe6ef18f6ecc0cb4ba19
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1712759834
  Commit Message:
    HID: bpf: export hid_hw_output_report as a BPF kfunc

We currently only export hid_hw_raw_request() as a BPF kfunc.
However
  Parent Hashes: 4171954f56fb6da8cc8ceebf54b78b874278a198
  Refs:  some devices require an explicit write on the Output Report
instead of the use of the control channel.

So also export hid_hw_output_report to BPF

Link: https://lore.kernel.org/r/20240315-b4-hid-bpf-new-funcs-v4-2-079c282469d3@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Export hid_hw_output_report as a BPF kfunc for HID support in eBPF.', 'keywords': 'HID,BPF,kfunc', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 4171954f56fb6da8cc8ceebf54b78b874278a198
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4171954f56fb6da8cc8ceebf54b78b874278a198
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1712759725
  Commit Message:
    HID: bpf/dispatch: regroup kfuncs definitions

No code change
  Parent Hashes: 3e78a6c0d3e02e4cf881dc84c5127e9990f939d6
  Refs:  just move down the hid_bpf_get_data() kfunc definition
so we have only one block of __bpf_kfunc_start/end_defs()

Link: https://lore.kernel.org/r/20240315-b4-hid-bpf-new-funcs-v4-1-079c282469d3@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit reorganizes HID BPF kfuncs definitions for cleaner code structure.', 'keywords': 'HID,bpf,kfuncs', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: d0a2ba197bcbeaa795c5c961d927bcaf55964669
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d0a2ba197bcbeaa795c5c961d927bcaf55964669
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1712683466
  Commit Message:
    selftests/bpf: Add tests for atomics in bpf_arena.

Add selftests for atomic instructions in bpf_arena.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240405231134.17274-2-alexei.starovoitov@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: d503a04f8bc0c75dc9db9452d8cc79d748afb752
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for atomic instructions used within bpf_arena.', 'keywords': 'selftests, atomics, bpf_arena', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d503a04f8bc0c75dc9db9452d8cc79d748afb752
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d503a04f8bc0c75dc9db9452d8cc79d748afb752
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1712683466
  Commit Message:
    bpf: Add support for certain atomics in bpf_arena to x86 JIT

Support atomics in bpf_arena that can be JITed as a single x86 instruction.
Instructions that are JITed as loops are not supported at the moment
  Parent Hashes: bb761fcb821738e8d3b720e1460d3783db74c68a
  Refs: 
since they require more complex extable and loop logic.

JITs can choose to do smarter things with bpf_jit_supports_insn().
Like arm64 may decide to support all bpf atomics instructions
when emit_lse_atomic is available and none in ll_sc mode.

bpf_jit_supports_percpu_insn()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for atomics in bpf_arena to x86 JIT for single instruction execution.', 'keywords': 'atomics,JIT,bpf_arena', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b993115b44d769cb34b394d92658226df81a6c89
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b993115b44d769cb34b394d92658226df81a6c89
  Author Name: Paul E. McKenney
  Author Email: paulmck@kernel.org
  Commit Date: 1712668385
  Commit Message:
    bpf: Select new NEED_TASKS_RCU Kconfig option

Currently
  Parent Hashes: 179f4ce102eb62b4b8efbd8371ee7d25c1082467
  Refs:  if a Kconfig option depends on TASKS_RCU

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit selects the new Kconfig option NEED_TASKS_RCU for bpf.', 'keywords': 'Kconfig, NEED_TASKS_RCU, bpf', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: bb761fcb821738e8d3b720e1460d3783db74c68a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bb761fcb821738e8d3b720e1460d3783db74c68a
  Author Name: Jason Xing
  Author Email: kernelxing@tencent.com
  Commit Date: 1712619078
  Commit Message:
    selftests/bpf: eliminate warning of get_cgroup_id_from_path()

The output goes like this if I make samples/bpf:
...warning: no previous prototype for ‘get_cgroup_id_from_path’...

Make this function static could solve the warning problem since
no one outside of the file calls it.

Signed-off-by: Jason Xing <kernelxing@tencent.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240406144613.4434-1-kerneljasonxing@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 50408d7abea68e2d1ae3a9328e1a468b7089b11c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit eliminates a prototype warning by making get_cgroup_id_from_path static in selftests/bpf.', 'keywords': 'selftests,bpf,warning', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 6648e613226e18897231ab5e42ffc29e63fa3365
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6648e613226e18897231ab5e42ffc29e63fa3365
  Author Name: Jason Xing
  Author Email: kernelxing@tencent.com
  Commit Date: 1712560702
  Commit Message:
    bpf
  Parent Hashes: 76cd338994778c552c51086fc056819b5cdda2e7
  Refs:  skmsg: Fix NULL pointer dereference in sk_psock_skb_ingress_enqueue

Fix NULL pointer data-races in sk_psock_skb_ingress_enqueue() which
syzbot reported [1].

[1]
BUG: KCSAN: data-race in sk_psock_drop / sk_psock_skb_ingress_enqueue

write to 0xffff88814b3278b8 of 8 bytes by task 10724 on cpu 1:
 sk_psock_stop_verdict net/core/skmsg.c:1257 [inline]
 sk_psock_drop+0x13e/0x1f0 net/core/skmsg.c:843
 sk_psock_put include/linux/skmsg.h:459 [inline]
 sock_map_close+0x1a7/0x260 net/core/sock_map.c:1648
 unix_release+0x4b/0x80 net/unix/af_unix.c:1048
 __sock_release net/socket.c:659 [inline]
 sock_close+0x68/0x150 net/socket.c:1421
 __fput+0x2c1/0x660 fs/file_table.c:422
 __fput_sync+0x44/0x60 fs/file_table.c:507
 __do_sys_close fs/open.c:1556 [inline]
 __se_sys_close+0x101/0x1b0 fs/open.c:1541
 __x64_sys_close+0x1f/0x30 fs/open.c:1541
 do_syscall_64+0xd3/0x1d0
 entry_SYSCALL_64_after_hwframe+0x6d/0x75

read to 0xffff88814b3278b8 of 8 bytes by task 10713 on cpu 0:
 sk_psock_data_ready include/linux/skmsg.h:464 [inline]
 sk_psock_skb_ingress_enqueue+0x32d/0x390 net/core/skmsg.c:555
 sk_psock_skb_ingress_self+0x185/0x1e0 net/core/skmsg.c:606
 sk_psock_verdict_apply net/core/skmsg.c:1008 [inline]
 sk_psock_verdict_recv+0x3e4/0x4a0 net/core/skmsg.c:1202
 unix_read_skb net/unix/af_unix.c:2546 [inline]
 unix_stream_read_skb+0x9e/0xf0 net/unix/af_unix.c:2682
 sk_psock_verdict_data_ready+0x77/0x220 net/core/skmsg.c:1223
 unix_stream_sendmsg+0x527/0x860 net/unix/af_unix.c:2339
 sock_sendmsg_nosec net/socket.c:730 [inline]
 __sock_sendmsg+0x140/0x180 net/socket.c:745
 ____sys_sendmsg+0x312/0x410 net/socket.c:2584
 ___sys_sendmsg net/socket.c:2638 [inline]
 __sys_sendmsg+0x1e9/0x280 net/socket.c:2667
 __do_sys_sendmsg net/socket.c:2676 [inline]
 __se_sys_sendmsg net/socket.c:2674 [inline]
 __x64_sys_sendmsg+0x46/0x50 net/socket.c:2674
 do_syscall_64+0xd3/0x1d0
 entry_SYSCALL_64_after_hwframe+0x6d/0x75

value changed: 0xffffffff83d7feb0 -> 0x0000000000000000

Reported by Kernel Concurrency Sanitizer on:
CPU: 0 PID: 10713 Comm: syz-executor.4 Tainted: G        W          6.8.0-syzkaller-08951-gfe46a7dd189e #0
Hardware name: Google Google Compute Engine/Google Compute Engine

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes data-race issues in sk_psock_skb_ingress_enqueue function to prevent NULL pointer dereference.', 'keywords': 'data-race,NULL pointer,sk_psock', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 50408d7abea68e2d1ae3a9328e1a468b7089b11c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 50408d7abea68e2d1ae3a9328e1a468b7089b11c
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1712423795
  Commit Message:
    Merge branch 'libbpf-api-to-partially-consume-items-from-ringbuffer'

Andrea Righi says:

====================
libbpf: API to partially consume items from ringbuffer

Introduce ring__consume_n() and ring_buffer__consume_n() API to
partially consume items from one (or more) ringbuffer(s).

This can be useful
  Parent Hashes: d564ffde5c832c46513e0189647abfde9833e590 4d22ea94ea33550538b3b14429d52cb9f96ad2c3
  Refs:  for example

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce API to partially consume items from ringbuffer in libbpf.', 'keywords': 'libbpf, API, ringbuffer', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4d22ea94ea33550538b3b14429d52cb9f96ad2c3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4d22ea94ea33550538b3b14429d52cb9f96ad2c3
  Author Name: Andrea Righi
  Author Email: andrea.righi@canonical.com
  Commit Date: 1712419915
  Commit Message:
    libbpf: Add ring__consume_n / ring_buffer__consume_n

Introduce a new API to consume items from a ring buffer
  Parent Hashes: 13e8125a22763557d719db996f70c71f77c9509c
  Refs:  limited to a
specified amount

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces a new API to consume multiple items from a ring buffer in libbpf.', 'keywords': 'libbpf,ring buffer,API', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 13e8125a22763557d719db996f70c71f77c9509c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 13e8125a22763557d719db996f70c71f77c9509c
  Author Name: Andrea Righi
  Author Email: andrea.righi@canonical.com
  Commit Date: 1712419914
  Commit Message:
    libbpf: ringbuf: Allow to consume up to a certain amount of items

In some cases
  Parent Hashes: 5bd2ed658231b0698211e94efb06393836a4539d
  Refs:  instead of always consuming all items from ring buffers
in a greedy way

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds an option to consume a specific number of items from libbpf ring buffers instead of all.', 'keywords': 'libbpf, ringbuf, consume', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5bd2ed658231b0698211e94efb06393836a4539d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5bd2ed658231b0698211e94efb06393836a4539d
  Author Name: Andrea Righi
  Author Email: andrea.righi@canonical.com
  Commit Date: 1712419870
  Commit Message:
    libbpf: Start v1.5 development cycle

Bump libbpf.map to v1.5.0 to start a new libbpf version cycle.

Signed-off-by: Andrea Righi <andrea.righi@canonical.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240406092005.92399-2-andrea.righi@canonical.com

  Parent Hashes: d564ffde5c832c46513e0189647abfde9833e590
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Bump libbpf.map to v1.5.0 to initiate the new development cycle for libbpf.', 'keywords': 'libbpf development cycle', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 237f3cf13b20db183d3706d997eedc3c49eacd44
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 237f3cf13b20db183d3706d997eedc3c49eacd44
  Author Name: Eric Dumazet
  Author Email: edumazet@google.com
  Commit Date: 1712382442
  Commit Message:
    xsk: validate user input for XDP_{UMEM|COMPLETION}_FILL_RING

syzbot reported an illegal copy in xsk_setsockopt() [1]

Make sure to validate setsockopt() @optlen parameter.

[1]

 BUG: KASAN: slab-out-of-bounds in copy_from_sockptr_offset include/linux/sockptr.h:49 [inline]
 BUG: KASAN: slab-out-of-bounds in copy_from_sockptr include/linux/sockptr.h:55 [inline]
 BUG: KASAN: slab-out-of-bounds in xsk_setsockopt+0x909/0xa40 net/xdp/xsk.c:1420
Read of size 4 at addr ffff888028c6cde3 by task syz-executor.0/7549

CPU: 0 PID: 7549 Comm: syz-executor.0 Not tainted 6.8.0-syzkaller-08951-gfe46a7dd189e #0
Hardware name: Google Google Compute Engine/Google Compute Engine
  Parent Hashes: 38a15d0a50e0a43778561a5861403851f0b0194c
  Refs:  BIOS Google 03/27/2024
Call Trace:
 <TASK>
  __dump_stack lib/dump_stack.c:88 [inline]
  dump_stack_lvl+0x241/0x360 lib/dump_stack.c:114
  print_address_description mm/kasan/report.c:377 [inline]
  print_report+0x169/0x550 mm/kasan/report.c:488
  kasan_report+0x143/0x180 mm/kasan/report.c:601
  copy_from_sockptr_offset include/linux/sockptr.h:49 [inline]
  copy_from_sockptr include/linux/sockptr.h:55 [inline]
  xsk_setsockopt+0x909/0xa40 net/xdp/xsk.c:1420
  do_sock_setsockopt+0x3af/0x720 net/socket.c:2311
  __sys_setsockopt+0x1ae/0x250 net/socket.c:2334
  __do_sys_setsockopt net/socket.c:2343 [inline]
  __se_sys_setsockopt net/socket.c:2340 [inline]
  __x64_sys_setsockopt+0xb5/0xd0 net/socket.c:2340
 do_syscall_64+0xfb/0x240
 entry_SYSCALL_64_after_hwframe+0x6d/0x75
RIP: 0033:0x7fb40587de69
Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 e1 20 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007fb40665a0c8 EFLAGS: 00000246 ORIG_RAX: 0000000000000036
RAX: ffffffffffffffda RBX: 00007fb4059abf80 RCX: 00007fb40587de69
RDX: 0000000000000005 RSI: 000000000000011b RDI: 0000000000000006
RBP: 00007fb4058ca47a R08: 0000000000000002 R09: 0000000000000000
R10: 0000000020001980 R11: 0000000000000246 R12: 0000000000000000
R13: 000000000000000b R14: 00007fb4059abf80 R15: 00007fff57ee4d08
 </TASK>

Allocated by task 7549:
  kasan_save_stack mm/kasan/common.c:47 [inline]
  kasan_save_track+0x3f/0x80 mm/kasan/common.c:68
  poison_kmalloc_redzone mm/kasan/common.c:370 [inline]
  __kasan_kmalloc+0x98/0xb0 mm/kasan/common.c:387
  kasan_kmalloc include/linux/kasan.h:211 [inline]
  __do_kmalloc_node mm/slub.c:3966 [inline]
  __kmalloc+0x233/0x4a0 mm/slub.c:3979
  kmalloc include/linux/slab.h:632 [inline]
  __cgroup_bpf_run_filter_setsockopt+0xd2f/0x1040 kernel/bpf/cgroup.c:1869
  do_sock_setsockopt+0x6b4/0x720 net/socket.c:2293
  __sys_setsockopt+0x1ae/0x250 net/socket.c:2334
  __do_sys_setsockopt net/socket.c:2343 [inline]
  __se_sys_setsockopt net/socket.c:2340 [inline]
  __x64_sys_setsockopt+0xb5/0xd0 net/socket.c:2340
 do_syscall_64+0xfb/0x240
 entry_SYSCALL_64_after_hwframe+0x6d/0x75

The buggy address belongs to the object at ffff888028c6cde0
 which belongs to the cache kmalloc-8 of size 8
The buggy address is located 1 bytes to the right of
 allocated 2-byte region [ffff888028c6cde0

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes a bug by validating the optlen parameter in xsk_setsockopt to prevent slab-out-of-bounds errors.', 'keywords': 'validation, bugfix, xsk_setsockopt', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The syscall interface', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: d564ffde5c832c46513e0189647abfde9833e590
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d564ffde5c832c46513e0189647abfde9833e590
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1712339944
  Commit Message:
    Merge branch 'bpf-allow-invoking-kfuncs-from-bpf_prog_type_syscall-progs'

David Vernet says:

====================
bpf: Allow invoking kfuncs from BPF_PROG_TYPE_SYSCALL progs

Currently
  Parent Hashes: 00d5d22a5b42c3ffdfd1b29526885bbcec2d2231 1bc724af00cc48ef03e3fa6d7a2f6731ac915c37
  Refs:  a set of core BPF kfuncs (e.g. bpf_task_*

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enables invoking kfuncs from BPF_PROG_TYPE_SYSCALL programs.', 'keywords': 'kfuncs,BPF_PROG_TYPE_SYSCALL,invoke', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 1bc724af00cc48ef03e3fa6d7a2f6731ac915c37
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1bc724af00cc48ef03e3fa6d7a2f6731ac915c37
  Author Name: David Vernet
  Author Email: void@manifault.com
  Commit Date: 1712339890
  Commit Message:
    selftests/bpf: Verify calling core kfuncs from BPF_PROG_TYPE_SYCALL

Now that we can call some kfuncs from BPF_PROG_TYPE_SYSCALL progs
  Parent Hashes: a8e03b6bbb2cc7cf387d1ce335e4ce4c3bdfef9b
  Refs:  let's
add some selftests that verify as much. As a bonus

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests to verify calling core kfuncs from BPF_PROG_TYPE_SYSCALL programs.', 'keywords': 'selftests,kfuncs,BPF_PROG_TYPE_SYSCALL', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a8e03b6bbb2cc7cf387d1ce335e4ce4c3bdfef9b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a8e03b6bbb2cc7cf387d1ce335e4ce4c3bdfef9b
  Author Name: David Vernet
  Author Email: void@manifault.com
  Commit Date: 1712339769
  Commit Message:
    bpf: Allow invoking kfuncs from BPF_PROG_TYPE_SYSCALL progs

Currently
  Parent Hashes: 00d5d22a5b42c3ffdfd1b29526885bbcec2d2231
  Refs:  a set of core BPF kfuncs (e.g. bpf_task_*

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable kfunc invocation from BPF_PROG_TYPE_SYSCALL programs in eBPF.', 'keywords': 'kfuncs, BPF_PROG_TYPE_SYSCALL, eBPF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 00d5d22a5b42c3ffdfd1b29526885bbcec2d2231
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 00d5d22a5b42c3ffdfd1b29526885bbcec2d2231
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1712338950
  Commit Message:
    bpf
  Parent Hashes: ba0cbe2bb4ab8aa266e48c6399bebf6e1217828a
  Refs:  docs: Editorial nits in instruction-set.rst

This patch addresses a number of editorial nits including
spelling

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit addresses editorial nits and spelling corrections in the instruction-set documentation.', 'keywords': 'editorial, nits, spelling', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 76cd338994778c552c51086fc056819b5cdda2e7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 76cd338994778c552c51086fc056819b5cdda2e7
  Author Name: Björn Töpel
  Author Email: bjorn@rivosinc.com
  Commit Date: 1712338497
  Commit Message:
    MAINTAINERS: bpf: Add Lehui and Puranjay as riscv64 reviewers

Lehui and Puranjay have been active RISC-V 64-bit BPF JIT
contributors/reviewers for a long time!

Let's make it more official by adding them as reviewers in
MAINTAINERS.

Thank you for your hard work!

Signed-off-by: Björn Töpel <bjorn@kernel.org>
Link: https://lore.kernel.org/r/20240405123352.2852393-1-bjorn@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: cfddb048040b598fa7df0e51ca361289fc7abf28
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds Lehui and Puranjay as official reviewers for the riscv64 BPF JIT in the MAINTAINERS file.', 'keywords': 'MAINTAINERS, riscv64, reviewers', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: ba0cbe2bb4ab8aa266e48c6399bebf6e1217828a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ba0cbe2bb4ab8aa266e48c6399bebf6e1217828a
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1712338398
  Commit Message:
    selftests/bpf: Make sure libbpf doesn't enforce the signature of a func pointer.

The verifier in the kernel ensures that the struct_ops operators behave
correctly by checking that they access parameters and context
appropriately. The verifier will approve a program as long as it correctly
accesses the context/parameters
  Parent Hashes: 270954791c706b133a03b01e4b2d063dc870f704
  Refs:  regardless of its function signature. In
contrast

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit ensures libbpf does not enforce function pointer signatures in selftests.', 'keywords': 'libbpf,verifier,signature', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 270954791c706b133a03b01e4b2d063dc870f704
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 270954791c706b133a03b01e4b2d063dc870f704
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1712338278
  Commit Message:
    Merge branch 'bpf-allow-bpf_for_each_map_elem-helper-with-different-input-maps'

Philo Lu says:

====================
bpf: allow bpf_for_each_map_elem() helper with different input maps

Currently
  Parent Hashes: 58babe27180c8d4cb54d831589cf801bd9268876 fecb1597cc11a23f32faa90d70a199533871686a
  Refs:  taking different maps within a single bpf_for_each_map_elem
call is not allowed. For example the following codes cannot pass the
verifier (with error "tail_call abusing map_ptr"):
```
static void test_by_pid(int pid)
{
	if (pid <= 100)
		bpf_for_each_map_elem(&map1

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit allows the use of bpf_for_each_map_elem() with different input maps in eBPF programs.', 'keywords': 'bpf, helper, maps', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fecb1597cc11a23f32faa90d70a199533871686a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fecb1597cc11a23f32faa90d70a199533871686a
  Author Name: Philo Lu
  Author Email: lulie@linux.alibaba.com
  Commit Date: 1712338278
  Commit Message:
    selftests/bpf: add test for bpf_for_each_map_elem() with different maps

A test is added for bpf_for_each_map_elem() with either an arraymap or a
hashmap.
$ tools/testing/selftests/bpf/test_progs -t for_each
 #93/1    for_each/hash_map:OK
 #93/2    for_each/array_map:OK
 #93/3    for_each/write_map_key:OK
 #93/4    for_each/multi_maps:OK
 #93      for_each:OK
Summary: 1/4 PASSED
  Parent Hashes: 9d482da9e17a4ddd5563428f74302a36b2610306
  Refs:  0 SKIPPED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added selftests for bpf_for_each_map_elem() using arraymap and hashmap.', 'keywords': 'selftests,arraymap,hashmap', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9d482da9e17a4ddd5563428f74302a36b2610306
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9d482da9e17a4ddd5563428f74302a36b2610306
  Author Name: Philo Lu
  Author Email: lulie@linux.alibaba.com
  Commit Date: 1712338277
  Commit Message:
    bpf: allow invoking bpf_for_each_map_elem with different maps

Taking different maps within a single bpf_for_each_map_elem call is not
allowed before
  Parent Hashes: 0a525621b7e5b49202b19d8f75382c6778fdd0c1
  Refs:  because from the second map

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit allows invoking bpf_for_each_map_elem with different maps within a single use.', 'keywords': 'bpf,map,elements', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0a525621b7e5b49202b19d8f75382c6778fdd0c1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0a525621b7e5b49202b19d8f75382c6778fdd0c1
  Author Name: Philo Lu
  Author Email: lulie@linux.alibaba.com
  Commit Date: 1712338277
  Commit Message:
    bpf: store both map ptr and state in bpf_insn_aux_data

Currently
  Parent Hashes: 58babe27180c8d4cb54d831589cf801bd9268876
  Refs:  bpf_insn_aux_data->map_ptr_state is used to store either
map_ptr or its poison state (i.e.

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies bpf_insn_aux_data to store both map pointer and state.', 'keywords': 'bpf, map_ptr, state', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 58babe27180c8d4cb54d831589cf801bd9268876
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 58babe27180c8d4cb54d831589cf801bd9268876
  Author Name: Arnd Bergmann
  Author Email: arnd@arndb.de
  Commit Date: 1712331555
  Commit Message:
    bpf: fix perf_snapshot_branch_stack link failure

The newly added code to handle bpf_get_branch_snapshot fails to link when
CONFIG_PERF_EVENTS is disabled:

aarch64-linux-ld: kernel/bpf/verifier.o: in function `do_misc_fixups':
verifier.c:(.text+0x1090c): undefined reference to `__SCK__perf_snapshot_branch_stack'

Add a build-time check for that Kconfig symbol around the code to
remove the link time dependency.

Fixes: 314a53623cd4 ("bpf: inline bpf_get_branch_snapshot() helper")
Signed-off-by: Arnd Bergmann <arnd@arndb.de>
Link: https://lore.kernel.org/r/20240405142637.577046-1-arnd@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 343ca8131c35ba132d200fd9752b60e65357924d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a linking error for bpf_get_branch_snapshot when CONFIG_PERF_EVENTS is disabled by adding a build-time check.', 'keywords': 'linking error, CONFIG_PERF_EVENTS, bpf_get_branch_snapshot', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cfddb048040b598fa7df0e51ca361289fc7abf28
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cfddb048040b598fa7df0e51ca361289fc7abf28
  Author Name: Puranjay Mohan
  Author Email: puranjay@kernel.org
  Commit Date: 1712324760
  Commit Message:
    MAINTAINERS: Update email address for Puranjay Mohan

I would like to use the kernel.org address for kernel development from
now on.

Signed-off-by: Puranjay Mohan <puranjay@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240405132337.71950-1-puranjay@kernel.org

  Parent Hashes: 229087f6f1dc2d0c38feba805770f28529980ec0
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update email address for Puranjay Mohan in the MAINTAINERS file.', 'keywords': 'MAINTAINERS update email', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 229087f6f1dc2d0c38feba805770f28529980ec0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 229087f6f1dc2d0c38feba805770f28529980ec0
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1712322767
  Commit Message:
    bpf
  Parent Hashes: c88b9b4cde17aec34fb9bfaf69f9f72a1c44f511
  Refs:  kconfig: Fix DEBUG_INFO_BTF_MODULES Kconfig definition

Turns out that due to CONFIG_DEBUG_INFO_BTF_MODULES not having an
explicitly specified "menu item name" in Kconfig

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed the Kconfig definition by specifying the menu item name for CONFIG_DEBUG_INFO_BTF_MODULES.', 'keywords': 'Kconfig, DEBUG_INFO_BTF_MODULES, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 343ca8131c35ba132d200fd9752b60e65357924d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 343ca8131c35ba132d200fd9752b60e65357924d
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1712280668
  Commit Message:
    selftests/bpf: add fp-leaking precise subprog result tests

Add selftests validating that BPF verifier handles precision marking
for SCALAR registers derived from r10 (fp) register correctly.

Given `r0 = (s8)r10;` syntax is not supported by older Clang compilers
  Parent Hashes: 1f2a74b41ea8b902687eb97c4e7e3f558801865b
  Refs: 
use the raw BPF instruction syntax to maximize compatibility.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240404214536.3551295-2-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests to ensure BPF verifier handles precision for SCALAR registers from r10 correctly.', 'keywords': 'selftests,BPF verifier,precision', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1f2a74b41ea8b902687eb97c4e7e3f558801865b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1f2a74b41ea8b902687eb97c4e7e3f558801865b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1712280668
  Commit Message:
    bpf: prevent r10 register from being marked as precise

r10 is a special register that is not under BPF program's control and is
always effectively precise. The rest of precision logic assumes that
only r0-r9 SCALAR registers are marked as precise
  Parent Hashes: f91717007217d975aa975ddabd91ae1a107b9bff
  Refs:  so prevent r10 from
being marked precise.

This can happen due to signed cast instruction allowing to do something
like `r0 = (s8)r10;`

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Prevent r10 register from being incorrectly marked as precise in BPF programs.', 'keywords': 'r10, register, precise', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f91717007217d975aa975ddabd91ae1a107b9bff
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f91717007217d975aa975ddabd91ae1a107b9bff
  Author Name: Anton Protopopov
  Author Email: aspsk@isovalent.com
  Commit Date: 1712271152
  Commit Message:
    bpf: Pack struct bpf_fib_lookup

The struct bpf_fib_lookup is supposed to be of size 64. A recent commit
59b418c7063d ("bpf: Add a check for struct bpf_fib_lookup size") added
a static assertion to check this property so that future changes to the
structure will not accidentally break this assumption.

As it immediately turned out
  Parent Hashes: 478a535ae54ad3831371904d93b5dfc403222e17
  Refs:  on some 32-bit arm systems

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit ensures that struct bpf_fib_lookup remains size 64 by packing it for compatibility with 32-bit systems.', 'keywords': 'struct bpf_fib_lookup, size 64, pack', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 478a535ae54ad3831371904d93b5dfc403222e17
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 478a535ae54ad3831371904d93b5dfc403222e17
  Author Name: Sahil Siddiq
  Author Email: icegambit91@gmail.com
  Commit Date: 1712270232
  Commit Message:
    bpftool: Mount bpffs on provided dir instead of parent dir

When pinning programs/objects under PATH (eg: during "bpftool prog
loadall") the bpffs is mounted on the parent dir of PATH in the
following situations:
- the given dir exists but it is not bpffs.
- the given dir doesn't exist and the parent dir is not bpffs.

Mounting on the parent dir can also have the unintentional side-
effect of hiding other files located under the parent dir.

If the given dir exists but is not bpffs
  Parent Hashes: d82c045f9dfde6b9ea220d7f8310c98210dfc8cb
  Refs:  then the bpffs should
be mounted on the given dir and not its parent dir.

Similarly

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Modified bpftool to mount bpffs on the provided directory instead of the parent directory when pinning programs.', 'keywords': 'bpftool, mount, bpffs', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['xdp like programs', 'socket like programs', 'cgroup like programs']}
--------------------
--------------------
Processing Commit ID: c88b9b4cde17aec34fb9bfaf69f9f72a1c44f511
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c88b9b4cde17aec34fb9bfaf69f9f72a1c44f511
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1712267350
  Commit Message:
    Merge tag 'net-6.9-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 "Including fixes from netfilter
  Parent Hashes: ec25bd8d981d910cdcc84914bf57e2cff9e7d63b 1cfa2f10f4e90a353c3ee2150866b4cf72579153
  Refs:  bluetooth and bpf.

  Fairly usual collection of driver and core fixes. The large selftest
  accompanying one of the fixes is also becoming a common occurrence.

  Current release - regressions:

   - ipv6: fix infinite recursion in fib6_dump_done()

   - net/rds: fix possible null-deref in newly added error path

  Current release - new code bugs:

   - net: do not consume a full cacheline for system_page_pool

   - bpf: fix bpf_arena-related file descriptor leaks in the verifier

   - drv: ice: fix freeing uninitialized pointers

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes including netfilter and driver core issues for ipv6, net, bpf, and ice.', 'keywords': 'networking, netfilter, bpf', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d82c045f9dfde6b9ea220d7f8310c98210dfc8cb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d82c045f9dfde6b9ea220d7f8310c98210dfc8cb
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1712261281
  Commit Message:
    Merge branch 'inline-bpf_get_branch_snapshot-bpf-helper'

Andrii Nakryiko says:

====================
Inline bpf_get_branch_snapshot() BPF helper

Implement inlining of bpf_get_branch_snapshot() BPF helper using generic BPF
assembly approach. This allows to reduce LBR record usage right before LBR
records are captured from inside BPF program.

See v1 cover letter ([0]) for some visual examples. I dropped them from v2
because there are multiple independent changes landing and being reviewed
  Parent Hashes: 21ab0b6d0cfcb8aa98e33baa83f933f963514027 314a53623cd4e62e1b88126e5ed2bc87073d90ee
  Refs:  all
of which remove different parts of LBR record waste

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges inline implementation of bpf_get_branch_snapshot BPF helper to optimize LBR record usage in BPF programs.', 'keywords': 'inline, BPF helper, LBR', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 314a53623cd4e62e1b88126e5ed2bc87073d90ee
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 314a53623cd4e62e1b88126e5ed2bc87073d90ee
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1712261281
  Commit Message:
    bpf: inline bpf_get_branch_snapshot() helper

Inline bpf_get_branch_snapshot() helper using architecture-agnostic
inline BPF code which calls directly into underlying callback of
perf_snapshot_branch_stack static call. This callback is set early
during kernel initialization and is never updated or reset
  Parent Hashes: 5e6a3c1ee693da1793739bb378b224bcf33d7f14
  Refs:  so it's ok
to fetch actual implementation using static_call_query() and call
directly into it.

This change eliminates a full function call and saves one LBR entry
in PERF_SAMPLE_BRANCH_ANY LBR mode.

Acked-by: John Fastabend <john.fastabend@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240404002640.1774210-3-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Inline bpf_get_branch_snapshot() helper to improve performance by reducing function calls and saving LBR entries.', 'keywords': 'inline helper performance', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', "It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 5e6a3c1ee693da1793739bb378b224bcf33d7f14
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5e6a3c1ee693da1793739bb378b224bcf33d7f14
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1712261281
  Commit Message:
    bpf: make bpf_get_branch_snapshot() architecture-agnostic

perf_snapshot_branch_stack is set up in an architecture-agnostic way
  Parent Hashes: 21ab0b6d0cfcb8aa98e33baa83f933f963514027
  Refs:  so
there is no reason for BPF subsystem to keep track of which
architectures do support LBR or not. E.g.

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors bpf_get_branch_snapshot to be architecture-agnostic, eliminating architecture-specific tracking for LBR support.', 'keywords': 'architecture-agnostic, bpf_get_branch_snapshot, LBR', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1cfa2f10f4e90a353c3ee2150866b4cf72579153
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1cfa2f10f4e90a353c3ee2150866b4cf72579153
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1712255859
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-04-04

We've added 7 non-merge commits during the last 5 day(s) which contain
a total of 9 files changed
  Parent Hashes: 0c83842df40f86e529db6842231154772c20edcc ff91059932401894e6c86341915615c5eb0eca48
  Refs:  75 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "This commit merges the 'for-netdev' branch from the BPF repository into the mainline.", 'keywords': 'merge, netdev, bpf', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0c83842df40f86e529db6842231154772c20edcc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0c83842df40f86e529db6842231154772c20edcc
  Author Name: Eric Dumazet
  Author Email: edumazet@google.com
  Commit Date: 1712248792
  Commit Message:
    netfilter: validate user input for expected length

I got multiple syzbot reports showing old bugs exposed
by BPF after commit 20f2505fb436 ("bpf: Try to avoid kzalloc
in cgroup/{s
  Parent Hashes: d432f7bdc1cddd37e73dbe6b53b48785ab789e92
  Refs: g}etsockopt")

setsockopt() @optlen argument should be taken into account
before copying data.

 BUG: KASAN: slab-out-of-bounds in copy_from_sockptr_offset include/linux/sockptr.h:49 [inline]
 BUG: KASAN: slab-out-of-bounds in copy_from_sockptr include/linux/sockptr.h:55 [inline]
 BUG: KASAN: slab-out-of-bounds in do_replace net/ipv4/netfilter/ip_tables.c:1111 [inline]
 BUG: KASAN: slab-out-of-bounds in do_ipt_set_ctl+0x902/0x3dd0 net/ipv4/netfilter/ip_tables.c:1627
Read of size 96 at addr ffff88802cd73da0 by task syz-executor.4/7238

CPU: 1 PID: 7238 Comm: syz-executor.4 Not tainted 6.9.0-rc2-next-20240403-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds validation for user input length in the netfilter to prevent buffer overflows.', 'keywords': 'netfilter,validation,buffer overflow', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 21ab0b6d0cfcb8aa98e33baa83f933f963514027
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 21ab0b6d0cfcb8aa98e33baa83f933f963514027
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1712242122
  Commit Message:
    bpf
  Parent Hashes: 633a6e01d1a20b24a16899094c249a8cb2aad4b2
  Refs:  riscv: Implement bpf_addr_space_cast instruction

LLVM generates bpf_addr_space_cast instruction while translating
pointers between native (zero) address space and
__attribute__((address_space(N))). The addr_space=0 is reserved as
bpf_arena address space.

rY = addr_space_cast(rX

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implement bpf_addr_space_cast instruction for RISC-V in LLVM for handling address space translations.', 'keywords': 'bpf, addr_space_cast, RISC-V', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 633a6e01d1a20b24a16899094c249a8cb2aad4b2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 633a6e01d1a20b24a16899094c249a8cb2aad4b2
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1712242090
  Commit Message:
    bpf
  Parent Hashes: af682b767a41772499f8e54ca7d7e1deb3395f44
  Refs:  riscv: Implement PROBE_MEM32 pseudo instructions

Add support for [LDX | STX | ST]

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implement PROBE_MEM32 pseudo instructions for riscv architecture in bpf.', 'keywords': 'riscv, PROBE_MEM32, pseudo', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: af682b767a41772499f8e54ca7d7e1deb3395f44
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: af682b767a41772499f8e54ca7d7e1deb3395f44
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1712240006
  Commit Message:
    bpf: Optimize emit_mov_imm64().

Turned out that bpf prog callback addresses
  Parent Hashes: 1e9e0b85255e6eca6036b59d8a5fbca6501905ac
  Refs:  bpf prog addresses
used in bpf_trampoline

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize bpf_trampoline by improving emit_mov_imm64 function for bpf prog callback addresses.', 'keywords': 'Optimize, emit_mov_imm64, bpf_trampoline', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1e9e0b85255e6eca6036b59d8a5fbca6501905ac
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1e9e0b85255e6eca6036b59d8a5fbca6501905ac
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1712205395
  Commit Message:
    bpf: handle CONFIG_SMP=n configuration in x86 BPF JIT

On non-SMP systems
  Parent Hashes: 519e1de94b719f741e0de42b085b9a4551c5b15c
  Refs:  there is no "per-CPU" data

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix handling of per-CPU data in the x86 BPF JIT for non-SMP systems.', 'keywords': 'x86, BPF JIT, non-SMP', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4793cb599b1bdc3d356f0374c2c99ffe890ae876
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4793cb599b1bdc3d356f0374c2c99ffe890ae876
  Author Name: Tianchen Ding
  Author Email: dtcccc@linux.alibaba.com
  Commit Date: 1712173333
  Commit Message:
    selftests: cgroup: skip test_cgcore_lesser_ns_open when cgroup2 mounted without nsdelegate

The test case test_cgcore_lesser_ns_open only tasks effect when cgroup2
is mounted with "nsdelegate" mount option. If it misses this option
  Parent Hashes: 20d46283f5d679338ec2bbd734f46f900557fb97
  Refs:  or
is remounted without "nsdelegate"

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Skip test_cgcore_lesser_ns_open if cgroup2 is mounted without nsdelegate.', 'keywords': 'skip,cgroup2,nsdelegate', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 519e1de94b719f741e0de42b085b9a4551c5b15c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 519e1de94b719f741e0de42b085b9a4551c5b15c
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1712165413
  Commit Message:
    Merge branch 'add-internal-only-bpf-per-cpu-instruction'

Andrii Nakryiko says:

====================
Add internal-only BPF per-CPU instruction

Add a new BPF instruction for resolving per-CPU memory addresses.

New instruction is a special form of BPF_ALU64 | BPF_MOV | BPF_X
  Parent Hashes: 2e114248e086fb376405ed3f89b220f8586a2541 0b56e637f705836b9aa51e2b1058c3c814c121a8
  Refs:  with
insns->off set to BPF_ADDR_PERCPU (== -1). It resolves provided per-CPU offset
to an absolute address where per-CPU data resides for "this" CPU.

This patch set implements support for it in x86-64 BPF JIT only.

Using the new instruction

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added an internal-only BPF instruction for resolving per-CPU memory addresses in x86-64 BPF JIT.', 'keywords': 'BPF instruction, per-CPU address, x86-64 JIT', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0b56e637f705836b9aa51e2b1058c3c814c121a8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0b56e637f705836b9aa51e2b1058c3c814c121a8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1712165396
  Commit Message:
    bpf: inline bpf_map_lookup_elem() helper for PERCPU_HASH map

Using new per-CPU BPF instruction
  Parent Hashes: db69718b8efac802c7cc20d5a6c7dfc913f99c43
  Refs:  partially inline
bpf_map_lookup_elem() helper for per-CPU hashmap BPF map. Just like for
normal HASH map

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Inline the bpf_map_lookup_elem() helper for per-CPU HASH maps using a new BPF instruction.', 'keywords': 'inline, per-CPU, BPF map', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: db69718b8efac802c7cc20d5a6c7dfc913f99c43
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: db69718b8efac802c7cc20d5a6c7dfc913f99c43
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1712165396
  Commit Message:
    bpf: inline bpf_map_lookup_elem() for PERCPU_ARRAY maps

Using new per-CPU BPF instruction implement inlining for per-CPU ARRAY
map lookup helper
  Parent Hashes: 1ae6921009e5d72787e07ccc04754514ccf6bc99
  Refs:  if BPF JIT support is present.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/r/20240402021307.1012571-4-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implemented inlining of bpf_map_lookup_elem() for PERCPU_ARRAY maps using new per-CPU BPF instruction.', 'keywords': 'inline,elements,PERCPU_ARRAY', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1ae6921009e5d72787e07ccc04754514ccf6bc99
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1ae6921009e5d72787e07ccc04754514ccf6bc99
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1712165396
  Commit Message:
    bpf: inline bpf_get_smp_processor_id() helper

If BPF JIT supports per-CPU MOV instruction
  Parent Hashes: 7bdbf7446305cb65c510c16d57cde82bc76b234a
  Refs:  inline bpf_get_smp_processor_id()
to eliminate unnecessary function calls.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/r/20240402021307.1012571-3-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Inlined bpf_get_smp_processor_id() helper in BPF for efficiency if JIT supports per-CPU MOV instruction.', 'keywords': 'BPF, inline, efficiency', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7bdbf7446305cb65c510c16d57cde82bc76b234a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7bdbf7446305cb65c510c16d57cde82bc76b234a
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1712165395
  Commit Message:
    bpf: add special internal-only MOV instruction to resolve per-CPU addrs

Add a new BPF instruction for resolving absolute addresses of per-CPU
data from their per-CPU offsets. This instruction is internal-only and
users are not allowed to use them directly. They will only be used for
internal inlining optimizations for now between BPF verifier and BPF JITs.

We use a special BPF_MOV | BPF_ALU64 | BPF_X form with insn->off field
set to BPF_ADDR_PERCPU = -1. I used negative offset value to distinguish
them from positive ones used by user-exposed instructions.

Such instruction performs a resolution of a per-CPU offset stored in
a register to a valid kernel address which can be dereferenced. It is
useful in any use case where absolute address of a per-CPU data has to
be resolved (e.g.
  Parent Hashes: 2e114248e086fb376405ed3f89b220f8586a2541
  Refs:  in inlining bpf_map_lookup_elem()).

BPF disassembler is also taught to recognize them to support dumping
final BPF assembly code (non-JIT'ed version).

Add arch-specific way for BPF JITs to mark support for this instructions.

This patch also adds support for these instructions in x86-64 BPF JIT.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/r/20240402021307.1012571-2-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a special internal-only MOV instruction for per-CPU address resolution in eBPF.', 'keywords': 'BPF instruction, per-CPU, MOV', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2e114248e086fb376405ed3f89b220f8586a2541
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2e114248e086fb376405ed3f89b220f8586a2541
  Author Name: Justin Stitt
  Author Email: justinstitt@google.com
  Commit Date: 1712156261
  Commit Message:
    bpf: Replace deprecated strncpy with strscpy

strncpy() is deprecated for use on NUL-terminated destination strings
[1] and as such we should prefer more robust and less ambiguous string
interfaces.

bpf sym names get looked up and compared/cleaned with various string
apis. This suggests they need to be NUL-terminated (strncpy() suggests
this but does not guarantee it).

|	static int compare_symbol_name(const char *name
  Parent Hashes: c53908b254fcf25b05bcdf6634adb36eaccac111
  Refs:  char *namebuf)
|	{
|		cleanup_symbol_name(namebuf);
|		return strcmp(name

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replaced deprecated strncpy with strscpy for safer string handling in bpf symbol names.', 'keywords': 'deprecated, strncpy, strscpy', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 98f69a573c668a18cfda41b3976118e04521a196
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 98f69a573c668a18cfda41b3976118e04521a196
  Author Name: Namhyung Kim
  Author Email: namhyung@kernel.org
  Commit Date: 1712155737
  Commit Message:
    perf annotate: Split out util/disasm.c

The util/annotate.c code has both disassembly and sample annotation
related codes.  Factor out the disasm part so that it can be handled
more easily.

No functional changes intended.

Committer notes:

Add missing include env.h
  Parent Hashes: 10adbf777622e22323abbf9f7861c26deb373199
  Refs:  util.h

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors the code by splitting disassembly logic from util/annotate.c into util/disasm.c for better maintainability.', 'keywords': 'refactor, disassembly, annotate', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 09d2056efe0c02b7a589915c004c6e925735d081
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 09d2056efe0c02b7a589915c004c6e925735d081
  Author Name: Yang Jihong
  Author Email: yangjihong@bytedance.com
  Commit Date: 1712155736
  Commit Message:
    perf evsel: Use evsel__name_is() helper

Code cleanup
  Parent Hashes: 6e4b398770d5023eb6383da9360a23bd537c155b
  Refs:  replace strcmp(evsel__name(evsel

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors code by replacing `strcmp` with the `evsel__name_is()` helper for improved code readability.', 'keywords': 'perf, evsel, helper', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The JIT compiler', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: c53908b254fcf25b05bcdf6634adb36eaccac111
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c53908b254fcf25b05bcdf6634adb36eaccac111
  Author Name: Tushar Vyavahare
  Author Email: tushar.vyavahare@intel.com
  Commit Date: 1712153054
  Commit Message:
    selftests/xsk: Add new test case for AF_XDP under max ring sizes

Introduce a test case to evaluate AF_XDP's robustness by pushing hardware
and software ring sizes to their limits. This test ensures AF_XDP's
reliability amidst potential producer/consumer throttling due to maximum
ring utilization. The testing strategy includes:

1. Configuring rings to their maximum allowable sizes.
2. Executing a series of tests across diverse batch sizes to assess
   system's behavior under different configurations.

Signed-off-by: Tushar Vyavahare <tushar.vyavahare@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Magnus Karlsson <magnus.karlsson@intel.com>
Link: https://lore.kernel.org/bpf/20240402114529.545475-8-tushar.vyavahare@intel.com

  Parent Hashes: c4f960539fae6f04617d3909cc0dfdb88e7d197b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "A new test case evaluates AF_XDP's robustness under maximum ring sizes in selftests.", 'keywords': 'AF_XDP, test case, ring sizes', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: c4f960539fae6f04617d3909cc0dfdb88e7d197b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c4f960539fae6f04617d3909cc0dfdb88e7d197b
  Author Name: Tushar Vyavahare
  Author Email: tushar.vyavahare@intel.com
  Commit Date: 1712153045
  Commit Message:
    selftests/xsk: Test AF_XDP functionality under minimal ring configurations

Add a new test case that stresses AF_XDP and the driver by configuring
small hardware and software ring sizes. This verifies that AF_XDP continues
to function properly even with insufficient ring space that could lead
to frequent producer/consumer throttling. The test procedure involves:

1. Set the minimum possible ring configuration(tx 64 and rx 128).
2. Run tests with various batch sizes(1 and 63) to validate the system's
   behavior under different configurations.

Update Makefile to include network_helpers.o in the build process for
xskxceiver.

Signed-off-by: Tushar Vyavahare <tushar.vyavahare@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Magnus Karlsson <magnus.karlsson@intel.com>
Link: https://lore.kernel.org/bpf/20240402114529.545475-7-tushar.vyavahare@intel.com

  Parent Hashes: 776021e07fd0d7592c767e60929b954e82676186
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds a test for AF_XDP functionality under minimal ring configurations by updating Makefile and testing with various batch sizes.', 'keywords': 'AF_XDP,minimal ring,test case', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 776021e07fd0d7592c767e60929b954e82676186
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 776021e07fd0d7592c767e60929b954e82676186
  Author Name: Tushar Vyavahare
  Author Email: tushar.vyavahare@intel.com
  Commit Date: 1712153037
  Commit Message:
    selftests/xsk: Introduce set_ring_size function with a retry mechanism for handling AF_XDP socket closures

Introduce a new function
  Parent Hashes: bee3a7b07624223526c1fea465557068546d3b3c
  Refs:  set_ring_size()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce a set_ring_size function with retry mechanism for AF_XDP socket closures in selftests.', 'keywords': 'set_ring_size,retry mechanism,AF_XDP', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: bee3a7b07624223526c1fea465557068546d3b3c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bee3a7b07624223526c1fea465557068546d3b3c
  Author Name: Tushar Vyavahare
  Author Email: tushar.vyavahare@intel.com
  Commit Date: 1712153033
  Commit Message:
    selftests/bpf: Implement set_hw_ring_size function to configure interface ring size

Introduce a new function called set_hw_ring_size that allows for the
dynamic configuration of the ring size within the interface.

Signed-off-by: Tushar Vyavahare <tushar.vyavahare@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Magnus Karlsson <magnus.karlsson@intel.com>
Link: https://lore.kernel.org/bpf/20240402114529.545475-5-tushar.vyavahare@intel.com

  Parent Hashes: 90a695c3d31e1c9f0adb8c4c80028ed4ea7ed5ab
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implement set_hw_ring_size function to adjust interface ring size dynamically.', 'keywords': 'set_hw_ring_size, interface, ring size', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 90a695c3d31e1c9f0adb8c4c80028ed4ea7ed5ab
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 90a695c3d31e1c9f0adb8c4c80028ed4ea7ed5ab
  Author Name: Tushar Vyavahare
  Author Email: tushar.vyavahare@intel.com
  Commit Date: 1712153017
  Commit Message:
    selftests/bpf: Implement get_hw_ring_size function to retrieve current and max interface size

Introduce a new function called get_hw_size that retrieves both the
current and maximum size of the interface and stores this information
in the 'ethtool_ringparam' structure.

Remove ethtool_channels struct from xdp_hw_metadata.c due to redefinition
error. Remove unused linux/if.h include from flow_dissector BPF test to
address CI pipeline failure.

Signed-off-by: Tushar Vyavahare <tushar.vyavahare@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Magnus Karlsson <magnus.karlsson@intel.com>
Link: https://lore.kernel.org/bpf/20240402114529.545475-4-tushar.vyavahare@intel.com

  Parent Hashes: c3bd015090f24dcd2e839db1401e948ad95ce803
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implemented get_hw_ring_size function in BPF selftests to manage interface size configurations and resolved CI-related issues.', 'keywords': 'get_hw_ring_size, ethtool_ringparam, selftests', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs', 'tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: c3bd015090f24dcd2e839db1401e948ad95ce803
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c3bd015090f24dcd2e839db1401e948ad95ce803
  Author Name: Tushar Vyavahare
  Author Email: tushar.vyavahare@intel.com
  Commit Date: 1712152857
  Commit Message:
    selftests/xsk: Make batch size variable

Convert the constant BATCH_SIZE into a variable named batch_size to allow
dynamic modification at runtime. This is required for the forthcoming
changes to support testing different hardware ring sizes.

While running these tests
  Parent Hashes: 7effe3fdc049a34c56a68671100b5570e53e8f0a
  Refs:  a bug was identified when the batch size is
roughly the same as the NIC ring size. This has now been addressed by
Maciej's fix in commit 913eda2b08cc ("i40e: xsk: remove count_mask").

Signed-off-by: Tushar Vyavahare <tushar.vyavahare@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Magnus Karlsson <magnus.karlsson@intel.com>
Link: https://lore.kernel.org/bpf/20240402114529.545475-3-tushar.vyavahare@intel.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit changes the BATCH_SIZE constant to a variable to support dynamic modification for testing different hardware ring sizes.', 'keywords': 'batch_size,dynamic,testing', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 7effe3fdc049a34c56a68671100b5570e53e8f0a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7effe3fdc049a34c56a68671100b5570e53e8f0a
  Author Name: Tushar Vyavahare
  Author Email: tushar.vyavahare@intel.com
  Commit Date: 1712152814
  Commit Message:
    tools: Add ethtool.h header to tooling infra

This commit duplicates the ethtool.h file from the include/uapi/linux
directory in the kernel source to the tools/include/uapi/linux directory.

This action ensures that the ethtool.h file used in the tools directory
is in sync with the kernel's version
  Parent Hashes: 49b73fa623c47302befecba0c2c310739ed0a088
  Refs:  maintaining consistency across the
codebase.

There are some checkpatch warnings in this file that could be cleaned up

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Duplicate ethtool.h header to sync tools with kernel version.', 'keywords': 'ethtool,sync,header', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 49b73fa623c47302befecba0c2c310739ed0a088
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 49b73fa623c47302befecba0c2c310739ed0a088
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1712112351
  Commit Message:
    Merge branch 'bpf-arm64-add-support-for-bpf-arena'

Puranjay Mohan says:

====================
bpf
  Parent Hashes: c07b4bcd5163c2929d8bfc55140325fc15afb4eb 4dd31243e30843d5f63bccfb0369146e4de1a130
  Refs: arm64: Add support for BPF Arena

Changes in V4
V3: https://lore.kernel.org/bpf/20240323103057.26499-1-puranjay12@gmail.com/
- Use more descriptive variable names.
- Use insn_is_cast_user() helper.

Changes in V3
V2: https://lore.kernel.org/bpf/20240321153102.103832-1-puranjay12@gmail.com/
- Optimize bpf_addr_space_cast as suggested by Xu Kuohai

Changes in V2
V1: https://lore.kernel.org/bpf/20240314150003.123020-1-puranjay12@gmail.com/
- Fix build warnings by using 5 in place of 32 as DONT_CLEAR marker.
  R5 is not mapped to any BPF register so it can safely be used here.

This series adds the support for PROBE_MEM32 and bpf_addr_space_cast
instructions to the ARM64 BPF JIT. These two instructions allow the
enablement of BPF Arena.

All arena related selftests are passing.

  [root@ip-172-31-6-62 bpf]# ./test_progs -a "*arena*"
  #3/1     arena_htab/arena_htab_llvm:OK
  #3/2     arena_htab/arena_htab_asm:OK
  #3       arena_htab:OK
  #4/1     arena_list/arena_list_1:OK
  #4/2     arena_list/arena_list_1000:OK
  #4       arena_list:OK
  #434/1   verifier_arena/basic_alloc1:OK
  #434/2   verifier_arena/basic_alloc2:OK
  #434/3   verifier_arena/basic_alloc3:OK
  #434/4   verifier_arena/iter_maps1:OK
  #434/5   verifier_arena/iter_maps2:OK
  #434/6   verifier_arena/iter_maps3:OK
  #434     verifier_arena:OK
  Summary: 3/10 PASSED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges support for BPF Arena into the ARM64 BPF JIT with successful selftests.', 'keywords': 'BPF Arena, ARM64, JIT', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4dd31243e30843d5f63bccfb0369146e4de1a130
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4dd31243e30843d5f63bccfb0369146e4de1a130
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1712112350
  Commit Message:
    bpf: Add arm64 JIT support for bpf_addr_space_cast instruction.

LLVM generates bpf_addr_space_cast instruction while translating
pointers between native (zero) address space and
__attribute__((address_space(N))). The addr_space=0 is reserved as
bpf_arena address space.

rY = addr_space_cast(rX
  Parent Hashes: 339af577ec05c8fc0b96f23579614ae853d913ab
  Refs:  0

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add ARM64 JIT support for the bpf_addr_space_cast instruction.', 'keywords': 'ARM64,JIT,bpf_addr_space_cast', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 339af577ec05c8fc0b96f23579614ae853d913ab
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 339af577ec05c8fc0b96f23579614ae853d913ab
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1712112350
  Commit Message:
    bpf: Add arm64 JIT support for PROBE_MEM32 pseudo instructions.

Add support for [LDX | STX | ST]
  Parent Hashes: c07b4bcd5163c2929d8bfc55140325fc15afb4eb
  Refs:  PROBE_MEM32

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added support for arm64 JIT for PROBE_MEM32 pseudo instructions in eBPF.', 'keywords': 'arm64,JIT,PROBE_MEM32', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c07b4bcd5163c2929d8bfc55140325fc15afb4eb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c07b4bcd5163c2929d8bfc55140325fc15afb4eb
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1712077549
  Commit Message:
    selftests/bpf: Add pid limit for mptcpify prog

In order to prevent mptcpify prog from affecting the running results
of other BPF tests
  Parent Hashes: 15ea39ad7e83af16480bbf20144fcc6edf4757f9
  Refs:  a pid limit was added to restrict it from only
modifying its own program.

Suggested-by: Martin KaFai Lau <martin.lau@kernel.org>
Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/8987e2938e15e8ec390b85b5dcbee704751359dc.1712054986.git.tanggeliang@kylinos.cn


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a pid limit to mptcpify program to prevent interference with other BPF tests.', 'keywords': 'pid limit, mptcpify, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 15ea39ad7e83af16480bbf20144fcc6edf4757f9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 15ea39ad7e83af16480bbf20144fcc6edf4757f9
  Author Name: Tobias Böhm
  Author Email: tobias@aibor.de
  Commit Date: 1712075314
  Commit Message:
    libbpf: Use local bpf_helpers.h include

Commit 20d59ee55172fdf6 ("libbpf: add bpf_core_cast() macro") added a
bpf_helpers include in bpf_core_read.h as a system include. Usually
  Parent Hashes: ce09cbdd988887662546a1175bcfdfc6c8fdd150
  Refs:  the
includes are local

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Change the inclusion of bpf_helpers.h to a local include in libbpf.', 'keywords': 'local, bpf_helpers, include', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ce09cbdd988887662546a1175bcfdfc6c8fdd150
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ce09cbdd988887662546a1175bcfdfc6c8fdd150
  Author Name: Jose Fernandez
  Author Email: josef@netflix.com
  Commit Date: 1712069475
  Commit Message:
    bpf: Improve program stats run-time calculation

This patch improves the run-time calculation for program stats by
capturing the duration as soon as possible after the program returns.

Previously
  Parent Hashes: c186ed12a8ec498532d13de43094bdec9ac6f121
  Refs:  the duration included u64_stats_t operations. While the
instrumentation overhead is part of the total time spent when stats are
enabled

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve run-time calculation by capturing program stats duration earlier.', 'keywords': 'run-time,program,stats', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ff91059932401894e6c86341915615c5eb0eca48
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ff91059932401894e6c86341915615c5eb0eca48
  Author Name: Jakub Sitnicki
  Author Email: jakub@cloudflare.com
  Commit Date: 1712068265
  Commit Message:
    bpf
  Parent Hashes: 8c3fe029d79ada599fa558fdf3da0322fc38de36
  Refs:  sockmap: Prevent lock inversion deadlock in map delete elem

syzkaller started using corpuses where a BPF tracing program deletes
elements from a sockmap/sockhash map. Because BPF tracing programs can be
invoked from any interrupt context

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Prevent lock inversion deadlock in sockmap/sockhash map element deletion by BPF tracing programs.', 'keywords': 'lock inversion, deadlock, sockmap', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c186ed12a8ec498532d13de43094bdec9ac6f121
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c186ed12a8ec498532d13de43094bdec9ac6f121
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1712068168
  Commit Message:
    selftests/bpf: Skip test when perf_event_open returns EOPNOTSUPP

When testing send_signal and stacktrace_build_id_nmi using the riscv sbi
pmu driver without the sscofpmf extension or the riscv legacy pmu driver
  Parent Hashes: 2a24e2485722b0e12e17a2bd473bd15c9e420bdb
  Refs: 
then failures as follows are encountered:

    test_send_signal_common:FAIL:perf_event_open unexpected perf_event_open: actual -1 < expected 0
    #272/3   send_signal/send_signal_nmi:FAIL

    test_stacktrace_build_id_nmi:FAIL:perf_event_open err -1 errno 95
    #304     stacktrace_build_id_nmi:FAIL

The reason is that the above pmu driver or hardware does not support
sampling events

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies test scripts to skip tests when perf_event_open returns EOPNOTSUPP due to unsupported sampling events in certain RISC-V configurations.', 'keywords': 'selftests,bpf,EOPNOTSUPP', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 2a24e2485722b0e12e17a2bd473bd15c9e420bdb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2a24e2485722b0e12e17a2bd473bd15c9e420bdb
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1712067649
  Commit Message:
    bpftool: Use __typeof__() instead of typeof() in BPF skeleton

When generated BPF skeleton header is included in C++ code base
  Parent Hashes: 965c6167c93f3fac53e25807f83c07e87b3c085a
  Refs:  some
compiler setups will emit warning about using language extensions due to
typeof() usage

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replaces typeof() with __typeof__() in BPF skeleton to avoid compiler warnings in C++ code.', 'keywords': 'bpftool, compiler, BPF', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 965c6167c93f3fac53e25807f83c07e87b3c085a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 965c6167c93f3fac53e25807f83c07e87b3c085a
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1712067240
  Commit Message:
    selftests/bpf: Using llvm may_goto inline asm for cond_break macro

Currently
  Parent Hashes: 9dc182c58b5f5d4ac125ac85ad553f7142aa08d4
  Refs:  cond_break macro uses bytes to encode the may_goto insn.
Patch [1] in llvm implemented may_goto insn in BPF backend.
Replace byte-level encoding with llvm inline asm for better usability.
Using llvm may_goto insn is controlled by macro __BPF_FEATURE_MAY_GOTO.

  [1] https://github.com/llvm/llvm-project/commit/0e0bfacff71859d1f9212205f8f873d47029d3fb

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20240402025446.3215182-1-yonghong.song@linux.dev


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates the cond_break macro to use llvm inline assembly for better usability.', 'keywords': 'llvm, inline asm, may_goto', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 9dc182c58b5f5d4ac125ac85ad553f7142aa08d4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9dc182c58b5f5d4ac125ac85ad553f7142aa08d4
  Author Name: Anton Protopopov
  Author Email: aspsk@isovalent.com
  Commit Date: 1712067120
  Commit Message:
    bpf: Add a verbose message if map limit is reached

When more than 64 maps are used by a program and its subprograms the
verifier returns -E2BIG. Add a verbose message which highlights the
source of the error and also print the actual limit.

Signed-off-by: Anton Protopopov <aspsk@isovalent.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20240402073347.195920-1-aspsk@isovalent.com

  Parent Hashes: ca4ddc26f8acaa9cb451fcb20f7ab0f02e4970cb
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds a verbose message for map limit exceeded errors in the bpf verifier.', 'keywords': 'verbose, verifier, maps', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ca4ddc26f8acaa9cb451fcb20f7ab0f02e4970cb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ca4ddc26f8acaa9cb451fcb20f7ab0f02e4970cb
  Author Name: David Lechner
  Author Email: dlechner@baylibre.com
  Commit Date: 1712066674
  Commit Message:
    bpf: Fix typo in uapi doc comments

In a few places in the bpf uapi headers
  Parent Hashes: a70f5d840a56a82c576385ca79ee55c1598f1bc3
  Refs:  EOPNOTSUPP is missing a "P" in
the doc comments. This adds the missing "P".

Signed-off-by: David Lechner <dlechner@baylibre.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240329152900.398260-2-dlechner@baylibre.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed a typo in the bpf uapi doc comments by adding a missing "P".', 'keywords': 'bpf, typo, doc comments', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The syscall interface', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: a70f5d840a56a82c576385ca79ee55c1598f1bc3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a70f5d840a56a82c576385ca79ee55c1598f1bc3
  Author Name: Rameez Rehman
  Author Email: rameezrehman408@hotmail.com
  Commit Date: 1712065823
  Commit Message:
    bpftool: Clean-up typos
  Parent Hashes: ea379b3ccc2e4dff9c3d616f0611b5312fe389ad
  Refs:  punctuation

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit cleans up typographical errors in the bpftool utility.', 'keywords': 'bpftool,cleanup,typos', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: ea379b3ccc2e4dff9c3d616f0611b5312fe389ad
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ea379b3ccc2e4dff9c3d616f0611b5312fe389ad
  Author Name: Rameez Rehman
  Author Email: rameezrehman408@hotmail.com
  Commit Date: 1712065823
  Commit Message:
    bpftool: Remove useless emphasis on command description in man pages

As it turns out
  Parent Hashes: f7b68543642136164ce7348945d3ada707c4e635
  Refs:  the terms in definition lists in the rST file are
already rendered with bold-ish formatting when generating the man pages;
all double-star sequences we have in the commands for the command
description are unnecessary

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit removes unnecessary bold formatting from command descriptions in bpftool man pages.', 'keywords': 'bpftool,man pages,formatting', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: f7b68543642136164ce7348945d3ada707c4e635
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f7b68543642136164ce7348945d3ada707c4e635
  Author Name: Rameez Rehman
  Author Email: rameezrehman408@hotmail.com
  Commit Date: 1712065823
  Commit Message:
    bpftool: Use simpler indentation in source rST for documentation

The rST manual pages for bpftool would use a mix of tabs and spaces for
indentation. While this is the norm in C code
  Parent Hashes: 623bdd58be3727318d374f0052f9dfff1e87b854
  Refs:  this is rather unusual
for rST documents

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Simplified indentation in bpftool's rST documentation by standardizing to spaces.", 'keywords': 'bpftool, rST, indentation', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: fcf4692fa39e86a590c14a4af2de704e1d20a3b5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fcf4692fa39e86a590c14a4af2de704e1d20a3b5
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1712029404
  Commit Message:
    mptcp: prevent BPF accessing lowat from a subflow socket.

Alexei reported the following splat:

 WARNING: CPU: 32 PID: 3276 at net/mptcp/subflow.c:1430 subflow_data_ready+0x147/0x1c0
 Modules linked in: dummy bpf_testmod(O) [last unloaded: bpf_test_no_cfi(O)]
 CPU: 32 PID: 3276 Comm: test_progs Tainted: GO       6.8.0-12873-g2c43c33bfd23
 Call Trace:
  <TASK>
  mptcp_set_rcvlowat+0x79/0x1d0
  sk_setsockopt+0x6c0/0x1540
  __bpf_setsockopt+0x6f/0x90
  bpf_sock_ops_setsockopt+0x3c/0x90
  bpf_prog_509ce5db2c7f9981_bpf_test_sockopt_int+0xb4/0x11b
  bpf_prog_dce07e362d941d2b_bpf_test_socket_sockopt+0x12b/0x132
  bpf_prog_348c9b5faaf10092_skops_sockopt+0x954/0xe86
  __cgroup_bpf_run_filter_sock_ops+0xbc/0x250
  tcp_connect+0x879/0x1160
  tcp_v6_connect+0x50c/0x870
  mptcp_connect+0x129/0x280
  __inet_stream_connect+0xce/0x370
  inet_stream_connect+0x36/0x50
  bpf_trampoline_6442491565+0x49/0xef
  inet_stream_connect+0x5/0x50
  __sys_connect+0x63/0x90
  __x64_sys_connect+0x14/0x20

The root cause of the issue is that bpf allows accessing mptcp-level
proto_ops from a tcp subflow scope.

Fix the issue detecting the problematic call and preventing any action.

Reported-by: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/482
Fixes: 5684ab1a0eff ("mptcp: give rcvlowat some love")
Signed-off-by: Paolo Abeni <pabeni@redhat.com>
Reviewed-by: Mat Martineau <martineau@kernel.org>
Reviewed-by: Matthieu Baerts (NGI0) <matttbe@kernel.org>
Link: https://lore.kernel.org/r/d8cb7d8476d66cb0812a6e29cd1e626869d9d53e.1711738080.git.pabeni@redhat.com
Signed-off-by: Jakub Kicinski <kuba@kernel.org>

  Parent Hashes: 31974122cfdeaf56abc18d8ab740d580d9833e90
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix to prevent BPF from accessing lowat from a subflow socket in MPTCP.', 'keywords': 'MPTCP,BPF,lowat', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 8c3fe029d79ada599fa558fdf3da0322fc38de36
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8c3fe029d79ada599fa558fdf3da0322fc38de36
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1712029077
  Commit Message:
    Merge branch 'x86-bpf-fixes-for-the-bpf-jit-with-retbleed-stuff'

Joan Bruguera Micó says:

====================
x86/bpf: Fixes for the BPF JIT with retbleed=stuff

From: Joan Bruguera Micó <joanbrugueram@gmail.com>

Fixes two issues that cause kernels panic when using the BPF JIT with
the call depth tracking / stuffing mitigation for Skylake processors
(`retbleed=stuff`). Both issues can be triggered by running simple
BPF programs (e.g. running the test suite should trigger both).

The first (resubmit) fixes a trivial issue related to calculating the
destination IP for call instructions with call depth tracking.

The second is related to using the correct IP for relocations
  Parent Hashes: 6dae957c8eef6eae5b386462767de97303235d5c 6a537453000a916392fcac1acb96c1d9d1e05b74
  Refs:  related
to the recently introduced %rip-relative addressing for PER_CPU_VAR.

Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
---
v2:
  Simplify calculation of "ip".
  Add more details to the commit message.

Joan Bruguera Micó (1):
  x86/bpf: Fix IP for relocating call depth accounting
====================

Link: https://lore.kernel.org/r/20240401185821.224068-1-ubizjak@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes issues causing kernel crashes when using BPF JIT with retbleed mitigation on Skylake processors.', 'keywords': 'BPF JIT, retbleed, Skylake', 'commit_classification': "It's a bug fix.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6a537453000a916392fcac1acb96c1d9d1e05b74
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6a537453000a916392fcac1acb96c1d9d1e05b74
  Author Name: Joan Bruguera Micó
  Author Email: joanbrugueram@gmail.com
  Commit Date: 1712029076
  Commit Message:
    x86/bpf: Fix IP for relocating call depth accounting

The commit:

  59bec00ace28 ("x86/percpu: Introduce %rip-relative addressing to PER_CPU_VAR()")

made PER_CPU_VAR() to use rip-relative addressing
  Parent Hashes: 9d98aa088386aee3db1b7b60b800c0fde0654a4a
  Refs:  hence
INCREMENT_CALL_DEPTH macro and skl_call_thunk_template got rip-relative
asm code inside of it. A follow up commit:

  17bce3b2ae2d ("x86/callthunks: Handle %rip-relative relocations in call thunk template")

changed x86_call_depth_emit_accounting() to use apply_relocation()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix IP alignment in x86 BPF by handling RIP-relative relocations in call depth accounting.', 'keywords': 'x86, BPF, relocation', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9d98aa088386aee3db1b7b60b800c0fde0654a4a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9d98aa088386aee3db1b7b60b800c0fde0654a4a
  Author Name: Uros Bizjak
  Author Email: ubizjak@gmail.com
  Commit Date: 1712029076
  Commit Message:
    x86/bpf: Fix IP after emitting call depth accounting

Adjust the IP passed to `emit_patch` so it calculates the correct offset
for the CALL instruction if `x86_call_depth_emit_accounting` emits code.
Otherwise we will skip some instructions and most likely crash.

Fixes: b2e9dfe54be4 ("x86/bpf: Emit call depth accounting if required")
Link: https://lore.kernel.org/lkml/20230105214922.250473-1-joanbrugueram@gmail.com/
Co-developed-by: Joan Bruguera Micó <joanbrugueram@gmail.com>
Signed-off-by: Joan Bruguera Micó <joanbrugueram@gmail.com>
Signed-off-by: Uros Bizjak <ubizjak@gmail.com>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/r/20240401185821.224068-2-ubizjak@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 6dae957c8eef6eae5b386462767de97303235d5c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes instruction pointer offset calculation for x86 BPF call depth accounting.', 'keywords': 'IP,call depth,x86', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: d29a8134c78232213fb88f20d7ae865ec364e367
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d29a8134c78232213fb88f20d7ae865ec364e367
  Author Name: Michal Schmidt
  Author Email: mschmidt@redhat.com
  Commit Date: 1711987089
  Commit Message:
    ice: avoid the PTP hardware semaphore in gettimex64 path

The PTP hardware semaphore (PFTSYN_SEM) is used to synchronize
operations that program the PTP timers. The operations involve issuing
commands to the sideband queue. The E810 does not have a hardware
sideband queue
  Parent Hashes: 0e2bddf9e5f926ce32ed635012d0f8a0b54075d5
  Refs:  so the admin queue is used. The admin queue is slow.
I have observed delays in hundreds of milliseconds waiting for
ice_sq_done.

When phc2sys reads the time from the ice PTP clock and PFTSYN_SEM is
held by a task performing one of the slow operations

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve gettimex64 path by avoiding PTP hardware semaphore in ice driver to reduce delays.', 'keywords': 'PTP hardware, ice driver, semaphore', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 623bdd58be3727318d374f0052f9dfff1e87b854
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 623bdd58be3727318d374f0052f9dfff1e87b854
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1711757910
  Commit Message:
    selftests/bpf: make multi-uprobe tests work in RELEASE=1 mode

When BPF selftests are built in RELEASE=1 mode with -O2 optimization
level
  Parent Hashes: 59f2f841179aa6a0899cb9cf53659149a35749b7
  Refs:  uprobe_multi binary

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve multi-uprobe tests compatibility with RELEASE=1 optimization mode.', 'keywords': 'selftests,uprobe,RELEASE', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 59f2f841179aa6a0899cb9cf53659149a35749b7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 59f2f841179aa6a0899cb9cf53659149a35749b7
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1711735841
  Commit Message:
    bpf: Avoid kfree_rcu() under lock in bpf_lpm_trie.

syzbot reported the following lock sequence:
cpu 2:
  grabs timer_base lock
    spins on bpf_lpm lock

cpu 1:
  grab rcu krcp lock
    spins on timer_base lock

cpu 0:
  grab bpf_lpm lock
    spins on rcu krcp lock

bpf_lpm lock can be the same.
timer_base lock can also be the same due to timer migration.
but rcu krcp lock is always per-cpu
  Parent Hashes: 201874fc064ef14c26ea87a890b3f58296750d2d
  Refs:  so it cannot be the same lock.
Hence it's a false positive.
To avoid lockdep complaining move kfree_rcu() after spin_unlock.

Reported-by: syzbot+1fa663a2100308ab6eab@syzkaller.appspotmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240329171439.37813-1-alexei.starovoitov@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes a lock ordering issue by moving kfree_rcu() outside of the spinlock in bpf_lpm_trie.', 'keywords': 'bpf_lpm_trie, lock, kfree_rcu', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 6dae957c8eef6eae5b386462767de97303235d5c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6dae957c8eef6eae5b386462767de97303235d5c
  Author Name: Anton Protopopov
  Author Email: aspsk@isovalent.com
  Commit Date: 1711729195
  Commit Message:
    bpf: fix possible file descriptor leaks in verifier

The resolve_pseudo_ldimm64() function might have leaked file
descriptors when BPF_MAP_TYPE_ARENA was used in a program (some
error paths missed a corresponding fdput). Add missing fdputs.

v2:
  remove unrelated changes from the fix

Fixes: 6082b6c328b5 ("bpf: Recognize addr_space_cast instruction in the verifier.")
Signed-off-by: Anton Protopopov <aspsk@isovalent.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Acked-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Link: https://lore.kernel.org/r/20240329071106.67968-1-aspsk@isovalent.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 62248b22d01e96a4d669cde0d7005bd51ebf9e76
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes file descriptor leaks in verifier for BPF_MAP_TYPE_ARENA programs.', 'keywords': 'verifier, file descriptors, BPF_MAP_TYPE_ARENA', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 201874fc064ef14c26ea87a890b3f58296750d2d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 201874fc064ef14c26ea87a890b3f58296750d2d
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1711678335
  Commit Message:
    Merge branch 'Use start_server and connect_fd_to_fd'

Geliang Tang says:

====================
Simplify bpf_tcp_ca test by using connect_fd_to_fd and start_server
helpers.

v4:
 - Matt reminded me that I shouldn't send a square-to patch to BPF (thanks)
  Parent Hashes: e8742081db7d01f980c6161ae1e8a1dbc1e30979 426670929fda4485a23094e03cea5d9b3ca918aa
  Refs: 
   so I update them into two patches in v4.

v3:
 - split v2 as two patches as Daniel suggested.
 - The patch "selftests/bpf: Use start_server in bpf_tcp_ca" is merged
   by Daniel (thanks)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Simplify bpf_tcp_ca test using connect_fd_to_fd and start_server helpers.', 'keywords': 'simplify, bpf_tcp_ca, helpers', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 426670929fda4485a23094e03cea5d9b3ca918aa
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 426670929fda4485a23094e03cea5d9b3ca918aa
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1711678335
  Commit Message:
    selftests/bpf: Drop settimeo in do_test

settimeo is invoked in start_server() and in connect_fd_to_fd() already
  Parent Hashes: e5e1a3aa56773d55dfb71c4d58176bc19ecfa739
  Refs: 
no need to invoke settimeo(lfd

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove unnecessary settimeo invocation from selftests in BPF test suite.', 'keywords': 'settimeo,test,removal', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e5e1a3aa56773d55dfb71c4d58176bc19ecfa739
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e5e1a3aa56773d55dfb71c4d58176bc19ecfa739
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1711678334
  Commit Message:
    selftests/bpf: Use connect_fd_to_fd in bpf_tcp_ca

To simplify the code
  Parent Hashes: e8742081db7d01f980c6161ae1e8a1dbc1e30979
  Refs:  use BPF selftests helper connect_fd_to_fd() in
bpf_tcp_ca.c instead of open-coding it. This helper is defined in
network_helpers.c

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Simplifies bpf_tcp_ca selftest by using connect_fd_to_fd helper from network_helpers.', 'keywords': 'selftests, connect_fd_to_fd, simplify', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e8742081db7d01f980c6161ae1e8a1dbc1e30979
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e8742081db7d01f980c6161ae1e8a1dbc1e30979
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1711677659
  Commit Message:
    bpf: Mark bpf prog stack with kmsan_unposion_memory in interpreter mode

syzbot reported uninit memory usages during map_{lookup
  Parent Hashes: e478cf26c556e4ab572ab0ab2306c986901dcd61
  Refs: delete}_elem.

==========
BUG: KMSAN: uninit-value in __dev_map_lookup_elem kernel/bpf/devmap.c:441 [inline]
BUG: KMSAN: uninit-value in dev_map_lookup_elem+0xf3/0x170 kernel/bpf/devmap.c:796
__dev_map_lookup_elem kernel/bpf/devmap.c:441 [inline]
dev_map_lookup_elem+0xf3/0x170 kernel/bpf/devmap.c:796
____bpf_map_lookup_elem kernel/bpf/helpers.c:42 [inline]
bpf_map_lookup_elem+0x5c/0x80 kernel/bpf/helpers.c:38
___bpf_prog_run+0x13fe/0xe0f0 kernel/bpf/core.c:1997
__bpf_prog_run256+0xb5/0xe0 kernel/bpf/core.c:2237
==========

The reproducer should be in the interpreter mode.

The C reproducer is trying to run the following bpf prog:

    0: (18) r0 = 0x0
    2: (18) r1 = map[id:49]
    4: (b7) r8 = 16777216
    5: (7b) *(u64 *)(r10 -8) = r8
    6: (bf) r2 = r10
    7: (07) r2 += -229
            ^^^^^^^^^^

    8: (b7) r3 = 8
    9: (b7) r4 = 0
   10: (85) call dev_map_lookup_elem#1543472
   11: (95) exit

It is due to the "void *key" (r2) passed to the helper. bpf allows uninit
stack memory access for bpf prog with the right privileges. This patch
uses kmsan_unpoison_memory() to mark the stack as initialized.

This should address different syzbot reports on the uninit "void *key"
argument during map_{lookup

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit marks BPF program stack with kmsan_unpoison_memory in interpreter mode to address uninitialized memory usage during map lookups.', 'keywords': 'kmsan_unpoison_memory, uninit-memory, interpreter', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1a80dbcb2dbaf6e4c216e62e30fa7d3daa8001ce
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1a80dbcb2dbaf6e4c216e62e30fa7d3daa8001ce
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1711676865
  Commit Message:
    bpf: support deferring bpf_link dealloc to after RCU grace period

BPF link for some program types is passed as a "context" which can be
used by those BPF programs to look up additional information. E.g.
  Parent Hashes: e9c856cabefb71d47b2eeb197f72c9c88e9b45b0
  Refs:  for
multi-kprobes and multi-uprobes

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Support added for deferring bpf_link deallocation to post RCU grace period in eBPF.', 'keywords': 'bpf_link, RCU, deallocation', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: e9c856cabefb71d47b2eeb197f72c9c88e9b45b0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e9c856cabefb71d47b2eeb197f72c9c88e9b45b0
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1711676865
  Commit Message:
    bpf: put uprobe link's path and task in release callback

There is no need to delay putting either path or task to deallocation
step. It can be done right after bpf_uprobe_unregister. Between release
and dealloc
  Parent Hashes: 037965402a010898d34f4e35327d22c0a95cd51f
  Refs:  there could be still some running BPF programs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Optimize allocation timing for uprobe link's path and task in BPF.", 'keywords': 'uprobe,release,deallocation', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: e478cf26c556e4ab572ab0ab2306c986901dcd61
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e478cf26c556e4ab572ab0ab2306c986901dcd61
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1711675901
  Commit Message:
    Merge branch 'bpf-fix-a-couple-of-test-failures-with-lto-kernel'

Yonghong Song says:

====================
bpf: Fix a couple of test failures with LTO kernel

With a LTO kernel built with clang
  Parent Hashes: 5da7fb04902b0f0fcd13bc5ef216e232fa971efa 6302bdeb91df9b4484b9d537c29f8b6117f3f73d
  Refs:  with one of earlier version of kernel

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix test failures in BPF with LTO kernel built using clang.', 'keywords': 'fix, LTO, test failures', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6302bdeb91df9b4484b9d537c29f8b6117f3f73d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6302bdeb91df9b4484b9d537c29f8b6117f3f73d
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1711675901
  Commit Message:
    selftests/bpf: Add a kprobe_multi subtest to use addrs instead of syms

Get addrs directly from available_filter_functions_addrs and
send to the kernel during kprobe_multi_attach. This avoids
consultation of /proc/kallsyms. But available_filter_functions_addrs
is introduced in 6.5
  Parent Hashes: 9edaafadc2c50f2af99ee5b3bad6831e1b6ad54f
  Refs:  i.e.

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a subtest for kprobe_multi using direct addresses instead of symbols in selftests/bpf.', 'keywords': 'kprobe_multi, addresses, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 9edaafadc2c50f2af99ee5b3bad6831e1b6ad54f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9edaafadc2c50f2af99ee5b3bad6831e1b6ad54f
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1711675901
  Commit Message:
    selftests/bpf: Fix kprobe_multi_bench_attach test failure with LTO kernel

In my locally build clang LTO kernel (enabling CONFIG_LTO and
CONFIG_LTO_CLANG_THIN)
  Parent Hashes: d1f02581059e42d8daf944aae2a296254cc7a5d5
  Refs:  kprobe_multi_bench_attach/kernel subtest
failed like:
  test_kprobe_multi_bench_attach:PASS:get_syms 0 nsec
  test_kprobe_multi_bench_attach:PASS:kprobe_multi_empty__open_and_load 0 nsec
  libbpf: prog 'test_kprobe_empty': failed to attach: No such process
  test_kprobe_multi_bench_attach:FAIL:bpf_program__attach_kprobe_multi_opts unexpected error: -3
  #117/1   kprobe_multi_bench_attach/kernel:FAIL

There are multiple symbols in /sys/kernel/debug/tracing/available_filter_functions
are renamed in /proc/kallsyms due to cross file inlining. One example is for
  static function __access_remote_vm in mm/memory.c.
In a non-LTO kernel

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes test failure in kprobe_multi_bench_attach due to symbol renaming in LTO kernels.', 'keywords': 'kprobe_multi,LTO,fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: d1f02581059e42d8daf944aae2a296254cc7a5d5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d1f02581059e42d8daf944aae2a296254cc7a5d5
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1711675901
  Commit Message:
    selftests/bpf: Add {load
  Parent Hashes: 9475dacb75e0b5efae086dc904f4d27c31f15157
  Refs: search}_kallsyms_custom_local()

These two functions allow selftests to do loading/searching
kallsyms based on their specific compare functions.

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240326041513.1199440-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'New functions added for loading and searching kallsyms for selftests in the BPF subsystem.', 'keywords': 'selftests, kallsyms, functions', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9475dacb75e0b5efae086dc904f4d27c31f15157
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9475dacb75e0b5efae086dc904f4d27c31f15157
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1711675901
  Commit Message:
    selftests/bpf: Refactor trace helper func load_kallsyms_local()

Refactor trace helper function load_kallsyms_local() such that
it invokes a common function with a compare function as input.
The common function will be used later for other local functions.

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240326041508.1199239-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: d1320649346c36c5ba7b579533bf518960ef71e1
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor trace helper function to use a common function with a comparison input for future usage.', 'keywords': 'refactor, trace, helper', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: d1320649346c36c5ba7b579533bf518960ef71e1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d1320649346c36c5ba7b579533bf518960ef71e1
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1711675901
  Commit Message:
    selftests/bpf: Refactor some functions for kprobe_multi_test

Refactor some functions in kprobe_multi_test.c to extract
some helper functions who will be used in later patches
to avoid code duplication.

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240326041503.1198982-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: c56e59776f46d77984329488878a52baf4969457
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor functions in kprobe_multi_test.c to create reusable helpers for future patches, reducing code duplication.', 'keywords': 'refactor, kprobe, helper', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: c56e59776f46d77984329488878a52baf4969457
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c56e59776f46d77984329488878a52baf4969457
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1711675901
  Commit Message:
    libbpf: Handle <orig_name>.llvm.<hash> symbol properly

With CONFIG_LTO_CLANG_THIN enabled
  Parent Hashes: ad2b05286e94485070475e473963724fa657491c
  Refs:  with some of previous
version of kernel code base ([1])

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Handles the <orig_name>.llvm.<hash> symbol properly in libbpf with CONFIG_LTO_CLANG_THIN enabled.', 'keywords': 'libbpf symbol handling', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ad2b05286e94485070475e473963724fa657491c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ad2b05286e94485070475e473963724fa657491c
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1711675901
  Commit Message:
    libbpf: Mark libbpf_kallsyms_parse static function

Currently libbpf_kallsyms_parse() function is declared as a global
function but actually it is not a API and there is no external
users in bpftool/bpf-selftests. So let us mark the function as
static.

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240326041453.1197949-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: cdfd9cc3ba147ceea650afa6b7031e31a98d500e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit marks libbpf_kallsyms_parse function as static since it is not used externally.', 'keywords': 'libbpf,static,function', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cdfd9cc3ba147ceea650afa6b7031e31a98d500e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cdfd9cc3ba147ceea650afa6b7031e31a98d500e
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1711675901
  Commit Message:
    selftests/bpf: Replace CHECK with ASSERT macros for ksyms test

Replace CHECK with ASSERT macros for ksyms tests.
This test failed earlier with clang lto kernel
  Parent Hashes: 5da7fb04902b0f0fcd13bc5ef216e232fa971efa
  Refs:  but the
issue is gone with latest code base. But replacing
CHECK with ASSERT still improves code as ASSERT is
preferred in selftests.

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240326041448.1197812-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replaced CHECK with ASSERT macros in ksyms test for improved code quality in selftests.', 'keywords': 'ASSERT, ksyms, selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 5da7fb04902b0f0fcd13bc5ef216e232fa971efa
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5da7fb04902b0f0fcd13bc5ef216e232fa971efa
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1711675900
  Commit Message:
    selftests/bpf: Test loading bpf-tcp-cc prog calling the kernel tcp-cc kfuncs

This patch adds a test to ensure all static tcp-cc kfuncs is visible to
the struct_ops bpf programs. It is checked by successfully loading
the struct_ops programs calling these tcp-cc kfuncs.

This patch needs to enable the CONFIG_TCP_CONG_DCTCP and
the CONFIG_TCP_CONG_BBR.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20240322191433.4133280-2-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 42e4ebd390be8e0090d64d58433b6cba45d919e9
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test for bpf-tcp-cc programs using kernel tcp-cc kfuncs.', 'keywords': 'bpf-tcp-cc,kfuncs,struct_ops', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 42e4ebd390be8e0090d64d58433b6cba45d919e9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 42e4ebd390be8e0090d64d58433b6cba45d919e9
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1711675900
  Commit Message:
    bpf: Remove CONFIG_X86 and CONFIG_DYNAMIC_FTRACE guard from the tcp-cc kfuncs

The commit 7aae231ac93b ("bpf: tcp: Limit calling some tcp cc functions to CONFIG_DYNAMIC_FTRACE")
added CONFIG_DYNAMIC_FTRACE guard because pahole was only generating
btf for ftrace-able functions. The ftrace filter had already been
removed from pahole
  Parent Hashes: ee3bad033d01066348913f3220ea81987721ed53
  Refs:  so the CONFIG_DYNAMIC_FTRACE guard can be
removed.

The commit 569c484f9995 ("bpf: Limit static tcp-cc functions in the .BTF_ids list to x86")
has added CONFIG_X86 guard because it failed the powerpc arch which
prepended a "." to the local static function

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit removes configuration guards from tcp-cc kfuncs due to changes in ftrace requirements.', 'keywords': 'CONFIG_X86,CONFIG_DYNAMIC_FTRACE,kfuncs', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: ee3bad033d01066348913f3220ea81987721ed53
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ee3bad033d01066348913f3220ea81987721ed53
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1711675900
  Commit Message:
    bpf: Mitigate latency spikes associated with freeing non-preallocated htab

Following the recent upgrade of one of our BPF programs
  Parent Hashes: a461a51e519aedee8aff518167451b250ce913b3
  Refs:  we encountered
significant latency spikes affecting other applications running on the same
host. After thorough investigation

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Mitigate latency spikes when freeing non-preallocated htab in a BPF program.', 'keywords': 'latency, spikes, htab', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 985d0681b46be7db5ccc330d9a7f318b96ce0029
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 985d0681b46be7db5ccc330d9a7f318b96ce0029
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1711675900
  Commit Message:
    selftests/bpf: add batched tp/raw_tp/fmodret tests

Utilize bpf_modify_return_test_tp() kfunc to have a fast way to trigger
tp/raw_tp/fmodret programs from another BPF program
  Parent Hashes: 3124591f686115aca25d772c2ccb7b1e202c3197
  Refs:  which gives us
comparable batched benchmarks to (batched) kprobe/fentry benchmarks.

We don't switch kprobe/fentry batched benchmarks to this kfunc to make
bench tool usable on older kernels as well.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240326162151.3981687-7-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added batched tests for tp/raw_tp/fmodret programs using bpf_modify_return_test_tp() kfunc.', 'keywords': 'batched tests,kfunc,tp programs', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3124591f686115aca25d772c2ccb7b1e202c3197
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3124591f686115aca25d772c2ccb7b1e202c3197
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1711675900
  Commit Message:
    bpf: add bpf_modify_return_test_tp() kfunc triggering tracepoint

Add a simple bpf_modify_return_test_tp() kfunc
  Parent Hashes: b4ccf9158f5893dedb898687272fabfe80f58907
  Refs:  available to all program
types

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added new kfunc bpf_modify_return_test_tp() for triggering tracepoints in eBPF.', 'keywords': 'bpf,kfunc,tracepoint', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: b4ccf9158f5893dedb898687272fabfe80f58907
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b4ccf9158f5893dedb898687272fabfe80f58907
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1711675900
  Commit Message:
    selftests/bpf: lazy-load trigger bench BPF programs

Instead of front-loading all possible benchmarking BPF programs for
trigger benchmarks
  Parent Hashes: 208c4391204d25d9178fbc87f216daffad00cd15
  Refs:  explicitly specify which BPF programs are used by
specific benchmark and load only it.

This allows to be more flexible in supporting older kernels

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implemented lazy-loading mechanism for BPF programs in selftests to support trigger benchmarks on older kernels.', 'keywords': 'selftests, lazy-load, benchmarks', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 208c4391204d25d9178fbc87f216daffad00cd15
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 208c4391204d25d9178fbc87f216daffad00cd15
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1711675900
  Commit Message:
    selftests/bpf: remove syscall-driven benchs
  Parent Hashes: 7df4e597ea2cfd677e65730948153d5544986a10
  Refs:  keep syscall-count only

Remove "legacy" benchmarks triggered by syscalls in favor of newly added
in-kernel/batched benchmarks. Drop -batched suffix now as well.
Next patch will restore "feature parity" by adding back
tp/raw_tp/fmodret benchmarks based on in-kernel kfunc approach.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240326162151.3981687-4-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed syscall-driven benchmarks in favor of in-kernel batched benchmarks in selftests for BPF.', 'keywords': 'benchmarks, syscall, batched', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7df4e597ea2cfd677e65730948153d5544986a10
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7df4e597ea2cfd677e65730948153d5544986a10
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1711675900
  Commit Message:
    selftests/bpf: add batched
  Parent Hashes: 1175f8dea349e5999d99727346db24f38306a793
  Refs:  mostly in-kernel BPF triggering benchmarks

Existing kprobe/fentry triggering benchmarks have 1-to-1 mapping between
one syscall execution and BPF program run. While we use a fast
get_pgid() syscall

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add batched benchmarks for selftests/bpf focusing on kprobe/fentry with faster syscall execution.', 'keywords': 'batched, benchmarks, kprobe', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 1175f8dea349e5999d99727346db24f38306a793
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1175f8dea349e5999d99727346db24f38306a793
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1711675899
  Commit Message:
    selftests/bpf: rename and clean up userspace-triggered benchmarks

Rename uprobe-base to more precise usermode-count (it will match other
baseline-like benchmarks
  Parent Hashes: 55fc888ded83ed542f3de3e51bae03936a998349
  Refs:  kernel-count and syscall-count). Also use
BENCH_TRIG_USERMODE() macro to define all usermode-based triggering
benchmarks

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Rename and clean up userspace-triggered benchmarks in selftests/bpf and use BENCH_TRIG_USERMODE macro.', 'keywords': 'selftests, benchmarks, rename', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 55fc888ded83ed542f3de3e51bae03936a998349
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 55fc888ded83ed542f3de3e51bae03936a998349
  Author Name: Haiyue Wang
  Author Email: haiyue.wang@intel.com
  Commit Date: 1711675896
  Commit Message:
    bpf
  Parent Hashes: 786bf0e7e2ec90b349a7bab6e97947982ab31f2c
  Refs: arena: Use helper sizeof_field in struct accessors

Use the well defined helper sizeof_field() to calculate the size of a
struct member

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Use the sizeof_field helper for calculating struct member size within the arena.', 'keywords': 'helper, struct, sizeof_field', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 786bf0e7e2ec90b349a7bab6e97947982ab31f2c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 786bf0e7e2ec90b349a7bab6e97947982ab31f2c
  Author Name: Mykyta Yatsenko
  Author Email: yatsenko@meta.com
  Commit Date: 1711675853
  Commit Message:
    bpf: improve error message for unsupported helper

BPF verifier emits "unknown func" message when given BPF program type
does not support BPF helper. This message may be confusing for users
  Parent Hashes: 59b418c7063d30e0a3e1f592d47df096db83185c
  Refs:  as
important context that helper is unknown only to current program type is
not provided.

This patch changes message to "program of this type cannot use helper "
and aligns dependent code in libbpf and tests. Any suggestions on
improving/changing this message are welcome.

Signed-off-by: Mykyta Yatsenko <yatsenko@meta.com>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Quentin Monnet <qmo@kernel.org>
Link: https://lore.kernel.org/r/20240325152210.377548-1-yatsenko@meta.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improves error message clarity in BPF verifier when unsupported helpers are used by certain BPF program types.', 'keywords': 'error message, BPF verifier, helper', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 59b418c7063d30e0a3e1f592d47df096db83185c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 59b418c7063d30e0a3e1f592d47df096db83185c
  Author Name: Anton Protopopov
  Author Email: aspsk@isovalent.com
  Commit Date: 1711675853
  Commit Message:
    bpf: Add a check for struct bpf_fib_lookup size

The struct bpf_fib_lookup should not grow outside of its 64 bytes.
Add a static assert to validate this.

Suggested-by: David Ahern <dsahern@kernel.org>
Signed-off-by: Anton Protopopov <aspsk@isovalent.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240326101742.17421-4-aspsk@isovalent.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 6efec2cb06411a577125b5f531a852c08ead1209
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a static check to ensure struct bpf_fib_lookup size remains 64 bytes.', 'keywords': 'bpf_fib_lookup, static_assert, size_check', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6efec2cb06411a577125b5f531a852c08ead1209
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6efec2cb06411a577125b5f531a852c08ead1209
  Author Name: Anton Protopopov
  Author Email: aspsk@isovalent.com
  Commit Date: 1711675853
  Commit Message:
    selftests/bpf: Add BPF_FIB_LOOKUP_MARK tests

This patch extends the fib_lookup test suite by adding a few test
cases for each IP family to test the new BPF_FIB_LOOKUP_MARK flag
to the bpf_fib_lookup:

  * Test destination IP address selection with and without a mark
    and/or the BPF_FIB_LOOKUP_MARK flag set

Signed-off-by: Anton Protopopov <aspsk@isovalent.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240326101742.17421-3-aspsk@isovalent.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 5311591fbb349fe9f5c555dcba3b13a5831aa72d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extend the fib_lookup test suite with new test cases for BPF_FIB_LOOKUP_MARK flag.', 'keywords': 'fib_lookup, BPF_FIB_LOOKUP_MARK, tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 5311591fbb349fe9f5c555dcba3b13a5831aa72d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5311591fbb349fe9f5c555dcba3b13a5831aa72d
  Author Name: Anton Protopopov
  Author Email: aspsk@isovalent.com
  Commit Date: 1711675852
  Commit Message:
    bpf: Add support for passing mark with bpf_fib_lookup

Extend the bpf_fib_lookup() helper by making it to utilize mark if
the BPF_FIB_LOOKUP_MARK flag is set. In order to pass the mark the
four bytes of struct bpf_fib_lookup are used
  Parent Hashes: c602f4ca13a529b45692de4fdec96b4cdec866da
  Refs:  shared with the
output-only smac/dmac fields.

Signed-off-by: Anton Protopopov <aspsk@isovalent.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: David Ahern <dsahern@kernel.org>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240326101742.17421-2-aspsk@isovalent.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for passing mark with bpf_fib_lookup helper using BPF_FIB_LOOKUP_MARK flag.', 'keywords': 'bpf_fib_lookup, mark, helper', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 50108c352db70405b3d71d8099d0b3adc3b3352c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 50108c352db70405b3d71d8099d0b3adc3b3352c
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1711656577
  Commit Message:
    Merge tag 'net-6.9-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 "Including fixes from bpf
  Parent Hashes: 8d025e2092e29bfd13e56c78e22af25fac83c8ec 18685451fc4e546fc0e718580d32df3c0e5c8272
  Refs:  WiFi and netfilter.

  Current release - regressions:

   - ipv6: fix address dump when IPv6 is disabled on an interface

  Current release - new code bugs:

   - bpf: temporarily disable atomic operations in BPF arena

   - nexthop: fix uninitialized variable in nla_put_nh_group_stats()

  Previous releases - regressions:

   - bpf: protect against int overflow for stack access size

   - hsr: fix the promiscuous mode in offload mode

   - wifi: don't always use FW dump trig

   - tls: adjust recv return with async crypto and failed copy to
     userspace

   - tcp: properly terminate timers for kernel sockets

   - ice: fix memory corruption bug with suspend and rebuild

   - at803x: fix kernel panic with at8031_probe

   - qeth: handle deferred cc1

  Previous releases - always broken:

   - bpf: fix bug in BPF_LDX_MEMSX

   - netfilter: reject table flag and netdev basechain updates

   - inet_defrag: prevent sk release while still in use

   - wifi: pick the version of SESSION_PROTECTION_NOTIF

   - wwan: t7xx: split 64bit accesses to fix alignment issues

   - mlxbf_gige: call request_irq() after NAPI initialized

   - hns3: fix kernel crash when devlink reload during pf
     initialization"

* tag 'net-6.9-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (81 commits)
  inet: inet_defrag: prevent sk release while still in use
  Octeontx2-af: fix pause frame configuration in GMP mode
  net: lan743x: Add set RFE read fifo threshold for PCI1x1x chips
  net: bcmasp: Remove phy_{suspend/resume}
  net: bcmasp: Bring up unimac after PHY link up
  net: phy: qcom: at803x: fix kernel panic with at8031_probe
  netfilter: arptables: Select NETFILTER_FAMILY_ARP when building arp_tables.c
  netfilter: nf_tables: skip netdev hook unregistration if table is dormant
  netfilter: nf_tables: reject table flag and netdev basechain updates
  netfilter: nf_tables: reject destroy command to remove basechain hooks
  bpf: update BPF LSM designated reviewer list
  bpf: Protect against int overflow for stack access size
  bpf: Check bloom filter map value size
  bpf: fix warning for crash_kexec
  selftests: netdevsim: set test timeout to 10 minutes
  net: wan: framer: Add missing static inline qualifiers
  mlxbf_gige: call request_irq() after NAPI initialized
  tls: get psock ref after taking rxlock to avoid leak
  selftests: tls: add test with a partially invalid iov
  tls: adjust recv return with async crypto and failed copy to userspace
  ...


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes including BPF and various bug resolutions for the 6.9-rc2 release.', 'keywords': 'networking, BPF, fixes', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tc/netfilter like programs', 'LSM like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7e6f4b2af5b8cfe028386bc439c9bad1eddff9a6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7e6f4b2af5b8cfe028386bc439c9bad1eddff9a6
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1711616880
  Commit Message:
    Merge tag 'for-net' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Alexei Starovoitov says:

====================
pull-request: bpf 2024-03-27

The following pull-request contains BPF updates for your *net* tree.

We've added 4 non-merge commits during the last 1 day(s) which contain
a total of 5 files changed
  Parent Hashes: 56d2f48ed8f857f2765575a6a25b9655765edd41 4dd651076ef0e5f09940f763a1b4e8a209dab7ab
  Refs:  26 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge BPF updates for net tree with 4 non-merge commits affecting 5 files.', 'keywords': 'BPF, net, updates', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4dd651076ef0e5f09940f763a1b4e8a209dab7ab
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4dd651076ef0e5f09940f763a1b4e8a209dab7ab
  Author Name: Matt Bobrowski
  Author Email: mattbobrowski@google.com
  Commit Date: 1711563036
  Commit Message:
    bpf: update BPF LSM designated reviewer list

Adding myself in place of both Brendan and Florent as both have since
moved on from working on the BPF LSM and will no longer be devoting
their time to maintaining the BPF LSM.

Signed-off-by: Matt Bobrowski <mattbobrowski@google.com>
Acked-by: KP Singh <kpsingh@kernel.org>
Link: https://lore.kernel.org/r/ZgMhWF_egdYF8t4D@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: a4e02d6b91c5e57f820032ec6ad794694c86f327
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added Matt Bobrowski to BPF LSM designated reviewer list replacing Brendan and Florent.', 'keywords': 'BPF, LSM, reviewer', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: ecc6a2101840177e57c925c102d2d29f260d37c8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ecc6a2101840177e57c925c102d2d29f260d37c8
  Author Name: Andrei Matei
  Author Email: andreimatei1@gmail.com
  Commit Date: 1711558596
  Commit Message:
    bpf: Protect against int overflow for stack access size

This patch re-introduces protection against the size of access to stack
memory being negative; the access size can appear negative as a result
of overflowing its signed int representation. This should not actually
happen
  Parent Hashes: a8d89feba7e54e691ca7c4efc2a6264fa83f3687
  Refs:  as there are other protections along the way

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit reintroduces protection against int overflow for stack access size in the eBPF subsystem.', 'keywords': 'int overflow,stack access,protection', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a8d89feba7e54e691ca7c4efc2a6264fa83f3687
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a8d89feba7e54e691ca7c4efc2a6264fa83f3687
  Author Name: Andrei Matei
  Author Email: andreimatei1@gmail.com
  Commit Date: 1711558577
  Commit Message:
    bpf: Check bloom filter map value size

This patch adds a missing check to bloom filter creating
  Parent Hashes: 96b98a6552a90690d7bc18dd71b66312c9ded1fb
  Refs:  rejecting
values above KMALLOC_MAX_SIZE. This brings the bloom map in line with
many other map types.

The lack of this protection can cause kernel crashes for value sizes
that overflow int's. Such a crash was caught by syzkaller. The next
patch adds more guard-rails at a lower level.

Signed-off-by: Andrei Matei <andreimatei1@gmail.com>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240327024245.318299-2-andreimatei1@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "This commit adds a check to prevent kernel crashes by ensuring bloom filter map values don't exceed KMALLOC_MAX_SIZE.", 'keywords': 'bloom filter, kernel crash, KMALLOC_MAX_SIZE', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 96b98a6552a90690d7bc18dd71b66312c9ded1fb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 96b98a6552a90690d7bc18dd71b66312c9ded1fb
  Author Name: Hari Bathini
  Author Email: hbathini@linux.ibm.com
  Commit Date: 1711554744
  Commit Message:
    bpf: fix warning for crash_kexec

With [1]
  Parent Hashes: afbf75e8da8ce8a0698212953d350697bb4355a6
  Refs:  crash dump specific code is moved out of CONFIG_KEXEC_CORE
and placed under CONFIG_CRASH_DUMP

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix warning by moving crash dump specific code to CONFIG_CRASH_DUMP for proper configuration linkage.', 'keywords': 'fix, warning, crash', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 2a702c2e57908e7bb5c814afeac577a14815c2f2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2a702c2e57908e7bb5c814afeac577a14815c2f2
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1711551154
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-03-25

We've added 38 non-merge commits during the last 13 day(s) which contain
a total of 50 files changed
  Parent Hashes: ee36b1e93b11b980e0156bd07cbb9866b7d3e29e 14bb1e8c8d4ad5d9d2febb7d19c70a3cf536e1e5
  Refs:  867 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge pull request for bpf-next with 38 non-merge commits and 50 files changed.', 'keywords': 'merge,pull request,bpf-next', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: ea6873118493019474abbf57d5a800da365734df
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ea6873118493019474abbf57d5a800da365734df
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1711487358
  Commit Message:
    drivers/perf: riscv: Disable PERF_SAMPLE_BRANCH_* while not supported

RISC-V perf driver does not yet support branch sampling. Although the
specification is in the works [0]
  Parent Hashes: 4b0bf9a0127029054c2fa18ba5b3f3ddc45f54ed
  Refs:  it is best to disable such events
until support is available

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Disable unsupported branch sampling in RISC-V perf driver.', 'keywords': 'Disable, RISC-V, branch sampling', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 37ccdf7f11b12f987c5d9ff99e67104264016c8d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 37ccdf7f11b12f987c5d9ff99e67104264016c8d
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1711454118
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-03-25

The following pull-request contains BPF updates for your *net* tree.

We've added 17 non-merge commits during the last 12 day(s) which contain
a total of 19 files changed
  Parent Hashes: f1425529c33def8b46faae4400dd9e2bbaf16a05 443574b033876c85a35de4c65c14f7fe092222b2
  Refs:  184 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merges updates for BPF in linux net tree with 17 non-merge commits and 184 insertions.', 'keywords': 'BPF updates, net tree, merge', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 151c9c724d05d5b0dd8acd3e11cb69ef1f2dbada
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 151c9c724d05d5b0dd8acd3e11cb69ef1f2dbada
  Author Name: Eric Dumazet
  Author Email: edumazet@google.com
  Commit Date: 1711421517
  Commit Message:
    tcp: properly terminate timers for kernel sockets

We had various syzbot reports about tcp timers firing after
the corresponding netns has been dismantled.

Fortunately Josef Bacik could trigger the issue more often
  Parent Hashes: b11c81731c810efe592e510bb0110e0db6877419
  Refs: 
and could test a patch I wrote two years ago.

When TCP sockets are closed

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix termination of TCP timers in kernel sockets after netns dismantling.', 'keywords': 'TCP, timers, netns', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', "It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 443574b033876c85a35de4c65c14f7fe092222b2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 443574b033876c85a35de4c65c14f7fe092222b2
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1711391971
  Commit Message:
    riscv
  Parent Hashes: 122fdbd2a030a95128737fc77e47df15a8f170c3
  Refs:  bpf: Fix kfunc parameters incompatibility between bpf and riscv abi

We encountered a failing case when running selftest in no_alu32 mode:

The failure case is `kfunc_call/kfunc_call_test4` and its source code is
like bellow:
```
long bpf_kfunc_call_test4(signed char a

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix incompatibility of kfunc parameters between bpf and riscv ABI.', 'keywords': 'kfunc, incompatibility, riscv', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 14bb1e8c8d4ad5d9d2febb7d19c70a3cf536e1e5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 14bb1e8c8d4ad5d9d2febb7d19c70a3cf536e1e5
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1711383954
  Commit Message:
    selftests/bpf: Fix flaky test btf_map_in_map/lookup_update

Recently
  Parent Hashes: 770546ae9f4c1ae1ebcaf0874f0dd9631d77ec97
  Refs:  I frequently hit the following test failure:

  [root@arch-fb-vm1 bpf]# ./test_progs -n 33/1
  test_lookup_update:PASS:skel_open 0 nsec
  [...]
  test_lookup_update:PASS:sync_rcu 0 nsec
  test_lookup_update:FAIL:map1_leak inner_map1 leaked!
  #33/1    btf_map_in_map/lookup_update:FAIL
  #33      btf_map_in_map:FAIL

In the test

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a flaky test in the bpf selftests related to btf_map_in_map and lookup_update.', 'keywords': 'flaky,test,fix', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 770546ae9f4c1ae1ebcaf0874f0dd9631d77ec97
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 770546ae9f4c1ae1ebcaf0874f0dd9631d77ec97
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1711383051
  Commit Message:
    bpf: implement insn_is_cast_user() helper for JITs

Implement a helper function to check if an instruction is
addr_space_cast from as(0) to as(1). Use this helper in the x86 JIT.

Other JITs can use this helper when they add support for this instruction.

Signed-off-by: Puranjay Mohan <puranjay12@gmail.com>
Link: https://lore.kernel.org/r/20240324183226.29674-1-puranjay12@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: a8497506cd2c0fc90a64f6f5d2744a0ddb2c81eb
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a helper function insn_is_cast_user() for checking address space casts, integrated into x86 JIT.', 'keywords': 'helper,function,JIT', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a8497506cd2c0fc90a64f6f5d2744a0ddb2c81eb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a8497506cd2c0fc90a64f6f5d2744a0ddb2c81eb
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1711382748
  Commit Message:
    bpf: Avoid get_kernel_nofault() to fetch kprobe entry IP

get_kernel_nofault() (or
  Parent Hashes: c29083f3f5069d811b3f3c7592a0dc45ec42960c
  Refs:  rather

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Avoid using get_kernel_nofault() to fetch kprobe entry IP for eBPF programs.', 'keywords': 'get_kernel_nofault,kprobe,eBPF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: c29083f3f5069d811b3f3c7592a0dc45ec42960c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c29083f3f5069d811b3f3c7592a0dc45ec42960c
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1711381793
  Commit Message:
    selftests/bpf: Use start_server in bpf_tcp_ca

To simplify the code
  Parent Hashes: 476a5e929119725fbfcf1307cc8517d9dd2a014d
  Refs:  use BPF selftests helper start_server() in
bpf_tcp_ca.c instead of open-coding it. This helper is defined in
network_helpers.c

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor bpf_tcp_ca.c to use start_server from network_helpers.c for simplicity.', 'keywords': 'selftests,bpf_tcp_ca,refactor', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 476a5e929119725fbfcf1307cc8517d9dd2a014d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 476a5e929119725fbfcf1307cc8517d9dd2a014d
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1711381016
  Commit Message:
    bpf: Sync uapi bpf.h to tools directory

There is a difference between kernel uapi bpf.h and tools
uapi bpf.h. There is no functionality difference
  Parent Hashes: 61df575632d6b39213f47810c441bddbd87c3606
  Refs:  but let
us sync properly to make it easy for later bpf.h update.

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240325033842.1693553-1-yonghong.song@linux.dev


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit synchronizes the uapi bpf.h between the kernel and tools directory.', 'keywords': 'sync,uapi,tools', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 122fdbd2a030a95128737fc77e47df15a8f170c3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 122fdbd2a030a95128737fc77e47df15a8f170c3
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1711165449
  Commit Message:
    bpf: verifier: reject addr_space_cast insn without arena

The verifier allows using the addr_space_cast instruction in a program
that doesn't have an associated arena. This was caught in the form an
invalid memory access in do_misc_fixups() when while converting
addr_space_cast to a normal 32-bit mov
  Parent Hashes: fa3550dca8f02ec312727653a94115ef3ab68445
  Refs:  env->prog->aux->arena was
dereferenced to check for BPF_F_NO_USER_CONV flag.

Reject programs that include the addr_space_cast instruction but don't
have an associated arena.

root@rv-tester:~# ./reproducer
 Unable to handle kernel access to user memory without uaccess routines at virtual address 0000000000000030
 Oops [#1]
 [<ffffffff8017eeaa>] do_misc_fixups+0x43c/0x1168
 [<ffffffff801936d6>] bpf_check+0xda8/0x22b6
 [<ffffffff80174b32>] bpf_prog_load+0x486/0x8dc
 [<ffffffff80176566>] __sys_bpf+0xbd8/0x214e
 [<ffffffff80177d14>] __riscv_sys_bpf+0x22/0x2a
 [<ffffffff80d2493a>] do_trap_ecall_u+0x102/0x17c
 [<ffffffff80d3048c>] ret_from_exception+0x0/0x64

Fixes: 6082b6c328b5 ("bpf: Recognize addr_space_cast instruction in the verifier.")
Reported-by: xingwei lee <xrivendell7@gmail.com>
Reported-by: yue sun <samsun1006219@gmail.com>
Closes: https://lore.kernel.org/bpf/CABOYnLz09O1+2gGVJuCxd_24a-7UueXzV-Ff+Fr+h5EKFDiYCQ@mail.gmail.com/
Signed-off-by: Puranjay Mohan <puranjay12@gmail.com>
Link: https://lore.kernel.org/r/20240322153518.11555-1-puranjay12@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes a memory access issue by rejecting programs using addr_space_cast without an associated arena.', 'keywords': 'verifier, addr_space_cast, arena', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fa3550dca8f02ec312727653a94115ef3ab68445
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fa3550dca8f02ec312727653a94115ef3ab68445
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1711165059
  Commit Message:
    selftests/bpf: verifier_arena: fix mmap address for arm64

The arena_list selftest uses (1ull << 32) in the mmap address
computation for arm64. Use the same in the verifier_arena selftest.

This makes the selftest pass for arm64 on the CI[1].

[1] https://github.com/kernel-patches/bpf/pull/6622

Signed-off-by: Puranjay Mohan <puranjay12@gmail.com>
Link: https://lore.kernel.org/r/20240322133552.70681-1-puranjay12@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: f7f5d1808b1b66935a24dd796dd1a0612ca9c147
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes mmap address computation for arm64 in the bpf selftest verifier_arena.', 'keywords': 'mmap,arm64,selftest', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f7f5d1808b1b66935a24dd796dd1a0612ca9c147
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f7f5d1808b1b66935a24dd796dd1a0612ca9c147
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1711164996
  Commit Message:
    bpf: verifier: fix addr_space_cast from as(1) to as(0)

The verifier currently converts addr_space_cast from as(1) to as(0) that
is: BPF_ALU64 | BPF_MOV | BPF_X with off=1 and imm=1
to
BPF_ALU | BPF_MOV | BPF_X with imm=1 (32-bit mov)

Because of this imm=1
  Parent Hashes: ddb2ffdc474a3000887dc776b971d04bde29decc
  Refs:  the JITs that have bpf_jit_needs_zext() == true

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes the address space cast issue in eBPF verifier from as(1) to as(0).', 'keywords': 'verifier, addr_space_cast, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 61df575632d6b39213f47810c441bddbd87c3606
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 61df575632d6b39213f47810c441bddbd87c3606
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1711143429
  Commit Message:
    libbpf: Add new sec_def "sk_skb/verdict"

The new sec_def specifies sk_skb program type with
BPF_SK_SKB_VERDICT attachment type. This way
  Parent Hashes: af8d27bf15c8d68c60d830552055fcdba5b5f045
  Refs:  libbpf
will set expected_attach_type properly for the program.

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240319175412.2941149-1-yonghong.song@linux.dev


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a new sec_def specifying sk_skb program type with BPF_SK_SKB_VERDICT to set expected_attach_type in libbpf.', 'keywords': 'sec_def, sk_skb, libbpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: af8d27bf15c8d68c60d830552055fcdba5b5f045
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: af8d27bf15c8d68c60d830552055fcdba5b5f045
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1711126877
  Commit Message:
    selftests/bpf: Mark uprobe trigger functions with nocf_check attribute

Some distros seem to enable the -fcf-protection=branch by default
  Parent Hashes: 1684d6eb99e480ff653af60e20ff5e7e55e69ccd
  Refs: 
which breaks our setup on first instruction of uprobe trigger
functions and place there endbr64 instruction.

Marking them with nocf_check attribute to skip that.

Ignoring unknown attribute warning in gcc for bench objects

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Mark uprobe trigger functions with nocf_check attribute to avoid branch protection conflicts.', 'keywords': 'uprobe,nocf_check,protection', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 1684d6eb99e480ff653af60e20ff5e7e55e69ccd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1684d6eb99e480ff653af60e20ff5e7e55e69ccd
  Author Name: Alan Maguire
  Author Email: alan.maguire@oracle.com
  Commit Date: 1711126817
  Commit Message:
    selftests/bpf: Use syscall(SYS_gettid) instead of gettid() wrapper in bench

With glibc 2.28
  Parent Hashes: 4c2a26fc80bcb851dc630590f2eec157991eccbf
  Refs:  selftests compilation fails for benchs/bench_trigger.c:

benchs/bench_trigger.c: In function ‘inc_counter’:
benchs/bench_trigger.c:25:23: error: implicit declaration of function ‘gettid’; did you mean ‘getgid’? [-Werror=implicit-function-declaration]
   25 |                 tid = gettid();
      |                       ^~~~~~
      |                       getgid
cc1: all warnings being treated as errors

It appears support for the gettid() wrapper is variable across glibc
versions

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replace gettid() with syscall(SYS_gettid) for compatibility in bench_trigger selftest.', 'keywords': 'gettid,system call,selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: b3ad832d8da583ff4237b04a1ba23cdbf8918907
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b3ad832d8da583ff4237b04a1ba23cdbf8918907
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1711064675
  Commit Message:
    perf dso: Reorder members to save space in 'struct dso'

Save 40 bytes and move from 8 to 7 cache lines. Make member dwfl
dependent on being a powerpc build. Squeeze bits of int/enum types
when appropriate. Remove holes/padding by reordering variables.

Before:

  struct dso {
          struct mutex               lock;                 /*     0    40 */
          struct list_head           node;                 /*    40    16 */
          struct rb_node             rb_node __attribute__((__aligned__(8))); /*    56    24 */
          /* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
          struct rb_root *           root;                 /*    80     8 */
          struct rb_root_cached      symbols;              /*    88    16 */
          struct symbol * *          symbol_names;         /*   104     8 */
          size_t                     symbol_names_len;     /*   112     8 */
          struct rb_root_cached      inlined_nodes;        /*   120    16 */
          /* --- cacheline 2 boundary (128 bytes) was 8 bytes ago --- */
          struct rb_root_cached      srclines;             /*   136    16 */
          struct {
                  u64                addr;                 /*   152     8 */
                  struct symbol *    symbol;               /*   160     8 */
          } last_find_result;                              /*   152    16 */
          void *                     a2l;                  /*   168     8 */
          char *                     symsrc_filename;      /*   176     8 */
          unsigned int               a2l_fails;            /*   184     4 */
          enum dso_space_type        kernel;               /*   188     4 */
          /* --- cacheline 3 boundary (192 bytes) --- */
          _Bool                      is_kmod;              /*   192     1 */

          /* XXX 3 bytes hole
  Parent Hashes: 2a5049b75d22c971e73501784f10548c1d69c407
  Refs:  try to pack */

          enum dso_swap_type         needs_swap;           /*   196     4 */
          enum dso_binary_type       symtab_type;          /*   200     4 */
          enum dso_binary_type       binary_type;          /*   204     4 */
          enum dso_load_errno        load_errno;           /*   208     4 */
          u8                         adjust_symbols:1;     /*   212: 0  1 */
          u8                         has_build_id:1;       /*   212: 1  1 */
          u8                         header_build_id:1;    /*   212: 2  1 */
          u8                         has_srcline:1;        /*   212: 3  1 */
          u8                         hit:1;                /*   212: 4  1 */
          u8                         annotate_warned:1;    /*   212: 5  1 */
          u8                         auxtrace_warned:1;    /*   212: 6  1 */
          u8                         short_name_allocated:1; /*   212: 7  1 */
          u8                         long_name_allocated:1; /*   213: 0  1 */
          u8                         is_64_bit:1;          /*   213: 1  1 */

          /* XXX 6 bits hole

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Optimize 'struct dso' in perf tool by reordering members to reduce cache lines and save space.", 'keywords': 'optimize, reorder, struct', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: cba9ffdb9913dfe6be29f049ce920ce451ce7cc4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cba9ffdb9913dfe6be29f049ce920ce451ce7cc4
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1711057839
  Commit Message:
    Merge tag 'net-6.9-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 "Including fixes from CAN
  Parent Hashes: 1d35aae78ffe739bf46c2bf9dea7b51a4eebfbe0 f99c5f563c174a49ea1cbf4754539b05cfde40c4
  Refs:  netfilter

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge network fixes from net-6.9-rc1 tag, includes CAN related corrections.', 'keywords': 'merge, networking, fixes', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 4c2a26fc80bcb851dc630590f2eec157991eccbf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4c2a26fc80bcb851dc630590f2eec157991eccbf
  Author Name: Harishankar Vishwanathan
  Author Email: harishankar.vishwanathan@gmail.com
  Commit Date: 1711047386
  Commit Message:
    bpf-next: Avoid goto in regs_refine_cond_op()

In case of GE/GT/SGE/JST instructions
  Parent Hashes: cc9b22dfa735800980e7362f02aff6f1c2280996
  Refs:  regs_refine_cond_op()
reuses the logic that does analysis of LE/LT/SLE/SLT instructions.
This commit avoids the use of a goto to perform the reuse.

Signed-off-by: Harishankar Vishwanathan <harishankar.vishwanathan@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240321002955.808604-1-harishankar.vishwanathan@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors the logic in regs_refine_cond_op to eliminate the use of a goto statement.', 'keywords': 'regs_refine_cond_op, refactor, goto', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ddb2ffdc474a3000887dc776b971d04bde29decc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ddb2ffdc474a3000887dc776b971d04bde29decc
  Author Name: Arnaldo Carvalho de Melo
  Author Email: acme@kernel.org
  Commit Date: 1711045637
  Commit Message:
    libbpf: Define MFD_CLOEXEC if not available

Since its going directly to the syscall to avoid not having
memfd_create() available in some systems
  Parent Hashes: a51cd6bf8e10793103c5870ff9e4db295a843604
  Refs:  do the same for its
MFD_CLOEXEC flags

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Defines MFD_CLOEXEC flag in libbpf for systems missing memfd_create support.', 'keywords': 'libbpf, MFD_CLOEXEC, memfd_create', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 88ce0106a1f603bf360cb397e8fe293f8298fabb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 88ce0106a1f603bf360cb397e8fe293f8298fabb
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1711040079
  Commit Message:
    perf record: Delete session after stopping sideband thread

The session has a header in it which contains a perf env with
bpf_progs. The bpf_progs are accessed by the sideband thread and so
the sideband thread must be stopped before the session is deleted
  Parent Hashes: 67ee8e71daabb8632931b7559e5c8a4b69a427f8
  Refs:  to
avoid a use after free.  This error was detected by AddressSanitizer
in the following:

  ==2054673==ERROR: AddressSanitizer: heap-use-after-free on address 0x61d000161e00 at pc 0x55769289de54 bp 0x7f9df36d4ab0 sp 0x7f9df36d4aa8
  READ of size 8 at 0x61d000161e00 thread T1
      #0 0x55769289de53 in __perf_env__insert_bpf_prog_info util/env.c:42
      #1 0x55769289dbb1 in perf_env__insert_bpf_prog_info util/env.c:29
      #2 0x557692bbae29 in perf_env__add_bpf_info util/bpf-event.c:483
      #3 0x557692bbb01a in bpf_event__sb_cb util/bpf-event.c:512
      #4 0x5576928b75f4 in perf_evlist__poll_thread util/sideband_evlist.c:68
      #5 0x7f9df96a63eb in start_thread nptl/pthread_create.c:444
      #6 0x7f9df9726a4b in clone3 ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81

  0x61d000161e00 is located 384 bytes inside of 2136-byte region [0x61d000161c80

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a use-after-free error by ensuring the sideband thread stops before deleting the session in perf record.', 'keywords': 'use-after-free, sideband thread, perf record', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: a51cd6bf8e10793103c5870ff9e4db295a843604
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a51cd6bf8e10793103c5870ff9e4db295a843604
  Author Name: Artem Savkov
  Author Email: asavkov@redhat.com
  Commit Date: 1711018745
  Commit Message:
    arm64: bpf: fix 32bit unconditional bswap

In case when is64 == 1 in emit(A64_REV32(is64
  Parent Hashes: 114b5b3b4bde7358624437be2f12cde1b265224e
  Refs:  dst

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes an issue with 32-bit unconditional byte swap in ARM64 BPF code.', 'keywords': 'ARM64, BPF, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cc9b22dfa735800980e7362f02aff6f1c2280996
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cc9b22dfa735800980e7362f02aff6f1c2280996
  Author Name: Quentin Monnet
  Author Email: qmo@kernel.org
  Commit Date: 1711002829
  Commit Message:
    bpftool: Clean up HOST_CFLAGS
  Parent Hashes: 520fad2e3206b2476f201a283ecf096cfb671902
  Refs:  HOST_LDFLAGS for bootstrap bpftool

Bpftool's Makefile uses $(HOST_CFLAGS) to build the bootstrap version of
bpftool

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Clean up HOST_CFLAGS usage in bpftool's Makefile for bootstrap build.", 'keywords': 'bpftool, Makefile, HOST_CFLAGS', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 3201de46a2013293abe28caa46aa0387864d7cf7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3201de46a2013293abe28caa46aa0387864d7cf7
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1710993945
  Commit Message:
    Merge branch 'report-rcu-qs-for-busy-network-kthreads'

Yan Zhai says:

====================
Report RCU QS for busy network kthreads

This changeset fixes a common problem for busy networking kthreads.
These threads
  Parent Hashes: f7bf0ec1e73d43a347489e958b42841b111d63d6 00bf63122459e87193ee7f1bc6161c83a525569f
  Refs:  e.g. NAPI threads

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes RCU quiescent state reporting for busy network kernel threads.', 'keywords': 'RCU,kthreads,networking', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 00bf63122459e87193ee7f1bc6161c83a525569f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 00bf63122459e87193ee7f1bc6161c83a525569f
  Author Name: Yan Zhai
  Author Email: yan@cloudflare.com
  Commit Date: 1710993943
  Commit Message:
    bpf: report RCU QS in cpumap kthread

When there are heavy load
  Parent Hashes: d6dbbb11247c71203785a2c9da474c36f4b19eae
  Refs:  cpumap kernel threads can be busy polling
packets from redirect queues and block out RCU tasks from reaching
quiescent states. It is insufficient to just call cond_resched() in such
context. Periodically raise a consolidated RCU QS before cond_resched
fixes the problem.

Fixes: 6710e1126934 ("bpf: introduce new bpf cpu map type BPF_MAP_TYPE_CPUMAP")
Reviewed-by: Jesper Dangaard Brouer <hawk@kernel.org>
Signed-off-by: Yan Zhai <yan@cloudflare.com>
Acked-by: Paul E. McKenney <paulmck@kernel.org>
Acked-by: Jesper Dangaard Brouer <hawk@kernel.org>
Link: https://lore.kernel.org/r/c17b9f1517e19d813da3ede5ed33ee18496bb5d8.1710877680.git.yan@cloudflare.com
Signed-off-by: Jakub Kicinski <kuba@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds periodic RCU quiescent state reporting in cpumap kthreads to prevent blocking RCU tasks.', 'keywords': 'RCU, cpumap, kthread', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d6dbbb11247c71203785a2c9da474c36f4b19eae
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d6dbbb11247c71203785a2c9da474c36f4b19eae
  Author Name: Yan Zhai
  Author Email: yan@cloudflare.com
  Commit Date: 1710993942
  Commit Message:
    net: report RCU QS on threaded NAPI repolling

NAPI threads can keep polling packets under load. Currently it is only
calling cond_resched() before repolling
  Parent Hashes: 1a77557d48cff187a169c2aec01c0dd78a5e7e50
  Refs:  but it is not sufficient to
clear out the holdout of RCU tasks

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve RCU task handling during threaded NAPI repolling to optimize network packet processing.', 'keywords': 'RCU, NAPI, repolling', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 520fad2e3206b2476f201a283ecf096cfb671902
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 520fad2e3206b2476f201a283ecf096cfb671902
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710916895
  Commit Message:
    selftests/bpf: scale benchmark counting by using per-CPU counters

When benchmarking with multiple threads (-pN
  Parent Hashes: e9a826dd145bf2c19888aee1b974214cefc74a2e
  Refs:  where N>1)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance benchmark accuracy by implementing per-CPU counters in selftests for multi-threaded environments.', 'keywords': 'benchmark, per-CPU, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e9a826dd145bf2c19888aee1b974214cefc74a2e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e9a826dd145bf2c19888aee1b974214cefc74a2e
  Author Name: Quentin Monnet
  Author Email: qmo@kernel.org
  Commit Date: 1710915475
  Commit Message:
    bpftool: Remove unnecessary source files from bootstrap version

Commit d510296d331a ("bpftool: Use syscall/loader program in "prog load"
and "gen skeleton" command.") added new files to the list of objects to
compile in order to build the bootstrap version of bpftool. As far as I
can tell
  Parent Hashes: be24a895149b6df4c474848e3928c237ad10fdc4
  Refs:  these objects are unnecessary and were added by mistake; maybe
a draft version intended to add support for loading loader programs from
the bootstrap version. Anyway

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Remove unnecessary source files from bpftool's bootstrap version due to mistaken inclusion.", 'keywords': 'bpftool, bootstrap, unnecessary', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: be24a895149b6df4c474848e3928c237ad10fdc4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: be24a895149b6df4c474848e3928c237ad10fdc4
  Author Name: Quentin Monnet
  Author Email: qmo@kernel.org
  Commit Date: 1710915142
  Commit Message:
    bpftool: Enable libbpf logs when loading pid_iter in debug mode

When trying to load the pid_iter BPF program used to iterate over the
PIDs of the processes holding file descriptors to BPF links
  Parent Hashes: 2e244a72cd489e9b8d4c779c0674c80cf92b6aab
  Refs:  we would
unconditionally silence libbpf in order to keep the output clean if the
kernel does not support iterators and loading fails.

Although this is the desirable behaviour in most cases

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable libbpf logs for pid_iter BPF program in debug mode in bpftool.', 'keywords': 'libbpf, pid_iter, debug', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 2e244a72cd489e9b8d4c779c0674c80cf92b6aab
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2e244a72cd489e9b8d4c779c0674c80cf92b6aab
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710914734
  Commit Message:
    Merge branch 'bpf-raw-tracepoint-support-for-bpf-cookie'

Andrii Nakryiko says:

====================
BPF raw tracepoint support for BPF cookie

Add ability to specify and retrieve BPF cookie for raw tracepoint programs.
Both BTF-aware (SEC("tp_btf")) and non-BTF-aware (SEC("raw_tp")) are
supported
  Parent Hashes: f803bcf9208a2540acb4c32bdc3616673169f490 51146ff0fae309a558bc8ab6cbf6cfda17356993
  Refs:  as they are exactly the same at runtime.

This issue recently came up in production use cases

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for specifying and retrieving BPF cookies in raw tracepoint programs, including BTF-aware and non-BTF-aware implementations.', 'keywords': 'BPF cookie,raw tracepoint,support', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 51146ff0fae309a558bc8ab6cbf6cfda17356993
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 51146ff0fae309a558bc8ab6cbf6cfda17356993
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710914734
  Commit Message:
    selftests/bpf: add raw_tp/tp_btf BPF cookie subtests

Add test validating BPF cookie can be passed during raw_tp/tp_btf
attachment and can be retried at runtime with bpf_get_attach_cookie()
helper.

Acked-by: Stanislav Fomichev <sdf@google.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Message-ID: <20240319233852.1977493-6-andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 36ffb2023e3703a64266ca5fed30f710b1263c70
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add subtests for validating BPF cookie during raw_tp/tp_btf attachment using bpf_get_attach_cookie() helper.', 'keywords': 'BPF cookie,raw_tp,tp_btf', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 36ffb2023e3703a64266ca5fed30f710b1263c70
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 36ffb2023e3703a64266ca5fed30f710b1263c70
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710914734
  Commit Message:
    libbpf: add support for BPF cookie for raw_tp/tp_btf programs

Wire up BPF cookie passing or raw_tp and tp_btf programs
  Parent Hashes: 68ca5d4eebb8c4de246ee5f634eee26bc689562d
  Refs:  both in
low-level and high-level APIs.

Acked-by: Stanislav Fomichev <sdf@google.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Message-ID: <20240319233852.1977493-5-andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added support for BPF cookie in libbpf for raw_tp and tp_btf programs.', 'keywords': 'BPF cookie, raw_tp, tp_btf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 68ca5d4eebb8c4de246ee5f634eee26bc689562d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 68ca5d4eebb8c4de246ee5f634eee26bc689562d
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710914734
  Commit Message:
    bpf: support BPF cookie in raw tracepoint (raw_tp
  Parent Hashes: d4dfc5700e867b22ab94f960f9a9972696a637d5
  Refs:  tp_btf) programs

Wire up BPF cookie for raw tracepoint programs (both BTF and non-BTF
aware variants). This brings them up to part w.r.t. BPF cookie usage
with classic tracepoint and fentry/fexit programs.

Acked-by: Stanislav Fomichev <sdf@google.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Message-ID: <20240319233852.1977493-4-andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Wire up BPF cookie support for raw tracepoint programs in both BTF and non-BTF variants.', 'keywords': 'BPF cookie, raw tracepoint, BTF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: d4dfc5700e867b22ab94f960f9a9972696a637d5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d4dfc5700e867b22ab94f960f9a9972696a637d5
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710914733
  Commit Message:
    bpf: pass whole link instead of prog when triggering raw tracepoint

Instead of passing prog as an argument to bpf_trace_runX() helpers
  Parent Hashes: 6b9c2950c912780ce113079c9c52041b1e2a611a
  Refs:  that
are called from tracepoint triggering calls

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit changes the argument to bpf_trace_runX() helpers from prog to the whole link for triggering raw tracepoints.', 'keywords': 'bpf, tracepoints, link', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 6b9c2950c912780ce113079c9c52041b1e2a611a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6b9c2950c912780ce113079c9c52041b1e2a611a
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710914733
  Commit Message:
    bpf: flatten bpf_probe_register call chain

bpf_probe_register() and __bpf_probe_register() have identical
signatures and bpf_probe_register() just redirect to
__bpf_probe_register(). So get rid of this extra function call step to
simplify following the source code.

It has no difference at runtime due to inlining
  Parent Hashes: f803bcf9208a2540acb4c32bdc3616673169f490
  Refs:  of course.

Acked-by: Stanislav Fomichev <sdf@google.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Message-ID: <20240319233852.1977493-2-andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit simplifies the source code by removing an unnecessary function call step in bpf_probe_register.', 'keywords': 'simplify,function,call', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 114b5b3b4bde7358624437be2f12cde1b265224e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 114b5b3b4bde7358624437be2f12cde1b265224e
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1710914119
  Commit Message:
    bpf
  Parent Hashes: 5ab8cb89dbb6f3e111c8b0a9a86496da23c94439
  Refs:  arm64: fix bug in BPF_LDX_MEMSX

A64_LDRSW() takes three registers: Xt

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix a bug related to the BPF_LDX_MEMSX instruction on arm64.', 'keywords': 'bug, BPF_LDX_MEMSX, arm64', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5ab8cb89dbb6f3e111c8b0a9a86496da23c94439
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5ab8cb89dbb6f3e111c8b0a9a86496da23c94439
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710914044
  Commit Message:
    libbpf: fix u64-to-pointer cast on 32-bit arches

It's been reported that (void *)map->map_extra is causing compilation
warnings on 32-bit architectures. It's easy enough to fix this by
casting to long first.

Fixes: 79ff13e99169 ("libbpf: Add support for bpf_arena.")
Reported-by: Ryan Eatmon <reatmon@ti.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Message-ID: <20240319215143.1279312-1-andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 7ded842b356d151ece8ac4985940438e6d3998bb
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix compilation warning on 32-bit architectures by adjusting u64-to-pointer casting in libbpf.', 'keywords': 'libbpf,cast,32-bit', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 7ded842b356d151ece8ac4985940438e6d3998bb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7ded842b356d151ece8ac4985940438e6d3998bb
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1710913963
  Commit Message:
    s390/bpf: Fix bpf_plt pointer arithmetic

Kui-Feng Lee reported a crash on s390x triggered by the
dummy_st_ops/dummy_init_ptr_arg test [1]:

  [<0000000000000002>] 0x2
  [<00000000009d5cde>] bpf_struct_ops_test_run+0x156/0x250
  [<000000000033145a>] __sys_bpf+0xa1a/0xd00
  [<00000000003319dc>] __s390x_sys_bpf+0x44/0x50
  [<0000000000c4382c>] __do_syscall+0x244/0x300
  [<0000000000c59a40>] system_call+0x70/0x98

This is caused by GCC moving memcpy() after assignments in
bpf_jit_plt()
  Parent Hashes: f6e922365faf4cd576bd1cf3e64b58c8a32e1856
  Refs:  resulting in NULL pointers being written instead of
the return and the target addresses.

Looking at the GCC internals

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes pointer arithmetic bug in s390 BPF leading to crashes during tests.', 'keywords': 'pointer, bug, arithmetic', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 956c0d6191075f0592367512bf07aede458f0151
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 956c0d6191075f0592367512bf07aede458f0151
  Author Name: Kuniyuki Iwashima
  Author Email: kuniyu@amazon.com
  Commit Date: 1710902159
  Commit Message:
    tcp: Clear req->syncookie in reqsk_alloc().

syzkaller reported a read of uninit req->syncookie. [0]

Originally
  Parent Hashes: d27e2da94a42655861ca4baea30c8cd65546f25d
  Refs:  req->syncookie was used only in tcp_conn_request()
to indicate if we need to encode SYN cookie in SYN+ACK

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix uninitialized req->syncookie issue in reqsk_alloc() in TCP connection handling.', 'keywords': 'tcp, syncookie, syzkaller', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: f803bcf9208a2540acb4c32bdc3616673169f490
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f803bcf9208a2540acb4c32bdc3616673169f490
  Author Name: Alessandro Carminati (Red Hat)
  Author Email: alessandro.carminati@gmail.com
  Commit Date: 1710890169
  Commit Message:
    selftests/bpf: Prevent client connect before server bind in test_tc_tunnel.sh

In some systems
  Parent Hashes: 437ffcb0bf97361e5c4062043309832f4724d1a8
  Refs:  the netcat server can incur in delay to start listening.
When this happens

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix race condition by ensuring server is ready before the client connects in test_tc_tunnel.sh.', 'keywords': 'selftests,bpf,connect', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 437ffcb0bf97361e5c4062043309832f4724d1a8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 437ffcb0bf97361e5c4062043309832f4724d1a8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710883621
  Commit Message:
    Merge branch 'current_pid_tgid-for-all-prog-types'

Yonghong Song says:

====================
current_pid_tgid() for all prog types

Currently bpf_get_current_pid_tgid() is allowed in tracing
  Parent Hashes: 1a4a0cb7985f921548f1a7ac17686afbefe67f87 4c195ee4865d57786b3a63018d489b8a07877354
  Refs:  cgroup
and sk_msg progs while bpf_get_ns_current_pid_tgid() is only allowed
in tracing progs.

We have an internal use case where for an application running
in a container (with pid namespace)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extend support for bpf_get_current_pid_tgid() to all eBPF program types, improving container namespace compatibility.', 'keywords': 'bpf_get_current_pid_tgid,prog types,container', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4c195ee4865d57786b3a63018d489b8a07877354
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4c195ee4865d57786b3a63018d489b8a07877354
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1710883620
  Commit Message:
    selftests/bpf: Add a sk_msg prog bpf_get_ns_current_pid_tgid() test

Add a sk_msg bpf program test where the program is running in a pid
namespace. The test is successful:
  #165/4   ns_current_pid_tgid/new_ns_sk_msg:OK

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240315184915.2976718-1-yonghong.song@linux.dev

  Parent Hashes: 87ade6cd859ea9dbde6e80b3fcf717ed9a73b4a9
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest for sk_msg program using bpf_get_ns_current_pid_tgid().', 'keywords': 'selftest, sk_msg, bpf_get_ns_current_pid_tgid', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 87ade6cd859ea9dbde6e80b3fcf717ed9a73b4a9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 87ade6cd859ea9dbde6e80b3fcf717ed9a73b4a9
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1710883619
  Commit Message:
    selftests/bpf: Add a cgroup prog bpf_get_ns_current_pid_tgid() test

Add a cgroup bpf program test where the bpf program is running
in a pid namespace. The test is successfully:
  #165/3   ns_current_pid_tgid/new_ns_cgrp:OK

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240315184910.2976522-1-yonghong.song@linux.dev

  Parent Hashes: 4d4bd29e363c467752536f874a2cba10a5923c59
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test for cgroup BPF programs using bpf_get_ns_current_pid_tgid in a PID namespace.', 'keywords': 'cgroup, test, pid namespace', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 4d4bd29e363c467752536f874a2cba10a5923c59
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4d4bd29e363c467752536f874a2cba10a5923c59
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1710883618
  Commit Message:
    selftests/bpf: Refactor out some functions in ns_current_pid_tgid test

Refactor some functions in both user space code and bpf program
as these functions are used by later cgroup/sk_msg tests.
Another change is to mark tp program optional loading as later
patches will use optional loading as well since they have quite
different attachment and testing logic.

There is no functionality change.

Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240315184904.2976123-1-yonghong.song@linux.dev

  Parent Hashes: 84239a24d10174fcfc7d6760cb120435a6ff69af
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor functions in the ns_current_pid_tgid test for future use in cgroup/sk_msg selftests without changing functionality.', 'keywords': 'refactor, selftests, optional loading', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['cgroup like programs', 'tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 84239a24d10174fcfc7d6760cb120435a6ff69af
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 84239a24d10174fcfc7d6760cb120435a6ff69af
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1710883477
  Commit Message:
    selftests/bpf: Replace CHECK with ASSERT_* in ns_current_pid_tgid test

Replace CHECK in selftest ns_current_pid_tgid with recommended ASSERT_* style.
I also shortened subtest name as the prefix of subtest name is covered
by the test name already.

This patch does fix a testing issue. Currently even if bss->user_{pid
  Parent Hashes: eb166e522c77699fc19bfa705652327a1e51a117
  Refs: tgid}
is not correct

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replaced CHECK with ASSERT_* in the ns_current_pid_tgid selftest for better clarity and error handling.', 'keywords': 'CHECK, ASSERT, selftest', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: eb166e522c77699fc19bfa705652327a1e51a117
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: eb166e522c77699fc19bfa705652327a1e51a117
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1710883447
  Commit Message:
    bpf: Allow helper bpf_get_[ns_]current_pid_tgid() for all prog types

Currently bpf_get_current_pid_tgid() is allowed in tracing
  Parent Hashes: 1a4a0cb7985f921548f1a7ac17686afbefe67f87
  Refs:  cgroup
and sk_msg progs while bpf_get_ns_current_pid_tgid() is only allowed
in tracing progs.

We have an internal use case where for an application running
in a container (with pid namespace)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit allows bpf_get_[ns_]current_pid_tgid() helper function for all eBPF program types.', 'keywords': 'helper, prog types, pid tgid', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f6e922365faf4cd576bd1cf3e64b58c8a32e1856
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f6e922365faf4cd576bd1cf3e64b58c8a32e1856
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1710852449
  Commit Message:
    xsk: Don't assume metadata is always requested in TX completion

`compl->tx_timestam != NULL` means that the user has explicitly
requested the metadata via XDP_TX_METADATA+XDP_TX_METADATA_TIMESTAMP.

Fixes: 48eb03dd2630 ("xsk: Add TX timestamp and TX checksum offload support")
Reported-by: Daniele Salvatore Albano <d.albano@gmail.com>
Signed-off-by: Stanislav Fomichev <sdf@google.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Daniele Salvatore Albano <d.albano@gmail.com>
Link: https://lore.kernel.org/bpf/20240318165427.1403313-1-sdf@google.com

  Parent Hashes: 0740b6427e90ef03177888c50dc1c78ca6e0f7f0
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes assumption about metadata request in TX completion for xsk.', 'keywords': 'xsk,metadata,TX completion', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['xdp like programs', 'socket like programs']}
--------------------
--------------------
Processing Commit ID: 1a4a0cb7985f921548f1a7ac17686afbefe67f87
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1a4a0cb7985f921548f1a7ac17686afbefe67f87
  Author Name: Jesper Dangaard Brouer
  Author Email: hawk@kernel.org
  Commit Date: 1710852363
  Commit Message:
    bpf/lpm_trie: Inline longest_prefix_match for fastpath

The BPF map type LPM (Longest Prefix Match) is used heavily
in production by multiple products that have BPF components.
Perf data shows trie_lookup_elem() and longest_prefix_match()
being part of kernels perf top.

For every level in the LPM tree trie_lookup_elem() calls out
to longest_prefix_match().  The compiler is free to inline this
call
  Parent Hashes: c733239f8f530872a1f80d8c45dcafbaff368737
  Refs:  but chooses not to inline

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit inlines the longest_prefix_match function for performance improvements in the LPM trie BPF map.', 'keywords': 'inline, LPM trie, performance', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: c733239f8f530872a1f80d8c45dcafbaff368737
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c733239f8f530872a1f80d8c45dcafbaff368737
  Author Name: Christophe Leroy
  Author Email: christophe.leroy@csgroup.eu
  Commit Date: 1710796727
  Commit Message:
    bpf: Check return from set_memory_rox()

arch_protect_bpf_trampoline() and alloc_new_pack() call
set_memory_rox() which can fail
  Parent Hashes: e3362acd796789dc0562eb1a3937007b0beb0c5b
  Refs:  leading to unprotected memory.

Take into account return from set_memory_rox() function and add
__must_check flag to arch_protect_bpf_trampoline().

Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
Reviewed-by: Kees Cook <keescook@chromium.org>
Link: https://lore.kernel.org/r/fe1c163c83767fde5cab31d209a4a6be3ddb3a73.1710574353.git.christophe.leroy@csgroup.eu
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit ensures proper handling of set_memory_rox() return by using __must_check in arch_protect_bpf_trampoline().', 'keywords': 'set_memory_rox, arch_protect_bpf_trampoline, __must_check', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: e3362acd796789dc0562eb1a3937007b0beb0c5b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e3362acd796789dc0562eb1a3937007b0beb0c5b
  Author Name: Christophe Leroy
  Author Email: christophe.leroy@csgroup.eu
  Commit Date: 1710796727
  Commit Message:
    bpf: Remove arch_unprotect_bpf_trampoline()

Last user of arch_unprotect_bpf_trampoline() was removed by
commit 187e2af05abe ("bpf: struct_ops supports more than one page for
trampolines.")

Remove arch_unprotect_bpf_trampoline()

Reported-by: Daniel Borkmann <daniel@iogearbox.net>
Fixes: 187e2af05abe ("bpf: struct_ops supports more than one page for trampolines.")
Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
Link: https://lore.kernel.org/r/42c635bb54d3af91db0f9b85d724c7c290069f67.1710574353.git.christophe.leroy@csgroup.eu
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 7b30c296af6525571fc967f6a8661f6e1127369e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes the unused arch_unprotect_bpf_trampoline function after its last user was removed.', 'keywords': 'remove,arch_unprotect_bpf_trampoline,trampolines', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7b30c296af6525571fc967f6a8661f6e1127369e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7b30c296af6525571fc967f6a8661f6e1127369e
  Author Name: Mykyta Yatsenko
  Author Email: yatsenko@meta.com
  Commit Date: 1710794711
  Commit Message:
    libbpbpf: Check bpf_map/bpf_program fd validity

libbpf creates bpf_program/bpf_map structs for each program/map that
user defines
  Parent Hashes: 7f3edd0c72c3f7214f8f28495f2e6466348eb128
  Refs:  but it allows to disable creating/loading those objects in
kernel

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a check for the validity of bpf_map and bpf_program file descriptors in libbpf.', 'keywords': 'libbpf, validity check, bpf_program', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7f3edd0c72c3f7214f8f28495f2e6466348eb128
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7f3edd0c72c3f7214f8f28495f2e6466348eb128
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1710791290
  Commit Message:
    bpf: Remove unnecessary err < 0 check in bpf_struct_ops_map_update_elem

There is a "if (err)" check earlier
  Parent Hashes: 4c8644f86c854c214aaabbcc24a27fa4c7e6a951
  Refs:  so the "if (err < 0)"
check that this patch removing is unnecessary. It was my overlook
when making adjustments to the bpf_struct_ops_prepare_trampoline()
such that the caller does not have to worry about the new page when
the function returns error.

Fixes: 187e2af05abe ("bpf: struct_ops supports more than one page for trampolines.")
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Stanislav Fomichev <sdf@google.com>
Link: https://lore.kernel.org/bpf/20240315192112.2825039-1-martin.lau@linux.dev


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove redundant error check in bpf_struct_ops_map_update_elem function.', 'keywords': 'error check, redundant, bpf_struct_ops', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 35c3e27917568192927c785fc380f139255468b4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 35c3e27917568192927c785fc380f139255468b4
  Author Name: Abhishek Chauhan
  Author Email: quic_abchauha@quicinc.com
  Commit Date: 1710764993
  Commit Message:
    Revert "net: Re-use and set mono_delivery_time bit for userspace tstamp packets"

This reverts commit 885c36e59f46375c138de18ff1692f18eff67b7f.

The patch currently broke the bpf selftest test_tc_dtime because
uapi field __sk_buff->tstamp_type depends on skb->mono_delivery_time which
does not necessarily mean mono with the original fix as the bit was re-used
for userspace timestamp as well to avoid tstamp reset in the forwarding
path. To solve this we need to keep mono_delivery_time as is and
introduce another bit called user_delivery_time and fall back to the
initial proposal of setting the user_delivery_time bit based on
sk_clockid set from userspace.

Fixes: 885c36e59f46 ("net: Re-use and set mono_delivery_time bit for userspace tstamp packets")
Link: https://lore.kernel.org/netdev/bc037db4-58bb-4861-ac31-a361a93841d3@linux.dev/
Signed-off-by: Abhishek Chauhan <quic_abchauha@quicinc.com>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Martin KaFai Lau <martin.lau@kernel.org>
Signed-off-by: David S. Miller <davem@davemloft.net>

  Parent Hashes: f490c492e946d8ffbe65ad4efc66de3c5ede30a4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit reverts a patch due to a selftest failure related to reuse of mono_delivery_time bit.', 'keywords': 'reverts, mono_delivery_time, selftest', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0740b6427e90ef03177888c50dc1c78ca6e0f7f0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0740b6427e90ef03177888c50dc1c78ca6e0f7f0
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710537850
  Commit Message:
    Merge branch 'bpf-arena-followups'

Alexei Starovoitov says:

====================
bpf: arena followups.

From: Alexei Starovoitov <ast@kernel.org>

A set of follow ups to clean up bpf_arena and adjust to the latest LLVM.
====================

Link: https://lore.kernel.org/r/20240315021834.62988-1-alexei.starovoitov@gmail.com
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>

  Parent Hashes: aae08491b9438347e9656c44021824ad236052b4 a90c5845db958701ddc7659bc4f6db6fa647e449
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Clean up bpf_arena and adapt to latest LLVM updates.', 'keywords': 'bpf_arena, followups, LLVM', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: a90c5845db958701ddc7659bc4f6db6fa647e449
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a90c5845db958701ddc7659bc4f6db6fa647e449
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710537846
  Commit Message:
    selftests/bpf: Add arena test case for 4Gbyte corner case

Check that 4Gbyte arena can be allocated and overflow/underflow access in
the first and the last page behaves as expected.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Stanislav Fomichev <sdf@google.com>
Link: https://lore.kernel.org/bpf/20240315021834.62988-5-alexei.starovoitov@gmail.com

  Parent Hashes: 9a2d5a966b47e5657b22dfa257365b7ef2abc3c0
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest for 4Gbyte allocation and access behavior in bpf arena.', 'keywords': '4Gbyte,arena,test', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9a2d5a966b47e5657b22dfa257365b7ef2abc3c0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9a2d5a966b47e5657b22dfa257365b7ef2abc3c0
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710537843
  Commit Message:
    selftests/bpf: Remove hard coded PAGE_SIZE macro.

Remove hard coded PAGE_SIZE.
Add #include <sys/user.h> instead (that works on x86-64 and s390)
and fallback to slow getpagesize() for aarch64.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Stanislav Fomichev <sdf@google.com>
Link: https://lore.kernel.org/bpf/20240315021834.62988-4-alexei.starovoitov@gmail.com

  Parent Hashes: 10ebe835c937a11870690aa44c7c970fe906ff54
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes hard coded PAGE_SIZE and introduces new includes for compatibility.', 'keywords': 'PAGE_SIZE, compatibility, selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 10ebe835c937a11870690aa44c7c970fe906ff54
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 10ebe835c937a11870690aa44c7c970fe906ff54
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710537840
  Commit Message:
    libbpf
  Parent Hashes: ee498a38f3177d9ee0213839d3a05b94272aa48c
  Refs:  selftests/bpf: Adjust libbpf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adjustments made to libbpf in the selftests for bpf.', 'keywords': 'libbpf, selftests, bpf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ee498a38f3177d9ee0213839d3a05b94272aa48c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ee498a38f3177d9ee0213839d3a05b94272aa48c
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710537825
  Commit Message:
    bpf: Clarify bpf_arena comments.

Clarify two bpf_arena comments
  Parent Hashes: aae08491b9438347e9656c44021824ad236052b4
  Refs:  use existing SZ_4G #define

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit clarifies comments in the bpf_arena code section.', 'keywords': 'bpf, arena, comments', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 4c8644f86c854c214aaabbcc24a27fa4c7e6a951
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4c8644f86c854c214aaabbcc24a27fa4c7e6a951
  Author Name: Colin Ian King
  Author Email: colin.i.king@gmail.com
  Commit Date: 1710510836
  Commit Message:
    selftests/bpf: Remove second semicolon

There are statements with two semicolons. Remove the second one
  Parent Hashes: e60adf513275c3a38e5cb67f7fd12387e43a3ff5
  Refs:  it
is redundant.

Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240315092654.2431062-1-colin.i.king@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove redundant second semicolon in selftests for BPF.', 'keywords': 'selftests,semicolon,BPF', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5384cc0d1a88c27448a6a4e65b8abe6486de8012
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5384cc0d1a88c27448a6a4e65b8abe6486de8012
  Author Name: Hangbin Liu
  Author Email: liuhangbin@gmail.com
  Commit Date: 1710510391
  Commit Message:
    scripts/bpf_doc: Use silent mode when exec make cmd

When getting kernel version via make
  Parent Hashes: 44d79142ede8162fd67bf8ca4ddbda1fbcfa94f1
  Refs:  the result may be polluted by other
output

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit changes the bpf_doc script to use silent mode for make commands to avoid output pollution.', 'keywords': 'bpf_doc,silent mode,make', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: e60adf513275c3a38e5cb67f7fd12387e43a3ff5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e60adf513275c3a38e5cb67f7fd12387e43a3ff5
  Author Name: Christophe Leroy
  Author Email: christophe.leroy@csgroup.eu
  Commit Date: 1710469732
  Commit Message:
    bpf: Take return from set_memory_rox() into account with bpf_jit_binary_lock_ro()

set_memory_rox() can fail
  Parent Hashes: 7d2cc63eca0c993c99d18893214abf8f85d566d8
  Refs:  leaving memory unprotected.

Check return and bail out when bpf_jit_binary_lock_ro() returns
an error.

Link: https://github.com/KSPP/linux/issues/7
Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
Cc: linux-hardening@vger.kernel.org <linux-hardening@vger.kernel.org>
Reviewed-by: Kees Cook <keescook@chromium.org>
Reviewed-by: Puranjay Mohan <puranjay12@gmail.com>
Reviewed-by: Ilya Leoshkevich <iii@linux.ibm.com>  # s390x
Acked-by: Tiezhu Yang <yangtiezhu@loongson.cn>  # LoongArch
Reviewed-by: Johan Almbladh <johan.almbladh@anyfinetworks.com> # MIPS Part
Message-ID: <036b6393f23a2032ce75a1c92220b2afcb798d5d.1709850515.git.christophe.leroy@csgroup.eu>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix check return handling in bpf_jit_binary_lock_ro() for set_memory_rox() failures.', 'keywords': 'bpf, jit, memory', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7d2cc63eca0c993c99d18893214abf8f85d566d8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7d2cc63eca0c993c99d18893214abf8f85d566d8
  Author Name: Christophe Leroy
  Author Email: christophe.leroy@csgroup.eu
  Commit Date: 1710469732
  Commit Message:
    bpf: Take return from set_memory_ro() into account with bpf_prog_lock_ro()

set_memory_ro() can fail
  Parent Hashes: 4d8926a0407cff0c864b759b59104f4fb6f8efab
  Refs:  leaving memory unprotected.

Check its return and take it into account as an error.

Link: https://github.com/KSPP/linux/issues/7
Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
Cc: linux-hardening@vger.kernel.org <linux-hardening@vger.kernel.org>
Reviewed-by: Kees Cook <keescook@chromium.org>
Message-ID: <286def78955e04382b227cb3e4b6ba272a7442e3.1709850515.git.christophe.leroy@csgroup.eu>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit handles failures from the set_memory_ro() function within bpf_prog_lock_ro().', 'keywords': 'bpf, set_memory_ro, error-handling', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4d8926a0407cff0c864b759b59104f4fb6f8efab
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4d8926a0407cff0c864b759b59104f4fb6f8efab
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710469696
  Commit Message:
    bpf: preserve sleepable bit in subprog info

Copy over main program's sleepable bit into subprog's info. This might
be important for
  Parent Hashes: 6cda7e17392e0eca9fcafcb9b1d269c31fd737b7
  Refs:  e.g.

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Preserve the sleepable bit in subprograms' info for eBPF programs.", 'keywords': 'sleepable, subprog, info', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6cda7e17392e0eca9fcafcb9b1d269c31fd737b7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6cda7e17392e0eca9fcafcb9b1d269c31fd737b7
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710449683
  Commit Message:
    Merge branch 'ignore-additional-fields-in-the-struct_ops-maps-in-an-updated-version'

Kui-Feng Lee says:

====================
Ignore additional fields in the struct_ops maps in an updated version.

According to an offline discussion
  Parent Hashes: 9bf48fa19a4b1d186e08b20bf7e5de26a15644fb 26a7cf2bbea656837583f9a1a0f9390db63d6cc3
  Refs:  it would be beneficial to
implement a backward-compatible method for struct_ops types with
additional fields that are not present in older kernels.

This patchset accepts additional fields of a struct_ops map with all
zero values even if these fields are not in the corresponding type in
the kernel. This provides a way to be backward compatible. User space
programs can use the same map on a machine running an old kernel by
clearing fields that do not exist in the kernel.

For example

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implemented backward-compatible handling for additional fields in struct_ops maps for older kernels.', 'keywords': 'backward-compatible, struct_ops, maps', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 26a7cf2bbea656837583f9a1a0f9390db63d6cc3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 26a7cf2bbea656837583f9a1a0f9390db63d6cc3
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1710449225
  Commit Message:
    selftests/bpf: Ensure libbpf skip all-zeros fields of struct_ops maps.

A new version of a type may have additional fields that do not exist in
older versions. Previously
  Parent Hashes: c911fc61a7ce367f9ea48e457f31bb171e80ca4d
  Refs:  libbpf would reject struct_ops maps with a new
version containing extra fields when running on a machine with an old
kernel. However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Ensure libbpf skips all-zero fields in struct_ops maps for compatibility with older kernels.', 'keywords': 'libbpf, struct_ops, compatibility', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c911fc61a7ce367f9ea48e457f31bb171e80ca4d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c911fc61a7ce367f9ea48e457f31bb171e80ca4d
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1710449225
  Commit Message:
    libbpf: Skip zeroed or null fields if not found in the kernel type.

Accept additional fields of a struct_ops type with all zero values even if
these fields are not in the corresponding type in the kernel. This provides
a way to be backward compatible. User space programs can use the same map
on a machine running an old kernel by clearing fields that do not exist in
the kernel.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240313214139.685112-2-thinker.li@gmail.com

  Parent Hashes: 9bf48fa19a4b1d186e08b20bf7e5de26a15644fb
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'libbpf update to skip zeroed fields for backward compatibility with older kernels.', 'keywords': 'libbpf,backward compatibility,zeroed fields', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9bf48fa19a4b1d186e08b20bf7e5de26a15644fb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9bf48fa19a4b1d186e08b20bf7e5de26a15644fb
  Author Name: Quentin Monnet
  Author Email: qmo@kernel.org
  Commit Date: 1710448877
  Commit Message:
    libbpf: Prevent null-pointer dereference when prog to load has no BTF

In bpf_objec_load_prog()
  Parent Hashes: fe879bb42f8a6513ed18e9d22efb99cb35590201
  Refs:  there's no guarantee that obj->btf is non-NULL
when passing it to btf__fd()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix a null-pointer dereference in libbpf when the program to load has no BTF.', 'keywords': 'null-pointer,libbpf,BTF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fe879bb42f8a6513ed18e9d22efb99cb35590201
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fe879bb42f8a6513ed18e9d22efb99cb35590201
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1710448663
  Commit Message:
    bpftool: Fix missing pids during link show

Current 'bpftool link' command does not show pids
  Parent Hashes: c2a0257c1edf16c6acd2afac7572d7e9043b6577
  Refs:  e.g.

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes missing process IDs in link information shown by bpftool command.', 'keywords': 'bpftool, pids, link', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c2a0257c1edf16c6acd2afac7572d7e9043b6577
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c2a0257c1edf16c6acd2afac7572d7e9043b6577
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1710448461
  Commit Message:
    bpftool: Cast pointers for shadow types explicitly.

According to a report
  Parent Hashes: 9187210eee7d87eea37b45ea93454a88681894a4
  Refs:  skeletons fail to assign shadow pointers when being
compiled with C++ programs. Unlike C doing implicit casting for void
pointers

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit explicitly casts pointers for shadow types in bpftool to address compilation issues with C++.', 'keywords': 'bpftool, pointers, shadow', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 44d79142ede8162fd67bf8ca4ddbda1fbcfa94f1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 44d79142ede8162fd67bf8ca4ddbda1fbcfa94f1
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1710443085
  Commit Message:
    bpf: Temporarily disable atomic operations in BPF arena

Currently
  Parent Hashes: e30cef001da259e8df354b813015d0e5acc08740
  Refs:  the x86 JIT handling PROBE_MEM32 tagged accesses is not
equipped to handle atomic accesses into PTR_TO_ARENA

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit temporarily disables atomic operations in the BPF arena due to limitations in x86 JIT handling.', 'keywords': 'atomic, JIT, PTR_TO_ARENA', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3e78a6c0d3e02e4cf881dc84c5127e9990f939d6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3e78a6c0d3e02e4cf881dc84c5127e9990f939d6
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1710435375
  Commit Message:
    Merge tag 'hid-for-linus-2024031301' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid

Pull HID updates from Jiri Kosina:

 - support for the following Bluetooth devices from Samsung: Samsung
   wireless {Keyboard
  Parent Hashes: b345ff698ec7ed52d90bd5603ec8fc1802f40110 0db18cd824f781584a880653e65a0cfd38f060ee
  Refs:  GamePad

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge HID subsystem updates for support of Samsung Bluetooth devices.', 'keywords': 'Merge,HID,Samsung', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 9187210eee7d87eea37b45ea93454a88681894a4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9187210eee7d87eea37b45ea93454a88681894a4
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1710290648
  Commit Message:
    Merge tag 'net-next-6.9' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next

Pull networking updates from Jakub Kicinski:
 "Core & protocols:

   - Large effort by Eric to lower rtnl_lock pressure and remove locks:

      - Make commonly used parts of rtnetlink (address
  Parent Hashes: 1f440397665f4241346e4cc6d93f8b73880815d1 ed1f164038b50c5864aa85389f3ffd456f050cca
  Refs:  route dumps
        etc) lockless

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merging networking updates, focusing on reducing rtnl_lock pressure and achieving lockless operations in rtnetlink.', 'keywords': 'networking,rtnl_lock,rtnetlink', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5f20e6ab1f65aaaaae248e6946d5cb6d039e7de8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5f20e6ab1f65aaaaae248e6946d5cb6d039e7de8
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1710205564
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Alexei Starovoitov says:

====================
pull-request: bpf-next 2024-03-11

We've added 59 non-merge commits during the last 9 day(s) which contain
a total of 88 files changed
  Parent Hashes: f095fefacdd35b4ea97dc6d88d054f2749a73d07 66c8473135c62f478301a0e5b3012f203562dfa6
  Refs:  4181 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merged changes from 'bpf-next' branch into the main network development branch.", 'keywords': 'merge,bpf-next,network', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 66c8473135c62f478301a0e5b3012f203562dfa6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 66c8473135c62f478301a0e5b3012f203562dfa6
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710200485
  Commit Message:
    bpf: move sleepable flag from bpf_prog_aux to bpf_prog

prog->aux->sleepable is checked very frequently as part of (some) BPF
program run hot paths. So this extra aux indirection seems wasteful and
on busy systems might cause unnecessary memory cache misses.

Let's move sleepable flag into prog itself to eliminate unnecessary
pointer dereference.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Message-ID: <20240309004739.2961431-1-andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: d6170e4aaf86424c24ce06e355b4573daa891b17
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Moved sleepable flag from bpf_prog_aux to bpf_prog for performance optimization.', 'keywords': 'sleepable,performance,flag', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d6170e4aaf86424c24ce06e355b4573daa891b17
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d6170e4aaf86424c24ce06e355b4573daa891b17
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1710200010
  Commit Message:
    bpf: hardcode BPF_PROG_PACK_SIZE to 2MB * num_possible_nodes()

On some architectures like ARM64
  Parent Hashes: 379b97bbf02feecae5ce870bc0c67e3d723e30f5
  Refs:  PMD_SIZE can be really large in some
configurations. Like with CONFIG_ARM64_64K_PAGES=y the PMD_SIZE is
512MB.

Use 2MB * num_possible_nodes() as the size for allocations done through
the prog pack allocator. On most architectures

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Hardcode BPF_PROG_PACK_SIZE to 2MB times num_possible_nodes across various architectures.', 'keywords': 'BPF, allocation, ARM64', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 379b97bbf02feecae5ce870bc0c67e3d723e30f5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 379b97bbf02feecae5ce870bc0c67e3d723e30f5
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1710198408
  Commit Message:
    selftests/bpf: Add kprobe multi triggering benchmarks

Adding kprobe multi triggering benchmarks. It's useful now to bench
new fprobe implementation and might be useful later as well.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240311211023.590321-1-jolsa@kernel.org

  Parent Hashes: 08701e306e480c56b68c1fa35f2c5b27204083e2
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds kprobe multi-triggering benchmarks for evaluating the new fprobe implementation.', 'keywords': 'kprobe, benchmarks, fprobe', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 08701e306e480c56b68c1fa35f2c5b27204083e2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 08701e306e480c56b68c1fa35f2c5b27204083e2
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710197023
  Commit Message:
    Merge branch 'bpf-introduce-bpf-arena'

Alexei Starovoitov says:

====================
bpf: Introduce BPF arena.

From: Alexei Starovoitov <ast@kernel.org>

v2->v3:
- contains bpf bits only
  Parent Hashes: 365c2b32792e692bad6e3761ad19ac3f8f52c0fe 8df839ae23b8c581bdac4b6970d029d65a415852
  Refs:  but cc-ing past audience for continuity
- since prerequisite patches landed

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces BPF arena to improve eBPF memory management.', 'keywords': 'BPF, arena, memory', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8df839ae23b8c581bdac4b6970d029d65a415852
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8df839ae23b8c581bdac4b6970d029d65a415852
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710197023
  Commit Message:
    selftests/bpf: Add bpf_arena_htab test.

bpf_arena_htab.h - hash table implemented as bpf program

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240308010812.89848-15-alexei.starovoitov@gmail.com

  Parent Hashes: 9f2c156f90a422b4897a8c2831076a96a31413d1
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test for bpf_arena_htab implemented as a BPF program.', 'keywords': 'test,bpf,hastable', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9f2c156f90a422b4897a8c2831076a96a31413d1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9f2c156f90a422b4897a8c2831076a96a31413d1
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710197023
  Commit Message:
    selftests/bpf: Add bpf_arena_list test.

bpf_arena_alloc.h - implements page_frag allocator as a bpf program.
bpf_arena_list.h - doubly linked link list as a bpf program.

Compiled as a bpf program and as native C code.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240308010812.89848-14-alexei.starovoitov@gmail.com

  Parent Hashes: 80a4129fcf20da3c6941411155a9b3b45caa5b8d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for bpf_arena_list and page_frag allocator as bpf programs.', 'keywords': 'selftests,bpf_arena_list,page_frag', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 80a4129fcf20da3c6941411155a9b3b45caa5b8d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 80a4129fcf20da3c6941411155a9b3b45caa5b8d
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710197023
  Commit Message:
    selftests/bpf: Add unit tests for bpf_arena_alloc/free_pages

Add unit tests for bpf_arena_alloc/free_pages() functionality
and bpf_arena_common.h with a set of common helpers and macros that
is used in this test and the following patches.

Also modify test_loader that didn't support running bpf_prog_type_syscall
programs.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240308010812.89848-13-alexei.starovoitov@gmail.com

  Parent Hashes: 204c628730c62de5a0b593008549a9b95aa96b01
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add unit tests for bpf_arena_alloc/free_pages and update test_loader for syscall programs.', 'keywords': 'unit tests,bpf_arena_alloc,syscall', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 204c628730c62de5a0b593008549a9b95aa96b01
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 204c628730c62de5a0b593008549a9b95aa96b01
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710197022
  Commit Message:
    bpf: Add helper macro bpf_addr_space_cast()

Introduce helper macro bpf_addr_space_cast() that emits:
rX = rX
instruction with off = BPF_ADDR_SPACE_CAST
and encodes dest and src address_space-s into imm32.

It's useful with older LLVM that doesn't emit this insn automatically.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Link: https://lore.kernel.org/bpf/20240308010812.89848-12-alexei.starovoitov@gmail.com

  Parent Hashes: 2e7ba4f8fd1fa879b37db0b738c23ba2af8292ee
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add helper macro bpf_addr_space_cast for older LLVM compatibility in eBPF.', 'keywords': 'helper macro, bpf_addr_space_cast, LLVM', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2e7ba4f8fd1fa879b37db0b738c23ba2af8292ee
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2e7ba4f8fd1fa879b37db0b738c23ba2af8292ee
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710197015
  Commit Message:
    libbpf: Recognize __arena global variables.

LLVM automatically places __arena variables into ".arena.1" ELF section.
In order to use such global variables bpf program must include definition
of arena map in ".maps" section
  Parent Hashes: eed512e8ac64339cfc69da1a6a4b60982cb502ca
  Refs:  like:
struct {
       __uint(type

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit updates libbpf to support __arena global variables in bpf programs.', 'keywords': 'libbpf,global variables,__arena', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: eed512e8ac64339cfc69da1a6a4b60982cb502ca
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: eed512e8ac64339cfc69da1a6a4b60982cb502ca
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710196644
  Commit Message:
    bpftool: Recognize arena map type

Teach bpftool to recognize arena map type.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Quentin Monnet <quentin@isovalent.com>
Link: https://lore.kernel.org/bpf/20240308010812.89848-10-alexei.starovoitov@gmail.com

  Parent Hashes: 79ff13e99169ddb0e2277e046dbfb112f77dfac5
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds support for recognizing arena map type in bpftool.', 'keywords': 'bpftool, arena, map type', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 79ff13e99169ddb0e2277e046dbfb112f77dfac5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 79ff13e99169ddb0e2277e046dbfb112f77dfac5
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710196644
  Commit Message:
    libbpf: Add support for bpf_arena.

mmap() bpf_arena right after creation
  Parent Hashes: 4d2b56081c32cb33364745da434b88eeaa9d8d8d
  Refs:  since the kernel needs to
remember the address returned from mmap. This is user_vm_start.
LLVM will generate bpf_arena_cast_user() instructions where
necessary and JIT will add upper 32-bit of user_vm_start
to such pointers.

Fix up bpf_map_mmap_sz() to compute mmap size as
map->value_size * map->max_entries for arrays and
PAGE_SIZE * map->max_entries for arena.

Don't set BTF at arena creation time

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds support for bpf_arena in libbpf, enhancing mmap handling and pointer management.', 'keywords': 'libbpf,bpf_arena,mmap', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4d2b56081c32cb33364745da434b88eeaa9d8d8d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4d2b56081c32cb33364745da434b88eeaa9d8d8d
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710196644
  Commit Message:
    libbpf: Add __arg_arena to bpf_helpers.h

Add __arg_arena to bpf_helpers.h

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240308010812.89848-8-alexei.starovoitov@gmail.com

  Parent Hashes: 2edc3de6fb650924a87fffebebc3b7572cbf6e38
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add __arg_arena to enhance functionality in bpf_helpers.h for libbpf.', 'keywords': 'libbpf,arg_arena,bpf_helpers', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2edc3de6fb650924a87fffebebc3b7572cbf6e38
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2edc3de6fb650924a87fffebebc3b7572cbf6e38
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710196644
  Commit Message:
    bpf: Recognize btf_decl_tag("arg: Arena") as PTR_TO_ARENA.

In global bpf functions recognize btf_decl_tag("arg:arena") as PTR_TO_ARENA.

Note
  Parent Hashes: 6082b6c328b5486da2b356eae94b8b83c98b5565
  Refs:  when the verifier sees:

__weak void foo(struct bar *p)

it recognizes 'p' as PTR_TO_MEM and 'struct bar' has to be a struct with scalars.
Hence the only way to use arena pointers in global functions is to tag them with "arg:arena".

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Link: https://lore.kernel.org/bpf/20240308010812.89848-7-alexei.starovoitov@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit enables BPF functions to recognize arena pointers tagged with "arg:arena" as PTR_TO_ARENA in global functions.', 'keywords': 'btf_decl_tag,PTR_TO_ARENA,arena', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6082b6c328b5486da2b356eae94b8b83c98b5565
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6082b6c328b5486da2b356eae94b8b83c98b5565
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710196644
  Commit Message:
    bpf: Recognize addr_space_cast instruction in the verifier.

rY = addr_space_cast(rX
  Parent Hashes: 142fd4d2dcf58b1720a6af644f31de1a5551f219
  Refs:  0

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds recognition of addr_space_cast instruction to the eBPF verifier.', 'keywords': 'addr_space_cast, verifier, bpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 142fd4d2dcf58b1720a6af644f31de1a5551f219
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 142fd4d2dcf58b1720a6af644f31de1a5551f219
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710196644
  Commit Message:
    bpf: Add x86-64 JIT support for bpf_addr_space_cast instruction.

LLVM generates bpf_addr_space_cast instruction while translating
pointers between native (zero) address space and
__attribute__((address_space(N))).
The addr_space=1 is reserved as bpf_arena address space.

rY = addr_space_cast(rX
  Parent Hashes: 2fe99eb0ccf2bb73df65ebcbbf2f2ff70e63547b
  Refs:  0

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add x86-64 JIT support for bpf_addr_space_cast instruction to enhance pointer address space conversion.', 'keywords': 'x86-64 JIT, bpf_addr_space_cast, pointer conversion', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2fe99eb0ccf2bb73df65ebcbbf2f2ff70e63547b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2fe99eb0ccf2bb73df65ebcbbf2f2ff70e63547b
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710196644
  Commit Message:
    bpf: Add x86-64 JIT support for PROBE_MEM32 pseudo instructions.

Add support for [LDX | STX | ST]
  Parent Hashes: 667a86ad9b71d934c444eec193cf3508016f35c5
  Refs:  PROBE_MEM32

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Support added for x86-64 JIT handling of PROBE_MEM32 pseudo instructions in eBPF.', 'keywords': 'x86-64, JIT, PROBE_MEM32', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 667a86ad9b71d934c444eec193cf3508016f35c5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 667a86ad9b71d934c444eec193cf3508016f35c5
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710196644
  Commit Message:
    bpf: Disasm support for addr_space_cast instruction.

LLVM generates rX = addr_space_cast(rY
  Parent Hashes: 317460317a02a1af512697e6e964298dedd8a163
  Refs:  dst_addr_space

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added disassembly support for addr_space_cast instruction in bpf.', 'keywords': 'disassembly, addr_space_cast, instruction', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 317460317a02a1af512697e6e964298dedd8a163
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 317460317a02a1af512697e6e964298dedd8a163
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710196643
  Commit Message:
    bpf: Introduce bpf_arena.

Introduce bpf_arena
  Parent Hashes: 365c2b32792e692bad6e3761ad19ac3f8f52c0fe
  Refs:  which is a sparse shared memory region between the bpf
program and user space.

Use cases:
1. User space mmap-s bpf_arena and uses it as a traditional mmap-ed
   anonymous region

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce bpf_arena for sparse shared memory usage between eBPF program and user space.', 'keywords': 'bpf_arena,sparse,memory', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 365c2b32792e692bad6e3761ad19ac3f8f52c0fe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 365c2b32792e692bad6e3761ad19ac3f8f52c0fe
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1710172800
  Commit Message:
    selftests/bpf: Add fexit and kretprobe triggering benchmarks

We already have kprobe and fentry benchmarks. Let's add kretprobe and
fexit ones for completeness.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240309005124.3004446-1-andrii@kernel.org

  Parent Hashes: d7bca9199a27b8690ae1c71dc11f825154af7234
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added benchmarks for fexit and kretprobe in selftests/bpf.', 'keywords': 'fexit,kretprobe,benchmarks', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: d7bca9199a27b8690ae1c71dc11f825154af7234
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d7bca9199a27b8690ae1c71dc11f825154af7234
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1710172690
  Commit Message:
    mm: Introduce vmap_page_range() to map pages in PCI address space

ioremap_page_range() should be used for ranges within vmalloc range only.
The vmalloc ranges are allocated by get_vm_area(). PCI has "resource"
allocator that manages PCI_IOBASE
  Parent Hashes: 96b0f5addc7a0d9ed1f4969ca85ed7513cb1ed25
  Refs:  IO_SPACE_LIMIT address range

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce vmap_page_range() for mapping pages in PCI address space, distinct from ioremap_page_range().', 'keywords': 'vmap_page_range, PCI, ioremap', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 08842c43d0165b0ed78907fd8cc92ce17d857913
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 08842c43d0165b0ed78907fd8cc92ce17d857913
  Author Name: Eric Dumazet
  Author Email: edumazet@google.com
  Commit Date: 1710150963
  Commit Message:
    udp: no longer touch sk->sk_refcnt in early demux

After commits ca065d0cf80f ("udp: no longer use SLAB_DESTROY_BY_RCU")
and 7ae215d23c12 ("bpf: Don't refcount LISTEN sockets in sk_assign()")
UDP early demux no longer need to grab a refcount on the UDP socket.

This save two atomic operations per incoming packet for connected
sockets.

Signed-off-by: Eric Dumazet <edumazet@google.com>
Cc: Martin KaFai Lau <kafai@fb.com>
Cc: Joe Stringer <joe@wand.net.nz>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Willem de Bruijn <willemdebruijn.kernel@gmail.com>
Cc: Kuniyuki Iwashima <kuniyu@amazon.com>
Acked-by: Paolo Abeni <pabeni@redhat.com>
Signed-off-by: David S. Miller <davem@davemloft.net>

  Parent Hashes: e996401e06a5232f61b4906e2eea643fffa88396
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes the need to modify sk_refcnt in UDP early demux for improved performance.', 'keywords': 'UDP, refcount, demux', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 96d9cbe2f2ff7abde021bac75eafaceabe9a51fa
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 96d9cbe2f2ff7abde021bac75eafaceabe9a51fa
  Author Name: Manjunath Patil
  Author Email: manjunath.b.patil@oracle.com
  Commit Date: 1710069474
  Commit Message:
    RDMA/cm: add timeout to cm_destroy_id wait

Add timeout to cm_destroy_id
  Parent Hashes: 2d5c00815778ec4f4e0a84e405e3e157b7815db1
  Refs:  so that userspace can trigger any data
collection that would help in analyzing the cause of delay in destroying
the cm_id.

New noinline function helps dtrace/ebpf programs to hook on to it.
Existing functionality isn't changed except triggering a probe-able new
function at every timeout interval.

We have seen cases where CM messages stuck with MAD layer (either due to
software bug or faulty HCA)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a timeout to the cm_destroy_id wait for improved data collection during delays.', 'keywords': 'timeout,cm_destroy_id,dtrace', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 96b0f5addc7a0d9ed1f4969ca85ed7513cb1ed25
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 96b0f5addc7a0d9ed1f4969ca85ed7513cb1ed25
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1710002395
  Commit Message:
    arm64
  Parent Hashes: a27e89673abf1623c298ea84eaa03f4c57aeca1b
  Refs:  bpf: Use bpf_prog_pack for arm64 bpf trampoline

We used bpf_prog_pack to aggregate bpf programs into huge page to
relieve the iTLB pressure on the system. This was merged for ARM64[1]
We can apply it to bpf trampoline as well. This would increase the
preformance of fentry and struct_ops programs.

[1] https://lore.kernel.org/bpf/20240228141824.119877-1-puranjay12@gmail.com/

Signed-off-by: Puranjay Mohan <puranjay12@gmail.com>
Reviewed-by: Pu Lehui <pulehui@huawei.com>
Message-ID: <20240304202803.31400-1-puranjay12@gmail.com>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit uses bpf_prog_pack to optimize bpf trampoline performance on ARM64, reducing iTLB pressure and enhancing fentry and struct_ops programs.', 'keywords': 'bpf_prog_pack,ARM64,iTLB', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: caabd859c41b50a571cfdf7747de9f245c5d531b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: caabd859c41b50a571cfdf7747de9f245c5d531b
  Author Name: fuyuanli
  Author Email: fuyuanli@didiglobal.com
  Commit Date: 1709893547
  Commit Message:
    tcp: Add skb addr and sock addr to arguments of tracepoint tcp_probe.

It is useful to expose skb addr and sock addr to user in tracepoint
tcp_probe
  Parent Hashes: 6025b9135f7a8b46826a5fcf947259da43bac281
  Refs:  so that we can get more information while monitoring
receiving of tcp data

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds skb and sock addresses as arguments to the tcp_probe tracepoint for enhanced monitoring of TCP data reception.', 'keywords': 'tcp_probe, skb addr, sock addr', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: a27e89673abf1623c298ea84eaa03f4c57aeca1b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a27e89673abf1623c298ea84eaa03f4c57aeca1b
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709870792
  Commit Message:
    Merge branch 'fix-hash-bucket-overflow-checks-for-32-bit-arches'

Toke Høiland-Jørgensen says:

====================
Fix hash bucket overflow checks for 32-bit arches

Syzbot managed to trigger a crash by creating a DEVMAP_HASH map with a
large number of buckets because the overflow check relies on
well-defined behaviour that is only correct on 64-bit arches.

Fix the overflow checks to happen before values are rounded up in all
the affected map types.

v3:
- Keep the htab->n_buckets > U32_MAX / sizeof(struct bucket) check
- Use 1UL << 31 instead of U32_MAX / 2 + 1 as the constant to check
  against
- Add patch to fix stackmap.c
v2:
- Fix off-by-one error in overflow check
- Apply the same fix to hashtab
  Parent Hashes: c7d4274e90a1e7aa43d11d2a16066cbbe610070e 7a4b21250bf79eef26543d35bd390448646c536b
  Refs:  where the devmap_hash code was copied
  from (John)

Toke Høiland-Jørgensen (3):
  bpf: Fix DEVMAP_HASH overflow check on 32-bit arches
  bpf: Fix hashtab overflow check on 32-bit arches
  bpf: Fix stackmap overflow check on 32-bit arches

 kernel/bpf/devmap.c   | 11 ++++++-----
 kernel/bpf/hashtab.c  | 14 +++++++++-----
 kernel/bpf/stackmap.c |  9 ++++++---
 3 files changed

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix overflow checks in hash buckets for 32-bit architectures in eBPF.', 'keywords': 'overflow, 32-bit, hash', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7a4b21250bf79eef26543d35bd390448646c536b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7a4b21250bf79eef26543d35bd390448646c536b
  Author Name: Toke Høiland-Jørgensen
  Author Email: toke@redhat.com
  Commit Date: 1709870785
  Commit Message:
    bpf: Fix stackmap overflow check on 32-bit arches

The stackmap code relies on roundup_pow_of_two() to compute the number
of hash buckets
  Parent Hashes: 6787d916c2cf9850c97a0a3f73e08c43e7d973b1
  Refs:  and contains an overflow check by checking if the
resulting value is 0. However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes stackmap overflow check issue on 32-bit architectures in BPF.', 'keywords': 'stackmap, overflow, 32-bit', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6787d916c2cf9850c97a0a3f73e08c43e7d973b1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6787d916c2cf9850c97a0a3f73e08c43e7d973b1
  Author Name: Toke Høiland-Jørgensen
  Author Email: toke@redhat.com
  Commit Date: 1709870756
  Commit Message:
    bpf: Fix hashtab overflow check on 32-bit arches

The hashtab code relies on roundup_pow_of_two() to compute the number of
hash buckets
  Parent Hashes: 281d464a34f540de166cee74b723e97ac2515ec3
  Refs:  and contains an overflow check by checking if the
resulting value is 0. However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes overflow issue in hashtab code for 32-bit architectures.', 'keywords': 'hashtab,overflow,32-bit', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 281d464a34f540de166cee74b723e97ac2515ec3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 281d464a34f540de166cee74b723e97ac2515ec3
  Author Name: Toke Høiland-Jørgensen
  Author Email: toke@redhat.com
  Commit Date: 1709870558
  Commit Message:
    bpf: Fix DEVMAP_HASH overflow check on 32-bit arches

The devmap code allocates a number hash buckets equal to the next power
of two of the max_entries value provided when creating the map. When
rounding up to the next power of two
  Parent Hashes: c7d4274e90a1e7aa43d11d2a16066cbbe610070e
  Refs:  the 32-bit variable storing the
number of buckets can overflow

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes DEVMAP_HASH overflow issue on 32-bit architectures in the eBPF subsystem.', 'keywords': 'DEVMAP_HASH, overflow, 32-bit', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c7d4274e90a1e7aa43d11d2a16066cbbe610070e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c7d4274e90a1e7aa43d11d2a16066cbbe610070e
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1709852517
  Commit Message:
    Merge branch 'bpf: arena prerequisites'

Alexei Starovoitov says:

====================
These are bpf_arena prerequisite patches.
Useful on its own.

Alexei Starovoitov (5):
  bpf: Allow kfuncs return 'void *'
  bpf: Recognize '__map' suffix in kfunc arguments
  bpf: Plumb get_unmapped_area() callback into bpf_map_ops
  libbpf: Allow specifying 64-bit integers in map BTF.
  bpf: Tell bpf programs kernel's PAGE_SIZE
====================

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: e63985ecd22681c7f5975f2e8637187a326b6791 fe5064158c561b807af5708c868f6c7cb5144e01
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges prerequisites for bpf_arena to enhance BPF functionalities including kfunc improvements and map operations.', 'keywords': 'bpf_arena, kfuncs, map_ops', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fe5064158c561b807af5708c868f6c7cb5144e01
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fe5064158c561b807af5708c868f6c7cb5144e01
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709852328
  Commit Message:
    bpf: Tell bpf programs kernel's PAGE_SIZE

vmlinux BTF includes all kernel enums.
Add __PAGE_SIZE = PAGE_SIZE enum
  Parent Hashes: 1576b07961971d4eeb0e269c7133e9a6d430daf8
  Refs:  so that bpf programs
that include vmlinux.h can easily access it.

Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/r/20240307031228.42896-7-alexei.starovoitov@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit introduces a kernel enum for PAGE_SIZE to make it accessible to bpf programs using vmlinux.h.', 'keywords': 'PAGE_SIZE, bpf, vmlinux', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1576b07961971d4eeb0e269c7133e9a6d430daf8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1576b07961971d4eeb0e269c7133e9a6d430daf8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1709852328
  Commit Message:
    bpftool: rename is_internal_mmapable_map into is_mmapable_map

It's not restricted to working with "internal" maps
  Parent Hashes: d147357e2e5977c5fe9218457a1e359fd1d36609
  Refs:  it cares about any
map that can be mmap'ed. Reflect that in more succinct and generic name.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Acked-by: Quentin Monnet <quentin@isovalent.com>
Link: https://lore.kernel.org/r/20240307031228.42896-6-alexei.starovoitov@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Renamed function to reflect usage with any mmap'able map, not just internal ones.", 'keywords': 'rename, mmapable, bpftool', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d147357e2e5977c5fe9218457a1e359fd1d36609
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d147357e2e5977c5fe9218457a1e359fd1d36609
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709852328
  Commit Message:
    libbpf: Allow specifying 64-bit integers in map BTF.

__uint() macro that is used to specify map attributes like:
  __uint(type
  Parent Hashes: cf2c2e4a3d910270903d50462aaa75140cdb2c96
  Refs:  BPF_MAP_TYPE_ARRAY);
  __uint(map_flags

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit enables specifying 64-bit integers in map BTF using libbpf.', 'keywords': 'libbpf, 64-bit integers, map BTF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cf2c2e4a3d910270903d50462aaa75140cdb2c96
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cf2c2e4a3d910270903d50462aaa75140cdb2c96
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709852328
  Commit Message:
    bpf: Plumb get_unmapped_area() callback into bpf_map_ops

Subsequent patches introduce bpf_arena that imposes special alignment
requirements on address selection.

Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/r/20240307031228.42896-4-alexei.starovoitov@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 8d94f1357c00d7706c1f3d0bb568e054cef6aea1
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Plumbs get_unmapped_area() callback into bpf_map_ops to support special alignment requirements.', 'keywords': 'get_unmapped_area, bpf_map_ops, alignment', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8d94f1357c00d7706c1f3d0bb568e054cef6aea1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8d94f1357c00d7706c1f3d0bb568e054cef6aea1
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709852328
  Commit Message:
    bpf: Recognize '__map' suffix in kfunc arguments

Recognize 'void *p__map' kfunc argument as 'struct bpf_map *p__map'.
It allows kfunc to have 'void *' argument for maps
  Parent Hashes: 88d1d4a7eebea2836859246d91fe9d141789dfc3
  Refs:  since bpf progs
will call them as:
struct {
        __uint(type

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit allows kfunc arguments with a '__map' suffix to be recognized as 'struct bpf_map'.", 'keywords': 'kfunc, argument, map', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 88d1d4a7eebea2836859246d91fe9d141789dfc3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 88d1d4a7eebea2836859246d91fe9d141789dfc3
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709852328
  Commit Message:
    bpf: Allow kfuncs return 'void *'

Recognize return of 'void *' from kfunc as returning unknown scalar.

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/r/20240307031228.42896-2-alexei.starovoitov@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: e63985ecd22681c7f5975f2e8637187a326b6791
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit allows kfuncs to return 'void *', treating it as unknown scalar.", 'keywords': 'kfuncs, void, scalar', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: df4793505abd5df399bc6d9a4d8fe81761f557cd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: df4793505abd5df399bc6d9a4d8fe81761f557cd
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1709832213
  Commit Message:
    Merge tag 'net-6.8-rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 "Including fixes from bpf
  Parent Hashes: 67be068d31d423b857ffd8c34dbcc093f8dfff76 ba18deddd6d502da71fd6b6143c53042271b82bd
  Refs:  ipsec and netfilter.

  No solution yet for the stmmac issue mentioned in the last PR

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes including bpf from net-6.8-rc8 by Paolo Abeni.', 'keywords': 'networking,bpf,fixes', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tracepoints like programs', "It's not related to any of the above.", 'other']}
--------------------
--------------------
Processing Commit ID: d3eee81fd6111eb404318ddbaded3f86c7f21d70
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d3eee81fd6111eb404318ddbaded3f86c7f21d70
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1709785261
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-03-06

We've added 5 non-merge commits during the last 1 day(s) which contain
a total of 5 files changed
  Parent Hashes: c055fc00c07be1f0df7375ab0036cebd1106ed38 2487007aa3b9fafbd2cb14068f49791ce1d7ede5
  Refs:  77 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merge tag 'for-netdev' with 5 non-merge commits affecting 5 files, totaling 77 insertions.", 'keywords': 'merge,netdev,commits', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e63985ecd22681c7f5975f2e8637187a326b6791
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e63985ecd22681c7f5975f2e8637187a326b6791
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1709767096
  Commit Message:
    bpf
  Parent Hashes: 516fca5a7516cde7a9968f84179ed20ffb438885
  Refs:  riscv64/cfi: Support kCFI + BPF on riscv64

The riscv BPF JIT doesn't emit proper kCFI prologues for BPF programs
and struct_ops trampolines when CONFIG_CFI_CLANG is enabled.

This causes CFI failures when calling BPF programs and can even crash
the kernel due to invalid memory accesses.

Example crash:

root@rv-selftester:~/bpf# ./test_progs -a dummy_st_ops

 Unable to handle kernel paging request at virtual address ffffffff78204ffc
 Oops [#1]
 Modules linked in: bpf_testmod(OE) [....]
 CPU: 3 PID: 356 Comm: test_progs Tainted: P           OE      6.8.0-rc1 #1
 Hardware name: riscv-virtio

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix riscv BPF JIT to emit correct kCFI prologues for BPF programs with CONFIG_CFI_CLANG enabled.', 'keywords': 'riscv, JIT, kCFI', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 516fca5a7516cde7a9968f84179ed20ffb438885
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 516fca5a7516cde7a9968f84179ed20ffb438885
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1709767096
  Commit Message:
    Merge branch 'libbpf-type-suffixes-and-autocreate-flag-for-struct_ops-maps'

Eduard Zingerman says:

====================
libbpf: type suffixes and autocreate flag for struct_ops maps

Tweak struct_ops related APIs to allow the following features:
- specify version suffixes for stuct_ops map types;
- share same BPF program between several map definitions with
  different local BTF types
  Parent Hashes: 0f79bb8987a5c483362dc12d58b221a1a1c45578 5208930a909ad618363471e2872d79abef103626
  Refs:  assuming only maps with same
  kernel BTF type would be selected for load;
- toggle autocreate flag for struct_ops maps;
- automatically toggle autoload for struct_ops programs referenced
  from struct_ops maps

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance struct_ops maps in libbpf with type suffixes, autocreate flag, and autoload toggle features.', 'keywords': 'struct_ops, type suffixes, autocreate', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5208930a909ad618363471e2872d79abef103626
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5208930a909ad618363471e2872d79abef103626
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767096
  Commit Message:
    selftests/bpf: Test cases for '?' in BTF names

Two test cases to verify that '?' and other printable characters are
allowed in BTF DATASEC names:
- DATASEC with name "?.foo bar:buz" should be accepted;
- type with name "?foo" should be rejected.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240306104529.6453-16-eddyz87@gmail.com

  Parent Hashes: bd70a8fb7ca4fcb078086f4d96b048aaf1aa4786
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Add test cases to verify BTF names with '?' and other characters in eBPF.", 'keywords': 'test cases,BTF names,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bd70a8fb7ca4fcb078086f4d96b048aaf1aa4786
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bd70a8fb7ca4fcb078086f4d96b048aaf1aa4786
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767096
  Commit Message:
    bpf: Allow all printable characters in BTF DATASEC names

The intent is to allow libbpf to use SEC("?.struct_ops") to identify
struct_ops maps that are optional
  Parent Hashes: 733e5e875444fc5afc9b72714f0ecaca629ccf8a
  Refs:  e.g. like in the following BPF code:

    SEC("?.struct_ops")
    struct test_ops optional_map = { ... };

Which yields the following BTF:

    ...
    [13] DATASEC '?.struct_ops' size=0 vlen=...
    ...

To load such BTF libbpf rewrites DATASEC name before load.
After this patch the rewrite won't be necessary.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240306104529.6453-15-eddyz87@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit allows all printable characters in BTF DATASEC names for struct_ops maps.', 'keywords': 'BTF, struct_ops, libbpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 733e5e875444fc5afc9b72714f0ecaca629ccf8a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 733e5e875444fc5afc9b72714f0ecaca629ccf8a
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767096
  Commit Message:
    selftests/bpf: Test case for SEC("?.struct_ops")

Check that "?.struct_ops" and "?.struct_ops.link" section names define
struct_ops maps with autocreate == false after open.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240306104529.6453-14-eddyz87@gmail.com

  Parent Hashes: 6ebaa3fb88bbe4c33a0e01ce27007e1dd4fd133c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test case for struct_ops map sections with autocreate set to false.', 'keywords': 'selftests struct_ops autocreate', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6ebaa3fb88bbe4c33a0e01ce27007e1dd4fd133c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6ebaa3fb88bbe4c33a0e01ce27007e1dd4fd133c
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767096
  Commit Message:
    libbpf: Rewrite btf datasec names starting from '?'

Optional struct_ops maps are defined using question mark at the start
of the section name
  Parent Hashes: 5ad0ecbe056a4ea5ffaa73e58503a2f87b119a59
  Refs:  e.g.:

    SEC("?.struct_ops")
    struct test_ops optional_map = { ... };

This commit teaches libbpf to detect if kernel allows '?' prefix
in datasec names

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "This commit updates libbpf to support datasec names starting with '?' for optional struct_ops maps.", 'keywords': 'libbpf, datasec, struct_ops', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 5ad0ecbe056a4ea5ffaa73e58503a2f87b119a59
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5ad0ecbe056a4ea5ffaa73e58503a2f87b119a59
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767096
  Commit Message:
    libbpf: Struct_ops in SEC("?.struct_ops") / SEC("?.struct_ops.link")

Allow using two new section names for struct_ops maps:
- SEC("?.struct_ops")
- SEC("?.struct_ops.link")

To specify maps that have bpf_map->autocreate == false after open.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240306104529.6453-12-eddyz87@gmail.com

  Parent Hashes: 240bf8a5162e8c43cf368909582a01082d494d79
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces new section names for struct_ops maps in libbpf to specify autocreate flag as false.', 'keywords': 'struct_ops,section names,libbpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 240bf8a5162e8c43cf368909582a01082d494d79
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 240bf8a5162e8c43cf368909582a01082d494d79
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767095
  Commit Message:
    libbpf: Replace elf_state->st_ops_* fields with SEC_ST_OPS sec_type

The next patch would add two new section names for struct_ops maps.
To make working with multiple struct_ops sections more convenient:
- remove fields like elf_state->st_ops_{shndx
  Parent Hashes: 651d49f15b2a84b3bcfe950fa99c3672b9619dbd
  Refs: link_shndx};
- mark section descriptions hosting struct_ops as
  elf_sec_desc->sec_type == SEC_ST_OPS;

After these changes struct_ops sections could be processed uniformly
by iterating bpf_object->efile.secs entries.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240306104529.6453-11-eddyz87@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit refactors libbpf to enhance handling of struct_ops sections by consolidating section descriptors.', 'keywords': 'libbpf, struct_ops, elf_state', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 651d49f15b2a84b3bcfe950fa99c3672b9619dbd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 651d49f15b2a84b3bcfe950fa99c3672b9619dbd
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767095
  Commit Message:
    selftests/bpf: Verify struct_ops autoload/autocreate sync

Check that autocreate flags of struct_ops map cause autoload of
struct_ops corresponding programs:
- when struct_ops program is referenced only from a map for which
  autocreate is set to false
  Parent Hashes: fe9d049c3da06373a1a35914b7f695509e4cb1fe
  Refs:  that program should not be loaded;
- when struct_ops program with autoload == false is set to be used
  from a map with autocreate == true using shadow var

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhances selftests to verify struct_ops map autocreate and autoload synchronization behavior.', 'keywords': 'selftests,bpf,struct_ops', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fe9d049c3da06373a1a35914b7f695509e4cb1fe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fe9d049c3da06373a1a35914b7f695509e4cb1fe
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767095
  Commit Message:
    libbpf: Sync progs autoload with maps autocreate for struct_ops maps

Automatically select which struct_ops programs to load depending on
which struct_ops maps are selected for automatic creation.
E.g. for the BPF code below:

    SEC("struct_ops/test_1") int BPF_PROG(foo) { ... }
    SEC("struct_ops/test_2") int BPF_PROG(bar) { ... }

    SEC(".struct_ops.link")
    struct test_ops___v1 A = {
        .foo = (void *)foo
    };

    SEC(".struct_ops.link")
    struct test_ops___v2 B = {
        .foo = (void *)foo
  Parent Hashes: 1863acccdf936c6917398165ca97e252d02fa6dd
  Refs: 
        .bar = (void *)bar

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Sync program autoload with automatic map creation for struct_ops maps in libbpf.', 'keywords': 'libbpf, struct_ops, autoload', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1863acccdf936c6917398165ca97e252d02fa6dd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1863acccdf936c6917398165ca97e252d02fa6dd
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767095
  Commit Message:
    selftests/bpf: Test autocreate behavior for struct_ops maps

Check that bpf_map__set_autocreate() can be used to disable automatic
creation for struct_ops maps.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240306104529.6453-8-eddyz87@gmail.com

  Parent Hashes: c1b93c07b3ac3204c6a42a7f7b6217e36f44df4f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Test added for autocreate behavior of struct_ops maps in selftests/bpf.', 'keywords': 'selftests,bpf,struct_ops', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c1b93c07b3ac3204c6a42a7f7b6217e36f44df4f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c1b93c07b3ac3204c6a42a7f7b6217e36f44df4f
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767095
  Commit Message:
    selftests/bpf: Bad_struct_ops test

When loading struct_ops programs kernel requires BTF id of the
struct_ops type and member index for attachment point inside that
type. This makes impossible to use same BPF program in several
struct_ops maps that have different struct_ops type.
Check if libbpf rejects such BPF objects files.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240306104529.6453-7-eddyz87@gmail.com

  Parent Hashes: c8617e8bcf8d1ef357fadf5c96bd86b9952fb93f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds a selftest in BPF to verify libbpf rejection of BPF objects with mismatched struct_ops types and indices.', 'keywords': 'selftests, struct_ops, libbpf', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c8617e8bcf8d1ef357fadf5c96bd86b9952fb93f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c8617e8bcf8d1ef357fadf5c96bd86b9952fb93f
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767095
  Commit Message:
    selftests/bpf: Utility functions to capture libbpf log in test_progs

Several test_progs tests already capture libbpf log in order to check
for some expected output
  Parent Hashes: 5bab7a277ca8d4ef377a50a6678577b5bd7f74d8
  Refs:  e.g bpf_tcp_ca.c

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add utility functions for capturing libbpf log in test_progs selftests.', 'keywords': 'utility functions, libbpf log, test_progs', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5bab7a277ca8d4ef377a50a6678577b5bd7f74d8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5bab7a277ca8d4ef377a50a6678577b5bd7f74d8
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767095
  Commit Message:
    selftests/bpf: Test struct_ops map definition with type suffix

Extend struct_ops_module test case to check if it is possible to use
'___' suffixes for struct_ops type specification.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: David Vernet <void@manifault.com>
Link: https://lore.kernel.org/bpf/20240306104529.6453-5-eddyz87@gmail.com

  Parent Hashes: 8db052615a9780b45e26d6afabc7abefe1ba20ac
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Extend struct_ops_module test case to verify struct_ops type specification with '___' suffixes.", 'keywords': 'selftests,bpf,struct_ops', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8db052615a9780b45e26d6afabc7abefe1ba20ac
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8db052615a9780b45e26d6afabc7abefe1ba20ac
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767095
  Commit Message:
    libbpf: Honor autocreate flag for struct_ops maps

Skip load steps for struct_ops maps not marked for automatic creation.
This should allow to load bpf object in situations like below:

    SEC("struct_ops/foo") int BPF_PROG(foo) { ... }
    SEC("struct_ops/bar") int BPF_PROG(bar) { ... }

    struct test_ops___v1 {
    	int (*foo)(void);
    };

    struct test_ops___v2 {
    	int (*foo)(void);
    	int (*does_not_exist)(void);
    };

    SEC(".struct_ops.link")
    struct test_ops___v1 map_for_old = {
    	.test_1 = (void *)foo
    };

    SEC(".struct_ops.link")
    struct test_ops___v2 map_for_new = {
    	.test_1 = (void *)foo
  Parent Hashes: d9ab2f76ef5abb76190ffb42d83bdc6caede807e
  Refs: 
    	.does_not_exist = (void *)bar
    };

Suppose program is loaded on old kernel that does not have definition
for 'does_not_exist' struct_ops member. After this commit it would be
possible to load such object file after the following tweaks:

    bpf_program__set_autoload(skel->progs.bar

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Skip loading steps for struct_ops maps not marked for automatic creation in libbpf.', 'keywords': 'libbpf,struct_ops,autocreate', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d9ab2f76ef5abb76190ffb42d83bdc6caede807e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d9ab2f76ef5abb76190ffb42d83bdc6caede807e
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767095
  Commit Message:
    libbpf: Tie struct_ops programs to kernel BTF ids
  Parent Hashes: a2a5172cf1eb39472bd2038079f65c6f676906a5
  Refs:  not to local ids

Enforce the following existing limitation on struct_ops programs based
on kernel BTF id instead of program-local BTF id:

    struct_ops BPF prog can be re-used between multiple .struct_ops &
    .struct_ops.link as long as it's the same struct_ops struct
    definition and the same function pointer field

This allows reusing same BPF program for versioned struct_ops map
definitions

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit ties struct_ops programs to kernel BTF ids for reuse across multiple struct_ops definitions.', 'keywords': 'struct_ops,kernel BTF,reuse', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a2a5172cf1eb39472bd2038079f65c6f676906a5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a2a5172cf1eb39472bd2038079f65c6f676906a5
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709767095
  Commit Message:
    libbpf: Allow version suffixes (___smth) for struct_ops types

E.g. allow the following struct_ops definitions:

    struct bpf_testmod_ops___v1 { int (*test)(void); };
    struct bpf_testmod_ops___v2 { int (*test)(void); };

    SEC(".struct_ops.link")
    struct bpf_testmod_ops___v1 a = { .test = ... }
    SEC(".struct_ops.link")
    struct bpf_testmod_ops___v2 b = { .test = ... }

Where both bpf_testmod_ops__v1 and bpf_testmod_ops__v2 would be
resolved as 'struct bpf_testmod_ops' from kernel BTF.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: David Vernet <void@manifault.com>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240306104529.6453-2-eddyz87@gmail.com

  Parent Hashes: 0f79bb8987a5c483362dc12d58b221a1a1c45578
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable version suffixes for struct_ops types in the libbpf library to support multiple versions.', 'keywords': 'libbpf,struct_ops,BTF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0f79bb8987a5c483362dc12d58b221a1a1c45578
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0f79bb8987a5c483362dc12d58b221a1a1c45578
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1709767094
  Commit Message:
    Merge branch 'bpf-introduce-may_goto-and-cond_break'

Alexei Starovoitov says:

====================
bpf: Introduce may_goto and cond_break

From: Alexei Starovoitov <ast@kernel.org>

v5 -> v6:
- Rename BPF_JMA to BPF_JCOND
- Addressed Andrii's review comments

v4 -> v5:
- rewrote patch 1 to avoid fake may_goto_reg and use 'u32 may_goto_cnt' instead.
  This way may_goto handling is similar to bpf_loop() processing.
- fixed bug in patch 2 that RANGE_WITHIN should not use
  rold->type == NOT_INIT as a safe signal.
- patch 3 fixed negative offset computation in cond_break macro
- using bpf_arena and cond_break recompiled lib/glob.c as bpf prog
  and it works! It will be added as a selftest to arena series.

v3 -> v4:
- fix drained issue reported by John.
  may_goto insn could be implemented with sticky state (once
  reaches 0 it stays 0)
  Parent Hashes: 9a9d1d36050e486822dc54990c896761b04e7446 0c8bbf990bddef1a4f32889b18a4a016d9bd2cfd
  Refs:  but the verifier shouldn't assume that.
  It has to explore both branches.
  Arguably drained iterator state shouldn't be there at all.
  bpf_iter_css_next() is not sticky. Can be fixed

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit introduces may_goto and cond_break constructs in the eBPF verifier.', 'keywords': 'may_goto, cond_break, eBPF', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0c8bbf990bddef1a4f32889b18a4a016d9bd2cfd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0c8bbf990bddef1a4f32889b18a4a016d9bd2cfd
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709767090
  Commit Message:
    selftests/bpf: Test may_goto

Add tests for may_goto instruction via cond_break macro.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Tested-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20240306031929.42666-5-alexei.starovoitov@gmail.com

  Parent Hashes: 06375801525717173aee790310b7d959bb77879b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for the may_goto instruction using the cond_break macro in BPF.', 'keywords': 'selftests,BPF,may_goto', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 06375801525717173aee790310b7d959bb77879b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 06375801525717173aee790310b7d959bb77879b
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709767084
  Commit Message:
    bpf: Add cond_break macro

Use may_goto instruction to implement cond_break macro.
Ideally the macro should be written as:
  asm volatile goto(".byte 0xe5;
                     .byte 0;
                     .short %l[l_break] ...
                     .long 0;
but LLVM doesn't recognize fixup of 2 byte PC relative yet.
Hence use
  asm volatile goto(".byte 0xe5;
                     .byte 0;
                     .long %l[l_break] ...
                     .short 0;
that produces correct asm on little endian.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Tested-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20240306031929.42666-4-alexei.starovoitov@gmail.com

  Parent Hashes: 4f81c16f50baf6d5d8bfa6eef3250dcfa22cbc08
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add cond_break macro using may_goto instruction for better assembly compatibility with little endian systems.', 'keywords': 'cond_break, macro, may_goto', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4f81c16f50baf6d5d8bfa6eef3250dcfa22cbc08
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4f81c16f50baf6d5d8bfa6eef3250dcfa22cbc08
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709767080
  Commit Message:
    bpf: Recognize that two registers are safe when their ranges match

When open code iterators
  Parent Hashes: 011832b97b311bb9e3c27945bc0d1089a14209c9
  Refs:  bpf_loop or may_goto are used the following two
states are equivalent and safe to prune the search:

cur state: fp-8_w=scalar(id=3

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit optimizes register safety recognition by matching their ranges for bpf open code iterators.', 'keywords': 'registers,safe,ranges', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 011832b97b311bb9e3c27945bc0d1089a14209c9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 011832b97b311bb9e3c27945bc0d1089a14209c9
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709767051
  Commit Message:
    bpf: Introduce may_goto instruction

Introduce may_goto instruction that from the verifier pov is similar to
open coded iterators bpf_for()/bpf_repeat() and bpf_loop() helper
  Parent Hashes: 9a9d1d36050e486822dc54990c896761b04e7446
  Refs:  but it
doesn't iterate any objects.
In assembly 'may_goto' is a nop most of the time until bpf runtime has to
terminate the program for whatever reason. In the current implementation
may_goto has a hidden counter

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce may_goto instruction that acts as a conditional program termination point in BPF verifier.', 'keywords': 'may_goto,instruction,verifier', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e6f798225a31485e47a6e4f6aa07ee9fdf80c2cb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e6f798225a31485e47a6e4f6aa07ee9fdf80c2cb
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709767042
  Commit Message:
    mm: Introduce VM_SPARSE kind and vm_area_[un]map_pages().

vmap/vmalloc APIs are used to map a set of pages into contiguous kernel
virtual space.

get_vm_area() with appropriate flag is used to request an area of kernel
address range. It's used for vmalloc
  Parent Hashes: 3e49a866c9dcbd8173e4f3e491293619a9e81fa4
  Refs:  vmap

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces VM_SPARSE kind and vm_area_[un]map_pages() functionality to handle kernel virtual space mapping.', 'keywords': 'VM_SPARSE, vmap, vmalloc', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 3e49a866c9dcbd8173e4f3e491293619a9e81fa4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3e49a866c9dcbd8173e4f3e491293619a9e81fa4
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709749144
  Commit Message:
    mm: Enforce VM_IOREMAP flag and range in ioremap_page_range.

There are various users of get_vm_area() + ioremap_page_range() APIs.
Enforce that get_vm_area() was requested as VM_IOREMAP type and range
passed to ioremap_page_range() matches created vm_area to avoid
accidentally ioremap-ing into wrong address range.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Christoph Hellwig <hch@lst.de>
Link: https://lore.kernel.org/bpf/20240305030516.41519-2-alexei.starovoitov@gmail.com

  Parent Hashes: 8f50d5c423551bfa259af792647a2f4799780ac5
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enforce VM_IOREMAP flag and range in ioremap_page_range to prevent incorrect ioremap usage.', 'keywords': 'VM_IOREMAP,enforce,ioremap', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 2487007aa3b9fafbd2cb14068f49791ce1d7ede5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2487007aa3b9fafbd2cb14068f49791ce1d7ede5
  Author Name: Toke Høiland-Jørgensen
  Author Email: toke@redhat.com
  Commit Date: 1709686133
  Commit Message:
    cpumap: Zero-initialise xdp_rxq_info struct before running XDP program

When running an XDP program that is attached to a cpumap entry
  Parent Hashes: 0bfc0336e1348883fdab4689f0c8c56458f36dd8
  Refs:  we don't
initialise the xdp_rxq_info data structure being used in the xdp_buff
that backs the XDP program invocation. Tobias noticed that this leads to
random values being returned as the xdp_md->rx_queue_index value for XDP
programs running in a cpumap.

This means we're basically returning the contents of the uninitialised
memory

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit zero-initializes the xdp_rxq_info structure to prevent random values in xdp_md->rx_queue_index for cpumap entries.', 'keywords': 'zero-initialize,xdp_rxq_info,cpumap', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 0bfc0336e1348883fdab4689f0c8c56458f36dd8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0bfc0336e1348883fdab4689f0c8c56458f36dd8
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1709684382
  Commit Message:
    selftests/bpf: Fix up xdp bonding test wrt feature flags

Adjust the XDP feature flags for the bond device when no bond slave
devices are attached. After 9b0ed890ac2a ("bonding: do not report
NETDEV_XDP_ACT_XSK_ZEROCOPY")
  Parent Hashes: f267f262815033452195f46c43b572159262f533
  Refs:  the empty bond device must report 0
as flags instead of NETDEV_XDP_ACT_MASK.

  # ./vmtest.sh -- ./test_progs -t xdp_bond
  [...]
  [    3.983311] bond1 (unregistering): (slave veth1_1): Releasing backup interface
  [    3.995434] bond1 (unregistering): Released all slaves
  [    4.022311] bond2: (slave veth2_1): Releasing backup interface
  #507/1   xdp_bonding/xdp_bonding_attach:OK
  #507/2   xdp_bonding/xdp_bonding_nested:OK
  #507/3   xdp_bonding/xdp_bonding_features:OK
  #507/4   xdp_bonding/xdp_bonding_roundrobin:OK
  #507/5   xdp_bonding/xdp_bonding_activebackup:OK
  #507/6   xdp_bonding/xdp_bonding_xor_layer2:OK
  #507/7   xdp_bonding/xdp_bonding_xor_layer23:OK
  #507/8   xdp_bonding/xdp_bonding_xor_layer34:OK
  #507/9   xdp_bonding/xdp_bonding_redirect_multi:OK
  #507     xdp_bonding:OK
  Summary: 1/9 PASSED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes XDP feature flags for bond devices when no slave devices are attached in selftests.', 'keywords': 'XDP,bonding,feature', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 399eca1bd4fc14645dcdf19ee10adf5cde85aecf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 399eca1bd4fc14645dcdf19ee10adf5cde85aecf
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709684157
  Commit Message:
    Merge branch 'check-bpf_func_state-callback_depth-when-pruning-states'

Eduard Zingerman says:

====================
check bpf_func_state->callback_depth when pruning states

This patch-set fixes bug in states pruning logic hit in mailing list
discussion [0]. The details of the fix are in patch #1.

The main idea for the fix belongs to Yonghong Song
  Parent Hashes: 685f7d531264599b3f167f1e94bbd22f120e5fab 5c2bc5e2f81d3344095ae241032dde20a4ea2b48
  Refs: 
mine contribution is merely in review and test cases.

There are some changes in verification performance:

File                       Program        Insns    (DIFF)  States  (DIFF)
-------------------------  -------------  ---------------  --------------
pyperf600_bpf_loop.bpf.o   on_event          +15 (+0.42%)     +0 (+0.00%)
strobemeta_bpf_loop.bpf.o  on_event        +857 (+37.95%)   +60 (+38.96%)
xdp_synproxy_kern.bpf.o    syncookie_tc   +2892 (+30.39%)  +109 (+36.33%)
xdp_synproxy_kern.bpf.o    syncookie_xdp  +2892 (+30.01%)  +109 (+36.09%)

(when tested on a subset of selftests identified by
 selftests/bpf/veristat.cfg and Cilium bpf object files from [4])

Changelog:
v2 [2] -> v3:
- fixes for verifier.c commit message as suggested by Yonghong;
- patch-set re-rerouted to 'bpf' tree as suggested in [2];
- patch for test_tcp_custom_syncookie is sent separately to 'bpf-next' [3].
- veristat results updated using 'bpf' tree as baseline and clang 16.

v1 [1] -> v2:
- patch #2 commit message updated to better reflect verifier behavior
  with regards to checkpoints tree (suggested by Yonghong);
- veristat results added (suggested by Andrii).

[0] https://lore.kernel.org/bpf/9b251840-7cb8-4d17-bd23-1fc8071d8eef@linux.dev/
[1] https://lore.kernel.org/bpf/20240212143832.28838-1-eddyz87@gmail.com/
[2] https://lore.kernel.org/bpf/20240216150334.31937-1-eddyz87@gmail.com/
[3] https://lore.kernel.org/bpf/20240222150300.14909-1-eddyz87@gmail.com/
[4] https://github.com/anakryiko/cilium
====================

Link: https://lore.kernel.org/r/20240222154121.6991-1-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a bug in eBPF verifier state pruning logic related to callback depth.', 'keywords': 'bugfix, pruning, verifier', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5c2bc5e2f81d3344095ae241032dde20a4ea2b48
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5c2bc5e2f81d3344095ae241032dde20a4ea2b48
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709684156
  Commit Message:
    selftests/bpf: test case for callback_depth states pruning logic

The test case was minimized from mailing list discussion [0].
It is equivalent to the following C program:

    struct iter_limit_bug_ctx { __u64 a; __u64 b; __u64 c; };

    static __naked void iter_limit_bug_cb(void)
    {
    	switch (bpf_get_prandom_u32()) {
    	case 1:  ctx->a = 42; break;
    	case 2:  ctx->b = 42; break;
    	default: ctx->c = 42; break;
    	}
    }

    int iter_limit_bug(struct __sk_buff *skb)
    {
    	struct iter_limit_bug_ctx ctx = { 7
  Parent Hashes: e9a8e5a587ca55fec6c58e4881742705d45bee54
  Refs:  7

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test case for callback_depth states pruning logic in BPF selftests.', 'keywords': 'test case,callback_depth,pruning', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e9a8e5a587ca55fec6c58e4881742705d45bee54
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e9a8e5a587ca55fec6c58e4881742705d45bee54
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1709684156
  Commit Message:
    bpf: check bpf_func_state->callback_depth when pruning states

When comparing current and cached states verifier should consider
bpf_func_state->callback_depth. Current state cannot be pruned against
cached state
  Parent Hashes: 685f7d531264599b3f167f1e94bbd22f120e5fab
  Refs:  when current states has more iterations left compared to
cached state. Current state has more iterations left when it's
callback_depth is smaller.

Below is an example illustrating this bug

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix the pruning logic in the eBPF verifier by considering callback_depth in function states.', 'keywords': 'bpf,func_state,callback_depth', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ef27f655b438bed4c83680e4f01e1cde2739854b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ef27f655b438bed4c83680e4f01e1cde2739854b
  Author Name: Florian Kauer
  Author Email: florian.kauer@linutronix.de
  Commit Date: 1709661033
  Commit Message:
    igc: avoid returning frame twice in XDP_REDIRECT

When a frame can not be transmitted in XDP_REDIRECT
(e.g. due to a full queue)
  Parent Hashes: 36c824ca3e4fa8d1224c2dcdeaca39d2ca86a42f
  Refs:  it is necessary to free
it by calling xdp_return_frame_rx_napi.

However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix to prevent returning frame twice in XDP_REDIRECT when the transmission queue is full.', 'keywords': 'XDP_REDIRECT,frame,transmit', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 8f50d5c423551bfa259af792647a2f4799780ac5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8f50d5c423551bfa259af792647a2f4799780ac5
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1709590164
  Commit Message:
    Merge branch 'Allow struct_ops maps with a large number of programs'

Kui-Feng Lee says:

====================
The BPF struct_ops previously only allowed for one page to be used for
the trampolines of all links in a map. However
  Parent Hashes: 01031fd473059bf69bb6edc6d51d4bd58ad92e50 93bc28d859e57f1a654d3b63600d14c85c5630a4
  Refs:  we have recently run
out of space due to the large number of BPF program links. By
allocating additional pages when we exhaust an existing page

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit allows struct_ops maps to support a larger number of BPF program links by allocating additional pages for trampolines.', 'keywords': 'struct_ops maps, trampolines, BPF programs', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 93bc28d859e57f1a654d3b63600d14c85c5630a4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 93bc28d859e57f1a654d3b63600d14c85c5630a4
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1709590164
  Commit Message:
    selftests/bpf: Test struct_ops maps with a large number of struct_ops program.

Create and load a struct_ops map with a large number of struct_ops
programs to generate trampolines taking a size over multiple pages. The
map includes 40 programs. Their trampolines takes 6.6k+
  Parent Hashes: 187e2af05abe6bf80581490239c449456627d17a
  Refs:  more than 1.5
pages

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit tests struct_ops maps with many struct_ops programs generating large trampolines spanning multiple pages in selftests.', 'keywords': 'struct_ops, trampolines, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 187e2af05abe6bf80581490239c449456627d17a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 187e2af05abe6bf80581490239c449456627d17a
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1709590160
  Commit Message:
    bpf: struct_ops supports more than one page for trampolines.

The BPF struct_ops previously only allowed one page of trampolines.
Each function pointer of a struct_ops is implemented by a struct_ops
bpf program. Each struct_ops bpf program requires a trampoline.
The following selftest patch shows each page can hold a little more
than 20 trampolines.

While one page is more than enough for the tcp-cc usecase
  Parent Hashes: 73e4f9e615d7b99f39663d4722dc73e8fa5db5f9
  Refs: 
the sched_ext use case shows that one page is not always enough and hits
the one page limit. This patch overcomes the one page limit by allocating
another page when needed and it is limited to a total of
MAX_IMAGE_PAGES (8) pages which is more than enough for
reasonable usages.

The variable st_map->image has been changed to st_map->image_pages

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Increase the support for multiple pages in struct_ops trampolines to accommodate higher requirements.', 'keywords': 'struct_ops,trampolines,pages', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 73e4f9e615d7b99f39663d4722dc73e8fa5db5f9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 73e4f9e615d7b99f39663d4722dc73e8fa5db5f9
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1709575437
  Commit Message:
    bpf
  Parent Hashes: 01031fd473059bf69bb6edc6d51d4bd58ad92e50
  Refs:  net: validate struct_ops when updating value.

Perform all validations when updating values of struct_ops maps. Doing
validation in st_ops->reg() and st_ops->update() is not necessary anymore.
However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Perform validation of struct_ops maps on value updates instead of in reg and update functions.', 'keywords': 'validate, struct_ops, update', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 01031fd473059bf69bb6edc6d51d4bd58ad92e50
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 01031fd473059bf69bb6edc6d51d4bd58ad92e50
  Author Name: Song Yoong Siang
  Author Email: yoong.siang.song@intel.com
  Commit Date: 1709560919
  Commit Message:
    selftests/bpf: xdp_hw_metadata reduce sleep interval

In current ping-pong design
  Parent Hashes: 8f79870ec8a9409983ad5981e1b7d599cbf047bd
  Refs:  xdp_hw_metadata will wait until the packet
transmission completely done

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Reduce sleep interval in xdp_hw_metadata test to improve efficiency.', 'keywords': 'xdp_hw_metadata,sleep,interval', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 8f79870ec8a9409983ad5981e1b7d599cbf047bd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8f79870ec8a9409983ad5981e1b7d599cbf047bd
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1709559624
  Commit Message:
    selftests/bpf: Extend uprobe/uretprobe triggering benchmarks

Settle on three "flavors" of uprobe/uretprobe
  Parent Hashes: 25703adf45f8430ec59effa20920c80139d13cdc
  Refs:  installed on different
kinds of instruction: nop

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extend uprobe/uretprobe benchmarks with different instruction types in selftests for BPF.', 'keywords': 'uprobe, uretprobe, benchmarks', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 25703adf45f8430ec59effa20920c80139d13cdc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 25703adf45f8430ec59effa20920c80139d13cdc
  Author Name: Chen Shen
  Author Email: peterchenshen@gmail.com
  Commit Date: 1709559231
  Commit Message:
    libbpf: Correct debug message in btf__load_vmlinux_btf

In the function btf__load_vmlinux_btf
  Parent Hashes: 0ef05e258b5e15c254534d9dd382ad4c3173dce0
  Refs:  the debug message incorrectly
refers to 'path' instead of 'sysfs_btf_path'.

Signed-off-by: Chen Shen <peterchenshen@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240302062218.3587-1-peterchenshen@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Corrected debug message in btf__load_vmlinux_btf function to use correct path reference.', 'keywords': 'libbpf,debug path,correction', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0ef05e258b5e15c254534d9dd382ad4c3173dce0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0ef05e258b5e15c254534d9dd382ad4c3173dce0
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1709559066
  Commit Message:
    bpf
  Parent Hashes: 4e73e1bc1abf3181d57d6b8f1ab2a9f62a6a1a52
  Refs:  docs: Rename legacy conformance group to packet

There could be other legacy conformance groups in the future

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Renames legacy conformance group to packet in documentation.', 'keywords': 'rename, conformance, packet', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 4e73e1bc1abf3181d57d6b8f1ab2a9f62a6a1a52
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4e73e1bc1abf3181d57d6b8f1ab2a9f62a6a1a52
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1709444414
  Commit Message:
    bpf
  Parent Hashes: 4b2765ae410abf01154cf97876384d8a58c43953
  Refs:  docs: Use IETF format for field definitions in instruction-set.rst

In preparation for publication as an IETF RFC

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Updated instruction-set documentation to use IETF format for field definitions.', 'keywords': 'documentation,IETF,RFC', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 4b2765ae410abf01154cf97876384d8a58c43953
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4b2765ae410abf01154cf97876384d8a58c43953
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1709441459
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-02-29

We've added 119 non-merge commits during the last 32 day(s) which contain
a total of 150 files changed
  Parent Hashes: e960825709330cb199d209740326cec37e8c419d 0270d69121ba7fbc449a386f989b9b7b5eaebde3
  Refs:  3589 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge various updates from the bpf-next branch affecting multiple files in the Linux kernel repository.', 'keywords': 'merge, bpf-next, updates', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: dd267d056fed323f1684fa52d2a864fc93ca3be0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dd267d056fed323f1684fa52d2a864fc93ca3be0
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1709258893
  Commit Message:
    perf vendor events intel: Add umasks/occ_sel to PCU events.

UMasks were being dropped leading to all PCU
UNC_P_POWER_STATE_OCCUPANCY events having the same encoding. Don't
drop the umask trying to be consistent with other sources of events
like libpfm4 [1]. Older models need to use occ_sel rather than umask
  Parent Hashes: ec42d3d56819688537ec7ee37ce97f695fb8e6d7
  Refs: 
correct these values too. This applies the change from [2].

[1] https://sourceforge.net/p/perfmon2/libpfm4/ci/master/tree/lib/events/intel_skx_unc_pcu_events.h#l30
[2] https://github.com/captain5050/perfmon/commit/cbd4aee81023e5bfa09677b1ce170ff69e9c423d

Signed-off-by: Ian Rogers <irogers@google.com>
Reviewed-by: Kan Liang <kan.liang@linux.intel.com>
Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: https://lore.kernel.org/r/20240228170529.4035675-1-irogers@google.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix PCU event encoding by adding umasks/occ_sel for better consistency in perf vendor events on Intel.', 'keywords': 'PCU,umasks,events', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 0270d69121ba7fbc449a386f989b9b7b5eaebde3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0270d69121ba7fbc449a386f989b9b7b5eaebde3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1709245447
  Commit Message:
    Merge branch 'create-shadow-types-for-struct_ops-maps-in-skeletons'

Kui-Feng Lee says:

====================
Create shadow types for struct_ops maps in skeletons

This patchset allows skeleton users to change the values of the fields
in struct_ops maps at runtime. It will create a shadow type pointer in
a skeleton for each struct_ops map
  Parent Hashes: 896880ff30866f386ebed14ab81ce1ad3710cfc4 0623e73317940d052216fb6eef4efd55a0a7f602
  Refs:  allowing users to access the
values of fields through these pointers. For instance

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit introduces shadow types for struct_ops maps to allow runtime modifications in skeletons.', 'keywords': 'shadow types, struct_ops, skeletons', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0623e73317940d052216fb6eef4efd55a0a7f602
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0623e73317940d052216fb6eef4efd55a0a7f602
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1709245433
  Commit Message:
    selftests/bpf: Test if shadow types work correctly.

Change the values of fields
  Parent Hashes: f2e81192e07e87897ff1296c96775eceea8f582a
  Refs:  including scalar types and function pointers

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds selftests for verifying the correct functionality of shadow types in BPF programs.', 'keywords': 'selftests, shadow types, BPF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f2e81192e07e87897ff1296c96775eceea8f582a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f2e81192e07e87897ff1296c96775eceea8f582a
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1709245433
  Commit Message:
    bpftool: Add an example for struct_ops map and shadow type.

The example in bpftool-gen.8 explains how to use the pointer of the shadow
type to change the value of a field of a struct_ops map.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Quentin Monnet <quentin@isovalent.com>
Link: https://lore.kernel.org/bpf/20240229064523.2091270-5-thinker.li@gmail.com

  Parent Hashes: a7b0fa352eafef95bd0d736ca94965d3f884ad18
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds an example in bpftool-gen for using the shadow type in struct_ops maps.', 'keywords': 'bpftool, struct_ops, shadow type', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a7b0fa352eafef95bd0d736ca94965d3f884ad18
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a7b0fa352eafef95bd0d736ca94965d3f884ad18
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1709245433
  Commit Message:
    bpftool: Generated shadow variables for struct_ops maps.

Declares and defines a pointer of the shadow type for each struct_ops map.

The code generator will create an anonymous struct type as the shadow type
for each struct_ops map. The shadow type is translated from the original
struct type of the map. The user of the skeleton use pointers of them to
access the values of struct_ops maps.

However
  Parent Hashes: 69e4a9d2b3f5adf5af4feeab0a9f505da971265a
  Refs:  shadow types only supports certain types of fields

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduced shadow variable generation for struct_ops maps in bpftool.', 'keywords': 'shadow, struct_ops, bpftool', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 69e4a9d2b3f5adf5af4feeab0a9f505da971265a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 69e4a9d2b3f5adf5af4feeab0a9f505da971265a
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1709245432
  Commit Message:
    libbpf: Convert st_ops->data to shadow type.

Convert st_ops->data to the shadow type of the struct_ops map. The shadow
type of a struct_ops type is a variant of the original struct type
providing a way to access/change the values in the maps of the struct_ops
type.

bpf_map__initial_value() will return st_ops->data for struct_ops types. The
skeleton is going to use it as the pointer to the shadow type of the
original struct type.

One of the main differences between the original struct type and the shadow
type is that all function pointers of the shadow type are converted to
pointers of struct bpf_program. Users can replace these bpf_program
pointers with other BPF programs. The st_ops->progs[] will be updated
before updating the value of a map to reflect the changes made by users.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240229064523.2091270-3-thinker.li@gmail.com

  Parent Hashes: 3644d285462a60c80ac225d508fcfe705640d2b4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Convert struct_ops data to a shadow type allowing modified program pointers in libbpf.', 'keywords': 'libbpf,shadow,struct_ops', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3644d285462a60c80ac225d508fcfe705640d2b4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3644d285462a60c80ac225d508fcfe705640d2b4
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1709245432
  Commit Message:
    libbpf: Set btf_value_type_id of struct bpf_map for struct_ops.

For a struct_ops map
  Parent Hashes: 896880ff30866f386ebed14ab81ce1ad3710cfc4
  Refs:  btf_value_type_id is the type ID of it's struct
type. This value is required by bpftool to generate skeleton including
pointers of shadow types. The code generator gets the type ID from
bpf_map__btf_value_type_id() in order to get the type information of the
struct type of a map.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240229064523.2091270-2-thinker.li@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Set btf_value_type_id for struct_ops in bpf_map to enable bpftool skeleton generation.', 'keywords': 'libbpf,bpf_map,btf_value_type_id', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b44d66536859393772c67cb1da65345127f692e0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b44d66536859393772c67cb1da65345127f692e0
  Author Name: Namhyung Kim
  Author Email: namhyung@kernel.org
  Commit Date: 1709243636
  Commit Message:
    perf lock contention: Account contending locks too

Currently it accounts the contention using delta between timestamps in
lock:contention_begin and lock:contention_end tracepoints.  But it means
the lock should see the both events during the monitoring period.

Actually there are 4 cases that happen with the monitoring:

                monitoring period
            /                       \
            |                       |
 1:  B------+-----------------------+--------E
 2:    B----+-------------E         |
 3:         |           B-----------+----E
 4:         |     B-------------E   |
            |                       |
            t0                      t1

where B and E mean contention BEGIN and END
  Parent Hashes: 97b6b4ac1c5dd42a473a4f8e775d97476c5da038
  Refs:  respectively.  So it only
accounts the case 4 for now.  It seems there's no way to handle the case
1.  The case 2 might be handled if it saved the timestamp (t0)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance lock contention accounting by handling additional cases in the monitoring period.', 'keywords': 'lock,contention,accounting', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 896880ff30866f386ebed14ab81ce1ad3710cfc4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 896880ff30866f386ebed14ab81ce1ad3710cfc4
  Author Name: Kees Cook
  Author Email: keescook@chromium.org
  Commit Date: 1709243563
  Commit Message:
    bpf: Replace bpf_lpm_trie_key 0-length array with flexible array

Replace deprecated 0-length array in struct bpf_lpm_trie_key with
flexible array. Found with GCC 13:

../kernel/bpf/lpm_trie.c:207:51: warning: array subscript i is outside array bounds of 'const __u8[0]' {aka 'const unsigned char[]'} [-Warray-bounds=]
  207 |                                        *(__be16 *)&key->data[i]);
      |                                                   ^~~~~~~~~~~~~
../include/uapi/linux/swab.h:102:54: note: in definition of macro '__swab16'
  102 | #define __swab16(x) (__u16)__builtin_bswap16((__u16)(x))
      |                                                      ^
../include/linux/byteorder/generic.h:97:21: note: in expansion of macro '__be16_to_cpu'
   97 | #define be16_to_cpu __be16_to_cpu
      |                     ^~~~~~~~~~~~~
../kernel/bpf/lpm_trie.c:206:28: note: in expansion of macro 'be16_to_cpu'
  206 |                 u16 diff = be16_to_cpu(*(__be16 *)&node->data[i]
^
      |                            ^~~~~~~~~~~
In file included from ../include/linux/bpf.h:7:
../include/uapi/linux/bpf.h:82:17: note: while referencing 'data'
   82 |         __u8    data[0];        /* Arbitrary size */
      |                 ^~~~

And found at run-time under CONFIG_FORTIFY_SOURCE:

  UBSAN: array-index-out-of-bounds in kernel/bpf/lpm_trie.c:218:49
  index 0 is out of range for type '__u8 [*]'

Changing struct bpf_lpm_trie_key is difficult since has been used by
userspace. For example
  Parent Hashes: b9a62998482fa1488123f690bcacc26fd2351a18
  Refs:  in Cilium:

	struct egress_gw_policy_key {
	        struct bpf_lpm_trie_key lpm_key;
	        __u32 saddr;
	        __u32 daddr;
	};

While direct references to the "data" member haven't been found

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replaced deprecated 0-length array with a flexible array in bpf_lpm_trie_key to address GCC warnings and runtime issues.', 'keywords': 'flexible array, 0-length array, bpf_lpm_trie_key', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8f5afe41148ce6a719864e23c2bf776c88e9212f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8f5afe41148ce6a719864e23c2bf776c88e9212f
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1709226439
  Commit Message:
    Merge branch 'tls-a-few-more-fixes-for-async-decrypt'

Sabrina Dubroca says:

====================
tls: a few more fixes for async decrypt

The previous patchset [1] took care of "full async". This adds a few
fixes for cases where only part of the crypto operations go the async
route
  Parent Hashes: 616d82c3cfa2a2146dd7e3ae47bda7e877ee549e 13114dc5543069f7b97991e3b79937b6da05f5b0
  Refs:  found by extending my previous debug patch [2] to do N
synchronous operations followed by M asynchronous ops (with N and M
configurable).

[1] https://patchwork.kernel.org/project/netdevbpf/list/?series=823784&state=*
[2] https://lore.kernel.org/all/9d664093b1bf7f47497b2c40b3a085b45f3274a2.1694021240.git.sd@queasysnail.net/
====================

Link: https://lore.kernel.org/r/cover.1709132643.git.sd@queasysnail.net
Signed-off-by: Jakub Kicinski <kuba@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges several bug fixes for TLS asynchronous decryption pathways.', 'keywords': 'TLS, async, decrypt', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 616d82c3cfa2a2146dd7e3ae47bda7e877ee549e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 616d82c3cfa2a2146dd7e3ae47bda7e877ee549e
  Author Name: Alexander Ofitserov
  Author Email: oficerovas@altlinux.org
  Commit Date: 1709212458
  Commit Message:
    gtp: fix use-after-free and null-ptr-deref in gtp_newlink()

The gtp_link_ops operations structure for the subsystem must be
registered after registering the gtp_net_ops pernet operations structure.

Syzkaller hit 'general protection fault in gtp_genl_dump_pdp' bug:

[ 1010.702740] gtp: GTP module unloaded
[ 1010.715877] general protection fault
  Parent Hashes: b611b776a9c89a86e57ea6dbf8adfc99c6e8a62e
  Refs:  probably for non-canonical address 0xdffffc0000000001: 0000 [#1] SMP KASAN NOPTI
[ 1010.715888] KASAN: null-ptr-deref in range [0x0000000000000008-0x000000000000000f]
[ 1010.715895] CPU: 1 PID: 128616 Comm: a.out Not tainted 6.8.0-rc6-std-def-alt1 #1
[ 1010.715899] Hardware name: QEMU Standard PC (Q35 + ICH9

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix use-after-free and null-pointer dereference in gtp_newlink function registration sequence.', 'keywords': 'gtp, use-after-free, null-ptr-deref', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 7e0f122c65912740327e4c54472acaa5f85868cb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7e0f122c65912740327e4c54472acaa5f85868cb
  Author Name: Ignat Korchagin
  Author Email: ignat@cloudflare.com
  Commit Date: 1709160775
  Commit Message:
    netfilter: nf_tables: allow NFPROTO_INET in nft_(match/target)_validate()

Commit d0009effa886 ("netfilter: nf_tables: validate NFPROTO_* family") added
some validation of NFPROTO_* families in the nft_compat module
  Parent Hashes: 359e54a93ab43d32ee1bff3c2f9f10cb9f6b6e79
  Refs:  but it broke
the ability to use legacy iptables modules in dual-stack nftables.

While with legacy iptables one had to independently manage IPv4 and IPv6
tables

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix allows NFPROTO_INET use in nft_(match/target)_validate to support dual-stack nftables.', 'keywords': 'NFPROTO_INET, dual-stack, nftables', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: b9a62998482fa1488123f690bcacc26fd2351a18
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b9a62998482fa1488123f690bcacc26fd2351a18
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709156688
  Commit Message:
    Merge branch 'bpf-arm64-use-bpf-prog-pack-allocator-in-bpf-jit'

Puranjay Mohan says:

====================
bpf
  Parent Hashes: e59997d9052599feb17419289f2a57ed300e1dfa 1dad391daef129e01e28206b8d586608ff026548
  Refs:  arm64: use BPF prog pack allocator in BPF JIT

Changes in V8 => V9:
V8: https://lore.kernel.org/bpf/20240221145106.105995-1-puranjay12@gmail.com/
1. Rebased on bpf-next/master
2. Added Acked-by: Catalin Marinas <catalin.marinas@arm.com>

Changes in V7 => V8:
V7: https://lore.kernel.org/bpf/20240125133159.85086-1-puranjay12@gmail.com/
1. Rebase on bpf-next/master
2. Fix __text_poke() by removing usage of 'ret' that was never set.

Changes in V6 => V7:
V6: https://lore.kernel.org/all/20240124164917.119997-1-puranjay12@gmail.com/
1. Rebase on bpf-next/master.

Changes in V5 => V6:
V5: https://lore.kernel.org/all/20230908144320.2474-1-puranjay12@gmail.com/
1. Implement a text poke api to reduce code repeatition.
2. Use flush_icache_range() in place of caches_clean_inval_pou() in the
   functions that modify code.
3. Optimize the bpf_jit_free() by not copying the all instructions on
   the rw image to the ro_image

Changes in V4 => v5:
1. Remove the patch for making prog pack allocator portable as it will come
   through the RISCV tree[1].

2. Add a new function aarch64_insn_set() to be used in
   bpf_arch_text_invalidate() for putting illegal instructions after a
   program is removed. The earlier implementation of bpf_arch_text_invalidate()
   was calling aarch64_insn_patch_text_nosync() in a loop and making it slow
   because each call invalidated the cache.

   Here is test_tag now:
   [root@ip-172-31-6-176 bpf]# time ./test_tag
   test_tag: OK (40945 tests)

   real    0m19.695s
   user    0m1.514s
   sys     0m17.841s

   test_tag without these patches:
   [root@ip-172-31-6-176 bpf]# time ./test_tag
   test_tag: OK (40945 tests)

   real    0m21.487s
   user    0m1.647s
   sys     0m19.106s

   test_tag in the previous version was really slow > 2 minutes. see [2]

3. Add cache invalidation in aarch64_insn_copy() so other users can call the
   function without worrying about the cache. Currently only bpf_arch_text_copy()
   is using it

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit integrates BPF prog pack allocator into BPF JIT for arm64 to improve performance.', 'keywords': 'BPF JIT, allocator, arm64', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1dad391daef129e01e28206b8d586608ff026548
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1dad391daef129e01e28206b8d586608ff026548
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1709156687
  Commit Message:
    bpf
  Parent Hashes: 451c3cab9a65e656c3b3d106831fc02d56b8c34a
  Refs:  arm64: use bpf_prog_pack for memory management

Use bpf_jit_binary_pack_alloc for memory management of JIT binaries in
ARM64 BPF JIT. The bpf_jit_binary_pack_alloc creates a pair of RW and RX
buffers. The JIT writes the program into the RW buffer. When the JIT is
done

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces bpf_prog_pack for efficient memory management of JIT binaries in ARM64 BPF JIT.', 'keywords': 'bpf_prog_pack,JIT,ARM64', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e59997d9052599feb17419289f2a57ed300e1dfa
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e59997d9052599feb17419289f2a57ed300e1dfa
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1709070858
  Commit Message:
    Merge branch 'bpf-arm64-support-exceptions'

Puranjay Mohan says:

====================
bpf
  Parent Hashes: 2ab256e93249f5ac1da665861aa0f03fb4208d9c 22fc0e80aeb5c0c1377e6c02d7248f8fbf5df7fc
  Refs:  arm64: Support Exceptions

Changes in V2->V3:
V2: https://lore.kernel.org/all/20230917000045.56377-1-puranjay12@gmail.com/
- Use unwinder from stacktrace.c rather than open coding the unwind logic.
- Fix a bug in the prologue related to BPF_FP (Xu Kuohai)

Changes in V1->V2:
V1: https://lore.kernel.org/all/20230912233942.6734-1-puranjay12@gmail.com/
- Remove exceptions from DENYLIST.aarch64 as they are supported now.

The base support for exceptions was merged with [1] and it was enabled for
x86-64.

This patch set enables the support on ARM64

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable exception support for eBPF on ARM64 architecture.', 'keywords': 'ARM64, exceptions, support', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 22fc0e80aeb5c0c1377e6c02d7248f8fbf5df7fc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 22fc0e80aeb5c0c1377e6c02d7248f8fbf5df7fc
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1709070857
  Commit Message:
    bpf
  Parent Hashes: e74cb1b422131615a0fe3bedd4ab2e38b7442d10
  Refs:  arm64: support exceptions

The prologue generation code has been modified to make the callback
program use the stack of the program marked as exception boundary where
callee-saved registers are already pushed.

As the bpf_throw function never returns

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Modified prologue generation code to use stack of exception boundary programs for callbacks.', 'keywords': 'prologue,stack,exception', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e74cb1b422131615a0fe3bedd4ab2e38b7442d10
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e74cb1b422131615a0fe3bedd4ab2e38b7442d10
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1709070857
  Commit Message:
    arm64: stacktrace: Implement arch_bpf_stack_walk() for the BPF JIT

This will be used by bpf_throw() to unwind till the program marked as
exception boundary and run the callback with the stack of the main
program.

This is required for supporting BPF exceptions on ARM64.

Signed-off-by: Puranjay Mohan <puranjay12@gmail.com>
Acked-by: Catalin Marinas <catalin.marinas@arm.com>
Link: https://lore.kernel.org/r/20240201125225.72796-2-puranjay12@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 2ab256e93249f5ac1da665861aa0f03fb4208d9c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implement arch_bpf_stack_walk for ARM64 BPF JIT to support BPF exceptions.', 'keywords': 'ARM64,BPF JIT,stacktrace', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 529d5818a3bb0272ced031e022e4b41d6410a4da
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 529d5818a3bb0272ced031e022e4b41d6410a4da
  Author Name: Arnaldo Carvalho de Melo
  Author Email: acme@kernel.org
  Commit Date: 1708964168
  Commit Message:
    perf bpf: Check that the minimal vmlinux.h installed is the latest one

When building BPF skels perf will
  Parent Hashes: c2bd08ba20a57e0ed55777a9d1724647a0f53e88
  Refs:  by default

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Ensure the latest minimal vmlinux.h is checked when building BPF skeletons in perf.', 'keywords': 'perf,vmlinux,BPF', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2ab256e93249f5ac1da665861aa0f03fb4208d9c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2ab256e93249f5ac1da665861aa0f03fb4208d9c
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1708652933
  Commit Message:
    bpf: add is_async_callback_calling_insn() helper

Currently we have a special case for BPF_FUNC_timer_set_callback
  Parent Hashes: dfe6625df48ec54c6dc9b86d361f26962d09de88
  Refs: 
let's introduce a helper we can extend for the kfunc that will come in
a later patch

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240221-hid-bpf-sleepable-v3-3-1fb378ca6301@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add is_async_callback_calling_insn() helper to extend functionality for future kfuncs.', 'keywords': 'helper, kfunc, async', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: dfe6625df48ec54c6dc9b86d361f26962d09de88
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dfe6625df48ec54c6dc9b86d361f26962d09de88
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1708652835
  Commit Message:
    bpf: introduce in_sleepable() helper

No code change
  Parent Hashes: 55bad79e33aeb670317290158a4b2ff71cdc8380
  Refs:  but it'll allow to have only one place to change
everything when we add in_sleepable in cur_state.

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240221-hid-bpf-sleepable-v3-2-1fb378ca6301@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces the in_sleepable() helper function for eBPF.', 'keywords': 'in_sleepable, helper, eBPF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 55bad79e33aeb670317290158a4b2ff71cdc8380
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 55bad79e33aeb670317290158a4b2ff71cdc8380
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1708652543
  Commit Message:
    bpf: allow more maps in sleepable bpf programs

These 2 maps types are required for HID-BPF when a user wants to do
IO with a device from a sleepable tracing point.

Allowing BPF_MAP_TYPE_QUEUE (and therefore BPF_MAP_TYPE_STACK) allows
for a BPF program to prepare from an IRQ the list of HID commands to send
back to the device and then these commands can be retrieved from the
sleepable trace point.

Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>
Link: https://lore.kernel.org/r/20240221-hid-bpf-sleepable-v3-1-1fb378ca6301@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 63c7049ef9d642ab60bb1eccf75b29dc40277664
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable additional map types in sleepable BPF programs for HID interaction.', 'keywords': 'sleepable,HID,MAP_TYPE_QUEUE', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tracepoints like programs', 'HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 63c7049ef9d642ab60bb1eccf75b29dc40277664
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 63c7049ef9d642ab60bb1eccf75b29dc40277664
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1708633602
  Commit Message:
    Merge branch 'Check cfi_stubs before registering a struct_ops type.'

Kui-Feng Lee says:

====================
Recently
  Parent Hashes: 58fd62e0aa50fdd20bc41a01e787001f3af8a925 e9bbda13a7b876451285ab15fb600b809e5e2290
  Refs:  st_ops->cfi_stubs was introduced. However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges changes to check cfi_stubs before registering a struct_ops type.', 'keywords': 'cfi_stubs, struct_ops, merge', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e9bbda13a7b876451285ab15fb600b809e5e2290
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e9bbda13a7b876451285ab15fb600b809e5e2290
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1708633601
  Commit Message:
    selftests/bpf: Test case for lacking CFI stub functions.

Ensure struct_ops rejects the registration of struct_ops types without
proper CFI stub functions.

bpf_test_no_cfi.ko is a module that attempts to register a struct_ops type
called "bpf_test_no_cfi_ops" with cfi_stubs of NULL and non-NULL value.
The NULL one should fail
  Parent Hashes: 3e0008336ae3153fb89b1a15bb877ddd38680fe6
  Refs:  and the non-NULL one should succeed. The module
can only be loaded successfully if these registrations yield the expected
results.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240222021105.1180475-3-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test case for struct_ops registration with CFI stub function validation in selftests/bpf.', 'keywords': 'test case, struct_ops, CFI', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3e0008336ae3153fb89b1a15bb877ddd38680fe6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3e0008336ae3153fb89b1a15bb877ddd38680fe6
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1708633600
  Commit Message:
    bpf: Check cfi_stubs before registering a struct_ops type.

Recently
  Parent Hashes: 58fd62e0aa50fdd20bc41a01e787001f3af8a925
  Refs:  st_ops->cfi_stubs was introduced. However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit ensures cfi_stubs are checked before registering a struct_ops type in the BPF subsystem.', 'keywords': 'cfi_stubs, struct_ops, register', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0827a1fb143fae588cb6f5b9a97c405d6c2ddec9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0827a1fb143fae588cb6f5b9a97c405d6c2ddec9
  Author Name: Chengming Zhou
  Author Email: zhouchengming@bytedance.com
  Commit Date: 1708626294
  Commit Message:
    mm/zswap: invalidate zswap entry when swap entry free

During testing I found there are some times the zswap_writeback_entry()
return -ENOMEM
  Parent Hashes: f9c0f1c32cb568e16ef0676d8e7827a3ad443742
  Refs:  which is not we expected:

bpftrace -e 'kr:zswap_writeback_entry {@[(int32)retval]=count()}'
@[-12]: 1563
@[0]: 277221

The reason is that __read_swap_cache_async() return NULL because
swapcache_prepare() failed.  The reason is that we won't invalidate zswap
entry when swap entry freed to the per-cpu pool

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes an issue where zswap entries are not invalidated when swap entries are freed.', 'keywords': 'zswap, invalidate, swap', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: f9c0f1c32cb568e16ef0676d8e7827a3ad443742
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f9c0f1c32cb568e16ef0676d8e7827a3ad443742
  Author Name: Chengming Zhou
  Author Email: zhouchengming@bytedance.com
  Commit Date: 1708626294
  Commit Message:
    mm/zswap: add more comments in shrink_memcg_cb()

Patch series "mm/zswap: optimize zswap lru list"
  Parent Hashes: e374ae2be2f7cb4aad46e17e3fa5da7bbb0d2a09
  Refs:  v2.

This series is motivated when observe the zswap lru list shrinking

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added comments in shrink_memcg_cb() function related to zswap lru list.', 'keywords': 'comments, zswap, lru', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 58fd62e0aa50fdd20bc41a01e787001f3af8a925
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 58fd62e0aa50fdd20bc41a01e787001f3af8a925
  Author Name: Martin Kelly
  Author Email: martin.kelly@crowdstrike.com
  Commit Date: 1708626278
  Commit Message:
    bpf: Clarify batch lookup/lookup_and_delete semantics

The batch lookup and lookup_and_delete APIs have two parameters
  Parent Hashes: 89ee838130f470afcd02b30ca868f236a3f3b1d2
  Refs: 
in_batch and out_batch

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit clarifies the semantics of batch lookup and lookup_and_delete APIs in eBPF.', 'keywords': 'batch,lookup,APIs', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6714ebb922ab15a209dfc3c1ed29d4bb0abc9f02
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6714ebb922ab15a209dfc3c1ed29d4bb0abc9f02
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1708624678
  Commit Message:
    Merge tag 'net-6.8.0-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 "Including fixes from bpf and netfilter.

  Current release - regressions:

   - af_unix: fix another unix GC hangup

  Previous releases - regressions:

   - core: fix a possible AF_UNIX deadlock

   - bpf: fix NULL pointer dereference in sk_psock_verdict_data_ready()

   - netfilter: nft_flow_offload: release dst in case direct xmit path
     is used

   - bridge: switchdev: ensure MDB events are delivered exactly once

   - l2tp: pass correct message length to ip6_append_data

   - dccp/tcp: unhash sk from ehash for tb2 alloc failure after
     check_estalblished()

   - tls: fixes for record type handling with PEEK

   - devlink: fix possible use-after-free and memory leaks in
     devlink_init()

  Previous releases - always broken:

   - bpf: fix an oops when attempting to read the vsyscall page through
     bpf_probe_read_kernel

   - sched: act_mirred: use the backlog for mirred ingress

   - netfilter: nft_flow_offload: fix dst refcount underflow

   - ipv6: sr: fix possible use-after-free and null-ptr-deref

   - mptcp: fix several data races

   - phonet: take correct lock to peek at the RX queue

  Misc:

   - handful of fixes and reliability improvements for selftests"

* tag 'net-6.8.0-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (72 commits)
  l2tp: pass correct message length to ip6_append_data
  net: phy: realtek: Fix rtl8211f_config_init() for RTL8211F(D)(I)-VD-CG PHY
  selftests: ioam: refactoring to align with the fix
  Fix write to cloned skb in ipv6_hop_ioam()
  phonet/pep: fix racy skb_queue_empty() use
  phonet: take correct lock to peek at the RX queue
  net: sparx5: Add spinlock for frame transmission from CPU
  net/sched: flower: Add lock protection when remove filter handle
  devlink: fix port dump cmd type
  net: stmmac: Fix EST offset for dwmac 5.10
  tools: ynl: don't leak mcast_groups on init error
  tools: ynl: make sure we always pass yarg to mnl_cb_run
  net: mctp: put sock on tag allocation failure
  netfilter: nf_tables: use kzalloc for hook allocation
  netfilter: nf_tables: register hooks last when adding new chain/flowtable
  netfilter: nft_flow_offload: release dst in case direct xmit path is used
  netfilter: nft_flow_offload: reset dst in route object after setting up flow
  netfilter: nf_tables: set dormant flag on hook register failure
  selftests: tls: add test for peeking past a record of a different type
  selftests: tls: add test for merging of same-type control messages
  ...

  Parent Hashes: efa80dcbb7a3ecc4a1b2f54624c49b5a612f92b3 359e54a93ab43d32ee1bff3c2f9f10cb9f6b6e79
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge various networking and BPF-related fixes for current and previous Linux kernel releases.', 'keywords': 'networking,fixed,regressions', 'commit_classification': "It's a bug fix.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 89ee838130f470afcd02b30ca868f236a3f3b1d2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 89ee838130f470afcd02b30ca868f236a3f3b1d2
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1708621909
  Commit Message:
    bpf
  Parent Hashes: c1bb68f6b2f6be5297c5fbad5caebf67d0dd3034
  Refs:  docs: specify which BPF_ABS and BPF_IND fields were zero

Specifying which fields were unused allows IANA to only list as deprecated
instructions that were actually used

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit specifies unused BPF_ABS and BPF_IND fields allowing IANA to list deprecated instructions accurately.', 'keywords': 'BPF_ABS,BPF_IND,deprecated', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: c1bb68f6b2f6be5297c5fbad5caebf67d0dd3034
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c1bb68f6b2f6be5297c5fbad5caebf67d0dd3034
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1708621657
  Commit Message:
    bpf
  Parent Hashes: 8425b6eb51460ef429920b2ee7e2b0881d4e23c5
  Refs:  docs: Fix typos in instruction-set.rst

* "BPF ADD" should be "BPF_ADD".
* "src" should be "src_reg" in several places.  The latter is the field name
  in the instruction.  The former refers to the value of the register

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix typos in the eBPF instruction-set documentation regarding field names.', 'keywords': 'BPF_ADD,src_reg,typos', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8425b6eb51460ef429920b2ee7e2b0881d4e23c5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8425b6eb51460ef429920b2ee7e2b0881d4e23c5
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1708620375
  Commit Message:
    Merge branch 'selftests-bpf-reduce-tcp_custom_syncookie-verification-complexity'

Eduard Zingerman says:

====================
selftests/bpf: reduce tcp_custom_syncookie verification complexity

Thread [0] discusses a fix for bpf_loop() handling bug.
That change makes tcp_custom_syncookie test too complex to verify.
The fix discussed in [0] would be sent via 'bpf' tree
  Parent Hashes: a3c70a3cf11eb4b6409afc2cce1a3747e1dfe96f b546b57526953be2981113171ed586c4c50b1b0a
  Refs: 
tcp_custom_syncookie test is not in 'bpf' tree yet.
As agreed in [0] I'm sending syncookie test update separately.

[0] https://lore.kernel.org/bpf/20240216150334.31937-1-eddyz87@gmail.com/
====================

Link: https://lore.kernel.org/r/20240222150300.14909-1-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize the tcp_custom_syncookie test in selftests/bpf by reducing its verification complexity.', 'keywords': 'tcp_custom_syncookie, selftests, complexity', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: b546b57526953be2981113171ed586c4c50b1b0a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b546b57526953be2981113171ed586c4c50b1b0a
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1708620375
  Commit Message:
    selftests/bpf: update tcp_custom_syncookie to use scalar packet offset

This commit updates tcp_custom_syncookie.c:tcp_parse_option() to use
explicit packet offset (ctx->off) for packet access instead of ever
moving pointer (ctx->ptr)
  Parent Hashes: a3c70a3cf11eb4b6409afc2cce1a3747e1dfe96f
  Refs:  this reduces verification complexity:
- the tcp_parse_option() is passed as a callback to bpf_loop();
- suppose a checkpoint is created each time at function entry;
- the ctx->ptr is tracked by verifier as PTR_TO_PACKET;
- the ctx->ptr is incremented in tcp_parse_option()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates tcp_custom_syncookie to use scalar packet offset in tcp_parse_option for better verification.', 'keywords': 'selftests,bpf,offset', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: fdcd4467ba154465402432888f9ba9ad2122a37a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fdcd4467ba154465402432888f9ba9ad2122a37a
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1708592687
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-02-22

The following pull-request contains BPF updates for your *net* tree.

We've added 11 non-merge commits during the last 24 day(s) which contain
a total of 15 files changed
  Parent Hashes: 3489182b11d35f1944c1245fc9c4867cf622c50f 4cd12c6065dfcdeba10f49949bffcf383b3952d8
  Refs:  217 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge of BPF updates into the net tree with changes across 15 files and 217 insertions.', 'keywords': 'BPF, netdev, updates', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a3c70a3cf11eb4b6409afc2cce1a3747e1dfe96f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a3c70a3cf11eb4b6409afc2cce1a3747e1dfe96f
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1708552154
  Commit Message:
    bpf: Shrink size of struct bpf_map/bpf_array.

Back in 2018 the commit be95a845cc44 ("bpf: avoid false sharing of map refcount
with max_entries") added ____cacheline_aligned to "struct bpf_map" to make sure
that fields like refcnt don't share a cache line with max_entries that is used
to bounds check map access. That was done to make spectre style attacks harder.
The main mitigation is done via code similar to array_index_nospec()
  Parent Hashes: 01dbd7d8720a0cc97dad5e70ec674dacdc66cf3c
  Refs:  of course.
This was an additional precaution.

It increased the size of "struct bpf_map" a little

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit reduces the size of struct bpf_map and struct bpf_array to improve efficiency.', 'keywords': 'bpf_map,bpf_array,shrinking', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 01dbd7d8720a0cc97dad5e70ec674dacdc66cf3c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 01dbd7d8720a0cc97dad5e70ec674dacdc66cf3c
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1708552154
  Commit Message:
    selftests/bpf: Remove intermediate test files.

The test of linking process creates several intermediate files.
Remove them once the build is over.

This reduces the number of files in selftests/bpf/ directory
from ~4400 to ~2600.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240220231102.49090-1-alexei.starovoitov@gmail.com

  Parent Hashes: 7648f0c91eaa3598add9e91991a5483b29da32ee
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes intermediate test files in selftests/bpf to reduce directory clutter.', 'keywords': 'selftests, intermediate, files', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 4cd12c6065dfcdeba10f49949bffcf383b3952d8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4cd12c6065dfcdeba10f49949bffcf383b3952d8
  Author Name: Shigeru Yoshida
  Author Email: syoshida@redhat.com
  Commit Date: 1708532123
  Commit Message:
    bpf
  Parent Hashes: 5c138a8a4abe152fcbef1ed40a6a4b5727b2991b
  Refs:  sockmap: Fix NULL pointer dereference in sk_psock_verdict_data_ready()

syzbot reported the following NULL pointer dereference issue [1]:

  BUG: kernel NULL pointer dereference

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a NULL pointer dereference issue in sk_psock_verdict_data_ready().', 'keywords': 'NULL, pointer, dereference', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The syscall interface', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 56667da7399eb19af857e30f41bea89aa6fa812c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 56667da7399eb19af857e30f41bea89aa6fa812c
  Author Name: Eric Dumazet
  Author Email: edumazet@google.com
  Commit Date: 1708514660
  Commit Message:
    net: implement lockless setsockopt(SO_PEEK_OFF)

syzbot reported a lockdep violation [1] involving af_unix
support of SO_PEEK_OFF.

Since SO_PEEK_OFF is inherently not thread safe (it uses a per-socket
sk_peek_off field)
  Parent Hashes: 3b1ae9b71c2a97f848b00fb085a2bd29bddbe8d9
  Refs:  there is really no point to enforce a pointless
thread safety in the kernel.

After this patch :

- setsockopt(SO_PEEK_OFF) no longer acquires the socket lock.

- skb_consume_udp() no longer has to acquire the socket lock.

- af_unix no longer needs a special version of sk_set_peek_off()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implemented a lockless version of setsockopt for SO_PEEK_OFF to prevent a lockdep violation in af_unix.', 'keywords': 'lockless,setsockopt,SO_PEEK_OFF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['socket like programs', 'other']}
--------------------
--------------------
Processing Commit ID: 5d4cc87414c5d11345c4b11d61377d351b5c28a2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5d4cc87414c5d11345c4b11d61377d351b5c28a2
  Author Name: Eric Dumazet
  Author Email: edumazet@google.com
  Commit Date: 1708426905
  Commit Message:
    net: reorganize "struct sock" fields

Last major reorg happened in commit 9115e8cd2a0c ("net: reorganize
struct sock for better data locality")

Since then
  Parent Hashes: 465c1abcb64426f0ff39e80e508e2432672c2dae
  Refs:  many changes have been done.

Before SO_PEEK_OFF support is added to TCP

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Reorganize struct sock fields for better data locality.', 'keywords': 'reorganize, struct sock, data locality', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 5c138a8a4abe152fcbef1ed40a6a4b5727b2991b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5c138a8a4abe152fcbef1ed40a6a4b5727b2991b
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1708342095
  Commit Message:
    selftests/bpf: Add negtive test cases for task iter

Incorporate a test case to assess the handling of invalid flags or
task__nullable parameters passed to bpf_iter_task_new(). Prior to the
preceding commit
  Parent Hashes: 5f2ae606cb5a90839a9be9d22388c4200f820e75
  Refs:  this scenario could potentially trigger a kernel panic.
However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add negative test cases to bpf_iter_task_new to prevent kernel panics with invalid inputs.', 'keywords': 'negtive,test cases,task iter', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5f2ae606cb5a90839a9be9d22388c4200f820e75
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5f2ae606cb5a90839a9be9d22388c4200f820e75
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1708342095
  Commit Message:
    bpf: Fix an issue due to uninitialized bpf_iter_task

Failure to initialize it->pos
  Parent Hashes: 3f00e4a9c96f4488a924aff4e35b77c8eced897e
  Refs:  coupled with the presence of an invalid
value in the flags variable

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes an issue with uninitialized bpf_iter_task causing invalid values in flags.', 'keywords': 'bpf_iter_task,uninitialized,fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3f00e4a9c96f4488a924aff4e35b77c8eced897e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3f00e4a9c96f4488a924aff4e35b77c8eced897e
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1708342006
  Commit Message:
    selftests/bpf: Test racing between bpf_timer_cancel_and_free and bpf_timer_cancel

This selftest is based on a Alexei's test adopted from an internal
user to troubleshoot another bug. During this exercise
  Parent Hashes: 0281b919e175bb9c3128bd3872ac2903e9436e3f
  Refs:  a separate
racing bug was discovered between bpf_timer_cancel_and_free
and bpf_timer_cancel. The details can be found in the previous
patch.

This patch is to add a selftest that can trigger the bug.
I can trigger the UAF everytime in my qemu setup with KASAN. The idea
is to have multiple user space threads running in a tight loop to exercise
both bpf_map_update_elem (which calls into bpf_timer_cancel_and_free)
and bpf_timer_cancel.

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Hou Tao <houtao1@huawei.com>
Link: https://lore.kernel.org/bpf/20240215211218.990808-2-martin.lau@linux.dev


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest to detect race conditions between bpf_timer_cancel_and_free and bpf_timer_cancel.', 'keywords': 'selftest,race,bug', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0281b919e175bb9c3128bd3872ac2903e9436e3f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0281b919e175bb9c3128bd3872ac2903e9436e3f
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1708342006
  Commit Message:
    bpf: Fix racing between bpf_timer_cancel_and_free and bpf_timer_cancel

The following race is possible between bpf_timer_cancel_and_free
and bpf_timer_cancel. It will lead a UAF on the timer->timer.

bpf_timer_cancel();
	spin_lock();
	t = timer->time;
	spin_unlock();

					bpf_timer_cancel_and_free();
						spin_lock();
						t = timer->timer;
						timer->timer = NULL;
						spin_unlock();
						hrtimer_cancel(&t->timer);
						kfree(t);

	/* UAF on t */
	hrtimer_cancel(&t->timer);

In bpf_timer_cancel_and_free
  Parent Hashes: 54d46c9f581d16ac6adad3c3e61766e02bbfcb60
  Refs:  this patch frees the timer->timer
after a rcu grace period. This requires a rcu_head addition
to the "struct bpf_hrtimer". Another kfree(t) happens in bpf_timer_init

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix race condition in bpf_timer_cancel_and_free leading to use-after-free on timers.', 'keywords': 'bpf_timer,race condition,use-after-free', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: ac00b6546d390bc12d1d2824c2b5d95046097eb2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ac00b6546d390bc12d1d2824c2b5d95046097eb2
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1708186412
  Commit Message:
    Merge tag 'media/v6.8-4' of git://git.kernel.org/pub/scm/linux/kernel/git/mchehab/linux-media

Pull media fixes from Mauro Carvalho Chehab:

 - regression fix for rkisp1 shared IRQ logic

 - fix atomisp breakage due to a kAPI change

 - permission fix for remote controller BPF support

 - memleak fix in ir_toy driver

 - Kconfig dependency fix for pwm-ir-rx

* tag 'media/v6.8-4' of git://git.kernel.org/pub/scm/linux/kernel/git/mchehab/linux-media:
  media: pwm-ir-tx: Depend on CONFIG_HIGH_RES_TIMERS
  media: ir_toy: fix a memleak in irtoy_tx
  media: rc: bpf attach/detach requires write permission
  media: atomisp: Adjust for v4l2_subdev_state handling changes in 6.8
  media: rkisp1: Fix IRQ handling due to shared interrupts
  media: Revert "media: rkisp1: Drop IRQF_SHARED"

  Parent Hashes: 4a7571485c467b76cc19fae304452fd56921c789 346c84e281a963437b9fe9dfcd92c531630289de
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge media fixes including IRQ logic, kAPI changes, and memory leak corrections.', 'keywords': 'media, fixes, IRQ', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: bacefe0c7b77b7527a613e053b6d378412a8a779
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bacefe0c7b77b7527a613e053b6d378412a8a779
  Author Name: Namhyung Kim
  Author Email: namhyung@kernel.org
  Commit Date: 1708128448
  Commit Message:
    perf tools: Fixup module symbol end address properly

I got a strange error on ARM to fail on processing FINISHED_ROUND
record.  It turned out that it was failing in symbol__alloc_hist()
because the symbol size is too big.

When a sample is captured on a specific BPF program
  Parent Hashes: 6f146b249b3ada0082209b34abf01c90c702a96b
  Refs:  it failed.  I've
added a debug code and found the end address of the symbol is from
the next module which is placed far way.

  ffff800008795778-ffff80000879d6d8: bpf_prog_1bac53b8aac4bc58_netcg_sock    [bpf]
  ffff80000879d6d8-ffff80000ad656b4: bpf_prog_76867454b5944e15_netcg_getsockopt      [bpf]
  ffff80000ad656b4-ffffd69b7af74048: bpf_prog_1d50286d2eb1be85_hn_egress     [bpf]   <---------- here
  ffffd69b7af74048-ffffd69b7af74048: $x.5    [sha3_generic]
  ffffd69b7af74048-ffffd69b7af740b8: crypto_sha3_init        [sha3_generic]
  ffffd69b7af740b8-ffffd69b7af741e0: crypto_sha3_update      [sha3_generic]

The logic in symbols__fixup_end() just uses curr->start to update the
prev->end.  But in this case

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes end address calculation for module symbols in perf tools on ARM.', 'keywords': 'perf tools, symbol, ARM', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 29d16de26df17e94dd0310dc83c37f82b48a59cf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 29d16de26df17e94dd0310dc83c37f82b48a59cf
  Author Name: Arnaldo Carvalho de Melo
  Author Email: acme@kernel.org
  Commit Date: 1708125597
  Commit Message:
    perf augmented_raw_syscalls.bpf: Move 'struct timespec64' to vmlinux.h

If we instead decide to generate vmlinux.h from BTF info
  Parent Hashes: f512e08fd0940fcd811d24e2cfd95683fe8042c3
  Refs:  it will be
there:

  $ pahole timespec64
  struct timespec64 {
  	time64_t                   tv_sec;               /*     0     8 */
  	long int                   tv_nsec;              /*     8     8 */

  	/* size: 16

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Moved 'struct timespec64' definition to vmlinux.h in perf augmented_raw_syscalls.bpf.", 'keywords': 'timespec64,vmlinux.h,perf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 7648f0c91eaa3598add9e91991a5483b29da32ee
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7648f0c91eaa3598add9e91991a5483b29da32ee
  Author Name: Marcos Paulo de Souza
  Author Email: mpdesouza@suse.com
  Commit Date: 1708103306
  Commit Message:
    selftests/bpf: Remove empty TEST_CUSTOM_PROGS

Commit f04a32b2c5b5 ("selftests/bpf: Do not use sign-file as testcase")
removed the TEST_CUSTOM_PROGS assignment
  Parent Hashes: 682158ab532a5bd24399fec25b65fec561f0f6e9
  Refs:  and removed it from being used
on TEST_GEN_FILES. Remove two leftovers from that cleanup. Found by
inspection.

Signed-off-by: Marcos Paulo de Souza <mpdesouza@suse.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Cc: Alexey Gladkov <legion@kernel.org>
Link: https://lore.kernel.org/bpf/20240216-bpf-selftests-custom-progs-v1-1-f7cf281a1fda@suse.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes leftover entries relating to TEST_CUSTOM_PROGS in selftests for BPF.', 'keywords': 'selftests,bpf,cleanup', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 54d46c9f581d16ac6adad3c3e61766e02bbfcb60
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 54d46c9f581d16ac6adad3c3e61766e02bbfcb60
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1708053699
  Commit Message:
    Merge branch 'fix-the-read-of-vsyscall-page-through-bpf'

Hou Tao says:

====================
Fix the read of vsyscall page through bpf

From: Hou Tao <houtao1@huawei.com>

Hi
  Parent Hashes: e37243b65d528a8a9f8b9a57a43885f8e8dfc15c be66d79189ec8a1006ec6ec302bb27b160b3e6ce
  Refs: 

As reported by syzboot [1] and [2]

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes issue with reading the vsyscall page through BPF.', 'keywords': 'vsyscall, BPF, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: be66d79189ec8a1006ec6ec302bb27b160b3e6ce
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: be66d79189ec8a1006ec6ec302bb27b160b3e6ce
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1708053699
  Commit Message:
    selftest/bpf: Test the read of vsyscall page under x86-64

Under x86-64
  Parent Hashes: 32019c659ecfe1d92e3bf9fcdfbb11a7c70acd58
  Refs:  when using bpf_probe_read_kernel{_str}() or
bpf_probe_read{_str}() to read vsyscall page

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftest for reading vsyscall page using bpf_probe_read functions under x86-64 architecture.', 'keywords': 'selftest, vsyscall, bpf_probe_read', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 32019c659ecfe1d92e3bf9fcdfbb11a7c70acd58
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 32019c659ecfe1d92e3bf9fcdfbb11a7c70acd58
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1708053699
  Commit Message:
    x86/mm: Disallow vsyscall page read for copy_from_kernel_nofault()

When trying to use copy_from_kernel_nofault() to read vsyscall page
through a bpf program
  Parent Hashes: ee0e39a63b78849f8abbef268b13e4838569f646
  Refs:  the following oops was reported:

  BUG: unable to handle page fault for address: ffffffffff600000
  #PF: supervisor read access in kernel mode
  #PF: error_code(0x0000) - not-present page
  PGD 3231067 P4D 3231067 PUD 3233067 PMD 3235067 PTE 0
  Oops: 0000 [#1] PREEMPT SMP PTI
  CPU: 1 PID: 20390 Comm: test_progs ...... 6.7.0+ #58
  Hardware name: QEMU Standard PC (i440FX + PIIX

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit disallows reading the vsyscall page through copy_from_kernel_nofault() in x86/mm for bpf programs.', 'keywords': 'vsyscall,copy_from_kernel_nofault,page fault', 'commit_classification': "It's a security fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 682158ab532a5bd24399fec25b65fec561f0f6e9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 682158ab532a5bd24399fec25b65fec561f0f6e9
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1708033527
  Commit Message:
    bpf: Fix test verif_scale_strobemeta_subprogs failure due to llvm19

With latest llvm19
  Parent Hashes: 57354f5fdee8017783b5cc2e53b263641b6862e9
  Refs:  I hit the following selftest failures with

  $ ./test_progs -j
  libbpf: prog 'on_event': BPF program load failed: Permission denied
  libbpf: prog 'on_event': -- BEGIN PROG LOAD LOG --
  combined stack size of 4 calls is 544. Too large
  verification time 1344153 usec
  stack depth 24+440+0+32
  processed 51008 insns (limit 1000000) max_states_per_insn 19 total_states 1467 peak_states 303 mark_read 146
  -- END PROG LOAD LOG --
  libbpf: prog 'on_event': failed to load: -13
  libbpf: failed to load object 'strobemeta_subprogs.bpf.o'
  scale_test:FAIL:expect_success unexpected error: -13 (errno 13)
  #498     verif_scale_strobemeta_subprogs:FAIL

The verifier complains too big of the combined stack size (544 bytes) which
exceeds the maximum stack limit 512. This is a regression from llvm19 ([1]).

In the above error log

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes a test failure caused by exceeding stack size limit due to llvm19 regression.', 'keywords': 'fix, verifier, llvm19', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 57354f5fdee8017783b5cc2e53b263641b6862e9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 57354f5fdee8017783b5cc2e53b263641b6862e9
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1708030848
  Commit Message:
    bpf: improve duplicate source code line detection

Verifier log avoids printing the same source code line multiple times
when a consecutive block of BPF assembly instructions are covered by the
same original (C) source code line. This greatly improves verifier log
legibility.

Unfortunately
  Parent Hashes: a4561f5afef8a8ff25a2cfd46d587f65869494f2
  Refs:  this check is imperfect and in production applications it
quite often happens that verifier log will have multiple duplicated
source lines emitted

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improves detection of duplicate source code lines in eBPF verifier logs for better legibility.', 'keywords': 'duplicate detection logs', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a4561f5afef8a8ff25a2cfd46d587f65869494f2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a4561f5afef8a8ff25a2cfd46d587f65869494f2
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1707951222
  Commit Message:
    bpf: Use O(log(N)) binary search to find line info record

Real-world BPF applications keep growing in size. Medium-sized production
application can easily have 50K+ verified instructions
  Parent Hashes: 1159d27852207e8efb8d6ef2dae5aaa87ec4e225
  Refs:  and its line
info section in .BTF.ext has more than 3K entries.

When verifier emits log with log_level>=1

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit optimizes line info record lookup in bpf by implementing a binary search to improve performance.', 'keywords': 'binary search, line info, performance', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e3a9ee963ad8ba677ca925149812c5932b49af69
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e3a9ee963ad8ba677ca925149812c5932b49af69
  Author Name: Nathan Chancellor
  Author Email: nathan@kernel.org
  Commit Date: 1707947800
  Commit Message:
    kbuild: Fix changing ELF file type for output of gen_btf for big endian

Commit 90ceddcb4950 ("bpf: Support llvm-objcopy for vmlinux BTF")
changed the ELF type of .btf.vmlinux.bin.o to ET_REL via dd
  Parent Hashes: 6388cfd0e69b56ca640610f1bf29334619d18142
  Refs:  which works
fine for little endian platforms:

   00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
  -00000010  03 00 b7 00 01 00 00 00  00 00 00 80 00 80 ff ff  |................|
  +00000010  01 00 b7 00 01 00 00 00  00 00 00 80 00 80 ff ff  |................|

However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes an ELF file type change issue for big endian platforms in gen_btf output.', 'keywords': 'big endian, ELF file, gen_btf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1159d27852207e8efb8d6ef2dae5aaa87ec4e225
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1159d27852207e8efb8d6ef2dae5aaa87ec4e225
  Author Name: Matt Bobrowski
  Author Email: mattbobrowski@google.com
  Commit Date: 1707932926
  Commit Message:
    libbpf: Make remark about zero-initializing bpf_*_info structs

In some situations
  Parent Hashes: 7cc13adbd057f1905564ec2a254883d7fd407deb
  Refs:  if you fail to zero-initialize the
bpf_{prog

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses the necessity of zero-initializing bpf_info structs in the libbpf library.', 'keywords': 'zero-initializing,bpf_info,libbpf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e37243b65d528a8a9f8b9a57a43885f8e8dfc15c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e37243b65d528a8a9f8b9a57a43885f8e8dfc15c
  Author Name: Gianmarco Lusvardi
  Author Email: glusvardi@posteo.net
  Commit Date: 1707927048
  Commit Message:
    bpf
  Parent Hashes: 2127c604383666675789fd4a5fc2aead46c73aad
  Refs:  scripts: Correct GPL license name

The bpf_doc script refers to the GPL as the "GNU Privacy License".
I strongly suspect that the author wanted to refer to the GNU General
Public License

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Fix typo in bpf_doc script by correcting 'GNU Privacy License' to 'GNU General Public License'.", 'keywords': 'typo, GPL, correction', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 7cc13adbd057f1905564ec2a254883d7fd407deb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7cc13adbd057f1905564ec2a254883d7fd407deb
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1707879092
  Commit Message:
    bpf: emit source code file name and line number in verifier log

As BPF applications grow in size and complexity and are separated into
multiple .bpf.c files that are statically linked together
  Parent Hashes: 96adbf7125e49687e5c1dbd8a241c68e2441da98
  Refs:  it becomes
harder and harder to match verifier's BPF assembly level output to
original C code. While often annotated C source code is unique enough to
be able to identify the file it belongs to

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance verifier log with source file and line number for better code traceability in BPF applications.', 'keywords': 'verifier, source code, log', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 96adbf7125e49687e5c1dbd8a241c68e2441da98
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 96adbf7125e49687e5c1dbd8a241c68e2441da98
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1707878807
  Commit Message:
    Merge branch 'fix-global-subprog-ptr_to_ctx-arg-handling'

Andrii Nakryiko says:

====================
Fix global subprog PTR_TO_CTX arg handling

Fix confusing and incorrect inference of PTR_TO_CTX argument type in BPF
global subprogs. For some program types (iters
  Parent Hashes: 32e18e7688c6847b0c9db073aafb00639ecf576c 63d5a33fb4ec2a4ed6907c8ac144b6f10f6dba47
  Refs:  tracepoint

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes incorrect inference of PTR_TO_CTX argument type in BPF global subprograms.', 'keywords': 'PTR_TO_CTX,global subprog,fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 63d5a33fb4ec2a4ed6907c8ac144b6f10f6dba47
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 63d5a33fb4ec2a4ed6907c8ac144b6f10f6dba47
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1707878807
  Commit Message:
    selftests/bpf: add anonymous user struct as global subprog arg test

Add tests validating that kernel handles pointer to anonymous struct
argument as PTR_TO_MEM case
  Parent Hashes: 879bbe7aa4afa80acf72a1cad7f52416ea78c52d
  Refs:  not as PTR_TO_CTX case.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240212233221.2575350-5-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test case for handling anonymous struct pointers as PTR_TO_MEM in eBPF selftests.', 'keywords': 'anonymous, struct, test', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 879bbe7aa4afa80acf72a1cad7f52416ea78c52d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 879bbe7aa4afa80acf72a1cad7f52416ea78c52d
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1707878807
  Commit Message:
    bpf: don't infer PTR_TO_CTX for programs with unnamed context type

For program types that don't have named context type name (e.g.
  Parent Hashes: 824c58fb1090ae5e502284400682e30841280a87
  Refs:  BPF
iterator programs or tracepoint programs)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Prevent automatic inference of PTR_TO_CTX for eBPF programs with unnamed context types.', 'keywords': 'PTR_TO_CTX, unnamed context, programs', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['tracepoints like programs', "It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 824c58fb1090ae5e502284400682e30841280a87
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 824c58fb1090ae5e502284400682e30841280a87
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1707878807
  Commit Message:
    bpf: handle bpf_user_pt_regs_t typedef explicitly for PTR_TO_CTX global arg

Expected canonical argument type for global function arguments
representing PTR_TO_CTX is `bpf_user_pt_regs_t *ctx`. This currently
works on s390x by accident because kernel resolves such typedef to
underlying struct (which is anonymous on s390x)
  Parent Hashes: fb5b86cfd4ef21ea18966718f6bf6c8f1b9df12e
  Refs:  and erroneously
accepting it as expected context type. We are fixing this problem next

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed handling of bpf_user_pt_regs_t typedef for PTR_TO_CTX global argument to ensure proper context type recognition across architectures.', 'keywords': 'bpf typedef PTR_TO_CTX', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fb5b86cfd4ef21ea18966718f6bf6c8f1b9df12e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fb5b86cfd4ef21ea18966718f6bf6c8f1b9df12e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1707878806
  Commit Message:
    bpf: simplify btf_get_prog_ctx_type() into btf_is_prog_ctx_type()

Return result of btf_get_prog_ctx_type() is never used and callers only
check NULL vs non-NULL case to determine if given type matches expected
PTR_TO_CTX type. So rename function to `btf_is_prog_ctx_type()` and
return a simple true/false. We'll use this simpler interface to handle
kprobe program type's special typedef case in the next patch.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240212233221.2575350-2-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 32e18e7688c6847b0c9db073aafb00639ecf576c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactored btf_get_prog_ctx_type() to btf_is_prog_ctx_type() simplifying its interface for detecting PTR_TO_CTX types.', 'keywords': 'BTF,simplify,kprobe', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 32e18e7688c6847b0c9db073aafb00639ecf576c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 32e18e7688c6847b0c9db073aafb00639ecf576c
  Author Name: Oliver Crumrine
  Author Email: ozlinuxc@gmail.com
  Commit Date: 1707867677
  Commit Message:
    bpf: remove check in __cgroup_bpf_run_filter_skb

Originally
  Parent Hashes: 2c21a0f67c8ce334b8a58332e8c2d71694bef0ab
  Refs:  this patch removed a redundant check in
BPF_CGROUP_RUN_PROG_INET_EGRESS

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed a redundant check in BPF_CGROUP_RUN_PROG_INET_EGRESS function.', 'keywords': 'remove, redundant, cgroup', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 2c21a0f67c8ce334b8a58332e8c2d71694bef0ab
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2c21a0f67c8ce334b8a58332e8c2d71694bef0ab
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1707866204
  Commit Message:
    Merge branch 'Support PTR_MAYBE_NULL for struct_ops arguments.'

Kui-Feng Lee says:

====================
Allow passing null pointers to the operators provided by a struct_ops
object. This is an RFC to collect feedbacks/opinions.

The function pointers that are passed to struct_ops operators (the function
pointers) are always considered reliable until now. They cannot be
null. However
  Parent Hashes: dc8543b597c282643a433e9a8af0459ed3046908 00f239eccf461a6403b3c16e767d04f3954cae98
  Refs:  in certain scenarios

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit allows null pointers for struct_ops function arguments in certain scenarios.', 'keywords': 'null,pointers,struct_ops', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 00f239eccf461a6403b3c16e767d04f3954cae98
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 00f239eccf461a6403b3c16e767d04f3954cae98
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1707866204
  Commit Message:
    selftests/bpf: Test PTR_MAYBE_NULL arguments of struct_ops operators.

Test if the verifier verifies nullable pointer arguments correctly for BPF
struct_ops programs.

"test_maybe_null" in struct bpf_testmod_ops is the operator defined for the
test cases here.

A BPF program should check a pointer for NULL beforehand to access the
value pointed by the nullable pointer arguments
  Parent Hashes: 1611603537a4b88cec7993f32b70c03113801a46
  Refs:  or the verifier should
reject the programs. The test here includes two parts; the programs
checking pointers properly and the programs not checking pointers
beforehand. The test checks if the verifier accepts the programs checking
properly and rejects the programs not checking at all.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240209023750.1153905-5-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add tests for nullable pointer verification in BPF struct_ops programs.', 'keywords': 'selftests,bpf,nullable', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1611603537a4b88cec7993f32b70c03113801a46
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1611603537a4b88cec7993f32b70c03113801a46
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1707866204
  Commit Message:
    bpf: Create argument information for nullable arguments.

Collect argument information from the type information of stub functions to
mark arguments of BPF struct_ops programs with PTR_MAYBE_NULL if they are
nullable.  A nullable argument is annotated by suffixing "__nullable" at
the argument name of stub function.

For nullable arguments
  Parent Hashes: 6115a0aeef01aef152ad7738393aad11422bfb82
  Refs:  this patch sets a struct bpf_ctx_arg_aux to label
their reg_type with PTR_TO_BTF_ID | PTR_TRUSTED | PTR_MAYBE_NULL. This
makes the verifier to check programs and ensure that they properly check
the pointer. The programs should check if the pointer is null before
accessing the pointed memory.

The implementer of a struct_ops type should annotate the arguments that can
be null. The implementer should define a stub function (empty) as a
placeholder for each defined operator. The name of a stub function should
be in the pattern "<st_op_type>__<operator name>". For example

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds handling for nullable arguments in BPF struct_ops by marking them with PTR_MAYBE_NULL.', 'keywords': 'nullable, arguments, struct_ops', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6115a0aeef01aef152ad7738393aad11422bfb82
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6115a0aeef01aef152ad7738393aad11422bfb82
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1707866204
  Commit Message:
    bpf: Move __kfunc_param_match_suffix() to btf.c.

Move __kfunc_param_match_suffix() to btf.c and rename it as
btf_param_match_suffix(). It can be reused by bpf_struct_ops later.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240209023750.1153905-3-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 77c0208e199ccb0986fb3612f2409c8cdcb036ad
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The function __kfunc_param_match_suffix() is moved and renamed to btf_param_match_suffix() for reuse soon.', 'keywords': 'bpf,moved,reuse', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 77c0208e199ccb0986fb3612f2409c8cdcb036ad
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 77c0208e199ccb0986fb3612f2409c8cdcb036ad
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1707866204
  Commit Message:
    bpf: add btf pointer to struct bpf_ctx_arg_aux.

Enable the providers to use types defined in a module instead of in the
kernel (btf_vmlinux).

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240209023750.1153905-2-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: dc8543b597c282643a433e9a8af0459ed3046908
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add BTF pointer in struct bpf_ctx_arg_aux to enable use of module-defined types.', 'keywords': 'BTF, bpf_ctx_arg_aux, module', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: dc8543b597c282643a433e9a8af0459ed3046908
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dc8543b597c282643a433e9a8af0459ed3046908
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1707862455
  Commit Message:
    bpf
  Parent Hashes: 12bbcf8e840f40b82b02981e96e0a5fbb0703ea9
  Refs:  docs: Update ISA document title

* Use "Instruction Set Architecture (ISA)" instead of "Instruction Set
  Specification"
* Remove version number

As previously discussed on the mailing list at
https://mailarchive.ietf.org/arch/msg/bpf/SEpn3OL9TabNRn-4rDX9A6XVbjM/

Signed-off-by: Dave Thaler <dthaler1968@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: David Vernet <void@manifault.com>
Link: https://lore.kernel.org/bpf/20240208221449.12274-1-dthaler1968@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Updated the BPF ISA document by changing the title and removing the version number.', 'keywords': 'ISA, document, update', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 2127c604383666675789fd4a5fc2aead46c73aad
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2127c604383666675789fd4a5fc2aead46c73aad
  Author Name: Sebastian Andrzej Siewior
  Author Email: bigeasy@linutronix.de
  Commit Date: 1707862229
  Commit Message:
    xsk: Add truesize to skb_add_rx_frag().

xsk_build_skb() allocates a page and adds it to the skb via
skb_add_rx_frag() and specifies 0 for truesize. This leads to a warning
in skb_add_rx_frag() with CONFIG_DEBUG_NET enabled because size is
larger than truesize.

Increasing truesize requires to add the same amount to socket's
sk_wmem_alloc counter in order not to underflow the counter during
release in the destructor (sock_wfree()).

Pass the size of the allocated page as truesize to skb_add_rx_frag().
Add this mount to socket's sk_wmem_alloc counter.

Fixes: cf24f5a5feea ("xsk: add support for AF_XDP multi-buffer on Tx path")
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Link: https://lore.kernel.org/bpf/20240202163221.2488589-1-bigeasy@linutronix.de

  Parent Hashes: 11f522256e9043b0fcd2f994278645d3e201d20c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses a warning by adding truesize to skb_add_rx_frag and updating sk_wmem_alloc accordingly.', 'keywords': 'truesize, xsk, skb_add_rx_frag', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 12bbcf8e840f40b82b02981e96e0a5fbb0703ea9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 12bbcf8e840f40b82b02981e96e0a5fbb0703ea9
  Author Name: Cupertino Miranda
  Author Email: cupertino.miranda@oracle.com
  Commit Date: 1707852492
  Commit Message:
    libbpf: Add support to GCC in CORE macro definitions

Due to internal differences between LLVM and GCC the current
implementation for the CO-RE macros does not fit GCC parser
  Parent Hashes: 52dbd67dff5d050e99301100e2cac578eef9b2e9
  Refs:  as it will
optimize those expressions even before those would be accessible by the
BPF backend.

As examples

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for GCC in CO-RE macro definitions in libbpf.', 'keywords': 'GCC, CORE, libbpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 52dbd67dff5d050e99301100e2cac578eef9b2e9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 52dbd67dff5d050e99301100e2cac578eef9b2e9
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1707851850
  Commit Message:
    bpf: Abstract loop unrolling pragmas in BPF selftests

[Changes from V1:
- Avoid conflict by rebasing with latest master.]

Some BPF tests use loop unrolling compiler pragmas that are clang
specific and not supported by GCC.  These pragmas
  Parent Hashes: fc1c9e40da37905f87c73711a1ecc57f52c1fe1c
  Refs:  along with their
GCC equivalences are:

  #pragma clang loop unroll_count(N)
  #pragma GCC unroll N

  #pragma clang loop unroll(full)
  #pragma GCC unroll 65534

  #pragma clang loop unroll(disable)
  #pragma GCC unroll 1

  #pragma unroll [aka #pragma clang loop unroll(enable)]
  There is no GCC equivalence to this pragma.  It enables unrolling on
  loops that the compiler would not ordinarily unroll even with
  -O2|-funroll-loops

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Abstracts loop unrolling pragmas for BPF selftests to support both Clang and GCC compilers.', 'keywords': 'loop unrolling, BPF selftests, compilers', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 11f522256e9043b0fcd2f994278645d3e201d20c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 11f522256e9043b0fcd2f994278645d3e201d20c
  Author Name: Hari Bathini
  Author Email: hbathini@linux.ibm.com
  Commit Date: 1707851619
  Commit Message:
    bpf: Fix warning for bpf_cpumask in verifier

Compiling with CONFIG_BPF_SYSCALL & !CONFIG_BPF_JIT throws the below
warning:

  "WARN: resolve_btfids: unresolved symbol bpf_cpumask"

Fix it by adding the appropriate #ifdef.

Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Stanislav Fomichev <sdf@google.com>
Acked-by: David Vernet <void@manifault.com>
Link: https://lore.kernel.org/bpf/20240208100115.602172-1-hbathini@linux.ibm.com

  Parent Hashes: 577e4432f3ac810049cb7e6b71f4d96ec7c6e894
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix warning for unresolved symbol bpf_cpumask in the eBPF verifier using an appropriate #ifdef.', 'keywords': 'warning,bpf_cpumask,verifier', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fc1c9e40da37905f87c73711a1ecc57f52c1fe1c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fc1c9e40da37905f87c73711a1ecc57f52c1fe1c
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1707851485
  Commit Message:
    selftests/bpf: Ensure fentry prog cannot attach to bpf_spin_{lock
  Parent Hashes: 178c54666f9c4d2f49f2ea661d0c11b52f0ed190
  Refs: unlcok}()

Add two tests to ensure fentry programs cannot attach to
bpf_spin_{lock

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds tests to ensure fentry programs cannot attach to bpf_spin_lock functions.', 'keywords': 'fentry, bpf_spin_lock, tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 178c54666f9c4d2f49f2ea661d0c11b52f0ed190
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 178c54666f9c4d2f49f2ea661d0c11b52f0ed190
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1707851485
  Commit Message:
    bpf: Mark bpf_spin_{lock
  Parent Hashes: 5b268d1ebcdceacf992dfda8f9031d56005a274e
  Refs: unlock}() helpers with notrace correctly

Currently tracing is supposed not to allow for bpf_spin_{lock

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit correctly marks bpf_spin_{lock,unlock} helpers with notrace attribute.', 'keywords': 'bpf_spin_lock,helpers,notrace', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5b268d1ebcdceacf992dfda8f9031d56005a274e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5b268d1ebcdceacf992dfda8f9031d56005a274e
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1707851126
  Commit Message:
    bpf: Have bpf_rdonly_cast() take a const pointer

Since 20d59ee55172 ("libbpf: add bpf_core_cast() macro")
  Parent Hashes: 68bc61c26cacf152baf905786b5949769700f40d
  Refs:  libbpf is now
exporting a const arg version of bpf_rdonly_cast(). This causes the
following conflicting type error when generating kfunc prototypes from
BTF:

In file included from skeleton/pid_iter.bpf.c:5:
/home/dxu/dev/linux/tools/bpf/bpftool/bootstrap/libbpf/include/bpf/bpf_core_read.h:297:14: error: conflicting types for 'bpf_rdonly_cast'
extern void *bpf_rdonly_cast(const void *obj__ign

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies bpf_rdonly_cast function to accept a constant pointer for compatibility with libbpf changes.', 'keywords': 'bpf,rdonly_cast,const', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ed94a8f8ca75ea0f607c919edf2ed5a5e707ef44
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ed94a8f8ca75ea0f607c919edf2ed5a5e707ef44
  Author Name: Jiri Slaby (SUSE)
  Author Email: jirislaby@kernel.org
  Commit Date: 1707821035
  Commit Message:
    HID: protect hid_device::bpf by CONFIG_HID_BPF

And not by CONFIG_BPF. BPF can be selected while HID_BPF does not have
to. It actually cannot be on some platforms due to Kconfig dependences.

This saves quite some bytes on those setups.

Found by https://github.com/jirislaby/clang-struct.

Signed-off-by: Jiri Slaby (SUSE) <jirislaby@kernel.org>
Cc: Jiri Kosina <jikos@kernel.org>
Cc: Benjamin Tissoires <benjamin.tissoires@redhat.com>
Signed-off-by: Jiri Kosina <jkosina@suse.com>

  Parent Hashes: dcd5231f093b6cd8ea2015e7fe1f372cef5c643d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies HID device configuration dependency to use CONFIG_HID_BPF instead of CONFIG_BPF.', 'keywords': 'HID, CONFIG_HID_BPF, configuration', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 923e4616ec15b7feabdc353b229762069eb73c43
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 923e4616ec15b7feabdc353b229762069eb73c43
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1707770141
  Commit Message:
    perf maps: Locking tidy up of nr_maps

After this change maps__nr_maps is only used by tests
  Parent Hashes: ff0bd79980fffa00c36eb2b9044dbe9cfdf4bb79
  Refs:  existing users
are migrated to maps__empty. Compute maps__empty under the read lock.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: K Prateek Nayak <kprateek.nayak@amd.com>
Cc: James Clark <james.clark@arm.com>
Cc: Vincent Whitchurch <vincent.whitchurch@axis.com>
Cc: Alexey Dobriyan <adobriyan@gmail.com>
Cc: Colin Ian King <colin.i.king@gmail.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Song Liu <song@kernel.org>
Cc: Leo Yan <leo.yan@linux.dev>
Cc: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Cc: Liam Howlett <liam.howlett@oracle.com>
Cc: Artem Savkov <asavkov@redhat.com>
Cc: bpf@vger.kernel.org
Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: https://lore.kernel.org/r/20240210031746.4057262-7-irogers@google.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit tidies up locking of nr_maps, migrating users to maps__empty under a read lock, used only by tests.', 'keywords': 'locking, maps, read-lock', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: ff0bd79980fffa00c36eb2b9044dbe9cfdf4bb79
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ff0bd79980fffa00c36eb2b9044dbe9cfdf4bb79
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1707770141
  Commit Message:
    perf maps: Hide maps internals

Move the struct into the C file. Add maps__equal to work around
exposing the struct for reference count checking. Add accessors for
the unwind_libunwind_ops. Move maps_list_node to its only use in
symbol.c.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: K Prateek Nayak <kprateek.nayak@amd.com>
Cc: James Clark <james.clark@arm.com>
Cc: Vincent Whitchurch <vincent.whitchurch@axis.com>
Cc: Alexey Dobriyan <adobriyan@gmail.com>
Cc: Colin Ian King <colin.i.king@gmail.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Song Liu <song@kernel.org>
Cc: Leo Yan <leo.yan@linux.dev>
Cc: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Cc: Liam Howlett <liam.howlett@oracle.com>
Cc: Artem Savkov <asavkov@redhat.com>
Cc: bpf@vger.kernel.org
Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: https://lore.kernel.org/r/20240210031746.4057262-6-irogers@google.com

  Parent Hashes: 39a27325e6099e9f9a10d8b5f3b2470a3c10efa5
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor the perf map internals by moving structs, adding workarounds and accessors, and relocating specific elements to improve encapsulation.', 'keywords': 'perf maps, structures, encapsulation', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 39a27325e6099e9f9a10d8b5f3b2470a3c10efa5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 39a27325e6099e9f9a10d8b5f3b2470a3c10efa5
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1707770141
  Commit Message:
    perf maps: Get map before returning in maps__find_next_entry

Finding a map is done under a lock
  Parent Hashes: 107ef66cb054f8d54e336236a31631a8cc167c1f
  Refs:  returning the map without a
reference count means it can be removed without notice and causing
uses after free. Grab a reference count to the map within the lock
region and return this. Fix up locations that need a map__put
following this.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: K Prateek Nayak <kprateek.nayak@amd.com>
Cc: James Clark <james.clark@arm.com>
Cc: Vincent Whitchurch <vincent.whitchurch@axis.com>
Cc: Alexey Dobriyan <adobriyan@gmail.com>
Cc: Colin Ian King <colin.i.king@gmail.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Song Liu <song@kernel.org>
Cc: Leo Yan <leo.yan@linux.dev>
Cc: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Cc: Liam Howlett <liam.howlett@oracle.com>
Cc: Artem Savkov <asavkov@redhat.com>
Cc: bpf@vger.kernel.org
Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: https://lore.kernel.org/r/20240210031746.4057262-5-irogers@google.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Acquire map reference count within lock to prevent use-after-free in maps__find_next_entry.', 'keywords': 'map lock reference', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 107ef66cb054f8d54e336236a31631a8cc167c1f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 107ef66cb054f8d54e336236a31631a8cc167c1f
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1707770133
  Commit Message:
    perf maps: Get map before returning in maps__find_by_name

Finding a map is done under a lock
  Parent Hashes: 42fd623b58dbcc48310705bbf3e3d4d7c1deec29
  Refs:  returning the map without a
reference count means it can be removed without notice and causing
uses after free. Grab a reference count to the map within the lock
region and return this. Fix up locations that need a map__put
following this. Also fix some reference counted pointer comparisons.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: K Prateek Nayak <kprateek.nayak@amd.com>
Cc: James Clark <james.clark@arm.com>
Cc: Vincent Whitchurch <vincent.whitchurch@axis.com>
Cc: Alexey Dobriyan <adobriyan@gmail.com>
Cc: Colin Ian King <colin.i.king@gmail.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Song Liu <song@kernel.org>
Cc: Leo Yan <leo.yan@linux.dev>
Cc: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Cc: Liam Howlett <liam.howlett@oracle.com>
Cc: Artem Savkov <asavkov@redhat.com>
Cc: bpf@vger.kernel.org
Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: https://lore.kernel.org/r/20240210031746.4057262-4-irogers@google.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix potential use after free in perf maps by ensuring reference count manipulation within lock.', 'keywords': 'perf maps,reference count,lock', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 42fd623b58dbcc48310705bbf3e3d4d7c1deec29
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 42fd623b58dbcc48310705bbf3e3d4d7c1deec29
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1707770126
  Commit Message:
    perf maps: Get map before returning in maps__find

Finding a map is done under a lock
  Parent Hashes: 659ad3492b913c9033d47cb406ac5754780875b6
  Refs:  returning the map without a
reference count means it can be removed without notice and causing
uses after free. Grab a reference count to the map within the lock
region and return this. Fix up locations that need a map__put
following this.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: K Prateek Nayak <kprateek.nayak@amd.com>
Cc: James Clark <james.clark@arm.com>
Cc: Vincent Whitchurch <vincent.whitchurch@axis.com>
Cc: Alexey Dobriyan <adobriyan@gmail.com>
Cc: Colin Ian King <colin.i.king@gmail.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Song Liu <song@kernel.org>
Cc: Leo Yan <leo.yan@linux.dev>
Cc: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Cc: Liam Howlett <liam.howlett@oracle.com>
Cc: Artem Savkov <asavkov@redhat.com>
Cc: bpf@vger.kernel.org
Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: https://lore.kernel.org/r/20240210031746.4057262-3-irogers@google.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes use-after-free by managing reference counts for maps in perf maps.', 'keywords': 'perf maps, reference count, use-after-free', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 659ad3492b913c9033d47cb406ac5754780875b6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 659ad3492b913c9033d47cb406ac5754780875b6
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1707770114
  Commit Message:
    perf maps: Switch from rbtree to lazily sorted array for addresses

Maps is a collection of maps primarily sorted by the starting address
of the map. Prior to this change the maps were held in an rbtree
requiring 4 pointers per node. Prior to reference count checking
  Parent Hashes: 39d14c0dd650f3de62242c2f92fb4d7a0ec3386a
  Refs:  the
rbnode was embedded in the map so 3 pointers per node were
necessary. This change switches the rbtree to an array lazily sorted
by address

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit switches perf maps from using an rbtree to a lazily sorted array for better memory efficiency.', 'keywords': 'perf maps,rbtree,lazily sorted array', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 68bc61c26cacf152baf905786b5949769700f40d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 68bc61c26cacf152baf905786b5949769700f40d
  Author Name: Marco Elver
  Author Email: elver@google.com
  Commit Date: 1707689184
  Commit Message:
    bpf: Allow compiler to inline most of bpf_local_storage_lookup()

In various performance profiles of kernels with BPF programs attached
  Parent Hashes: a7170d81e0002345576b5f87a5890d91bc06c106
  Refs: 
bpf_local_storage_lookup() appears as a significant portion of CPU
cycles spent. To enable the compiler generate more optimal code

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable compiler to inline bpf_local_storage_lookup() for improved performance in BPF programs.', 'keywords': 'compiler,inlining,performance', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d27553c14f06f4db61cb9ddaf88e8d4df91d740c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d27553c14f06f4db61cb9ddaf88e8d4df91d740c
  Author Name: Jinjian Song
  Author Email: jinjian.song@fibocom.com
  Commit Date: 1707480468
  Commit Message:
    net: wwan: t7xx: Infrastructure for early port configuration

To support cases such as FW update or Core dump
  Parent Hashes: 409c38d4f156740bf3165fd6ceae4fa6425eebf4
  Refs:  the t7xx
device is capable of signaling the host that a special port
needs to be created before the handshake phase.

Adds the infrastructure required to create the early ports
which also requires a different configuration of CLDMA queues.

Base on the v5 patch version of follow series:
'net: wwan: t7xx: fw flashing & coredump support'
(https://patchwork.kernel.org/project/netdevbpf/patch/3777bb382f4b0395cb594a602c5c79dbab86c9e0.1674307425.git.m.chetan.kumar@linux.intel.com/)

Signed-off-by: Jinjian Song <jinjian.song@fibocom.com>
Signed-off-by: David S. Miller <davem@davemloft.net>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds early port infrastructure for t7xx device in network subsystem, supporting firmware updates and core dumps.', 'keywords': 'early port infrastructure, firmware update, core dump', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: a7170d81e0002345576b5f87a5890d91bc06c106
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a7170d81e0002345576b5f87a5890d91bc06c106
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1707421218
  Commit Message:
    Merge branch 'bpf
  Parent Hashes: e55dad12abe42383b68ba88212eb3d0fba0e9820 947e56f82fd783a1ec1c9359b20b5699d09cae14
  Refs:  btf: Add DEBUG_INFO_BTF checks for __register_bpf_struct_ops'

Geliang Tang says:

====================
bpf: Add DEBUG_INFO_BTF checks for __register_bpf_struct_ops

This patch set avoids module loading failure when the module
trying to register a struct_ops and the module has its btf section
stripped. This will then work similarly as module kfunc registration in
commit 3de4d22cc9ac ("bpf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix module loading issues by adding DEBUG_INFO_BTF checks for struct_ops registration in eBPF.', 'keywords': 'DEBUG_INFO_BTF, struct_ops, module', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 947e56f82fd783a1ec1c9359b20b5699d09cae14
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 947e56f82fd783a1ec1c9359b20b5699d09cae14
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1707421069
  Commit Message:
    bpf
  Parent Hashes: 9e60b0e02550aaf5f2301e49353641a5e3701674
  Refs:  btf: Check btf for register_bpf_struct_ops

Similar to the handling in the functions __register_btf_kfunc_id_set()
and register_btf_id_dtor_kfuncs()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add btf check for register_bpf_struct_ops aligning with similar btf use in registration functions.', 'keywords': 'btf, register, struct_ops', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9e60b0e02550aaf5f2301e49353641a5e3701674
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9e60b0e02550aaf5f2301e49353641a5e3701674
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1707420176
  Commit Message:
    bpf
  Parent Hashes: b9a395f0f7af66fe8224450481b99d4f83b57207
  Refs:  btf: Add check_btf_kconfigs helper

This patch extracts duplicate code on error path when btf_get_module_btf()
returns NULL from the functions __register_btf_kfunc_id_set() and
register_btf_id_dtor_kfuncs() into a new helper named check_btf_kconfigs()
to check CONFIG_DEBUG_INFO_BTF and CONFIG_DEBUG_INFO_BTF_MODULES in it.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/r/fa5537fc55f1e4d0bfd686598c81b7ab9dbd82b7.1707373307.git.tanggeliang@kylinos.cn
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor error handling with check_btf_kconfigs helper for BTF module support.', 'keywords': 'duplicated, error, helper', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b9a395f0f7af66fe8224450481b99d4f83b57207
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b9a395f0f7af66fe8224450481b99d4f83b57207
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1707419107
  Commit Message:
    bpf
  Parent Hashes: e55dad12abe42383b68ba88212eb3d0fba0e9820
  Refs:  btf: Fix return value of register_btf_id_dtor_kfuncs

The same as __register_btf_kfunc_id_set()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes the return value handling for BTF ID destructor kfuncs registration in BPF.', 'keywords': 'BTF, return value, kfuncs', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 03fa49a386b298d357b90c9c5599f8d00dfc425c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 03fa49a386b298d357b90c9c5599f8d00dfc425c
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1707388402
  Commit Message:
    Merge branch 'cpsw-enable-mac_managed_pm-to-fix-mdio'

Sinthu Raja says:

====================
CPSW: enable mac_managed_pm to fix mdio

This patch fix the resume/suspend issue on CPSW interface.

Reference from the foloowing patchwork:
https://lore.kernel.org/netdev/20221014144729.1159257-2-shenwei.wang@nxp.com/T/

V1: https://patchwork.kernel.org/project/netdevbpf/patch/20240122083414.6246-1-sinthu.raja@ti.com/
V2: https://patchwork.kernel.org/project/netdevbpf/patch/20240122093326.7618-1-sinthu.raja@ti.com/
====================

Link: https://lore.kernel.org/r/20240206005928.15703-1-sinthu.raja@ti.com
Signed-off-by: Paolo Abeni <pabeni@redhat.com>

  Parent Hashes: 335bac1daae3fd9070d0f9f34d7d7ba708729256 bc4ce46b1e3d1da4309405cd4afc7c0fcddd0b90
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix resume/suspend issue on CPSW interface by enabling mac_managed_pm.', 'keywords': 'CPSW,mac_managed_pm,MDIO', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 79d72c68c58784a3e1cd2378669d51bfd0cb7498
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 79d72c68c58784a3e1cd2378669d51bfd0cb7498
  Author Name: Oscar Salvador
  Author Email: osalvador@suse.de
  Commit Date: 1707369636
  Commit Message:
    fs
  Parent Hashes: f2076032096775d1bb1af16b6eddbc6534575328
  Refs: hugetlb: fix NULL pointer dereference in hugetlbs_fill_super

When configuring a hugetlb filesystem via the fsconfig() syscall

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix a NULL pointer dereference in hugetlb filesystem configuration using fsconfig() syscall.', 'keywords': 'NULL pointer, hugetlb, fsconfig', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e55dad12abe42383b68ba88212eb3d0fba0e9820
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e55dad12abe42383b68ba88212eb3d0fba0e9820
  Author Name: Masahiro Yamada
  Author Email: masahiroy@kernel.org
  Commit Date: 1707352700
  Commit Message:
    bpf: Merge two CONFIG_BPF entries

'config BPF' exists in both init/Kconfig and kernel/bpf/Kconfig.

Commit b24abcff918a ("bpf
  Parent Hashes: ba6a6abb3bfa8377bcf386a11077c0533909f9e8
  Refs:  kconfig: Add consolidated menu entry for bpf
with core options") added the second one to kernel/bpf/Kconfig instead
of moving the existing one.

Merge them together.

Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240204075634.32969-1-masahiroy@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge two CONFIG_BPF entries from init/Kconfig and kernel/bpf/Kconfig into one.', 'keywords': 'CONFIG_BPF,Kconfig,merge', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: ba6a6abb3bfa8377bcf386a11077c0533909f9e8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ba6a6abb3bfa8377bcf386a11077c0533909f9e8
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1707351259
  Commit Message:
    selftests/bpf: Mark cpumask kfunc declarations as __weak

After the series "Annotate kfuncs in .BTF_ids section"[0]
  Parent Hashes: a2bff65cfca93f0fe4c5996f55ce8f413e85e4fe
  Refs:  kfuncs can be
generated from bpftool. Let's mark the existing cpumask kfunc declarations
__weak so they don't conflict with definitions that will eventually come
from vmlinux.h.

[0]. https://lore.kernel.org/all/cover.1706491398.git.dxu@dxuuu.xyz

Suggested-by: Andrii Nakryiko <andrii.nakryiko@gmail.com>
Signed-off-by: Yafang Shao <laoar.shao@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/bpf/20240206081416.26242-5-laoar.shao@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Mark cpumask kfunc declarations as __weak to avoid conflicts with future vmlinux.h definitions.', 'keywords': 'cpumask,kfunc,weak', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a2bff65cfca93f0fe4c5996f55ce8f413e85e4fe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a2bff65cfca93f0fe4c5996f55ce8f413e85e4fe
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1707351259
  Commit Message:
    selftests/bpf: Fix error checking for cpumask_success__load()

We should verify the return value of cpumask_success__load().

Signed-off-by: Yafang Shao <laoar.shao@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240206081416.26242-4-laoar.shao@gmail.com

  Parent Hashes: abae1ac5231e56ecc3932f83f2de13701070803a
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added error checking for cpumask_success__load() in the selftests/bpf tests.', 'keywords': 'error checking,selftests,bpf', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: abae1ac5231e56ecc3932f83f2de13701070803a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: abae1ac5231e56ecc3932f83f2de13701070803a
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1707350178
  Commit Message:
    Merge branch 'tools-resolve_btfids-fix-cross-compilation-to-non-host-endianness'

Viktor Malik says:

====================
tools/resolve_btfids: fix cross-compilation to non-host endianness

The .BTF_ids section is pre-filled with zeroed BTF ID entries during the
build and afterwards patched by resolve_btfids with correct values.
Since resolve_btfids always writes in host-native endianness
  Parent Hashes: 92a871ab9fa59a74d013bc04f321026a057618e7 903fad4394666bc23975c93fb58f137ce64b5192
  Refs:  it relies
on libelf to do the translation when the target ELF is cross-compiled to
a different endianness (this was introduced in commit 61e8aeda9398
("bpf: Fix libelf endian handling in resolv_btfids")).

Unfortunately

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes cross-compilation of BTF ID entries in non-host endianness.', 'keywords': 'cross-compilation,BTF,endianness', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 903fad4394666bc23975c93fb58f137ce64b5192
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 903fad4394666bc23975c93fb58f137ce64b5192
  Author Name: Viktor Malik
  Author Email: vmalik@redhat.com
  Commit Date: 1707350178
  Commit Message:
    tools/resolve_btfids: Fix cross-compilation to non-host endianness

The .BTF_ids section is pre-filled with zeroed BTF ID entries during the
build and afterwards patched by resolve_btfids with correct values.
Since resolve_btfids always writes in host-native endianness
  Parent Hashes: 9707ac4fe2f5bac6406d2403f8b8a64d7b3d8e43
  Refs:  it relies
on libelf to do the translation when the target ELF is cross-compiled to
a different endianness (this was introduced in commit 61e8aeda9398
("bpf: Fix libelf endian handling in resolv_btfids")).

Unfortunately

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes cross-compilation issue in resolve_btfids for non-host endianness by correcting BTF ID entry handling.', 'keywords': 'cross-compilation,endian,BTF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9707ac4fe2f5bac6406d2403f8b8a64d7b3d8e43
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9707ac4fe2f5bac6406d2403f8b8a64d7b3d8e43
  Author Name: Viktor Malik
  Author Email: vmalik@redhat.com
  Commit Date: 1707350178
  Commit Message:
    tools/resolve_btfids: Refactor set sorting with types from btf_ids.h

Instead of using magic offsets to access BTF ID set data
  Parent Hashes: 92a871ab9fa59a74d013bc04f321026a057618e7
  Refs:  leverage types
from btf_ids.h (btf_id_set and btf_id_set8) which define the actual
layout of the data. Thanks to this change

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor tools/resolve_btfids to use type definitions from btf_ids.h for set sorting.', 'keywords': 'refactor,BTF ID,tools', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 92a871ab9fa59a74d013bc04f321026a057618e7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 92a871ab9fa59a74d013bc04f321026a057618e7
  Author Name: Toke Høiland-Jørgensen
  Author Email: toke@redhat.com
  Commit Date: 1707241886
  Commit Message:
    libbpf: Use OPTS_SET() macro in bpf_xdp_query()

When the feature_flags and xdp_zc_max_segs fields were added to the libbpf
bpf_xdp_query_opts
  Parent Hashes: c27aa462aa78ff157fdda222af242e4571803d4a
  Refs:  the code writing them did not use the OPTS_SET() macro.
This causes libbpf to write to those fields unconditionally

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit updates libbpf's bpf_xdp_query function to use the OPTS_SET() macro for feature_flags and xdp_zc_max_segs fields.", 'keywords': 'libbpf, OPTS_SET, bpf_xdp_query', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: c27aa462aa78ff157fdda222af242e4571803d4a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c27aa462aa78ff157fdda222af242e4571803d4a
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1707241225
  Commit Message:
    bpf: Use -Wno-address-of-packed-member in some selftests

[Differences from V2:
- Remove conditionals in the source files pragmas
  Parent Hashes: 563918a0e3afd97bcfb680b72c52ec080c82aea6
  Refs:  as the
  pragma is supported by both GCC and clang.]

Both GCC and clang implement the -Wno-address-of-packed-member
warning

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Suppress the address-of-packed-member warning in certain BPF selftests using specific compiler flags.', 'keywords': 'compiler, selftests, warning', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 563918a0e3afd97bcfb680b72c52ec080c82aea6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 563918a0e3afd97bcfb680b72c52ec080c82aea6
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1707234299
  Commit Message:
    bpf
  Parent Hashes: c7dcb6c9aa85fa310251dad7e233eb955a5235ed
  Refs:  docs: Fix typos in instructions-set.rst

* "imm32" should just be "imm"
* Add blank line to fix formatting error reported by Stephen Rothwell [0]

[0]: https://lore.kernel.org/bpf/20240206153301.4ead0bad@canb.auug.org.au/T/#u

Signed-off-by: Dave Thaler <dthaler1968@gmail.com>
Acked-by: David Vernet <void@manifault.com>
Link: https://lore.kernel.org/r/20240206045146.4965-1-dthaler1968@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix typos and formatting errors in BPF documentation files.', 'keywords': 'typos, formatting, documentation', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: c7dcb6c9aa85fa310251dad7e233eb955a5235ed
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c7dcb6c9aa85fa310251dad7e233eb955a5235ed
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1707192158
  Commit Message:
    selftests/bpf: mark dynptr kfuncs __weak to make them optional on old kernels

Mark dynptr kfuncs as __weak to allow
verifier_global_subprogs/arg_ctx_{perf
  Parent Hashes: d7bc416aa5cc183691287e8f0b1d5b182a7ce9c3
  Refs: kprobe

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Mark dynamic pointer kfuncs as __weak to ensure compatibility with older kernels in BPF selftests.', 'keywords': 'dynptr, optional, kfuncs', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: d7bc416aa5cc183691287e8f0b1d5b182a7ce9c3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d7bc416aa5cc183691287e8f0b1d5b182a7ce9c3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1707192106
  Commit Message:
    libbpf: fix return value for PERF_EVENT __arg_ctx type fix up check

If PERF_EVENT program has __arg_ctx argument with matching
architecture-specific pt_regs/user_pt_regs/user_regs_struct pointer
type
  Parent Hashes: 6146fae67bc2b92100bff8b2d6a6d5bca07edcf8
  Refs:  libbpf should still perform type rewrite for old kernels

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes return value handling for type fix-up check in libbpf for PERF_EVENT programs.', 'keywords': 'libbpf,return value,PERF_EVENT', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 20a286c1a35ba4dc2fca5d4c1fb2e7ced101e576
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 20a286c1a35ba4dc2fca5d4c1fb2e7ced101e576
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1707192014
  Commit Message:
    Merge branch 'transfer-rcu-lock-state-across-subprog-calls'

Kumar Kartikeya Dwivedi says:

====================
Transfer RCU lock state across subprog calls

David suggested during the discussion in [0] that we should handle RCU
locks in a similar fashion to spin locks where the verifier understands
when a lock held in a caller is released in callee
  Parent Hashes: 8244ab509f89d63941d5ee207967c5a3e00bb493 8be6a0147af314fd60db9da2158cd737dc6394a7
  Refs:  or lock taken in
callee is released in a caller

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implements transfer of RCU lock state across subprogram calls in eBPF verifier.', 'keywords': 'RCU,verifier,locks', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8be6a0147af314fd60db9da2158cd737dc6394a7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8be6a0147af314fd60db9da2158cd737dc6394a7
  Author Name: Kumar Kartikeya Dwivedi
  Author Email: memxor@gmail.com
  Commit Date: 1707192014
  Commit Message:
    selftests/bpf: Add tests for RCU lock transfer between subprogs

Add selftests covering the following cases:
- A static or global subprog called from within a RCU read section works
- A static subprog taking an RCU read lock which is released in caller works
- A static subprog releasing the caller's RCU read lock works

Global subprogs that leave the lock in an imbalanced state will not
work
  Parent Hashes: 6fceea0fa59f6786a2847a4cae409117624e8b58
  Refs:  as they are verified separately

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for RCU lock handling in static or global subprograms within BPF programs.', 'keywords': 'selftests, RCU lock, subprograms', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 6fceea0fa59f6786a2847a4cae409117624e8b58
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6fceea0fa59f6786a2847a4cae409117624e8b58
  Author Name: Kumar Kartikeya Dwivedi
  Author Email: memxor@gmail.com
  Commit Date: 1707192014
  Commit Message:
    bpf: Transfer RCU lock state between subprog calls

Allow transferring an imbalanced RCU lock state between subprog calls
during verification. This allows patterns where a subprog call returns
with an RCU lock held
  Parent Hashes: 8244ab509f89d63941d5ee207967c5a3e00bb493
  Refs:  or a subprog call releases an RCU lock held by
the caller. Currently

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable transferring imbalanced RCU lock state between subprogram calls during eBPF verification.', 'keywords': 'RCU lock,state transfer,subprog calls', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8244ab509f89d63941d5ee207967c5a3e00bb493
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8244ab509f89d63941d5ee207967c5a3e00bb493
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1707191927
  Commit Message:
    Merge branch 'enable-static-subprog-calls-in-spin-lock-critical-sections'

Kumar Kartikeya Dwivedi says:

====================
Enable static subprog calls in spin lock critical sections

This set allows a BPF program to make a call to a static subprog within
a bpf_spin_lock critical section. This problem has been hit in sched-ext
and ghOSt [0] as well
  Parent Hashes: 2d9a925d0fbf0dae99af148adaf4f5cadf1be5e0 e8699c4ff85baedcf40f33db816cc487cee39397
  Refs:  and is mostly an annoyance which is worked around
by inling the static subprog into the critical section.

In case of sched-ext

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable static subprog calls within bpf_spin_lock critical sections in eBPF programs.', 'keywords': 'static subprog, spin lock, eBPF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['scheduler like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e8699c4ff85baedcf40f33db816cc487cee39397
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e8699c4ff85baedcf40f33db816cc487cee39397
  Author Name: Kumar Kartikeya Dwivedi
  Author Email: memxor@gmail.com
  Commit Date: 1707191927
  Commit Message:
    selftests/bpf: Add test for static subprog call in lock cs

Add selftests for static subprog calls within bpf_spin_lock critical
section
  Parent Hashes: a44b1334aadd82203f661adb9adb41e53ad0e8d1
  Refs:  and ensure we still reject global subprog calls. Also test the
case where a subprog call will unlock the caller's held lock

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds selftests for static subprogram calls within bpf_spin_lock critical section.', 'keywords': 'selftests, subprog, bpf_spin_lock', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a44b1334aadd82203f661adb9adb41e53ad0e8d1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a44b1334aadd82203f661adb9adb41e53ad0e8d1
  Author Name: Kumar Kartikeya Dwivedi
  Author Email: memxor@gmail.com
  Commit Date: 1707191927
  Commit Message:
    bpf: Allow calling static subprogs while holding a bpf_spin_lock

Currently
  Parent Hashes: 2d9a925d0fbf0dae99af148adaf4f5cadf1be5e0
  Refs:  calling any helpers

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit allows calling static subprograms while holding a bpf_spin_lock in eBPF programs.', 'keywords': 'bpf_spin_lock,static subprograms,eBPF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['xdp like programs', 'tc/netfilter like programs', 'tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 2d9a925d0fbf0dae99af148adaf4f5cadf1be5e0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2d9a925d0fbf0dae99af148adaf4f5cadf1be5e0
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1707173085
  Commit Message:
    bpf
  Parent Hashes: e7f31873176a345d72ca77c7b4da48493ccd9efd
  Refs:  docs: Expand set of initial conformance groups

This patch attempts to update the ISA specification according
to the latest mailing list discussion about conformance groups

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update the ISA specification with changes from latest mailing list discussion on conformance groups.', 'keywords': 'ISA,specification,conformance', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e7f31873176a345d72ca77c7b4da48493ccd9efd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e7f31873176a345d72ca77c7b4da48493ccd9efd
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1707160416
  Commit Message:
    selftests/bpf: Fix flaky selftest lwt_redirect/lwt_reroute

Recently
  Parent Hashes: 169e650069647325496e5a65408ff301874c8e01
  Refs:  when running './test_progs -j'

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a flaky selftest for lwt_redirect and lwt_reroute in the BPF testing suite.', 'keywords': 'flaky,selftest,lwt_redirect', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs', 'tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 169e650069647325496e5a65408ff301874c8e01
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 169e650069647325496e5a65408ff301874c8e01
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1707159158
  Commit Message:
    selftests/bpf: Suppress warning message of an unused variable.

"r" is used to receive the return value of test_2 in bpf_testmod.c
  Parent Hashes: 7e428638bd784fd9e8944bfbf11513520e141b91
  Refs:  but it
is not actually used. So

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Suppress unused variable warning in bpf_testmod.c selftest.', 'keywords': 'selftests,bpf,unused variable', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7e428638bd784fd9e8944bfbf11513520e141b91
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7e428638bd784fd9e8944bfbf11513520e141b91
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1707158921
  Commit Message:
    selftests/bpf: Fix flaky test ptr_untrusted

Somehow recently I frequently hit the following test failure
with either ./test_progs or ./test_progs-cpuv4:
  serial_test_ptr_untrusted:PASS:skel_open 0 nsec
  serial_test_ptr_untrusted:PASS:lsm_attach 0 nsec
  serial_test_ptr_untrusted:PASS:raw_tp_attach 0 nsec
  serial_test_ptr_untrusted:FAIL:cmp_tp_name unexpected cmp_tp_name: actual -115 != expected 0
  #182     ptr_untrusted:FAIL

Further investigation found the failure is due to
  bpf_probe_read_user_str()
where reading user-level string attr->raw_tracepoint.name
is not successfully
  Parent Hashes: df9705eaa0bad034dad0f73386ff82f5c4dd7e24
  Refs:  most likely due to the
string itself still in disk and not populated into memory yet.

One solution is do a printf() call of the string before doing bpf
syscall which will force the raw_tracepoint.name into memory.
But I think a more robust solution is to use bpf_copy_from_user()
which is used in sleepable program and can tolerate page fault

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a flaky test caused by bpf_probe_read_user_str() failure in ptr_untrusted.', 'keywords': 'flaky,test,bpf_probe_read_user_str', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: df9705eaa0bad034dad0f73386ff82f5c4dd7e24
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: df9705eaa0bad034dad0f73386ff82f5c4dd7e24
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1707157508
  Commit Message:
    bpf: Remove an unnecessary check.

The "i" here is always equal to "btf_type_vlen(t)" since
the "for_each_member()" loop never breaks.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240203055119.2235598-1-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 2a79690eae953daaac232f93e6c5ac47ac539f2d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed an unnecessary check in bpf code related to loop iteration.', 'keywords': 'unnecessary, check, loop', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a8882313c5640103f93a07cf352f6ccf8e7defc3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a8882313c5640103f93a07cf352f6ccf8e7defc3
  Author Name: David S. Miller
  Author Email: davem@davemloft.net
  Commit Date: 1707136767
  Commit Message:
    Merge branch 'qca8k-cleanup-fixes'

Vladimir Oltean says:

====================
Fixups for qca8k ds->user_mii_bus cleanup

The series "ds->user_mii_bus cleanup (part 1)" from the last development
cycle:
https://patchwork.kernel.org/project/netdevbpf/cover/20240104140037.374166-1-vladimir.oltean@nxp.com/

had some review comments I didn't have the time to address at the time.
One from Alvin and one from Luiz. They can reasonably be treated as
improvements for v6.9.
====================

Signed-off-by: David S. Miller <davem@davemloft.net>

  Parent Hashes: 0cd216d769fbd161c06f5a702bf7a951f276f558 709776ea85625fb668ced6b97b005cf53612996e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges cleanup and fix improvements for qca8k driver user MII bus implementation.', 'keywords': 'qca8k,cleanup,fixes', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: aad98efd0b121f63a2e1c221dcb4d4850128c697
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: aad98efd0b121f63a2e1c221dcb4d4850128c697
  Author Name: Naveen N Rao
  Author Email: naveen@kernel.org
  Commit Date: 1707133399
  Commit Message:
    powerpc/64: Set task pt_regs->link to the LR value on scv entry

Nysal reported that userspace backtraces are missing in offcputime bcc
tool. As an example:
    $ sudo ./bcc/tools/offcputime.py -uU
    Tracing off-CPU time (us) of user threads by user stack... Hit Ctrl-C to end.

    ^C
	write
	-                python (9107)
	    8

	write
	-                sudo (9105)
	    9

	mmap
	-                python (9107)
	    16

	clock_nanosleep
	-                multipathd (697)
	    3001604

The offcputime bcc tool attaches a bpf program to a kprobe on
finish_task_switch()
  Parent Hashes: ed8b94f6e0acd652ce69bd69d678a0c769172df8
  Refs:  which is usually hit on a syscall from userspace.
With the switch to system call vectored

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes the missing userspace backtraces in offcputime bcc tool by setting task pt_regs->link to the LR value on scv entry for powerpc.', 'keywords': 'offcputime, backtraces, powerpc', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 1eb986746a67952df86eb2c50a36450ef103d01b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1eb986746a67952df86eb2c50a36450ef103d01b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706926139
  Commit Message:
    bpf: don't emit warnings intended for global subprogs for static subprogs

When btf_prepare_func_args() was generalized to handle both static and
global subprogs
  Parent Hashes: e2e70535dd76c6f17bdc9009ffca3d26cfd35ea4
  Refs:  a few warnings/errors that are meant only for global
subprog cases started to be emitted for static subprogs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit stops warnings for global subprograms from being emitted for static subprograms in bpf.', 'keywords': 'warnings, global, subprograms', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e2e70535dd76c6f17bdc9009ffca3d26cfd35ea4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e2e70535dd76c6f17bdc9009ffca3d26cfd35ea4
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706926138
  Commit Message:
    selftests/bpf: add more cases for __arg_trusted __arg_nullable args

Add extra layer of global functions to ensure that passing around
(trusted) PTR_TO_BTF_ID_OR_NULL registers works as expected. We also
extend trusted_task_arg_nullable subtest to check three possible valid
argumements: known NULL
  Parent Hashes: 8f13c34087d3eb64329529b8517e5a6251653176
  Refs:  known non-NULL

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added tests for handling __arg_trusted and __arg_nullable argument cases in BPF selftests.', 'keywords': 'tests,selftests,arguments', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8f13c34087d3eb64329529b8517e5a6251653176
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8f13c34087d3eb64329529b8517e5a6251653176
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706926138
  Commit Message:
    bpf: handle trusted PTR_TO_BTF_ID_OR_NULL in argument check logic

Add PTR_TRUSTED | PTR_MAYBE_NULL modifiers for PTR_TO_BTF_ID to
check_reg_type() to support passing trusted nullable PTR_TO_BTF_ID
registers into global functions accepting `__arg_trusted __arg_nullable`
arguments. This hasn't been caught earlier because tests were either
passing known non-NULL PTR_TO_BTF_ID registers or known NULL (SCALAR)
registers.

When utilizing this functionality in complicated real-world BPF
application that passes around PTR_TO_BTF_ID_OR_NULL
  Parent Hashes: a68b50f47bec8bd6a33b07b7e1562db2553981a7
  Refs:  it became apparent
that verifier rejects valid case because check_reg_type() doesn't handle
this case explicitly. Existing check_reg_type() logic is already
anticipating this combination

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enhances argument check logic in eBPF verifier to support trusted nullable PTR_TO_BTF_ID registers.', 'keywords': 'PTR_TO_BTF_ID, trusted, nullable', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['kprobe/uprobe/ftrace like programs', 'tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ffd856537b95dd65facb4e0c78ca1cb92c2048ff
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ffd856537b95dd65facb4e0c78ca1cb92c2048ff
  Author Name: Arnaldo Carvalho de Melo
  Author Email: acme@kernel.org
  Commit Date: 1706925837
  Commit Message:
    perf bpf: Clean up the generated/copied vmlinux.h

When building perf with BPF skels we either copy the minimalistic
tools/perf/util/bpf_skel/vmlinux/vmlinux.h or use bpftool to generate a
vmlinux from BTF
  Parent Hashes: b8db070f389c902f48e83ee7a94952e9557199e8
  Refs:  storing the result in $(SKEL_OUT)/vmlinux.h.

We need to remove that when doing a 'make -C tools/perf clean'

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit cleans up the generated/copied vmlinux.h file when cleaning the perf build directory.', 'keywords': 'perf,BPF,vmlinux.h', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a68b50f47bec8bd6a33b07b7e1562db2553981a7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a68b50f47bec8bd6a33b07b7e1562db2553981a7
  Author Name: Shung-Hsi Yu
  Author Email: shung-hsi.yu@suse.com
  Commit Date: 1706912043
  Commit Message:
    selftests/bpf: trace_helpers.c: do not use poisoned type

After commit c698eaebdf47 ("selftests/bpf: trace_helpers.c: Optimize
kallsyms cache") trace_helpers.c now includes libbpf_internal.h
  Parent Hashes: 6fb3f72702fba97323a89e53f484de58bc59d13c
  Refs:  and
thus can no longer use the u32 type (among others) since they are poison
in libbpf_internal.h. Replace u32 with __u32 to fix the following error
when building trace_helpers.c on powerpc:

  error: attempt to use poisoned "u32"

Fixes: c698eaebdf47 ("selftests/bpf: trace_helpers.c: Optimize kallsyms cache")
Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/r/20240202095559.12900-1-shung-hsi.yu@suse.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replace poisoned u32 type with __u32 in trace_helpers.c to fix build error.', 'keywords': 'poisoned,u32,trace_helpers', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6fb3f72702fba97323a89e53f484de58bc59d13c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6fb3f72702fba97323a89e53f484de58bc59d13c
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706908935
  Commit Message:
    Merge branch 'improvements-for-tracking-scalars-in-the-bpf-verifier'

Maxim Mikityanskiy says:

====================
Improvements for tracking scalars in the BPF verifier

From: Maxim Mikityanskiy <maxim@isovalent.com>

The goal of this series is to extend the verifier's capabilities of
tracking scalars when they are spilled to stack
  Parent Hashes: 943b043aeecce9accb6d367af47791c633e95e4d 73a28d9d000e8d20b4b3c516b74ee92afe3ae4be
  Refs:  especially when the
spill or fill is narrowing. It also contains a fix by Eduard for
infinite loop detection and a state pruning optimization by Eduard that
compensates for a verification complexity regression introduced by
tracking unbounded scalars. These improvements reduce the surface of
false rejections that I saw while working on Cilium codebase.

Patches 1-9 of the original series were previously applied in v2.

Patches 1-2 (Maxim): Support the case when boundary checks are first
performed after the register was spilled to the stack.

Patches 3-4 (Maxim): Support narrowing fills.

Patches 5-6 (Eduard): Optimization for state pruning in stacksafe() to
mitigate the verification complexity regression.

veristat -e file

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit improves scalar tracking in the BPF verifier, including state pruning optimization for verification complexity regression.', 'keywords': 'scalar tracking, BPF verifier, optimization', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 73a28d9d000e8d20b4b3c516b74ee92afe3ae4be
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 73a28d9d000e8d20b4b3c516b74ee92afe3ae4be
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1706908934
  Commit Message:
    selftests/bpf: States pruning checks for scalar vs STACK_MISC

Check that stacksafe() compares spilled scalars with STACK_MISC.
The following combinations are explored:
- old spill of imprecise scalar is equivalent to cur STACK_{MISC
  Parent Hashes: 6efbde200bf3cf2dbf6e7181893fed13a79c789b
  Refs: INVALID}
  (plus error in unpriv mode);
- old spill of precise scalar is not equivalent to cur STACK_MISC;
- old STACK_MISC is equivalent to cur scalar;
- old STACK_MISC is not equivalent to cur non-scalar.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240127175237.526726-7-maxtram95@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for checking stack safety with scalar and STACK_MISC comparisons in eBPF.', 'keywords': 'selftests,stack,scalar', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6efbde200bf3cf2dbf6e7181893fed13a79c789b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6efbde200bf3cf2dbf6e7181893fed13a79c789b
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1706908934
  Commit Message:
    bpf: Handle scalar spill vs all MISC in stacksafe()

When check_stack_read_fixed_off() reads value from an spi
all stack slots of which are set to STACK_{MISC
  Parent Hashes: 067313a85c6f213932518f12f628810f0092492b
  Refs: INVALID}

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes handling of scalar spills vs all MISC states in stacksafe checks in eBPF.', 'keywords': 'scalar,spill,stacksafe', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 067313a85c6f213932518f12f628810f0092492b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 067313a85c6f213932518f12f628810f0092492b
  Author Name: Maxim Mikityanskiy
  Author Email: maxim@isovalent.com
  Commit Date: 1706908934
  Commit Message:
    selftests/bpf: Add test cases for narrowing fill

The previous commit allowed to preserve boundaries and track IDs of
scalars on narrowing fills. Add test cases for that pattern.

Signed-off-by: Maxim Mikityanskiy <maxim@isovalent.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240127175237.526726-5-maxtram95@gmail.com

  Parent Hashes: c1e6148cb4f83cec841db1f066e8db4a86c1f118
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test cases for handling narrowing fill patterns in eBPF selftests.', 'keywords': 'test cases,narrowing fill,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c1e6148cb4f83cec841db1f066e8db4a86c1f118
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c1e6148cb4f83cec841db1f066e8db4a86c1f118
  Author Name: Maxim Mikityanskiy
  Author Email: maxim@isovalent.com
  Commit Date: 1706908934
  Commit Message:
    bpf: Preserve boundaries and track scalars on narrowing fill

When the width of a fill is smaller than the width of the preceding
spill
  Parent Hashes: 6be503cec6c9bccd64f72c03697011d2e2b96fc3
  Refs:  the information about scalar boundaries can still be preserved

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit preserves boundaries and tracks scalars when narrowing fills in eBPF programs.', 'keywords': 'preserve, boundaries, scalars', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6be503cec6c9bccd64f72c03697011d2e2b96fc3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6be503cec6c9bccd64f72c03697011d2e2b96fc3
  Author Name: Maxim Mikityanskiy
  Author Email: maxim@isovalent.com
  Commit Date: 1706908934
  Commit Message:
    selftests/bpf: Test tracking spilled unbounded scalars

The previous commit added tracking for unbounded scalars on spill. Add
the test case to check the new functionality.

Signed-off-by: Maxim Mikityanskiy <maxim@isovalent.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240127175237.526726-3-maxtram95@gmail.com

  Parent Hashes: e67ddd9b1cff7872d43ead73a1403c4e532003d9
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test case to validate the functionality of tracking spilled unbounded scalars in selftests for BPF.', 'keywords': 'test, unbounded scalars, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e67ddd9b1cff7872d43ead73a1403c4e532003d9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e67ddd9b1cff7872d43ead73a1403c4e532003d9
  Author Name: Maxim Mikityanskiy
  Author Email: maxim@isovalent.com
  Commit Date: 1706908934
  Commit Message:
    bpf: Track spilled unbounded scalars

Support the pattern where an unbounded scalar is spilled to the stack
  Parent Hashes: 943b043aeecce9accb6d367af47791c633e95e4d
  Refs: 
then boundary checks are performed on the src register

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit tracks spilled unbounded scalars to improve boundary checks for src registers in BPF programs.', 'keywords': 'spilled, scalars, unbounded', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 943b043aeecce9accb6d367af47791c633e95e4d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 943b043aeecce9accb6d367af47791c633e95e4d
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706822172
  Commit Message:
    selftests/bpf: Fix bench runner SIGSEGV

Some benchmarks don't have either "consumer" or "producer" sides. For
example
  Parent Hashes: b9551da8cf3ade01a50316df8a618fd945723ee0
  Refs:  trig-tp and other BPF triggering benchmarks don't have
consumers

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a segmentation fault in the selftests benchmark runner due to missing consumer or producer sides.', 'keywords': 'selftests, benchmark, SIGSEGV', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: b9551da8cf3ade01a50316df8a618fd945723ee0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b9551da8cf3ade01a50316df8a618fd945723ee0
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706822172
  Commit Message:
    libbpf: Add missed btf_ext__raw_data() API

Another API that was declared in libbpf.map but actual implementation
was missing. btf_ext__get_raw_data() was intended as a discouraged alias
to consistently-named btf_ext__raw_data()
  Parent Hashes: c81a8ab196b5083d5109a51585fcc24fa2055a77
  Refs:  so make this an actuality.

Fixes: 20eccf29e297 ("libbpf: hide and discourage inconsistently named getters")
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240201172027.604869-5-andrii@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add implementation of missing btf_ext__raw_data() API in libbpf.', 'keywords': 'libbpf, API, implementation', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c81a8ab196b5083d5109a51585fcc24fa2055a77
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c81a8ab196b5083d5109a51585fcc24fa2055a77
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706822172
  Commit Message:
    libbpf: Add btf__new_split() API that was declared but not implemented

Seems like original commit adding split BTF support intended to add
btf__new_split() API
  Parent Hashes: 93ee1eb85e28d1e35bb059c1f5965d65d5fc83c2
  Refs:  and even declared it in libbpf.map

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit implements the previously declared but unimplemented btf__new_split() API in libbpf.', 'keywords': 'libbpf BTF API', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 93ee1eb85e28d1e35bb059c1f5965d65d5fc83c2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 93ee1eb85e28d1e35bb059c1f5965d65d5fc83c2
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706822171
  Commit Message:
    libbpf: Add missing LIBBPF_API annotation to libbpf_set_memlock_rlim API

LIBBPF_API annotation seems missing on libbpf_set_memlock_rlim API
  Parent Hashes: 9fa5e1a180aa639fb156a16e453ab820b7e7860b
  Refs:  so
add it to make this API callable from libbpf's shared library version.

Fixes: e542f2c4cd16 ("libbpf: Auto-bump RLIMIT_MEMLOCK if kernel needs it for BPF")
Fixes: ab9a5a05dc48 ("libbpf: fix up few libbpf.map problems")
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20240201172027.604869-3-andrii@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add missing LIBBPF_API annotation to libbpf_set_memlock_rlim for shared library usage.', 'keywords': 'LIBBPF_API, libbpf, memlock', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9fa5e1a180aa639fb156a16e453ab820b7e7860b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9fa5e1a180aa639fb156a16e453ab820b7e7860b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706822171
  Commit Message:
    libbpf: Call memfd_create() syscall directly

Some versions of Android do not implement memfd_create() wrapper in
their libc implementation
  Parent Hashes: 1581e5118e485e82cfb5d04d636a79aaefb6f266
  Refs:  leading to build failures ([0]). On the other
hand

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit modifies libbpf to call the memfd_create syscall directly to avoid build issues on some Android platforms.', 'keywords': 'libbpf, memfd_create, Android', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 5c24e4e9e70822cf49955fc8174bc5efaa93d17f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5c24e4e9e70822cf49955fc8174bc5efaa93d17f
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1706811574
  Commit Message:
    Merge tag 'hid-for-linus-2024020101' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid

Pull HID fixes from Benjamin Tissoires:

 - cleanups in the error path in hid-steam (Dan Carpenter)

 - fixes for Wacom tablets selftests that sneaked in while the CI was
   taking a break during the year end holidays (Benjamin Tissoires)

 - null pointer check in nvidia-shield (Kunwu Chan)

 - memory leak fix in hidraw (Su Hui)

 - another null pointer fix in i2c-hid-of (Johan Hovold)

 - another memory leak fix in HID-BPF this time
  Parent Hashes: f6cdd897cc7030a573f56ab1e9ebaece26c7c10c 764ad6b02777d77dca3659ca490f0898aa593670
  Refs:  as well as a double
   fdget() fix reported by Dan Carpenter (Benjamin Tissoires)

 - fix for Cirque touchpad when they go on suspend (Kai-Heng Feng)

 - new device ID in hid-logitech-hidpp: "Logitech G Pro X SuperLight 2"
   (Jiri Kosina)

* tag 'hid-for-linus-2024020101' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid:
  HID: bpf: use __bpf_kfunc instead of noinline
  HID: bpf: actually free hdev memory after attaching a HID-BPF program
  HID: bpf: remove double fdget()
  HID: i2c-hid-of: fix NULL-deref on failed power up
  HID: hidraw: fix a problem of memory leak in hidraw_release()
  HID: i2c-hid: Skip SET_POWER SLEEP for Cirque touchpad on system suspend
  HID: nvidia-shield: Add missing null pointer checks to LED initialization
  HID: logitech-hidpp: add support for Logitech G Pro X Superlight 2
  selftests/hid: wacom: fix confidence tests
  HID: hid-steam: Fix cleanup in probe()
  HID: hid-steam: remove pointless error message


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges HID fixes including memory leak and null pointer checks for various devices.', 'keywords': 'HID, fixes, memory', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 1581e5118e485e82cfb5d04d636a79aaefb6f266
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1581e5118e485e82cfb5d04d636a79aaefb6f266
  Author Name: Matt Bobrowski
  Author Email: mattbobrowski@google.com
  Commit Date: 1706809065
  Commit Message:
    bpf: Minor clean-up to sleepable_lsm_hooks BTF set

There's already one main CONFIG_SECURITY_NETWORK ifdef block within
the sleepable_lsm_hooks BTF set. Consolidate this duplicated ifdef
block as there's no need for it and all things guarded by it should
remain in one place in this specific context.

Signed-off-by: Matt Bobrowski <mattbobrowski@google.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/Zbt1smz43GDMbVU3@google.com

  Parent Hashes: 994ff2f7973982af286608da10c295383650fc28
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Consolidate duplicated ifdef blocks in sleepable_lsm_hooks BTF set for cleaner code structure.', 'keywords': 'clean-up, ifdef, BTF', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: e0526ec5360a48ad3ab2e26e802b0532302a7e11
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e0526ec5360a48ad3ab2e26e802b0532302a7e11
  Author Name: Souradeep Chakrabarti
  Author Email: schakrabarti@linux.microsoft.com
  Commit Date: 1706805223
  Commit Message:
    hv_netvsc: Fix race condition between netvsc_probe and netvsc_remove

In commit ac5047671758 ("hv_netvsc: Disable NAPI before closing the
VMBus channel")
  Parent Hashes: 7b55984c96ffe9e236eb9c82a2196e0b1f84990d
  Refs:  napi_disable was getting called for all channels

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a race condition between netvsc_probe and netvsc_remove in hv_netvsc driver.', 'keywords': 'hv_netvsc,race condition,probe', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 6a9d552483d50953320b9d3b57abdee8d436f23f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6a9d552483d50953320b9d3b57abdee8d436f23f
  Author Name: Sean Young
  Author Email: sean@mess.org
  Commit Date: 1706791737
  Commit Message:
    media: rc: bpf attach/detach requires write permission

Note that bpf attach/detach also requires CAP_NET_ADMIN.

Cc: stable@vger.kernel.org
Signed-off-by: Sean Young <sean@mess.org>
Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

  Parent Hashes: f66556c1333b3bd4806fc98ee07c419ab545e6ee
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit requires write permission for bpf attach/detach operations in media rc subsystem.', 'keywords': 'bpf,attach,permission', 'commit_classification': "It's a security fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 994ff2f7973982af286608da10c295383650fc28
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 994ff2f7973982af286608da10c295383650fc28
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1706783748
  Commit Message:
    selftests/bpf: Enable inline bpf_kptr_xchg() test for RV64

Enable inline bpf_kptr_xchg() test for RV64
  Parent Hashes: 69065aa11ca680d76a6c6bc088aa0f0abe24afdb
  Refs:  and the test have passed as
show below:

Summary: 1/0 PASSED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable inline bpf_kptr_xchg() test for RV64 architecture in selftests.', 'keywords': 'bpf_kptr_xchg RV64 selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 69065aa11ca680d76a6c6bc088aa0f0abe24afdb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 69065aa11ca680d76a6c6bc088aa0f0abe24afdb
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1706783748
  Commit Message:
    riscv
  Parent Hashes: 088a464ed53feeab9632c6748b9f25354639e2bd
  Refs:  bpf: Enable inline bpf_kptr_xchg() for RV64

RV64 JIT supports 64-bit BPF_XCHG atomic instructions. At the same time

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable inline bpf_kptr_xchg() support for RV64 JIT with 64-bit atomic instructions.', 'keywords': 'RV64,JIT,BPF_XCHG', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 088a464ed53feeab9632c6748b9f25354639e2bd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 088a464ed53feeab9632c6748b9f25354639e2bd
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1706783533
  Commit Message:
    bpf
  Parent Hashes: 8263b3382d8c1af0fffa27095a9f1db6f2dad899
  Refs:  docs: Clarify which legacy packet instructions existed

As discussed on the BPF IETF mailing list (see link)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit clarifies documentation regarding legacy packet instructions discussed on the BPF IETF mailing list.', 'keywords': 'docs, packet, instructions', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 8263b3382d8c1af0fffa27095a9f1db6f2dad899
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8263b3382d8c1af0fffa27095a9f1db6f2dad899
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1706782425
  Commit Message:
    libbpf: Remove unnecessary null check in kernel_supports()

After recent changes
  Parent Hashes: b3d3e29376a3f898bc90063a1e8c36c76cea1901
  Refs:  Coverity complained about inconsistent null checks
in kernel_supports() function:

    kernel_supports(const struct bpf_object *obj

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit removes an unnecessary null check in the kernel_supports() function in libbpf.', 'keywords': 'null check, libbpf, kernel_supports', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b3d3e29376a3f898bc90063a1e8c36c76cea1901
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b3d3e29376a3f898bc90063a1e8c36c76cea1901
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1706762456
  Commit Message:
    Merge branch 'annotate-kfuncs-in-btf_ids-section'

Daniel Xu says:

====================
Annotate kfuncs in .BTF_ids section

=== Description ===

This is a bpf-treewide change that annotates all kfuncs as such inside
.BTF_ids. This annotation eventually allows us to automatically generate
kfunc prototypes from bpftool.

We store this metadata inside a yet-unused flags field inside struct
btf_id_set8 (thanks Kumar!). pahole will be taught where to look.

More details about the full chain of events are available in commit 3's
description.

The accompanying pahole and bpftool changes can be viewed
here on these "frozen" branches [0][1].

[0]: https://github.com/danobi/pahole/tree/kfunc_btf-v3-mailed
[1]: https://github.com/danobi/linux/tree/kfunc_bpftool-mailed

=== Changelog ===

Changes from v3:
* Rebase to bpf-next and add missing annotation on new kfunc

Changes from v2:
* Only WARN() for vmlinux kfuncs

Changes from v1:
* Move WARN_ON() up a call level
* Also return error when kfunc set is not properly tagged
* Use BTF_KFUNCS_START/END instead of flags
* Rename BTF_SET8_KFUNC to BTF_SET8_KFUNCS
====================

Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/r/cover.1706491398.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 2ef61296d2844c6a4211e07ab70ef2fb412b2c30 6f3189f38a3e995232e028a4c341164c4aca1b20
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit annotates kfuncs in the .BTF_ids section for automatic kfunc prototype generation with bpftool.', 'keywords': 'kfuncs,BTF_ids,bpftool', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6f3189f38a3e995232e028a4c341164c4aca1b20
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6f3189f38a3e995232e028a4c341164c4aca1b20
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1706762456
  Commit Message:
    bpf: treewide: Annotate BPF kfuncs in BTF

This commit marks kfuncs as such inside the .BTF_ids section. The upshot
of these annotations is that we'll be able to automatically generate
kfunc prototypes for downstream users. The process is as follows:

1. In source
  Parent Hashes: a05e90427ef6706f59188b379ad6366b9d298bc5
  Refs:  use BTF_KFUNCS_START/END macro pair to mark kfuncs
2. During build

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Annotate BPF kfuncs in BTF to enable automatic kfunc prototype generation for downstream users.', 'keywords': 'kfuncs,BTF,annotations', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a05e90427ef6706f59188b379ad6366b9d298bc5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a05e90427ef6706f59188b379ad6366b9d298bc5
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1706762452
  Commit Message:
    bpf: btf: Add BTF_KFUNCS_START/END macro pair

This macro pair is functionally equivalent to BTF_SET8_START/END
  Parent Hashes: 79b47344bbc5a693a92ed6b2b09dac59254bfac8
  Refs:  except
with BTF_SET8_KFUNCS flag set in the btf_id_set8 flags field. The next
commit will codemod all kfunc set8s to this new variant such that all
kfuncs are tagged as such in .BTF_ids section.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/d536c57c7c2af428686853cc7396b7a44faa53b7.1706491398.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add BTF_KFUNCS_START/END macro pair for improved kfunc tagging in BTF_ids section.', 'keywords': 'BTF,KFUNCS,macro', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 79b47344bbc5a693a92ed6b2b09dac59254bfac8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 79b47344bbc5a693a92ed6b2b09dac59254bfac8
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1706731524
  Commit Message:
    bpf: btf: Support flags for BTF_SET8 sets

This commit adds support for flags on BTF_SET8s. struct btf_id_set8
already supported 32 bits worth of flags
  Parent Hashes: 2ef61296d2844c6a4211e07ab70ef2fb412b2c30
  Refs:  but was only used for
alignment purposes before.

We now use these bits to encode flags. The first use case is tagging
kfunc sets with a flag so that pahole can recognize which
BTF_ID_FLAGS(func

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds support for flags in BTF_SET8 structures, enabling flag tagging for kfunc sets.', 'keywords': 'BTF_SET8, flags, kfunc', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2ef61296d2844c6a4211e07ab70ef2fb412b2c30
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2ef61296d2844c6a4211e07ab70ef2fb412b2c30
  Author Name: Manu Bretelle
  Author Email: chantr4@gmail.com
  Commit Date: 1706721243
  Commit Message:
    selftests/bpf: Disable IPv6 for lwt_redirect test

After a recent change in the vmtest runner
  Parent Hashes: e4009250574c69d2a3dd838af81cc3d4d72058e4
  Refs:  this test started failing
sporadically.

Investigation showed that this test was subject to race condition which
got exacerbated after the vm runner change. The symptoms being that the
logic that waited for an ICMPv4 packet is naive and will break if 5 or
more non-ICMPv4 packets make it to tap0.
When ICMPv6 is enabled

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Disable IPv6 in lwt_redirect test due to race conditions causing sporadic failures.', 'keywords': 'selftests, IPv6, race condition', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 764ad6b02777d77dca3659ca490f0898aa593670
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 764ad6b02777d77dca3659ca490f0898aa593670
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1706693228
  Commit Message:
    HID: bpf: use __bpf_kfunc instead of noinline

Follow the docs at Documentation/bpf/kfuncs.rst:
- declare the function with `__bpf_kfunc`
- disables missing prototype warnings
  Parent Hashes: 89be8aa5b0ecb3b729c7bcff64bb2af7921fec63
  Refs:  which allows to remove them from
  include/linux/hid-bpf.h

Removing the prototypes is not an issue because we currently have to
redeclare them when writing the BPF program. They will eventually be
generated by bpftool directly AFAIU.

Link: https://lore.kernel.org/r/20240124-b4-hid-bpf-fixes-v2-3-052520b1e5e6@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit replaces noinline with __bpf_kfunc for HID related BPF functions to align with documentation and streamline prototype handling.', 'keywords': 'HID, __bpf_kfunc, prototype', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 89be8aa5b0ecb3b729c7bcff64bb2af7921fec63
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 89be8aa5b0ecb3b729c7bcff64bb2af7921fec63
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1706693225
  Commit Message:
    HID: bpf: actually free hdev memory after attaching a HID-BPF program

Turns out that I got my reference counts wrong and each successful
bus_find_device() actually calls get_device()
  Parent Hashes: 7cdd2108903a4e369eb37579830afc12a6877ec2
  Refs:  and we need to manually
call put_device().

Ensure each bus_find_device() gets a matching put_device() when releasing
the bpf programs and fix all the error paths.

Cc: <stable@vger.kernel.org>
Fixes: f5c27da4e3c8 ("HID: initial BPF implementation")
Link: https://lore.kernel.org/r/20240124-b4-hid-bpf-fixes-v2-2-052520b1e5e6@kernel.org
Signed-off-by: Benjamin Tissoires <bentiss@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes memory leak by ensuring each bus_find_device() call is matched with a put_device() call in HID-BPF implementation.', 'keywords': 'memory, HID-BPF, bus_find_device', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 7cdd2108903a4e369eb37579830afc12a6877ec2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7cdd2108903a4e369eb37579830afc12a6877ec2
  Author Name: Benjamin Tissoires
  Author Email: bentiss@kernel.org
  Commit Date: 1706693220
  Commit Message:
    HID: bpf: remove double fdget()

When the kfunc hid_bpf_attach_prog() is called
  Parent Hashes: 00aab7dcb2267f2aef59447602f34501efe1a07f
  Refs:  we called twice fdget():
one for fetching the type of the bpf program

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed redundant fdget() call in hid_bpf_attach_prog() function.', 'keywords': 'HID,bpf,fdget', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: e4009250574c69d2a3dd838af81cc3d4d72058e4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e4009250574c69d2a3dd838af81cc3d4d72058e4
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1706658959
  Commit Message:
    Merge branch 'libbpf: add bpf_core_cast() helper'

Andrii Nakryiko says:

====================
Add bpf_core_cast(<ptr>
  Parent Hashes: 4d8ebe1304e99cf6e08e432c23041638d6d1de56 ea9d561686fbd0e1ddf05d861d8f2c1ae8291870
  Refs:  <type>) macro wrapper around bpf_rdonly_cast() kfunc
to make it easier to use this functionality in BPF code. See patch #2 for
BPF selftests conversions demonstrating improvements in code succinctness.
====================

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add bpf_core_cast() macro in libbpf to simplify usage of bpf_rdonly_cast() in BPF code.', 'keywords': 'bpf_core_cast,libbpf,bpf_rdonly_cast', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ea9d561686fbd0e1ddf05d861d8f2c1ae8291870
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ea9d561686fbd0e1ddf05d861d8f2c1ae8291870
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706658950
  Commit Message:
    selftests/bpf: convert bpf_rdonly_cast() uses to bpf_core_cast() macro

Use more ergonomic bpf_core_cast() macro instead of bpf_rdonly_cast() in
selftests code.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240130212023.183765-3-andrii@kernel.org
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 20d59ee55172fdf6072abf871fa62b2070d6383f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates selftests to use bpf_core_cast() instead of bpf_rdonly_cast() for better ergonomics.', 'keywords': 'bpf_core_cast,selftests,ergonomic', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 20d59ee55172fdf6072abf871fa62b2070d6383f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 20d59ee55172fdf6072abf871fa62b2070d6383f
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706658950
  Commit Message:
    libbpf: add bpf_core_cast() macro

Add bpf_core_cast() macro that wraps bpf_rdonly_cast() kfunc. It's more
ergonomic than kfunc
  Parent Hashes: 4d8ebe1304e99cf6e08e432c23041638d6d1de56
  Refs:  as it automatically extracts btf_id with
bpf_core_type_id_kernel()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces bpf_core_cast() macro to enhance usability by wrapping bpf_rdonly_cast() kfunc in libbpf.', 'keywords': 'bpf_core_cast, ergonomic, libbpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4207b556e62f0a8915afc5da4c5d5ad915a253a5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4207b556e62f0a8915afc5da4c5d5ad915a253a5
  Author Name: Tejun Heo
  Author Email: tj@kernel.org
  Commit Date: 1706658865
  Commit Message:
    kernfs: RCU protect kernfs_nodes and avoid kernfs_idr_lock in kernfs_find_and_get_node_by_id()

The BPF helper bpf_cgroup_from_id() calls kernfs_find_and_get_node_by_id()
which acquires kernfs_idr_lock
  Parent Hashes: 1c9f2c7606afe149800986182638f636646dd824
  Refs:  which is an non-raw non-IRQ-safe lock. This
can lead to deadlocks as bpf_cgroup_from_id() can be called from any BPF
programs including e.g. the ones that attach to functions which are holding
the scheduler rq lock.

Consider the following BPF program:

  SEC("fentry/__set_cpus_allowed_ptr_locked")
  int BPF_PROG(__set_cpus_allowed_ptr_locked

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit improves RCU protection for kernfs_nodes to avoid deadlocks in bpf_cgroup_from_id().', 'keywords': 'kernfs,RUC protection,deadlocks', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4d8ebe1304e99cf6e08e432c23041638d6d1de56
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4d8ebe1304e99cf6e08e432c23041638d6d1de56
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1706636511
  Commit Message:
    Merge branch 'trusted-ptr_to_btf_id-arg-support-in-global-subprogs'

Andrii Nakryiko says:

====================
Trusted PTR_TO_BTF_ID arg support in global subprogs

This patch set follows recent changes that added btf_decl_tag-based argument
annotation support for global subprogs. This time we add ability to pass
PTR_TO_BTF_ID (BTF-aware kernel pointers) arguments into global subprograms.
We support explicitly trusted arguments only
  Parent Hashes: 24219056805f3988bf93e494499b2329453fc706 c381203eadb76d5601fc04b814317e7608af5f5c
  Refs:  for now.

Patch #1 adds logic for arg:trusted tag support on the verifier side. Default
semantic of such arguments is non-NULL

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit supports trusted PTR_TO_BTF_ID argument handling in global subprograms.', 'keywords': 'trusted arguments, PTR_TO_BTF_ID, global subprograms', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c381203eadb76d5601fc04b814317e7608af5f5c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c381203eadb76d5601fc04b814317e7608af5f5c
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706636510
  Commit Message:
    selftests/bpf: add trusted global subprog arg tests

Add a bunch of test cases validating behavior of __arg_trusted and its
combination with __arg_nullable tag. We also validate CO-RE flavor
support by kernel for __arg_trusted args.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240130000648.2144827-5-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: d28bb1a86e68a3d523e0acee8281bb904dd7f451
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for trusted global subprogram arguments in eBPF.', 'keywords': 'selftests,arg_trusted,CO-RE', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d28bb1a86e68a3d523e0acee8281bb904dd7f451
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d28bb1a86e68a3d523e0acee8281bb904dd7f451
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706636510
  Commit Message:
    libbpf: add __arg_trusted and __arg_nullable tag macros

Add __arg_trusted to annotate global func args that accept trusted
PTR_TO_BTF_ID arguments.

Also add __arg_nullable to combine with __arg_trusted (and maybe other
tags in the future) to force global subprog itself (i.e.
  Parent Hashes: 8f2b44cd9d69ec36c9ce9623993978babb575ee8
  Refs:  callee) to do
NULL checks

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces __arg_trusted and __arg_nullable tag macros for annotating global function arguments in libbpf.', 'keywords': 'libbpf, trusted, nullable', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8f2b44cd9d69ec36c9ce9623993978babb575ee8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8f2b44cd9d69ec36c9ce9623993978babb575ee8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706636510
  Commit Message:
    bpf: add arg:nullable tag to be combined with trusted pointers

Add ability to mark arg:trusted arguments with optional arg:nullable
tag to mark it as PTR_TO_BTF_ID_OR_NULL variant
  Parent Hashes: e2b3c4ff5d183da6d1863c2321413406a2752e7a
  Refs:  which will allow
callers to pass NULL

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added support for marking trusted pointer arguments as nullable in eBPF.', 'keywords': 'nullable, trusted, pointers', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e2b3c4ff5d183da6d1863c2321413406a2752e7a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e2b3c4ff5d183da6d1863c2321413406a2752e7a
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706636510
  Commit Message:
    bpf: add __arg_trusted global func arg tag

Add support for passing PTR_TO_BTF_ID registers to global subprogs.
Currently only PTR_TRUSTED flavor of PTR_TO_BTF_ID is supported.
Non-NULL semantics is assumed
  Parent Hashes: 24219056805f3988bf93e494499b2329453fc706
  Refs:  so caller will be forced to prove
PTR_TO_BTF_ID can't be NULL.

Note

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Support is added for passing PTR_TO_BTF_ID registers with PTR_TRUSTED flavor to global subprogs in bpf.', 'keywords': 'PTR_TO_BTF_ID,PTR_TRUSTED,global subprogs', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 24219056805f3988bf93e494499b2329453fc706
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 24219056805f3988bf93e494499b2329453fc706
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1706627620
  Commit Message:
    bpf: Move -Wno-compare-distinct-pointer-types to BPF_CFLAGS

Clang supports enabling/disabling certain conversion diagnostics via
the -W[no-]compare-distinct-pointer-types command line options.
Disabling this warning is required by some BPF selftests due to
-Werror.  Until very recently GCC would emit these warnings
unconditionally
  Parent Hashes: 27a90b14b93d3b2e1efd10764e456af7e2a42991
  Refs:  which was a problem for gcc-bpf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Move Clang diagnostic flag -Wno-compare-distinct-pointer-types to BPF_CFLAGS for BPF selftests compatibility.', 'keywords': 'Clang, BPF_CFLAGS, selftests', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 27a90b14b93d3b2e1efd10764e456af7e2a42991
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 27a90b14b93d3b2e1efd10764e456af7e2a42991
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1706627298
  Commit Message:
    bpf: Build type-punning BPF selftests with -fno-strict-aliasing

A few BPF selftests perform type punning and they may break strict
aliasing rules
  Parent Hashes: 6668e818f960b0f32110a9efa7c97351a5771b35
  Refs:  which are exploited by both GCC and clang by default
while optimizing.  This can lead to broken compiled programs.

This patch disables strict aliasing for these particular tests

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Disable strict aliasing in certain BPF selftests to prevent optimization-related issues by compilers.', 'keywords': 'type-punning,BPF selftests,strict-aliasing', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6668e818f960b0f32110a9efa7c97351a5771b35
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6668e818f960b0f32110a9efa7c97351a5771b35
  Author Name: Haiyue Wang
  Author Email: haiyue.wang@intel.com
  Commit Date: 1706587495
  Commit Message:
    bpf
  Parent Hashes: ff2071a7b7fd77908417603c4a785822939b3841
  Refs: token: Use BIT_ULL() to convert the bit mask

Replace the '(1ULL << *)' with the macro BIT_ULL(nr).

Signed-off-by: Haiyue Wang <haiyue.wang@intel.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240127134901.3698613-1-haiyue.wang@intel.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replace bit mask calculation with BIT_ULL macro for improved readability.', 'keywords': 'BIT_ULL,macro,bit', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ff2071a7b7fd77908417603c4a785822939b3841
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ff2071a7b7fd77908417603c4a785822939b3841
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1706575572
  Commit Message:
    bpf: Generate const static pointers for kernel helpers

The generated bpf_helper_defs.h file currently contains definitions
like this for the kernel helpers
  Parent Hashes: f2e4040c82d3fddd11fa7c64e8f810e6f9cb7460
  Refs:  which are static objects:

  static void *(*bpf_map_lookup_elem)(void *map

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit generates const static pointers for kernel helper functions in bpf_helper_defs.h file.', 'keywords': 'bpf, kernel helpers, pointers', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f2e4040c82d3fddd11fa7c64e8f810e6f9cb7460
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f2e4040c82d3fddd11fa7c64e8f810e6f9cb7460
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1706575362
  Commit Message:
    libbpf: Add some details for BTF parsing failures

As CONFIG_DEBUG_INFO_BTF is default off the existing "failed to find
valid kernel BTF" message makes diagnosing the kernel build issue somewhat
cryptic. Add a little more detail with the hope of helping users.

Before:
```
libbpf: failed to find valid kernel BTF
libbpf: Error loading vmlinux BTF: -3
```

After not accessible:
```
libbpf: kernel BTF is missing at '/sys/kernel/btf/vmlinux'
  Parent Hashes: aecaa3ed48c3ae74c06f5e8ef0746b69c62397f1
  Refs:  was CONFIG_DEBUG_INFO_BTF enabled?
libbpf: failed to find valid kernel BTF
libbpf: Error loading vmlinux BTF: -3
```

After not readable:
```
libbpf: failed to read kernel BTF from (/sys/kernel/btf/vmlinux): -1
```

Closes: https://lore.kernel.org/bpf/CAP-5=fU+DN_+Y=Y4gtELUsJxKNDDCOvJzPHvjUVaUoeFAzNnig@mail.gmail.com/

Signed-off-by: Ian Rogers <irogers@google.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20240125231840.1647951-1-irogers@google.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enhances error messages for BTF parsing failures to aid in diagnosing kernel build issues.', 'keywords': 'BTF,libbpf,error messages', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: aecaa3ed48c3ae74c06f5e8ef0746b69c62397f1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: aecaa3ed48c3ae74c06f5e8ef0746b69c62397f1
  Author Name: Florian Lehner
  Author Email: dev@der-flo.net
  Commit Date: 1706564437
  Commit Message:
    perf/bpf: Fix duplicate type check

Remove the duplicate check on type and unify result.

Signed-off-by: Florian Lehner <dev@der-flo.net>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/bpf/20240120150920.3370-1-dev@der-flo.net

  Parent Hashes: 646751d523587cfd7ebcf1733298ecd470879eda
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove duplicate type check in perf/bpf for consistency.', 'keywords': 'perf,bpf,duplicate', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 646751d523587cfd7ebcf1733298ecd470879eda
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 646751d523587cfd7ebcf1733298ecd470879eda
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1706564328
  Commit Message:
    bpf: Use -Wno-error in certain tests when building with GCC

Certain BPF selftests contain code that
  Parent Hashes: fbaf59a9f513416c05f4b4e87d26898d3dccd1cc
  Refs:  albeit being legal C

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add -Wno-error flag to certain BPF selftests when using GCC.', 'keywords': 'BPF selftests,GCC,-Wno-error', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fbaf59a9f513416c05f4b4e87d26898d3dccd1cc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fbaf59a9f513416c05f4b4e87d26898d3dccd1cc
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1706561312
  Commit Message:
    selftests/bpf: Remove "&>" usage in the selftests

In s390
  Parent Hashes: add9c58cd44e88a15f285945e26bf0d9d81c5890
  Refs:  CI reported that the sock_iter_batch selftest
hits this error very often:

2024-01-26T16:56:49.3091804Z Bind /proc/self/ns/net -> /run/netns/sock_iter_batch_netns failed: No such file or directory
2024-01-26T16:56:49.3149524Z Cannot remove namespace file "/run/netns/sock_iter_batch_netns": No such file or directory
2024-01-26T16:56:49.3772213Z test_sock_iter_batch:FAIL:ip netns add sock_iter_batch_netns unexpected error: 256 (errno 0)

It happens very often in s390 but Manu also noticed it happens very
sparsely in other arch also.

It turns out the default dash shell does not recognize "&>"
as a redirection operator

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove "&>" redirection usage in bpf selftests to address shell compatibility issues.', 'keywords': 'selftests, redirection, s390', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: add9c58cd44e88a15f285945e26bf0d9d81c5890
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: add9c58cd44e88a15f285945e26bf0d9d81c5890
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706560453
  Commit Message:
    bpf: move arg:ctx type enforcement check inside the main logic loop

Now that bpf and bpf-next trees converged and we don't run the risk of
merge conflicts
  Parent Hashes: 9eea8fafe33eb70868f6ace2fc1e17c4ff5539c3
  Refs:  move btf_validate_prog_ctx_type() into its most logical
place inside the main logic loop.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240125205510.3642094-4-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor the position of context type enforcement check inside the bpf main logic loop.', 'keywords': 'type enforcement, context, logic loop', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9eea8fafe33eb70868f6ace2fc1e17c4ff5539c3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9eea8fafe33eb70868f6ace2fc1e17c4ff5539c3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706560453
  Commit Message:
    libbpf: fix __arg_ctx type enforcement for perf_event programs

Adjust PERF_EVENT type enforcement around __arg_ctx to match exactly
what kernel is doing.

Fixes: 76ec90a996e3 ("libbpf: warn on unexpected __arg_ctx type when rewriting BTF")
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240125205510.3642094-3-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 0e6d0a9d2348b64df74239e859fa9d6e86cdcdef
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes type enforcement for __arg_ctx in PERF_EVENT programs to match kernel behavior in libbpf.', 'keywords': 'libbpf, perf_event, __arg_ctx', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 0e6d0a9d2348b64df74239e859fa9d6e86cdcdef
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0e6d0a9d2348b64df74239e859fa9d6e86cdcdef
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706560453
  Commit Message:
    libbpf: integrate __arg_ctx feature detector into kernel_supports()

Now that feature detection code is in bpf-next tree
  Parent Hashes: ced33f2cfa21a14a292a00e31dc9f85c1bfbda1c
  Refs:  integrate __arg_ctx
kernel-side support into kernel_supports() framework.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240125205510.3642094-2-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Integrates the __arg_ctx feature detection into the libbpf's kernel_supports framework.", 'keywords': 'libbpf,__arg_ctx,feature', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ced33f2cfa21a14a292a00e31dc9f85c1bfbda1c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ced33f2cfa21a14a292a00e31dc9f85c1bfbda1c
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1706543673
  Commit Message:
    docs/bpf: Improve documentation of 64-bit immediate instructions

For 64-bit immediate instruction
  Parent Hashes: efaa47db92451608499ab7edf108bf30141c33db
  Refs:  'BPF_IMM | BPF_DW | BPF_LD' and
src_reg=[0-6]

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve the documentation for 64-bit immediate instructions in eBPF.', 'keywords': 'documentation, 64-bit, instructions', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: efaa47db92451608499ab7edf108bf30141c33db
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: efaa47db92451608499ab7edf108bf30141c33db
  Author Name: Menglong Dong
  Author Email: dongmenglong.8@bytedance.com
  Commit Date: 1706543093
  Commit Message:
    bpf: Remove unused field "mod" in struct bpf_trampoline

It seems that the field "mod" in struct bpf_trampoline is not used
anywhere after the commit 31bf1dbccfb0 ("bpf: Fix attaching
fentry/fexit/fmod_ret/lsm to modules"). So we can just remove it now.

Fixes: 31bf1dbccfb0 ("bpf: Fix attaching fentry/fexit/fmod_ret/lsm to modules")
Signed-off-by: Menglong Dong <dongmenglong.8@bytedance.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/20240128055443.413291-1-dongmenglong.8@bytedance.com

  Parent Hashes: f149d03f450b4afab11f5e1ebd8fdfaf7eb24a28
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove unused "mod" field from bpf_trampoline structure for simplification.', 'keywords': 'unused field,bpf_trampoline,mod removal', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f149d03f450b4afab11f5e1ebd8fdfaf7eb24a28
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f149d03f450b4afab11f5e1ebd8fdfaf7eb24a28
  Author Name: Geliang Tang
  Author Email: tanggeliang@kylinos.cn
  Commit Date: 1706542889
  Commit Message:
    selftests/bpf: Drop return in bpf_testmod_exit

bpf_testmod_exit() does not need to have a return value (given the void)
  Parent Hashes: 06a33d024838414432b6c0f51f994e7f1695b74f
  Refs: 
so this patch drops this useless 'return' in it.

Signed-off-by: Geliang Tang <tanggeliang@kylinos.cn>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/5765b287ea088f0c820f2a834faf9b20fb2f8215.1706442113.git.tanggeliang@kylinos.cn


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed unnecessary return statement in bpf_testmod_exit() due to void return type.', 'keywords': 'selftests,bpf,bpf_testmod_exit', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 06a33d024838414432b6c0f51f994e7f1695b74f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 06a33d024838414432b6c0f51f994e7f1695b74f
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1706541933
  Commit Message:
    riscv
  Parent Hashes: 519fb722bea09ae2664ad21f8ef4360fb799eb2f
  Refs:  bpf: Optimize bswap insns with Zbb support

Optimize bswap instructions by rev8 Zbb instruction conbined with srli
instruction. And Optimize 16-bit zero-extension with Zbb support.

Signed-off-by: Pu Lehui <pulehui@huawei.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Björn Töpel <bjorn@rivosinc.com>
Acked-by: Björn Töpel <bjorn@kernel.org>
Link: https://lore.kernel.org/bpf/20240115131235.2914289-7-pulehui@huaweicloud.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize bswap instructions with Zbb support on RISC-V architecture.', 'keywords': 'Optimize,RISC-V,Zbb', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 519fb722bea09ae2664ad21f8ef4360fb799eb2f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 519fb722bea09ae2664ad21f8ef4360fb799eb2f
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1706541933
  Commit Message:
    riscv
  Parent Hashes: 647b93f65daa128d9a0e4aac744a5fcf5f58b2d2
  Refs:  bpf: Optimize sign-extention mov insns with Zbb support

Add 8-bit and 16-bit sign-extention wraper with Zbb support to optimize
sign-extension mov instructions.

Signed-off-by: Pu Lehui <pulehui@huawei.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Tested-by: Björn Töpel <bjorn@rivosinc.com>
Acked-by: Björn Töpel <bjorn@kernel.org>
Link: https://lore.kernel.org/bpf/20240115131235.2914289-6-pulehui@huaweicloud.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize sign-extension mov instructions on RISC-V with support for 8-bit and 16-bit Zbb extensions.', 'keywords': 'sign-extension,RISC-V,Zbb', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 647b93f65daa128d9a0e4aac744a5fcf5f58b2d2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 647b93f65daa128d9a0e4aac744a5fcf5f58b2d2
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1706541933
  Commit Message:
    riscv
  Parent Hashes: 361db44c3c59cde05e9926647f16255e274a37f4
  Refs:  bpf: Add necessary Zbb instructions

Add necessary Zbb instructions introduced by [0] to reduce code size and
improve performance of RV64 JIT. Meanwhile

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add Zbb instructions to enhance performance and reduce code size for RV64 JIT in RISC-V architecture.', 'keywords': 'Zbb, RV64, JIT', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 361db44c3c59cde05e9926647f16255e274a37f4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 361db44c3c59cde05e9926647f16255e274a37f4
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1706541933
  Commit Message:
    riscv
  Parent Hashes: 914c7a5ff18a225f7df254ae3433574f3d47b711
  Refs:  bpf: Simplify sext and zext logics in branch instructions

There are many extension helpers in the current branch instructions

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Simplify the extension logic in RISC-V branch instructions for the BPF subsystem.', 'keywords': 'riscv, simplify, branch', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 914c7a5ff18a225f7df254ae3433574f3d47b711
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 914c7a5ff18a225f7df254ae3433574f3d47b711
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1706541933
  Commit Message:
    riscv
  Parent Hashes: e33758f7493c9ad8cf6960bcf7c70f5761f3acfb
  Refs:  bpf: Unify 32-bit zero-extension to emit_zextw

For code unification

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Unify 32-bit zero-extension code in riscv architecture.', 'keywords': 'riscv, code unification, emit_zextw', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e33758f7493c9ad8cf6960bcf7c70f5761f3acfb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e33758f7493c9ad8cf6960bcf7c70f5761f3acfb
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1706541932
  Commit Message:
    riscv
  Parent Hashes: ad57654053805bf9a62602aaec74cc78edb6f235
  Refs:  bpf: Unify 32-bit sign-extension to emit_sextw

For code unification

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Unifies 32-bit sign-extension for the RISC-V architecture in BPF.', 'keywords': 'unify, sign-extension, riscv', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ad57654053805bf9a62602aaec74cc78edb6f235
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ad57654053805bf9a62602aaec74cc78edb6f235
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706541464
  Commit Message:
    libbpf: Fix faccessat() usage on Android

Android implementation of libc errors out with -EINVAL in faccessat() if
passed AT_EACCESS ([0])
  Parent Hashes: 29788f39a4171dd48a6d19eb78cf2ab168c4349a
  Refs:  this leads to ridiculous issue with libbpf
refusing to load /sys/kernel/btf/vmlinux on Androids ([1]). Fix by
detecting Android and redefining AT_EACCESS to 0

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes faccessat() usage in libbpf on Android by handling AT_EACCESS error.', 'keywords': 'libbpf, Android, faccessat', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 29788f39a4171dd48a6d19eb78cf2ab168c4349a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 29788f39a4171dd48a6d19eb78cf2ab168c4349a
  Author Name: Arnaldo Carvalho de Melo
  Author Email: acme@kernel.org
  Commit Date: 1706540926
  Commit Message:
    bpftool: Be more portable by using POSIX's basename()

musl libc had the basename() prototype in string.h
  Parent Hashes: 723de3ebef03bc14bd72531f00f9094337654009
  Refs:  but this is a
glibc-ism

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve bpftool portability by using POSIX basename() function.', 'keywords': 'bpftool, portability, POSIX', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 92046e83c07b064ca65ac4ae7660a540016bdfc1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 92046e83c07b064ca65ac4ae7660a540016bdfc1
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1706332102
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-01-26

We've added 107 non-merge commits during the last 4 day(s) which contain
a total of 101 files changed
  Parent Hashes: c09f32a859458002b40ba44fc736329a4c0fe4e5 fa7178b0f12e55a4f2d4906df3f25d6d4f88d962
  Refs:  6009 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merged branch 'for-netdev' from bpf-next with 107 new commits.", 'keywords': 'bpf-next, merge, netdev', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: d3cb3b0088ca92082e2bebc40cc6894a632173e2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d3cb3b0088ca92082e2bebc40cc6894a632173e2
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1706306970
  Commit Message:
    selftests: net: add missing required classifier

the udpgro_fraglist self-test uses the BPF classifiers
  Parent Hashes: 281cb9d65a95c00bb844f332cd187491d2d55496
  Refs:  but the
current net self-test configuration does not include it

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a missing required BPF classifier for the udpgro_fraglist self-test in net self-tests.', 'keywords': 'self-test, BPF classifiers, net', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fa7178b0f12e55a4f2d4906df3f25d6d4f88d962
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fa7178b0f12e55a4f2d4906df3f25d6d4f88d962
  Author Name: Tiezhu Yang
  Author Email: yangtiezhu@loongson.cn
  Commit Date: 1706296172
  Commit Message:
    selftests/bpf: Add missing line break in test_verifier

There are no break lines in the test log for test_verifier #106 ~ #111
if jit is disabled
  Parent Hashes: e48f0f4a9bfed8947e4d1123e8b6a15c18ee1708
  Refs:  add the missing line break at the end of printf()
to fix it.

Without this patch:

  [root@linux bpf]# echo 0 > /proc/sys/net/core/bpf_jit_enable
  [root@linux bpf]# ./test_verifier 106
  #106/p inline simple bpf_loop call SKIP (requires BPF JIT)Summary: 0 PASSED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added missing line break in test_verifier selftest to improve readability for non-JIT logs.', 'keywords': 'line break,selftests,test_verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e48f0f4a9bfed8947e4d1123e8b6a15c18ee1708
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e48f0f4a9bfed8947e4d1123e8b6a15c18ee1708
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1706292338
  Commit Message:
    bpf
  Parent Hashes: e6be8cd5d3cf54ccd0ae66027d6f4697b15f4c3e
  Refs:  docs: Clarify definitions of various instructions

Clarify definitions of several instructions:

* BPF_NEG does not support BPF_X
* BPF_CALL does not support BPF_JMP32 or BPF_X
* BPF_EXIT does not support BPF_X
* BPF_JA does not support BPF_X (was implied but not explicitly stated)

Also fix a typo in the wide instruction figure where the field is
actually named "opcode" not "code".

Signed-off-by: Dave Thaler <dthaler1968@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240126040050.8464-1-dthaler1968@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Clarified instruction definitions in documentation and fixed typo in BPF opcode description.', 'keywords': 'documentation, instruction, typo', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e6be8cd5d3cf54ccd0ae66027d6f4697b15f4c3e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e6be8cd5d3cf54ccd0ae66027d6f4697b15f4c3e
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706244599
  Commit Message:
    bpf: Fix error checks against bpf_get_btf_vmlinux().

In bpf_struct_ops_map_alloc
  Parent Hashes: be4840b33eb2ea7d80830530aab5fcbeaa90e857
  Refs:  it needs to check for NULL in the returned
pointer of bpf_get_btf_vmlinux() when CONFIG_DEBUG_INFO_BTF is not set.
ENOTSUPP is used to preserve the same behavior before the
struct_ops kmod support.

In the function check_struct_ops_btf_id()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix NULL pointer checks for bpf_get_btf_vmlinux() in bpf_struct_ops_map_alloc.', 'keywords': 'NULL, ENOTSUPP, struct_ops', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: be4840b33eb2ea7d80830530aab5fcbeaa90e857
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: be4840b33eb2ea7d80830530aab5fcbeaa90e857
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1706241452
  Commit Message:
    bpf: One more maintainer for libbpf and BPF selftests

I've been working on BPF verifier
  Parent Hashes: c8632acf193beac64bbdaebef013368c480bf74f
  Refs:  BPF selftests and

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added an additional maintainer for libbpf and BPF selftests.', 'keywords': 'maintainer, libbpf, selftests', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ce36ea754051cfae39eabd841f907de0e8d8a6b7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ce36ea754051cfae39eabd841f907de0e8d8a6b7
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1706227165
  Commit Message:
    Merge branch 'selftests-net-a-few-fixes'

Paolo Abeni says:

====================
selftests: net: a few fixes

This series address self-tests failures for udp gro-related tests.

The first patch addresses the main problem I observe locally - the XDP
program required by such tests
  Parent Hashes: b64787840080bdbd048bb9c68222ad17236cbd7e 4acffb66630a0e4800880baa61a54ef18047ccd3
  Refs:  xdp_dummy

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit integrates a series of fixes for self-tests related to udp gro and XDP programs.', 'keywords': 'self-tests, udp, XDP', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 98cb12eb52a780e682bea8372fdb2912c08132dd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 98cb12eb52a780e682bea8372fdb2912c08132dd
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1706227162
  Commit Message:
    selftests: net: remove dependency on ebpf tests

Several net tests requires an XDP program build under the ebpf
directory
  Parent Hashes: b64787840080bdbd048bb9c68222ad17236cbd7e
  Refs:  and error out if such program is not available.

That makes running successful net test hard

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes the dependency of net tests on building XDP programs in the ebpf directory.', 'keywords': 'selftests, net, dependency', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ecb1b8288dc7ccbdcb3b9df005fa1c0e0c0388a7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ecb1b8288dc7ccbdcb3b9df005fa1c0e0c0388a7
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1706209115
  Commit Message:
    Merge tag 'net-6.8-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 "Including fixes from bpf
  Parent Hashes: bdc010200eb5e2cddf1c76c83386bdde8aad0899 0a5bd0ffe790511d802e7f40898429a89e2487df
  Refs:  netfilter and WiFi.

  Jakub is doing a lot of work to include the self-tests in our CI

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes including BPF improvements in net-6.8-rc2.', 'keywords': 'Merge, networking, BPF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', 'tc/netfilter like programs', 'other']}
--------------------
--------------------
Processing Commit ID: fdf8e6d18c6dcc0421d65aa6382f5a4fa0050149
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fdf8e6d18c6dcc0421d65aa6382f5a4fa0050149
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1706178631
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-01-25

The following pull-request contains BPF updates for your *net* tree.

We've added 12 non-merge commits during the last 2 day(s) which contain
a total of 13 files changed
  Parent Hashes: 5e344807735023cd3a67c37a1852b849caa42620 9d71bc833f57a6549c753e37ce47136d35b67fc4
  Refs:  190 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merged BPF updates into the net tree, adding 12 commits over 13 files.', 'keywords': 'BPF, merge, net', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9d71bc833f57a6549c753e37ce47136d35b67fc4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9d71bc833f57a6549c753e37ce47136d35b67fc4
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1706142247
  Commit Message:
    Merge branch 'net-bpf_xdp_adjust_tail-and-intel-mbuf-fixes'

Maciej Fijalkowski says:

====================
net: bpf_xdp_adjust_tail() and Intel mbuf fixes

Hey
  Parent Hashes: 1732ebc4a26181c8f116c7639db99754b313edc8 0cbb08707c932b3f004bc1a8ec6200ef572c1f5f
  Refs: 

after a break followed by dealing with sickness

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge of branch containing fixes for bpf_xdp_adjust_tail and Intel mbuf.', 'keywords': 'bpf_xdp_adjust_tail,Intel,fixes', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: fbadd83a612c3b7aad2987893faca6bd24aaebb3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fbadd83a612c3b7aad2987893faca6bd24aaebb3
  Author Name: Maciej Fijalkowski
  Author Email: maciej.fijalkowski@intel.com
  Commit Date: 1706142247
  Commit Message:
    xdp: reflect tail increase for MEM_TYPE_XSK_BUFF_POOL

XSK ZC Rx path calculates the size of data that will be posted to XSK Rx
queue via subtracting xdp_buff::data_end from xdp_buff::data.

In bpf_xdp_frags_increase_tail()
  Parent Hashes: 3de38c87174225487fc93befeea7d380db80aef6
  Refs:  when underlying memory type of
xdp_rxq_info is MEM_TYPE_XSK_BUFF_POOL

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Reflects tail increase in XDP path for MEM_TYPE_XSK_BUFF_POOL in XSK zero-copy RX path.', 'keywords': 'XDP, XSK, buffer', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 290779905d09d5fdf6caa4f58ddefc3f4db0c0a9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 290779905d09d5fdf6caa4f58ddefc3f4db0c0a9
  Author Name: Maciej Fijalkowski
  Author Email: maciej.fijalkowski@intel.com
  Commit Date: 1706142247
  Commit Message:
    intel: xsk: initialize skb_frag_t::bv_offset in ZC drivers

Ice and i40e ZC drivers currently set offset of a frag within
skb_shared_info to 0
  Parent Hashes: 2ee788c06493d02ee85855414cca39825e768aaf
  Refs:  which is incorrect. xdp_buffs that come from
xsk_buff_pool always have 256 bytes of a headroom

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Initialize skb_frag_t::bv_offset in Ice and i40e ZC drivers to ensure correct skb_shared_info handling.', 'keywords': 'ZC drivers,skb_frag_t,offset', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 2ee788c06493d02ee85855414cca39825e768aaf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2ee788c06493d02ee85855414cca39825e768aaf
  Author Name: Maciej Fijalkowski
  Author Email: maciej.fijalkowski@intel.com
  Commit Date: 1706142246
  Commit Message:
    ice: remove redundant xdp_rxq_info registration

xdp_rxq_info struct can be registered by drivers via two functions -
xdp_rxq_info_reg() and __xdp_rxq_info_reg(). The latter one allows
drivers that support XDP multi-buffer to set up xdp_rxq_info::frag_size
which in turn will make it possible to grow the packet via
bpf_xdp_adjust_tail() BPF helper.

Currently
  Parent Hashes: 83014323c642b8faa2d64a5f303b41c019322478
  Refs:  ice registers xdp_rxq_info in two spots:
1) ice_setup_rx_ring() // via xdp_rxq_info_reg()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove redundant xdp_rxq_info registration in the ice driver to optimize XDP multi-buffer usage.', 'keywords': 'xdp_rxq_info, ice, XDP', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 83014323c642b8faa2d64a5f303b41c019322478
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 83014323c642b8faa2d64a5f303b41c019322478
  Author Name: Tirthendu Sarkar
  Author Email: tirthendu.sarkar@intel.com
  Commit Date: 1706142246
  Commit Message:
    i40e: handle multi-buffer packets that are shrunk by xdp prog

XDP programs can shrink packets by calling the bpf_xdp_adjust_tail()
helper function. For multi-buffer packets this may lead to reduction of
frag count stored in skb_shared_info area of the xdp_buff struct. This
results in issues with the current handling of XDP_PASS and XDP_DROP
cases.

For XDP_PASS
  Parent Hashes: ad2047cf5d9313200e308612aed516548873d124
  Refs:  currently skb is being built using frag count of
xdp_buffer before it was processed by XDP prog and thus will result in
an inconsistent skb when frag count gets reduced by XDP prog. To fix
this

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix handling of multi-buffer packets that are shrunk by XDP programs in the i40e driver.', 'keywords': 'XDP, multi-buffer, i40e', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: ad2047cf5d9313200e308612aed516548873d124
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ad2047cf5d9313200e308612aed516548873d124
  Author Name: Maciej Fijalkowski
  Author Email: maciej.fijalkowski@intel.com
  Commit Date: 1706142246
  Commit Message:
    ice: work on pre-XDP prog frag count

Fix an OOM panic in XDP_DRV mode when a XDP program shrinks a
multi-buffer packet by 4k bytes and then redirects it to an AF_XDP
socket.

Since support for handling multi-buffer frames was added to XDP
  Parent Hashes: c5114710c8ce86b8317e9b448f4fd15c711c2a82
  Refs:  usage
of bpf_xdp_adjust_tail() helper within XDP program can free the page
that given fragment occupies and in turn decrease the fragment count
within skb_shared_info that is embedded in xdp_buff struct. In current
ice driver codebase

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes an OOM panic issue when shrinking multi-buffer packets in XDP_DRV mode for the ice driver.', 'keywords': 'OOM panic,XDP_DRV,multi-buffer', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: c5114710c8ce86b8317e9b448f4fd15c711c2a82
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c5114710c8ce86b8317e9b448f4fd15c711c2a82
  Author Name: Maciej Fijalkowski
  Author Email: maciej.fijalkowski@intel.com
  Commit Date: 1706142246
  Commit Message:
    xsk: fix usage of multi-buffer BPF helpers for ZC XDP

Currently when packet is shrunk via bpf_xdp_adjust_tail() and memory
type is set to MEM_TYPE_XSK_BUFF_POOL
  Parent Hashes: f7f6aa8e24383fbb11ac55942e66da9660110f80
  Refs:  null ptr dereference happens:

[1136314.192256] BUG: kernel NULL pointer dereference

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes null pointer dereference in xsk multi-buffer BPF helpers for ZC XDP.', 'keywords': 'xsk, multi-buffer, BPF helpers', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: f7f6aa8e24383fbb11ac55942e66da9660110f80
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f7f6aa8e24383fbb11ac55942e66da9660110f80
  Author Name: Maciej Fijalkowski
  Author Email: maciej.fijalkowski@intel.com
  Commit Date: 1706142246
  Commit Message:
    xsk: make xsk_buff_pool responsible for clearing xdp_buff::flags

XDP multi-buffer support introduced XDP_FLAGS_HAS_FRAGS flag that is
used by drivers to notify data path whether xdp_buff contains fragments
or not. Data path looks up mentioned flag on first buffer that occupies
the linear part of xdp_buff
  Parent Hashes: 269009893146c495f41e9572dd9319e787c2eba9
  Refs:  so drivers only modify it there. This is
sufficient for SKB and XDP_DRV modes as usually xdp_buff is allocated on
stack or it resides within struct representing driver's queue and
fragments are carried via skb_frag_t structs. IOW

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit ensures xsk_buff_pool handles the clearing of xdp_buff::flags for XDP multi-buffer support.', 'keywords': 'xdp_buff, xsk_buff_pool, flags', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: c8632acf193beac64bbdaebef013368c480bf74f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c8632acf193beac64bbdaebef013368c480bf74f
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142063
  Commit Message:
    Merge branch 'bpf-token'

Andrii Nakryiko says:

====================
BPF token

This patch set is a combination of three BPF token-related patch sets ([0]
  Parent Hashes: c9f115564561af63db662791e9a35fcf1dfefd2a 906ee42cb1be1152ef24465704cc89edc3f571c1
  Refs: 
[1]

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge and integrate BPF token-related patch sets into the main branch.', 'keywords': 'BPF, token, merge', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 906ee42cb1be1152ef24465704cc89edc3f571c1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 906ee42cb1be1152ef24465704cc89edc3f571c1
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142063
  Commit Message:
    selftests/bpf: Incorporate LSM policy to token-based tests

Add tests for LSM interactions (both bpf_token_capable and bpf_token_cmd
LSM hooks) with BPF token in bpf() subsystem. Now child process passes
back token FD for parent to be able to do tests with token originating
in "wrong" userns. But we also create token in initns and check that
token LSMs don't accidentally reject BPF operations when capable()
checks pass without BPF token.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-31-andrii@kernel.org

  Parent Hashes: fadf54935e859c4d512aed6ad54f639b87a3b4d3
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds tests for LSM interactions with BPF tokens in the bpf() subsystem.', 'keywords': 'LSM,bpf,tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: fadf54935e859c4d512aed6ad54f639b87a3b4d3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fadf54935e859c4d512aed6ad54f639b87a3b4d3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142063
  Commit Message:
    selftests/bpf: Add tests for LIBBPF_BPF_TOKEN_PATH envvar

Add new subtest validating LIBBPF_BPF_TOKEN_PATH envvar semantics.
Extend existing test to validate that LIBBPF_BPF_TOKEN_PATH allows to
disable implicit BPF token creation by setting envvar to empty string.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-30-andrii@kernel.org

  Parent Hashes: cac270ad79afe212ed7986e8d271c72521cd8212
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add new tests for validating LIBBPF_BPF_TOKEN_PATH environment variable semantics in selftests.', 'keywords': 'selftests,BPF,LIBBPF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cac270ad79afe212ed7986e8d271c72521cd8212
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cac270ad79afe212ed7986e8d271c72521cd8212
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142063
  Commit Message:
    libbpf: Support BPF token path setting through LIBBPF_BPF_TOKEN_PATH envvar

To allow external admin authority to override default BPF FS location
(/sys/fs/bpf) for implicit BPF token creation
  Parent Hashes: b73d08d1318a2dde5bacbab77d0e2fd2aa47c933
  Refs:  teach libbpf to recognize
LIBBPF_BPF_TOKEN_PATH envvar. If it is specified and user application
didn't explicitly specify bpf_token_path option

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for setting BPF token path via LIBBPF_BPF_TOKEN_PATH environment variable in libbpf.', 'keywords': 'libbpf, envvar, BPF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b73d08d1318a2dde5bacbab77d0e2fd2aa47c933
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b73d08d1318a2dde5bacbab77d0e2fd2aa47c933
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142063
  Commit Message:
    selftests/bpf: Add tests for BPF object load with implicit token

Add a test to validate libbpf's implicit BPF token creation from default
BPF FS location (/sys/fs/bpf). Also validate that disabling this
implicit BPF token creation works.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-28-andrii@kernel.org

  Parent Hashes: d5baf0cac627fb3a00d9235955a388e5930b6d0e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add tests for validating implicit BPF token creation and disabling in libbpf.', 'keywords': 'tests, implicit token, libbpf', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d5baf0cac627fb3a00d9235955a388e5930b6d0e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d5baf0cac627fb3a00d9235955a388e5930b6d0e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142063
  Commit Message:
    selftests/bpf: Add BPF object loading tests with explicit token passing

Add a few tests that attempt to load BPF object containing privileged
map
  Parent Hashes: 6b434b61b4d9e0e59f2947ce0f58f6fb4de048d8
  Refs:  program

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add tests to load BPF objects with explicit token passing in selftests.', 'keywords': 'tests,BPF object,token passing', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6b434b61b4d9e0e59f2947ce0f58f6fb4de048d8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6b434b61b4d9e0e59f2947ce0f58f6fb4de048d8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142062
  Commit Message:
    libbpf: Wire up BPF token support at BPF object level

Add BPF token support to BPF object-level functionality.

BPF token is supported by BPF object logic either as an explicitly
provided BPF token from outside (through BPF FS path)
  Parent Hashes: f3dcee938f485cf403ba2acf1f1548afe637c904
  Refs:  or implicitly
(unless prevented through bpf_object_open_opts).

Implicit mode is assumed to be the most common one for user namespaced
unprivileged workloads. The assumption is that privileged container
manager sets up default BPF FS mount point at /sys/fs/bpf with BPF token
delegation options (delegate_{cmds

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for BPF token at the BPF object level in libbpf.', 'keywords': 'BPF token, BPF object, libbpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f3dcee938f485cf403ba2acf1f1548afe637c904
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f3dcee938f485cf403ba2acf1f1548afe637c904
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142062
  Commit Message:
    libbpf: Wire up token_fd into feature probing logic

Adjust feature probing callbacks to take into account optional token_fd.
In unprivileged contexts
  Parent Hashes: 05f9cdd55d61cf9c6283fd3dc0edc7cad09bd7fe
  Refs:  some feature detectors would fail to detect
kernel support just because BPF program

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adjust feature probing logic to incorporate optional token_fd in unprivileged contexts.', 'keywords': 'libbpf, token_fd, feature-probing', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 05f9cdd55d61cf9c6283fd3dc0edc7cad09bd7fe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 05f9cdd55d61cf9c6283fd3dc0edc7cad09bd7fe
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142062
  Commit Message:
    libbpf: Move feature detection code into its own file

It's quite a lot of well isolated code
  Parent Hashes: d6dd1d49367ab03832b3c4b6f8211765d488c82b
  Refs:  so it seems like a good
candidate to move it out of libbpf.c to reduce its size.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-24-andrii@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactored libbpf by moving feature detection code to a separate file to reduce libbpf.c size.', 'keywords': 'libbpf,refactoring,feature detection', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d6dd1d49367ab03832b3c4b6f8211765d488c82b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d6dd1d49367ab03832b3c4b6f8211765d488c82b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142062
  Commit Message:
    libbpf: Further decouple feature checking logic from bpf_object

Add feat_supported() helper that accepts feature cache instead of
bpf_object. This allows low-level code in bpf.c to not know or care
about higher-level concept of bpf_object
  Parent Hashes: ea4d587354eb5e32dfa93cebb055b072f518b193
  Refs:  yet it will be able to utilize
custom feature checking in cases where BPF token might influence the
outcome.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-23-andrii@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a feat_supported() helper to decouple feature checking logic from bpf_object in libbpf.', 'keywords': 'feat_supported, feature checking, libbpf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ea4d587354eb5e32dfa93cebb055b072f518b193
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ea4d587354eb5e32dfa93cebb055b072f518b193
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142062
  Commit Message:
    libbpf: Split feature detectors definitions from cached results

Split a list of supported feature detectors with their corresponding
callbacks from actual cached supported/missing values. This will allow
to have more flexible per-token or per-object feature detectors in
subsequent refactorings.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-22-andrii@kernel.org

  Parent Hashes: 0350f9d99ee538f2ccf179f0216e704a5f39b317
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors libbpf feature detectors to separate definitions from cached results for improved flexibility.', 'keywords': 'libbpf,refactoring,feature detectors', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0350f9d99ee538f2ccf179f0216e704a5f39b317
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0350f9d99ee538f2ccf179f0216e704a5f39b317
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142062
  Commit Message:
    selftests/bpf: Utilize string values for delegate_xxx mount options

Use both hex-based and string-based way to specify delegate mount
options for BPF FS.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-21-andrii@kernel.org

  Parent Hashes: 6c1752e0b6ca8c7021d6da3926738d8d88f601a9
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates selftests to support string values for delegate mount options in BPF file system.', 'keywords': 'selftests, BPF FS, mount options', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6c1752e0b6ca8c7021d6da3926738d8d88f601a9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6c1752e0b6ca8c7021d6da3926738d8d88f601a9
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142062
  Commit Message:
    bpf: Support symbolic BPF FS delegation mount options

Besides already supported special "any" value and hex bit mask
  Parent Hashes: aeaa97b006ddc7a8bf13e4adfdd02b3526f648a7
  Refs:  support
string-based parsing of delegation masks based on exact enumerator
names. Utilize BTF information of `enum bpf_cmd`

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance BPF FS mount options to support symbolic delegation masks using BTF enum information.', 'keywords': 'BPF, symbolic, delegation', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: aeaa97b006ddc7a8bf13e4adfdd02b3526f648a7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: aeaa97b006ddc7a8bf13e4adfdd02b3526f648a7
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142062
  Commit Message:
    bpf: Fail BPF_TOKEN_CREATE if no delegation option was set on BPF FS

It's quite confusing in practice when it's possible to successfully
create a BPF token from BPF FS that didn't have any of delegate_xxx
mount options set up. While it's not wrong
  Parent Hashes: 0054493e5141b16e316b8c52d6aa534397e48b6c
  Refs:  it's actually more
meaningful to reject BPF_TOKEN_CREATE with specific error code (-ENOENT)
to let user-space know that no token delegation is setup up.

So

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fail BPF_TOKEN_CREATE if no delegation option is set on BPF FS to provide meaningful user-space error.', 'keywords': 'BPF_TOKEN_CREATE,delegation,ENOENT', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0054493e5141b16e316b8c52d6aa534397e48b6c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0054493e5141b16e316b8c52d6aa534397e48b6c
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142062
  Commit Message:
    bpf
  Parent Hashes: fcb9597ff7d1f7c772c1237dd2d04dd44e622501
  Refs: selinux: Allocate bpf_security_struct per BPF token

Utilize newly added bpf_token_create/bpf_token_free LSM hooks to
allocate struct bpf_security_struct for each BPF token object in
SELinux. This just follows similar pattern for BPF prog and map.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-18-andrii@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add LSM hooks to allocate security structure for BPF token objects in SELinux.', 'keywords': 'LSM hooks, SELinux, BPF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: fcb9597ff7d1f7c772c1237dd2d04dd44e622501
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fcb9597ff7d1f7c772c1237dd2d04dd44e622501
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142062
  Commit Message:
    selftests/bpf: Add BPF token-enabled tests

Add a selftest that attempts to conceptually replicate intended BPF
token use cases inside user namespaced container.

Child process is forked. It is then put into its own userns and mountns.
Child creates BPF FS context object. This ensures child userns is
captured as the owning userns for this instance of BPF FS. Given setting
delegation mount options is privileged operation
  Parent Hashes: 404cbc149c3866e6ec2bfe1bce52c8864e1f81fc
  Refs:  we ensure that child
cannot set them.

This context is passed back to privileged parent process through Unix
socket

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds selftests for BPF token use cases within user namespaced containers.', 'keywords': 'selftests,BPF,userns', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 404cbc149c3866e6ec2bfe1bce52c8864e1f81fc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 404cbc149c3866e6ec2bfe1bce52c8864e1f81fc
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142062
  Commit Message:
    libbpf: Add BPF token support to bpf_prog_load() API

Wire through token_fd into bpf_prog_load().

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-16-andrii@kernel.org

  Parent Hashes: a3d63e85253b6c9b6aa34b99208e835358a91320
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Add BPF token support in libbpf library's bpf_prog_load() API.", 'keywords': 'BPF token support, bpf_prog_load, libbpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a3d63e85253b6c9b6aa34b99208e835358a91320
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a3d63e85253b6c9b6aa34b99208e835358a91320
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142062
  Commit Message:
    libbpf: Add BPF token support to bpf_btf_load() API

Allow user to specify token_fd for bpf_btf_load() API that wraps
kernel's BPF_BTF_LOAD command. This allows loading BTF from unprivileged
process as long as it has BPF token allowing BPF_BTF_LOAD command
  Parent Hashes: 364f848375af311150210a1ad3c5bcb800b65b48
  Refs:  which
can be created and delegated by privileged process.

Wire through new btf_flags as well

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds BPF token support to the bpf_btf_load() API for unprivileged process access to BPF_BTF_LOAD.', 'keywords': 'BPF token support, bpf_btf_load API, unprivileged access', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 364f848375af311150210a1ad3c5bcb800b65b48
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 364f848375af311150210a1ad3c5bcb800b65b48
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142061
  Commit Message:
    libbpf: Add BPF token support to bpf_map_create() API

Add ability to provide token_fd for BPF_MAP_CREATE command through
bpf_map_create() API.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-14-andrii@kernel.org

  Parent Hashes: 639ecd7d6247c48a0175f5b458b648f5d4b6dc34
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added support for providing token_fd in BPF_MAP_CREATE using bpf_map_create() API in libbpf.', 'keywords': 'libbpf, BPF token, bpf_map_create', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 639ecd7d6247c48a0175f5b458b648f5d4b6dc34
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 639ecd7d6247c48a0175f5b458b648f5d4b6dc34
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142061
  Commit Message:
    libbpf: Add bpf_token_create() API

Add low-level wrapper API for BPF_TOKEN_CREATE command in bpf() syscall.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-13-andrii@kernel.org

  Parent Hashes: f568a3d49af9aed813a184353592efe29b0e3d16
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduced bpf_token_create() API as a low-level wrapper for BPF_TOKEN_CREATE syscall.', 'keywords': 'bpf_token_create, API, syscall', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f568a3d49af9aed813a184353592efe29b0e3d16
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f568a3d49af9aed813a184353592efe29b0e3d16
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142061
  Commit Message:
    bpf
  Parent Hashes: a2431c7eabcf9bd5a1e7a1f7ecded40fdda4a8c5
  Refs: lsm: Add BPF token LSM hooks

Wire up bpf_token_create and bpf_token_free LSM hooks

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce LSM hooks for bpf_token_create and bpf_token_free in BPF.', 'keywords': 'LSM hooks, bpf_token_create, bpf_token_free', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: a2431c7eabcf9bd5a1e7a1f7ecded40fdda4a8c5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a2431c7eabcf9bd5a1e7a1f7ecded40fdda4a8c5
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142061
  Commit Message:
    bpf
  Parent Hashes: 1b67772e4e3f16cd647b229cae95fc06d120be08
  Refs: lsm: Refactor bpf_map_alloc/bpf_map_free LSM hooks

Similarly to bpf_prog_alloc LSM hook

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor bpf_map_alloc and bpf_map_free LSM hooks for consistency with bpf_prog_alloc.', 'keywords': 'refactor,bpf_map_alloc,LSM', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: 1b67772e4e3f16cd647b229cae95fc06d120be08
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1b67772e4e3f16cd647b229cae95fc06d120be08
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142061
  Commit Message:
    bpf
  Parent Hashes: d79a3549754725bb90e58104417449edddf3da3d
  Refs: lsm: Refactor bpf_prog_alloc/bpf_prog_free LSM hooks

Based on upstream discussion ([0])

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor LSM hooks for bpf_prog_alloc and bpf_prog_free functions.', 'keywords': 'LSM hooks, refactor, allocation', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: d79a3549754725bb90e58104417449edddf3da3d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d79a3549754725bb90e58104417449edddf3da3d
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142061
  Commit Message:
    bpf: Consistently use BPF token throughout BPF verifier logic

Remove remaining direct queries to perfmon_capable() and bpf_capable()
in BPF verifier logic and instead use BPF token (if available) to make
decisions about privileges.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-9-andrii@kernel.org

  Parent Hashes: bbc1d24724e110b86a1a7c3c1724ce0d62cc1e2e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates the BPF verifier to consistently use BPF tokens for privilege checks.', 'keywords': 'BPF token, verifier, privileges', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bbc1d24724e110b86a1a7c3c1724ce0d62cc1e2e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bbc1d24724e110b86a1a7c3c1724ce0d62cc1e2e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142061
  Commit Message:
    bpf: Take into account BPF token when fetching helper protos

Instead of performing unconditional system-wide bpf_capable() and
perfmon_capable() calls inside bpf_base_func_proto() function (and other
similar ones) to determine eligibility of a given BPF helper for a given
program
  Parent Hashes: caf8f28e036c4ba1e823355da6c0c01c39e70ab9
  Refs:  use previously recorded BPF token during BPF_PROG_LOAD command
handling to inform the decision.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-8-andrii@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enhances BPF helper eligibility check using BPF token instead of global capability checks.', 'keywords': 'BPF token, helper protos, eligibility', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: caf8f28e036c4ba1e823355da6c0c01c39e70ab9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: caf8f28e036c4ba1e823355da6c0c01c39e70ab9
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142061
  Commit Message:
    bpf: Add BPF token support to BPF_PROG_LOAD command

Add basic support of BPF token to BPF_PROG_LOAD. BPF_F_TOKEN_FD flag
should be set in prog_flags field when providing prog_token_fd.

Wire through a set of allowed BPF program types and attach types
  Parent Hashes: 9ea7c4bf17e39d463eb4782f948f401d9764b1b3
  Refs: 
derived from BPF FS at BPF token creation time. Then make sure we
perform bpf_token_capable() checks everywhere where it's relevant.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20240124022127.2379740-7-andrii@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add BPF token support to BPF_PROG_LOAD command with required security checks.', 'keywords': 'BPF token, BPF_PROG_LOAD, prog_flags', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9ea7c4bf17e39d463eb4782f948f401d9764b1b3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9ea7c4bf17e39d463eb4782f948f401d9764b1b3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142061
  Commit Message:
    bpf: Add BPF token support to BPF_BTF_LOAD command

Accept BPF token FD in BPF_BTF_LOAD command to allow BTF data loading
through delegated BPF token. BPF_F_TOKEN_FD flag has to be specified
when passing BPF token FD. Given BPF_BTF_LOAD command didn't have flags
field before
  Parent Hashes: a177fc2bf6fd83704854feaf7aae926b1df4f0b9
  Refs:  we also add btf_flags field.

BTF loading is a pretty straightforward operation

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add BPF token support to BPF_BTF_LOAD command for loading BTF data using delegated tokens.', 'keywords': 'BPF token, BTF_LOAD, delegation', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a177fc2bf6fd83704854feaf7aae926b1df4f0b9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a177fc2bf6fd83704854feaf7aae926b1df4f0b9
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142061
  Commit Message:
    bpf: Add BPF token support to BPF_MAP_CREATE command

Allow providing token_fd for BPF_MAP_CREATE command to allow controlled
BPF map creation from unprivileged process through delegated BPF token.
New BPF_F_TOKEN_FD flag is added to specify together with BPF token FD
for BPF_MAP_CREATE command.

Wire through a set of allowed BPF map types to BPF token
  Parent Hashes: 35f96de04127d332a5c5e8a155d31f452f88c76d
  Refs:  derived from
BPF FS at BPF token creation time. This

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds BPF token support for controlled map creation from unprivileged processes in the BPF_MAP_CREATE command.', 'keywords': 'BPF token, BPF_MAP_CREATE, unprivileged', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 35f96de04127d332a5c5e8a155d31f452f88c76d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 35f96de04127d332a5c5e8a155d31f452f88c76d
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142061
  Commit Message:
    bpf: Introduce BPF token object

Add new kind of BPF kernel object
  Parent Hashes: 6fe01d3cbb924a72493eb3f4722dfcfd1c194234
  Refs:  BPF token. BPF token is meant to
allow delegating privileged BPF functionality

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces a new BPF token object to delegate privileged BPF functionality.', 'keywords': 'BPF token, kernel object, privileged functionality', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 6fe01d3cbb924a72493eb3f4722dfcfd1c194234
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6fe01d3cbb924a72493eb3f4722dfcfd1c194234
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142060
  Commit Message:
    bpf: Add BPF token delegation mount options to BPF FS

Add few new mount options to BPF FS that allow to specify that a given
BPF FS instance allows creation of BPF token (added in the next patch)
  Parent Hashes: ed1ad5a7415de8be121055e7ab1303d2be5407e0
  Refs: 
and what sort of operations are allowed under BPF token. As such

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add new mount options to BPF FS for BPF token delegation.', 'keywords': 'BPF FS,mount options,token', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ed1ad5a7415de8be121055e7ab1303d2be5407e0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ed1ad5a7415de8be121055e7ab1303d2be5407e0
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706142060
  Commit Message:
    bpf: Align CAP_NET_ADMIN checks with bpf_capable() approach

Within BPF syscall handling code CAP_NET_ADMIN checks stand out a bit
compared to CAP_BPF and CAP_PERFMON checks. For the latter
  Parent Hashes: c9f115564561af63db662791e9a35fcf1dfefd2a
  Refs:  CAP_BPF or
CAP_PERFMON are checked first

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Aligns CAP_NET_ADMIN checks with existing bpf_capable() approach for consistency in BPF syscall handling.', 'keywords': 'CAP_NET_ADMIN,bpf_capable,BPF', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c9f115564561af63db662791e9a35fcf1dfefd2a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c9f115564561af63db662791e9a35fcf1dfefd2a
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1706141979
  Commit Message:
    libbpf: Ensure undefined bpf_attr field stays 0

The commit 9e926acda0c2 ("libbpf: Find correct module BTFs for struct_ops maps and progs.")
sets a newly added field (value_type_btf_obj_fd) to -1 in libbpf when
the caller of the libbpf's bpf_map_create did not define this field by
passing a NULL "opts" or passing in a "opts" that does not cover this
new field. OPT_HAS(opts
  Parent Hashes: ce6f6cffaeaa0a3bcdafcae7fe03c68c3afae631
  Refs:  field) is used to decide if the field is
defined or not:

	((opts) && opts->sz >= offsetofend(typeof(*(opts))

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit ensures that undefined bpf_attr fields in libbpf remain zero to prevent unintended behavior.', 'keywords': 'libbpf, bpf_attr, zero', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ce6f6cffaeaa0a3bcdafcae7fe03c68c3afae631
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ce6f6cffaeaa0a3bcdafcae7fe03c68c3afae631
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1706119426
  Commit Message:
    selftests/bpf: Wait for the netstamp_needed_key static key to be turned on

After the previous patch that speeded up the test (by avoiding neigh
discovery in IPv6)
  Parent Hashes: 177f1d083a19af58f4b1206d299ed73689249fd8
  Refs:  the BPF CI occasionally hits this error:

rcv tstamp unexpected pkt rcv tstamp: actual 0 == expected 0

The test complains about the cmsg returned from the recvmsg() does not
have the rcv timestamp. Setting skb->tstamp or not is
controlled by a kernel static key "netstamp_needed_key". The static
key is enabled whenever this is at least one sk with the SOCK_TIMESTAMP
set.

The test_redirect_dtime does use setsockopt() to turn on
the SOCK_TIMESTAMP for the reading sk. In the kernel
net_enable_timestamp() has a delay to enable the "netstamp_needed_key"
when CONFIG_JUMP_LABEL is set. This potential delay is the likely reason
for packet missing rcv timestamp occasionally.

This patch is to create udp sockets with SOCK_TIMESTAMP set.
It sends and receives some packets until the received packet
has a rcv timestamp. It currently retries at most 5 times with 1s
in between. This should be enough to wait for the "netstamp_needed_key".
It then holds on to the socket and only closes it at the end of the test.
This guarantees that the test has the "netstamp_needed_key" key turned
on from the beginning.

To simplify the udp sockets setup

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates selftests to ensure netstamp_needed_key static key is active for correct timestamping in tests.', 'keywords': 'selftests, netstamp_needed_key, timestamp', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 177f1d083a19af58f4b1206d299ed73689249fd8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 177f1d083a19af58f4b1206d299ed73689249fd8
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1706119426
  Commit Message:
    selftests/bpf: Fix the flaky tc_redirect_dtime test

BPF CI has been reporting the tc_redirect_dtime test failing
from time to time:

test_inet_dtime:PASS:setns src 0 nsec
(network_helpers.c:253: errno: No route to host) Failed to connect to server
close_netns:PASS:setns 0 nsec
test_inet_dtime:FAIL:connect_to_fd unexpected connect_to_fd: actual -1 < expected 0
test_tcp_clear_dtime:PASS:tcp ip6 clear dtime ingress_fwdns_p100 0 nsec

The connect_to_fd failure (EHOSTUNREACH) is from the
test_tcp_clear_dtime() test and it is the very first IPv6 traffic
after setting up all the links
  Parent Hashes: d47b9f68d2899b390a3655f2365f332a63396adf
  Refs:  addresses

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes the flaky tc_redirect_dtime test in BPF selftests due to IPv6 traffic issues.', 'keywords': 'flaky, tc_redirect_dtime, test', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d47b9f68d2899b390a3655f2365f332a63396adf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d47b9f68d2899b390a3655f2365f332a63396adf
  Author Name: Dima Tisnek
  Author Email: dimaqq@gmail.com
  Commit Date: 1706070597
  Commit Message:
    libbpf: Correct bpf_core_read.h comment wrt bpf_core_relo struct

Past commit ([0]) removed the last vestiges of struct bpf_field_reloc
  Parent Hashes: 32749605e3a9726f2cf277cbc032cf243c2da689
  Refs: 
it's called struct bpf_core_relo now.

  [0] 28b93c64499a ("libbpf: Clean up and improve CO-RE reloc logging")

Signed-off-by: Dima Tisnek <dimaqq@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240121060126.15650-1-dimaqq@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit corrects comments in libbpf related to struct bpf_core_relo.', 'keywords': 'libbpf, comments, bpf_core_relo', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 32749605e3a9726f2cf277cbc032cf243c2da689
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 32749605e3a9726f2cf277cbc032cf243c2da689
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706070486
  Commit Message:
    Merge branch 'skip-callback-tests-if-jit-is-disabled-in-test_verifier'

Tiezhu Yang says:

====================
Skip callback tests if jit is disabled in test_verifier

Thanks very much for the feedbacks from Eduard
  Parent Hashes: 8b593021319d4893a8fbeb7bd1f668657e68403c 0b50478fd8774f42721f4297293b711e17bc4b7b
  Refs:  John

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Skip eBPF callback tests in test_verifier when JIT is disabled.', 'keywords': 'callback,JIT,test_verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0b50478fd8774f42721f4297293b711e17bc4b7b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0b50478fd8774f42721f4297293b711e17bc4b7b
  Author Name: Tiezhu Yang
  Author Email: yangtiezhu@loongson.cn
  Commit Date: 1706070461
  Commit Message:
    selftests/bpf: Skip callback tests if jit is disabled in test_verifier

If CONFIG_BPF_JIT_ALWAYS_ON is not set and bpf_jit_enable is 0
  Parent Hashes: 15b4f88dcc0a751f790bfea5ef9dcc6385c62236
  Refs:  there
exist 6 failed tests.

  [root@linux bpf]# echo 0 > /proc/sys/net/core/bpf_jit_enable
  [root@linux bpf]# echo 0 > /proc/sys/kernel/unprivileged_bpf_disabled
  [root@linux bpf]# ./test_verifier | grep FAIL
  #106/p inline simple bpf_loop call FAIL
  #107/p don't inline bpf_loop call

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Skip callback tests in selftests/bpf if JIT is disabled in test_verifier.', 'keywords': 'skip, JIT, tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 15b4f88dcc0a751f790bfea5ef9dcc6385c62236
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 15b4f88dcc0a751f790bfea5ef9dcc6385c62236
  Author Name: Tiezhu Yang
  Author Email: yangtiezhu@loongson.cn
  Commit Date: 1706070377
  Commit Message:
    selftests/bpf: Move is_jit_enabled() into testing_helpers

Currently
  Parent Hashes: 8b593021319d4893a8fbeb7bd1f668657e68403c
  Refs:  is_jit_enabled() is only used in test_progs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The function is_jit_enabled() is moved to testing_helpers for better organization in selftests.', 'keywords': 'selftests,bpf,testing_helpers', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 8b593021319d4893a8fbeb7bd1f668657e68403c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8b593021319d4893a8fbeb7bd1f668657e68403c
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1706058772
  Commit Message:
    Merge branch 'Registrating struct_ops types from modules'

Kui-Feng Lee says:

====================
Given the current constraints of the current implementation
  Parent Hashes: b7d1af3791036a619ca8ffde5f832111b05ca833 0253e0590e2dc46996534371d56b5297099aed4e
  Refs: 
struct_ops cannot be registered dynamically. This presents a
significant limitation for modules like coming fuse-bpf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit addresses the limitation of dynamically registering struct_ops in eBPF modules.', 'keywords': 'struct_ops,dynamic registration,modules', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 0253e0590e2dc46996534371d56b5297099aed4e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0253e0590e2dc46996534371d56b5297099aed4e
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706058772
  Commit Message:
    selftests/bpf: test case for register_bpf_struct_ops().

Create a new struct_ops type called bpf_testmod_ops within the bpf_testmod
module. When a struct_ops object is registered
  Parent Hashes: 7c81c2490c73e614c6d48e4f339f4f224140b565
  Refs:  the bpf_testmod module will
invoke test_2 from the module.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240119225005.668602-15-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a new test case for register_bpf_struct_ops in the bpf_testmod module.', 'keywords': 'bpf_testmod,struct_ops,test case', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7c81c2490c73e614c6d48e4f339f4f224140b565
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7c81c2490c73e614c6d48e4f339f4f224140b565
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706058772
  Commit Message:
    bpf: export btf_ctx_access to modules.

The module requires the use of btf_ctx_access() to invoke
bpf_tracing_btf_ctx_access() from a module. This function is valuable for
implementing validation functions that ensure proper access to ctx.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240119225005.668602-14-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 9e926acda0c2e21bca431a1818665ddcd6939755
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit exports btf_ctx_access to modules for implementing validation functions in eBPF.', 'keywords': 'btf_ctx_access, modules, validation', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['kprobe/uprobe/ftrace like programs', 'tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9e926acda0c2e21bca431a1818665ddcd6939755
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9e926acda0c2e21bca431a1818665ddcd6939755
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706058772
  Commit Message:
    libbpf: Find correct module BTFs for struct_ops maps and progs.

Locate the module BTFs for struct_ops maps and progs and pass them to the
kernel. This ensures that the kernel correctly resolves type IDs from the
appropriate module BTFs.

For the map of a struct_ops object
  Parent Hashes: f6be98d19985411ca1f3d53413d94d5b7f41c200
  Refs:  the FD of the module BTF is set to
bpf_map to keep a reference to the module BTF. The FD is passed to the
kernel as value_type_btf_obj_fd when the struct_ops object is loaded.

For a bpf_struct_ops prog

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit ensures correct module BTFs are used for struct_ops maps and progs in libbpf.', 'keywords': 'libbpf, module BTFs, struct_ops', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f6be98d19985411ca1f3d53413d94d5b7f41c200
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f6be98d19985411ca1f3d53413d94d5b7f41c200
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706058766
  Commit Message:
    bpf
  Parent Hashes: 612d087d4ba54cef47946e22e5dabad762dd7ed5
  Refs:  net: switch to dynamic registration

Replace the static list of struct_ops types with per-btf struct_ops_tab to
enable dynamic registration.

Both bpf_dummy_ops and bpf_tcp_ca now utilize the registration function
instead of being listed in bpf_struct_ops_types.h.

Cc: netdev@vger.kernel.org
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240119225005.668602-12-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce dynamic registration for bpf struct operations using per-btf struct_ops_tab in lieu of static listing.', 'keywords': 'dynamic registration, struct_ops, bpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['socket like programs', 'tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 612d087d4ba54cef47946e22e5dabad762dd7ed5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 612d087d4ba54cef47946e22e5dabad762dd7ed5
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706056665
  Commit Message:
    bpf: validate value_type

A value_type should consist of three components: refcnt
  Parent Hashes: e3f87fdfed7b770dd7066b02262b12747881e76d
  Refs:  state

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit ensures that value_type in eBPF is validated to contain three components including refcnt.', 'keywords': 'validate,value_type,refcnt', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e3f87fdfed7b770dd7066b02262b12747881e76d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e3f87fdfed7b770dd7066b02262b12747881e76d
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706056664
  Commit Message:
    bpf: hold module refcnt in bpf_struct_ops map creation and prog verification.

To ensure that a module remains accessible whenever a struct_ops object of
a struct_ops type provided by the module is still in use.

struct bpf_struct_ops_map doesn't hold a refcnt to btf anymore since a
module will hold a refcnt to it's btf already. But
  Parent Hashes: fcc2c1fb0651477c8ed78a3a293c175ccd70697a
  Refs:  struct_ops programs are
different. They hold their associated btf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Ensure module refcount is maintained for struct_ops objects during map creation and program verification.', 'keywords': 'module, refcnt, struct_ops', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fcc2c1fb0651477c8ed78a3a293c175ccd70697a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fcc2c1fb0651477c8ed78a3a293c175ccd70697a
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706056664
  Commit Message:
    bpf: pass attached BTF to the bpf_struct_ops subsystem

Pass the fd of a btf from the userspace to the bpf() syscall
  Parent Hashes: 689423db3bda2244c24db8a64de4cdb37be1de41
  Refs:  and then
convert the fd into a btf. The btf is generated from the module that
defines the target BPF struct_ops type.

In order to inform the kernel about the module that defines the target
struct_ops type

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added functionality to pass BTF fd from userspace to bpf() syscall for struct_ops support.', 'keywords': 'BTF, struct_ops, syscall', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 689423db3bda2244c24db8a64de4cdb37be1de41
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 689423db3bda2244c24db8a64de4cdb37be1de41
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706056664
  Commit Message:
    bpf: lookup struct_ops types from a given module BTF.

This is a preparation for searching for struct_ops types from a specified
module. BTF is always btf_vmlinux now. This patch passes a pointer of BTF
to bpf_struct_ops_find_value() and bpf_struct_ops_find(). Once the new
registration API of struct_ops types is used
  Parent Hashes: 1338b93346587a2a6ac79bbcf55ef5b357745573
  Refs:  other BTFs besides
btf_vmlinux can also be passed to them.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240119225005.668602-8-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit prepares for searching struct_ops types from specified module BTF by passing BTF pointers to struct_ops functions.', 'keywords': 'struct_ops,BTF,module', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1338b93346587a2a6ac79bbcf55ef5b357745573
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1338b93346587a2a6ac79bbcf55ef5b357745573
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706056664
  Commit Message:
    bpf: pass btf object id in bpf_map_info.

Include btf object id (btf_obj_id) in bpf_map_info so that tools (ex:
bpftools struct_ops dump) know the correct btf from the kernel to look up
type information of struct_ops types.

Since struct_ops types can be defined and registered in a module. The
type information of a struct_ops type are defined in the btf of the
module defining it.  The userspace tools need to know which btf is for
the module defining a struct_ops type.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240119225005.668602-7-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 47f4f657acd5d04c78c5c5ac7022cba9ce3b4a7d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds btf_obj_id to bpf_map_info for proper type information lookup by tools.', 'keywords': 'btf_obj_id,bpf_map_info,struct_ops', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 47f4f657acd5d04c78c5c5ac7022cba9ce3b4a7d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 47f4f657acd5d04c78c5c5ac7022cba9ce3b4a7d
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706056664
  Commit Message:
    bpf: make struct_ops_map support btfs other than btf_vmlinux.

Once new struct_ops can be registered from modules
  Parent Hashes: e61995111a76633376419d1bccede8696e94e6e5
  Refs:  btf_vmlinux is no
longer the only btf that struct_ops_map would face.  st_map should remember
what btf it should use to get type information.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240119225005.668602-6-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit extends struct_ops_map to support BTFs from modules beyond btf_vmlinux.', 'keywords': 'struct_ops_map,BTF,module', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e61995111a76633376419d1bccede8696e94e6e5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e61995111a76633376419d1bccede8696e94e6e5
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706056664
  Commit Message:
    bpf: add struct_ops_tab to btf.

Maintain a registry of registered struct_ops types in the per-btf (module)
struct_ops_tab. This registry allows for easy lookup of struct_ops types
that are registered by a specific module.

It is a preparation work for supporting kernel module struct_ops in a
latter patch. Each struct_ops will be registered under its own kernel
module btf and will be stored in the newly added btf->struct_ops_tab. The
bpf verifier and bpf syscall (e.g. prog and map cmd) can find the
struct_ops and its btf type/size/id... information from
btf->struct_ops_tab.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240119225005.668602-5-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 4c5763ed996a61b51d721d0968d0df957826ea49
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds struct_ops_tab to BTF for registering and looking up struct_ops types within kernel modules.', 'keywords': 'struct_ops BTF registry', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4c5763ed996a61b51d721d0968d0df957826ea49
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4c5763ed996a61b51d721d0968d0df957826ea49
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706056664
  Commit Message:
    bpf
  Parent Hashes: 95678395386d45fa0a075d2e7a6866326a469d76
  Refs:  net: introduce bpf_struct_ops_desc.

Move some of members of bpf_struct_ops to bpf_struct_ops_desc.  type_id is
unavailabe in bpf_struct_ops anymore. Modules should get it from the btf
received by kmod's init function.

Cc: netdev@vger.kernel.org
Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240119225005.668602-4-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates bpf_struct_ops by moving members to bpf_struct_ops_desc and modifies BTF handling.', 'keywords': 'bpf_struct_ops,bpf_struct_ops_desc,BTF', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 95678395386d45fa0a075d2e7a6866326a469d76
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 95678395386d45fa0a075d2e7a6866326a469d76
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706056663
  Commit Message:
    bpf: get type information with BTF_ID_LIST

Get ready to remove bpf_struct_ops_init() in the future. By using
BTF_ID_LIST
  Parent Hashes: 3b1f89e747cd4b24244f2798a35d28815b744303
  Refs:  it is possible to gather type information while building
instead of runtime.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240119225005.668602-3-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhances BTF usage by enabling type information gathering during the build to eventually remove bpf_struct_ops_init().', 'keywords': 'BTF_ID_LIST,type information,bpf_struct_ops_init', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 3b1f89e747cd4b24244f2798a35d28815b744303
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3b1f89e747cd4b24244f2798a35d28815b744303
  Author Name: Kui-Feng Lee
  Author Email: thinker.li@gmail.com
  Commit Date: 1706056663
  Commit Message:
    bpf: refactory struct_ops type initialization to a function.

Move the majority of the code to bpf_struct_ops_init_one()
  Parent Hashes: b7d1af3791036a619ca8ffde5f832111b05ca833
  Refs:  which can then
be utilized for the initialization of newly registered dynamically
allocated struct_ops types in the following patches.

Signed-off-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/20240119225005.668602-2-thinker.li@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor the struct_ops initialization into a dedicated function for dynamic type registration.', 'keywords': 'refactor, struct_ops, initialization', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b7d1af3791036a619ca8ffde5f832111b05ca833
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b7d1af3791036a619ca8ffde5f832111b05ca833
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1706054742
  Commit Message:
    Merge branch 'bpf-add-cookies-retrieval-for-perf-kprobe-multi-links'

Jiri Olsa says:

====================
bpf: Add cookies retrieval for perf/kprobe multi links

hi
  Parent Hashes: bbc094b3052647c188d6f155f5c09cb9492ce106 b0dc037399b19a777d569dbd9e2e9bbd62f3b3b1
  Refs: 
this patchset adds support to retrieve cookies from existing tracing
links that still did not support it plus changes to bpftool to display
them. It's leftover we discussed some time ago [1].

thanks

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds cookie retrieval support for perf and kprobe multi-links and updates bpftool to display them.', 'keywords': 'cookies,retrieval,bpftool', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: b0dc037399b19a777d569dbd9e2e9bbd62f3b3b1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b0dc037399b19a777d569dbd9e2e9bbd62f3b3b1
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1706054728
  Commit Message:
    bpftool: Display cookie for kprobe multi link

Displaying cookies for kprobe multi link
  Parent Hashes: 54258324b934aa8552c239c443272ec7aea55285
  Refs:  in plain mode:

  # bpftool link
  ...
  1397: kprobe_multi  prog 47532
          kretprobe.multi  func_cnt 3
          addr             cookie           func [module]
          ffffffff82b370c0 3                bpf_fentry_test1
          ffffffff82b39780 1                bpf_fentry_test2
          ffffffff82b397a0 2                bpf_fentry_test3

And in json mode:

  # bpftool link -j | jq
  ...
    {
      "id": 1397

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance bpftool to display cookies for kprobe multi links in plain and JSON mode.', 'keywords': 'bpftool,kprobe,cookie', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 54258324b934aa8552c239c443272ec7aea55285
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 54258324b934aa8552c239c443272ec7aea55285
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1706054728
  Commit Message:
    bpftool: Display cookie for perf event link probes

Displaying cookie for perf event link probes
  Parent Hashes: b7896486688af36e3bc5e27a6d5369cc5dcbcf69
  Refs:  in plain mode:

  # bpftool link
  17: perf_event  prog 90
          kprobe ffffffff82b1c2b0 bpf_fentry_test1  cookie 3735928559
  18: perf_event  prog 90
          kretprobe ffffffff82b1c2b0 bpf_fentry_test1  cookie 3735928559
  20: perf_event  prog 92
          tracepoint sched_switch  cookie 3735928559
  21: perf_event  prog 93
          event software:page-faults  cookie 3735928559
  22: perf_event  prog 91
          uprobe /proc/self/exe+0xd703c  cookie 3735928559

And in json mode:

  # bpftool link -j | jq

  {
    "id": 30

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a feature to display cookies for perf event links in bpftool.', 'keywords': 'bpftool, perf event, cookie', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: b7896486688af36e3bc5e27a6d5369cc5dcbcf69
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b7896486688af36e3bc5e27a6d5369cc5dcbcf69
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1706054728
  Commit Message:
    selftests/bpf: Add fill_link_info test for perf event

Adding fill_link_info test for perf event and testing we
get its values back through the bpf_link_info interface.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/r/20240119110505.400573-7-jolsa@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: d74179708473c649c653f1db280e29875a532e99
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test case to verify bpf_link_info values for perf events.', 'keywords': 'fill_link_info, perf event, bpf_link_info', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: d74179708473c649c653f1db280e29875a532e99
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d74179708473c649c653f1db280e29875a532e99
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1706054727
  Commit Message:
    selftests/bpf: Add cookies check for perf_event fill_link_info test

Now that we get cookies for perf_event probes
  Parent Hashes: 59a89706c40c153a74a3a9570b4d696cf9eebb0b
  Refs:  adding tests
for cookie for kprobe/uprobe/tracepoint.

The perf_event test needs to be added completely and is coming
in following change.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/r/20240119110505.400573-6-jolsa@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftest for cookies check in perf_event fill_link_info for kprobe/uprobe/tracepoint.', 'keywords': 'cookies, perf_event, tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs', 'tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 59a89706c40c153a74a3a9570b4d696cf9eebb0b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 59a89706c40c153a74a3a9570b4d696cf9eebb0b
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1706054727
  Commit Message:
    selftests/bpf: Add cookies check for kprobe_multi fill_link_info test

Adding cookies check for kprobe_multi fill_link_info test
  Parent Hashes: 2adb2e0fcdf3c6d8e28a5a9c33e458e1037ae5ad
  Refs: 
plus tests for invalid values related to cookies.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/r/20240119110505.400573-5-jolsa@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add cookies check and tests for kprobe_multi fill_link_info in selftests/bpf.', 'keywords': 'cookies,kprobe_multi,tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 2adb2e0fcdf3c6d8e28a5a9c33e458e1037ae5ad
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2adb2e0fcdf3c6d8e28a5a9c33e458e1037ae5ad
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1706054727
  Commit Message:
    bpftool: Fix wrong free call in do_show_link

The error path frees wrong array
  Parent Hashes: 9fd112b1f82b587ffb12fb67dd032f551fdb571a
  Refs:  it should be ref_ctr_offsets.

Acked-by: Yafang Shao <laoar.shao@gmail.com>
Reviewed-by: Quentin Monnet <quentin@isovalent.com>
Fixes: a7795698f8b6 ("bpftool: Add support to display uprobe_multi links")
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/r/20240119110505.400573-4-jolsa@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Fixed incorrect memory deallocation in bpftool's do_show_link function.", 'keywords': 'bpftool, free call, do_show_link', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9fd112b1f82b587ffb12fb67dd032f551fdb571a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9fd112b1f82b587ffb12fb67dd032f551fdb571a
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1706054727
  Commit Message:
    bpf: Store cookies in kprobe_multi bpf_link_info data

Storing cookies in kprobe_multi bpf_link_info data. The cookies
field is optional and if provided it needs to be an array of
__u64 with kprobe_multi.count length.

Acked-by: Yafang Shao <laoar.shao@gmail.com>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/r/20240119110505.400573-3-jolsa@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: d5c16492c66fbfca85f36e42363d32212df5927b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Store optional cookies array in kprobe_multi bpf_link_info data for better tracking.', 'keywords': 'cookies,kprobe_multi,bpf_link_info', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: d5c16492c66fbfca85f36e42363d32212df5927b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d5c16492c66fbfca85f36e42363d32212df5927b
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1706054727
  Commit Message:
    bpf: Add cookie to perf_event bpf_link_info records

At the moment we don't store cookie for perf_event probes
  Parent Hashes: bbc094b3052647c188d6f155f5c09cb9492ce106
  Refs: 
while we do that for the rest of the probes.

Adding cookie fields to struct bpf_link_info perf event
probe records:

  perf_event.uprobe
  perf_event.kprobe
  perf_event.tracepoint
  perf_event.perf_event

And the code to store that in bpf_link_info struct.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Song Liu <song@kernel.org>
Acked-by: Yafang Shao <laoar.shao@gmail.com>
Link: https://lore.kernel.org/r/20240119110505.400573-2-jolsa@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add cookie field to perf_event bpf_link_info records for more event probe types.', 'keywords': 'cookie,perf_event,bpf_link_info', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs', 'tracepoints like programs', 'profile like programs']}
--------------------
--------------------
Processing Commit ID: bbc094b3052647c188d6f155f5c09cb9492ce106
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bbc094b3052647c188d6f155f5c09cb9492ce106
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1706054146
  Commit Message:
    bpf: Use r constraint instead of p constraint in selftests

Some of the BPF selftests use the "p" constraint in inline assembly
snippets
  Parent Hashes: 756e34da5380e4c0ed2cfbe5259e1b015567a099
  Refs:  for input operands for MOV (rN = rM) instructions.

This is mainly done via the __imm_ptr macro defined in
tools/testing/selftests/bpf/progs/bpf_misc.h:

  #define __imm_ptr(name) [name]"p"(&name)

Example:

  int consume_first_item_only(void *ctx)
  {
        struct bpf_iter_num iter;
        asm volatile (
                /* create iterator */
                "r1 = %[iter];"
                [...]
                :
                : __imm_ptr(iter)
                : CLOBBERS);
        [...]
  }

The "p" constraint is a tricky one.  It is documented in the GCC manual
section "Simple Constraints":

  An operand that is a valid memory address is allowed.  This is for
  ``load address'' and ``push address'' instructions.

  p in the constraint must be accompanied by address_operand as the
  predicate in the match_operand.  This predicate interprets the mode
  specified in the match_operand as the mode of the memory reference for
  which the address would be valid.

There are two problems:

1. It is questionable whether that constraint was ever intended to be
   used in inline assembly templates

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit replaces 'p' constraint with 'r' constraint in BPF selftests inline assembly for better compatibility and correctness.", 'keywords': 'BPF,selftests,constraint', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 756e34da5380e4c0ed2cfbe5259e1b015567a099
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 756e34da5380e4c0ed2cfbe5259e1b015567a099
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1706053984
  Commit Message:
    bpf: fix constraint in test_tcpbpf_kern.c

GCC emits a warning:

  progs/test_tcpbpf_kern.c:60:9: error: ‘op’ is used uninitialized [-Werror=uninitialized]

when an uninialized op is used with a "+r" constraint.  The + modifier
means a read-write operand
  Parent Hashes: edb799035dd7d41c3e81e1bef83e2a2120b08abb
  Refs:  but that operand in the selftest is just
written to.

This patch changes the selftest to use a "=r" constraint.  This
pacifies GCC.

Tested in bpf-next master.
No regressions.

Signed-off-by: Jose E. Marchesi <jose.marchesi@oracle.com>
Cc: Yonghong Song <yhs@meta.com>
Cc: Eduard Zingerman <eddyz87@gmail.com>
Cc: david.faust@oracle.com
Cc: cupertino.miranda@oracle.com
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240123205624.14746-1-jose.marchesi@oracle.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed a GCC warning by changing a constraint in a selftest for BPF.', 'keywords': 'GCC, constraint, selftest', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: edb799035dd7d41c3e81e1bef83e2a2120b08abb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: edb799035dd7d41c3e81e1bef83e2a2120b08abb
  Author Name: Jose E. Marchesi
  Author Email: jose.marchesi@oracle.com
  Commit Date: 1706053847
  Commit Message:
    bpf: avoid VLAs in progs/test_xdp_dynptr.c

VLAs are not supported by either the BPF port of clang nor GCC.  The
selftest test_xdp_dynptr.c contains the following code:

  const size_t tcphdr_sz = sizeof(struct tcphdr);
  const size_t udphdr_sz = sizeof(struct udphdr);
  const size_t ethhdr_sz = sizeof(struct ethhdr);
  const size_t iphdr_sz = sizeof(struct iphdr);
  const size_t ipv6hdr_sz = sizeof(struct ipv6hdr);

  [...]

  static __always_inline int handle_ipv4(struct xdp_md *xdp
  Parent Hashes: bc308d011ab8cc61bf1be15a2920bcd7d7b9b9d3
  Refs:  struct bpf_dynptr *xdp_ptr)
  {
	__u8 eth_buffer[ethhdr_sz + iphdr_sz + ethhdr_sz];
	__u8 iph_buffer_tcp[iphdr_sz + tcphdr_sz];
	__u8 iph_buffer_udp[iphdr_sz + udphdr_sz];
	[...]
  }

The eth_buffer

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes VLAs from the test_xdp_dynptr.c to maintain compatibility with BPF port of clang and GCC.', 'keywords': 'VLAs,selftest,compatibility', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: bc308d011ab8cc61bf1be15a2920bcd7d7b9b9d3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bc308d011ab8cc61bf1be15a2920bcd7d7b9b9d3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706051627
  Commit Message:
    libbpf: call dup2() syscall directly

We've ran into issues with using dup2() API in production setting
  Parent Hashes: c80c6434aaccc689b2c7ff432d43abad8f4217b2
  Refs:  where
libbpf is linked into large production environment and ends up calling
unintended custom implementations of dup2(). These custom implementations
don't provide atomic FD replacement guarantees of dup2() syscall

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit alters libbpf to directly use the dup2() syscall, bypassing custom implementations causing production issues.', 'keywords': 'libbpf, dup2, syscall', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c80c6434aaccc689b2c7ff432d43abad8f4217b2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c80c6434aaccc689b2c7ff432d43abad8f4217b2
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1706051483
  Commit Message:
    Merge branch 'enable-the-inline-of-kptr_xchg-for-arm64'

Hou Tao says:

====================
Enable the inline of kptr_xchg for arm64

From: Hou Tao <houtao1@huawei.com>

Hi
  Parent Hashes: 20e109ea9842158a153b24ef42ec5cc3d44e9485 29f868887a7dd3efc6faecc6fc91b28fc25cf5b0
  Refs: 

The patch set is just a follow-up for "bpf: inline bpf_kptr_xchg()". It
enables the inline of bpf_kptr_xchg() and kptr_xchg_inline test for
arm64.

Please see individual patches for more details. And comments are always
welcome.
====================

Link: https://lore.kernel.org/r/20240119102529.99581-1-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable inline support for bpf_kptr_xchg() on arm64 architecture.', 'keywords': 'bpf_kptr_xchg, inline, arm64', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 29f868887a7dd3efc6faecc6fc91b28fc25cf5b0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 29f868887a7dd3efc6faecc6fc91b28fc25cf5b0
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1706051483
  Commit Message:
    selftests/bpf: Enable kptr_xchg_inline test for arm64

Now arm64 bpf jit has enable bpf_jit_supports_ptr_xchg()
  Parent Hashes: 18a45f12d746c06b7361b0cce59cf8e8b9e38da6
  Refs:  so enable
the test for arm64 as well.

Signed-off-by: Hou Tao <houtao1@huawei.com>
Link: https://lore.kernel.org/r/20240119102529.99581-3-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable kptr_xchg_inline test for arm64 in bpf selftests after JIT support update.', 'keywords': 'kptr_xchg_inline, arm64, bpf_jit', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 18a45f12d746c06b7361b0cce59cf8e8b9e38da6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 18a45f12d746c06b7361b0cce59cf8e8b9e38da6
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1706051483
  Commit Message:
    bpf
  Parent Hashes: 20e109ea9842158a153b24ef42ec5cc3d44e9485
  Refs:  arm64: Enable the inline of bpf_kptr_xchg()

ARM64 bpf jit satisfies the following two conditions:
1) support BPF_XCHG() on pointer-sized word.
2) the implementation of xchg is the same as atomic_xchg() on
   pointer-sized words. Both of these two functions use arch_xchg() to
   implement the exchange.

So enable the inline of bpf_kptr_xchg() for arm64 bpf jit.

Signed-off-by: Hou Tao <houtao1@huawei.com>
Link: https://lore.kernel.org/r/20240119102529.99581-2-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable inline implementation of bpf_kptr_xchg for arm64 bpf jit.', 'keywords': 'bpf_kptr_xchg,ARM64,JIT', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 20e109ea9842158a153b24ef42ec5cc3d44e9485
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 20e109ea9842158a153b24ef42ec5cc3d44e9485
  Author Name: Dave Thaler
  Author Email: dthaler1968@googlemail.com
  Commit Date: 1706051408
  Commit Message:
    bpf
  Parent Hashes: b3f086a7a136d721d112f35fe4cd7272e93cf06b
  Refs:  docs: Clarify that MOVSX is only for BPF_X not BPF_K

Per discussion on the mailing list at
https://mailarchive.ietf.org/arch/msg/bpf/uQiqhURdtxV_ZQOTgjCdm-seh74/
the MOVSX operation is only defined to support register extension.

The document didn't previously state this and incorrectly implied
that one could use an immediate value.

Signed-off-by: Dave Thaler <dthaler1968@gmail.com>
Acked-by: David Vernet <void@manifault.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240118232954.27206-1-dthaler1968@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Clarified documentation for MOVSX operation to indicate it's only for BPF_X, not BPF_K.", 'keywords': 'MOVSX,BPF_X,BPF_K', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b3f086a7a136d721d112f35fe4cd7272e93cf06b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b3f086a7a136d721d112f35fe4cd7272e93cf06b
  Author Name: Kuniyuki Iwashima
  Author Email: kuniyu@amazon.com
  Commit Date: 1706051283
  Commit Message:
    bpf: Define struct bpf_tcp_req_attrs when CONFIG_SYN_COOKIES=n.

kernel test robot reported the warning below:

  >> net/core/filter.c:11842:13: warning: declaration of 'struct bpf_tcp_req_attrs' will not be visible outside of this function [-Wvisibility]
      11842 |                                         struct bpf_tcp_req_attrs *attrs
  Parent Hashes: 2ce793ebe207328b1210bb53effd702740987148
  Refs:  int attrs__sz)
            |                                                ^
     1 warning generated.

struct bpf_tcp_req_attrs is defined under CONFIG_SYN_COOKIES
but used in kfunc without the config.

Let's move struct bpf_tcp_req_attrs definition outside of
CONFIG_SYN_COOKIES guard.

Fixes: e472f88891ab ("bpf: tcp: Support arbitrary SYN Cookie.")
Reported-by: kernel test robot <lkp@intel.com>
Closes: https://lore.kernel.org/oe-kbuild-all/202401180418.CUVc0hxF-lkp@intel.com/
Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
Link: https://lore.kernel.org/r/20240118211751.25790-1-kuniyu@amazon.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix visibility issue by defining struct bpf_tcp_req_attrs outside CONFIG_SYN_COOKIES guard.', 'keywords': 'struct bpf_tcp_req_attrs, visibility, CONFIG_SYN_COOKIES', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2ce793ebe207328b1210bb53effd702740987148
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2ce793ebe207328b1210bb53effd702740987148
  Author Name: Hao Sun
  Author Email: sunhao.th@gmail.com
  Commit Date: 1706050899
  Commit Message:
    bpf: Refactor ptr alu checking rules to allow alu explicitly

Current checking rules are structured to disallow alu on particular ptr
types explicitly
  Parent Hashes: 40628f9fff73adecac77a9aa390f8016724cad99
  Refs:  so default cases are allowed implicitly. This may lead
to newly added ptr types being allowed unexpectedly. So restruture it to
allow alu explicitly. The tradeoff is mainly a bit more cases added in
the switch. The following table from Eduard summarizes the rules:

        | Pointer type        | Arithmetics allowed |
        |---------------------+---------------------|
        | PTR_TO_CTX          | yes                 |
        | CONST_PTR_TO_MAP    | conditionally       |
        | PTR_TO_MAP_VALUE    | yes                 |
        | PTR_TO_MAP_KEY      | yes                 |
        | PTR_TO_STACK        | yes                 |
        | PTR_TO_PACKET_META  | yes                 |
        | PTR_TO_PACKET       | yes                 |
        | PTR_TO_PACKET_END   | no                  |
        | PTR_TO_FLOW_KEYS    | conditionally       |
        | PTR_TO_SOCKET       | no                  |
        | PTR_TO_SOCK_COMMON  | no                  |
        | PTR_TO_TCP_SOCK     | no                  |
        | PTR_TO_TP_BUFFER    | yes                 |
        | PTR_TO_XDP_SOCK     | no                  |
        | PTR_TO_BTF_ID       | yes                 |
        | PTR_TO_MEM          | yes                 |
        | PTR_TO_BUF          | yes                 |
        | PTR_TO_FUNC         | yes                 |
        | CONST_PTR_TO_DYNPTR | yes                 |

The refactored rules are equivalent to the original one. Note that
PTR_TO_FUNC and CONST_PTR_TO_DYNPTR are not reject here because: (1)
check_mem_access() rejects load/store on those ptrs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor ptr alu checking rules to explicitly allow certain arithmetic operations on pointer types in eBPF.', 'keywords': 'pointer, alu, refactor', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 40628f9fff73adecac77a9aa390f8016724cad99
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 40628f9fff73adecac77a9aa390f8016724cad99
  Author Name: Andrey Grafin
  Author Email: conquistador@yandex-team.ru
  Commit Date: 1706049792
  Commit Message:
    selftest/bpf: Add map_in_maps with BPF_MAP_TYPE_PERF_EVENT_ARRAY values

Check that bpf_object__load() successfully creates map_in_maps
with BPF_MAP_TYPE_PERF_EVENT_ARRAY values.
These changes cover fix in the previous patch
"libbpf: Apply map_set_def_max_entries() for inner_maps on creation".

A command line output is:
- w/o fix
$ sudo ./test_maps
libbpf: map 'mim_array_pe': failed to create inner map: -22
libbpf: map 'mim_array_pe': failed to create: Invalid argument(-22)
libbpf: failed to load object './test_map_in_map.bpf.o'
Failed to load test prog

- with fix
$ sudo ./test_maps
...
test_maps: OK
  Parent Hashes: f04deb90e516e8e48bf8693397529bc942a9e80b
  Refs:  0 SKIPPED

Fixes: 646f02ffdd49 ("libbpf: Add BTF-defined map-in-map support")
Signed-off-by: Andrey Grafin <conquistador@yandex-team.ru>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Acked-by: Hou Tao <houtao1@huawei.com>
Link: https://lore.kernel.org/bpf/20240117130619.9403-2-conquistador@yandex-team.ru
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds selftest to ensure map_in_maps with BPF_MAP_TYPE_PERF_EVENT_ARRAY values are correctly loaded.', 'keywords': 'selftest,map_in_maps,PERF_EVENT_ARRAY', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f04deb90e516e8e48bf8693397529bc942a9e80b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f04deb90e516e8e48bf8693397529bc942a9e80b
  Author Name: Andrey Grafin
  Author Email: conquistador@yandex-team.ru
  Commit Date: 1706049792
  Commit Message:
    libbpf: Apply map_set_def_max_entries() for inner_maps on creation

This patch allows to auto create BPF_MAP_TYPE_ARRAY_OF_MAPS and
BPF_MAP_TYPE_HASH_OF_MAPS with values of BPF_MAP_TYPE_PERF_EVENT_ARRAY
by bpf_object__load().

Previous behaviour created a zero filled btf_map_def for inner maps and
tried to use it for a map creation but the linux kernel forbids to create
a BPF_MAP_TYPE_PERF_EVENT_ARRAY map with max_entries=0.

Fixes: 646f02ffdd49 ("libbpf: Add BTF-defined map-in-map support")
Signed-off-by: Andrey Grafin <conquistador@yandex-team.ru>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Acked-by: Hou Tao <houtao1@huawei.com>
Link: https://lore.kernel.org/bpf/20240117130619.9403-1-conquistador@yandex-team.ru
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 091f2bf60d52ac205c48dffcb8646ed9299078c9
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit updates libbpf to correctly set max_entries for inner maps on creation.', 'keywords': 'libbpf, inner_maps, max_entries', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 091f2bf60d52ac205c48dffcb8646ed9299078c9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 091f2bf60d52ac205c48dffcb8646ed9299078c9
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1706049792
  Commit Message:
    bpf: Sync uapi bpf.h header for the tooling infra

Both commit 91051f003948 ("tcp: Dump bound-only sockets in inet_diag.")
and commit 985b8ea9ec7e ("bpf
  Parent Hashes: f98df79bf7f772597313adca2720cb38770490dd
  Refs:  docs: Fix bpf_redirect_peer header doc")
missed the tooling header sync. Fix it.

Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Sync the uapi bpf.h header for the tooling infrastructure to fix missed commits.', 'keywords': 'sync, tooling, header', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f98df79bf7f772597313adca2720cb38770490dd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f98df79bf7f772597313adca2720cb38770490dd
  Author Name: Victor Stewart
  Author Email: v@nametag.social
  Commit Date: 1706049792
  Commit Message:
    bpf
  Parent Hashes: 4eaafe5a5b7b5f2fcec22914bc5b8b2d860896b7
  Refs:  docs: Fix bpf_redirect_peer header doc

Amend the bpf_redirect_peer() header documentation to also mention
support for the netkit device type.

Signed-off-by: Victor Stewart <v@nametag.social>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20240116202952.241009-1-v@nametag.social
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Amend the bpf_redirect_peer header documentation to mention netkit device support.', 'keywords': 'bpf_redirect_peer, header, documentation', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4eaafe5a5b7b5f2fcec22914bc5b8b2d860896b7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4eaafe5a5b7b5f2fcec22914bc5b8b2d860896b7
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1706049771
  Commit Message:
    Merge branch 'bpf: tcp: Support arbitrary SYN Cookie at TC.'

Kuniyuki Iwashima says:

====================
Under SYN Flood
  Parent Hashes: d177c1be06ce28aa8c8710ac55be1b5ad3f314c6 a74712241b4675175cd8e3310fa206d8756ad5a1
  Refs:  the TCP stack generates SYN Cookie to remain stateless
for the connection request until a valid ACK is responded to the SYN+ACK.

The cookie contains two kinds of host-specific bits

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Support added for arbitrary SYN Cookie in TCP under TC to handle SYN Floods.', 'keywords': 'SYN Cookie, TCP, TC', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: a74712241b4675175cd8e3310fa206d8756ad5a1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a74712241b4675175cd8e3310fa206d8756ad5a1
  Author Name: Kuniyuki Iwashima
  Author Email: kuniyu@amazon.com
  Commit Date: 1706049624
  Commit Message:
    selftest: bpf: Test bpf_sk_assign_tcp_reqsk().

This commit adds a sample selftest to demonstrate how we can use
bpf_sk_assign_tcp_reqsk() as the backend of SYN Proxy.

The test creates IPv4/IPv6 x TCP connections and transfer messages
over them on lo with BPF tc prog attached.

The tc prog will process SYN and returns SYN+ACK with the following
ISN and TS.  In a real use case
  Parent Hashes: e472f88891abbc535a5e16a68a104073985f6061
  Refs:  this part will be done by other
hosts.

        MSB                                   LSB
  ISN:  | 31 ... 8 | 7 6 |   5 |    4 | 3 2 1 0 |
        |   Hash_1 | MSS | ECN | SACK |  WScale |

  TS:   | 31 ... 8 |          7 ... 0           |
        |   Random |           Hash_2           |

  WScale in SYN is reused in SYN+ACK.

The client returns ACK

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a selftest for bpf_sk_assign_tcp_reqsk function using BPF tc program for TCP SYN Proxy backend.', 'keywords': 'selftest,BPF tc,bpf_sk_assign_tcp_reqsk', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: e472f88891abbc535a5e16a68a104073985f6061
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e472f88891abbc535a5e16a68a104073985f6061
  Author Name: Kuniyuki Iwashima
  Author Email: kuniyu@amazon.com
  Commit Date: 1706049624
  Commit Message:
    bpf: tcp: Support arbitrary SYN Cookie.

This patch adds a new kfunc available at TC hook to support arbitrary
SYN Cookie.

The basic usage is as follows:

    struct bpf_tcp_req_attrs attrs = {
        .mss = mss
  Parent Hashes: 695751e31a63efd2bbe6779873adf1e4deb00cd5
  Refs: 
        .wscale_ok = wscale_ok

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a kfunc for arbitrary SYN Cookie support at TC hook in BPF.', 'keywords': 'SYN Cookie, TC hook, kfunc', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 695751e31a63efd2bbe6779873adf1e4deb00cd5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 695751e31a63efd2bbe6779873adf1e4deb00cd5
  Author Name: Kuniyuki Iwashima
  Author Email: kuniyu@amazon.com
  Commit Date: 1706049624
  Commit Message:
    bpf: tcp: Handle BPF SYN Cookie in cookie_v[46]_check().

We will support arbitrary SYN Cookie with BPF in the following
patch.

If BPF prog validates ACK and kfunc allocates a reqsk
  Parent Hashes: 8b5ac68fb5ee416537c1214cbacf0ddc4293cce9
  Refs:  it will
be carried to cookie_[46]_check() as skb->sk.  If skb->sk is not
NULL

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhances TCP handling by managing BPF SYN Cookies in the cookie_v[46]_check functions.', 'keywords': 'SYN Cookie,BPF,ACK', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8b5ac68fb5ee416537c1214cbacf0ddc4293cce9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8b5ac68fb5ee416537c1214cbacf0ddc4293cce9
  Author Name: Kuniyuki Iwashima
  Author Email: kuniyu@amazon.com
  Commit Date: 1706049624
  Commit Message:
    bpf: tcp: Handle BPF SYN Cookie in skb_steal_sock().

We will support arbitrary SYN Cookie with BPF.

If BPF prog validates ACK and kfunc allocates a reqsk
  Parent Hashes: 95e752b5299fa8c90099f7bc2aa1ee3e2e2c95ab
  Refs:  it will
be carried to TCP stack as skb->sk with req->syncookie 1.  Also

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance BPF to handle arbitrary SYN cookies in TCP with skb_steal_sock().', 'keywords': 'BPF,SYN Cookie,TCP', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', 'other']}
--------------------
--------------------
Processing Commit ID: d177c1be06ce28aa8c8710ac55be1b5ad3f314c6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d177c1be06ce28aa8c8710ac55be1b5ad3f314c6
  Author Name: Artem Savkov
  Author Email: asavkov@redhat.com
  Commit Date: 1706049623
  Commit Message:
    selftests/bpf: Fix potential premature unload in bpf_testmod

It is possible for bpf_kfunc_call_test_release() to be called from
bpf_map_free_deferred() when bpf_testmod is already unloaded and
perf_test_stuct.cnt which it tries to decrease is no longer in memory.
This patch tries to fix the issue by waiting for all references to be
dropped in bpf_testmod_exit().

The issue can be triggered by running 'test_progs -t map_kptr' in 6.5
  Parent Hashes: f5f30386c78105cba520e443a6a9ee945ec1d066
  Refs: 
but is obscured in 6.6 by d119357d07435 ("rcu-tasks: Treat only
synchronous grace periods urgently").

Fixes: 65eb006d85a2 ("bpf: Move kernel test kfuncs to bpf_testmod")
Signed-off-by: Artem Savkov <asavkov@redhat.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Cc: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/bpf/82f55c0e-0ec8-4fe1-8d8c-b1de07558ad9@linux.dev
Link: https://lore.kernel.org/bpf/20240110085737.8895-1-asavkov@redhat.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes potential premature unloading issue in bpf_testmod during reference drop in selftests.', 'keywords': 'premature unload,selftests,bpf_testmod', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f5f30386c78105cba520e443a6a9ee945ec1d066
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f5f30386c78105cba520e443a6a9ee945ec1d066
  Author Name: Tiezhu Yang
  Author Email: yangtiezhu@loongson.cn
  Commit Date: 1706049623
  Commit Message:
    bpftool: Silence build warning about calloc()

There exists the following warning when building bpftool:

  CC      prog.o
prog.c: In function ‘profile_open_perf_events’:
prog.c:2301:24: warning: ‘calloc’ sizes specified with ‘sizeof’ in the earlier argument and not in the later argument [-Wcalloc-transposed-args]
 2301 |                 sizeof(int)
  Parent Hashes: 49c06547d5218b54fbcc6011864b8c8e3aa0b565
  Refs:  obj->rodata->num_cpu * obj->rodata->num_metric);
      |                        ^~~
prog.c:2301:24: note: earlier argument should specify number of elements

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix build warning in bpftool related to incorrect usage of calloc.', 'keywords': 'bpftool, calloc, warning', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 49c06547d5218b54fbcc6011864b8c8e3aa0b565
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 49c06547d5218b54fbcc6011864b8c8e3aa0b565
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1706049623
  Commit Message:
    bpf: Minor improvements for bpf_cmp.

Few minor improvements for bpf_cmp() macro:
. reduce number of args in __bpf_cmp()
. rename NOFLIP to UNLIKELY
. add a comment about 64-bit truncation in "i" constraint
. use "ri" constraint for sizeof(rhs) <= 4
. improve error message for bpf_cmp_likely()

Before:
progs/iters_task_vma.c:31:7: error: variable 'ret' is uninitialized when used here [-Werror
  Parent Hashes: 88031b929c01fe3686d34a848c413c2e51e6a7c8
  Refs: -Wuninitialized]
   31 |                 if (bpf_cmp_likely(seen

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Minor improvements made to bpf_cmp macro for better usage and error handling.', 'keywords': 'bpf_cmp, macro, improvements', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 88031b929c01fe3686d34a848c413c2e51e6a7c8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 88031b929c01fe3686d34a848c413c2e51e6a7c8
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1706049623
  Commit Message:
    docs/bpf: Fix an incorrect statement in verifier.rst

In verifier.rst
  Parent Hashes: 6ae99ac8b7da30c9fdb15e380624dbc41f8200c8
  Refs:  I found an incorrect statement (maybe a typo) in section
'Liveness marks tracking'. Basically

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Fixes an incorrect statement in the BPF verifier documentation under 'Liveness marks tracking' section.", 'keywords': 'verifier fix documentation', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6ae99ac8b7da30c9fdb15e380624dbc41f8200c8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6ae99ac8b7da30c9fdb15e380624dbc41f8200c8
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1706049623
  Commit Message:
    selftests/bpf: Add a selftest with not-8-byte aligned BPF_ST

Add a selftest with a 4 bytes BPF_ST of 0 where the store is not
8-byte aligned. The goal is to ensure that STACK_ZERO is properly
marked in stack slots and the STACK_ZERO value can propagate
properly during the load.

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20240110051355.2737232-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 9a4c57f52b5e0de3a6b1f40c5b656730ce33ee01
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest to ensure proper STACK_ZERO propagation with non-8-byte aligned BPF_ST operations.', 'keywords': 'selftest, BPF_ST, STACK_ZERO', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9a4c57f52b5e0de3a6b1f40c5b656730ce33ee01
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9a4c57f52b5e0de3a6b1f40c5b656730ce33ee01
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1706049623
  Commit Message:
    bpf: Track aligned st store as imprecise spilled registers

With patch set [1]
  Parent Hashes: 3893f0b6a0698aeeb3d27cb22baef7c4ca1a07f1
  Refs:  precision backtracing supports register spill/fill
to/from the stack. The patch [2] allows initial imprecise register spill
with content 0. This is a common case for cpuv3 and lower for
initializing the stack variables with pattern
  r1 = 0
  *(u64 *)(r10 - 8) = r1
and the [2] has demonstrated good verification improvement.

For cpuv4

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit improves precision of register spill/fill verification for aligned store in eBPF programs.', 'keywords': 'aligned store, register spill, precision', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3893f0b6a0698aeeb3d27cb22baef7c4ca1a07f1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3893f0b6a0698aeeb3d27cb22baef7c4ca1a07f1
  Author Name: Maxim Mikityanskiy
  Author Email: maxim@isovalent.com
  Commit Date: 1706049623
  Commit Message:
    selftests/bpf: Test assigning ID to scalars on spill

The previous commit implemented assigning IDs to registers holding
scalars before spill. Add the test cases to check the new functionality.

Signed-off-by: Maxim Mikityanskiy <maxim@isovalent.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240108205209.838365-10-maxtram95@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 8ecfc371d829bfed75e0ef2cab45b2290b982f64
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds test cases for assigning IDs to scalar registers before spill in selftests.', 'keywords': 'test cases, scalars, spill', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8ecfc371d829bfed75e0ef2cab45b2290b982f64
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8ecfc371d829bfed75e0ef2cab45b2290b982f64
  Author Name: Maxim Mikityanskiy
  Author Email: maxim@isovalent.com
  Commit Date: 1706049623
  Commit Message:
    bpf: Assign ID to scalars on spill

Currently
  Parent Hashes: 87e51ac6cb19c5d33d70d4cae9e26d2a3a5fcba0
  Refs:  when a scalar bounded register is spilled to the stack

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Assign unique IDs to scalars when they are spilled to the stack in the BPF verifier.', 'keywords': 'scalars, IDs, spill', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 87e51ac6cb19c5d33d70d4cae9e26d2a3a5fcba0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 87e51ac6cb19c5d33d70d4cae9e26d2a3a5fcba0
  Author Name: Maxim Mikityanskiy
  Author Email: maxim@isovalent.com
  Commit Date: 1706049623
  Commit Message:
    bpf: Add the get_reg_width function

Put calculation of the register value width into a dedicated function.
This function will also be used in a following commit.

Signed-off-by: Maxim Mikityanskiy <maxim@isovalent.com>
Link: https://lore.kernel.org/r/20240108205209.838365-8-maxtram95@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 8e0e074aafb8fec227363ed905ddd2ac7e4575e4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces a dedicated function to calculate register value width in eBPF.', 'keywords': 'register,function,get_reg_width', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8e0e074aafb8fec227363ed905ddd2ac7e4575e4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8e0e074aafb8fec227363ed905ddd2ac7e4575e4
  Author Name: Maxim Mikityanskiy
  Author Email: maxim@isovalent.com
  Commit Date: 1706049622
  Commit Message:
    bpf: Add the assign_scalar_id_before_mov function

Extract the common code that generates a register ID for src_reg before
MOV if needed into a new function. This function will also be used in
a following commit.

Signed-off-by: Maxim Mikityanskiy <maxim@isovalent.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240108205209.838365-7-maxtram95@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: b827eee4c4d83ad92094b38d49cfec6844fb5863
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extracts common code for generating register ID into a new function for reuse before MOV operations.', 'keywords': 'register, function, MOV', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b827eee4c4d83ad92094b38d49cfec6844fb5863
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b827eee4c4d83ad92094b38d49cfec6844fb5863
  Author Name: Maxim Mikityanskiy
  Author Email: maxim@isovalent.com
  Commit Date: 1706049622
  Commit Message:
    selftests/bpf: Add a test case for 32-bit spill tracking

When a range check is performed on a register that was 32-bit spilled to
the stack
  Parent Hashes: 32f55dd4add4df1a5bc8febc1fafd3086290dbf6
  Refs:  the IDs of the two instances of the register are the same

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a selftest for verifying 32-bit spill tracking in BPF programs.', 'keywords': 'selftests,32-bit,spill', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 32f55dd4add4df1a5bc8febc1fafd3086290dbf6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 32f55dd4add4df1a5bc8febc1fafd3086290dbf6
  Author Name: Maxim Mikityanskiy
  Author Email: maxim@isovalent.com
  Commit Date: 1706049622
  Commit Message:
    bpf: Make bpf_for_each_spilled_reg consider narrow spills

Adjust the check in bpf_get_spilled_reg to take into account spilled
registers narrower than 64 bits. That allows find_equal_scalars to
properly adjust the range of all spilled registers that have the same
ID. Before this change
  Parent Hashes: c035b3e555b5642f786fb2d089a6ddf7b00eb374
  Refs:  it was possible for a register and a spilled
register to have the same IDs but different ranges if the spill was
narrower than 64 bits and a range check was performed on the register.

Signed-off-by: Maxim Mikityanskiy <maxim@isovalent.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240108205209.838365-5-maxtram95@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adjusts the bpf_get_spilled_reg function to handle narrower spills under 64 bits properly.', 'keywords': 'bpf,narrower spills,registers', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c035b3e555b5642f786fb2d089a6ddf7b00eb374
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c035b3e555b5642f786fb2d089a6ddf7b00eb374
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1706049622
  Commit Message:
    selftests/bpf: check if imprecise stack spills confuse infinite loop detection

Verify that infinite loop detection logic separates states with
identical register states but different imprecise scalars spilled to
stack.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240108205209.838365-4-maxtram95@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: d5b892fd607abec2a1e49b6a2afc278c329a0ee2
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit adds a selftest to verify eBPF's infinite loop detection when dealing with imprecise stack spills.", 'keywords': 'selftests, detection, stack spills', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d5b892fd607abec2a1e49b6a2afc278c329a0ee2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d5b892fd607abec2a1e49b6a2afc278c329a0ee2
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1706049622
  Commit Message:
    bpf: make infinite loop detection in is_state_visited() exact

Current infinite loops detection mechanism is speculative:
- first
  Parent Hashes: 242d18514149d86b431b6f5db5a33579ea79ebad
  Refs:  states_maybe_looping() check is done which simply does memcmp
  for R1-R10 in current frame;
- second

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit improves the detection of infinite loops in is_state_visited() within the bpf verification process.', 'keywords': 'infinite loops,detection,verification', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 242d18514149d86b431b6f5db5a33579ea79ebad
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 242d18514149d86b431b6f5db5a33579ea79ebad
  Author Name: Maxim Mikityanskiy
  Author Email: maxim@isovalent.com
  Commit Date: 1706049622
  Commit Message:
    selftests/bpf: Fix the u64_offset_to_skb_data test

The u64_offset_to_skb_data test is supposed to make a 64-bit fill
  Parent Hashes: f067074bafd5060428211ee7bb8a3f86ff6bc58d
  Refs:  but
instead makes a 16-bit one. Fix the test according to its intention and
update the comments accordingly (umax is no longer 0xffff). The 16-bit
fill is covered by u16_offset_to_skb_data.

Signed-off-by: Maxim Mikityanskiy <maxim@isovalent.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240108205209.838365-2-maxtram95@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix the u64_offset_to_skb_data test to properly perform 64-bit fill and update comments.', 'keywords': 'fix,test,64-bit', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f067074bafd5060428211ee7bb8a3f86ff6bc58d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f067074bafd5060428211ee7bb8a3f86ff6bc58d
  Author Name: Nathan Chancellor
  Author Email: nathan@kernel.org
  Commit Date: 1706049622
  Commit Message:
    selftests/bpf: Update LLVM Phabricator links

reviews.llvm.org was LLVM's Phabricator instances for code review. It
has been abandoned in favor of GitHub pull requests. While the majority
of links in the kernel sources still work because of the work Fangrui
has done turning the dynamic Phabricator instance into a static archive
  Parent Hashes: 56d3e44af80c6b4c7cb89a73061ee35d4a7aee18
  Refs: 
there are some issues with that work

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update LLVM Phabricator links in selftests to use new GitHub pull request locations.', 'keywords': 'LLVM,Phabricator,GitHub', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 56d3e44af80c6b4c7cb89a73061ee35d4a7aee18
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 56d3e44af80c6b4c7cb89a73061ee35d4a7aee18
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706049622
  Commit Message:
    selftests/bpf: detect testing prog flags support

Various tests specify extra testing prog_flags when loading BPF
programs
  Parent Hashes: 81777efbf59305fa145bede97dd4abdc35540578
  Refs:  like BPF_F_TEST_RND_HI32

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable selftests to detect support for testing prog_flags when loading BPF programs.', 'keywords': 'selftests, prog_flags, BPF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 15b8b0be985592fd19ee4e661d13d291877b09c7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 15b8b0be985592fd19ee4e661d13d291877b09c7
  Author Name: Randy Dunlap
  Author Email: rdunlap@infradead.org
  Commit Date: 1706049622
  Commit Message:
    net: filter: fix spelling mistakes

Fix spelling errors as reported by codespell.

Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: bpf@vger.kernel.org
Cc: "David S. Miller" <davem@davemloft.net>
Cc: Eric Dumazet <edumazet@google.com>
Cc: Jakub Kicinski <kuba@kernel.org>
Cc: Paolo Abeni <pabeni@redhat.com>
Reviewed-by: Simon Horman <horms@kernel.org>
Link: https://lore.kernel.org/r/20240106065545.16855-1-rdunlap@infradead.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 522bb2c1f82b12eb7befaae815d1d959b8e6bba2
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes spelling mistakes in the net filter code.', 'keywords': 'spelling, mistakes, codespell', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 522bb2c1f82b12eb7befaae815d1d959b8e6bba2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 522bb2c1f82b12eb7befaae815d1d959b8e6bba2
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706049621
  Commit Message:
    bpf: support multiple tags per argument

Add ability to iterate multiple decl_tag types pointed to the same
function argument. Use this to support multiple __arg_xxx tags per
global subprog argument.

We leave btf_find_decl_tag_value() intact
  Parent Hashes: 54c11ec4935a61af32bb03fc52e7172c97bd7203
  Refs:  but change its implementation
to use a new btf_find_next_decl_tag() which can be straightforwardly
used to find next BTF type ID of a matching btf_decl_tag type.
btf_prepare_func_args() is switched from btf_find_decl_tag_value() to
btf_find_next_decl_tag() to gain multiple tags per argument support.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240105000909.2818934-5-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds support for multiple declaration tags per function argument in eBPF.', 'keywords': 'multiple tags, function argument, btf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 54c11ec4935a61af32bb03fc52e7172c97bd7203
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 54c11ec4935a61af32bb03fc52e7172c97bd7203
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706049621
  Commit Message:
    bpf: prepare btf_prepare_func_args() for multiple tags per argument

Add btf_arg_tag flags enum to be able to record multiple tags per
argument. Also streamline pointer argument processing some more.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240105000909.2818934-4-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 18810ad3929ff6b5d8e67e3adc40d690bd780fd6
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhances btf_prepare_func_args to support multiple tags per argument and improves pointer argument processing.', 'keywords': 'multiple tags, argument, btf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 18810ad3929ff6b5d8e67e3adc40d690bd780fd6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 18810ad3929ff6b5d8e67e3adc40d690bd780fd6
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706049621
  Commit Message:
    bpf: make sure scalar args don't accept __arg_nonnull tag

Move scalar arg processing in btf_prepare_func_args() after all pointer
arg processing is done. This makes it easier to do validation. One
example of unintended behavior right now is ability to specify
__arg_nonnull for integer/enum arguments. This patch fixes this.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240105000909.2818934-3-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: e31f98c1af810a13395ee9ab57402d82272445af
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes scalar argument processing in btf_prepare_func_args to prevent __arg_nonnull for non-pointer args.', 'keywords': 'scalar,args,validation', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e31f98c1af810a13395ee9ab57402d82272445af
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e31f98c1af810a13395ee9ab57402d82272445af
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1706049621
  Commit Message:
    selftests/bpf: fix test_loader check message

Seeing:

  process_subtest:PASS:Can't alloc specs array 0 nsec

... in verbose successful test log is very confusing. Use smaller
identifier-like test tag to denote that we are asserting specs array
allocation success.

Now it's much less distracting:

  process_subtest:PASS:specs_alloc 0 nsec

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240105000909.2818934-2-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 55c14321dbf06c9e32050e99b2555c2f8f6429da
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit clarifies the test message in selftests for BPF regarding specs array allocation checks.', 'keywords': 'selftests,BPF,message', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 55c14321dbf06c9e32050e99b2555c2f8f6429da
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 55c14321dbf06c9e32050e99b2555c2f8f6429da
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1706049621
  Commit Message:
    Merge branch 'bpf-inline-bpf_kptr_xchg'

Hou Tao says:

====================
The motivation of inlining bpf_kptr_xchg() comes from the performance
profiling of bpf memory allocator benchmark [1]. The benchmark uses
bpf_kptr_xchg() to stash the allocated objects and to pop the stashed
objects for free. After inling bpf_kptr_xchg()
  Parent Hashes: 2121c43f88f593eea51d483bedd638cb0623c7e2 17bda53e43bc41d881ca6a02b3c6f5376c55b3d3
  Refs:  the performance for
object free on 8-CPUs VM increases about 2%~10%. However the performance
gain comes with costs: both the kasan and kcsan checks on the pointer
will be unavailable. Initially the inline is implemented in do_jit() for
x86-64 directly

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges changes for inlining bpf_kptr_xchg to improve memory allocator benchmark performance.', 'keywords': 'bpf_kptr_xchg, inlining, performance', 'commit_classification': "It's a performance optimization.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 17bda53e43bc41d881ca6a02b3c6f5376c55b3d3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 17bda53e43bc41d881ca6a02b3c6f5376c55b3d3
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1706049621
  Commit Message:
    selftests/bpf: Test the inlining of bpf_kptr_xchg()

The test uses bpf_prog_get_info_by_fd() to obtain the xlated
instructions of the program first. Since these instructions have
already been rewritten by the verifier
  Parent Hashes: b4b7a4099b8ccea224577003fcf9d321bf0817b7
  Refs:  the tests then checks whether
the rewritten instructions are as expected. And to ensure LLVM generates
code exactly as expected

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests to verify the inlining of bpf_kptr_xchg through bpf_prog_get_info_by_fd().', 'keywords': 'selftests,inlining,bpf_kptr_xchg', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b4b7a4099b8ccea224577003fcf9d321bf0817b7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b4b7a4099b8ccea224577003fcf9d321bf0817b7
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1706049621
  Commit Message:
    selftests/bpf: Factor out get_xlated_program() helper

Both test_verifier and test_progs use get_xlated_program()
  Parent Hashes: 7c05e7f3e74e7e550534d524e04d7e6f78d6fa24
  Refs:  so moving
the helper into testing_helpers.h to reuse it.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Hou Tao <houtao1@huawei.com>
Link: https://lore.kernel.org/r/20240105104819.3916743-3-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor by moving get_xlated_program() helper into testing_helpers.h for reuse in selftests/bpf.', 'keywords': 'refactor,reuse,tests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7c05e7f3e74e7e550534d524e04d7e6f78d6fa24
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7c05e7f3e74e7e550534d524e04d7e6f78d6fa24
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1706049621
  Commit Message:
    bpf: Support inlining bpf_kptr_xchg() helper

The motivation of inlining bpf_kptr_xchg() comes from the performance
profiling of bpf memory allocator benchmark. The benchmark uses
bpf_kptr_xchg() to stash the allocated objects and to pop the stashed
objects for free. After inling bpf_kptr_xchg()
  Parent Hashes: 2121c43f88f593eea51d483bedd638cb0623c7e2
  Refs:  the performance for
object free on 8-CPUs VM increases about 2%~10%. The inline also has
downside: both the kasan and kcsan checks on the pointer will be
unavailable.

bpf_kptr_xchg() can be inlined by converting the calling of
bpf_kptr_xchg() into an atomic_xchg() instruction. But the conversion
depends on two conditions:
1) JIT backend supports atomic_xchg() on pointer-sized word
2) For the specific arch

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit improves performance by inlining the bpf_kptr_xchg() helper function for better efficiency in memory allocation benchmarks.', 'keywords': 'bpf_kptr_xchg, inlining, performance', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 1732ebc4a26181c8f116c7639db99754b313edc8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1732ebc4a26181c8f116c7639db99754b313edc8
  Author Name: Pu Lehui
  Author Email: pulehui@huawei.com
  Commit Date: 1706048498
  Commit Message:
    riscv
  Parent Hashes: 1347775dea7f62798b4d5ef60771cdd7cfff25d8
  Refs:  bpf: Fix unpredictable kernel crash about RV64 struct_ops

We encountered a kernel crash triggered by the bpf_tcp_ca testcase as
show below:

Unable to handle kernel paging request at virtual address ff60000088554500
Oops [#1]
...
CPU: 3 PID: 458 Comm: test_progs Tainted: G           OE      6.8.0-rc1-kselftest_plain #1
Hardware name: riscv-virtio

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a kernel crash related to struct_ops in RISC-V when running bpf_tcp_ca test cases.', 'keywords': 'kernel crash, struct_ops, RISC-V', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 999eea92e8d7a1ffa83f7dc89c83d8ed1e746fa9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 999eea92e8d7a1ffa83f7dc89c83d8ed1e746fa9
  Author Name: Thomas Richter
  Author Email: tmricht@linux.ibm.com
  Commit Date: 1705954099
  Commit Message:
    perf test: raise limit to 20 percent for perf_stat_--bpf-counters_test

This test case often fails on s390 (about 2 out of 10) because the
10% percent limit on the difference between --bpf-counters event counting
and s390 hardware counting is more than 10% in all failure cases.
Raise the limit to 20% on s390 and the test case succeeds.

Signed-off-by: Thomas Richter <tmricht@linux.ibm.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: gor@linux.ibm.com
Cc: hca@linux.ibm.com
Cc: sumanthk@linux.ibm.com
Cc: svens@linux.ibm.com
Link: https://lore.kernel.org/r/20240108084009.3959211-1-tmricht@linux.ibm.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: 6613476e225e090cc9aad49be7fa504e290dd33d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Raise the limit for perf_stat bpf-counters test from 10% to 20% to reduce failures on s390 architecture.', 'keywords': 'perf,test,s390', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9d64bf433c53cab2f48a3fff7a1f2a696bc5229a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9d64bf433c53cab2f48a3fff7a1f2a696bc5229a
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1705703123
  Commit Message:
    Merge tag 'perf-tools-for-v6.8-1-2024-01-09' of git://git.kernel.org/pub/scm/linux/kernel/git/perf/perf-tools

Pull perf tools updates from Arnaldo Carvalho de Melo:
 "Add Namhyung Kim as tools/perf/ co-maintainer
  Parent Hashes: 57f22c8dab6b266ae36b89b073a4a33dea71e762 d988c9f511af71a3445b6a4f3a2c67208ff8e480
  Refs:  we're taking turns
  processing patches

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge perf tools updates adding Namhyung Kim as co-maintainer for tools/perf.', 'keywords': 'perf,tools,maintainer', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 736b5545d39ca59d4332a60e56cc8a1a5e264a8e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 736b5545d39ca59d4332a60e56cc8a1a5e264a8e
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1705628030
  Commit Message:
    Merge tag 'net-6.8-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 "Including fixes from bpf and netfilter.

  Previous releases - regressions:

   - Revert "net: rtnetlink: Enslave device before bringing it up"
  Parent Hashes: ed8d84530ab0a3b7b370e8b28f12179314dcfcc3 925781a471d8156011e8f8c1baf61bbe020dac55
  Refs: 
     breaks the case inverse to the one it was trying to fix

   - net: dsa: fix oob access in DSA's netdevice event handler
     dereference netdev_priv() before check its a DSA port

   - sched: track device in tcf_block_get/put_ext() only for clsact
     binder types

   - net: tls

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge of networking fixes including bpf and netfilter regressions', 'keywords': 'networking,fixes,bpf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ['tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4349efc52b83af3851df7a4199567ad50b3d1f03
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4349efc52b83af3851df7a4199567ad50b3d1f03
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1705600464
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2024-01-18

We've added 10 non-merge commits during the last 5 day(s) which contain
a total of 12 files changed
  Parent Hashes: 9cfd3b502153810b66ac0ce47f1fba682228f2d2 35ac085a94efe82d906d3a812612d432aa267cbe
  Refs:  806 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merges recent non-merge commits from bpf to for-netdev tag affecting 12 files.', 'keywords': 'merge, commits, bpf', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 35ac085a94efe82d906d3a812612d432aa267cbe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 35ac085a94efe82d906d3a812612d432aa267cbe
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1705551606
  Commit Message:
    Merge branch 'tighten-up-arg-ctx-type-enforcement'

Andrii Nakryiko says:

====================
Tighten up arg:ctx type enforcement

Follow up fixes for kernel-side and libbpf-side logic around handling arg:ctx
(__arg_ctx) tagged arguments of BPF global subprogs.

Patch #1 adds libbpf feature detection of kernel-side __arg_ctx support to
avoid unnecessary rewriting BTF types. With stricter kernel-side type
enforcement this is now mandatory to avoid problems with using `struct
bpf_user_pt_regs_t` instead of actual typedef. For __arg_ctx tagged arguments
verifier is now supporting either `bpf_user_pt_regs_t` typedef or resolves it
down to the actual struct (pt_regs/user_pt_regs/user_regs_struct)
  Parent Hashes: 33772ff3b887eb2f426ed66bcb1808837a40669c 76ec90a996e3c707eb6772510afa36faeba2ecff
  Refs:  depending
on architecture)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance type enforcement for BPF arg:ctx in kernel and libbpf for stricter verifier checks.', 'keywords': 'type enforcement, libbpf, BPF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 76ec90a996e3c707eb6772510afa36faeba2ecff
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 76ec90a996e3c707eb6772510afa36faeba2ecff
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1705551606
  Commit Message:
    libbpf: warn on unexpected __arg_ctx type when rewriting BTF

On kernel that don't support arg:ctx tag
  Parent Hashes: 989410cde81959c4033dc287d79b42b6eb04f04f
  Refs:  before adjusting global
subprog BTF information to match kernel's expected canonical type names

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add warning in libbpf for unexpected __arg_ctx type during BTF rewriting on unsupported kernels.', 'keywords': 'libbpf, BTF, warning', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 989410cde81959c4033dc287d79b42b6eb04f04f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 989410cde81959c4033dc287d79b42b6eb04f04f
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1705551606
  Commit Message:
    selftests/bpf: add tests confirming type logic in kernel for __arg_ctx

Add a bunch of global subprogs across variety of program types to
validate expected kernel type enforcement logic for __arg_ctx arguments.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240118033143.3384355-5-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 0ba971511d16603599f947459e59b435cc465b0d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add tests in selftests/bpf to validate type enforcement logic for __arg_ctx arguments across various program types.', 'keywords': 'type logic,__arg_ctx,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0ba971511d16603599f947459e59b435cc465b0d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0ba971511d16603599f947459e59b435cc465b0d
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1705551606
  Commit Message:
    bpf: enforce types for __arg_ctx-tagged arguments in global subprogs

Add enforcement of expected types for context arguments tagged with
arg:ctx (__arg_ctx) tag.

First
  Parent Hashes: 66967a32d3b16ed447e76fed4d946bab52e43d86
  Refs:  any program type will accept generic `void *` context type when
combined with __arg_ctx tag.

Besides accepting "canonical" struct names and `void *`

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enforces expected types for context arguments with __arg_ctx tag in global subprograms in eBPF.', 'keywords': 'enforce, context, __arg_ctx', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 66967a32d3b16ed447e76fed4d946bab52e43d86
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 66967a32d3b16ed447e76fed4d946bab52e43d86
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1705551605
  Commit Message:
    bpf: extract bpf_ctx_convert_map logic and make it more reusable

Refactor btf_get_prog_ctx_type() a bit to allow reuse of
bpf_ctx_convert_map logic in more than one places. Simplify interface by
returning btf_type instead of btf_member (field reference in BTF).

To do the above we need to touch and start untangling
btf_translate_to_vmlinux() implementation. We do the bare minimum to
not regress anything for btf_translate_to_vmlinux()
  Parent Hashes: 01b55f4f0cd6ad1a16eca6c43a3190005892ef91
  Refs:  but its
implementation is very questionable for what it claims to be doing.
Mapping kfunc argument types to kernel corresponding types conceptually
is quite different from recognizing program context types. Fixing this
is out of scope for this change though.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240118033143.3384355-3-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactors btf_get_prog_ctx_type to enhance reusability of bpf_ctx_convert_map logic.', 'keywords': 'refactor,reusability,btf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 01b55f4f0cd6ad1a16eca6c43a3190005892ef91
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 01b55f4f0cd6ad1a16eca6c43a3190005892ef91
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1705551605
  Commit Message:
    libbpf: feature-detect arg:ctx tag support in kernel

Add feature detector of kernel-side arg:ctx (__arg_ctx) tag support. If
this is detected
  Parent Hashes: 33772ff3b887eb2f426ed66bcb1808837a40669c
  Refs:  libbpf will avoid doing any __arg_ctx-related BTF
rewriting and checks in favor of letting kernel handle this completely.

test_global_funcs/ctx_arg_rewrite subtest is adjusted to do the same
feature detection (albeit in much simpler

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added feature detection for kernel support of arg:ctx tag in libbpf.', 'keywords': 'feature detection,arg:ctx,libbpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 36a87385e31c9343af9a4756598e704741250a67
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 36a87385e31c9343af9a4756598e704741250a67
  Author Name: Hengqi Chen
  Author Email: hengqi.chen@gmail.com
  Commit Date: 1705466593
  Commit Message:
    LoongArch: BPF: Prevent out-of-bounds memory access

The test_tag test triggers an unhandled page fault:

  # ./test_tag
  [  130.640218] CPU 0 Unable to handle kernel paging request at virtual address ffff80001b898004
  Parent Hashes: 21c5ae5cc1eee70f7f3b09f1d6b237d9812d4b9c
  Refs:  era == 9000000003137f7c

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit prevents out-of-bounds memory access on LoongArch architecture for BPF.', 'keywords': 'LoongArch,BPF,memory', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 21c5ae5cc1eee70f7f3b09f1d6b237d9812d4b9c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 21c5ae5cc1eee70f7f3b09f1d6b237d9812d4b9c
  Author Name: Hengqi Chen
  Author Email: hengqi.chen@gmail.com
  Commit Date: 1705466593
  Commit Message:
    LoongArch: BPF: Support 64-bit pointers to kfuncs

Like commit 1cf3bfc60f9836f ("bpf: Support 64-bit pointers to kfuncs")
for s390x
  Parent Hashes: 91af17cd7d03db8836554c91ba7c38b0817aa980
  Refs:  add support for 64-bit pointers to kfuncs for LoongArch.
Since the infrastructure is already implemented in BPF core

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable 64-bit pointer support for kfuncs in LoongArch architecture.', 'keywords': 'LoongArch, 64-bit, kfuncs', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 33772ff3b887eb2f426ed66bcb1808837a40669c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 33772ff3b887eb2f426ed66bcb1808837a40669c
  Author Name: Hao Sun
  Author Email: sunhao.th@gmail.com
  Commit Date: 1705421568
  Commit Message:
    selftests/bpf: Add test for alu on PTR_TO_FLOW_KEYS

Add a test case for PTR_TO_FLOW_KEYS alu. Testing if alu with variable
offset on flow_keys is rejected. For the fixed offset success case
  Parent Hashes: 22c7fa171a02d310e3a3f6ed46a698ca8a0060ed
  Refs:  we
already have C code coverage to verify (e.g. via bpf_flow.c).

Signed-off-by: Hao Sun <sunhao.th@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20240115082028.9992-2-sunhao.th@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test case for validating alu operations on PTR_TO_FLOW_KEYS in selftests.', 'keywords': 'alu, PTR_TO_FLOW_KEYS, test', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 22c7fa171a02d310e3a3f6ed46a698ca8a0060ed
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 22c7fa171a02d310e3a3f6ed46a698ca8a0060ed
  Author Name: Hao Sun
  Author Email: sunhao.th@gmail.com
  Commit Date: 1705421549
  Commit Message:
    bpf: Reject variable offset alu on PTR_TO_FLOW_KEYS

For PTR_TO_FLOW_KEYS
  Parent Hashes: 8e33d5db7d014ea2fb2994bbe42010d043997d60
  Refs:  check_flow_keys_access() only uses fixed off
for validation. However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit rejects variable offset ALU operations on PTR_TO_FLOW_KEYS to ensure fixed offset validation.', 'keywords': 'PTR_TO_FLOW_KEYS,variable offset,validation', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8e33d5db7d014ea2fb2994bbe42010d043997d60
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8e33d5db7d014ea2fb2994bbe42010d043997d60
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1705172504
  Commit Message:
    Merge branch 'bpf-fix-backward-progress-bug-in-bpf_iter_udp'

Martin KaFai Lau says:

====================
bpf: Fix backward progress bug in bpf_iter_udp

From: Martin KaFai Lau <martin.lau@kernel.org>

This patch set fixes an issue in bpf_iter_udp that makes backward
progress and prevents the user space process from finishing. There is
a test at the end to reproduce the bug.

Please see individual patches for details.

v3:
- Fixed the iter_fd check and local_port check in the
  patch 3 selftest. (Yonghong)
- Moved jhash2 to test_jhash.h in the patch 3. (Yonghong)
- Added explanation in the bucket selection in the patch 3. (Yonghong)

v2:
- Added patch 1 to fix another bug that goes back to
  the previous bucket
- Simplify the fix in patch 2 to always reset iter->offset to 0
- Add a test case to close all udp_sk in a bucket while
  in the middle of the iteration.
====================

Link: https://lore.kernel.org/r/20240112190530.3751661-1-martin.lau@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 894d7508316e7ad722df597d68b4b1797a9eee11 dbd7db7787ba1743a505a495e479550932836fa4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes backward progress bug in bpf_iter_udp that prevents user space process completion.', 'keywords': 'bpf_iter_udp, bug fix, backward progress', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: dbd7db7787ba1743a505a495e479550932836fa4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dbd7db7787ba1743a505a495e479550932836fa4
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1705172504
  Commit Message:
    selftests/bpf: Test udp and tcp iter batching

The patch adds a test to exercise the bpf_iter_udp batching
logic. It specifically tests the case that there are multiple
so_reuseport udp_sk in a bucket of the udp_table.

The test creates two sets of so_reuseport sockets and
each set on a different port. Meaning there will be
two buckets in the udp_table.

The test does the following:
1. read() 3 out of 4 sockets in the first bucket.
2. close() all sockets in the first bucket. This
   will ensure the current bucket's offset in
   the kernel does not affect the read() of the
   following bucket.
3. read() all 4 sockets in the second bucket.

The test also reads one udp_sk at a time from
the bpf_iter_udp prog. The true case in
"do_test(...
  Parent Hashes: 2242fd537fab52d5f4d2fbb1845f047c01fad0cf
  Refs:  bool onebyone)". This is the buggy case
that the previous patch fixed.

It also tests the "false" case in "do_test(...

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a test for bpf_iter_udp batching in selftests.', 'keywords': 'bpf_iter_udp, batching, udp_sk', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2242fd537fab52d5f4d2fbb1845f047c01fad0cf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2242fd537fab52d5f4d2fbb1845f047c01fad0cf
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1705172504
  Commit Message:
    bpf: Avoid iter->offset making backward progress in bpf_iter_udp

There is a bug in the bpf_iter_udp_batch() function that stops
the userspace from making forward progress.

The case that triggers the bug is the userspace passed in
a very small read buffer. When the bpf prog does bpf_seq_printf
  Parent Hashes: 19ca0823f6eaad01d18f664a00550abe912c034c
  Refs: 
the userspace read buffer is not enough to capture the whole bucket.

When the read buffer is not large enough

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a bug in bpf_iter_udp_batch to ensure forward progress with small userspace read buffers.', 'keywords': 'bug, bpf_iter_udp, userspace', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 19ca0823f6eaad01d18f664a00550abe912c034c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 19ca0823f6eaad01d18f664a00550abe912c034c
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1705172504
  Commit Message:
    bpf: iter_udp: Retry with a larger batch size without going back to the previous bucket

The current logic is to use a default size 16 to batch the whole bucket.
If it is too small
  Parent Hashes: 894d7508316e7ad722df597d68b4b1797a9eee11
  Refs:  it will retry with a larger batch size.

The current code accidentally does a state->bucket-- before retrying.
This goes back to retry with the previous bucket which has already
been done. This patch fixed it.

It is hard to create a selftest. I added a WARN_ON(state->bucket < 0)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes issue in iter_udp logic where retries incorrectly decrease bucket index, causing redundant processing of previous bucket.', 'keywords': 'iter_udp, batch, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: fef018d8199661962b5fc0f0d1501caa54b2b533
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fef018d8199661962b5fc0f0d1501caa54b2b533
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1705099513
  Commit Message:
    Merge tag 'hid-for-linus-2024010801' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid

Pull HID updates from Jiri Kosina:

 - assorted functional fixes for hid-steam ported from SteamOS betas
   (Vicki Pfau)

 - fix for custom sensor-hub sensors (hinge angle sensor and LISS
   sensors) not working (Yauhen Kharuzhy)

 - functional fix for handling Confidence in Wacom driver (Jason
   Gerecke)

 - support for Ilitek ili2901 touchscreen (Zhengqiao Xia)

 - power management fix for Wacom userspace battery exporting
   (Tatsunosuke Tobita)

 - rework of wait-for-reset in order to reduce the need for
   I2C_HID_QUIRK_NO_IRQ_AFTER_RESET qurk; the success rate is now 50%
   better
  Parent Hashes: d97a78423c33f68ca6543de510a409167baed6f5 0b43615af19742e1f4f71d332e72381430804804
  Refs:  but there are still further improvements to be made (Hans de
   Goede)

 - greatly improved coverage of Tablets in hid-selftests (Benjamin
   Tissoires)

 - support for Nintendo NSO controllers -- SNES

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merged HID updates including functional fixes, sensor support, power management fixes, and improved self-tests.', 'keywords': 'HID, fixes, support', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 3e7aeb78ab01c2c2f0e1f784e5ddec88fcd3d106
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3e7aeb78ab01c2c2f0e1f784e5ddec88fcd3d106
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1704996449
  Commit Message:
    Merge tag 'net-next-6.8' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next

Pull networking updates from Paolo Abeni:
 "The most interesting thing is probably the networking structs
  reorganization and a significant amount of changes is around
  self-tests.

  Core & protocols:

   - Analyze and reorganize core networking structs (socks
  Parent Hashes: de927f6c0b07d9e698416c5b287c521b07694cac a7fe0881d9b78d402bbd9067dd4503a57c57a1d9
  Refs:  netdev

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking updates from Paolo Abeni including core structs reorganization and self-tests.', 'keywords': 'networking, structs, reorganization', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e3977e0609a07d86406029fceea0fd40d7849368
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e3977e0609a07d86406029fceea0fd40d7849368
  Author Name: Tejun Heo
  Author Email: tj@kernel.org
  Commit Date: 1704970287
  Commit Message:
    Revert "kernfs: convert kernfs_idr_lock to an irq safe raw spinlock"

This reverts commit dad3fb67ca1cbef87ce700e83a55835e5921ce8a.

The commit converted kernfs_idr_lock to an IRQ-safe raw_spinlock because it
could be acquired while holding an rq lock through bpf_cgroup_from_id().
However
  Parent Hashes: c312828c37a72fe2d033a961c47c227b0767e9f8
  Refs:  kernfs_idr_lock is held while doing GPF_NOWAIT allocations which
involves acquiring an non-IRQ-safe and non-raw lock leading to the following
lockdep warning:

  =============================
  [ BUG: Invalid wait context ]
  6.7.0-rc5-kzm9g-00251-g655022a45b1c #578 Not tainted
  -----------------------------
  swapper/0/0 is trying to lock:
  dfbcd488 (&c->lock){....}-{3:3}

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Revert the conversion of kernfs_idr_lock to an IRQ-safe raw spinlock due to lockdep warning issues.', 'keywords': 'revert, spinlock, lockdep', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 8158a50f9058ce882a6a020c41cef6bae2c3eae3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8158a50f9058ce882a6a020c41cef6bae2c3eae3
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1704510932
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2024-01-05

We've added 40 non-merge commits during the last 2 day(s) which contain
a total of 73 files changed
  Parent Hashes: 795fd9342c628839ac9c3f3133d063ce2e577ea7 5fe4ee6ae187523f710f1b93024437a073d88b17
  Refs:  1526 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merged 'bpf-next' changes with 73 files affected and 1526 insertions.", 'keywords': 'merge, bpf-next, changes', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5fe4ee6ae187523f710f1b93024437a073d88b17
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5fe4ee6ae187523f710f1b93024437a073d88b17
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1704429654
  Commit Message:
    Merge branch 'relax-tracing-prog-recursive-attach-rules'

Dmitrii Dolgov says:

====================
Relax tracing prog recursive attach rules

Currently
  Parent Hashes: 00bc8988807985e32f5103f1ac099baf593bd8a3 e02feb3f1f47509ec1e07b604bfbeff8c3b4e639
  Refs:  it's not allowed to attach an fentry/fexit prog to another
fentry/fexit. At the same time it's not uncommon to see a tracing
program with lots of logic in use

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit relaxes the rules for recursively attaching fentry/fexit tracing programs.', 'keywords': 'tracing recursive rules', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: e02feb3f1f47509ec1e07b604bfbeff8c3b4e639
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e02feb3f1f47509ec1e07b604bfbeff8c3b4e639
  Author Name: Dmitrii Dolgov
  Author Email: 9erthalion6@gmail.com
  Commit Date: 1704429649
  Commit Message:
    selftests/bpf: Test re-attachment fix for bpf_tracing_prog_attach

Add a test case to verify the fix for "prog->aux->dst_trampoline and
tgt_prog is NULL" branch in bpf_tracing_prog_attach. The sequence of
events:

1. load rawtp program
2. load fentry program with rawtp as target_fd
3. create tracing link for fentry program with target_fd = 0
4. repeat 3

Acked-by: Jiri Olsa <olsajiri@gmail.com>
Acked-by: Song Liu <song@kernel.org>
Signed-off-by: Dmitrii Dolgov <9erthalion6@gmail.com>
Link: https://lore.kernel.org/r/20240103190559.14750-5-9erthalion6@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 715d82ba636cb3629a6e18a33bb9dbe53f9936ee
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test case to verify the fix for re-attachment in bpf_tracing_prog_attach.', 'keywords': 'test case, re-attachment, bpf_tracing_prog_attach', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 715d82ba636cb3629a6e18a33bb9dbe53f9936ee
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 715d82ba636cb3629a6e18a33bb9dbe53f9936ee
  Author Name: Jiri Olsa
  Author Email: olsajiri@gmail.com
  Commit Date: 1704429619
  Commit Message:
    bpf: Fix re-attachment branch in bpf_tracing_prog_attach

The following case can cause a crash due to missing attach_btf:

1) load rawtp program
2) load fentry program with rawtp as target_fd
3) create tracing link for fentry program with target_fd = 0
4) repeat 3

In the end we have:

- prog->aux->dst_trampoline == NULL
- tgt_prog == NULL (because we did not provide target_fd to link_create)
- prog->aux->attach_btf == NULL (the program was loaded with attach_prog_fd=X)
- the program was loaded for tgt_prog but we have no way to find out which one

    BUG: kernel NULL pointer dereference
  Parent Hashes: 5c5371e069e1ffc204dda8b20c609b170b823165
  Refs:  address: 0000000000000058
    Call Trace:
     <TASK>
     ? __die+0x20/0x70
     ? page_fault_oops+0x15b/0x430
     ? fixup_exception+0x22/0x330
     ? exc_page_fault+0x6f/0x170
     ? asm_exc_page_fault+0x22/0x30
     ? bpf_tracing_prog_attach+0x279/0x560
     ? btf_obj_id+0x5/0x10
     bpf_tracing_prog_attach+0x439/0x560
     __sys_bpf+0x1cf4/0x2de0
     __x64_sys_bpf+0x1c/0x30
     do_syscall_64+0x41/0xf0
     entry_SYSCALL_64_after_hwframe+0x6e/0x76

Return -EINVAL in this situation.

Fixes: f3a95075549e0 ("bpf: Allow trampoline re-attach for tracing and lsm programs")
Cc: stable@vger.kernel.org
Signed-off-by: Jiri Olsa <olsajiri@gmail.com>
Acked-by: Jiri Olsa <olsajiri@gmail.com>
Acked-by: Song Liu <song@kernel.org>
Signed-off-by: Dmitrii Dolgov <9erthalion6@gmail.com>
Link: https://lore.kernel.org/r/20240103190559.14750-4-9erthalion6@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix crash due to missing attach_btf in bpf_tracing_prog_attach when re-attaching fentry programs.', 'keywords': 'crash, attach_btf, bpf_tracing', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 5c5371e069e1ffc204dda8b20c609b170b823165
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5c5371e069e1ffc204dda8b20c609b170b823165
  Author Name: Dmitrii Dolgov
  Author Email: 9erthalion6@gmail.com
  Commit Date: 1704429614
  Commit Message:
    selftests/bpf: Add test for recursive attachment of tracing progs

Verify the fact that only one fentry prog could be attached to another
fentry
  Parent Hashes: 19bfcdf9498aa968ea293417fbbc39e523527ca8
  Refs:  building up an attachment chain of limited size. Use existing
bpf_testmod as a start of the chain.

Acked-by: Jiri Olsa <olsajiri@gmail.com>
Acked-by: Song Liu <song@kernel.org>
Signed-off-by: Dmitrii Dolgov <9erthalion6@gmail.com>
Link: https://lore.kernel.org/r/20240103190559.14750-3-9erthalion6@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a test case for recursive attachment of tracing programs in eBPF selftests.', 'keywords': 'selftests,bpf,tracing', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 19bfcdf9498aa968ea293417fbbc39e523527ca8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 19bfcdf9498aa968ea293417fbbc39e523527ca8
  Author Name: Dmitrii Dolgov
  Author Email: 9erthalion6@gmail.com
  Commit Date: 1704429094
  Commit Message:
    bpf: Relax tracing prog recursive attach rules

Currently
  Parent Hashes: 00bc8988807985e32f5103f1ac099baf593bd8a3
  Refs:  it's not allowed to attach an fentry/fexit prog to another
one fentry/fexit. At the same time it's not uncommon to see a tracing
program with lots of logic in use

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit relaxes restrictions on attaching tracing programs like fentry/fexit to allow recursive attachment.', 'keywords': 'tracing, recursive, attach', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 00bc8988807985e32f5103f1ac099baf593bd8a3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 00bc8988807985e32f5103f1ac099baf593bd8a3
  Author Name: Leon Hwang
  Author Email: hffilwlqm@gmail.com
  Commit Date: 1704428530
  Commit Message:
    bpf
  Parent Hashes: 61a40c12496a763fdb95edc08d59f816a594a87a
  Refs:  x86: Use emit_nops to replace memcpy x86_nops

Move emit_nops() before emit_prologue() and replace
memcpy(prog

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize x86 nop insertion by moving emit_nops() before emit_prologue() and replacing memcpy usage.', 'keywords': 'x86,emit_nops,optimization', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 61a40c12496a763fdb95edc08d59f816a594a87a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 61a40c12496a763fdb95edc08d59f816a594a87a
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1704407845
  Commit Message:
    Merge branch 's390-bpf-fix-gotol-with-large-offsets'

Ilya Leoshkevich says:

====================
s390/bpf: Fix gotol with large offsets

Hi
  Parent Hashes: 98e20e5e13d2811898921f999288be7151a11954 63fac34669e4cc666f943173ed2aa76b8db999f0
  Refs: 

While looking at a pyperf180 failure on s390x (must be related to [1]

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix for BPF gotol instruction handling on s390 architecture with large offsets.', 'keywords': 's390,bpf,gotol', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 63fac34669e4cc666f943173ed2aa76b8db999f0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 63fac34669e4cc666f943173ed2aa76b8db999f0
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1704407845
  Commit Message:
    selftests/bpf: Test gotol with large offsets

Test gotol with offsets that don't fit into a short (i.e.
  Parent Hashes: 445aea5afda4759c13dc5c492b309cc1d5c1c486
  Refs:  larger than
32k or smaller than -32k).

Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/r/20240102193531.3169422-4-iii@linux.ibm.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds tests for gotol instruction with large offsets exceeding 32k in BPF selftests.', 'keywords': 'gotol, offsets, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 445aea5afda4759c13dc5c492b309cc1d5c1c486
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 445aea5afda4759c13dc5c492b309cc1d5c1c486
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1704407735
  Commit Message:
    selftests/bpf: Double the size of test_loader log

Testing long jumps requires having >32k instructions. That many
instructions require the verifier log buffer of 2 megabytes.

The regular test_progs run doesn't need an increased buffer
  Parent Hashes: ecba66cb36e3428e9f0c2362b45e213ad43ba8d0
  Refs:  since
gotol test with 40k instructions doesn't request a log

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Increase the test_loader log size for selftests involving >32k instructions.', 'keywords': 'selftests log size', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ecba66cb36e3428e9f0c2362b45e213ad43ba8d0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ecba66cb36e3428e9f0c2362b45e213ad43ba8d0
  Author Name: Ilya Leoshkevich
  Author Email: iii@linux.ibm.com
  Commit Date: 1704396940
  Commit Message:
    s390/bpf: Fix gotol with large offsets

The gotol implementation uses a wrong data type for the offset: it
should be s32
  Parent Hashes: 98e20e5e13d2811898921f999288be7151a11954
  Refs:  not s16.

Fixes: c690191e23d8 ("s390/bpf: Implement unconditional jump with 32-bit offset")
Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/r/20240102193531.3169422-2-iii@linux.ibm.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes the offset data type for gotol implementation in s390 architecture of BPF.', 'keywords': 'gotol,offset,s390', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 98e20e5e13d2811898921f999288be7151a11954
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 98e20e5e13d2811898921f999288be7151a11954
  Author Name: Quentin Deslandes
  Author Email: qde@naccy.de
  Commit Date: 1704392590
  Commit Message:
    bpfilter: remove bpfilter

bpfilter was supposed to convert iptables filtering rules into
BPF programs on the fly
  Parent Hashes: 9ddf872b47e3ac8f27dbfc4a4737a976c7588de6
  Refs:  from the kernel

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove bpfilter module responsible for converting iptables rules into BPF programs.', 'keywords': 'bpfilter, iptables, removal', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 9ddf872b47e3ac8f27dbfc4a4737a976c7588de6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9ddf872b47e3ac8f27dbfc4a4737a976c7588de6
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1704392294
  Commit Message:
    bpf: Remove unnecessary cpu == 0 check in memalloc

After merging the patch set [1] to reduce memory usage
for bpf_global_percpu_ma
  Parent Hashes: c040e902b07e946ff73e81d4abb4347d2c0b6044
  Refs:  Alexei found a redundant check (cpu == 0)
in function bpf_mem_alloc_percpu_unit_init() ([2]).
Indeed

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed an unnecessary cpu check in bpf_mem_alloc_percpu_unit_init function.', 'keywords': 'cpu, check, memalloc', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c312828c37a72fe2d033a961c47c227b0767e9f8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c312828c37a72fe2d033a961c47c227b0767e9f8
  Author Name: Andrea Righi
  Author Email: andrea.righi@canonical.com
  Commit Date: 1704384795
  Commit Message:
    kernfs: convert kernfs_idr_lock to an irq safe raw spinlock

bpf_cgroup_from_id() is basically a wrapper to cgroup_get_from_id()
  Parent Hashes: 93ec4a3b76404bce01bd5c9032bef5df6feb1d62
  Refs: 
that is relying on kernfs to determine the right cgroup associated to
the target id.

As a kfunc

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Convert kernfs_idr_lock to irq safe raw spinlock for bpf_cgroup_from_id function.', 'keywords': 'kernfs, irq, spinlock', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: c040e902b07e946ff73e81d4abb4347d2c0b6044
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c040e902b07e946ff73e81d4abb4347d2c0b6044
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1704346689
  Commit Message:
    Merge branch 'libbpf-side-__arg_ctx-fallback-support'

Andrii Nakryiko says:

====================
Libbpf-side __arg_ctx fallback support

Support __arg_ctx global function argument tag semantics even on older kernels
that don't natively support it through btf_decl_tag("arg:ctx").

Patches #2-#6 are preparatory work to allow to postpone BTF loading into the
kernel until after all the BPF program relocations (including global func
appending to main programs) are done. Patch #4 is perhaps the most important
and establishes pre-created stable placeholder FDs
  Parent Hashes: f8506c5734902ebda5c7b4778859b46d0a2ae5f3 95226f5a36695fd5740e130016d9ed697cfb2bad
  Refs:  so that relocations can
embed valid map FDs into ldimm64 instructions.

Once BTF is done after relocation

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges support for __arg_ctx fallback in libbpf to older kernels without native support.', 'keywords': 'libbpf, __arg_ctx, BTF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 95226f5a36695fd5740e130016d9ed697cfb2bad
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 95226f5a36695fd5740e130016d9ed697cfb2bad
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1704345769
  Commit Message:
    selftests/bpf: add __arg_ctx BTF rewrite test

Add a test validating that libbpf uploads BTF and func_info with
rewritten type information for arguments of global subprogs that are
marked with __arg_ctx tag.

Suggested-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240104013847.3875810-10-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 67fe459144dd629855bd9fb4b12bd9c4f792a8cf
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest to validate BTF and func_info type rewriting for global subprograms with __arg_ctx tag.', 'keywords': 'selftests,bpf,BTF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 67fe459144dd629855bd9fb4b12bd9c4f792a8cf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 67fe459144dd629855bd9fb4b12bd9c4f792a8cf
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1704345769
  Commit Message:
    selftests/bpf: add arg:ctx cases to test_global_funcs tests

Add a few extra cases of global funcs with context arguments. This time
rely on "arg:ctx" decl_tag (__arg_ctx macro)
  Parent Hashes: 2f38fe689470055440bf80fc644920023a643a82
  Refs:  but put it next to
"classic" cases where context argument has to be of an exact type that
BPF verifier expects (e.g.

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test cases for global functions with context arguments using "arg:ctx" macro in BPF selftests.', 'keywords': 'test cases, global funcs, context arguments', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2f38fe689470055440bf80fc644920023a643a82
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2f38fe689470055440bf80fc644920023a643a82
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1704345769
  Commit Message:
    libbpf: implement __arg_ctx fallback logic

Out of all special global func arg tag annotations
  Parent Hashes: 1004742d7ff03a088e74133af2401556ac80092b
  Refs:  __arg_ctx is
practically is the most immediately useful and most critical to have
working across multitude kernel version

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implement __arg_ctx fallback logic in libbpf to ensure compatibility across various kernel versions.', 'keywords': 'libbpf, __arg_ctx, fallback', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1004742d7ff03a088e74133af2401556ac80092b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1004742d7ff03a088e74133af2401556ac80092b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1704345769
  Commit Message:
    libbpf: move BTF loading step after relocation step

With all the preparations in previous patches done we are ready to
postpone BTF loading and sanitization step until after all the
relocations are performed.

Acked-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240104013847.3875810-7-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: fb03be7c4a27c25696287df4ee06c5aafa31267c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Postpone BTF loading until after relocations in libbpf.', 'keywords': 'BTF,relocation,libbpf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fb03be7c4a27c25696287df4ee06c5aafa31267c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fb03be7c4a27c25696287df4ee06c5aafa31267c
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1704345769
  Commit Message:
    libbpf: move exception callbacks assignment logic into relocation step

Move the logic of finding and assigning exception callback indices from
BTF sanitization step to program relocations step
  Parent Hashes: dac645b950ea4fc0896fe46a645365cb8d9ab92b
  Refs:  which seems more
logical and will unblock moving BTF loading to after relocation step.

Exception callbacks discovery and assignment has no dependency on BTF
being loaded into the kernel

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor the exception callbacks assignment logic from BTF sanitization to program relocations step in libbpf.', 'keywords': 'libbpf, exception callbacks, relocation', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: dac645b950ea4fc0896fe46a645365cb8d9ab92b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dac645b950ea4fc0896fe46a645365cb8d9ab92b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1704345769
  Commit Message:
    libbpf: use stable map placeholder FDs

Move map creation to later during BPF object loading by pre-creating
stable placeholder FDs (utilizing memfd_create()). Use dup2()
syscall to then atomically make those placeholder FDs point to real
kernel BPF map objects.

This change allows to delay BPF map creation to after all the BPF
program relocations. That
  Parent Hashes: f08c18e083adfef92946ae1d44b07bb81e727e08
  Refs:  in turn

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit introduces stable map placeholder FDs for delayed BPF map creation in libbpf.', 'keywords': 'libbpf,placeholder FDs,map creation', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f08c18e083adfef92946ae1d44b07bb81e727e08
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f08c18e083adfef92946ae1d44b07bb81e727e08
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1704345769
  Commit Message:
    libbpf: don't rely on map->fd as an indicator of map being created

With the upcoming switch to preallocated placeholder FDs for maps
  Parent Hashes: fa98b54bff39f51c46fc96d3385c6292391c277b
  Refs: 
switch various getters/setter away from checking map->fd. Use
map_is_created() helper that detect whether BPF map can be modified based
on map->obj->loaded state

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Switch libbpf to use map_is_created() instead of map->fd to detect map modification eligibility.', 'keywords': 'libbpf,map,fd', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fa98b54bff39f51c46fc96d3385c6292391c277b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fa98b54bff39f51c46fc96d3385c6292391c277b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1704345769
  Commit Message:
    libbpf: use explicit map reuse flag to skip map creation steps

Instead of inferring whether map already point to previously
created/pinned BPF map (which user can specify with bpf_map__reuse_fd()) API)
  Parent Hashes: df7c3f7d3a3ddab31ca8cfa9b86a8729ec43fd2e
  Refs: 
use explicit map->reused flag that is set in such case.

Acked-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240104013847.3875810-3-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit introduces an explicit map reuse flag to simplify map creation in libbpf.', 'keywords': 'explicit,map,reuse', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: df7c3f7d3a3ddab31ca8cfa9b86a8729ec43fd2e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: df7c3f7d3a3ddab31ca8cfa9b86a8729ec43fd2e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1704345768
  Commit Message:
    libbpf: make uniform use of btf__fd() accessor inside libbpf

It makes future grepping and code analysis a bit easier.

Acked-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20240104013847.3875810-2-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: f8506c5734902ebda5c7b4778859b46d0a2ae5f3
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Standardize the use of btf__fd() accessor in libbpf for easier code maintenance.', 'keywords': 'libbpf, btf__fd, accessor', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f8506c5734902ebda5c7b4778859b46d0a2ae5f3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f8506c5734902ebda5c7b4778859b46d0a2ae5f3
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1704344907
  Commit Message:
    Merge branch 'bpf-reduce-memory-usage-for-bpf_global_percpu_ma'

Yonghong Song says:

====================
bpf: Reduce memory usage for bpf_global_percpu_ma

Currently when a bpf program intends to allocate memory for percpu kptr
  Parent Hashes: 417fa6d163df6f13fb2cfad5132eff354c8a472e adc8c4549d9e74d2359c217d2478b18ecdd15c91
  Refs: 
the verifier will call bpf_mem_alloc_init() to prefill all supported
unit sizes and this caused memory consumption very big for large number
of cpus. For example

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize memory usage in bpf programs by adjusting bpf_global_percpu_ma behavior.', 'keywords': 'bpf, memory, optimization', 'commit_classification': "It's a performance optimization.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: adc8c4549d9e74d2359c217d2478b18ecdd15c91
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: adc8c4549d9e74d2359c217d2478b18ecdd15c91
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1704344906
  Commit Message:
    selftests/bpf: Add a selftest with > 512-byte percpu allocation size

Add a selftest to capture the verification failure when the allocation
size is greater than 512.

Acked-by: Hou Tao <houtao1@huawei.com>
Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20231222031812.1293190-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 21f5a801c171dff4e728e38f62cf626c4197d07c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a selftest for verification failure due to percpu allocation size exceeding 512 bytes.', 'keywords': 'selftest, percpu, allocation', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 21f5a801c171dff4e728e38f62cf626c4197d07c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 21f5a801c171dff4e728e38f62cf626c4197d07c
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1704344906
  Commit Message:
    selftests/bpf: Cope with 512 bytes limit with bpf_global_percpu_ma

In the previous patch
  Parent Hashes: 5c1a37653260ed5d9c8b26fb7fe7b99629612982
  Refs:  the maximum data size for bpf_global_percpu_ma
is 512 bytes. This breaks selftest test_bpf_ma. The test is adjusted
in two aspects:
  - Since the maximum allowed data size for bpf_global_percpu_ma is
    512

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adjust selftests to accommodate 512-byte limit of bpf_global_percpu_ma.', 'keywords': 'selftests, bpf_global_percpu_ma, limit', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 5c1a37653260ed5d9c8b26fb7fe7b99629612982
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5c1a37653260ed5d9c8b26fb7fe7b99629612982
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1704344906
  Commit Message:
    bpf: Limit up to 512 bytes for bpf_global_percpu_ma allocation

For percpu data structure allocation with bpf_global_percpu_ma
  Parent Hashes: 0e2ba9f96f9b82893ba19170ae48d46003f8ef44
  Refs: 
the maximum data size is 4K. But for a system with large
number of cpus

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit limits bpf_global_percpu_ma allocation size to 512 bytes for handling large CPU systems.', 'keywords': 'bpf, percpu, allocation', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0e2ba9f96f9b82893ba19170ae48d46003f8ef44
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0e2ba9f96f9b82893ba19170ae48d46003f8ef44
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1704344905
  Commit Message:
    bpf: Use smaller low/high marks for percpu allocation

Currently
  Parent Hashes: 5b95e638f134e552b5ba2976326c02babe248615
  Refs:  refill low/high marks are set with the assumption
of normal non-percpu memory allocation. For example

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adjust low and high marks for more efficient percpu memory allocation in BPF.', 'keywords': 'BPF, percpu, allocation', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5b95e638f134e552b5ba2976326c02babe248615
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5b95e638f134e552b5ba2976326c02babe248615
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1704344905
  Commit Message:
    bpf: Refill only one percpu element in memalloc

Typically for percpu map element or data structure
  Parent Hashes: c39aa3b289e9c10d0d246cd919b06809f13b72b8
  Refs:  once allocated

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize memory allocation by refilling only one percpu element in memalloc.', 'keywords': 'bpf, percpu, memalloc', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c39aa3b289e9c10d0d246cd919b06809f13b72b8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c39aa3b289e9c10d0d246cd919b06809f13b72b8
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1704344905
  Commit Message:
    bpf: Allow per unit prefill for non-fix-size percpu memory allocator

Commit 41a5db8d8161 ("Add support for non-fix-size percpu mem allocation")
added support for non-fix-size percpu memory allocation.
Such allocation will allocate percpu memory for all buckets on all
cpus and the memory consumption is in the order to quadratic.
For example
  Parent Hashes: 9fc8e802048ad150e8032c4f3dbf40112160cfe9
  Refs:  let us say

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit allows per-unit prefill for non-fixed-size percpu memory allocator to optimize memory usage.', 'keywords': 'percpu,memory,allocator', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9fc8e802048ad150e8032c4f3dbf40112160cfe9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9fc8e802048ad150e8032c4f3dbf40112160cfe9
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1704344905
  Commit Message:
    bpf: Add objcg to bpf_mem_alloc

The objcg is a bpf_mem_alloc level property since all bpf_mem_cache's
are with the same objcg. This patch made such a property explicit.
The next patch will use this property to save and restore objcg
for percpu unit allocator.

Acked-by: Hou Tao <houtao1@huawei.com>
Signed-off-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20231222031739.1288590-1-yonghong.song@linux.dev
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 9beda16c257d55213f70adee2f16d7f13a8502e1
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds objcg as a property to bpf_mem_alloc to enhance its functionality.', 'keywords': 'objcg,bpf_mem_alloc,property', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9beda16c257d55213f70adee2f16d7f13a8502e1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9beda16c257d55213f70adee2f16d7f13a8502e1
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1704344905
  Commit Message:
    bpf: Avoid unnecessary extra percpu memory allocation

Currently
  Parent Hashes: 417fa6d163df6f13fb2cfad5132eff354c8a472e
  Refs:  for percpu memory allocation

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize bpf by preventing extra percpu memory allocation.', 'keywords': 'bpf, percpu, memory', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bdbca46d3f84a4455cd5c15a7483666218851549
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bdbca46d3f84a4455cd5c15a7483666218851549
  Author Name: John Fastabend
  Author Email: john.fastabend@gmail.com
  Commit Date: 1704329422
  Commit Message:
    bpf: sockmap
  Parent Hashes: f1300467dd9f67293a7aae86fd26471520fac36d
  Refs:  add tests for proto updates replace socket

Add test that replaces the same socket with itself. This exercises a
corner case where old element and new element have the same posck.
Test protocols: TCP

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added tests to handle cases where a socket element is replaced with itself in sockmap, particularly focusing on TCP protocols.', 'keywords': 'sockmap, tests, TCP', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: f1300467dd9f67293a7aae86fd26471520fac36d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f1300467dd9f67293a7aae86fd26471520fac36d
  Author Name: John Fastabend
  Author Email: john.fastabend@gmail.com
  Commit Date: 1704329421
  Commit Message:
    bpf: sockmap
  Parent Hashes: 8c1b382a555adcd2008ae964047a35b739dfaf24
  Refs:  add tests for proto updates single socket to many map

Add test with multiple maps where each socket is inserted in multiple
maps. Test protocols: TCP

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add tests for handling multiple maps with single socket updates for TCP protocols.', 'keywords': 'sockmap,TCP,multiple maps', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 8c1b382a555adcd2008ae964047a35b739dfaf24
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8c1b382a555adcd2008ae964047a35b739dfaf24
  Author Name: John Fastabend
  Author Email: john.fastabend@gmail.com
  Commit Date: 1704329419
  Commit Message:
    bpf: sockmap
  Parent Hashes: 7865dfb1eb941ddd25802a9e13b6ff5f3f4dc02f
  Refs:  add tests for proto updates many to single map

Add test with a single map where each socket is inserted multiple
times. Test protocols: TCP

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test cases for TCP protocol updates using a single sockmap with multiple socket entries.', 'keywords': 'test,TCP,sockmap', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 7865dfb1eb941ddd25802a9e13b6ff5f3f4dc02f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7865dfb1eb941ddd25802a9e13b6ff5f3f4dc02f
  Author Name: John Fastabend
  Author Email: john.fastabend@gmail.com
  Commit Date: 1704329416
  Commit Message:
    bpf: sockmap
  Parent Hashes: 16b2f264983dc264c1560cc0170e760dec1bf54f
  Refs:  added comments describing update proto rules

Add a comment describing that the psock update proto callbback can be
called multiple times and this must be safe.

Signed-off-by: John Fastabend <john.fastabend@gmail.com>
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
Link: https://lore.kernel.org/r/20231221232327.43678-3-john.fastabend@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add comments in sockmap for psock update proto callback safety.', 'keywords': 'sockmap, psock, comments', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 16b2f264983dc264c1560cc0170e760dec1bf54f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 16b2f264983dc264c1560cc0170e760dec1bf54f
  Author Name: John Fastabend
  Author Email: john.fastabend@gmail.com
  Commit Date: 1704329406
  Commit Message:
    bpf: sockmap
  Parent Hashes: b4560055c8f11c5e2cfffb4de928b3cfd4eae3b4
  Refs:  fix proto update hook to avoid dup calls

When sockets are added to a sockmap or sockhash we allocate and init a
psock. Then update the proto ops with sock_map_init_proto the flow is

  sock_hash_update_common
    sock_map_link
      psock = sock_map_psock_get_checked() <-returns existing psock
      sock_map_init_proto(sk

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes proto update hook to prevent duplicate calls when adding sockets to sockmaps or sockhashes.', 'keywords': 'proto update, sockmap, duplicate calls', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 9c51f8788b5d4e9f46afbcf563255cfd355690b3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9c51f8788b5d4e9f46afbcf563255cfd355690b3
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1704315294
  Commit Message:
    perf env: Avoid recursively taking env->bpf_progs.lock

Add variants of perf_env__insert_bpf_prog_info()
  Parent Hashes: 58824fa0087e1cb732edbf1f112a5ea0b2205c8b
  Refs:  perf_env__insert_btf()
and perf_env__find_btf prefixed with __ to indicate the
env->bpf_progs.lock is assumed held.

Call these variants when the lock is held to avoid recursively taking it
and potentially having a thread deadlock with itself.

Fixes: f8dfeae009effc0b ("perf bpf: Show more BPF program info in print_bpf_prog_info()")
Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Song Liu <song@kernel.org>
Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: K Prateek Nayak <kprateek.nayak@amd.com>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Link: https://lore.kernel.org/r/20231207014655.1252484-1-irogers@google.com
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit addresses a potential deadlock issue in perf env by modifying lock usage when handling bpf prog information.', 'keywords': 'perf, deadlock, lock', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b4560055c8f11c5e2cfffb4de928b3cfd4eae3b4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b4560055c8f11c5e2cfffb4de928b3cfd4eae3b4
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1704308904
  Commit Message:
    Merge branch 'bpf-volatile-compare'

Alexei Starovoitov says:

====================
bpf: volatile compare

From: Alexei Starovoitov <ast@kernel.org>

v2->v3:
Debugged profiler.c regression. It was caused by basic block layout.
Introduce bpf_cmp_likely() and bpf_cmp_unlikely() macros.
Debugged redundant <<=32
  Parent Hashes: a640de4cf9fec0caf43ccb7404ec9f0fde9a6a65 7e3811cb998f0e2493677c7daf6cefb4ece27111
  Refs:  >>=32 with u32 variables. Added cast workaround.

v1->v2:
Fixed issues pointed out by Daniel

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce bpf_cmp_likely() and bpf_cmp_unlikely() macros for optimizing volatile comparisons in BPF programs.', 'keywords': 'bpf,cmp,macros', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7e3811cb998f0e2493677c7daf6cefb4ece27111
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7e3811cb998f0e2493677c7daf6cefb4ece27111
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1704308903
  Commit Message:
    selftests/bpf: Convert profiler.c to bpf_cmp.

Convert profiler[123].c to "volatile compare" to compare barrier_var() approach vs bpf_cmp_likely() vs bpf_cmp_unlikely().

bpf_cmp_unlikely() produces correct code
  Parent Hashes: 0bcc62aa9813f519db58df14ddf1d523fa971e62
  Refs:  but takes much longer to verify:

./veristat -C -e prog

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Convert profiler test files to use bpf_cmp for volatile comparison.', 'keywords': 'selftests,bpf_cmp,profiler', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0bcc62aa9813f519db58df14ddf1d523fa971e62
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0bcc62aa9813f519db58df14ddf1d523fa971e62
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1704308903
  Commit Message:
    bpf: Add bpf_nop_mov() asm macro.

bpf_nop_mov(var) asm macro emits nop register move: rX = rX.
If 'var' is a scalar and not a fixed constant the verifier will assign ID to it.
If it's later spilled the stack slot will carry that ID as well.
Hence the range refining comparison "if rX < const" will update all copies
including spilled slot.
This macro is a temporary workaround until the verifier gets smarter.

Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20231226191148.48536-6-alexei.starovoitov@gmail.com

  Parent Hashes: 907dbd3ede5ffd4f9519dd1fae2a8a983603bf3b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces a new bpf_nop_mov() macro for improved control over variable registration and ID tracking.', 'keywords': 'bpf_nop_mov, asm macro, verifier', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 907dbd3ede5ffd4f9519dd1fae2a8a983603bf3b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 907dbd3ede5ffd4f9519dd1fae2a8a983603bf3b
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1704308903
  Commit Message:
    selftests/bpf: Remove bpf_assert_eq-like macros.

Since the last user was converted to bpf_cmp
  Parent Hashes: 624cd2a17672f4596fee97a5558bc990778bbcf9
  Refs:  remove bpf_assert_eq/ne/... macros.

__bpf_assert_op() macro is kept for experiments

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes bpf_assert_eq macros from selftests as they are redundant with the new bpf_cmp macro.', 'keywords': 'selftests, macros, bpf_cmp', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 624cd2a17672f4596fee97a5558bc990778bbcf9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 624cd2a17672f4596fee97a5558bc990778bbcf9
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1704308903
  Commit Message:
    selftests/bpf: Convert exceptions_assert.c to bpf_cmp

Convert exceptions_assert.c to bpf_cmp_unlikely() macro.

Since

bpf_assert(bpf_cmp_unlikely(var
  Parent Hashes: a8b242d77bd72556b7a9d8be779f7d27b95ba73c
  Refs:  ==

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Convert exceptions_assert.c in selftests to use bpf_cmp_unlikely() macro.', 'keywords': 'exceptions_assert,bpf_cmp_unlikely,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a8b242d77bd72556b7a9d8be779f7d27b95ba73c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a8b242d77bd72556b7a9d8be779f7d27b95ba73c
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1704308322
  Commit Message:
    bpf: Introduce "volatile compare" macros

Compilers optimize conditional operators at will
  Parent Hashes: 495d2d8133fd1407519170a5238f455abbd9ec9b
  Refs:  but often bpf programmers
want to force compilers to keep the same operator in asm as it's written in C.
Introduce bpf_cmp_likely/unlikely(var1

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces macros for volatile comparisons to aid bpf programmers in controlling compiler optimizations.', 'keywords': 'volatile, macros, operators', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 495d2d8133fd1407519170a5238f455abbd9ec9b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 495d2d8133fd1407519170a5238f455abbd9ec9b
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1704307282
  Commit Message:
    selftests/bpf: Attempt to build BPF programs with -Wsign-compare

GCC's -Wall includes -Wsign-compare while clang does not.
Since BPF programs are built with clang we need to add this flag explicitly
to catch problematic comparisons like:

  int i = -1;
  unsigned int j = 1;
  if (i < j) // this is false.

  long i = -1;
  unsigned int j = 1;
  if (i < j) // this is true.

C standard for reference:

- If either operand is unsigned long the other shall be converted to unsigned long.

- Otherwise
  Parent Hashes: a640de4cf9fec0caf43ccb7404ec9f0fde9a6a65
  Refs:  if one operand is a long int and the other unsigned int

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add -Wsign-compare flag to clang when building BPF programs to catch signed/unsigned comparison issues.', 'keywords': 'BPF programs, -Wsign-compare, clang', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a640de4cf9fec0caf43ccb7404ec9f0fde9a6a65
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a640de4cf9fec0caf43ccb7404ec9f0fde9a6a65
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1704307077
  Commit Message:
    Merge branch 'bpf-simplify-checking-size-of-helper-accesses'

Andrei Matei says:

====================
bpf: Simplify checking size of helper accesses

v3->v4:
- kept only the minimal change
  Parent Hashes: 2ab1efad60ad119b616722b81eeb73060728028c 72187506de4f19fcc8ae63a2b2f36d75e5259d9d
  Refs:  undoing debatable changes (Andrii)
- dropped the second patch from before

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Simplifies checking the size of eBPF helper accesses by retaining minimal changes.', 'keywords': 'bpf, helper, simplify', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 72187506de4f19fcc8ae63a2b2f36d75e5259d9d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 72187506de4f19fcc8ae63a2b2f36d75e5259d9d
  Author Name: Andrei Matei
  Author Email: andreimatei1@gmail.com
  Commit Date: 1704307076
  Commit Message:
    bpf: Add a possibly-zero-sized read test

This patch adds a test for the condition that the previous patch mucked
with - illegal zero-sized helper memory access. As opposed to existing
tests
  Parent Hashes: 8a021e7fa10576eeb3938328f39bbf98fe7d4715
  Refs:  this new one uses a size whose lower bound is zero

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test for zero-sized helper memory access in eBPF.', 'keywords': 'test, zero-sized, memory', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8a021e7fa10576eeb3938328f39bbf98fe7d4715
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8a021e7fa10576eeb3938328f39bbf98fe7d4715
  Author Name: Andrei Matei
  Author Email: andreimatei1@gmail.com
  Commit Date: 1704307076
  Commit Message:
    bpf: Simplify checking size of helper accesses

This patch simplifies the verification of size arguments associated to
pointer arguments to helpers and kfuncs. Many helpers take a pointer
argument followed by the size of the memory access performed to be
performed through that pointer. Before this patch
  Parent Hashes: 2ab1efad60ad119b616722b81eeb73060728028c
  Refs:  the handling of the
size argument in check_mem_size_reg() was confusing and wasteful: if the
size register's lower bound was 0

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit simplifies the verification of size arguments for helper and kfunc pointer accesses in eBPF.', 'keywords': 'simplify, helper, verification', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9b0a3839e8d29663cd9ee2c43d38b06c3b91619e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9b0a3839e8d29663cd9ee2c43d38b06c3b91619e
  Author Name: Greg Kroah-Hartman
  Author Email: gregkh@linuxfoundation.org
  Commit Date: 1704191128
  Commit Message:
    HID: bpf: make bus_type const in struct hid_bpf_ops

The struct bus_type pointer in hid_bpf_ops just passes the pointer to
the driver core
  Parent Hashes: c4a9743699f3b093bad4bcc472c4ee34c7929f33
  Refs:  and the driver core can handle

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Make bus_type const in struct hid_bpf_ops to work with driver core.', 'keywords': 'HID,bus_type,const', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['HID driver like programs']}
--------------------
--------------------
Processing Commit ID: 240436c06ce992879d59e504b0df3d32deebb43e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 240436c06ce992879d59e504b0df3d32deebb43e
  Author Name: David S. Miller
  Author Email: davem@davemloft.net
  Commit Date: 1704120321
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
bpf-next-for-netdev
The following pull-request contains BPF updates for your *net-next* tree.

We've added 22 non-merge commits during the last 3 day(s) which contain
a total of 23 files changed
  Parent Hashes: cff9c565e65f3622e8dc1dcc21c1520a083dff35 5abde62465222edd3080b70099bd809f166d5d7d
  Refs:  652 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge bpf-next branch into the net-next tree with updates containing various BPF enhancements.', 'keywords': 'BPF, merge, updates', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fc044c53b99fad039ac30b95b289992ebf7dd6b4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fc044c53b99fad039ac30b95b289992ebf7dd6b4
  Author Name: Namhyung Kim
  Author Email: namhyung@kernel.org
  Commit Date: 1703381982
  Commit Message:
    perf annotate-data: Add dso->data_types tree

To aggregate accesses to the same data type
  Parent Hashes: b9c87f536c6f28c75ace8a014646faad00f0e1ec
  Refs:  add 'data_types' tree in
DSO to maintain data types and find it by name and size.

It might have different data types that happen to have the same name

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a data tree structure in DSO to manage and differentiate data types by name and size.', 'keywords': 'data tree, DSO, data types', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 2437c0f5147b82b92075af6085b99051753f4a3c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2437c0f5147b82b92075af6085b99051753f4a3c
  Author Name: David S. Miller
  Author Email: davem@davemloft.net
  Commit Date: 1703291192
  Commit Message:
    Merge branch 'net-selftests-unique-namespace-last-part'

Hangbin Liu says:

====================
Convert net selftests to run in unique namespace (last part)

Here is the last part of converting net selftests to run in unique namespace.
This part converts all left tests. After the conversion
  Parent Hashes: 6530b29f77c8960bd21639ce71070499d155396b 9d0b4ad82d6117e6d7ead50f64be54ec782aa1fe
  Refs:  we can run the net
sleftests in parallel. e.g.

 # ./run_kselftest.sh -n -t net:reuseport_bpf
 TAP version 13
 1..1
 # selftests: net: reuseport_bpf
 ok 1 selftests: net: reuseport_bpf
  mod 10...
 # Socket 0: 0
 # Socket 1: 1
 ...
 # Socket 4: 19
 # Testing filter add without bind...
 # SUCCESS

 # ./run_kselftest.sh -p -n -t net:cmsg_so_mark.sh -t net:cmsg_time.sh -t net:cmsg_ipv6.sh
 TAP version 13
 1..3
 # selftests: net: cmsg_so_mark.sh
 ok 1 selftests: net: cmsg_so_mark.sh
 # selftests: net: cmsg_time.sh
 ok 2 selftests: net: cmsg_time.sh
 # selftests: net: cmsg_ipv6.sh
 ok 3 selftests: net: cmsg_ipv6.sh

 # ./run_kselftest.sh -p -n -c net
 TAP version 13
 1..95
 # selftests: net: reuseport_bpf_numa
 ok 3 selftests: net: reuseport_bpf_numa
 # selftests: net: reuseport_bpf_cpu
 ok 2 selftests: net: reuseport_bpf_cpu
 # selftests: net: sk_bind_sendto_listen
 ok 9 selftests: net: sk_bind_sendto_listen
 # selftests: net: reuseaddr_conflict
 ok 5 selftests: net: reuseaddr_conflict
 ...

Here is the part 1 link:
https://lore.kernel.org/netdev/20231202020110.362433-1-liuhangbin@gmail.com
part 2 link:
https://lore.kernel.org/netdev/20231206070801.1691247-1-liuhangbin@gmail.com
part 3 link:
https://lore.kernel.org/netdev/20231213060856.4030084-1-liuhangbin@gmail.com
====================

Signed-off-by: David S. Miller <davem@davemloft.net>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Convert remaining net selftests to run in unique namespaces for parallel execution.', 'keywords': 'net selftests, unique namespace, parallel execution', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 5abde62465222edd3080b70099bd809f166d5d7d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5abde62465222edd3080b70099bd809f166d5d7d
  Author Name: Simon Horman
  Author Email: horms@kernel.org
  Commit Date: 1703194825
  Commit Message:
    bpf: Avoid unnecessary use of comma operator in verifier

Although it does not seem to have any untoward side-effects
  Parent Hashes: b08c8fc0411dce0fc44b78ce4d67f1b67c35c196
  Refs:  the use
of ';' to separate to assignments seems more appropriate than '

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit improves the eBPF verifier by avoiding unnecessary use of the comma operator in assignments.', 'keywords': 'bpf, verifier, comma', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7c5e046bdcb2513f9decb3765d8bf92d604279cf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7c5e046bdcb2513f9decb3765d8bf92d604279cf
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1703178937
  Commit Message:
    Merge tag 'net-6.7-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 "Including fixes from WiFi and bpf.

  Current release - regressions:

   - bpf: syzkaller found null ptr deref in unix_bpf proto add

   - eth: i40e: fix ST code value for clause 45

  Previous releases - regressions:

   - core: return error from sk_stream_wait_connect() if sk_wait_event()
     fails

   - ipv6: revert remove expired routes with a separated list of routes

   - wifi rfkill:
       - set GPIO direction
       - fix crash with WED rx support enabled

   - bluetooth:
       - fix deadlock in vhci_send_frame
       - fix use-after-free in bt_sock_recvmsg

   - eth: mlx5e: fix a race in command alloc flow

   - eth: ice: fix PF with enabled XDP going no-carrier after reset

   - eth: bnxt_en: do not map packet buffers twice

  Previous releases - always broken:

   - core:
       - check vlan filter feature in vlan_vids_add_by_dev() and
         vlan_vids_del_by_dev()
       - check dev->gso_max_size in gso_features_check()

   - mptcp: fix inconsistent state on fastopen race

   - phy: skip LED triggers on PHYs on SFP modules

   - eth: mlx5e:
       - fix double free of encap_header
       - fix slab-out-of-bounds in mlx5_query_nic_vport_mac_list()"

* tag 'net-6.7-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (69 commits)
  net: check dev->gso_max_size in gso_features_check()
  kselftest: rtnetlink.sh: use grep_fail when expecting the cmd fail
  net/ipv6: Revert remove expired routes with a separated list of routes
  net: avoid build bug in skb extension length calculation
  net: ethernet: mtk_wed: fix possible NULL pointer dereference in mtk_wed_wo_queue_tx_clean()
  net: stmmac: fix incorrect flag check in timestamp interrupt
  selftests: add vlan hw filter tests
  net: check vlan filter feature in vlan_vids_add_by_dev() and vlan_vids_del_by_dev()
  net: hns3: add new maintainer for the HNS3 ethernet driver
  net: mana: select PAGE_POOL
  net: ks8851: Fix TX stall caused by TX buffer overrun
  ice: Fix PF with enabled XDP going no-carrier after reset
  ice: alter feature support check for SRIOV and LAG
  ice: stop trashing VF VSI aggregator node ID information
  mailmap: add entries for Geliang Tang
  mptcp: fill in missing MODULE_DESCRIPTION()
  mptcp: fix inconsistent state on fastopen race
  selftests: mptcp: join: fix subflow_send_ack lookup
  net: phy: skip LED triggers on PHYs on SFP modules
  bpf: Add missing BPF_LINK_TYPE invocations
  ...

  Parent Hashes: a4aebe936554dac6a91e5d091179c934f8325708 74769d810ead7e7af1a481f07a4d890861a6a4cc
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes including bpf and WiFi enhancements for current and previous release regressions.', 'keywords': 'networking, fixes, bpf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['xdp like programs', 'socket like programs', 'tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: b08c8fc0411dce0fc44b78ce4d67f1b67c35c196
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b08c8fc0411dce0fc44b78ce4d67f1b67c35c196
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1703165070
  Commit Message:
    bpf: Re-support uid and gid when mounting bpffs

For a clean
  Parent Hashes: fc3a5534e2a8855427403113cbeb54af5837bbe0
  Refs:  conflict-free revert of the token-related patches in commit
d17aff807f84 ("Revert BPF token-related functionality")

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Re-supporting uid and gid functionality when mounting bpf filesystem with bpffs.', 'keywords': 'uid,gid,bpffs', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 74769d810ead7e7af1a481f07a4d890861a6a4cc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 74769d810ead7e7af1a481f07a4d890861a6a4cc
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1703158049
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2023-12-21

Hi David
  Parent Hashes: 24ab059d2ebd62fdccc43794796f6ffbabe49ebc 117211aa739a926e6555cfea883be84bee6f1695
  Refs:  hi Jakub

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merge branch 'for-netdev' from bpf to merge the latest changes.", 'keywords': 'merge, netdev, bpf', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: fc3a5534e2a8855427403113cbeb54af5837bbe0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fc3a5534e2a8855427403113cbeb54af5837bbe0
  Author Name: Mingyi Zhang
  Author Email: zhangmingyi5@huawei.com
  Commit Date: 1703149542
  Commit Message:
    libbpf: Fix NULL pointer dereference in bpf_object__collect_prog_relos

An issue occurred while reading an ELF file in libbpf.c during fuzzing:

	Program received signal SIGSEGV
  Parent Hashes: 812d8bf87678f77055b575d20636fdbbbf15edaf
  Refs:  Segmentation fault.
	0x0000000000958e97 in bpf_object.collect_prog_relos () at libbpf.c:4206
	4206 in libbpf.c
	(gdb) bt
	#0 0x0000000000958e97 in bpf_object.collect_prog_relos () at libbpf.c:4206
	#1 0x000000000094f9d6 in bpf_object.collect_relos () at libbpf.c:6706
	#2 0x000000000092bef3 in bpf_object_open () at libbpf.c:7437
	#3 0x000000000092c046 in bpf_object.open_mem () at libbpf.c:7497
	#4 0x0000000000924afa in LLVMFuzzerTestOneInput () at fuzz/bpf-object-fuzzer.c:16
	#5 0x000000000060be11 in testblitz_engine::fuzzer::Fuzzer::run_one ()
	#6 0x000000000087ad92 in tracing::span::Span::in_scope ()
	#7 0x00000000006078aa in testblitz_engine::fuzzer::util::walkdir ()
	#8 0x00000000005f3217 in testblitz_engine::entrypoint::main::{{closure}} ()
	#9 0x00000000005f2601 in main ()
	(gdb)

scn_data was null at this code(tools/lib/bpf/src/libbpf.c):

	if (rel->r_offset % BPF_INSN_SZ || rel->r_offset >= scn_data->d_size) {

The scn_data is derived from the code above:

	scn = elf_sec_by_idx(obj

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix a NULL pointer dereference in libbpf during ELF file processing.', 'keywords': 'NULL,libbpf,dereference', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 812d8bf87678f77055b575d20636fdbbbf15edaf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 812d8bf87678f77055b575d20636fdbbbf15edaf
  Author Name: Alyssa Ross
  Author Email: hi@alyssa.is
  Commit Date: 1703149515
  Commit Message:
    libbpf: Skip DWARF sections in linker sanity check

clang can generate (with -g -Wa
  Parent Hashes: 92999245102a09ab2645424a9c9a0a5b16fda833
  Refs: --compress-debug-sections) 4-byte
aligned DWARF sections that declare themselves to be 8-byte aligned in
the section header.  Since DWARF sections are dropped during linking
anyway

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies libbpf to skip DWARF sections in the linker sanity check.', 'keywords': 'libbpf, DWARF, linker', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 92999245102a09ab2645424a9c9a0a5b16fda833
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 92999245102a09ab2645424a9c9a0a5b16fda833
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1703107547
  Commit Message:
    Merge branch 'bpf-fix-warning-in-check_obj_size'

Hou Tao says:

====================
bpf: Fix warning in check_obj_size()

From: Hou Tao <houtao1@huawei.com>

Hi
  Parent Hashes: 32f24938a1fce95fce314c1fa9a72af74588ea6c 69ff403d87be4812571c54b1159e24998414bcab
  Refs: 

The patch set aims to fix the warning in check_obj_size() as reported by
lkp [1]. Patch #1 fixes the warning by selecting target cache for free
request through c->unit_size

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a warning in check_obj_size function within the BPF subsystem.', 'keywords': 'warning, check_obj_size, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 69ff403d87be4812571c54b1159e24998414bcab
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 69ff403d87be4812571c54b1159e24998414bcab
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1703107546
  Commit Message:
    selftests/bpf: Remove tests for zeroed-array kptr

bpf_mem_alloc() doesn't support zero-sized allocation
  Parent Hashes: 7ac5c53e00735d183a0f5e2cfce5eeb6c16319f2
  Refs:  so removing these
tests from test_bpf_ma test. After the removal

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed tests for zeroed-array kptr in selftests due to unsupported zero-sized allocations in bpf_mem_alloc().', 'keywords': 'zeroed-array kptr, bpf_mem_alloc, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7ac5c53e00735d183a0f5e2cfce5eeb6c16319f2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7ac5c53e00735d183a0f5e2cfce5eeb6c16319f2
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1703107546
  Commit Message:
    bpf: Use c->unit_size to select target cache during free

At present
  Parent Hashes: 32f24938a1fce95fce314c1fa9a72af74588ea6c
  Refs:  bpf memory allocator uses check_obj_size() to ensure that
ksize() of allocated pointer is equal with the unit_size of used
bpf_mem_cache. Its purpose is to prevent bpf_mem_free() from selecting
a bpf_mem_cache which has different unit_size compared with the
bpf_mem_cache used for allocation. But as reported by lkp

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed unit size selection in bpf_mem_free to match allocation cache unit size.', 'keywords': 'unit_size, bpf_mem_cache, allocation', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e77b0236cd0cd1572c6a9b25097b207eab799e74
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e77b0236cd0cd1572c6a9b25097b207eab799e74
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1703094970
  Commit Message:
    perf maps: Add maps__load_first()

Avoid bpf_lock_contention_read touching the internal maps data structure
by adding a helper function. As access is done directly on the map in
maps
  Parent Hashes: 9084952704ba075de28684301ec282b6626b5e7a
  Refs:  hold the read lock to stop it being removed.

Signed-off-by: Ian Rogers <irogers@google.com>
Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Andi Kleen <ak@linux.intel.com>
Cc: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Colin Ian King <colin.i.king@gmail.com>
Cc: Dmitrii Dolgov <9erthalion6@gmail.com>
Cc: German Gomez <german.gomez@arm.com>
Cc: Guilherme Amadio <amadio@gentoo.org>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: James Clark <james.clark@arm.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: K Prateek Nayak <kprateek.nayak@amd.com>
Cc: Kajol Jain <kjain@linux.ibm.com>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: Leo Yan <leo.yan@linaro.org>
Cc: Li Dong <lidong@vivo.com>
Cc: Liam Howlett <liam.howlett@oracle.com>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Miguel Ojeda <ojeda@kernel.org>
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Nick Terrell <terrelln@fb.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Sandipan Das <sandipan.das@amd.com>
Cc: Sean Christopherson <seanjc@google.com>
Cc: Steinar H. Gunderson <sesse@google.com>
Cc: Vincent Whitchurch <vincent.whitchurch@axis.com>
Cc: Wenyu Liu <liuwenyu7@huawei.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Link: https://lore.kernel.org/r/20231207011722.1220634-20-irogers@google.com
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Introduces the maps__load_first() helper function to reduce bpf_lock_contention_read's interaction with internal map data structures.", 'keywords': 'perf maps, helper function, lock contention', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 32f24938a1fce95fce314c1fa9a72af74588ea6c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 32f24938a1fce95fce314c1fa9a72af74588ea6c
  Author Name: Colin Ian King
  Author Email: colin.i.king@gmail.com
  Commit Date: 1703082539
  Commit Message:
    samples/bpf: Use %lu format specifier for unsigned long values

Currently %ld format specifiers are being used for unsigned long
values. Fix this by using %lu instead. Cleans up cppcheck warnings:

warning: %ld in format string (no. 1) requires 'long' but the argument
type is 'unsigned long'. [invalidPrintfArgType_sint]

Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Randy Dunlap <rdunlap@infradead.org>
Link: https://lore.kernel.org/bpf/20231219152307.368921-1-colin.i.king@gmail.com

  Parent Hashes: 441c725ed592cb22f2a82f2827dccd045356cc81
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix format specifiers in sample BPF code from %ld to %lu for unsigned long values to resolve cppcheck warnings.', 'keywords': 'format specifiers, cppcheck, cleanup', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 441c725ed592cb22f2a82f2827dccd045356cc81
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 441c725ed592cb22f2a82f2827dccd045356cc81
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1703038931
  Commit Message:
    selftests/bpf: Close cgrp fd before calling cleanup_cgroup_environment()

There is error log when htab-mem benchmark completes. The error log
looks as follows:

$ ./bench htab-mem -d1
Setting up benchmark 'htab-mem'...
Benchmark 'htab-mem' started.
......
(cgroup_helpers.c:353: errno: Device or resource busy) umount cgroup2

Fix it by closing cgrp fd before invoking cleanup_cgroup_environment().

Signed-off-by: Hou Tao <houtao1@huawei.com>
Link: https://lore.kernel.org/r/20231219135727.2661527-1-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 85dd93ac6e00adf09fc27e4d2e7f5c9aaf275d38
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix htab-mem benchmark error by closing cgroup file descriptor before cleanup.', 'keywords': 'htab-mem,close,cgroup', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 85dd93ac6e00adf09fc27e4d2e7f5c9aaf275d38
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 85dd93ac6e00adf09fc27e4d2e7f5c9aaf275d38
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1703038007
  Commit Message:
    Merge branch 'enhance-bpf-global-subprogs-with-argument-tags'

Andrii Nakryiko says:

====================
Enhance BPF global subprogs with argument tags

This patch set adds verifier support for annotating user's global BPF subprog
arguments with few commonly requested annotations
  Parent Hashes: c337f237291b41b308c80124236876cf66c77906 f0a5056222f2cfa6d40b4c888cb6b01e8569e282
  Refs:  to improve global subprog
verification experience.

These tags are:
  - ability to annotate a special PTR_TO_CTX argument;
  - ability to annotate a generic PTR_TO_MEM as non-null.

We utilize btf_decl_tag attribute for this and provide two helper macros as
part of bpf_helpers.h in libbpf (patch #8).

Besides this we also add abilit to pass a pointer to dynptr into global
subprog. This is done based on type name match (struct bpf_dynptr *). This
allows to pass dynptrs into global subprogs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance BPF subprograms with argument tags for improved global subprogram verification experience.', 'keywords': 'BPF, argument, tags', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f0a5056222f2cfa6d40b4c888cb6b01e8569e282
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f0a5056222f2cfa6d40b4c888cb6b01e8569e282
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1703038007
  Commit Message:
    selftests/bpf: add freplace of BTF-unreliable main prog test

Add a test validating that freplace'ing another main (entry) BPF program
fails if the target BPF program doesn't have valid/expected func proto BTF.

We extend fexit_bpf2bpf test to allow to specify expected log message
for negative test cases (where freplace program is expected to fail to
load).

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231215011334.2307144-11-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 0a0ffcac92d5b41133c97d260ad1f320572783a5
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a self-test for freplace of BTF-unreliable main BPF programs.', 'keywords': 'self-test,BTF-unreliable,freplace', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0a0ffcac92d5b41133c97d260ad1f320572783a5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0a0ffcac92d5b41133c97d260ad1f320572783a5
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1703038007
  Commit Message:
    selftests/bpf: add global subprog annotation tests

Add test cases to validate semantics of global subprog argument
annotations:
  - non-null pointers;
  - context argument;
  - const dynptr passing;
  - packet pointers (data
  Parent Hashes: aae9c25dda159045b223ecb471cd0729ccec8285
  Refs:  metadata

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test cases for global subprog argument annotations in BPF selftests.', 'keywords': 'selftests, annotations, subprog', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: aae9c25dda159045b223ecb471cd0729ccec8285
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: aae9c25dda159045b223ecb471cd0729ccec8285
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1703038007
  Commit Message:
    libbpf: add __arg_xxx macros for annotating global func args

Add a set of __arg_xxx macros which can be used to augment BPF global
subprogs/functions with extra information for use by BPF verifier.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231215011334.2307144-9-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: a64bfe618665ea9c722f922cba8c6e3234eac5ac
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds __arg_xxx macros to annotate global BPF functions for the verifier.', 'keywords': 'macros, global functions, verifier', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a64bfe618665ea9c722f922cba8c6e3234eac5ac
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a64bfe618665ea9c722f922cba8c6e3234eac5ac
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1703038006
  Commit Message:
    bpf: add support for passing dynptr pointer to global subprog

Add ability to pass a pointer to dynptr into global functions.
This allows to have global subprogs that accept and work with generic
dynptrs that are created by caller. Dynptr argument is detected based on
the name of a struct type
  Parent Hashes: 94e1c70a34523b5e1529e4ec508316acc6a26a2b
  Refs:  if it's "bpf_dynptr"

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for passing dynamic pointer to global subprograms in BPF.', 'keywords': 'dynptr, global, subprog', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 94e1c70a34523b5e1529e4ec508316acc6a26a2b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 94e1c70a34523b5e1529e4ec508316acc6a26a2b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1703038006
  Commit Message:
    bpf: support 'arg:xxx' btf_decl_tag-based hints for global subprog args

Add support for annotating global BPF subprog arguments to provide more
information about expected semantics of the argument. Currently
  Parent Hashes: f18c3d88deedf0defc3e4800341cc7bcaaabcdf9
  Refs: 
verifier relies purely on argument's BTF type information

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for BTF declaration tag-based hints for global eBPF subprogram arguments.', 'keywords': 'BTF, subprogram, hints', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f18c3d88deedf0defc3e4800341cc7bcaaabcdf9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f18c3d88deedf0defc3e4800341cc7bcaaabcdf9
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1703038006
  Commit Message:
    bpf: reuse subprog argument parsing logic for subprog call checks

Remove duplicated BTF parsing logic when it comes to subprog call check.
Instead
  Parent Hashes: c5a7244759b1eeacc59d0426fb73859afa942d0d
  Refs:  use (potentially cached) results of btf_prepare_func_args() to
abstract away expectations of each subprog argument in generic terms
(e.g.

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes duplicated BTF parsing logic for subprogram call checks and improves argument parsing.', 'keywords': 'BTF, parsing, subprog', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c5a7244759b1eeacc59d0426fb73859afa942d0d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c5a7244759b1eeacc59d0426fb73859afa942d0d
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1703038006
  Commit Message:
    bpf: move subprog call logic back to verifier.c

Subprog call logic in btf_check_subprog_call() currently has both a lot
of BTF parsing logic (which is
  Parent Hashes: e26080d0da87f20222ca6712b65f95a856fadee0
  Refs:  presumably

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit moves subprogram call logic back to verifier.c to separate it from BTF parsing logic.', 'keywords': 'subprog, verifier, BTF', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e26080d0da87f20222ca6712b65f95a856fadee0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e26080d0da87f20222ca6712b65f95a856fadee0
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1703038006
  Commit Message:
    bpf: prepare btf_prepare_func_args() for handling static subprogs

Generalize btf_prepare_func_args() to support both global and static
subprogs. We are going to utilize this property in the next patch
  Parent Hashes: 5eccd2db42d77e3570619c32d39e39bf486607cf
  Refs: 
reusing btf_prepare_func_args() for subprog call logic instead of
reparsing BTF information in a completely separate implementation.

btf_prepare_func_args() now detects whether subprog is global or static
makes slight logic adjustments for static func cases

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Generalize btf_prepare_func_args() to support both global and static subprograms for BTF information parsing.', 'keywords': 'BTF, subprog, function', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5eccd2db42d77e3570619c32d39e39bf486607cf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5eccd2db42d77e3570619c32d39e39bf486607cf
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1703038006
  Commit Message:
    bpf: reuse btf_prepare_func_args() check for main program BTF validation

Instead of btf_check_subprog_arg_match()
  Parent Hashes: 4ba1d0f23414135e4f426dae4cb5cdc2ce246f89
  Refs:  use btf_prepare_func_args()
logic to validate "trustworthiness" of main BPF program's BTF information

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit improves main BPF program BTF validation by reusing btf_prepare_func_args() check.', 'keywords': 'BPF,BTF,validation', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4ba1d0f23414135e4f426dae4cb5cdc2ce246f89
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4ba1d0f23414135e4f426dae4cb5cdc2ce246f89
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1703038006
  Commit Message:
    bpf: abstract away global subprog arg preparation logic from reg state setup

btf_prepare_func_args() is used to understand expectations and
restrictions on global subprog arguments. But current implementation is
hard to extend
  Parent Hashes: c337f237291b41b308c80124236876cf66c77906
  Refs:  as it intermixes BTF-based func prototype parsing and
interpretation logic with setting up register state at subprog entry.

Worse still

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor global subprog argument handling logic for better extensibility in bpf.', 'keywords': 'global subprog, argument, extensibility', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c337f237291b41b308c80124236876cf66c77906
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c337f237291b41b308c80124236876cf66c77906
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1703035136
  Commit Message:
    Merge branch 'bpf-support-to-track-bpf_jne'

Menglong Dong says:

====================
bpf: support to track BPF_JNE

For now
  Parent Hashes: 1728df7fc11bf09322852ff05e73908244011594 463ea64eb008b7abb63245ed69446b404bf042b1
  Refs:  the reg bounds is not handled for BPF_JNE case

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for tracking BPF_JNE instruction in the eBPF verifier.', 'keywords': 'BPF_JNE, verifier, tracking', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 463ea64eb008b7abb63245ed69446b404bf042b1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 463ea64eb008b7abb63245ed69446b404bf042b1
  Author Name: Menglong Dong
  Author Email: menglong8.dong@gmail.com
  Commit Date: 1703035136
  Commit Message:
    selftests/bpf: add testcase to verifier_bounds.c for BPF_JNE

Add testcase for the logic that the verifier tracks the BPF_JNE for regs.
The assembly function "reg_not_equal_const()" and "reg_equal_const" that
we add is exactly converted from the following case:

  u32 a = bpf_get_prandom_u32();
  u64 b = 0;

  a %= 8;
  /* the "a > 0" here will be optimized to "a != 0" */
  if (a > 0) {
    /* now the range of a should be [1
  Parent Hashes: 31d9cc96b1e3b28daf74938cb1233231474bbcf6
  Refs:  7] */
    bpf_skb_store_bytes(skb

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added new test case in selftests for BPF_JNE behavior in verifier_bounds.c.', 'keywords': 'testcase,BPF_JNE,verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 31d9cc96b1e3b28daf74938cb1233231474bbcf6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 31d9cc96b1e3b28daf74938cb1233231474bbcf6
  Author Name: Menglong Dong
  Author Email: menglong8.dong@gmail.com
  Commit Date: 1703035135
  Commit Message:
    selftests/bpf: activate the OP_NE logic in range_cond()

The edge range checking for the registers is supported by the verifier
now
  Parent Hashes: 1de584832375d0dc4234ee406185384a58fb96ac
  Refs:  so we can activate the extended logic in
tools/testing/selftests/bpf/prog_tests/reg_bounds.c/range_cond() to test
such logic.

Besides

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit activates the OP_NE logic in range_cond() for testing edge range checking in the BPF verifier.', 'keywords': 'OP_NE, range_cond, verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1de584832375d0dc4234ee406185384a58fb96ac
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1de584832375d0dc4234ee406185384a58fb96ac
  Author Name: Menglong Dong
  Author Email: menglong8.dong@gmail.com
  Commit Date: 1703035135
  Commit Message:
    selftests/bpf: remove reduplicated s32 casting in "crafted_cases"

The "S32_MIN" is already defined with s32 casting
  Parent Hashes: d028f87517d6775dccff4ddbca2740826f9e53f1
  Refs:  so there is no need
to do it again.

Signed-off-by: Menglong Dong <menglong8.dong@gmail.com>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231219134800.1550388-3-menglong8.dong@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Removed redundant s32 casting in selftests/bpf 'crafted_cases'.", 'keywords': 'reduplicated,s32,casting', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d028f87517d6775dccff4ddbca2740826f9e53f1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d028f87517d6775dccff4ddbca2740826f9e53f1
  Author Name: Menglong Dong
  Author Email: menglong8.dong@gmail.com
  Commit Date: 1703035135
  Commit Message:
    bpf: make the verifier tracks the "not equal" for regs

We can derive some new information for BPF_JNE in regs_refine_cond_op().
Take following code for example:

  /* The type of "a" is u32 */
  if (a > 0 && a < 100) {
    /* the range of the register for a is [0
  Parent Hashes: 1728df7fc11bf09322852ff05e73908244011594
  Refs:  99]

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Improve the eBPF verifier to track 'not equal' conditions for register refinements.", 'keywords': 'verifier, BPF_JNE, refine', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1728df7fc11bf09322852ff05e73908244011594
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1728df7fc11bf09322852ff05e73908244011594
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1703007328
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2023-12-19

Hi David
  Parent Hashes: 62ed78f3baff396bd928ee77077580c5aa940149 d17aff807f845cf93926c28705216639c7279110
  Refs:  hi Jakub

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge updates from the bpf-next branch into the main branch.', 'keywords': 'merge,bpf-next,update', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d17aff807f845cf93926c28705216639c7279110
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d17aff807f845cf93926c28705216639c7279110
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1703002983
  Commit Message:
    Revert BPF token-related functionality

This patch includes the following revert (one  conflicting BPF FS
patch and three token patch sets
  Parent Hashes: 2130c519a401e576647040043cb46d6fdc361dcc
  Refs:  represented by merge commits):
  - revert 0f5d5454c723 "Merge branch 'bpf-fs-mount-options-parsing-follow-ups'";
  - revert 750e785796bb "bpf: Support uid and gid when mounting bpffs";
  - revert 733763285acf "Merge branch 'bpf-token-support-in-libbpf-s-bpf-object'";
  - revert c35919dcce28 "Merge branch 'bpf-token-and-bpf-fs-based-delegation'".

Link: https://lore.kernel.org/bpf/CAHk-=wg7JuFYwGy=GOMbRCtOL+jwSQsdUaBsRWkDVYbxipbM5A@mail.gmail.com
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Revert BPF token-related functionality due to conflicting changes in BPF FS and token patch sets.', 'keywords': 'revert, BPF token, conflict', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 2130c519a401e576647040043cb46d6fdc361dcc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2130c519a401e576647040043cb46d6fdc361dcc
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1702995640
  Commit Message:
    bpf: Use nla_ok() instead of checking nla_len directly

nla_len may also be too short to be sane
  Parent Hashes: f7dd48ea76be30666f0614d6a06061185ed38c60
  Refs:  in which case after
recent changes nla_len() will return a wrapped value.

Fixes: 172db56d90d2 ("netlink: Return unsigned value for nla_len()")
Reported-by: syzbot+f43a23b6e622797c7a28@syzkaller.appspotmail.com
Signed-off-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Simon Horman <horms@kernel.org>
Link: https://lore.kernel.org/bpf/20231218231904.260440-1-kuba@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix issue with nlattr length checking by using nla_ok() to ensure valid checks in eBPF.', 'keywords': 'nla_ok,nla_len,eBPF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 624dda101e03c3a3a155d51e37a7bb7607cb760b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 624dda101e03c3a3a155d51e37a7bb7607cb760b
  Author Name: Veronika Molnarova
  Author Email: vmolnaro@redhat.com
  Commit Date: 1702993699
  Commit Message:
    perf archive: Add new option '--all' to pack perf.data with DSOs

'perf archive' has limited functionality and people from Red Hat Global
Support Services sent a request for a new feature that would pack
perf.data file together with an archive with debug symbols created by
the command 'perf archive' as customers were being confused and often
would forget to send perf.data file with the debug symbols.

With this patch 'perf archive' now accepts an option '--all' that
generates archive 'perf.all-hostname-date-time.tar.bz2' that holds file
'perf.data' and a sub-tar 'perf.symbols.tar.bz2' with debug symbols. The
functionality of the command 'perf archive' was not changed.

Committer testing:

Run 'perf record' on a Intel 14900K machine
  Parent Hashes: ab1c247094e323177a578b38f0325bf79f0317ac
  Refs:  hybrid:

  root@number:~# perf record -a sleep 5s
  [ perf record: Woken up 1 times to write data ]
  [ perf record: Captured and wrote 4.006 MB perf.data (15427 samples) ]
  root@number:~# perf archive --all
  Now please run:

  $ tar xvf perf.all-number-20231219-104854.tar.bz2 && tar xvf perf.symbols.tar.bz2 -C ~/.debug

  wherever you need to run 'perf report' on.
  root@number:~#

  root@number:~# perf report --header-only
  # ========
  # captured on    : Tue Dec 19 10:48:48 2023
  # header version : 1
  # data offset    : 1008
  # data size      : 4199936
  # feat offset    : 4200944
  # hostname : number
  # os release : 6.6.4-200.fc39.x86_64
  # perf version : 6.7.rc6.gca90f8e17b84
  # arch : x86_64
  # nrcpus online : 28
  # nrcpus avail : 28
  # cpudesc : Intel(R) Core(TM) i7-14700K
  # cpuid : GenuineIntel

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Add '--all' option to 'perf archive' for packing perf.data with debug symbols.", 'keywords': 'perf archive option', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: c49b292d031e385abf764ded32cd953c77e73f2d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c49b292d031e385abf764ded32cd953c77e73f2d
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1702946768
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Alexei Starovoitov says:

====================
pull-request: bpf-next 2023-12-18

This PR is larger than usual and contains changes in various parts
of the kernel.

The main changes are:

1) Fix kCFI bugs in BPF
  Parent Hashes: 0ee28c9ae042e77100fae2cd82a54750668aafce 8e432e6197cef6250dfd6fdffd41c06613c874ca
  Refs:  from Peter Zijlstra.

End result: all forms of indirect calls from BPF into kernel
and from kernel into BPF work with CFI enabled. This allows BPF
to work with CONFIG_FINEIBT=y.

2) Introduce BPF token object

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges changes including a fix for kCFI bugs and the introduction of the BPF token object.', 'keywords': 'kCFI, BPF, token', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8e432e6197cef6250dfd6fdffd41c06613c874ca
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8e432e6197cef6250dfd6fdffd41c06613c874ca
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702940061
  Commit Message:
    bpf: Ensure precise is reset to false in __mark_reg_const_zero()

It is safe to always start with imprecise SCALAR_VALUE register.
Previously __mark_reg_const_zero() relied on caller to reset precise
mark
  Parent Hashes: 6079ae6376181b49c9e4d65ef9fe954cca4974bd
  Refs:  but it's very error prone and we already missed it in a few
places. So instead make __mark_reg_const_zero() reset precision always

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit ensures precision is reset to false in __mark_reg_const_zero() to avoid error prone reliance on callers.', 'keywords': 'precision,register,reset', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6079ae6376181b49c9e4d65ef9fe954cca4974bd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6079ae6376181b49c9e4d65ef9fe954cca4974bd
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702921937
  Commit Message:
    Merge branch 'bpf-add-check-for-negative-uprobe-multi-offset'

Jiri Olsa says:

====================
bpf: Add check for negative uprobe multi offset

hi
  Parent Hashes: e58aac1a9a179fa9dab3025ef955cdb548c439f2 f17d1a18a3dd6cc4b38a5226b0acbbad3f2063ae
  Refs: 
adding the check for negative offset for uprobe multi link.

v2 changes:
- add more failure checks [Alan]
- move the offset retrieval/check up in the loop to be done earlier [Song]

thanks

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a check for negative offset in uprobe multi-links in eBPF.', 'keywords': 'check,offset,uprobe', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: f17d1a18a3dd6cc4b38a5226b0acbbad3f2063ae
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f17d1a18a3dd6cc4b38a5226b0acbbad3f2063ae
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1702921910
  Commit Message:
    selftests/bpf: Add more uprobe multi fail tests

We fail to create uprobe if we pass negative offset. Add more tests
validating kernel-side error checking code.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/bpf/20231217215538.3361991-3-jolsa@kernel.org

  Parent Hashes: 3983c00281d96af2ba611254d679107b5c390627
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add additional uprobe multi fail tests to ensure kernel-side error checking for negative offsets.', 'keywords': 'uprobe,multi fail,tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 3983c00281d96af2ba611254d679107b5c390627
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3983c00281d96af2ba611254d679107b5c390627
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1702921890
  Commit Message:
    bpf: Fail uprobe multi link with negative offset

Currently the __uprobe_register will return 0 (success) when called with
negative offset. The reason is that the call to register_for_each_vma and
then build_map_info won't return error for negative offset. They just won't
do anything - no matching vma is found so there's no registered breakpoint
for the uprobe.

I don't think we can change the behaviour of __uprobe_register and fail
for negative uprobe offset
  Parent Hashes: e58aac1a9a179fa9dab3025ef955cdb548c439f2
  Refs:  because apps might depend on that already.

But I think we can still make the change and check for it on bpf multi
link syscall level.

Also moving the __get_user call and check for the offsets to the top of
loop

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enforces error checks for negative offsets in uprobe multi link syscalls to prevent unnoticed success responses.', 'keywords': 'uprobe,negative offset,syscall', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: e58aac1a9a179fa9dab3025ef955cdb548c439f2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e58aac1a9a179fa9dab3025ef955cdb548c439f2
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702919749
  Commit Message:
    selftests/bpf: Test the release of map btf

When there is bpf_list_head or bpf_rb_root field in map value
  Parent Hashes: 0c970ed2f87c058fe3ddeb4d7d8f64f72cf41d7a
  Refs:  the free
of map btf and the free of map value may run concurrently and there may
be use-after-free problem

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test cases to check for use-after-free issues in map BTF with bpf_list_head and bpf_rb_root fields.', 'keywords': 'selftests use-after-free map', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0c970ed2f87c058fe3ddeb4d7d8f64f72cf41d7a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0c970ed2f87c058fe3ddeb4d7d8f64f72cf41d7a
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1702897237
  Commit Message:
    s390/bpf: Fix indirect trampoline generation

The func_addr used to be NULL for indirect trampolines used by struct_ops.
Now func_addr is a valid function pointer.
Hence use BPF_TRAMP_F_INDIRECT flag to detect such condition.

Fixes: 2cd3e3772e41 ("x86/cfi
  Parent Hashes: 42d45c45624a098a9fdc477c7a8b86167f948c77
  Refs: bpf: Fix bpf_struct_ops CFI")
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Ilya Leoshkevich <iii@linux.ibm.com>
Link: https://lore.kernel.org/bpf/20231216004549.78355-1-alexei.starovoitov@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes indirect trampoline generation for struct_ops in BPF on s390 architecture.', 'keywords': 'indirect, trampoline, struct_ops', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 117211aa739a926e6555cfea883be84bee6f1695
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 117211aa739a926e6555cfea883be84bee6f1695
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1702686852
  Commit Message:
    bpf: Add missing BPF_LINK_TYPE invocations

Pengfei Xu reported [1] Syzkaller/KASAN issue found in bpf_link_show_fdinfo.

The reason is missing BPF_LINK_TYPE invocation for uprobe multi
link and for several other links
  Parent Hashes: 2f2fee2bf74a7e31d06fc6cb7ba2bd4dd7753c99
  Refs:  adding that.

[1] https://lore.kernel.org/bpf/ZXptoKRSLspnk2ie@xpf.sh.intel.com/

Fixes: 89ae89f53d20 ("bpf: Add multi uprobe link")
Fixes: e420bed02507 ("bpf: Add fd-based tcx multi-prog infra with link support")
Fixes: 84601d6ee68a ("bpf: add bpf_link support for BPF_NETFILTER programs")
Fixes: 35dfaad7188c ("netkit

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add missing BPF_LINK_TYPE invocations in bpf_link_show_fdinfo to fix Syzkaller/KASAN issue.', 'keywords': 'BPF_LINK_TYPE, uprobe, Syzkaller', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs', 'tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 42d45c45624a098a9fdc477c7a8b86167f948c77
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 42d45c45624a098a9fdc477c7a8b86167f948c77
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1702686505
  Commit Message:
    selftests/bpf: Temporarily disable dummy_struct_ops test on s390

Temporarily disable dummy_struct_ops test on s390.
The breakage is likely due to
commit 2cd3e3772e41 ("x86/cfi
  Parent Hashes: 3c302e14bd9d7698ea24885a7eee2b44c1a014be
  Refs: bpf: Fix bpf_struct_ops CFI").

Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Temporarily disables dummy_struct_ops test on s390 architecture due to recent breakage.', 'keywords': 'selftests,bpf,s390', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3c302e14bd9d7698ea24885a7eee2b44c1a014be
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3c302e14bd9d7698ea24885a7eee2b44c1a014be
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1702686356
  Commit Message:
    Merge branch 'x86-cfi-bpf-fix-cfi-vs-ebpf'

Peter Zijlstra says:

====================
x86/cfi
  Parent Hashes: 1467affd16b236fc86e1b8ec5eaa147e104cd2a6 852486b35f344887786d63250946dd921a05d7e8
  Refs: bpf: Fix CFI vs eBPF

Hi!

What started with the simple observation that bpf_dispatcher_*_func() was
broken for calling CFI functions with a __nocfi calling context for FineIBT
ended up with a complete BPF wide CFI fixup.

With these changes on the BPF selftest suite passes without crashing -- there's
still a few failures

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes a compatibility issue between Control Flow Integrity (CFI) and eBPF in the x86 architecture.', 'keywords': 'CFI,eBPF,x86', 'commit_classification': "It's a bug fix.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 852486b35f344887786d63250946dd921a05d7e8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 852486b35f344887786d63250946dd921a05d7e8
  Author Name: Alexei Starovoitov
  Author Email: alexei.starovoitov@gmail.com
  Commit Date: 1702686355
  Commit Message:
    x86/cfi
  Parent Hashes: e4c00339891c074c76f626ac82981963cbba5332
  Refs: bpf: Fix bpf_exception_cb() signature

As per the earlier patches

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes the signature of the bpf_exception_cb function.', 'keywords': 'bpf_exception_cb,fix,signature', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e4c00339891c074c76f626ac82981963cbba5332
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e4c00339891c074c76f626ac82981963cbba5332
  Author Name: Peter Zijlstra
  Author Email: peterz@infradead.org
  Commit Date: 1702686355
  Commit Message:
    bpf: Fix dtor CFI

Ensure the various dtor functions match their prototype and retain
their CFI signatures
  Parent Hashes: e9d13b9d2f99ccf7afeab490d97eaa5ac9846598
  Refs:  since they don't have their address taken

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes function prototypes to retain CFI signatures for destructor functions.', 'keywords': 'Fix, CFI, dtor', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2cd3e3772e41377f32d6eea643e0590774e9187c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2cd3e3772e41377f32d6eea643e0590774e9187c
  Author Name: Peter Zijlstra
  Author Email: peterz@infradead.org
  Commit Date: 1702686355
  Commit Message:
    x86/cfi
  Parent Hashes: e72d88d18df4e03c80e64c2535f70c64f1dc6fc1
  Refs: bpf: Fix bpf_struct_ops CFI

BPF struct_ops uses __arch_prepare_bpf_trampoline() to write
trampolines for indirect function calls. These tramplines much have
matching CFI.

In order to obtain the correct CFI hash for the various methods

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes the bpf_struct_ops trampoline CFI to ensure correct indirect function call handling in x86 architecture.', 'keywords': 'bpf_struct_ops,Cfi,trampolines', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e72d88d18df4e03c80e64c2535f70c64f1dc6fc1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e72d88d18df4e03c80e64c2535f70c64f1dc6fc1
  Author Name: Peter Zijlstra
  Author Email: peterz@infradead.org
  Commit Date: 1702686355
  Commit Message:
    x86/cfi
  Parent Hashes: 4f9087f16651aca4a5f32da840a53f6660f0579a
  Refs: bpf: Fix bpf_callback_t CFI

Where the main BPF program is expected to match bpf_func_t

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a CFI issue in x86 architecture related to bpf_callback_t and bpf_func_t compatibility.', 'keywords': 'x86, CFI, compatibility', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 4f9087f16651aca4a5f32da840a53f6660f0579a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4f9087f16651aca4a5f32da840a53f6660f0579a
  Author Name: Peter Zijlstra
  Author Email: peterz@infradead.org
  Commit Date: 1702686355
  Commit Message:
    x86/cfi
  Parent Hashes: 4382159696c9af67ee047ed55f2dbf05480f52f6
  Refs: bpf: Fix BPF JIT call

The current BPF call convention is __nocfi

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes BPF JIT call on x86 architecture using current BPF call convention.', 'keywords': 'BPF,JIT,x86', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1467affd16b236fc86e1b8ec5eaa147e104cd2a6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1467affd16b236fc86e1b8ec5eaa147e104cd2a6
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702677295
  Commit Message:
    selftests/bpf: Add test for abnormal cnt during multi-kprobe attachment

If an abnormally huge cnt is used for multi-kprobes attachment
  Parent Hashes: 00cdcd2900bdb9190d1e75438b39cef74cd99232
  Refs:  the
following warning will be reported:

  ------------[ cut here ]------------
  WARNING: CPU: 1 PID: 392 at mm/util.c:632 kvmalloc_node+0xd9/0xe0
  Modules linked in: bpf_testmod(O)
  CPU: 1 PID: 392 Comm: test_progs Tainted: G ...... 6.7.0-rc3+ #32
  Hardware name: QEMU Standard PC (i440FX + PIIX

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a new test for handling abnormal count during multi-kprobe attachment in eBPF selftests.', 'keywords': 'selftests,bpf,multi-kprobe', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 00cdcd2900bdb9190d1e75438b39cef74cd99232
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 00cdcd2900bdb9190d1e75438b39cef74cd99232
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702677295
  Commit Message:
    selftests/bpf: Don't use libbpf_get_error() in kprobe_multi_test

Since libbpf v1.0
  Parent Hashes: 0d83786f5661154d015b498a3d23d4c37e30f6ef
  Refs:  libbpf doesn't return error code embedded into the
pointer iteself

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update selftests/bpf to avoid using libbpf_get_error() in kprobe_multi_test due to changes in libbpf v1.0.', 'keywords': 'selftests,bpf,libbpf', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0d83786f5661154d015b498a3d23d4c37e30f6ef
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0d83786f5661154d015b498a3d23d4c37e30f6ef
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702677295
  Commit Message:
    selftests/bpf: Add test for abnormal cnt during multi-uprobe attachment

If an abnormally huge cnt is used for multi-uprobes attachment
  Parent Hashes: d6d1e6c17cab2dcb7b8530c599f00e7de906d380
  Refs:  the
following warning will be reported:

  ------------[ cut here ]------------
  WARNING: CPU: 7 PID: 406 at mm/util.c:632 kvmalloc_node+0xd9/0xe0
  Modules linked in: bpf_testmod(O)
  CPU: 7 PID: 406 Comm: test_progs Tainted: G ...... 6.7.0-rc3+ #32
  Hardware name: QEMU Standard PC (i440FX + PIIX

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest for detecting abnormal cnt during multi-uprobe attachment in eBPF.', 'keywords': 'selftest, multi-uprobe, abnormal', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: d6d1e6c17cab2dcb7b8530c599f00e7de906d380
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d6d1e6c17cab2dcb7b8530c599f00e7de906d380
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702677295
  Commit Message:
    bpf: Limit the number of kprobes when attaching program to multiple kprobes

An abnormally big cnt may also be assigned to kprobe_multi.cnt when
attaching multiple kprobes. It will trigger the following warning in
kvmalloc_node():

	if (unlikely(size > INT_MAX)) {
	    WARN_ON_ONCE(!(flags & __GFP_NOWARN));
	    return NULL;
	}

Fix the warning by limiting the maximal number of kprobes in
bpf_kprobe_multi_link_attach(). If the number of kprobes is greater than
MAX_KPROBE_MULTI_CNT
  Parent Hashes: 8b2efe51ba85ca83460941672afac6fca4199df6
  Refs:  the attachment will fail and return -E2BIG.

Fixes: 0dcac2725406 ("bpf: Add multi kprobe link")
Signed-off-by: Hou Tao <houtao1@huawei.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20231215100708.2265609-3-houtao@huaweicloud.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix a warning by limiting the number of kprobes when attaching programs to multiple kprobes.', 'keywords': 'kprobes, warning, limit', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 8b2efe51ba85ca83460941672afac6fca4199df6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8b2efe51ba85ca83460941672afac6fca4199df6
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702677286
  Commit Message:
    bpf: Limit the number of uprobes when attaching program to multiple uprobes

An abnormally big cnt may be passed to link_create.uprobe_multi.cnt
  Parent Hashes: 7489723c2e26504573dbb49b66bbc59092840008
  Refs: 
and it will trigger the following warning in kvmalloc_node():

	if (unlikely(size > INT_MAX)) {
		WARN_ON_ONCE(!(flags & __GFP_NOWARN));
		return NULL;
	}

Fix the warning by limiting the maximal number of uprobes in
bpf_uprobe_multi_link_attach(). If the number of uprobes is greater than
MAX_UPROBE_MULTI_CNT

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix a kvmalloc_node warning by limiting maximally allowed uprobes in bpf_uprobe_multi_link_attach.', 'keywords': 'uprobes, warning, limit', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: ff6d413b0b59466e5acf2e42f294b1842ae130a1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ff6d413b0b59466e5acf2e42f294b1842ae130a1
  Author Name: Kees Cook
  Author Email: keescook@chromium.org
  Commit Date: 1702657510
  Commit Message:
    kernfs: Convert kernfs_path_from_node_locked() from strlcpy() to strscpy()

One of the last remaining users of strlcpy() in the kernel is
kernfs_path_from_node_locked()
  Parent Hashes: 5b56bf5cdb8b7c989055fe4d73fe3f409427d1d5
  Refs:  which passes back the problematic "length
we _would_ have copied" return value to indicate truncation.  Convert the
chain of all callers to use the negative return value (some of which
already doing this explicitly). All callers were already also checking
for negative return values

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Convert kernfs_path_from_node_locked() from strlcpy() to strscpy() to improve truncation return value handling.', 'keywords': 'strscpy, kernfs, truncation', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b84d66b0fd3709e36384a2cd893fbdddfc423f1f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b84d66b0fd3709e36384a2cd893fbdddfc423f1f
  Author Name: David S. Miller
  Author Email: davem@davemloft.net
  Commit Date: 1702638303
  Commit Message:
    Merge branch 'mv88e6xxx-counters'

Tobias Waldekranz says:

====================
net: dsa: mv88e6xxx: Add "eth-mac" and "rmon" counter group support

The majority of the changes (2/8) are about refactoring the existing
ethtool statistics support to make it possible to read individual
counters
  Parent Hashes: 9ed816b106bb40be6f1254696c6887e48f2a2b8f 00e7f29d9b895cbee58b7071900dd52ed6dcec1e
  Refs:  rather than the whole set.

4/8 tries to collect all information about a stat in a single place
using a mapper macro

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add "eth-mac" and "rmon" counter group support and refactor ethtool statistics for mv88e6xxx.', 'keywords': 'mv88e6xxx,counter,support', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 7489723c2e26504573dbb49b66bbc59092840008
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7489723c2e26504573dbb49b66bbc59092840008
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1702609936
  Commit Message:
    bpf: xdp: Register generic_kfunc_set with XDP programs

Registering generic_kfunc_set with XDP programs enables some of the
newer BPF features inside XDP -- namely tree based data structures and
BPF exceptions.

The current motivation for this commit is to enable assertions inside
XDP bpf progs. Assertions are a standard and useful tool to encode
intent.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/d07d4614b81ca6aada44fcb89bb6b618fb66e4ca.1702594357.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 0f5d5454c723d5c729d4676860a390c31c466f50
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Register generic_kfunc_set with XDP programs to enable assertions and newer BPF features.', 'keywords': 'generic_kfunc_set,XDP,assertions', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 52eda4641d041667fa059f4855c5f88dcebd8afe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 52eda4641d041667fa059f4855c5f88dcebd8afe
  Author Name: Vladimir Oltean
  Author Email: vladimir.oltean@nxp.com
  Commit Date: 1702605489
  Commit Message:
    net: mscc: ocelot: fix eMAC TX RMON stats for bucket 256-511 and above

There is a typo in the driver due to which we report incorrect TX RMON
counters for the 256-511 octet bucket and all the other buckets larger
than that.

Bug found with the selftest at
https://patchwork.kernel.org/project/netdevbpf/patch/20231211223346.2497157-9-tobias@waldekranz.com/

Fixes: e32036e1ae7b ("net: mscc: ocelot: add support for all sorts of standardized counters present in DSA")
Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
Link: https://lore.kernel.org/r/20231214000902.545625-1-vladimir.oltean@nxp.com
Signed-off-by: Jakub Kicinski <kuba@kernel.org>

  Parent Hashes: c7402612e2e61b76177f22e6e7f705adcbecc6fe
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a typo in the ocelot driver to correct TX RMON stats reporting for certain octet buckets.', 'keywords': 'fix typo stats', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 0f5d5454c723d5c729d4676860a390c31c466f50
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0f5d5454c723d5c729d4676860a390c31c466f50
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1702603827
  Commit Message:
    Merge branch 'bpf-fs-mount-options-parsing-follow-ups'

Andrii Nakryiko says:

====================
BPF FS mount options parsing follow ups

Original BPF token patch set ([0]) added delegate_xxx mount options which
supported only special "any" value and hexadecimal bitmask. This patch set
attempts to make specifying and inspecting these mount options more
human-friendly by supporting string constants matching corresponding bpf_cmd
  Parent Hashes: 403f3e8fda60f1a3e54741742d46aea98ecf671e f2d0ffee1f03395d9ae65f9c615b6a0ee05d0e12
  Refs: 
bpf_map_type

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improved BPF FS mount options parsing for better usability with human-friendly string constants.', 'keywords': 'BPF, mount, parsing', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f2d0ffee1f03395d9ae65f9c615b6a0ee05d0e12
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f2d0ffee1f03395d9ae65f9c615b6a0ee05d0e12
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702603827
  Commit Message:
    selftests/bpf: utilize string values for delegate_xxx mount options

Use both hex-based and string-based way to specify delegate mount
options for BPF FS.

Acked-by: John Fastabend <john.fastabend@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231214225016.1209867-3-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: c5707b2146d229691e193d5158ea70b21b8ba180
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Use string values for delegate mount options in BPF selftests.', 'keywords': 'selftests,mount options,string values', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: c5707b2146d229691e193d5158ea70b21b8ba180
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c5707b2146d229691e193d5158ea70b21b8ba180
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702603827
  Commit Message:
    bpf: support symbolic BPF FS delegation mount options

Besides already supported special "any" value and hex bit mask
  Parent Hashes: 403f3e8fda60f1a3e54741742d46aea98ecf671e
  Refs:  support
string-based parsing of delegation masks based on exact enumerator
names. Utilize BTF information of `enum bpf_cmd`

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Support added for symbolic BPF FS delegation mount options using BTF information.', 'keywords': 'symbolic, delegation, options', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 403f3e8fda60f1a3e54741742d46aea98ecf671e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 403f3e8fda60f1a3e54741742d46aea98ecf671e
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1702602776
  Commit Message:
    Merge branch 'add-bpf_xdp_get_xfrm_state-kfunc'

Daniel Xu says:

====================
Add bpf_xdp_get_xfrm_state() kfunc

This patchset adds two kfunc helpers
  Parent Hashes: 56925f389e152dcb8d093435d43b78a310539c23 2cd07b0eb08c0ed63b1bd0bf0114146b19a4ab1f
  Refs:  bpf_xdp_get_xfrm_state() and
bpf_xdp_xfrm_state_release() that wrap xfrm_state_lookup() and
xfrm_state_put(). The intent is to support software RSS (via XDP) for
the ongoing/upcoming ipsec pcpu work [0]. Recent experiments performed
on (hopefully) reproducible AWS testbeds indicate that single tunnel
pcpu ipsec can reach line rate on 100G ENA nics.

Note this patchset only tests/shows generic xfrm_state access. The
"secret sauce" (if you can really even call it that) involves accessing
a soon-to-be-upstreamed pcpu_num field in xfrm_state. Early example is
available here [1].

[0]: https://datatracker.ietf.org/doc/draft-ietf-ipsecme-multi-sa-performance/03/
[1]: https://github.com/danobi/xdp-tools/blob/e89a1c617aba3b50d990f779357d6ce2863ecb27/xdp-bench/xdp_redirect_cpumap.bpf.c#L385-L406

Changes from v5:
* Improve kfunc doc comments
* Remove extraneous replay-window setting on selftest reverse path
* Squash two kfunc commits into one
* Rebase to bpf-next to pick up bitfield write patches
* Remove testing of opts.error in selftest prog

Changes from v4:
* Fixup commit message for selftest
* Set opts->error -ENOENT for !x
* Revert single file xfrm + bpf

Changes from v3:
* Place all xfrm bpf integrations in xfrm_bpf.c
* Avoid using nval as a temporary
* Rebase to bpf-next
* Remove extraneous __failure_unpriv annotation for verifier tests

Changes from v2:
* Fix/simplify BPF_CORE_WRITE_BITFIELD() algorithm
* Added verifier tests for bitfield writes
* Fix state leakage across test_tunnel subtests

Changes from v1:
* Move xfrm tunnel tests to test_progs
* Fix writing to opts->error when opts is invalid
* Use __bpf_kfunc_start_defs()
* Remove unused vxlanhdr definition
* Add and use BPF_CORE_WRITE_BITFIELD() macro
* Make series bisect clean

Changes from RFCv2:
* Rebased to ipsec-next
* Fix netns leak

Changes from RFCv1:
* Add Antony's commit tags
* Add KF_ACQUIRE and KF_RELEASE semantics
====================

Reviewed-by: Eyal Birger <eyal.birger@gmail.com>
Link: https://lore.kernel.org/r/cover.1702593901.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add bpf_xdp_get_xfrm_state and bpf_xdp_xfrm_state_release kfuncs for improved XDP support in ipsec.', 'keywords': 'kfunc, XDP, ipsec', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 2cd07b0eb08c0ed63b1bd0bf0114146b19a4ab1f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2cd07b0eb08c0ed63b1bd0bf0114146b19a4ab1f
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1702602769
  Commit Message:
    bpf: xfrm: Add selftest for bpf_xdp_get_xfrm_state()

This commit extends test_tunnel selftest to test the new XDP xfrm state
lookup kfunc.

Co-developed-by: Antony Antony <antony.antony@secunet.com>
Signed-off-by: Antony Antony <antony.antony@secunet.com>
Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/e704e9a4332e3eac7b458e4bfdec8fcc6984cdb6.1702593901.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: e7adc8291a9e9c232d600d82465cbbb682164ca3
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a selftest for bpf_xdp_get_xfrm_state function in the test_tunnel selftest.', 'keywords': 'selftest,xdp,xfrm state', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: e7adc8291a9e9c232d600d82465cbbb682164ca3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e7adc8291a9e9c232d600d82465cbbb682164ca3
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1702602769
  Commit Message:
    bpf: selftests: Move xfrm tunnel test to test_progs

test_progs is better than a shell script b/c C is a bit easier to
maintain than shell. Also it's easier to use new infra like memory
mapped global variables from C via bpf skeleton.

Co-developed-by: Antony Antony <antony.antony@secunet.com>
Signed-off-by: Antony Antony <antony.antony@secunet.com>
Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/a350db9e08520c64544562d88ec005a039124d9b.1702593901.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 02b4e126e6a5f5552da2ccec47a028984d2d9654
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit moves the xfrm tunnel test from a shell script to the test_progs framework for easier maintenance and new infrastructure compatibility.', 'keywords': 'xfrm tunnel, test_progs, bpf skeleton', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 02b4e126e6a5f5552da2ccec47a028984d2d9654
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 02b4e126e6a5f5552da2ccec47a028984d2d9654
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1702602769
  Commit Message:
    bpf: selftests: test_tunnel: Use vmlinux.h declarations

vmlinux.h declarations are more ergnomic
  Parent Hashes: 77a7a8220f0d87c44425c0a12e0a72b14962535b
  Refs:  especially when working with
kfuncs. The uapi headers are often incomplete for kfunc definitions.

This commit also switches bitfield accesses to use CO-RE helpers.
Switching to vmlinux.h definitions makes the verifier very
unhappy with raw bitfield accesses. The error is:

    ; md.u.md2.dir = direction;
    33: (69) r1 = *(u16 *)(r2 +11)
    misaligned stack access off (0x0; 0x0)+-64+11 size 2

Fix by using CO-RE-aware bitfield reads and writes.

Co-developed-by: Antony Antony <antony.antony@secunet.com>
Signed-off-by: Antony Antony <antony.antony@secunet.com>
Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/884bde1d9a351d126a3923886b945ea6b1b0776b.1702593901.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor selftests to use vmlinux.h declarations for improved ergonomics and compatibility with kfuncs.', 'keywords': 'vmlinux.h, kfuncs, CO-RE', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs', 'other']}
--------------------
--------------------
Processing Commit ID: 77a7a8220f0d87c44425c0a12e0a72b14962535b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 77a7a8220f0d87c44425c0a12e0a72b14962535b
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1702602769
  Commit Message:
    bpf: selftests: test_tunnel: Setup fresh topology for each subtest

This helps with determinism b/c individual setup/teardown prevents
leaking state between different subtests.

Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/0fb59fa16fb58cca7def5239df606005a3e8dd0e.1702593901.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 8f0ec8c681755f523cf842bfe350ea40609b83a9
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit sets up a fresh topology for each subtest in test_tunnel to ensure test determinism.', 'keywords': 'selftests, topology, determinism', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8f0ec8c681755f523cf842bfe350ea40609b83a9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8f0ec8c681755f523cf842bfe350ea40609b83a9
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1702602769
  Commit Message:
    bpf: xfrm: Add bpf_xdp_get_xfrm_state() kfunc

This commit adds an unstable kfunc helper to access internal xfrm_state
associated with an SA. This is intended to be used for the upcoming
IPsec pcpu work to assign special pcpu SAs to a particular CPU. In other
words: for custom software RSS.

That being said
  Parent Hashes: 56925f389e152dcb8d093435d43b78a310539c23
  Refs:  the function that this kfunc wraps is fairly generic
and used for a lot of xfrm tasks. I'm sure people will find uses
elsewhere over time.

This commit also adds a corresponding bpf_xdp_xfrm_state_release() kfunc
to release the refcnt acquired by bpf_xdp_get_xfrm_state(). The verifier
will require that all acquired xfrm_state's are released.

Co-developed-by: Antony Antony <antony.antony@secunet.com>
Signed-off-by: Antony Antony <antony.antony@secunet.com>
Acked-by: Steffen Klassert <steffen.klassert@secunet.com>
Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/a29699c42f5fad456b875c98dd11c6afc3ffb707.1702593901.git.dxu@dxuuu.xyz
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added bpf_xdp_get_xfrm_state() and bpf_xdp_xfrm_state_release() kfuncs for internal xfrm_state management associated with SA.', 'keywords': 'bpf_xdp_get_xfrm_state, kfunc, xfrm_state', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 56925f389e152dcb8d093435d43b78a310539c23
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 56925f389e152dcb8d093435d43b78a310539c23
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1702602632
  Commit Message:
    selftests/bpf: Remove flaky test_btf_id test

With previous patch
  Parent Hashes: 59e5791f59dd83e8aa72a4e74217eabb6e8cfd90
  Refs:  one of subtests in test_btf_id becomes
flaky and may fail. The following is a failing example:

  Error: #26 btf
  Error: #26/174 btf/BTF ID
    Error: #26/174 btf/BTF ID
    btf_raw_create:PASS:check 0 nsec
    btf_raw_create:PASS:check 0 nsec
    test_btf_id:PASS:check 0 nsec
    ...
    test_btf_id:PASS:check 0 nsec
    test_btf_id:FAIL:check BTF lingersdo_test_get_info:FAIL:check failed: -1

The test tries to prove a btf_id not available after the map is closed.
But btf_id is freed only after workqueue and a rcu grace period

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit removes a flaky test from the BPF selftests related to BTF ID.', 'keywords': 'flaky,test,BTF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 59e5791f59dd83e8aa72a4e74217eabb6e8cfd90
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 59e5791f59dd83e8aa72a4e74217eabb6e8cfd90
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1702602632
  Commit Message:
    bpf: Fix a race condition between btf_put() and map_free()

When running `./test_progs -j` in my local vm with latest kernel
  Parent Hashes: 04d25ccea2b3199269b7e500da33023b51418fde
  Refs: 
I once hit a kasan error like below:

  [ 1887.184724] BUG: KASAN: slab-use-after-free in bpf_rb_root_free+0x1f8/0x2b0
  [ 1887.185599] Read of size 4 at addr ffff888106806910 by task kworker/u12:2/2830
  [ 1887.186498]
  [ 1887.186712] CPU: 3 PID: 2830 Comm: kworker/u12:2 Tainted: G           OEL     6.7.0-rc3-00699-g90679706d486-dirty #494
  [ 1887.188034] Hardware name: QEMU Standard PC (i440FX + PIIX

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a race condition in bpf related to use-after-free errors in btf_put() and map_free().', 'keywords': 'race condition, btf_put, map_free', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 04d25ccea2b3199269b7e500da33023b51418fde
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 04d25ccea2b3199269b7e500da33023b51418fde
  Author Name: Randy Dunlap
  Author Email: rdunlap@infradead.org
  Commit Date: 1702568339
  Commit Message:
    net
  Parent Hashes: 2e1d6a04116c373fbd25beddba4267178535bc60
  Refs:  xdp: Correct grammar

Use the correct verb form in 2 places in the XDP rx-queue comment.

Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Jesper Dangaard Brouer <hawk@kernel.org>
Link: https://lore.kernel.org/bpf/20231213043735.30208-1-rdunlap@infradead.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Corrects verb form in XDP rx-queue comment for improved grammar.', 'keywords': 'grammar, XDP, comment', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 2e1d6a04116c373fbd25beddba4267178535bc60
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2e1d6a04116c373fbd25beddba4267178535bc60
  Author Name: Tushar Vyavahare
  Author Email: tushar.vyavahare@intel.com
  Commit Date: 1702566673
  Commit Message:
    selftests/xsk: Fix for SEND_RECEIVE_UNALIGNED test

Fix test broken by shared umem test and framework enhancement commit.

Correct the current implementation of pkt_stream_replace_half() by
ensuring that nb_valid_entries are not set to half
  Parent Hashes: c838fe1282df540ebf6e24e386ac34acb3ef3115
  Refs:  as this is not true
for all the tests. Ensure that the expected value for valid_entries for
the SEND_RECEIVE_UNALIGNED test equals the total number of packets sent

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes SEND_RECEIVE_UNALIGNED test in selftests/xsk by correcting pkt_stream_replace_half() implementation.', 'keywords': 'selftests,xsk,unaligned', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: c838fe1282df540ebf6e24e386ac34acb3ef3115
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c838fe1282df540ebf6e24e386ac34acb3ef3115
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1702530160
  Commit Message:
    Merge branch 'bpf-use-gfp_kernel-in-bpf_event_entry_gen'

Hou Tao says:

====================
The simple patch set aims to replace GFP_ATOMIC by GFP_KERNEL in
bpf_event_entry_gen(). These two patches in the patch set were
preparatory patches in "Fix the release of inner map" patchset [1] and
are not needed for v2
  Parent Hashes: 2a0c6b41eec90c2a138ea8b574836744783c67ff dc68540913ac523b46ebda3843cec179362c7a72
  Refs:  so re-post it to bpf-next tree.

Patch #1 reduces the scope of rcu_read_lock when updating fd map and
patch #2 replaces GFP_ATOMIC by GFP_KERNEL. Please see individual
patches for more details.

Change Log:
v3:
 * patch #1: fallback to patch #1 in v1. Update comments in
             bpf_fd_htab_map_update_elem() to explain the reason for
	     rcu_read_lock() (Alexei)

v2: https://lore.kernel.org/bpf/20231211073843.1888058-1-houtao@huaweicloud.com/
 * patch #1: add rcu_read_lock/unlock() for bpf_fd_array_map_update_elem
             as well to make it consistent with
	     bpf_fd_htab_map_update_elem and update commit message
             accordingly (Alexei)
 * patch #1/#2: collects ack tags from Yonghong

v1: https://lore.kernel.org/bpf/20231208103357.2637299-1-houtao@huaweicloud.com/

[1]: https://lore.kernel.org/bpf/20231107140702.1891778-1-houtao@huaweicloud.com/
====================

Link: https://lore.kernel.org/r/20231214043010.3458072-1-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replace GFP_ATOMIC with GFP_KERNEL in bpf_event_entry_gen function to optimize memory allocation.', 'keywords': 'GFP_KERNEL, bpf_event_entry_gen, memory', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: dc68540913ac523b46ebda3843cec179362c7a72
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dc68540913ac523b46ebda3843cec179362c7a72
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702529351
  Commit Message:
    bpf: Use GFP_KERNEL in bpf_event_entry_gen()

rcu_read_lock() is no longer held when invoking bpf_event_entry_gen()
which is called by perf_event_fd_array_get_ptr()
  Parent Hashes: 8f82583f9527b3be9d70d9a5d1f33435e29d0480
  Refs:  so using GFP_KERNEL
instead of GFP_ATOMIC to reduce the possibility of failures due to
out-of-memory.

Acked-by: Yonghong Song <yonghong.song@linux.dev>
Signed-off-by: Hou Tao <houtao1@huawei.com>
Link: https://lore.kernel.org/r/20231214043010.3458072-3-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Commit changes memory allocation from GFP_ATOMIC to GFP_KERNEL in bpf_event_entry_gen to reduce out-of-memory failures.', 'keywords': 'GFP_KERNEL,bpf_event_entry_gen,reduce failures', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8f82583f9527b3be9d70d9a5d1f33435e29d0480
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8f82583f9527b3be9d70d9a5d1f33435e29d0480
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702529351
  Commit Message:
    bpf: Reduce the scope of rcu_read_lock when updating fd map

There is no rcu-read-lock requirement for ops->map_fd_get_ptr() or
ops->map_fd_put_ptr()
  Parent Hashes: 2a0c6b41eec90c2a138ea8b574836744783c67ff
  Refs:  so doesn't use rcu-read-lock for these two
callbacks.

For bpf_fd_array_map_update_elem()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit reduces the rcu_read_lock scope when updating file descriptor maps in BPF.', 'keywords': 'rcu_read_lock, fd map, update', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2a0c6b41eec90c2a138ea8b574836744783c67ff
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2a0c6b41eec90c2a138ea8b574836744783c67ff
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702515702
  Commit Message:
    bpf: Update the comments in maybe_wait_bpf_programs()

Since commit 638e4b825d52 ("bpf: Allows per-cpu maps and map-in-map in
sleepable programs")
  Parent Hashes: b13cddf633562b9b2c34fd63471d377019704ebe
  Refs:  sleepable BPF program can also use map-in-map

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit updates comments in the maybe_wait_bpf_programs function to reflect new capabilities for sleepable BPF programs.', 'keywords': 'comments, maybe_wait_bpf_programs, sleepable BPF', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b13cddf633562b9b2c34fd63471d377019704ebe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b13cddf633562b9b2c34fd63471d377019704ebe
  Author Name: Matt Bobrowski
  Author Email: mattbobrowski@google.com
  Commit Date: 1702515379
  Commit Message:
    bpf: add small subset of SECURITY_PATH hooks to BPF sleepable_lsm_hooks list

security_path_* based LSM hooks appear to be generally missing from
the sleepable_lsm_hooks list. Initially add a small subset of them to
the preexisting sleepable_lsm_hooks list so that sleepable BPF helpers
like bpf_d_path() can be used from sleepable BPF LSM based programs.

The security_path_* hooks added in this patch are similar to the
security_inode_* counterparts that already exist in the
sleepable_lsm_hooks list
  Parent Hashes: ec14325c7339bf1d40fc29bb8a0d2121cfe649aa
  Refs:  and are called in roughly similar points and
contexts. Presumably

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added security_path hooks to sleepable_lsm_hooks list for BPF sleepable LSM programs.', 'keywords': 'security_path, LSM hooks, sleepable', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: 2f2fee2bf74a7e31d06fc6cb7ba2bd4dd7753c99
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2f2fee2bf74a7e31d06fc6cb7ba2bd4dd7753c99
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1702513997
  Commit Message:
    Merge branch ' bpf fix for unconnect af_unix socket'

John Fastabend says:

====================
Eric reported a syzbot splat from a null ptr deref from recent fix to
resolve a use-after-free with af-unix stream sockets and BPF sockmap
usage.

The issue is I missed is we allow unconnected af_unix STREAM sockets to
be added to the sockmap. Fix this by blocking unconnected sockets.

v2: change sk_is_unix to sk_is_stream_unix (Eric) and remove duplicate
    ASSERTS in selftests the xsocket helper already marks FAIL (Jakub)
====================

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: e307b5a845c5951dabafc48d00b6424ee64716c4 50d96f05af6787a34b4eca2ee3fc1993289c4c24
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix null pointer dereference by blocking unconnected af_unix STREAM sockets from being added to sockmap.', 'keywords': 'af_unix, sockmap, unconnected', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 50d96f05af6787a34b4eca2ee3fc1993289c4c24
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 50d96f05af6787a34b4eca2ee3fc1993289c4c24
  Author Name: John Fastabend
  Author Email: john.fastabend@gmail.com
  Commit Date: 1702513981
  Commit Message:
    bpf: sockmap
  Parent Hashes: 8d6650646ce49e9a5b8c5c23eb94f74b1749f70f
  Refs:  test for unconnected af_unix sock

Add test to sockmap_basic to ensure af_unix sockets that are not connected
can not be added to the map. Ensure we keep DGRAM sockets working however
as these will not be connected typically.

Signed-off-by: John Fastabend <john.fastabend@gmail.com>
Acked-by: Jakub Sitnicki <jakub@cloudflare.com>
Link: https://lore.kernel.org/r/20231201180139.328529-3-john.fastabend@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Add test to ensure unconnected af_unix sockets can't be added to sockmap while keeping DGRAM sockets functional.", 'keywords': 'test, sockmap, af_unix', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 8d6650646ce49e9a5b8c5c23eb94f74b1749f70f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8d6650646ce49e9a5b8c5c23eb94f74b1749f70f
  Author Name: John Fastabend
  Author Email: john.fastabend@gmail.com
  Commit Date: 1702513948
  Commit Message:
    bpf: syzkaller found null ptr deref in unix_bpf proto add

I added logic to track the sock pair for stream_unix sockets so that we
ensure lifetime of the sock matches the time a sockmap could reference
the sock (see fixes tag). I forgot though that we allow af_unix unconnected
sockets into a sock{map|hash} map.

This is problematic because previous fixed expected sk_pair() to exist
and did not NULL check it. Because unconnected sockets have a NULL
sk_pair this resulted in the NULL ptr dereference found by syzkaller.

BUG: KASAN: null-ptr-deref in unix_stream_bpf_update_proto+0x72/0x430 net/unix/unix_bpf.c:171
Write of size 4 at addr 0000000000000080 by task syz-executor360/5073
Call Trace:
 <TASK>
 ...
 sock_hold include/net/sock.h:777 [inline]
 unix_stream_bpf_update_proto+0x72/0x430 net/unix/unix_bpf.c:171
 sock_map_init_proto net/core/sock_map.c:190 [inline]
 sock_map_link+0xb87/0x1100 net/core/sock_map.c:294
 sock_map_update_common+0xf6/0x870 net/core/sock_map.c:483
 sock_map_update_elem_sys+0x5b6/0x640 net/core/sock_map.c:577
 bpf_map_update_value+0x3af/0x820 kernel/bpf/syscall.c:167

We considered just checking for the null ptr and skipping taking a ref
on the NULL peer sock. But
  Parent Hashes: e307b5a845c5951dabafc48d00b6424ee64716c4
  Refs:  if the socket is then connected() after
being added to the sockmap we can cause the original issue again. So
instead this patch blocks adding af_unix sockets that are not in the
ESTABLISHED state.

Reported-by: Eric Dumazet <edumazet@google.com>
Reported-by: syzbot+e8030702aefd3444fb9e@syzkaller.appspotmail.com
Fixes: 8866730aed51 ("bpf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix null pointer dereference issue in unix_bpf protocol by preventing unconnected af_unix sockets from being added to sockmap.', 'keywords': 'null pointer, sockmap, af_unix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: ec14325c7339bf1d40fc29bb8a0d2121cfe649aa
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ec14325c7339bf1d40fc29bb8a0d2121cfe649aa
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1702513002
  Commit Message:
    Merge branch 'xdp-metadata-via-kfuncs-for-ice-vlan-hint'

Larysa Zaremba says:

====================
XDP metadata via kfuncs for ice + VLAN hint

This series introduces XDP hints via kfuncs [0] to the ice driver.

Series brings the following existing hints to the ice driver:
 - HW timestamp
 - RX hash with type

Series also introduces VLAN tag with protocol XDP hint
  Parent Hashes: 733763285acfe8dffd6e39ad2ed3d1222b32a901 4c6612f6100c2d85212865dbd1a5d8a7e391d3cb
  Refs:  it now be accessed by
XDP and userspace (AF_XDP) programs. They can also be checked with xdp_metadata
test and xdp_hw_metadata program.

Impact of these patches on ice performance:
ZC:
* Full hints implementation decreases pps in ZC mode by less than 3%
  (64B

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces XDP metadata via kfuncs for ice driver including VLAN hint and timestamp.', 'keywords': 'XDP, metadata, kfuncs', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 4c6612f6100c2d85212865dbd1a5d8a7e391d3cb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4c6612f6100c2d85212865dbd1a5d8a7e391d3cb
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1702513001
  Commit Message:
    selftests/bpf: Check VLAN tag and proto in xdp_metadata

Verify
  Parent Hashes: a3850af4ea25dadc8b35edf132340907d523657e
  Refs:  whether VLAN tag and proto are set correctly.

To simulate "stripped" VLAN tag on veth

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests to verify VLAN tag and protocol settings in xdp_metadata for veth interfaces.', 'keywords': 'VLAN, xdp_metadata, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: a3850af4ea25dadc8b35edf132340907d523657e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a3850af4ea25dadc8b35edf132340907d523657e
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1702513001
  Commit Message:
    selftests/bpf: Add AF_INET packet generation to xdp_metadata

The easiest way to simulate stripped VLAN tag in veth is to send a packet
from VLAN interface
  Parent Hashes: 8e68a4beba943bdffb342c601c649223f44b7329
  Refs:  attached to veth. Unfortunately

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add AF_INET packet generation to xdp_metadata selftests in eBPF to simulate stripped VLAN tag using VLAN interface.', 'keywords': 'AF_INET, packet generation, xdp_metadata', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 8e68a4beba943bdffb342c601c649223f44b7329
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8e68a4beba943bdffb342c601c649223f44b7329
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1702513001
  Commit Message:
    selftests/bpf: Add flags and VLAN hint to xdp_hw_metadata

Add VLAN hint to the xdp_hw_metadata program.

Also
  Parent Hashes: e71a9fa7fdb2effcaaed37c207ec4f634c8f4901
  Refs:  to make metadata layout more straightforward

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Add VLAN hint and flags to improve xdp_hw_metadata program's metadata layout in selftests.", 'keywords': 'VLAN,xdp_hw_metadata,metadata', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: e71a9fa7fdb2effcaaed37c207ec4f634c8f4901
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e71a9fa7fdb2effcaaed37c207ec4f634c8f4901
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1702513001
  Commit Message:
    selftests/bpf: Allow VLAN packets in xdp_hw_metadata

Make VLAN c-tag and s-tag XDP hint testing more convenient
by not skipping VLAN-ed packets.

Allow both 802.1ad and 802.1Q headers.

Acked-by: Stanislav Fomichev <sdf@google.com>
Signed-off-by: Larysa Zaremba <larysa.zaremba@intel.com>
Link: https://lore.kernel.org/r/20231205210847.28460-16-larysa.zaremba@intel.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 7978bad4b6b9265a1e808a5f679ee428d1dd6523
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates selftests to include VLAN packets in xdp_hw_metadata for improved testing of XDP hints.', 'keywords': 'VLAN,XDP,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 537fec0733c4a72e2a2b69fee365459c5b75d92e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 537fec0733c4a72e2a2b69fee365459c5b75d92e
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1702513001
  Commit Message:
    net: make vlan_get_tag() return -ENODATA instead of -EINVAL

__vlan_hwaccel_get_tag() is used in veth XDP hints implementation
  Parent Hashes: fca783799f64ac0a4f20228ff6a6d7598db11e64
  Refs: 
its return value (-EINVAL if skb is not VLAN tagged) is passed to bpf code

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Change vlan_get_tag() return value to -ENODATA in the veth XDP hints implementation.', 'keywords': 'vlan_get_tag,ENODATA,XDP', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The syscall interface', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: e6795330f88b4f643c649a02662d47b779340535
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e6795330f88b4f643c649a02662d47b779340535
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1702513000
  Commit Message:
    xdp: Add VLAN tag hint

Implement functionality that enables drivers to expose VLAN tag
to XDP code.

VLAN tag is represented by 2 variables:
- protocol ID
  Parent Hashes: d68d707dcbbf6a9cfe378fc2eb3ffffd5b47727e
  Refs:  which is passed to bpf code in BE
- VLAN TCI

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce functionality for XDP to process VLAN tag hints in drivers.', 'keywords': 'XDP,VLAN,drivers', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 733763285acfe8dffd6e39ad2ed3d1222b32a901
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 733763285acfe8dffd6e39ad2ed3d1222b32a901
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1702511226
  Commit Message:
    Merge branch 'bpf-token-support-in-libbpf-s-bpf-object'

Andrii Nakryiko says:

====================
BPF token support in libbpf's BPF object

Add fuller support for BPF token in high-level BPF object APIs. This is the
most frequently used way to work with BPF using libbpf
  Parent Hashes: f04f2ce6018f3cb33ac96270b9153c2920ead190 322122bf8c75b1df78d6608516807a0354f6ab3c
  Refs:  so supporting BPF
token there is critical.

Patch #1 is improving kernel-side BPF_TOKEN_CREATE behavior by rejecting to
create "empty" BPF token with no delegation. This seems like saner behavior
which also makes libbpf's caching better overall. If we ever want to create
BPF token with no delegate_xxx options set on BPF FS

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add BPF token support to high-level BPF object APIs in libbpf.', 'keywords': 'BPF token,libbpf,support', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 322122bf8c75b1df78d6608516807a0354f6ab3c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 322122bf8c75b1df78d6608516807a0354f6ab3c
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702511225
  Commit Message:
    selftests/bpf: add tests for LIBBPF_BPF_TOKEN_PATH envvar

Add new subtest validating LIBBPF_BPF_TOKEN_PATH envvar semantics.
Extend existing test to validate that LIBBPF_BPF_TOKEN_PATH allows to
disable implicit BPF token creation by setting envvar to empty string.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231213190842.3844987-11-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: ed54124b88056fd629c6af71664dfcd4d3b3e0b8
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add new subtest to validate behavior of LIBBPF_BPF_TOKEN_PATH environment variable in selftests.', 'keywords': 'selftests,LIBBPF_BPF_TOKEN_PATH,subtest', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ed54124b88056fd629c6af71664dfcd4d3b3e0b8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ed54124b88056fd629c6af71664dfcd4d3b3e0b8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702511225
  Commit Message:
    libbpf: support BPF token path setting through LIBBPF_BPF_TOKEN_PATH envvar

To allow external admin authority to override default BPF FS location
(/sys/fs/bpf) for implicit BPF token creation
  Parent Hashes: 18678cf0ee13cf19bac4ecd55665e6d1d63108b3
  Refs:  teach libbpf to recognize
LIBBPF_BPF_TOKEN_PATH envvar. If it is specified and user application
didn't explicitly specify neither bpf_token_path nor bpf_token_fd
option

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds support for setting BPF token path via LIBBPF_BPF_TOKEN_PATH environment variable in libbpf.', 'keywords': 'libbpf,BPF token,environment variable', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 18678cf0ee13cf19bac4ecd55665e6d1d63108b3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 18678cf0ee13cf19bac4ecd55665e6d1d63108b3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702511225
  Commit Message:
    selftests/bpf: add tests for BPF object load with implicit token

Add a test to validate libbpf's implicit BPF token creation from default
BPF FS location (/sys/fs/bpf). Also validate that disabling this
implicit BPF token creation works.

Acked-by: John Fastabend <john.fastabend@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231213190842.3844987-9-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 98e0eaa36adfb580a3aa43fca62847ec0f625d3f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for BPF object load with implicit token creation in libbpf.', 'keywords': 'selftests, BPF, libbpf', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 98e0eaa36adfb580a3aa43fca62847ec0f625d3f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 98e0eaa36adfb580a3aa43fca62847ec0f625d3f
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702511225
  Commit Message:
    selftests/bpf: add BPF object loading tests with explicit token passing

Add a few tests that attempt to load BPF object containing privileged
map
  Parent Hashes: 1d0dd6ea2e38c18e1b31a8c3c59b6bdfe4f4efde
  Refs:  program

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for BPF object loading with explicit token passing focusing on privileged maps.', 'keywords': 'selftests,BPF,token', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1d0dd6ea2e38c18e1b31a8c3c59b6bdfe4f4efde
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1d0dd6ea2e38c18e1b31a8c3c59b6bdfe4f4efde
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702511225
  Commit Message:
    libbpf: wire up BPF token support at BPF object level

Add BPF token support to BPF object-level functionality.

BPF token is supported by BPF object logic either as an explicitly
provided BPF token from outside (through BPF FS path or explicit BPF
token FD)
  Parent Hashes: a75bb6a16518d4a224f24116633f3f9d5787f6d1
  Refs:  or implicitly (unless prevented through
bpf_object_open_opts).

Implicit mode is assumed to be the most common one for user namespaced
unprivileged workloads. The assumption is that privileged container
manager sets up default BPF FS mount point at /sys/fs/bpf with BPF token
delegation options (delegate_{cmds

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds BPF token support to BPF object-level functionality in libbpf.', 'keywords': 'BPF token, BPF object, libbpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a75bb6a16518d4a224f24116633f3f9d5787f6d1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a75bb6a16518d4a224f24116633f3f9d5787f6d1
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702511225
  Commit Message:
    libbpf: wire up token_fd into feature probing logic

Adjust feature probing callbacks to take into account optional token_fd.
In unprivileged contexts
  Parent Hashes: ab8fc393b27cd2d6dd1ced1ba2358ddcd123fc15
  Refs:  some feature detectors would fail to detect
kernel support just because BPF program

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adjusts feature probing logic to incorporate the optional token_fd in libbpf.', 'keywords': 'libbpf, token_fd, feature', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ab8fc393b27cd2d6dd1ced1ba2358ddcd123fc15
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ab8fc393b27cd2d6dd1ced1ba2358ddcd123fc15
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702511225
  Commit Message:
    libbpf: move feature detection code into its own file

It's quite a lot of well isolated code
  Parent Hashes: 29c302a2e265a356434b005155990a9e766db75d
  Refs:  so it seems like a good
candidate to move it out of libbpf.c to reduce its size.

Acked-by: John Fastabend <john.fastabend@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231213190842.3844987-5-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactored libbpf by moving feature detection code to a separate file to reduce libbpf.c size.', 'keywords': 'libbpf, refactoring, feature detection', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 29c302a2e265a356434b005155990a9e766db75d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 29c302a2e265a356434b005155990a9e766db75d
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702511225
  Commit Message:
    libbpf: further decouple feature checking logic from bpf_object

Add feat_supported() helper that accepts feature cache instead of
bpf_object. This allows low-level code in bpf.c to not know or care
about higher-level concept of bpf_object
  Parent Hashes: c6c5be3eee975ae640966844db66d404c1de79b1
  Refs:  yet it will be able to utilize
custom feature checking in cases where BPF token might influence the
outcome.

Acked-by: John Fastabend <john.fastabend@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231213190842.3844987-4-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Decouples feature checking logic from bpf_object using a feat_supported helper.', 'keywords': 'Libbpf, feature checking, decouple', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c6c5be3eee975ae640966844db66d404c1de79b1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c6c5be3eee975ae640966844db66d404c1de79b1
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702511224
  Commit Message:
    libbpf: split feature detectors definitions from cached results

Split a list of supported feature detectors with their corresponding
callbacks from actual cached supported/missing values. This will allow
to have more flexible per-token or per-object feature detectors in
subsequent refactorings.

Acked-by: John Fastabend <john.fastabend@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231213190842.3844987-3-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: f5fdb51fb980077a4c6c78f3f775821f611fb38b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit separates feature detectors definitions from cached results for more flexibility in libbpf.', 'keywords': 'libbpf,feature detectors,refactoring', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f5fdb51fb980077a4c6c78f3f775821f611fb38b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f5fdb51fb980077a4c6c78f3f775821f611fb38b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702511224
  Commit Message:
    bpf: fail BPF_TOKEN_CREATE if no delegation option was set on BPF FS

It's quite confusing in practice when it's possible to successfully
create a BPF token from BPF FS that didn't have any of delegate_xxx
mount options set up. While it's not wrong
  Parent Hashes: f04f2ce6018f3cb33ac96270b9153c2920ead190
  Refs:  it's actually more
meaningful to reject BPF_TOKEN_CREATE with specific error code (-ENOENT)
to let user-space know that no token delegation is setup up.

So

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies BPF_TOKEN_CREATE to fail with -ENOENT if no delegation option is set on BPF FS.', 'keywords': 'BPF_TOKEN_CREATE, delegation, ENOENT', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f04f2ce6018f3cb33ac96270b9153c2920ead190
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f04f2ce6018f3cb33ac96270b9153c2920ead190
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1702510939
  Commit Message:
    bpf: selftests: Add verifier tests for CO-RE bitfield writes

Add some tests that exercise BPF_CORE_WRITE_BITFIELD() macro. Since some
non-trivial bit fiddling is going on
  Parent Hashes: 7d19c00e9abc8ad3b3b72a1989331f45287e6bf5
  Refs:  make sure various edge cases (such
as adjacent bitfields and bitfields at the edge of structs) are
exercised.

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/72698a1080fa565f541d5654705255984ea2a029.1702325874.git.dxu@dxuuu.xyz
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for CO-RE bitfield writes in the eBPF verifier.', 'keywords': 'CO-RE, selftests, bitfield', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7d19c00e9abc8ad3b3b72a1989331f45287e6bf5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7d19c00e9abc8ad3b3b72a1989331f45287e6bf5
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1702510939
  Commit Message:
    bpf: selftests: test_loader: Support __btf_path() annotation

This commit adds support for per-prog btf_custom_path. This is necessary
for testing CO-RE relocations on non-vmlinux types using test_loader
infrastructure.

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Xu <dxu@dxuuu.xyz>
Link: https://lore.kernel.org/r/660ea7f2fdbdd5103bc1af87c9fc931f05327926.1702325874.git.dxu@dxuuu.xyz
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 2f70803532e9b7f14897d17f8944d431755661a7
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds support for per-prog BTF custom paths for testing CO-RE relocations.', 'keywords': 'selftests,test_loader,BTF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2f70803532e9b7f14897d17f8944d431755661a7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2f70803532e9b7f14897d17f8944d431755661a7
  Author Name: Daniel Xu
  Author Email: dxu@dxuuu.xyz
  Commit Date: 1702510939
  Commit Message:
    libbpf: Add BPF_CORE_WRITE_BITFIELD() macro

=== Motivation ===

Similar to reading from CO-RE bitfields
  Parent Hashes: 750e785796bb72423b97cac21ecd0fa3b3b65610
  Refs:  we need a CO-RE aware bitfield
writing wrapper to make the verifier happy.

Two alternatives to this approach are:

1. Use the upcoming `preserve_static_offset` [0] attribute to disable
   CO-RE on specific structs.
2. Use broader byte-sized writes to write to bitfields.

(1) is a bit hard to use. It requires specific and not-very-obvious
annotations to bpftool generated vmlinux.h. It's also not generally
available in released LLVM versions yet.

(2) makes the code quite hard to read and write. And especially if
BPF_CORE_READ_BITFIELD() is already being used

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add new macro BPF_CORE_WRITE_BITFIELD() in libbpf for CO-RE bitfield writing.', 'keywords': 'macro, libbpf, bitfield', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 750e785796bb72423b97cac21ecd0fa3b3b65610
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 750e785796bb72423b97cac21ecd0fa3b3b65610
  Author Name: Jie Jiang
  Author Email: jiejiang@chromium.org
  Commit Date: 1702510662
  Commit Message:
    bpf: Support uid and gid when mounting bpffs

Parse uid and gid in bpf_parse_param() so that they can be passed in as
the `data` parameter when mount() bpffs. This will be useful when we
want to control which user/group has the control to the mounted bpffs
  Parent Hashes: 62d9a969f4a95219c757831e9ad66cd4dd9edee5
  Refs: 
otherwise a separate chown() call will be needed.

Signed-off-by: Jie Jiang <jiejiang@chromium.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Mike Frysinger <vapier@chromium.org>
Acked-by: Christian Brauner <brauner@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20231212093923.497838-1-jiejiang@chromium.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds support for uid and gid when mounting bpffs to control user/group access.', 'keywords': 'uid,gid,bpffs', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 62d9a969f4a95219c757831e9ad66cd4dd9edee5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 62d9a969f4a95219c757831e9ad66cd4dd9edee5
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702492036
  Commit Message:
    selftests/bpf: fix compiler warnings in RELEASE=1 mode

When compiling BPF selftests with RELEASE=1
  Parent Hashes: e1ba7f64b192f083b4423644be03bb9e3dc8ae84
  Refs:  we get two new
warnings

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes compiler warnings in BPF selftests when using RELEASE=1.', 'keywords': 'compiler, warnings, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 43e8832fed08438e2a27afed9bac21acd0ceffe5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 43e8832fed08438e2a27afed9bac21acd0ceffe5
  Author Name: John Hubbard
  Author Email: jhubbard@nvidia.com
  Commit Date: 1702430419
  Commit Message:
    Revert "selftests: error out if kernel header files are not yet built"

This reverts commit 9fc96c7c19df ("selftests: error out if kernel header
files are not yet built").

It turns out that requiring the kernel headers to be built as a
prerequisite to building selftests
  Parent Hashes: 1dd11e977360ad3493812da0b05ffd9adcdd15a1
  Refs:  does not work in many cases. For
example

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Revert a change requiring kernel headers to be built before selftests due to compatibility issues.', 'keywords': 'revert,selftests,headers', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e1ba7f64b192f083b4423644be03bb9e3dc8ae84
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e1ba7f64b192f083b4423644be03bb9e3dc8ae84
  Author Name: YiFei Zhu
  Author Email: zhuyifei@google.com
  Commit Date: 1702425214
  Commit Message:
    selftests/bpf: Relax time_tai test for equal timestamps in tai_forward

We're observing test flakiness on an arm64 platform which might not
have timestamps as precise as x86. The test log looks like:

  test_time_tai:PASS:tai_open 0 nsec
  test_time_tai:PASS:test_run 0 nsec
  test_time_tai:PASS:tai_ts1 0 nsec
  test_time_tai:PASS:tai_ts2 0 nsec
  test_time_tai:FAIL:tai_forward unexpected tai_forward: actual 1702348135471494160 <= expected 1702348135471494160
  test_time_tai:PASS:tai_gettime 0 nsec
  test_time_tai:PASS:tai_future_ts1 0 nsec
  test_time_tai:PASS:tai_future_ts2 0 nsec
  test_time_tai:PASS:tai_range_ts1 0 nsec
  test_time_tai:PASS:tai_range_ts2 0 nsec
  #199     time_tai:FAIL

This patch changes ASSERT_GT to ASSERT_GE in the tai_forward assertion
so that equal timestamps are permitted.

Fixes: 64e15820b987 ("selftests/bpf: Add BPF-helper test for CLOCK_TAI access")
Signed-off-by: YiFei Zhu <zhuyifei@google.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20231212182911.3784108-1-zhuyifei@google.com

  Parent Hashes: 745e0311306507ddbe1727ac798c8f956812b810
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Relaxed the tai_forward test assertion to allow equal timestamps to fix flakiness in ARM64 platforms.', 'keywords': 'test, timestamps, ARM64', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 745e0311306507ddbe1727ac798c8f956812b810
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 745e0311306507ddbe1727ac798c8f956812b810
  Author Name: Andrei Matei
  Author Email: andreimatei1@gmail.com
  Commit Date: 1702424132
  Commit Message:
    bpf: Comment on check_mem_size_reg

This patch adds a comment to check_mem_size_reg -- a function whose
meaning is not very transparent. The function implicitly deals with two
registers connected by convention
  Parent Hashes: 56c26d5ad86dfe48a76855a91b523ab4f372c003
  Refs:  which is not obvious.

Signed-off-by: Andrei Matei <andreimatei1@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20231210225149.67639-1-andreimatei1@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added comments to clarify functionality of check_mem_size_reg function in bpf code.', 'keywords': 'comments, check_mem_size_reg, function', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5805c82513c444333efb086017be8d666336858a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5805c82513c444333efb086017be8d666336858a
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1702403713
  Commit Message:
    libperf cpumap: Add for_each_cpu() that skips the "any CPU" case

When iterating CPUs in a CPU map it is often desirable to skip the "any
CPU" (aka dummy) case. Add a helper for this and use in builtin-record.

Reviewed-by: James Clark <james.clark@arm.com>
Signed-off-by: Ian Rogers <irogers@google.com>
Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Alexandre Ghiti <alexghiti@rivosinc.com>
Cc: Andrew Jones <ajones@ventanamicro.com>
Cc: André Almeida <andrealmeid@igalia.com>
Cc: Athira Jajeev <atrajeev@linux.vnet.ibm.com>
Cc: Atish Patra <atishp@rivosinc.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Darren Hart <dvhart@infradead.org>
Cc: Davidlohr Bueso <dave@stgolabs.net>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: John Garry <john.g.garry@oracle.com>
Cc: K Prateek Nayak <kprateek.nayak@amd.com>
Cc: Kajol Jain <kjain@linux.ibm.com>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: Leo Yan <leo.yan@linaro.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mike Leach <mike.leach@linaro.org>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Paran Lee <p4ranlee@gmail.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Sandipan Das <sandipan.das@amd.com>
Cc: Sean Christopherson <seanjc@google.com>
Cc: Steinar H. Gunderson <sesse@google.com>
Cc: Suzuki Poulouse <suzuki.poulose@arm.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Will Deacon <will@kernel.org>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Yang Li <yang.lee@linux.alibaba.com>
Cc: Yanteng Si <siyanteng@loongson.cn>
Cc: bpf@vger.kernel.org
Cc: coresight@lists.linaro.org
Cc: linux-arm-kernel@lists.infradead.org
Link: https://lore.kernel.org/r/20231129060211.1890454-6-irogers@google.com
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

  Parent Hashes: effe957c6bb70cac12918c0f5fd4cefb35967618
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a helper function for iterating CPUs in a CPU map that skips the "any CPU" case in libperf.', 'keywords': 'libperf, cpumap, helper', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: effe957c6bb70cac12918c0f5fd4cefb35967618
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: effe957c6bb70cac12918c0f5fd4cefb35967618
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1702403713
  Commit Message:
    libperf cpumap: Replace usage of perf_cpu_map__new(NULL) with perf_cpu_map__new_online_cpus()

Passing NULL to perf_cpu_map__new() performs
perf_cpu_map__new_online_cpus()
  Parent Hashes: 923ca62a7b1edceaa61eb6ac8dc56fdac51913b8
  Refs:  just directly call
perf_cpu_map__new_online_cpus() to be more intention revealing.

Reviewed-by: James Clark <james.clark@arm.com>
Signed-off-by: Ian Rogers <irogers@google.com>
Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Alexandre Ghiti <alexghiti@rivosinc.com>
Cc: Andrew Jones <ajones@ventanamicro.com>
Cc: André Almeida <andrealmeid@igalia.com>
Cc: Athira Jajeev <atrajeev@linux.vnet.ibm.com>
Cc: Atish Patra <atishp@rivosinc.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Darren Hart <dvhart@infradead.org>
Cc: Davidlohr Bueso <dave@stgolabs.net>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: John Garry <john.g.garry@oracle.com>
Cc: K Prateek Nayak <kprateek.nayak@amd.com>
Cc: Kajol Jain <kjain@linux.ibm.com>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: Leo Yan <leo.yan@linaro.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mike Leach <mike.leach@linaro.org>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Paran Lee <p4ranlee@gmail.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Sandipan Das <sandipan.das@amd.com>
Cc: Sean Christopherson <seanjc@google.com>
Cc: Steinar H. Gunderson <sesse@google.com>
Cc: Suzuki Poulouse <suzuki.poulose@arm.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Will Deacon <will@kernel.org>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Yang Li <yang.lee@linux.alibaba.com>
Cc: Yanteng Si <siyanteng@loongson.cn>
Cc: bpf@vger.kernel.org
Cc: coresight@lists.linaro.org
Cc: linux-arm-kernel@lists.infradead.org
Link: https://lore.kernel.org/r/20231129060211.1890454-5-irogers@google.com
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replaces perf_cpu_map__new(NULL) with perf_cpu_map__new_online_cpus() for clearer intention in libperf cpumap.', 'keywords': 'libperf, cpumap, intention', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 923ca62a7b1edceaa61eb6ac8dc56fdac51913b8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 923ca62a7b1edceaa61eb6ac8dc56fdac51913b8
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1702403713
  Commit Message:
    libperf cpumap: Rename perf_cpu_map__empty() to perf_cpu_map__has_any_cpu_or_is_empty()

The name perf_cpu_map_empty is misleading as true is also returned
when the map contains an "any" CPU (aka dummy) map.

Rename to perf_cpu_map__has_any_cpu_or_is_empty()
  Parent Hashes: 8f60f870a9af53295ab4301da05ca453f115a6b6
  Refs:  later changes will
(re)introduce perf_cpu_map__empty() and perf_cpu_map__has_any_cpu().

Reviewed-by: James Clark <james.clark@arm.com>
Signed-off-by: Ian Rogers <irogers@google.com>
Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Alexandre Ghiti <alexghiti@rivosinc.com>
Cc: Andrew Jones <ajones@ventanamicro.com>
Cc: André Almeida <andrealmeid@igalia.com>
Cc: Athira Jajeev <atrajeev@linux.vnet.ibm.com>
Cc: Atish Patra <atishp@rivosinc.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Darren Hart <dvhart@infradead.org>
Cc: Davidlohr Bueso <dave@stgolabs.net>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: John Garry <john.g.garry@oracle.com>
Cc: K Prateek Nayak <kprateek.nayak@amd.com>
Cc: Kajol Jain <kjain@linux.ibm.com>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: Leo Yan <leo.yan@linaro.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mike Leach <mike.leach@linaro.org>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Paran Lee <p4ranlee@gmail.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Sandipan Das <sandipan.das@amd.com>
Cc: Sean Christopherson <seanjc@google.com>
Cc: Steinar H. Gunderson <sesse@google.com>
Cc: Suzuki Poulouse <suzuki.poulose@arm.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Will Deacon <will@kernel.org>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Yang Li <yang.lee@linux.alibaba.com>
Cc: Yanteng Si <siyanteng@loongson.cn>
Cc: bpf@vger.kernel.org
Cc: coresight@lists.linaro.org
Cc: linux-arm-kernel@lists.infradead.org
Link: https://lore.kernel.org/r/20231129060211.1890454-4-irogers@google.com
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Renamed a misleading function in libperf cpumap to improve accuracy and clarity.', 'keywords': 'function, rename, libperf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 8f60f870a9af53295ab4301da05ca453f115a6b6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8f60f870a9af53295ab4301da05ca453f115a6b6
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1702403691
  Commit Message:
    libperf cpumap: Rename perf_cpu_map__default_new() to perf_cpu_map__new_online_cpus() and prefer sysfs

Rename perf_cpu_map__default_new() to perf_cpu_map__new_online_cpus() to
better indicate what the implementation does.

Read the online CPUs from /sys/devices/system/cpu/online first before
using sysconf() as it can't accurately configure holes in the CPU map.

If sysconf() is used
  Parent Hashes: 48219b089d84f109e8a81d8a7fa1bbc2e6e5f97d
  Refs:  warn when the configured and online processors
disagree.

When reading from a file

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit renames a function to better describe its function of reading online CPUs from sysfs in the libperf library.', 'keywords': 'rename, libperf, cpumap', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 56c26d5ad86dfe48a76855a91b523ab4f372c003
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 56c26d5ad86dfe48a76855a91b523ab4f372c003
  Author Name: Yang Li
  Author Email: yang.lee@linux.alibaba.com
  Commit Date: 1702403527
  Commit Message:
    bpf: Remove unused backtrack_state helper functions

The function are defined in the verifier.c file
  Parent Hashes: f77d795618b92ac6fdb43de0d4036c6ce49f0b82
  Refs:  but not called
elsewhere

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove unused helper functions from verifier.c file in bpf codebase.', 'keywords': 'unused, backtrack, helper', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f77d795618b92ac6fdb43de0d4036c6ce49f0b82
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f77d795618b92ac6fdb43de0d4036c6ce49f0b82
  Author Name: Manu Bretelle
  Author Email: chantr4@gmail.com
  Commit Date: 1702403507
  Commit Message:
    selftests/bpf: Fixes tests for filesystem kfuncs

`fs_kfuncs.c`'s `test_xattr` would fail the test even when the
filesystem did not support xattr
  Parent Hashes: 406a6fa44bfbc8563f0612b08d43df2fa65e8bc5
  Refs:  for instance when /tmp is mounted as
tmpfs.

This change checks errno when setxattr fail. If the failure is due to
the operation being unsupported

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes tests for filesystem kfuncs by checking errno when setxattr fails due to unsupported operations.', 'keywords': 'fixes, filesystem, kfuncs', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 48219b089d84f109e8a81d8a7fa1bbc2e6e5f97d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 48219b089d84f109e8a81d8a7fa1bbc2e6e5f97d
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1702400507
  Commit Message:
    libperf cpumap: Rename perf_cpu_map__dummy_new() to perf_cpu_map__new_any_cpu()

Rename perf_cpu_map__dummy_new() to perf_cpu_map__new_any_cpu() to
better indicate this is creating a CPU map for the perf_event_open "any"
CPU case.

Reviewed-by: James Clark <james.clark@arm.com>
Signed-off-by: Ian Rogers <irogers@google.com>
Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Alexandre Ghiti <alexghiti@rivosinc.com>
Cc: Andrew Jones <ajones@ventanamicro.com>
Cc: André Almeida <andrealmeid@igalia.com>
Cc: Athira Jajeev <atrajeev@linux.vnet.ibm.com>
Cc: Atish Patra <atishp@rivosinc.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Darren Hart <dvhart@infradead.org>
Cc: Davidlohr Bueso <dave@stgolabs.net>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: John Garry <john.g.garry@oracle.com>
Cc: K Prateek Nayak <kprateek.nayak@amd.com>
Cc: Kajol Jain <kjain@linux.ibm.com>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: Leo Yan <leo.yan@linaro.org>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Mike Leach <mike.leach@linaro.org>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Paran Lee <p4ranlee@gmail.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Sandipan Das <sandipan.das@amd.com>
Cc: Sean Christopherson <seanjc@google.com>
Cc: Steinar H. Gunderson <sesse@google.com>
Cc: Suzuki Poulouse <suzuki.poulose@arm.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Will Deacon <will@kernel.org>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Yang Li <yang.lee@linux.alibaba.com>
Cc: Yanteng Si <siyanteng@loongson.cn>
Cc: bpf@vger.kernel.org
Cc: coresight@lists.linaro.org
Cc: linux-arm-kernel@lists.infradead.org
Link: https://lore.kernel.org/r/20231129060211.1890454-2-irogers@google.com
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

  Parent Hashes: 8596ba324356a7392a6639024de8c9ae7a9fce92
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Renamed perf_cpu_map__dummy_new() to perf_cpu_map__new_any_cpu() to clarify its purpose for 'any' CPU in perf_event_open.", 'keywords': 'CPU map, renaming, perf_event_open', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 406a6fa44bfbc8563f0612b08d43df2fa65e8bc5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 406a6fa44bfbc8563f0612b08d43df2fa65e8bc5
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702351417
  Commit Message:
    bpf: use bitfields for simple per-subprog bool flags

We have a bunch of bool flags for each subprog. Instead of wasting bytes
for them
  Parent Hashes: 1a1ad782dcbbacd9e8d4e2e7ff1bf14d1db80727
  Refs:  use bitfields instead.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20231204233931.49758-5-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit optimizes memory usage by utilizing bitfields for subprogram boolean flags.', 'keywords': 'bitfields, bool flags, subprog', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1a1ad782dcbbacd9e8d4e2e7ff1bf14d1db80727
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1a1ad782dcbbacd9e8d4e2e7ff1bf14d1db80727
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702351412
  Commit Message:
    bpf: tidy up exception callback management a bit

Use the fact that we are passing subprog index around and have
a corresponding struct bpf_subprog_info in bpf_verifier_env for each
subprogram. We don't need to separately pass around a flag whether
subprog is exception callback or not
  Parent Hashes: 22b769bb4f87060774bfdd6facbab438ed3b8453
  Refs:  each relevant verifier function
can determine this using provided subprog index if we maintain
bpf_subprog_info properly.

Also move out exception callback-specific logic from
btf_prepare_func_args()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor exception callback management using bpf_subprog_info with subprog index in bpf_verifier_env.', 'keywords': 'exception, subprog, management', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 22b769bb4f87060774bfdd6facbab438ed3b8453
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 22b769bb4f87060774bfdd6facbab438ed3b8453
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702351282
  Commit Message:
    bpf: emit more dynptr information in verifier log

Emit dynptr type for CONST_PTR_TO_DYNPTR register. Also emit id
  Parent Hashes: 1e68485d8299860e68c4e1d29589ff0d20db0287
  Refs: 
ref_obj_id

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enhances the verifier log by emitting more dynptr information including type and ID for CONST_PTR_TO_DYNPTR.', 'keywords': 'dynptr,verifier log,CONST_PTR_TO_DYNPTR', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1e68485d8299860e68c4e1d29589ff0d20db0287
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1e68485d8299860e68c4e1d29589ff0d20db0287
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702351282
  Commit Message:
    bpf: log PTR_TO_MEM memory size in verifier log

Emit valid memory size addressable through PTR_TO_MEM register.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20231204233931.49758-2-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: e72c1ccfd449598f7eda10d3bb7441d501ddcfc3
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Addability to log memory size for PTR_TO_MEM in the verifier.', 'keywords': 'PTR_TO_MEM,memory size,verifier', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e72c1ccfd449598f7eda10d3bb7441d501ddcfc3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e72c1ccfd449598f7eda10d3bb7441d501ddcfc3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702350992
  Commit Message:
    selftests/bpf: validate eliminated global subprog is not freplaceable

Add selftest that establishes dead code-eliminated valid global subprog
(global_dead) and makes sure that it's not possible to freplace it
  Parent Hashes: 2ebe81c814355d000fe49d9c4213983844dcb32b
  Refs:  as
it's effectively not there. This test will fail with unexpected success
before 2afae08c9dcb ("bpf: Validate global subprogs lazily").

v2->v3:
  - add missing err assignment (Alan);
  - undo unnecessary signature changes in verifier_global_subprogs.c (Eduard);
v1->v2:
  - don't rely on assembly output in verifier log

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftest for global subprogs to ensure non-freplaceability of dead code-eliminated subprograms.', 'keywords': 'selftest, global subprog, freplace', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2ebe81c814355d000fe49d9c4213983844dcb32b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2ebe81c814355d000fe49d9c4213983844dcb32b
  Author Name: Aleksander Lobakin
  Author Email: aleksander.lobakin@intel.com
  Commit Date: 1702307376
  Commit Message:
    net
  Parent Hashes: 15c79c6507c0eab5ec0d4cd402ac52d42735a43e
  Refs:  xdp: Allow metadata > 32

32 bytes may be not enough for some custom metadata. Relax the restriction

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit relaxes the metadata size restriction in XDP programs from 32 bytes to allow larger custom metadata.', 'keywords': 'metadata,XDP,restriction', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 15c79c6507c0eab5ec0d4cd402ac52d42735a43e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 15c79c6507c0eab5ec0d4cd402ac52d42735a43e
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1702307364
  Commit Message:
    selftests/bpf: Increase invalid metadata size

Changed check expects passed data meta to be deemed invalid. After loosening
the requirement
  Parent Hashes: 5bcbdf72df88a351642627d94b93af7c9301b6e2
  Refs:  the size of 36 bytes becomes valid. Therefore

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Increased invalid metadata size in selftests to ensure 36 bytes is recognized as valid.', 'keywords': 'invalid, metadata, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5bcbdf72df88a351642627d94b93af7c9301b6e2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5bcbdf72df88a351642627d94b93af7c9301b6e2
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1702186653
  Commit Message:
    Merge branch 'add-new-bpf_cpumask_weight-kfunc'

David Vernet says:

====================
Add new bpf_cpumask_weight() kfunc

It can be useful to query how many bits are set in a cpumask. For
example
  Parent Hashes: 5181dc08f79583c6dead80208137a97e68ff07b0 88f6047191e69bdd02cf1b9b5b514f7e514e8b86
  Refs:  if you want to perform special logic for the last remaining
core that's set in a mask. This logic is already exposed through the
main kernel's cpumask header as cpumask_weight()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a new bpf_cpumask_weight() kfunc to query the number of set bits in a cpumask.', 'keywords': 'bpf_cpumask_weight,kfunc,cpumask', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 88f6047191e69bdd02cf1b9b5b514f7e514e8b86
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 88f6047191e69bdd02cf1b9b5b514f7e514e8b86
  Author Name: David Vernet
  Author Email: void@manifault.com
  Commit Date: 1702186653
  Commit Message:
    selftests/bpf: Add test for bpf_cpumask_weight() kfunc

The new bpf_cpumask_weight() kfunc can be used to count the number of
bits that are set in a struct cpumask* kptr. Let's add a selftest to
verify its behavior.

Signed-off-by: David Vernet <void@manifault.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20231207210843.168466-3-void@manifault.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: a6de18f310a511278c1ff16b96eb2d500eada725
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest for the new bpf_cpumask_weight() kfunc for verifying its functionality.', 'keywords': 'selftest,kfunc,bpf_cpumask_weight', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a6de18f310a511278c1ff16b96eb2d500eada725
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a6de18f310a511278c1ff16b96eb2d500eada725
  Author Name: David Vernet
  Author Email: void@manifault.com
  Commit Date: 1702186653
  Commit Message:
    bpf: Add bpf_cpumask_weight() kfunc

It can be useful to query how many bits are set in a cpumask. For
example
  Parent Hashes: 5181dc08f79583c6dead80208137a97e68ff07b0
  Refs:  if you want to perform special logic for the last remaining
core that's set in a mask. Let's therefore add a new
bpf_cpumask_weight() kfunc which checks how many bits are set in a mask.

Signed-off-by: David Vernet <void@manifault.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20231207210843.168466-2-void@manifault.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a new kfunc bpf_cpumask_weight to count bits set in a cpumask.', 'keywords': 'bpf_cpumask_weight,kfunc,cpumask', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5181dc08f79583c6dead80208137a97e68ff07b0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5181dc08f79583c6dead80208137a97e68ff07b0
  Author Name: Tiezhu Yang
  Author Email: yangtiezhu@loongson.cn
  Commit Date: 1702186074
  Commit Message:
    test_bpf: Rename second ALU64_SMOD_X to ALU64_SMOD_K

Currently
  Parent Hashes: 7d8ed51bcb32716a40d71043fcd01c4118858c51
  Refs:  there are two test cases with same name
"ALU64_SMOD_X: -7 % 2 = -1"

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit renames a duplicate test case in test_bpf to uniquely identify ALU64_SMOD_X operations.', 'keywords': 'rename, test cases, ALU64_SMOD', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7d8ed51bcb32716a40d71043fcd01c4118858c51
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7d8ed51bcb32716a40d71043fcd01c4118858c51
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702176200
  Commit Message:
    selftests/bpf: validate fake register spill/fill precision backtracking logic

Add two tests validating that verifier's precision backtracking logic
handles BPF_ST_MEM instructions that produce fake register spill into
register slot. This is happening when non-zero constant is written
directly to a slot
  Parent Hashes: 482d548d40b0af9af730e4869903d4433e44f014
  Refs:  e.g.

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Added tests for verifier's precision backtracking logic in BPF register spill handling.", 'keywords': 'precision, verifier, tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 482d548d40b0af9af730e4869903d4433e44f014
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 482d548d40b0af9af730e4869903d4433e44f014
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702176200
  Commit Message:
    bpf: handle fake register spill to stack with BPF_ST_MEM instruction

When verifier validates BPF_ST_MEM instruction that stores known
constant to stack (e.g.
  Parent Hashes: 8477fe1de9a631d634ccfda7fe147eba90f55732
  Refs:  *(u64 *)(r10 - 8) = 123)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhances the eBPF verifier to correctly handle BPF_ST_MEM instruction when storing known constants to stack.', 'keywords': 'BPF_ST_MEM, verifier, stack', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8477fe1de9a631d634ccfda7fe147eba90f55732
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8477fe1de9a631d634ccfda7fe147eba90f55732
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1702174403
  Commit Message:
    Merge branch 'bpf-fixes-for-maybe_wait_bpf_programs'

Hou Tao says:

====================
The patch set aims to fix the problems found when inspecting the code
related with maybe_wait_bpf_programs().

Patch #1 removes unnecessary invocation of maybe_wait_bpf_programs().
Patch #2 calls maybe_wait_bpf_programs() only once for batched update.
Patch #3 adds the missed waiting when doing batched lookup_deletion on
htab of maps. Patch #4 does wait only if the update or deletion
operation succeeds. Patch #5 fixes the value of batch.count when memory
allocation fails.
====================

Link: https://lore.kernel.org/r/20231208102355.2628918-1-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 32fa058398624166dd04ff4af49cfef69c94abbc 06e5c999f10269a532304e89a6adb2fbfeb0593c
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses issues with maybe_wait_bpf_programs in batched operations and enhances memory allocation handling for eBPF maps.', 'keywords': 'maybe_wait_bpf_programs, batched update, maps', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 06e5c999f10269a532304e89a6adb2fbfeb0593c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 06e5c999f10269a532304e89a6adb2fbfeb0593c
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702174354
  Commit Message:
    bpf: Set uattr->batch.count as zero before batched update or deletion

generic_map_{delete
  Parent Hashes: 67ad2c73ff29b32bd09135ec07c26e59490dbb3b
  Refs: update}_batch() doesn't set uattr->batch.count as
zero before it tries to allocate memory for key. If the memory
allocation fails

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit sets uattr->batch.count to zero before performing memory allocations for batched updates or deletions.', 'keywords': 'uattr, batch, update', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 67ad2c73ff29b32bd09135ec07c26e59490dbb3b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 67ad2c73ff29b32bd09135ec07c26e59490dbb3b
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702174354
  Commit Message:
    bpf: Only call maybe_wait_bpf_programs() when map operation succeeds

There is no need to call maybe_wait_bpf_programs() if update or deletion
operation fails. So only call maybe_wait_bpf_programs() if update or
deletion operation succeeds.

Signed-off-by: Hou Tao <houtao1@huawei.com>
Link: https://lore.kernel.org/r/20231208102355.2628918-5-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 012772581d040607ac1f981f47f6afd2336b4580
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize bpf map operation to conditionally call maybe_wait_bpf_programs() only on success.', 'keywords': 'bpf,map,operation', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 012772581d040607ac1f981f47f6afd2336b4580
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 012772581d040607ac1f981f47f6afd2336b4580
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702174354
  Commit Message:
    bpf: Add missed maybe_wait_bpf_programs() for htab of maps

When doing batched lookup and deletion operations on htab of maps
  Parent Hashes: 37ba5b59d6adfa08926acd3a833608487a18c2ef
  Refs: 
maybe_wait_bpf_programs() is needed to ensure all programs don't use the
inner map after the bpf syscall returns.

Instead of adding the wait in __htab_map_lookup_and_delete_batch()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add maybe_wait_bpf_programs() to ensure safe usage of maps after batched operations in eBPF.', 'keywords': 'maybe_wait_bpf_programs, htab, maps', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 37ba5b59d6adfa08926acd3a833608487a18c2ef
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 37ba5b59d6adfa08926acd3a833608487a18c2ef
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702174353
  Commit Message:
    bpf: Call maybe_wait_bpf_programs() only once for generic_map_update_batch()

Just like commit 9087c6ff8dfe ("bpf: Call maybe_wait_bpf_programs() only
once from generic_map_delete_batch()")
  Parent Hashes: c26f2a8901393c9f81909da0a4324587092bd3a3
  Refs:  there is also no need to call
maybe_wait_bpf_programs() for each update in batched update

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize the call to maybe_wait_bpf_programs() by executing it once for generic_map_update_batch().', 'keywords': 'maybe_wait_bpf_programs, generic_map_update_batch, optimize', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c26f2a8901393c9f81909da0a4324587092bd3a3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c26f2a8901393c9f81909da0a4324587092bd3a3
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1702174353
  Commit Message:
    bpf: Remove unnecessary wait from bpf_map_copy_value()

Both map_lookup_elem() and generic_map_lookup_batch() use
bpf_map_copy_value() to lookup and copy the value
  Parent Hashes: 32fa058398624166dd04ff4af49cfef69c94abbc
  Refs:  and there is no
update operation in bpf_map_copy_value()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes unnecessary waiting from the function bpf_map_copy_value.', 'keywords': 'remove unnecessary wait, map_copy_value, map_lookup_elem', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b10a3ccaf6e39f6290ca29d7c24604082eacaea0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b10a3ccaf6e39f6290ca29d7c24604082eacaea0
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1702153556
  Commit Message:
    Merge tag 'loongarch-fixes-6.7-2' of git://git.kernel.org/pub/scm/linux/kernel/git/chenhuacai/linux-loongson

Pull LoongArch fixes from Huacai Chen:
 "Preserve syscall nr across execve()
  Parent Hashes: b8503b215789628d3625ef6aa252f323e32be929 e2f7b3d8b4b300956a77fa1ab084c931ba1c7421
  Refs:  slightly clean up drdtime()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge LoongArch fixes for preserving syscall number across execve and cleaning up drdtime.', 'keywords': 'LoongArch, syscall, fixes', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e2f7b3d8b4b300956a77fa1ab084c931ba1c7421
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e2f7b3d8b4b300956a77fa1ab084c931ba1c7421
  Author Name: Tiezhu Yang
  Author Email: yangtiezhu@loongson.cn
  Commit Date: 1702108156
  Commit Message:
    LoongArch: BPF: Fix unconditional bswap instructions

We can see that "bswap32: Takes an unsigned 32-bit number in either big-
or little-endian format and returns the equivalent number with the same
bit width but opposite endianness" in BPF Instruction Set Specification
  Parent Hashes: 772cbe948fb07389639d4e698a2d3299f8e538b8
  Refs: 
so it should clear the upper 32 bits in "case 32:" for both BPF_ALU and
BPF_ALU64.

[root@linux fedora]# echo 1 > /proc/sys/net/core/bpf_jit_enable
[root@linux fedora]# modprobe test_bpf

Before:
test_bpf: #313 BSWAP 32: 0x0123456789abcdef -> 0xefcdab89 jited:1 ret 1460850314 != -271733879 (0x5712ce8a != 0xefcdab89)FAIL (1 times)
test_bpf: #317 BSWAP 32: 0xfedcba9876543210 -> 0x10325476 jited:1 ret -1460850316 != 271733878 (0xa8ed3174 != 0x10325476)FAIL (1 times)

After:
test_bpf: #313 BSWAP 32: 0x0123456789abcdef -> 0xefcdab89 jited:1 4 PASS
test_bpf: #317 BSWAP 32: 0xfedcba9876543210 -> 0x10325476 jited:1 4 PASS

Fixes: 4ebf9216e7df ("LoongArch: BPF: Support unconditional bswap instructions")
Acked-by: Hengqi Chen <hengqi.chen@gmail.com>
Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix the unconditional bswap instruction bug for LoongArch BPF.', 'keywords': 'bswap, LoongArch, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The JIT compiler', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 772cbe948fb07389639d4e698a2d3299f8e538b8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 772cbe948fb07389639d4e698a2d3299f8e538b8
  Author Name: Tiezhu Yang
  Author Email: yangtiezhu@loongson.cn
  Commit Date: 1702108156
  Commit Message:
    LoongArch: BPF: Fix sign-extension mov instructions

We can see that "Short form of movsx
  Parent Hashes: 5d47ec2e6f4c64e30e392cfe9532df98c9beb106
  Refs:  dst_reg = (s8

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes sign-extension mov instructions for LoongArch in BPF.', 'keywords': 'LoongArch,BPF,fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5d47ec2e6f4c64e30e392cfe9532df98c9beb106
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5d47ec2e6f4c64e30e392cfe9532df98c9beb106
  Author Name: Hengqi Chen
  Author Email: hengqi.chen@gmail.com
  Commit Date: 1702108156
  Commit Message:
    LoongArch: BPF: Don't sign extend function return value

The `cls_redirect` test triggers a kernel panic like:

  # ./test_progs -t cls_redirect
  Can't find bpf_testmod.ko kernel module: -2
  WARNING! Selftests relying on bpf_testmod.ko will be skipped.
  [   30.938489] CPU 3 Unable to handle kernel paging request at virtual address fffffffffd814de0
  Parent Hashes: fe5757553bf9ebe45ae8ecab5922f6937c8d8dfc
  Refs:  era == ffff800002009fb8

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a kernel panic issue on LoongArch architecture by preventing sign extension of function return value in BPF.', 'keywords': 'LoongArch, kernel panic, BPF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: fe5757553bf9ebe45ae8ecab5922f6937c8d8dfc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fe5757553bf9ebe45ae8ecab5922f6937c8d8dfc
  Author Name: Hengqi Chen
  Author Email: hengqi.chen@gmail.com
  Commit Date: 1702108156
  Commit Message:
    LoongArch: BPF: Don't sign extend memory load operand

The `cgrp_local_storage` test triggers a kernel panic like:

  # ./test_progs -t cgrp_local_storage
  Can't find bpf_testmod.ko kernel module: -2
  WARNING! Selftests relying on bpf_testmod.ko will be skipped.
  [  550.930632] CPU 1 Unable to handle kernel paging request at virtual address 0000000000000080
  Parent Hashes: d6c5f06e46a836e6a70c7cfd95bb38a67d9252ec
  Refs:  era == ffff80000200be34

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes kernel panic issue by modifying memory load operand behavior on LoongArch architecture.', 'keywords': 'LoongArch,memory load,kernel panic', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 32fa058398624166dd04ff4af49cfef69c94abbc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 32fa058398624166dd04ff4af49cfef69c94abbc
  Author Name: Sergei Trofimovich
  Author Email: slyich@gmail.com
  Commit Date: 1702084278
  Commit Message:
    libbpf: Add pr_warn() for EINVAL cases in linker_sanity_check_elf

Before the change on `i686-linux` `systemd` build failed as:

    $ bpftool gen object src/core/bpf/socket_bind/socket-bind.bpf.o src/core/bpf/socket_bind/socket-bind.bpf.unstripped.o
    Error: failed to link 'src/core/bpf/socket_bind/socket-bind.bpf.unstripped.o': Invalid argument (22)

After the change it fails as:

    $ bpftool gen object src/core/bpf/socket_bind/socket-bind.bpf.o src/core/bpf/socket_bind/socket-bind.bpf.unstripped.o
    libbpf: ELF section #9 has inconsistent alignment addr=8 != d=4 in src/core/bpf/socket_bind/socket-bind.bpf.unstripped.o
    Error: failed to link 'src/core/bpf/socket_bind/socket-bind.bpf.unstripped.o': Invalid argument (22)

Now it's slightly easier to figure out what is wrong with an ELF file.

Signed-off-by: Sergei Trofimovich <slyich@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20231208215100.435876-1-slyich@gmail.com

  Parent Hashes: 09115c33e6ec4a98a0609ac5fa702b7fe566d8f9
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enhances libbpf by adding a pr_warn() for better error reporting on EINVAL cases during linker sanity check of ELF files.', 'keywords': 'libbpf, pr_warn, EINVAL', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 09115c33e6ec4a98a0609ac5fa702b7fe566d8f9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 09115c33e6ec4a98a0609ac5fa702b7fe566d8f9
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1702084099
  Commit Message:
    Merge branch 'bpf: Expand bpf_cgrp_storage to support cgroup1 non-attach case'

Yafang Shao says:

====================
In the current cgroup1 environment
  Parent Hashes: 1720c42b90c8f14ffcb2f2f39a1abafc82a5b22e a2c6380b17b6339bfedc98d253b6d85e7014953b
  Refs:  associating operations between a cgroup
and applications in a BPF program requires storing a mapping of cgroup_id
to application either in a hash map or maintaining it in userspace.
However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit expands the bpf_cgrp_storage to support non-attach cases in cgroup1.', 'keywords': 'bpf_cgrp_storage cgroup1 non-attach', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: a2c6380b17b6339bfedc98d253b6d85e7014953b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a2c6380b17b6339bfedc98d253b6d85e7014953b
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1702084098
  Commit Message:
    selftests/bpf: Add selftests for cgroup1 local storage

Expanding the test coverage from cgroup2 to include cgroup1. The result
as follows
  Parent Hashes: f4199271dae12ae407fa739e7012914ea6b3f37b
  Refs: 

Already existing test cases for cgroup2:
  #48/1    cgrp_local_storage/tp_btf:OK
  #48/2    cgrp_local_storage/attach_cgroup:OK
  #48/3    cgrp_local_storage/recursion:OK
  #48/4    cgrp_local_storage/negative:OK
  #48/5    cgrp_local_storage/cgroup_iter_sleepable:OK
  #48/6    cgrp_local_storage/yes_rcu_lock:OK
  #48/7    cgrp_local_storage/no_rcu_lock:OK

Expanded test cases for cgroup1:
  #48/8    cgrp_local_storage/cgrp1_tp_btf:OK
  #48/9    cgrp_local_storage/cgrp1_recursion:OK
  #48/10   cgrp_local_storage/cgrp1_negative:OK
  #48/11   cgrp_local_storage/cgrp1_iter_sleepable:OK
  #48/12   cgrp_local_storage/cgrp1_yes_rcu_lock:OK
  #48/13   cgrp_local_storage/cgrp1_no_rcu_lock:OK

Summary:
  #48      cgrp_local_storage:OK
  Summary: 1/13 PASSED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for cgroup1 local storage by expanding test coverage from cgroup2.', 'keywords': 'selftests,cgroup1,test coverage', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: f4199271dae12ae407fa739e7012914ea6b3f37b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f4199271dae12ae407fa739e7012914ea6b3f37b
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1702084098
  Commit Message:
    selftests/bpf: Add a new cgroup helper open_classid()

This new helper allows us to obtain the fd of a net_cls cgroup
  Parent Hashes: 73d9eb340d2b95e0e86a656a7f3157c137f10129
  Refs:  which will
be utilized in the subsequent patch.

Signed-off-by: Yafang Shao <laoar.shao@gmail.com>
Acked-by: Tejun Heo <tj@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20231206115326.4295-3-laoar.shao@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a new cgroup helper to obtain the file descriptor of a net_cls cgroup.', 'keywords': 'cgroup,helper,net_cls', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 73d9eb340d2b95e0e86a656a7f3157c137f10129
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 73d9eb340d2b95e0e86a656a7f3157c137f10129
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1702084098
  Commit Message:
    bpf: Enable bpf_cgrp_storage for cgroup1 non-attach case

In the current cgroup1 environment
  Parent Hashes: 1720c42b90c8f14ffcb2f2f39a1abafc82a5b22e
  Refs:  associating operations between cgroups
and applications in a BPF program requires storing a mapping of cgroup_id
to application either in a hash map or maintaining it in userspace.
However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable cgroup storage support for BPF programs in cgroup1 non-attach mode.', 'keywords': 'bpf,cgroup1,storage', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 1720c42b90c8f14ffcb2f2f39a1abafc82a5b22e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1720c42b90c8f14ffcb2f2f39a1abafc82a5b22e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702083050
  Commit Message:
    selftests/bpf: fix timer/test_bad_ret subtest on test_progs-cpuv4 flavor

Because test_bad_ret main program is not written in assembly
  Parent Hashes: 4af20ab9edee62aa2bb5b6f31b7f029de14e0756
  Refs:  we don't
control instruction indices in timer_cb_ret_bad() subprog. This bites us
in timer/test_bad_ret subtest

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes the issue with timer/test_bad_ret subtest on the test_progs-cpuv4 by handling instruction indices in non-assembly code.', 'keywords': 'selftests,bpf,test', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 4af20ab9edee62aa2bb5b6f31b7f029de14e0756
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4af20ab9edee62aa2bb5b6f31b7f029de14e0756
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1702073941
  Commit Message:
    Merge branch 'bpf-fix-accesses-to-uninit-stack-slots'

Andrei Matei says:

====================
bpf: fix accesses to uninit stack slots

Fix two related issues issues around verifying stack accesses:
1. accesses to uninitialized stack memory was allowed inconsistently
2. the maximum stack depth needed for a program was not always
maintained correctly

The two issues are fixed together in one commit because the code for one
affects the other.

V4 to V5:
- target bpf-next (Alexei)

V3 to V4:
- minor fixup to comment in patch 1 (Eduard)
- C89-style in patch 3 (Andrii)

V2 to V3:
- address review comments from Andrii and Eduard
- drop new verifier tests in favor of editing existing tests to check
  for stack depth
- append a patch with a bit of cleanup coming out of the previous review
====================

Link: https://lore.kernel.org/r/20231208032519.260451-1-andreimatei1@gmail.com
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>

  Parent Hashes: 8b7b0e5fe47de90ba6c350f9abece589fb637f79 2929bfac006d8f8e22b307d04e0d71bcb84db698
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes issues with verifying accesses to uninitialized stack slots and maintaining maximum stack depth in bpf programs.', 'keywords': 'uninitialized,stack,depth', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2929bfac006d8f8e22b307d04e0d71bcb84db698
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2929bfac006d8f8e22b307d04e0d71bcb84db698
  Author Name: Andrei Matei
  Author Email: andreimatei1@gmail.com
  Commit Date: 1702073940
  Commit Message:
    bpf: Minor cleanup around stack bounds

Push the rounding up of stack offsets into the function responsible for
growing the stack
  Parent Hashes: 6b4a64bafd107e521c01eec3453ce94a3fb38529
  Refs:  rather than relying on all the callers to do it.
Uncertainty about whether the callers did it or not tripped up people in
a previous review.

Signed-off-by: Andrei Matei <andreimatei1@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20231208032519.260451-4-andreimatei1@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors stack offset rounding into the stack growing function for cleaner code.', 'keywords': 'cleanup, stack, bounds', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6b4a64bafd107e521c01eec3453ce94a3fb38529
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6b4a64bafd107e521c01eec3453ce94a3fb38529
  Author Name: Andrei Matei
  Author Email: andreimatei1@gmail.com
  Commit Date: 1702073940
  Commit Message:
    bpf: Fix accesses to uninit stack slots

Privileged programs are supposed to be able to read uninitialized stack
memory (ever since 6715df8d5) but
  Parent Hashes: 92e1567ee3e3f6f160e320890ac77eec50bf8e7d
  Refs:  before this patch

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes issue with privileged programs accessing uninitialized stack memory in eBPF.', 'keywords': 'fix,uninitialized,stack', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 92e1567ee3e3f6f160e320890ac77eec50bf8e7d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 92e1567ee3e3f6f160e320890ac77eec50bf8e7d
  Author Name: Andrei Matei
  Author Email: andreimatei1@gmail.com
  Commit Date: 1702073940
  Commit Message:
    bpf: Add some comments to stack representation

Add comments to the datastructure tracking the stack state
  Parent Hashes: 8b7b0e5fe47de90ba6c350f9abece589fb637f79
  Refs:  as the
mapping between each stack slot and where its state is stored is not
entirely obvious.

Signed-off-by: Andrei Matei <andreimatei1@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20231208032519.260451-2-andreimatei1@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added comments to clarify the stack representation and state tracking in eBPF.', 'keywords': 'comments, stack, representation', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8b7b0e5fe47de90ba6c350f9abece589fb637f79
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8b7b0e5fe47de90ba6c350f9abece589fb637f79
  Author Name: David Vernet
  Author Email: void@manifault.com
  Commit Date: 1702057139
  Commit Message:
    bpf: Load vmlinux btf for any struct_ops map

In libbpf
  Parent Hashes: 483af466e4ee3326d150877ea0626e95c67a395e
  Refs:  when determining whether we need to load vmlinux btf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates libbpf to load vmlinux BTF for any struct_ops map.', 'keywords': 'libbpf,vmlinux,struct_ops', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5e3f5b81de80c98338bcb47c233aebefee5a4801
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5e3f5b81de80c98338bcb47c233aebefee5a4801
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1701997453
  Commit Message:
    Merge tag 'net-6.7-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 "Including fixes from bpf and netfilter.

  Current release - regressions:

   - veth: fix packet segmentation in veth_convert_skb_to_xdp_buff

  Current release - new code bugs:

   - tcp: assorted fixes to the new Auth Option support

  Older releases - regressions:

   - tcp: fix mid stream window clamp

   - tls: fix incorrect splice handling

   - ipv4: ip_gre: handle skb_pull() failure in ipgre_xmit()

   - dsa: mv88e6xxx: restore USXGMII support for 6393X

   - arcnet: restore support for multiple Sohard Arcnet cards

  Older releases - always broken:

   - tcp: do not accept ACK of bytes we never sent

   - require admin privileges to receive packet traces via netlink

   - packet: move reference count in packet_sock to atomic_long_t

   - bpf:
      - fix incorrect branch offset comparison with cpu=v4
      - fix prog_array_map_poke_run map poke update

   - netfilter:
      - three fixes for crashes on bad admin commands
      - xt_owner: fix race accessing sk->sk_socket
  Parent Hashes: 9ace34a8e446c1a566f3b0a3e0c4c483987e39a6 b0a930e8d90caf66a94fee7a9d0b8472bc3e7561
  Refs:  TOCTOU null-deref
      - nf_tables: fix 'exist' matching on bigendian arches

   - leds: netdev: fix RTNL handling to prevent potential deadlock

   - eth: tg3: prevent races in error/reset handling

   - eth: r8169: fix rtl8125b PAUSE storm when suspended

   - eth: r8152: improve reset and surprise removal handling

   - eth: hns: fix race between changing features and sending

   - eth: nfp: fix sleep in atomic for bonding offload"

* tag 'net-6.7-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (62 commits)
  vsock/virtio: fix "comparison of distinct pointer types lacks a cast" warning
  net/smc: fix missing byte order conversion in CLC handshake
  net: dsa: microchip: provide a list of valid protocols for xmit handler
  drop_monitor: Require 'CAP_SYS_ADMIN' when joining "events" group
  psample: Require 'CAP_NET_ADMIN' when joining "packets" group
  bpf: sockmap

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges networking and eBPF related fixes for various issues in recent and older Linux kernel releases.', 'keywords': 'networking, eBPF, fixes', 'commit_classification': "It's a bug fix.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', "It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 483af466e4ee3326d150877ea0626e95c67a395e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 483af466e4ee3326d150877ea0626e95c67a395e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701986294
  Commit Message:
    Merge branch 'bpf-fix-verification-of-indirect-var-off-stack-access'

Andrei Matei says:

====================
bpf: fix verification of indirect var-off stack access

V4 to V5:
  - split the test into a separate patch

V3 to V4:
  - include a test per Eduard's request
  - target bpf-next per Alexei's request (patches didn't change)

V2 to V3:
  - simplify checks for max_off (don't call
    check_stack_slot_within_bounds for it)
  - append a commit to protect against overflow in the addition of the
    register and the offset

V1 to V2:
  - fix max_off calculation for access size = 0
====================

Link: https://lore.kernel.org/r/20231207041150.229139-1-andreimatei1@gmail.com
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>

  Parent Hashes: 2146f7fe6e028a3905f0658a1a0d8ef7c115d6c1 1d38a9ee81570c4bd61f557832dead4d6f816760
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes the verification of indirect variable offset stack access in the eBPF verifier.', 'keywords': 'verification, indirect, stack', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1d38a9ee81570c4bd61f557832dead4d6f816760
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1d38a9ee81570c4bd61f557832dead4d6f816760
  Author Name: Andrei Matei
  Author Email: andreimatei1@gmail.com
  Commit Date: 1701986290
  Commit Message:
    bpf: Guard stack limits against 32bit overflow

This patch promotes the arithmetic around checking stack bounds to be
done in the 64-bit domain
  Parent Hashes: e28bd359bcc8eb849aaa475f3c3f9705fba26d6e
  Refs:  instead of the current 32bit. The arithmetic
implies adding together a 64-bit register with a int offset. The
register was checked to be below 1<<29 when it was variable

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates stack checks to use 64-bit arithmetic to prevent potential overflow issues.', 'keywords': 'stack,overflow,arithmetic', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e28bd359bcc8eb849aaa475f3c3f9705fba26d6e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e28bd359bcc8eb849aaa475f3c3f9705fba26d6e
  Author Name: Andrei Matei
  Author Email: andreimatei1@gmail.com
  Commit Date: 1701986282
  Commit Message:
    bpf: Add verifier regression test for previous patch

Add a regression test for var-off zero-sized reads.

Signed-off-by: Andrei Matei <andreimatei1@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20231207041150.229139-3-andreimatei1@gmail.com

  Parent Hashes: a833a17aeac73b33f79433d7cee68d5cafd71e4f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a regression test for zero-sized reads in the BPF verifier.', 'keywords': 'verifier,regression,test', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a833a17aeac73b33f79433d7cee68d5cafd71e4f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a833a17aeac73b33f79433d7cee68d5cafd71e4f
  Author Name: Andrei Matei
  Author Email: andreimatei1@gmail.com
  Commit Date: 1701986273
  Commit Message:
    bpf: Fix verification of indirect var-off stack access

This patch fixes a bug around the verification of possibly-zero-sized
stack accesses. When the access was done through a var-offset stack
pointer
  Parent Hashes: 2146f7fe6e028a3905f0658a1a0d8ef7c115d6c1
  Refs:  check_stack_access_within_bounds was incorrectly computing the
maximum-offset of a zero-sized read to be the same as the register's min
offset. Instead

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a bug in eBPF verifier for incorrect computation of max offset in indirect variable-offset stack access.', 'keywords': 'bug fix,verification,stack access', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bb9aefde5bbaf6c168c77ba635c155b4980c2287
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bb9aefde5bbaf6c168c77ba635c155b4980c2287
  Author Name: John Fastabend
  Author Email: john.fastabend@gmail.com
  Commit Date: 1701971549
  Commit Message:
    bpf: sockmap
  Parent Hashes: c5a595000e2677e865a39f249c056bc05d6e55fd
  Refs:  updating the sg structure should also update curr

Curr pointer should be updated when the sg structure is shifted.

Fixes: 7246d8ed4dcce ("bpf: helper to pop data from messages")
Signed-off-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/r/20231206232706.374377-3-john.fastabend@gmail.com
Signed-off-by: Jakub Kicinski <kuba@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes a curr pointer update issue in the sockmap when the sg structure is shifted.', 'keywords': 'sockmap,curr pointer,fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 4de75d3e6b0ece518a2e6e48c2716f1b223716d3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4de75d3e6b0ece518a2e6e48c2716f1b223716d3
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1701971010
  Commit Message:
    Merge tag 'nf-23-12-06' of git://git.kernel.org/pub/scm/linux/kernel/git/netfilter/nf

Pablo Neira Ayuso says:

====================
Netfilter fixes for net

The following patchset contains Netfilter fixes for net:

1) Incorrect nf_defrag registration for bpf link infra
  Parent Hashes: c85e5594b7456d55103fa1f1bde47cd4e002e7fb 7ae836a3d630e146b732fe8ef7d86b243748751f
  Refs:  from D. Wythe.

2) Skip inactive elements in pipapo set backend walk to avoid double
   deactivation

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge Netfilter fixes for net including nf_defrag registration update for BPF link infra.', 'keywords': 'Netfilter,BPF link,fixes', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c85e5594b7456d55103fa1f1bde47cd4e002e7fb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c85e5594b7456d55103fa1f1bde47cd4e002e7fb
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1701970344
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2023-12-06

We've added 4 non-merge commits during the last 6 day(s) which contain
a total of 7 files changed
  Parent Hashes: 0ad722bd9ee3a9bdfca9613148645e4c9b7f26cf ffed24eff9e0e52d8e74df1c18db8ed43b4666e6
  Refs:  185 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge commit for updates in bpf subsystem containing changes to 7 files with 185 insertions.', 'keywords': 'merge, bpf, updates', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2146f7fe6e028a3905f0658a1a0d8ef7c115d6c1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2146f7fe6e028a3905f0658a1a0d8ef7c115d6c1
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1701911841
  Commit Message:
    Merge branch 'allocate-bpf-trampoline-on-bpf_prog_pack'

Song Liu says:

====================
Allocate bpf trampoline on bpf_prog_pack

This set enables allocating bpf trampoline from bpf_prog_pack on x86. The
majority of this work
  Parent Hashes: 7065eefb38f16c91e9ace36fb7c873e4c9857c27 3ba026fca8786161b0c4d75be396e61d6816e0a1
  Refs:  however

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enables allocating BPF trampolines from bpf_prog_pack on x86.', 'keywords': 'BPF trampolines, bpf_prog_pack, x86', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3ba026fca8786161b0c4d75be396e61d6816e0a1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3ba026fca8786161b0c4d75be396e61d6816e0a1
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1701911841
  Commit Message:
    x86
  Parent Hashes: 26ef208c209a0e6eed8942a5d191b39dccfa6e38
  Refs:  bpf: Use bpf_prog_pack for bpf trampoline

There are three major changes here:

1. Add arch_[alloc|free]_bpf_trampoline based on bpf_prog_pack;
2. Let arch_prepare_bpf_trampoline handle ROX input image

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds arch_alloc and free_bpf_trampoline based on bpf_prog_pack and modifies arch_prepare_bpf_trampoline for ROX input image.', 'keywords': 'bpf_prog_pack, bpf_trampoline, ROX', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 26ef208c209a0e6eed8942a5d191b39dccfa6e38
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 26ef208c209a0e6eed8942a5d191b39dccfa6e38
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1701911840
  Commit Message:
    bpf: Use arch_bpf_trampoline_size

Instead of blindly allocating PAGE_SIZE for each trampoline
  Parent Hashes: 96d1b7c081c0c96cbe8901045f4ff15a2e9974a2
  Refs:  check the size
of the trampoline with arch_bpf_trampoline_size(). This size is saved in
bpf_tramp_image->size

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize trampoline allocation in BPF by using arch_bpf_trampoline_size instead of default PAGE_SIZE.', 'keywords': 'trampoline, allocation, BPF', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 96d1b7c081c0c96cbe8901045f4ff15a2e9974a2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 96d1b7c081c0c96cbe8901045f4ff15a2e9974a2
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1701911840
  Commit Message:
    bpf: Add arch_bpf_trampoline_size()

This helper will be used to calculate the size of the trampoline before
allocating the memory.

arch_prepare_bpf_trampoline() for arm64 and riscv64 can use
arch_bpf_trampoline_size() to check the trampoline fits in the image.

OTOH
  Parent Hashes: 38b8b58ae776bf748bd1bd7a24c3fd1d10f76f45
  Refs:  arch_prepare_bpf_trampoline() for s390 has to call the JIT process
twice

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a helper to calculate trampoline size before memory allocation for arm64 and riscv64 architectures.', 'keywords': 'trampoline, arm64, riscv64', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 38b8b58ae776bf748bd1bd7a24c3fd1d10f76f45
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 38b8b58ae776bf748bd1bd7a24c3fd1d10f76f45
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1701911840
  Commit Message:
    bpf
  Parent Hashes: 82583daa2efc2e336962b231a46bad03a280b3e0
  Refs:  x86: Adjust arch_prepare_bpf_trampoline return value

x86's implementation of arch_prepare_bpf_trampoline() requires
BPF_INSN_SAFETY buffer space between end of program and image_end. OTOH

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adjust return value of arch_prepare_bpf_trampoline on x86 to ensure buffer space for BPF_INSN_SAFETY.', 'keywords': 'x86, bpf trampoline, buffer space', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 82583daa2efc2e336962b231a46bad03a280b3e0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 82583daa2efc2e336962b231a46bad03a280b3e0
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1701911840
  Commit Message:
    bpf: Add helpers for trampoline image management

As BPF trampoline of different archs moves from bpf_jit_[alloc|free]_exec()
to bpf_prog_pack_[alloc|free]()
  Parent Hashes: 7a3d9a159b178e87306a6e989071ed9a114a1a31
  Refs:  we need to use different _alloc

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add helpers for managing trampoline images in BPF by transitioning from bpf_jit to bpf_prog_pack.', 'keywords': 'trampoline, helpers, management', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7a3d9a159b178e87306a6e989071ed9a114a1a31
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7a3d9a159b178e87306a6e989071ed9a114a1a31
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1701911840
  Commit Message:
    bpf: Adjust argument names of arch_prepare_bpf_trampoline()

We are using "im" for "struct bpf_tramp_image" and "tr" for "struct
bpf_trampoline" in most of the code base. The only exception is the
prototype and fallback version of arch_prepare_bpf_trampoline(). Update
them to match the rest of the code base.

We mix "orig_call" and "func_addr" for the argument in different versions
of arch_prepare_bpf_trampoline(). s/orig_call/func_addr/g so they match.

Signed-off-by: Song Liu <song@kernel.org>
Acked-by: Ilya Leoshkevich <iii@linux.ibm.com>
Tested-by: Ilya Leoshkevich <iii@linux.ibm.com>  # on s390x
Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: https://lore.kernel.org/r/20231206224054.492250-3-song@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: f08a1c658257c73697a819c4ded3a84b6f0ead74
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update argument names in arch_prepare_bpf_trampoline() for consistency across code base.', 'keywords': 'argument, names, consistency', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f08a1c658257c73697a819c4ded3a84b6f0ead74
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f08a1c658257c73697a819c4ded3a84b6f0ead74
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1701911840
  Commit Message:
    bpf: Let bpf_prog_pack_free handle any pointer

Currently
  Parent Hashes: 7065eefb38f16c91e9ace36fb7c873e4c9857c27
  Refs:  bpf_prog_pack_free only can only free pointer to struct
bpf_binary_header

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhanced bpf_prog_pack_free to handle any pointer instead of just bpf_binary_header.', 'keywords': 'bpf_prog_pack_free,pointer,enhancement', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7065eefb38f16c91e9ace36fb7c873e4c9857c27
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7065eefb38f16c91e9ace36fb7c873e4c9857c27
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701902476
  Commit Message:
    bpf: rename MAX_BPF_LINK_TYPE into __MAX_BPF_LINK_TYPE for consistency

To stay consistent with the naming pattern used for similar cases in BPF
UAPI (__MAX_BPF_ATTACH_TYPE
  Parent Hashes: c35919dcce2855d68cf45ffa427b8ea78e4f7c68
  Refs:  etc)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Renamed MAX_BPF_LINK_TYPE to __MAX_BPF_LINK_TYPE for naming consistency.', 'keywords': 'rename, consistency, UAPI', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ffed24eff9e0e52d8e74df1c18db8ed43b4666e6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ffed24eff9e0e52d8e74df1c18db8ed43b4666e6
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1701898843
  Commit Message:
    selftests/bpf: Add test for early update in prog_array_map_poke_run

Adding test that tries to trigger the BUG_IN during early map update
in prog_array_map_poke_run function.

The idea is to share prog array map between thread that constantly
updates it and another one loading a program that uses that prog
array.

Eventually we will hit a place where the program is ok to be updated
(poke->tailcall_target_stable check) but the address is still not
registered in kallsyms
  Parent Hashes: 4b7de801606e504e69689df71475d27e35336fb3
  Refs:  so the bpf_arch_text_poke returns -EINVAL
and cause imbalance for the next tail call update check

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test to selftests/bpf for early map update in prog_array_map_poke_run function.', 'keywords': 'test, early update, prog_array_map_poke_run', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4b7de801606e504e69689df71475d27e35336fb3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4b7de801606e504e69689df71475d27e35336fb3
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1701898816
  Commit Message:
    bpf: Fix prog_array_map_poke_run map poke update

Lee pointed out issue found by syscaller [0] hitting BUG in prog array
map poke update in prog_array_map_poke_run function due to error value
returned from bpf_arch_text_poke function.

There's race window where bpf_arch_text_poke can fail due to missing
bpf program kallsym symbols
  Parent Hashes: e4d008d49a7135214e0ee70537405b6a069e3a3f
  Refs:  which is accounted for with check for
-EINVAL in that BUG_ON call.

The problem is that in such case we won't update the tail call jump
and cause imbalance for the next tail call update check which will
fail with -EBUSY in bpf_arch_text_poke.

I'm hitting following race during the program load:

  CPU 0                             CPU 1

  bpf_prog_load
    bpf_check
      do_misc_fixups
        prog_array_map_poke_track

                                    map_update_elem
                                      bpf_fd_array_map_update_elem
                                        prog_array_map_poke_run

                                          bpf_arch_text_poke returns -EINVAL

    bpf_prog_kallsyms_add

After bpf_arch_text_poke (CPU 1) fails to update the tail call jump

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a bug in prog_array_map_poke_run to handle race conditions during bpf_arch_text_poke failures.', 'keywords': 'bug,race condition,update', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c35919dcce2855d68cf45ffa427b8ea78e4f7c68
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c35919dcce2855d68cf45ffa427b8ea78e4f7c68
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1701885781
  Commit Message:
    Merge branch 'bpf-token-and-bpf-fs-based-delegation'

Andrii Nakryiko says:

====================
BPF token and BPF FS-based delegation

This patch set introduces an ability to delegate a subset of BPF subsystem
functionality from privileged system-wide daemon (e.g.
  Parent Hashes: 3aee2bf9c49be2144460d7267560232e3d45d367 36fb94944b35062db15ab3059f4123048cac658c
  Refs:  systemd or any other
container manager) through special mount options for userns-bound BPF FS to
a *trusted* unprivileged application. Trust is the key here. This
functionality is not about allowing unconditional unprivileged BPF usage.
Establishing trust

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit introduces BPF token and BPF FS-based delegation to unprivileged applications via trusted system-wide daemons.', 'keywords': 'BPF token, delegation, unprivileged', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 36fb94944b35062db15ab3059f4123048cac658c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 36fb94944b35062db15ab3059f4123048cac658c
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885780
  Commit Message:
    bpf
  Parent Hashes: dc5196fac40c2cb96330bcb98eef868a7fd225b3
  Refs: selinux: allocate bpf_security_struct per BPF token

Utilize newly added bpf_token_create/bpf_token_free LSM hooks to
allocate struct bpf_security_struct for each BPF token object in
SELinux. This just follows similar pattern for BPF prog and map.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231130185229.2688956-18-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Allocate bpf_security_struct for each BPF token in SELinux using new LSM hooks.', 'keywords': 'LSM hooks, BPF token, SELinux', 'commit_classification': "It's a security fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['cgroup like programs', 'LSM like programs']}
--------------------
--------------------
Processing Commit ID: dc5196fac40c2cb96330bcb98eef868a7fd225b3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dc5196fac40c2cb96330bcb98eef868a7fd225b3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885780
  Commit Message:
    selftests/bpf: add BPF token-enabled tests

Add a selftest that attempts to conceptually replicate intended BPF
token use cases inside user namespaced container.

Child process is forked. It is then put into its own userns and mountns.
Child creates BPF FS context object. This ensures child userns is
captured as the owning userns for this instance of BPF FS. Given setting
delegation mount options is privileged operation
  Parent Hashes: 1571740a9ba036f26cc5211a86021199987219e8
  Refs:  we ensure that child
cannot set them.

This context is passed back to privileged parent process through Unix
socket

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for BPF token use cases in user namespaced containers.', 'keywords': 'BPF token selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1571740a9ba036f26cc5211a86021199987219e8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1571740a9ba036f26cc5211a86021199987219e8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885780
  Commit Message:
    libbpf: add BPF token support to bpf_prog_load() API

Wire through token_fd into bpf_prog_load().

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231130185229.2688956-16-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 1a8df7fa00aac35aff9ef1941c5334b3a01d09e4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add BPF token support to bpf_prog_load API in libbpf.', 'keywords': 'BPF, token, libbpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1a8df7fa00aac35aff9ef1941c5334b3a01d09e4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1a8df7fa00aac35aff9ef1941c5334b3a01d09e4
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885780
  Commit Message:
    libbpf: add BPF token support to bpf_btf_load() API

Allow user to specify token_fd for bpf_btf_load() API that wraps
kernel's BPF_BTF_LOAD command. This allows loading BTF from unprivileged
process as long as it has BPF token allowing BPF_BTF_LOAD command
  Parent Hashes: 37891cea6699200fb83eae464ebe1c0f73040474
  Refs:  which
can be created and delegated by privileged process.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231130185229.2688956-15-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added support for BPF token in bpf_btf_load() API to allow BTF loading from unprivileged processes.', 'keywords': 'BPF token,BTF loading,unprivileged', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 37891cea6699200fb83eae464ebe1c0f73040474
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 37891cea6699200fb83eae464ebe1c0f73040474
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885780
  Commit Message:
    libbpf: add BPF token support to bpf_map_create() API

Add ability to provide token_fd for BPF_MAP_CREATE command through
bpf_map_create() API.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231130185229.2688956-14-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: ecd435143eb03611e25694141bf59d1c04ad5b9e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add BPF token support to the bpf_map_create() API in libbpf.', 'keywords': 'BPF, token, libbpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ecd435143eb03611e25694141bf59d1c04ad5b9e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ecd435143eb03611e25694141bf59d1c04ad5b9e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885780
  Commit Message:
    libbpf: add bpf_token_create() API

Add low-level wrapper API for BPF_TOKEN_CREATE command in bpf() syscall.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231130185229.2688956-13-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: d734ca7b33dbf60eb15dcf7c44f3da7073356777
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces a new API bpf_token_create() for BPF_TOKEN_CREATE command in the bpf() syscall.', 'keywords': 'API, bpf_token_create, syscall', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d734ca7b33dbf60eb15dcf7c44f3da7073356777
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d734ca7b33dbf60eb15dcf7c44f3da7073356777
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885780
  Commit Message:
    bpf
  Parent Hashes: 66d636d70a79c1d37e3eea67ab50969e6aaef983
  Refs: lsm: add BPF token LSM hooks

Wire up bpf_token_create and bpf_token_free LSM hooks

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added LSM hooks for BPF token creation and deletion in the BPF subsystem.', 'keywords': 'LSM hooks, BPF token, creation', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: 66d636d70a79c1d37e3eea67ab50969e6aaef983
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 66d636d70a79c1d37e3eea67ab50969e6aaef983
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885779
  Commit Message:
    bpf
  Parent Hashes: c3dd6e94df7193f33f45d33303f5e85afb2a72dc
  Refs: lsm: refactor bpf_map_alloc/bpf_map_free LSM hooks

Similarly to bpf_prog_alloc LSM hook

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor the bpf_map_alloc and bpf_map_free LSM hooks.', 'keywords': 'refactor, LSM hooks, bpf_map', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: c3dd6e94df7193f33f45d33303f5e85afb2a72dc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c3dd6e94df7193f33f45d33303f5e85afb2a72dc
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885779
  Commit Message:
    bpf
  Parent Hashes: 8062fb12de99b2da33754c6a3be1bfc30d9a35f4
  Refs: lsm: refactor bpf_prog_alloc/bpf_prog_free LSM hooks

Based on upstream discussion ([0])

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor Linux Security Module (LSM) hooks for bpf_prog_alloc and bpf_prog_free functions.', 'keywords': 'refactor,LSM hooks,bpf_prog_alloc', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: 8062fb12de99b2da33754c6a3be1bfc30d9a35f4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8062fb12de99b2da33754c6a3be1bfc30d9a35f4
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885779
  Commit Message:
    bpf: consistently use BPF token throughout BPF verifier logic

Remove remaining direct queries to perfmon_capable() and bpf_capable()
in BPF verifier logic and instead use BPF token (if available) to make
decisions about privileges.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231130185229.2688956-9-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 4cbb270e115bc197ff2046aeb54cc951666b16ec
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates the BPF verifier logic to consistently use BPF token instead of direct capability checks.', 'keywords': 'BPF verifier,BPF token,privileges', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4cbb270e115bc197ff2046aeb54cc951666b16ec
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4cbb270e115bc197ff2046aeb54cc951666b16ec
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885779
  Commit Message:
    bpf: take into account BPF token when fetching helper protos

Instead of performing unconditional system-wide bpf_capable() and
perfmon_capable() calls inside bpf_base_func_proto() function (and other
similar ones) to determine eligibility of a given BPF helper for a given
program
  Parent Hashes: e1cef620f598853a90f17701fcb1057a6768f7b8
  Refs:  use previously recorded BPF token during BPF_PROG_LOAD command
handling to inform the decision.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231130185229.2688956-8-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit optimizes BPF helper protos fetching by using recorded BPF token rather than system-wide capability checks.', 'keywords': 'BPF token, helper protos, bpf_capable', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e1cef620f598853a90f17701fcb1057a6768f7b8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e1cef620f598853a90f17701fcb1057a6768f7b8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885779
  Commit Message:
    bpf: add BPF token support to BPF_PROG_LOAD command

Add basic support of BPF token to BPF_PROG_LOAD. Wire through a set of
allowed BPF program types and attach types
  Parent Hashes: ee54b1a910e4d49c9a104f31ae3f5b979131adf8
  Refs:  derived from BPF FS at BPF
token creation time. Then make sure we perform bpf_token_capable()
checks everywhere where it's relevant.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231130185229.2688956-7-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add BPF token support to the BPF_PROG_LOAD command, allowing specific BPF program types and attach types.', 'keywords': 'BPF token,BPF_PROG_LOAD,support', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ee54b1a910e4d49c9a104f31ae3f5b979131adf8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ee54b1a910e4d49c9a104f31ae3f5b979131adf8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885779
  Commit Message:
    bpf: add BPF token support to BPF_BTF_LOAD command

Accept BPF token FD in BPF_BTF_LOAD command to allow BTF data loading
through delegated BPF token. BTF loading is a pretty straightforward
operation
  Parent Hashes: 688b7270b3cb75e8ac78123d719967db40336e5b
  Refs:  so as long as BPF token is created with allow_cmds granting
BPF_BTF_LOAD command

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added BPF token support to the BPF_BTF_LOAD command for delegated BTF data loading.', 'keywords': 'BPF token, BPF_BTF_LOAD, BTF data', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 688b7270b3cb75e8ac78123d719967db40336e5b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 688b7270b3cb75e8ac78123d719967db40336e5b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885779
  Commit Message:
    bpf: add BPF token support to BPF_MAP_CREATE command

Allow providing token_fd for BPF_MAP_CREATE command to allow controlled
BPF map creation from unprivileged process through delegated BPF token.

Wire through a set of allowed BPF map types to BPF token
  Parent Hashes: 4527358b76861dfd64ee34aba45d81648fbc8a61
  Refs:  derived from
BPF FS at BPF token creation time. This

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce BPF token support for controlled map creation by unprivileged processes using BPF_MAP_CREATE command.', 'keywords': 'BPF token support, map creation, unprivileged process', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['cgroup like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4527358b76861dfd64ee34aba45d81648fbc8a61
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4527358b76861dfd64ee34aba45d81648fbc8a61
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885779
  Commit Message:
    bpf: introduce BPF token object

Add new kind of BPF kernel object
  Parent Hashes: 40bba140c60fbb3ee8df6203c82fbd3de9f19d95
  Refs:  BPF token. BPF token is meant to
allow delegating privileged BPF functionality

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce BPF token object for delegating privileged BPF functionality.', 'keywords': 'BPF,token,delegating', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's an experimental feature that doesn't fit into existing categories."]}
--------------------
--------------------
Processing Commit ID: 40bba140c60fbb3ee8df6203c82fbd3de9f19d95
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 40bba140c60fbb3ee8df6203c82fbd3de9f19d95
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885778
  Commit Message:
    bpf: add BPF token delegation mount options to BPF FS

Add few new mount options to BPF FS that allow to specify that a given
BPF FS instance allows creation of BPF token (added in the next patch)
  Parent Hashes: 909fa05dd3c181e5b403912889057f7cdbf3906c
  Refs: 
and what sort of operations are allowed under BPF token. As such

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add new mount options to BPF FS for BPF token delegation.', 'keywords': 'BPF token, mount options, delegation', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 909fa05dd3c181e5b403912889057f7cdbf3906c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 909fa05dd3c181e5b403912889057f7cdbf3906c
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701885778
  Commit Message:
    bpf: align CAP_NET_ADMIN checks with bpf_capable() approach

Within BPF syscall handling code CAP_NET_ADMIN checks stand out a bit
compared to CAP_BPF and CAP_PERFMON checks. For the latter
  Parent Hashes: 3aee2bf9c49be2144460d7267560232e3d45d367
  Refs:  CAP_BPF or
CAP_PERFMON are checked first

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Align CAP_NET_ADMIN checks with bpf_capable() approach in BPF syscall handling.', 'keywords': 'CAP_NET_ADMIN,bpf_capable,BPF', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1834d62ae88500f37cba4439c3237aa85242272e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1834d62ae88500f37cba4439c3237aa85242272e
  Author Name: D. Wythe
  Author Email: alibuda@linux.alibaba.com
  Commit Date: 1701879266
  Commit Message:
    netfilter: bpf: fix bad registration on nf_defrag

We should pass a pointer to global_hook to the get_proto_defrag_hook()
instead of its value
  Parent Hashes: 54d4434da824460a190d547404530eff12a7907d
  Refs:  since the passed value won't be updated even if
the request module was loaded successfully.

Log:

[   54.915713] nf_defrag_ipv4 has bad registration
[   54.915779] WARNING: CPU: 3 PID: 6323 at net/netfilter/nf_bpf_link.c:62 get_proto_defrag_hook+0x137/0x160
[   54.915835] CPU: 3 PID: 6323 Comm: fentry Kdump: loaded Tainted: G            E      6.7.0-rc2+ #35
[   54.915839] Hardware name: QEMU Standard PC (i440FX + PIIX

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix bad registration in nf_defrag by passing a pointer to global_hook in netfilter BPF.', 'keywords': 'netfilter, registration, nf_defrag', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 3aee2bf9c49be2144460d7267560232e3d45d367
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3aee2bf9c49be2144460d7267560232e3d45d367
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1701812494
  Commit Message:
    Merge branch 'complete-bpf-verifier-precision-tracking-support-for-register-spills'

Andrii Nakryiko says:

====================
Complete BPF verifier precision tracking support for register spills

Add support to BPF verifier to track and support register spill/fill to/from
stack regardless if it was done through read-only R10 register (which is the
only form supported today)
  Parent Hashes: 5ffb260f754bf838507fe0c23d05254b33e2bf3d 064e0bea19b356c5d5f48a4549d80a3c03ce898b
  Refs:  or through a general register after copying R10
into it

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhances BPF verifier with precision tracking for register spills and fills to/from stack.', 'keywords': 'verifier, precision, register', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 064e0bea19b356c5d5f48a4549d80a3c03ce898b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 064e0bea19b356c5d5f48a4549d80a3c03ce898b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701812421
  Commit Message:
    selftests/bpf: validate precision logic in partial_stack_load_preserves_zeros

Enhance partial_stack_load_preserves_zeros subtest with detailed
precision propagation log checks. We know expect fp-16 to be spilled
  Parent Hashes: 18a433b62061e3d787bfc3e670fa711fecbd7cb4
  Refs: 
initially imprecise

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance BPF self-tests with precision propagation checks for partial stack load operations.', 'keywords': 'selftests, precision, stack', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 18a433b62061e3d787bfc3e670fa711fecbd7cb4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 18a433b62061e3d787bfc3e670fa711fecbd7cb4
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701812421
  Commit Message:
    bpf: track aligned STACK_ZERO cases as imprecise spilled registers

Now that precision backtracing is supporting register spill/fill to/from
stack
  Parent Hashes: add1cd7f22e61756987865ada9fe95cd86569025
  Refs:  there is another oportunity to be exploited here: minimizing
precise STACK_ZERO cases. With a simple code change we can rely on
initially imprecise register spill tracking for cases when register
spilled to stack was a known zero.

This is a very common case for initializing on the stack variables

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enhances register spill tracking for STACK_ZERO cases as imprecise spilled registers in eBPF.', 'keywords': 'aligned, STACK_ZERO, registers', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: add1cd7f22e61756987865ada9fe95cd86569025
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: add1cd7f22e61756987865ada9fe95cd86569025
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701812421
  Commit Message:
    selftests/bpf: validate zero preservation for sub-slot loads

Validate that 1-
  Parent Hashes: e322f0bcb8d371f4606eaf141c7f967e1a79bcb7
  Refs:  2-

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for validating zero preservation for sub-slot loads in eBPF.', 'keywords': 'selftests,zero preservation,sub-slot loads', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e322f0bcb8d371f4606eaf141c7f967e1a79bcb7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e322f0bcb8d371f4606eaf141c7f967e1a79bcb7
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701812421
  Commit Message:
    bpf: preserve constant zero when doing partial register restore

Similar to special handling of STACK_ZERO
  Parent Hashes: b33ceb6a3d2ee07fdd836373383a6d4783581324
  Refs:  when reading 1/2/4 bytes from
stack from slot that has register spilled into it and that register has
a constant value zero

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit ensures that constant zero values are maintained during partial register restorations in the eBPF verifier.', 'keywords': 'constant, register, restore', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b33ceb6a3d2ee07fdd836373383a6d4783581324
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b33ceb6a3d2ee07fdd836373383a6d4783581324
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701812420
  Commit Message:
    selftests/bpf: validate STACK_ZERO is preserved on subreg spill

Add tests validating that STACK_ZERO slots are preserved when slot is
partially overwritten with subregister spill.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231205184248.1502704-6-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: eaf18febd6ebc381aeb61543705148b3e28c7c47
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added tests to validate STACK_ZERO preservation on subregister spill in bpf selftests.', 'keywords': 'STACK_ZERO, subregister, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: eaf18febd6ebc381aeb61543705148b3e28c7c47
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: eaf18febd6ebc381aeb61543705148b3e28c7c47
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701812420
  Commit Message:
    bpf: preserve STACK_ZERO slots on partial reg spills

Instead of always forcing STACK_ZERO slots to STACK_MISC
  Parent Hashes: ab125ed3ec1c10ccc36bc98c7a4256ad114a3dae
  Refs:  preserve it in
situations where this is possible. E.g.

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit preserves STACK_ZERO slots during partial register spills in the eBPF verifier.', 'keywords': 'STACK_ZERO,register spills,verifier', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ab125ed3ec1c10ccc36bc98c7a4256ad114a3dae
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ab125ed3ec1c10ccc36bc98c7a4256ad114a3dae
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701812420
  Commit Message:
    bpf: fix check for attempt to corrupt spilled pointer

When register is spilled onto a stack as a 1/2/4-byte register
  Parent Hashes: 876301881c436bf38e83a2c0d276a24b642e4aab
  Refs:  we set
slot_type[BPF_REG_SIZE - 1] (plus potentially few more below it

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a check for attempts to corrupt spilled pointers in the eBPF verifier.', 'keywords': 'fix,corrupt,pointer', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 876301881c436bf38e83a2c0d276a24b642e4aab
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 876301881c436bf38e83a2c0d276a24b642e4aab
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701812420
  Commit Message:
    selftests/bpf: add stack access precision test

Add a new selftests that validates precision tracking for stack access
instruction
  Parent Hashes: 41f6f64e6999a837048b1bd13a2f8742964eca6b
  Refs:  using both r10-based and non-r10-based accesses. For
non-r10 ones we also make sure to have non-zero var_off to validate that
final stack offset is tracked properly in instruction history
information inside verifier.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231205184248.1502704-3-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest to validate precision tracking for stack access instructions in bpf verifier.', 'keywords': 'selftest, stack access, precision', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 41f6f64e6999a837048b1bd13a2f8742964eca6b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 41f6f64e6999a837048b1bd13a2f8742964eca6b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701812420
  Commit Message:
    bpf: support non-r10 register spill/fill to/from stack in precision tracking

Use instruction (jump) history to record instructions that performed
register spill/fill to/from stack
  Parent Hashes: 5ffb260f754bf838507fe0c23d05254b33e2bf3d
  Refs:  regardless if this was done through
read-only r10 register

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for non-r10 register spill/fill in precision tracking for bpf.', 'keywords': 'register, spill, precision', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5ffb260f754bf838507fe0c23d05254b33e2bf3d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5ffb260f754bf838507fe0c23d05254b33e2bf3d
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1701785484
  Commit Message:
    selftests/bpf: Make sure we trigger metadata kfuncs for dst 8080

xdp_metadata test is flaky sometimes:

  verify_xsk_metadata:FAIL:rx_hash_type unexpected rx_hash_type: actual 8 != expected 0

Where 8 means XDP_RSS_TYPE_L4_ANY and is exported from veth driver only when
'skb->l4_hash' condition is met. This makes me think that the program is
triggering again for some other packet.

Let's have a filter
  Parent Hashes: 5c399ae080ae507954f6f2efefc7349f8ed0e051
  Refs:  similar to xdp_hw_metadata

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix flaky xdp_metadata test by ensuring kfuncs are triggered for destination port 8080.', 'keywords': 'xdp_metadata,test,kfuncs', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 5c399ae080ae507954f6f2efefc7349f8ed0e051
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5c399ae080ae507954f6f2efefc7349f8ed0e051
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1701785330
  Commit Message:
    xsk: Add missing SPDX to AF_XDP TX metadata documentation

Not sure how I missed that. I even acknowledged it explicitly
in the changelog [0]. Add the tag for real now.

  [0] https://lore.kernel.org/bpf/20231127190319.1190813-1-sdf@google.com/

Fixes: 11614723af26 ("xsk: Add option to calculate TX checksum in SW")
Suggested-by: Simon Horman <horms@kernel.org>
Signed-off-by: Stanislav Fomichev <sdf@google.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20231204174231.3457705-1-sdf@google.com

  Parent Hashes: 1b4c7e20bfd6cfe0efbc51756d930a9406d41ea7
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added missing SPDX license tag to AF_XDP TX metadata documentation.', 'keywords': 'SPDX, AF_XDP, documentation', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 1b4c7e20bfd6cfe0efbc51756d930a9406d41ea7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1b4c7e20bfd6cfe0efbc51756d930a9406d41ea7
  Author Name: Dave Marchevsky
  Author Email: davemarchevsky@fb.com
  Commit Date: 1701785207
  Commit Message:
    selftests/bpf: Test bpf_kptr_xchg stashing of bpf_rb_root

There was some confusion amongst Meta sched_ext folks regarding whether
stashing bpf_rb_root - the tree itself
  Parent Hashes: ce3c49da11d77aa7d53cd549d308eb5f7fed8576
  Refs:  rather than a single node - was
supported. This patch adds a small test which demonstrates this
functionality: a local kptr with rb_root is created

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a test for stashing bpf_rb_root in bpf_kptr_xchg.', 'keywords': 'bpf_rb_root,test,stashing', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e4d008d49a7135214e0ee70537405b6a069e3a3f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e4d008d49a7135214e0ee70537405b6a069e3a3f
  Author Name: Yewon Choi
  Author Email: woni9911@gmail.com
  Commit Date: 1701780223
  Commit Message:
    xsk: Skip polling event check for unbound socket

In xsk_poll()
  Parent Hashes: dfce9cb3140592b886838e06f3e0c25fea2a9cae
  Refs:  checking available events and setting mask bits should
be executed only when a socket has been bound. Setting mask bits for
unbound socket is meaningless.

Currently

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit optimizes xsk_poll by skipping polling for unbound sockets.', 'keywords': 'xsk, polling, sockets', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: a931c6816078af3e306e0f444f492396ce40de31
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a931c6816078af3e306e0f444f492396ce40de31
  Author Name: JP Kobryn
  Author Email: inwardvessel@gmail.com
  Commit Date: 1701778724
  Commit Message:
    9p: prevent read overrun in protocol dump tracepoint

An out of bounds read can occur within the tracepoint 9p_protocol_dump. In
the fast assign
  Parent Hashes: 2cc14f52aeb78ce3f29677c2de1f06c0e91471ab
  Refs:  there is a memcpy that uses a constant size of 32 (macro
named P9_PROTO_DUMP_SZ). When the copy is invoked

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit prevents an out of bounds read in the 9p_protocol_dump tracepoint.', 'keywords': 'read overrun, tracepoint, 9p_protocol_dump', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: ce3c49da11d77aa7d53cd549d308eb5f7fed8576
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ce3c49da11d77aa7d53cd549d308eb5f7fed8576
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1701741027
  Commit Message:
    Merge branch 'bpf-fix-the-release-of-inner-map'

Hou Tao says:

====================
bpf: Fix the release of inner map

From: Hou Tao <houtao1@huawei.com>

Hi
  Parent Hashes: 153de60e8bfb4501e1462a2f74cb787c137b996c e3dd40828534a67931e0dd00fcd35846271fd4e8
  Refs: 

The patchset aims to fix the release of inner map in map array or map
htab. The release of inner map is different with normal map. For normal
map

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix the release mechanism for inner maps within map arrays and hash tables in eBPF.', 'keywords': 'release,inner map,fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e3dd40828534a67931e0dd00fcd35846271fd4e8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e3dd40828534a67931e0dd00fcd35846271fd4e8
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1701741027
  Commit Message:
    selftests/bpf: Test outer map update operations in syscall program

Syscall program is running with rcu_read_lock_trace being held
  Parent Hashes: 1624918be84a8bcc4f592e55635bc4fe4a96460a
  Refs:  so if
bpf_map_update_elem() or bpf_map_delete_elem() invokes
synchronize_rcu_tasks_trace() when operating on an outer map

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit tests outer map update operations in syscall programs under rcu_read_lock_trace conditions.', 'keywords': 'outer map update, syscall program, rcu_read_lock_trace', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1624918be84a8bcc4f592e55635bc4fe4a96460a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1624918be84a8bcc4f592e55635bc4fe4a96460a
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1701741027
  Commit Message:
    selftests/bpf: Add test cases for inner map

Add test cases to test the race between the destroy of inner map due to
map-in-map update and the access of inner map in bpf program. The
following 4 combinations are added:
(1) array map in map array + bpf program
(2) array map in map array + sleepable bpf program
(3) array map in map htab + bpf program
(4) array map in map htab + sleepable bpf program

Before applying the fixes
  Parent Hashes: af66bfd3c8538ed21cf72af18426fc4a408665cf
  Refs:  when running `./test_prog -a map_in_map`

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test cases to evaluate race conditions in inner map handling with map-in-map updates in bpf programs.', 'keywords': 'test cases, inner map, race', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: af66bfd3c8538ed21cf72af18426fc4a408665cf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: af66bfd3c8538ed21cf72af18426fc4a408665cf
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1701741026
  Commit Message:
    bpf: Optimize the free of inner map

When removing the inner map from the outer map
  Parent Hashes: 876673364161da50eed6b472d746ef88242b2368
  Refs:  the inner map will be
freed after one RCU grace period and one RCU tasks trace grace
period

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit optimizes the deallocation process for inner maps in eBPF by using RCU grace periods.', 'keywords': 'optimize, inner map, RCU', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 876673364161da50eed6b472d746ef88242b2368
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 876673364161da50eed6b472d746ef88242b2368
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1701741026
  Commit Message:
    bpf: Defer the free of inner map when necessary

When updating or deleting an inner map in map array or map htab
  Parent Hashes: 79d93b3c6ffd79abcd8e43345980aa1e904879c4
  Refs:  the map
may still be accessed by non-sleepable program or sleepable program.
However bpf_map_fd_put_ptr() decreases the ref-counter of the inner map
directly through bpf_map_put()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Defer free of inner map to ensure safe access by non-sleepable or sleepable programs.', 'keywords': 'defer, free, map', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 79d93b3c6ffd79abcd8e43345980aa1e904879c4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 79d93b3c6ffd79abcd8e43345980aa1e904879c4
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1701741026
  Commit Message:
    bpf: Set need_defer as false when clearing fd array during map free

Both map deletion operation
  Parent Hashes: 20c20bd11a0702ce4dc9300c3da58acf551d9725
  Refs:  map release and map free operation use
fd_array_map_delete_elem() to remove the element from fd array and
need_defer is always true in fd_array_map_delete_elem(). For the map
deletion operation and map release operation

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Set need_defer as false when clearing fd array during map deletion in eBPF.', 'keywords': 'need_defer,fd_array,map_deletion', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 20c20bd11a0702ce4dc9300c3da58acf551d9725
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 20c20bd11a0702ce4dc9300c3da58acf551d9725
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1701741026
  Commit Message:
    bpf: Add map and need_defer parameters to .map_fd_put_ptr()

map is the pointer of outer map
  Parent Hashes: 169410eba271afc9f0fb476d996795aa26770c6d
  Refs:  and need_defer needs some explanation.
need_defer tells the implementation to defer the reference release of
the passed element and ensure that the element is still alive before
the bpf program

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add map and need_defer parameters to .map_fd_put_ptr() to manage reference release in BPF programs.', 'keywords': 'map, need_defer, reference', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 169410eba271afc9f0fb476d996795aa26770c6d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 169410eba271afc9f0fb476d996795aa26770c6d
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1701741026
  Commit Message:
    bpf: Check rcu_read_lock_trace_held() before calling bpf map helpers

These three bpf_map_{lookup
  Parent Hashes: 153de60e8bfb4501e1462a2f74cb787c137b996c
  Refs: update

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add checks for RCU read lock before calling BPF map helpers to ensure safety.', 'keywords': 'RCU, lock, helper', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 153de60e8bfb4501e1462a2f74cb787c137b996c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 153de60e8bfb4501e1462a2f74cb787c137b996c
  Author Name: Colin Ian King
  Author Email: colin.i.king@gmail.com
  Commit Date: 1701701982
  Commit Message:
    selftests/bpf: Fix spelling mistake "get_signaure_size" -> "get_signature_size"

There is a spelling mistake in an ASSERT_GT message. Fix it.

Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20231204093940.2611954-1-colin.i.king@gmail.com

  Parent Hashes: 5bd90cdc65ef9ef5e13c9ff23620079db5c608a0
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed spelling mistake in selftests related to signature size assertion.', 'keywords': 'spelling, selftests, bpf', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 5bd90cdc65ef9ef5e13c9ff23620079db5c608a0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5bd90cdc65ef9ef5e13c9ff23620079db5c608a0
  Author Name: Andrei Matei
  Author Email: andreimatei1@gmail.com
  Commit Date: 1701701847
  Commit Message:
    bpf: Minor logging improvement

One place where we were logging a register was only logging the variable
part
  Parent Hashes: 90679706d486d3cb202d1b377a230f1f22edaf00
  Refs:  not also the fixed part.

Signed-off-by: Andrei Matei <andreimatei1@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20231204011248.2040084-1-andreimatei1@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit improves logging by including both variable and fixed parts of a register.', 'keywords': 'logging, register, improvement', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 90679706d486d3cb202d1b377a230f1f22edaf00
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 90679706d486d3cb202d1b377a230f1f22edaf00
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1701545811
  Commit Message:
    Merge branch 'bpf-verifier-retval-logic-fixes'

Andrii Nakryiko says:

====================
BPF verifier retval logic fixes

This patch set fixes BPF verifier logic around validating and enforcing return
values for BPF programs that have specific range of expected return values.
Both sync and async callbacks have similar logic and are fixes as well.
A few tests are added that would fail without the fixes in this patch set.

Also
  Parent Hashes: 6685aadcab8f170ae3e4d508989a85c1b8a58dba 81eff2e36481c5cf4a2ac906ae56c3fbd3e6f305
  Refs:  while at it

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses logic fixes for BPF verifier return value validation and enforcement, including tests.', 'keywords': 'BPF, verifier, fixes', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 81eff2e36481c5cf4a2ac906ae56c3fbd3e6f305
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 81eff2e36481c5cf4a2ac906ae56c3fbd3e6f305
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701545811
  Commit Message:
    bpf: simplify tnum output if a fully known constant

Emit tnum representation as just a constant if all bits are known.
Use decimal-vs-hex logic to determine exact format of emitted
constant value
  Parent Hashes: 5c19e1d05e9e71b42d8e779f41959254239709da
  Refs:  just like it's done for register range values.
For that move tnum_strn() to kernel/bpf/log.c to reuse decimal-vs-hex
determination logic and constants.

Acked-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231202175705.885270-12-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Simplify tnum output to emit constants directly if all bits are known.', 'keywords': 'tnum,constant,output', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5c19e1d05e9e71b42d8e779f41959254239709da
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5c19e1d05e9e71b42d8e779f41959254239709da
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701545811
  Commit Message:
    selftests/bpf: adjust global_func15 test to validate prog exit precision

Add one more subtest to  global_func15 selftest to validate that
verifier properly marks r0 as precise and avoids erroneous state pruning
of the branch that has return value outside of expected [0
  Parent Hashes: e02dea158ddaebe6e725be715e0009923b96ec8e
  Refs:  1] value.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231202175705.885270-11-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a subtest to global_func15 selftest for verifying exit precision in the eBPF verifier.', 'keywords': 'selftest, verifier, precision', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e02dea158ddaebe6e725be715e0009923b96ec8e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e02dea158ddaebe6e725be715e0009923b96ec8e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701545811
  Commit Message:
    selftests/bpf: validate async callback return value check correctness

Adjust timer/timer_ret_1 test to validate more carefully verifier logic
of enforcing async callback return value. This test will pass only if
return result is marked precise and read.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231202175705.885270-10-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: eabe518de533a4291996020977054a7a7b78c7d3
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improves selftests/bpf by validating correctness of async callback return value checks.', 'keywords': 'selftests,bpf,async', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: eabe518de533a4291996020977054a7a7b78c7d3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: eabe518de533a4291996020977054a7a7b78c7d3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701545811
  Commit Message:
    bpf: enforce precision of R0 on program/async callback return

Given we enforce a valid range for program and async callback return
value
  Parent Hashes: 0ef24c8dfae24a4b8aa2e92eac20faecdc5502e5
  Refs:  we must mark R0 as precise to avoid incorrect state pruning.

Fixes: b5dc0163d8fd ("bpf: precise scalar_value tracking")
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231202175705.885270-9-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enforces precision of R0 for program and async callback return values to prevent incorrect state pruning.', 'keywords': 'precision,R0,return', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0ef24c8dfae24a4b8aa2e92eac20faecdc5502e5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0ef24c8dfae24a4b8aa2e92eac20faecdc5502e5
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701545810
  Commit Message:
    bpf: unify async callback and program retval checks

Use common logic to verify program return values and async callback
return values. This allows to avoid duplication of any extra steps
necessary
  Parent Hashes: c871d0e00f0e8c207ce8ff89025e35cc49a8a3c3
  Refs:  like precision marking

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit unifies the logic for verifying program return values and async callback return values in bpf.', 'keywords': 'async,callback,retval', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c871d0e00f0e8c207ce8ff89025e35cc49a8a3c3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c871d0e00f0e8c207ce8ff89025e35cc49a8a3c3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701545810
  Commit Message:
    bpf: enforce precise retval range on program exit

Similarly to subprog/callback logic
  Parent Hashes: 60a6b2c78c62d0a99ccb7ad5edc950f79e56306a
  Refs:  enforce return value of BPF program
using more precise smin/smax range.

We need to adjust a bunch of tests due to a changed format of an error
message.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231202175705.885270-7-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enforces precise return value ranges for BPF program exits, requiring test adjustments.', 'keywords': 'precise, retval, tests', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 60a6b2c78c62d0a99ccb7ad5edc950f79e56306a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 60a6b2c78c62d0a99ccb7ad5edc950f79e56306a
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701545810
  Commit Message:
    selftests/bpf: add selftest validating callback result is enforced

BPF verifier expects callback subprogs to return values from specified
range (typically [0
  Parent Hashes: 8fa4ecd49b81ccd9d1d87f1c8b2260e218644878
  Refs:  1]). This requires that r0 at exit is both precise
(because we rely on specific value range) and is marked as read
(otherwise state comparison will ignore such register as unimportant).

Add a simple test that validates that all these conditions are enforced.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231202175705.885270-6-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a selftest for validating callback result enforcement in BPF verifier.', 'keywords': 'selftest, callback, verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8fa4ecd49b81ccd9d1d87f1c8b2260e218644878
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8fa4ecd49b81ccd9d1d87f1c8b2260e218644878
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701545810
  Commit Message:
    bpf: enforce exact retval range on subprog/callback exit

Instead of relying on potentially imprecise tnum representation of
expected return value range for callbacks and subprogs
  Parent Hashes: 0acd03a5bd188b0c501d285d938439618bd855c4
  Refs:  validate that
smin/smax range satisfy exact expected range of return values.

E.g.

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enforces exact return value range verification for subprograms and callbacks in BPF.', 'keywords': 'retval,subprog,callbacks', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0acd03a5bd188b0c501d285d938439618bd855c4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0acd03a5bd188b0c501d285d938439618bd855c4
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701545810
  Commit Message:
    bpf: enforce precision of R0 on callback return

Given verifier checks actual value
  Parent Hashes: 5fad52bee30414270104525e3a0266327a6e9d11
  Refs:  r0 has to be precise

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enforces precision checks on the return value of R0 in callbacks within the eBPF verifier.', 'keywords': 'precision,R0,verifier', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5fad52bee30414270104525e3a0266327a6e9d11
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5fad52bee30414270104525e3a0266327a6e9d11
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701545810
  Commit Message:
    bpf: provide correct register name for exception callback retval check

bpf_throw() is checking R1
  Parent Hashes: 45b5623f2d721c25d1a2fdc8c4600fb4b7b61c75
  Refs:  so let's report R1 in the log.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231202175705.885270-3-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix incorrect register name reported in bpf_throw() exception callback log.', 'keywords': 'register, exception, bpf_throw', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 45b5623f2d721c25d1a2fdc8c4600fb4b7b61c75
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 45b5623f2d721c25d1a2fdc8c4600fb4b7b61c75
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701545810
  Commit Message:
    bpf: rearrange bpf_func_state fields to save a bit of memory

It's a trivial rearrangement saving 8 bytes. We have 4 bytes of padding
at the end which can be filled with another field without increasing
struct bpf_func_state.

copy_func_state() logic remains correct without any further changes.

BEFORE
======
struct bpf_func_state {
        struct bpf_reg_state       regs[11];             /*     0  1320 */
        /* --- cacheline 20 boundary (1280 bytes) was 40 bytes ago --- */
        int                        callsite;             /*  1320     4 */
        u32                        frameno;              /*  1324     4 */
        u32                        subprogno;            /*  1328     4 */
        u32                        async_entry_cnt;      /*  1332     4 */
        bool                       in_callback_fn;       /*  1336     1 */

        /* XXX 7 bytes hole
  Parent Hashes: 6685aadcab8f170ae3e4d508989a85c1b8a58dba
  Refs:  try to pack */

        /* --- cacheline 21 boundary (1344 bytes) --- */
        struct tnum                callback_ret_range;   /*  1344    16 */
        bool                       in_async_callback_fn; /*  1360     1 */
        bool                       in_exception_callback_fn; /*  1361     1 */

        /* XXX 2 bytes hole

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Rearrange fields in struct bpf_func_state to optimize memory usage by eliminating padding.', 'keywords': 'rearrange,memory,optimization', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6685aadcab8f170ae3e4d508989a85c1b8a58dba
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6685aadcab8f170ae3e4d508989a85c1b8a58dba
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1701476463
  Commit Message:
    Merge branch 'bpf-file-verification-with-lsm-and-fsverity'

Song Liu says:

====================
bpf: File verification with LSM and fsverity

Changes v14 => v15:
1. Fix selftest build without CONFIG_FS_VERITY. (Alexei)
2. Add Acked-by from KP.

Changes v13 => v14:
1. Add "static" for bpf_fs_kfunc_set.
2. Add Acked-by from Christian Brauner.

Changes v12 => v13:
1. Only keep 4/9 through 9/9 of v12
  Parent Hashes: b6a3451e0847d5d70fb5fa2b2a80ab9f80bf2c7b 1030e9154258b54e3c7dc07c39e7b6dcf24bc3d2
  Refs:  as the first 3 patches already
   applied;
2. Use new macro __bpf_kfunc_[start|end]_defs().

Changes v11 => v12:
1. Fix typo (data_ptr => sig_ptr) in bpf_get_file_xattr().

Changes v10 => v11:
1. Let __bpf_dynptr_data() return const void *. (Andrii)
2. Optimize code to reuse output from __bpf_dynptr_size(). (Andrii)
3. Add __diag_ignore_all("-Wmissing-declarations") for kfunc definition.
4. Fix an off indentation. (Andrii)

Changes v9 => v10:
1. Remove WARN_ON_ONCE() from check_reg_const_str. (Alexei)

Changes v8 => v9:
1. Fix test_progs kfunc_dynptr_param/dynptr_data_null.

Changes v7 => v8:
1. Do not use bpf_dynptr_slice* in the kernel. Add __bpf_dynptr_data* and
   use them in ther kernel. (Andrii)

Changes v6 => v7:
1. Change "__const_str" annotation to "__str". (Alexei

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Integrate file verification using LSM and fsverity in the BPF subsystem, with multiple incremental fixes and optimizations.', 'keywords': 'file verification, LSM, fsverity', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1030e9154258b54e3c7dc07c39e7b6dcf24bc3d2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1030e9154258b54e3c7dc07c39e7b6dcf24bc3d2
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1701476463
  Commit Message:
    selftests/bpf: Add test that uses fsverity and xattr to sign a file

This selftests shows a proof of concept method to use BPF LSM to enforce
file signature. This test is added to verify_pkcs7_sig
  Parent Hashes: 341f06fdddf72cd60a10945152f69f0f1d614519
  Refs:  so that some
existing logic can be reused.

This file signature method uses fsverity

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest to demonstrate using BPF LSM for file signature enforcement with fsverity and xattr.', 'keywords': 'selftests,BPF LSM,fsverity', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: 341f06fdddf72cd60a10945152f69f0f1d614519
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 341f06fdddf72cd60a10945152f69f0f1d614519
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1701476463
  Commit Message:
    selftests/bpf: Add tests for filesystem kfuncs

Add selftests for two new filesystem kfuncs:
  1. bpf_get_file_xattr
  2. bpf_get_fsverity_digest

These tests simply make sure the two kfuncs work. Another selftest will be
added to demonstrate how to use these kfuncs to verify file signature.

CONFIG_FS_VERITY is added to selftests config. However
  Parent Hashes: 6b0ae4566aba566a2ab4a2de9c59ab3d7f4b43c2
  Refs:  this is not
sufficient to guarantee bpf_get_fsverity_digest works. This is because
fsverity need to be enabled at file system level (for example

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for two new filesystem kfuncs: bpf_get_file_xattr and bpf_get_fsverity_digest.', 'keywords': 'selftests,kfuncs,filesystem', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 6b0ae4566aba566a2ab4a2de9c59ab3d7f4b43c2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6b0ae4566aba566a2ab4a2de9c59ab3d7f4b43c2
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1701476463
  Commit Message:
    selftests/bpf: Sort config in alphabetic order

Move CONFIG_VSOCKETS up
  Parent Hashes: 0de267d9ec6574536ec5ea2f2242df5c92bcdd4b
  Refs:  so the CONFIGs are in alphabetic order.

Signed-off-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/r/20231129234417.856536-5-song@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit sorts the selftests/bpf configuration in alphabetical order by moving CONFIG_VSOCKETS up.', 'keywords': 'selftests, configuration, alphabetic', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 0de267d9ec6574536ec5ea2f2242df5c92bcdd4b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0de267d9ec6574536ec5ea2f2242df5c92bcdd4b
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1701476463
  Commit Message:
    Documentation/bpf: Add documentation for filesystem kfuncs

Add a brief introduction for file system kfuncs:

  bpf_get_file_xattr()
  bpf_get_fsverity_digest()

The documentation highlights the strategy to avoid recursions of these
kfuncs.

Signed-off-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/r/20231129234417.856536-4-song@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 67814c00de3161181cddd06c77aeaf86ac4cc584
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds documentation for filesystem kfuncs, specifically bpf_get_file_xattr() and bpf_get_fsverity_digest().', 'keywords': 'documentation, filesystem, kfuncs', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 67814c00de3161181cddd06c77aeaf86ac4cc584
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 67814c00de3161181cddd06c77aeaf86ac4cc584
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1701476463
  Commit Message:
    bpf
  Parent Hashes: ac9c05e0e453cfcab2866f6d28f257590e4f66e5
  Refs:  fsverity: Add kfunc bpf_get_fsverity_digest

fsverity provides fast and reliable hash of files

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add kfunc bpf_get_fsverity_digest for fast and reliable file hash in fsverity.', 'keywords': 'fsverity,kfunc,hash', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ac9c05e0e453cfcab2866f6d28f257590e4f66e5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ac9c05e0e453cfcab2866f6d28f257590e4f66e5
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1701476463
  Commit Message:
    bpf: Add kfunc bpf_get_file_xattr

It is common practice for security solutions to store tags/labels in
xattrs. To implement similar functionalities in BPF LSM
  Parent Hashes: b6a3451e0847d5d70fb5fa2b2a80ab9f80bf2c7b
  Refs:  add new kfunc
bpf_get_file_xattr().

The first use case of bpf_get_file_xattr() is to implement file
verifications with asymmetric keys. Specificially

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add new kfunc bpf_get_file_xattr to support file verifications with BPF LSM.', 'keywords': 'kfunc,xattr,LSM', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['LSM like programs']}
--------------------
--------------------
Processing Commit ID: dfce9cb3140592b886838e06f3e0c25fea2a9cae
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dfce9cb3140592b886838e06f3e0c25fea2a9cae
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1701474110
  Commit Message:
    bpf: Fix a verifier bug due to incorrect branch offset comparison with cpu=v4

Bpf cpu=v4 support is introduced in [1] and Commit 4cd58e9af8b9
("bpf: Support new 32bit offset jmp instruction") added support for new
32bit offset jmp instruction. Unfortunately
  Parent Hashes: 830139e7b6911266a84a77e1f18abf758995cc89
  Refs:  in function
bpf_adj_delta_to_off()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a verifier bug related to incorrect branch offset comparison for CPU version v4 in eBPF.', 'keywords': 'verifier, bug, offset', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b6a3451e0847d5d70fb5fa2b2a80ab9f80bf2c7b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b6a3451e0847d5d70fb5fa2b2a80ab9f80bf2c7b
  Author Name: Jeroen van Ingen Schenau
  Author Email: jeroen.vaningenschenau@novoserve.com
  Commit Date: 1701443565
  Commit Message:
    selftests/bpf: Fix erroneous bitmask operation

xdp_synproxy_kern.c is a BPF program that generates SYN cookies on
allowed TCP ports and sends SYNACKs to clients
  Parent Hashes: 15bc81212f593fbd7bda787598418b931842dc14
  Refs:  accelerating synproxy
iptables module.

Fix the bitmask operation when checking the status of an existing
conntrack entry within tcp_lookup() function. Do not AND with the bit
position number

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes an erroneous bitmask operation in the xdp_synproxy_kern BPF program for tracking TCP connections.', 'keywords': 'bitmask, synproxy, conntrack', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs', 'socket like programs']}
--------------------
--------------------
Processing Commit ID: 753c8608f3e579307493a63b9242667aee35a751
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 753c8608f3e579307493a63b9242667aee35a751
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1701392322
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2023-11-30

We've added 30 non-merge commits during the last 7 day(s) which contain
a total of 58 files changed
  Parent Hashes: 975f2d73a99f35b57ffa2ad7bff8562225cdcfcb f690ff9122d2ca8e38769f3bcf217bd3df681a36
  Refs:  1598 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merged branch 'for-netdev' containing multiple eBPF related changes into the main tree.", 'keywords': 'merge,eBPF,changes', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6172a5180fcc65170bfa2d49e55427567860f2a7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6172a5180fcc65170bfa2d49e55427567860f2a7
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1701386686
  Commit Message:
    Merge tag 'net-6.7-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 "Including fixes from bpf and wifi.

  Current release - regressions:

   - neighbour: fix __randomize_layout crash in struct neighbour

   - r8169: fix deadlock on RTL8125 in jumbo mtu mode

  Previous releases - regressions:

   - wifi:
       - mac80211: fix warning at station removal time
       - cfg80211: fix CQM for non-range use

   - tools: ynl-gen: fix unexpected response handling

   - octeontx2-af: fix possible buffer overflow

   - dpaa2: recycle the RX buffer only after all processing done

   - rswitch: fix missing dev_kfree_skb_any() in error path

  Previous releases - always broken:

   - ipv4: fix uaf issue when receiving igmp query packet

   - wifi: mac80211: fix debugfs deadlock at device removal time

   - bpf:
       - sockmap: af_unix stream sockets need to hold ref for pair sock
       - netdevsim: don't accept device bound programs

   - selftests: fix a char signedness issue

   - dsa: mv88e6xxx: fix marvell 6350 probe crash

   - octeontx2-pf: restore TC ingress police rules when interface is up

   - wangxun: fix memory leak on msix entry

   - ravb: keep reverse order of operations in ravb_remove()"

* tag 'net-6.7-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (51 commits)
  net: ravb: Keep reverse order of operations in ravb_remove()
  net: ravb: Stop DMA in case of failures on ravb_open()
  net: ravb: Start TX queues after HW initialization succeeded
  net: ravb: Make write access to CXR35 first before accessing other EMAC registers
  net: ravb: Use pm_runtime_resume_and_get()
  net: ravb: Check return value of reset_control_deassert()
  net: libwx: fix memory leak on msix entry
  ice: Fix VF Reset paths when interface in a failed over aggregate
  bpf
  Parent Hashes: e8f60209d6cf652a9cfda64371acea69f62770aa 777f245eec8152926b411e3d4f4545310f52cbed
  Refs:  sockmap: Add af_unix test with both sockets in map
  bpf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes for various components including bpf, wifi, and others.', 'keywords': 'networking, fixes, bpf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', 'other']}
--------------------
--------------------
Processing Commit ID: f9893fdac319bb2817e5e7818870264d7fb2eb02
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f9893fdac319bb2817e5e7818870264d7fb2eb02
  Author Name: Eric Dumazet
  Author Email: edumazet@google.com
  Commit Date: 1701368098
  Commit Message:
    net: page_pool: fix general protection fault in page_pool_unlist

syzbot was able to trigger a crash [1] in page_pool_unlist()

page_pool_list() only inserts a page pool into a netdev page pool list
if a netdev was set in params.

Even if the kzalloc() call in page_pool_create happens to initialize
pool->user.list
  Parent Hashes: 7e0222686316f5506e51182f02c1d83ecc34c471
  Refs:  I chose to be more explicit in page_pool_list()
adding one INIT_HLIST_NODE().

We could test in page_pool_unlist() if netdev was set

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix protection fault issue in page_pool_unlist caused by missing netdev initialization.', 'keywords': 'net, page_pool, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: f690ff9122d2ca8e38769f3bcf217bd3df681a36
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f690ff9122d2ca8e38769f3bcf217bd3df681a36
  Author Name: Yujie Liu
  Author Email: yujie.liu@intel.com
  Commit Date: 1701343053
  Commit Message:
    bpf/tests: Remove duplicate JSGT tests

It seems unnecessary that JSGT is tested twice (one before JSGE and one
after JSGE) since others are tested only once. Remove the duplicate JSGT
tests.

Fixes: 0bbaa02b4816 ("bpf/tests: Add tests to check source register zero-extension")
Signed-off-by: Yujie Liu <yujie.liu@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Johan Almbladh <johan.almbladh@anyfinetworks.com>
Link: https://lore.kernel.org/bpf/20231130034018.2144963-1-yujie.liu@intel.com

  Parent Hashes: b5145153a7f33e33f729ee67a11a8901a5609064
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes duplicate JSGT tests in the BPF test suite to avoid redundancy.', 'keywords': 'JSGT,tests,duplicate', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0d47fa5cc91b9c8a0c90833bf1705048b2295714
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0d47fa5cc91b9c8a0c90833bf1705048b2295714
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1701315604
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2023-11-30

We've added 5 non-merge commits during the last 7 day(s) which contain
a total of 10 files changed
  Parent Hashes: 83f2df9d66bc9e1e0dbd5d5586a701088f6a1d42 51354f700d400e55b329361e1386b04695e6e5c1
  Refs:  66 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge a series of bpf updates from the last 7 days with changes to 10 files.', 'keywords': 'merge, updates, bpf', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 51354f700d400e55b329361e1386b04695e6e5c1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 51354f700d400e55b329361e1386b04695e6e5c1
  Author Name: John Fastabend
  Author Email: john.fastabend@gmail.com
  Commit Date: 1701300325
  Commit Message:
    bpf
  Parent Hashes: 8866730aed5100f06d3d965c22f1c61f74942541
  Refs:  sockmap: Add af_unix test with both sockets in map

This adds a test where both pairs of a af_unix paired socket are put into a
BPF map. This ensures that when we tear down the af_unix pair we don't have
any issues on sockmap side with ordering and reference counting.

Signed-off-by: John Fastabend <john.fastabend@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>
Link: https://lore.kernel.org/bpf/20231129012557.95371-3-john.fastabend@gmail.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test for af_unix socket pairs in a BPF map to ensure no ordering or reference counting issues.', 'keywords': 'af_unix,bpf map,sockmap', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 8866730aed5100f06d3d965c22f1c61f74942541
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8866730aed5100f06d3d965c22f1c61f74942541
  Author Name: John Fastabend
  Author Email: john.fastabend@gmail.com
  Commit Date: 1701300316
  Commit Message:
    bpf
  Parent Hashes: 0bad281d0ecdf8391b0f42678b663336e7c3ceb0
  Refs:  sockmap: af_unix stream sockets need to hold ref for pair sock

AF_UNIX stream sockets are a paired socket. So sending on one of the pairs
will lookup the paired socket as part of the send operation. It is possible
however to put just one of the pairs in a BPF map. This currently increments
the refcnt on the sock in the sockmap to ensure it is not free'd by the
stack before sockmap cleans up its state and stops any skbs being sent/recv'd
to that socket.

But we missed a case. If the peer socket is closed it will be free'd by the
stack. However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix issue with AF_UNIX stream sockets in sockmap by handling peer socket closure.', 'keywords': 'AF_UNIX, sockmap, refcnt', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: b5145153a7f33e33f729ee67a11a8901a5609064
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b5145153a7f33e33f729ee67a11a8901a5609064
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1701298781
  Commit Message:
    Merge branch 'xsk-tx-metadata'

Stanislav Fomichev says:

====================
xsk: TX metadata

This series implements initial TX metadata (offloads) for AF_XDP.
See patch #2 for the main implementation and mlx5/stmmac ones for the
example on how to consume the metadata on the device side.

Starting with two types of offloads:
- request TX timestamp (and write it back into the metadata area)
- request TX checksum offload

Changes since v5:
- preserve xsk_tx_metadata flags across tx and completion by moving
  them out of 'request' union (Jesper)
- fix xdp_metadata checksum failure in big endian (Alexei)
- add SPDX to xdp-rx-metadata.rst (Simon)

v5: https://lore.kernel.org/bpf/20231102225837.1141915-1-sdf@google.com/

Performance (mlx5):

I've implemented a small xskgen tool to try to saturate single tx queue:
https://github.com/fomichev/xskgen/tree/master

Here are the performance numbers with some analysis.

1. Baseline. Running with commit eb62e6aef940 ("Merge branch 'bpf:
Support bpf_get_func_ip helper in uprobes'")
  Parent Hashes: 40d0eb0259ae77ace3e81d7454d1068c38bc95c2 60523115c1b10c8855492d84c1ba88af452e221c
  Refs:  nothing from this series:

- with 1400 bytes of payload: 98 gbps

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implements initial TX metadata offloads for AF_XDP including TX timestamp and checksum offloads.', 'keywords': 'TX metadata, offloads, AF_XDP', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 60523115c1b10c8855492d84c1ba88af452e221c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 60523115c1b10c8855492d84c1ba88af452e221c
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1701298781
  Commit Message:
    selftests/bpf: Add TX side to xdp_hw_metadata

When we get a packet on port 9091
  Parent Hashes: 12b4b7963d3cca253db3c31aa7611b988699e30f
  Refs:  we swap src/dst and send it out.
At this point we also request the timestamp and checksum offloads.

Checksum offload is verified by looking at the tcpdump on the other side.
The tool prints pseudo-header csum and the final one it expects.
The final checksum actually matches the incoming packets checksum
because we only flip the src/dst and don't change the payload.

Some other related changes:
- switched to zerocopy mode by default; new flag can be used to force
  old behavior
- request fixed tx_metadata_len headroom
- some other small fixes (umem size

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds TX functionality to xdp_hw_metadata selftests, including swapping src/dst and verifying checksum offloads.', 'keywords': 'xdp_hw_metadata,checksum,zerocopy', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 12b4b7963d3cca253db3c31aa7611b988699e30f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 12b4b7963d3cca253db3c31aa7611b988699e30f
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1701298781
  Commit Message:
    selftests/bpf: Convert xdp_hw_metadata to XDP_USE_NEED_WAKEUP

This is the recommended way to run AF_XDP
  Parent Hashes: 40808a237d9c8fcaa3eaeefe2ac59e4733907478
  Refs:  so let's use it in the test.

Also

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Convert selftests of xdp_hw_metadata to use XDP_USE_NEED_WAKEUP for AF_XDP.', 'keywords': 'selftests, xdp_hw_metadata, XDP_USE_NEED_WAKEUP', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 40808a237d9c8fcaa3eaeefe2ac59e4733907478
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 40808a237d9c8fcaa3eaeefe2ac59e4733907478
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1701298781
  Commit Message:
    selftests/bpf: Add TX side to xdp_metadata

Request TX timestamp and make sure it's not empty.
Request TX checksum offload (SW-only) and make sure it's resolved
to the correct one.

Signed-off-by: Stanislav Fomichev <sdf@google.com>
Link: https://lore.kernel.org/r/20231127190319.1190813-12-sdf@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: f6642de0c3e94d3ef6f44e127d11fcf4138873f7
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add transmission side handling to xdp_metadata selftests and verify TX timestamp and checksum offload.', 'keywords': 'xdp_metadata, TX timestamp, checksum offload', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: f6642de0c3e94d3ef6f44e127d11fcf4138873f7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f6642de0c3e94d3ef6f44e127d11fcf4138873f7
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1701298781
  Commit Message:
    selftests/bpf: Add csum helpers

Checksum helpers will be used to calculate pseudo-header checksum in
AF_XDP metadata selftests.

The helpers are mirroring existing kernel ones:
- csum_tcpudp_magic : IPv4 pseudo header csum
- csum_ipv6_magic : IPv6 pseudo header csum
- csum_fold : fold csum and do one's complement

Signed-off-by: Stanislav Fomichev <sdf@google.com>
Link: https://lore.kernel.org/r/20231127190319.1190813-11-sdf@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: df3ed0003ec4994ce8ed4818c435c481281df89e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add checksum helpers for AF_XDP metadata selftests in BPF.', 'keywords': 'checksum, helpers, AF_XDP', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 1347b419318d6afa1c86d7865d82ca0a6cdf30ce
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1347b419318d6afa1c86d7865d82ca0a6cdf30ce
  Author Name: Song Yoong Siang
  Author Email: yoong.siang.song@intel.com
  Commit Date: 1701298780
  Commit Message:
    net: stmmac: Add Tx HWTS support to XDP ZC

This patch enables transmit hardware timestamp support to XDP zero copy
via XDP Tx metadata framework.

This patchset is tested with tools/testing/selftests/bpf/xdp_hw_metadata
on Intel Tiger Lake platform. Below are the test steps and results.

Command on DUT:
sudo ./xdp_hw_metadata <interface name>
sudo hwstamp_ctl -i <interface name> -t 1 -r 1

Command on Link Partner:
echo -n xdp | nc -u -q1 <destination IPv4 addr> 9091

Result:
xsk_ring_cons__peek: 1
0x55bbbf08b6d0: rx_desc[2]->addr=8c100 addr=8c100 comp_addr=8c100 EoP
No rx_hash err=-95
rx_timestamp:  1677762688429141540 (sec:1677762688.4291)
HW RX-time:   1677762688429141540 (sec:1677762688.4291) delta to User RX-time sec:0.0003 (250.665 usec)
XDP RX-time:   1677762688429375597 (sec:1677762688.4294) delta to User RX-time sec:0.0000 (16.608 usec)
0x55bbbf08b6d0: ping-pong with csum=561c (want f488) csum_start=34 csum_offset=6
0x55bbbf08b6d0: complete tx idx=2 addr=2008
tx_timestamp:  1677762688431127273 (sec:1677762688.4311)
HW TX-complete-time:   1677762688431127273 (sec:1677762688.4311) delta to User TX-complete-time sec:0.0083 (8331.655 usec)
XDP RX-time:   1677762688429375597 (sec:1677762688.4294) delta to User TX-complete-time sec:0.0101 (10083.331 usec)
HW RX-time:   1677762688429141540 (sec:1677762688.4291) delta to HW TX-complete-time sec:0.0020 (1985.733 usec)
0x55bbbf08b6d0: complete rx idx=130 addr=8c100

Signed-off-by: Song Yoong Siang <yoong.siang.song@intel.com>
Signed-off-by: Stanislav Fomichev <sdf@google.com>
Link: https://lore.kernel.org/r/20231127190319.1190813-6-sdf@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: ec706a860eba99bf934d59f74b5db90af44e882e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds transmit hardware timestamp support to XDP zero copy in the stmmac driver.', 'keywords': 'XDP,timestamp,stmmac', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 40d0eb0259ae77ace3e81d7454d1068c38bc95c2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 40d0eb0259ae77ace3e81d7454d1068c38bc95c2
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701238530
  Commit Message:
    Merge branch 'selftests-bpf-use-pkg-config-to-determine-ld-flags'

Akihiko Odaki says:

====================
selftests/bpf: Use pkg-config to determine ld flags

When linking statically
  Parent Hashes: d4e7dd4842b190e87a5b7179a460f54b13da3ac4 8998a479fd96b0b209dcb2feb468eba7eddb4ddb
  Refs:  libraries may require other dependencies to be
included to ld flags. In particular

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Use pkg-config for determining ld flags in selftests/bpf linking process.', 'keywords': 'pkg-config, ld flags, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 8998a479fd96b0b209dcb2feb468eba7eddb4ddb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8998a479fd96b0b209dcb2feb468eba7eddb4ddb
  Author Name: Akihiko Odaki
  Author Email: akihiko.odaki@daynix.com
  Commit Date: 1701238529
  Commit Message:
    selftests/bpf: Use pkg-config for libelf

When linking statically
  Parent Hashes: 18f6f9de98d1d0f7040e6e6c39fce8939f55520f
  Refs:  libraries may require other dependencies to be
included to ld flags. In particular

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates selftests/bpf to use pkg-config for obtaining libelf dependencies when linking statically.', 'keywords': 'selftests,bpf,libelf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 18f6f9de98d1d0f7040e6e6c39fce8939f55520f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 18f6f9de98d1d0f7040e6e6c39fce8939f55520f
  Author Name: Akihiko Odaki
  Author Email: akihiko.odaki@daynix.com
  Commit Date: 1701238529
  Commit Message:
    selftests/bpf: Override PKG_CONFIG for static builds

A library may need to depend on additional archive files for static
builds so pkg-config should be instructed to list them.

Signed-off-by: Akihiko Odaki <akihiko.odaki@daynix.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20231125084253.85025-3-akihiko.odaki@daynix.com

  Parent Hashes: 2ce344b6891618063c0bebe22d9cdf9c086e0aa8
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Override PKG_CONFIG for static builds in selftests for enhanced library dependency handling.', 'keywords': 'static, PKG_CONFIG, selftests', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 2ce344b6891618063c0bebe22d9cdf9c086e0aa8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2ce344b6891618063c0bebe22d9cdf9c086e0aa8
  Author Name: Akihiko Odaki
  Author Email: akihiko.odaki@daynix.com
  Commit Date: 1701238529
  Commit Message:
    selftests/bpf: Choose pkg-config for the target

pkg-config is used to build sign-file executable. It should use the
library for the target instead of the host as it is called during tests.

Signed-off-by: Akihiko Odaki <akihiko.odaki@daynix.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20231125084253.85025-2-akihiko.odaki@daynix.com

  Parent Hashes: d4e7dd4842b190e87a5b7179a460f54b13da3ac4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates selftests to use pkg-config for the target during tests instead of the host.', 'keywords': 'selftests,pkg-config,target', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: d4e7dd4842b190e87a5b7179a460f54b13da3ac4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d4e7dd4842b190e87a5b7179a460f54b13da3ac4
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1701237010
  Commit Message:
    Merge branch 'bpf-add-link_info-support-for-uprobe-multi-link'

Jiri Olsa says:

====================
bpf: Add link_info support for uprobe multi link

hi
  Parent Hashes: cf9791631027a476f7cdb0e1b3ac6add16eff264 a7795698f8b6c48283fa4334eb313bc1350b2864
  Refs: 
this patchset adds support to get bpf_link_info details for
uprobe_multi links and adding support for bpftool link to
display them.

v4 changes:
  - move flags field up in bpf_uprobe_multi_link [Andrii]
  - include zero terminating byte in path_size [Andrii]
  - return d_path error directly [Yonghong]
  - use SEC(".probes") for semaphores [Yonghong]
  - fix ref_ctr_offsets leak in test [Yonghong]
  - other smaller fixes [Yonghong]

thanks

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhances bpf_link_info with support for uprobe multi-link and updates bpftool link display.', 'keywords': 'uprobe, bpf_link_info, bpftool', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: a7795698f8b6c48283fa4334eb313bc1350b2864
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a7795698f8b6c48283fa4334eb313bc1350b2864
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1701237009
  Commit Message:
    bpftool: Add support to display uprobe_multi links

Adding support to display details for uprobe_multi links
  Parent Hashes: 147c69307bcf67f1f01246f9acb794da9837f299
  Refs: 
both plain:

  # bpftool link -p
  ...
  24: uprobe_multi  prog 126
          uprobe.multi  path /home/jolsa/bpf/test_progs  func_cnt 3  pid 4143
          offset             ref_ctr_offset     cookies
          0xd1f88            0xf5d5a8           0xdead
          0xd1f8f            0xf5d5aa           0xbeef
          0xd1f96            0xf5d5ac           0xcafe

and json:

  # bpftool link -p
  [{
  ...
      }

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added support in bpftool to display details for uprobe_multi links.', 'keywords': 'bpftool, uprobe_multi, links', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 147c69307bcf67f1f01246f9acb794da9837f299
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 147c69307bcf67f1f01246f9acb794da9837f299
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1701237009
  Commit Message:
    selftests/bpf: Add link_info test for uprobe_multi link

Adding fill_link_info test for uprobe_multi link.

Setting up uprobes with bogus ref_ctr_offsets and cookie values
to test all the bpf_link_info::uprobe_multi fields.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Song Liu <song@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20231125193130.834322-6-jolsa@kernel.org

  Parent Hashes: 1703612885723869064f18e8816c6f3f87987748
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add and test link_info for uprobe_multi link in BPF selftests.', 'keywords': 'uprobe_multi, bpf_link_info, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 1703612885723869064f18e8816c6f3f87987748
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1703612885723869064f18e8816c6f3f87987748
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1701237009
  Commit Message:
    selftests/bpf: Use bpf_link__destroy in fill_link_info tests

The fill_link_info test keeps skeleton open and just creates
various links. We are wrongly calling bpf_link__detach after
each test to close them
  Parent Hashes: e56fdbfb06e26a7066b070967badef4148528df2
  Refs:  we need to call bpf_link__destroy.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Acked-by: Yafang Shao <laoar.shao@gmail.com>
Link: https://lore.kernel.org/bpf/20231125193130.834322-5-jolsa@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates fill_link_info tests to use bpf_link__destroy instead of bpf_link__detach to properly close links.', 'keywords': 'test update, bpf_link__destroy, fill_link_info', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e56fdbfb06e26a7066b070967badef4148528df2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e56fdbfb06e26a7066b070967badef4148528df2
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1701237009
  Commit Message:
    bpf: Add link_info support for uprobe multi link

Adding support to get uprobe_link details through bpf_link_info
interface.

Adding new struct uprobe_multi to struct bpf_link_info to carry
the uprobe_multi link details.

The uprobe_multi.count is passed from user space to denote size
of array fields (offsets/ref_ctr_offsets/cookies). The actual
array size is stored back to uprobe_multi.count (allowing user
to find out the actual array size) and array fields are populated
up to the user passed size.

All the non-array fields (path/count/flags/pid) are always set.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/bpf/20231125193130.834322-4-jolsa@kernel.org

  Parent Hashes: 4930b7f53a298533bc31d7540b6ea8b79a000331
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added support for uprobe multi link details in bpf_link_info interface.', 'keywords': 'uprobe,multi link,bpf_link_info', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 4930b7f53a298533bc31d7540b6ea8b79a000331
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4930b7f53a298533bc31d7540b6ea8b79a000331
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1701237009
  Commit Message:
    bpf: Store ref_ctr_offsets values in bpf_uprobe array

We will need to return ref_ctr_offsets values through link_info
interface in following change
  Parent Hashes: 48f0dfd8d3e212ab27b6db147ed10407ff6aaa88
  Refs:  so we need to keep them around.

Storing ref_ctr_offsets values directly into bpf_uprobe array.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/bpf/20231125193130.834322-3-jolsa@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit stores ref_ctr_offsets values in the bpf_uprobe array for future link_info interface usage.', 'keywords': 'ref_ctr_offsets, bpf_uprobe, link_info', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 48f0dfd8d3e212ab27b6db147ed10407ff6aaa88
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 48f0dfd8d3e212ab27b6db147ed10407ff6aaa88
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1701237009
  Commit Message:
    libbpf: Add st_type argument to elf_resolve_syms_offsets function

We need to get offsets for static variables in following changes
  Parent Hashes: cf9791631027a476f7cdb0e1b3ac6add16eff264
  Refs: 
so making elf_resolve_syms_offsets to take st_type value as argument
and passing it to elf_sym_iter_new.

Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/bpf/20231125193130.834322-2-jolsa@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add st_type argument to elf_resolve_syms_offsets in libbpf for static variable offsets.', 'keywords': 'libbpf, elf_resolve_syms_offsets, st_type', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a79d8ba734bdbd2574ad16dd1b96506e5f642c4a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a79d8ba734bdbd2574ad16dd1b96506e5f642c4a
  Author Name: Pedro Tammela
  Author Email: pctammela@mojatatu.com
  Commit Date: 1701137742
  Commit Message:
    selftests: tc-testing: remove buildebpf plugin

As tdc only tests loading/deleting and anything more complicated is
better left to the ebpf test suite
  Parent Hashes: cae0de45c8fd62612e1ee429134fd82c2c0e335e
  Refs:  provide a pre-compiled version of
'action.c' and don't bother compiling it in kselftests or on the fly
at all.

Cc: Davide Caratti <dcaratti@redhat.com>
Signed-off-by: Pedro Tammela <pctammela@mojatatu.com>
Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
Link: https://lore.kernel.org/r/20231124154248.315470-2-pctammela@mojatatu.com
Signed-off-by: Jakub Kicinski <kuba@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove buildebpf plugin from tc-testing as complex tasks are handled by the ebpf test suite.', 'keywords': 'buildebpf, tc-testing, selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: cf9791631027a476f7cdb0e1b3ac6add16eff264
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cf9791631027a476f7cdb0e1b3ac6add16eff264
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1701131024
  Commit Message:
    selftests/bpf: update test_offload to use new orphaned property

- filter orphaned programs by default
- when trying to query orphaned program
  Parent Hashes: 876843ce1e4897e8ceade50bfa3d9a4ec483abf3
  Refs:  don't expect bpftool failure

Cc: netdev@vger.kernel.org
Signed-off-by: Stanislav Fomichev <sdf@google.com>
Link: https://lore.kernel.org/r/20231127182057.1081138-2-sdf@google.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update selftests to use a new orphaned property for offload testing in BPF.', 'keywords': 'selftests, offload, orphaned', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 876843ce1e4897e8ceade50bfa3d9a4ec483abf3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 876843ce1e4897e8ceade50bfa3d9a4ec483abf3
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1701131018
  Commit Message:
    bpftool: mark orphaned programs during prog show

Commit ef01f4e25c17 ("bpf: restore the ebpf program ID for BPF_AUDIT_UNLOAD
and PERF_BPF_EVENT_PROG_UNLOAD") stopped removing program's id from
idr when the offloaded/bound netdev goes away. I was supposed to
take a look and check in [0]
  Parent Hashes: b16904fd9f01b580db357ef2b1cc9e86d89576c2
  Refs:  but apparently I did not.

Martin points out it might be useful to keep it that way for
observability sake

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "This commit marks orphaned programs during 'prog show' in bpftool for improved observability.", 'keywords': 'orphaned, bpftool, observability', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0bad281d0ecdf8391b0f42678b663336e7c3ceb0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0bad281d0ecdf8391b0f42678b663336e7c3ceb0
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1701130054
  Commit Message:
    netkit: Reject IFLA_NETKIT_PEER_INFO in netkit_change_link

The IFLA_NETKIT_PEER_INFO attribute can only be used during device
creation
  Parent Hashes: 75a442581d05edaee168222ffbe00d4389785636
  Refs:  but not via changelink callback. Hence reject it there.

Fixes: 35dfaad7188c ("netkit

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Reject inappropriate use of IFLA_NETKIT_PEER_INFO in netkit_change_link.', 'keywords': 'netkit, ifla_netkit_peer_info, changelink', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1638b11ef8156c8551f5aaa5799069633593c5fe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1638b11ef8156c8551f5aaa5799069633593c5fe
  Author Name: Athira Rajeev
  Author Email: atrajeev@linux.vnet.ibm.com
  Commit Date: 1701096513
  Commit Message:
    perf tools: Add perf binary dependent rule for shellcheck log in Makefile.perf

Add rule in new Makefile "tests/Makefile.tests" for running shellcheck
on shell test scripts. This automates below shellcheck into the build.

	$ for F in $(find tests/shell/ -perm -o=x -name '*.sh'); do shellcheck -S warning $F; done

Condition for shellcheck is added in Makefile.perf to avoid build
breakage in the absence of shellcheck binary. Update Makefile.perf to
contain new rule for "SHELLCHECK_TEST" which is for making shellcheck
test as a dependency on perf binary.

Added "tests/Makefile.tests" to run shellcheck on shellscripts in
tests/shell. The make rule "SHLLCHECK_RUN" ensures that
  Parent Hashes: 5ebe2f4bf0a8fe8cceb5664a7dea4c17e2cf8477
  Refs:  every time
during make

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a rule in Makefile to run shellcheck on shell scripts and prevent build breakage if the shellcheck binary is missing.', 'keywords': 'shellcheck, Makefile, tests', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b16904fd9f01b580db357ef2b1cc9e86d89576c2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b16904fd9f01b580db357ef2b1cc9e86d89576c2
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1701093219
  Commit Message:
    bpf: Fix a few selftest failures due to llvm18 change

With latest upstream llvm18
  Parent Hashes: e8a339b5235e294f29153149ea7cf26a9a87dbea
  Refs:  the following test cases failed:

  $ ./test_progs -j
  #13/2    bpf_cookie/multi_kprobe_link_api:FAIL
  #13/3    bpf_cookie/multi_kprobe_attach_api:FAIL
  #13      bpf_cookie:FAIL
  #77      fentry_fexit:FAIL
  #78/1    fentry_test/fentry:FAIL
  #78      fentry_test:FAIL
  #82/1    fexit_test/fexit:FAIL
  #82      fexit_test:FAIL
  #112/1   kprobe_multi_test/skel_api:FAIL
  #112/2   kprobe_multi_test/link_api_addrs:FAIL
  [...]
  #112     kprobe_multi_test:FAIL
  #356/17  test_global_funcs/global_func17:FAIL
  #356     test_global_funcs:FAIL

Further analysis shows llvm upstream patch [1] is responsible for the above
failures. For example

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes selftest failures caused by llvm18 changes in the Linux eBPF subsystem.', 'keywords': 'bpf,selftest,llvm18', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 75a442581d05edaee168222ffbe00d4389785636
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 75a442581d05edaee168222ffbe00d4389785636
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1701050426
  Commit Message:
    bpf: Add missed allocation hint for bpf_mem_cache_alloc_flags()

bpf_mem_cache_alloc_flags() may call __alloc() directly when there is no
free object in free list
  Parent Hashes: c0c6bde586c7dce82719b4ff32a2db6af9ee3d65
  Refs:  but it doesn't initialize the allocation hint
for the returned pointer. It may lead to bad memory dereference when
freeing the pointer

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add an allocation hint to bpf_mem_cache_alloc_flags() to prevent bad memory dereference.', 'keywords': 'allocation,memory,dereference', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e8a339b5235e294f29153149ea7cf26a9a87dbea
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e8a339b5235e294f29153149ea7cf26a9a87dbea
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700818806
  Commit Message:
    selftests/bpf: Add lazy global subprog validation tests

Add a few test that validate BPF verifier's lazy approach to validating
global subprogs.

We check that global subprogs that are called transitively through
another global subprog is validated.

We also check that invalid global subprog is not validated
  Parent Hashes: 2afae08c9dcb8ac648414277cec70c2fe6a34d9e
  Refs:  if it's not
called from the main program.

And we also check that main program is always validated first

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Add selftests for validating the BPF verifier's lazy approach to global subprog validation.", 'keywords': 'selftests,BPF verifier,validation', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2afae08c9dcb8ac648414277cec70c2fe6a34d9e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2afae08c9dcb8ac648414277cec70c2fe6a34d9e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700818806
  Commit Message:
    bpf: Validate global subprogs lazily

Slightly change BPF verifier logic around eagerness and order of global
subprog validation. Instead of going over every global subprog eagerly
and validating it before main (entry) BPF program is verified
  Parent Hashes: 491dd8edecbc5027ee317f3f1e7e9800fb66d88f
  Refs:  turn it
around. Validate main program first

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "This commit changes the BPF verifier's approach to validate global subprograms lazily, focusing first on the main program.", 'keywords': 'BPF verifier, global subprogs, validation', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 491dd8edecbc5027ee317f3f1e7e9800fb66d88f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 491dd8edecbc5027ee317f3f1e7e9800fb66d88f
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700818806
  Commit Message:
    bpf: Emit global subprog name in verifier logs

We have the name
  Parent Hashes: b8d78cb2e24d92352878a9f6525aec002c891528
  Refs:  instead of emitting just func#N to identify global
subprog

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Emit global subprogram names in eBPF verifier logs for better identification.', 'keywords': 'verifier,logs,subprog', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b8d78cb2e24d92352878a9f6525aec002c891528
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b8d78cb2e24d92352878a9f6525aec002c891528
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1700776181
  Commit Message:
    libbpf: Start v1.4 development cycle

Bump libbpf.map to v1.4.0 to start a new libbpf version cycle.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20231123000439.12025-1-eddyz87@gmail.com

  Parent Hashes: 45c226dde742a92e22dcd65b96bf7e02620a9c19
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Bump libbpf.map to v1.4.0 to start a new libbpf version cycle.', 'keywords': 'libbpf, version, development', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: c0c6bde586c7dce82719b4ff32a2db6af9ee3d65
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c0c6bde586c7dce82719b4ff32a2db6af9ee3d65
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1700773444
  Commit Message:
    netdevsim: Don't accept device bound programs

Commit 2b3486bc2d23 ("bpf: Introduce device-bound XDP programs") introduced
device-bound programs by largely reusing existing offloading infrastructure.
This changed the semantics of 'prog->aux->offload' a bit. Now
  Parent Hashes: d3fa86b1a7b4cdc4367acacea16b72e0a200b3d7
  Refs:  it's non-NULL
for both offloaded and device-bound programs.

Instead of looking at 'prog->aux->offload' let's call bpf_prog_is_offloaded
which should be true iff the program is offloaded and not merely device-bound.

Fixes: 2b3486bc2d23 ("bpf: Introduce device-bound XDP programs")
Reported-by: syzbot+44c2416196b7c607f226@syzkaller.appspotmail.com
Signed-off-by: Stanislav Fomichev <sdf@google.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Jakub Kicinski <kuba@kernel.org>
Cc: Dipendra Khadka <kdipendra88@gmail.com>
Link: https://lore.kernel.org/bpf/20231114045453.1816995-2-sdf@google.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit prevents netdevsim from accepting device-bound XDP programs by correctly checking program offloading status.', 'keywords': 'netdevsim, XDP program, offloading', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 45c226dde742a92e22dcd65b96bf7e02620a9c19
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 45c226dde742a92e22dcd65b96bf7e02620a9c19
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1700770858
  Commit Message:
    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Cross-merge networking fixes after downstream PR.

Conflicts:

drivers/net/ethernet/intel/ice/ice_main.c
  c9663f79cd82 ("ice: adjust switchdev rebuild path")
  7758017911a4 ("ice: restore timestamp configuration after device reset")
https://lore.kernel.org/all/20231121211259.3348630-1-anthony.l.nguyen@intel.com/

Adjacent changes:

kernel/bpf/verifier.c
  bb124da69c47 ("bpf: keep track of max number of bpf_loop callback iterations")
  5f99f312bd3b ("bpf: add register bounds sanity checks and sanitization")

Signed-off-by: Jakub Kicinski <kuba@kernel.org>

  Parent Hashes: c5b9f4792ea6b9abfcfb9486ba256f55e296aaa7 d3fa86b1a7b4cdc4367acacea16b72e0a200b3d7
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Cross-merge of networking fixes including changes to ethernet and eBPF verifier subsystems.', 'keywords': 'networking, merge, fixes', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d3fa86b1a7b4cdc4367acacea16b72e0a200b3d7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d3fa86b1a7b4cdc4367acacea16b72e0a200b3d7
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1700764813
  Commit Message:
    Merge tag 'net-6.7-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 "Including fixes from bpf.

  Current release - regressions:

   - Revert "net: r8169: Disable multicast filter for RTL8168H and
     RTL8107E"

   - kselftest: rtnetlink: fix ip route command typo

  Current release - new code bugs:

   - s390/ism: make sure ism driver implies smc protocol in kconfig

   - two build fixes for tools/net

  Previous releases - regressions:

   - rxrpc: couple of ACK/PING/RTT handling fixes

  Previous releases - always broken:

   - bpf: verify bpf_loop() callbacks as if they are called unknown
     number of times

   - improve stability of auto-bonding with Hyper-V

   - account BPF-neigh-redirected traffic in interface statistics

  Misc:

   - net: fill in some more MODULE_DESCRIPTION()s"

* tag 'net-6.7-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (58 commits)
  tools: ynl: fix duplicate op name in devlink
  tools: ynl: fix header path for nfsd
  net: ipa: fix one GSI register field width
  tls: fix NULL deref on tls_sw_splice_eof() with empty record
  net: axienet: Fix check for partial TX checksum
  vsock/test: fix SEQPACKET message bounds test
  i40e: Fix adding unsupported cloud filters
  ice: restore timestamp configuration after device reset
  ice: unify logic for programming PFINT_TSYN_MSK
  ice: remove ptp_tx ring parameter flag
  amd-xgbe: propagate the correct speed and duplex status
  amd-xgbe: handle the corner-case during tx completion
  amd-xgbe: handle corner-case during sfp hotplug
  net: veth: fix ethtool stats reporting
  octeontx2-pf: Fix ntuple rule creation to direct packet to VF with higher Rx queue than its PF
  net: usb: qmi_wwan: claim interface 4 for ZTE MF290
  Revert "net: r8169: Disable multicast filter for RTL8168H and RTL8107E"
  net/smc: avoid data corruption caused by decline
  nfc: virtual_ncidev: Add variable to check if ndev is running
  dpll: Fix potential msg memleak when genlmsg_put_reply failed
  ...

  Parent Hashes: 9b6de136b5f0158c60844f85286a593cb70fb364 39f04b1406b23fcc129a67e70d6205d5a7322f38
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes that include BPF-related improvements and bug resolutions.', 'keywords': 'networking,BPF,fixes', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 53475287dad9b314ef477fc9a27b48b6999da053
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 53475287dad9b314ef477fc9a27b48b6999da053
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1700618000
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2023-11-21

We've added 85 non-merge commits during the last 12 day(s) which contain
a total of 63 files changed
  Parent Hashes: 340bf2dbb11b4d2d44055fa5851d75fd335e3d45 3cbbf9192abdc9183eb215b5e8b06c778e5c2214
  Refs:  4464 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merge branch 'for-netdev' with updates from bpf-next into the main project, including 85 non-merge commits affecting 63 files.", 'keywords': 'merge, bpf-next, non-merge', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b2d66643dcf2c395207f9373c624e0ab32166e57
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b2d66643dcf2c395207f9373c624e0ab32166e57
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1700610571
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2023-11-21

We've added 19 non-merge commits during the last 4 day(s) which contain
a total of 18 files changed
  Parent Hashes: 495ec91b48e489afefb2ad714f0d9b68c3016c6c acb12c859ac7c36d6d7632280fd1e263188cb07f
  Refs:  1043 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merged 'for-netdev' tag containing 19 non-merge commits into the bpf tree.", 'keywords': 'merge, commits, bpf', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3cbbf9192abdc9183eb215b5e8b06c778e5c2214
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3cbbf9192abdc9183eb215b5e8b06c778e5c2214
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700592326
  Commit Message:
    Merge branch 'selftests-bpf-update-multiple-prog_tests-to-use-assert_-macros'

Yuran Pereira says:

====================
selftests/bpf: Update multiple prog_tests to use ASSERT_ macros

Multiple files/programs in `tools/testing/selftests/bpf/prog_tests/` still
heavily use the `CHECK` macro
  Parent Hashes: 57b97ecb40caeb116c22451bbdaaa9a1d12c0b43 3ece0e85f679c23d2a5128993846c58a2f5f890e
  Refs:  even when better `ASSERT_` alternatives are
available.

As it was already pointed out by Yonghong Song [1] in the bpf selftests the use
of the ASSERT_* series of macros is preferred over the CHECK macro.

This patchset replaces the usage of `CHECK(` macros to the equivalent `ASSERT_`
family of macros in the following prog_tests:
- bind_perm.c
- bpf_obj_id.c
- bpf_tcp_ca.c
- vmlinux.c

[1] https://lore.kernel.org/lkml/0a142924-633c-44e6-9a92-2dc019656bf2@linux.dev

Changes in v3:
- Addressed the following points mentioned by Yonghong Song
- Improved `bpf_map_lookup_elem` assertion in bpf_tcp_ca.
- Replaced assertion introduced in v2 with one that checks `thread_ret`
  instead of `pthread_join`. This ensures that `server`'s return value
  (thread_ret) is the one being checked

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update multiple BPF selftests to use ASSERT_ macros instead of CHECK.', 'keywords': 'selftests, ASSERT_ macros, prog_tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3ece0e85f679c23d2a5128993846c58a2f5f890e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3ece0e85f679c23d2a5128993846c58a2f5f890e
  Author Name: Yuran Pereira
  Author Email: yuran.pereira@hotmail.com
  Commit Date: 1700592326
  Commit Message:
    selftests/bpf: Replaces the usage of CHECK calls for ASSERTs in vmlinux

vmlinux.c uses the `CHECK` calls even though the use of ASSERT_ series
of macros is preferred in the bpf selftests.

This patch replaces all `CHECK` calls for equivalent `ASSERT_`
macro calls.

Signed-off-by: Yuran Pereira <yuran.pereira@hotmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/GV1PR10MB6563ED1023A2A3AEF30BDA5DE8BBA@GV1PR10MB6563.EURPRD10.PROD.OUTLOOK.COM

  Parent Hashes: f125d09b99fc0ee43f865810390f10b8f23a2c98
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit replaces CHECK calls with ASSERT macros in vmlinux bpf selftests.', 'keywords': 'bpf,selftests,macros', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f125d09b99fc0ee43f865810390f10b8f23a2c98
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f125d09b99fc0ee43f865810390f10b8f23a2c98
  Author Name: Yuran Pereira
  Author Email: yuran.pereira@hotmail.com
  Commit Date: 1700592324
  Commit Message:
    selftests/bpf: Replaces the usage of CHECK calls for ASSERTs in bpf_obj_id

bpf_obj_id uses the `CHECK` calls even though the use of
ASSERT_ series of macros is preferred in the bpf selftests.

This patch replaces all `CHECK` calls for equivalent `ASSERT_`
macro calls.

Signed-off-by: Yuran Pereira <yuran.pereira@hotmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/GV1PR10MB65639AA3A10B4BBAA79952C7E8BBA@GV1PR10MB6563.EURPRD10.PROD.OUTLOOK.COM

  Parent Hashes: 3ec1114a97457398077e45b231d502d1cc30439d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replaced CHECK calls with ASSERT macros in bpf_obj_id selftests for better consistency.', 'keywords': 'selftests,ASSERT,macros', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3ec1114a97457398077e45b231d502d1cc30439d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3ec1114a97457398077e45b231d502d1cc30439d
  Author Name: Yuran Pereira
  Author Email: yuran.pereira@hotmail.com
  Commit Date: 1700592183
  Commit Message:
    selftests/bpf: Replaces the usage of CHECK calls for ASSERTs in bind_perm

bind_perm uses the `CHECK` calls even though the use of
ASSERT_ series of macros is preferred in the bpf selftests.

This patch replaces all `CHECK` calls for equivalent `ASSERT_`
macro calls.

Signed-off-by: Yuran Pereira <yuran.pereira@hotmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/GV1PR10MB656314F467E075A106CA02BFE8BBA@GV1PR10MB6563.EURPRD10.PROD.OUTLOOK.COM

  Parent Hashes: b0e2a0395312f4e53504ae84eeb5902e5518d1d7
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replaced CHECK calls with ASSERT_ macros in the bind_perm bpf selftests.', 'keywords': 'ASSERT, CHECK, selftests', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b0e2a0395312f4e53504ae84eeb5902e5518d1d7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b0e2a0395312f4e53504ae84eeb5902e5518d1d7
  Author Name: Yuran Pereira
  Author Email: yuran.pereira@hotmail.com
  Commit Date: 1700592183
  Commit Message:
    selftests/bpf: Replaces the usage of CHECK calls for ASSERTs in bpf_tcp_ca

bpf_tcp_ca uses the `CHECK` calls even though the use of
ASSERT_ series of macros is preferred in the bpf selftests.

This patch replaces all `CHECK` calls for equivalent `ASSERT_`
macro calls.

Signed-off-by: Yuran Pereira <yuran.pereira@hotmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/GV1PR10MB6563F180C0F2BB4F6CFA5130E8BBA@GV1PR10MB6563.EURPRD10.PROD.OUTLOOK.COM

  Parent Hashes: 57b97ecb40caeb116c22451bbdaaa9a1d12c0b43
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactors selftests by replacing CHECK calls with ASSERT macros in bpf_tcp_ca.', 'keywords': 'selftests, ASSERT, bpf_tcp_ca', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 29b8e94dcf2575c17541f843741ee96691ff1ded
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 29b8e94dcf2575c17541f843741ee96691ff1ded
  Author Name: Yang Jihong
  Author Email: yangjihong1@huawei.com
  Commit Date: 1700589758
  Commit Message:
    perf lock contention: Fix a build error on 32-bit

Fix a build error on 32-bit system:

  util/bpf_lock_contention.c: In function 'lock_contention_get_name':
  util/bpf_lock_contention.c:253:50: error: format '%lu' expects argument of type 'long unsigned int'
  Parent Hashes: a6dda77a752d918b35ef4a3f94e6b8c7d7ba4a73
  Refs:  but argument 4 has type 'u64 {aka long long unsigned int}' [-Werror=format=]
     snprintf(name_buf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix a build error related to format specifier on 32-bit systems in perf lock contention code.', 'keywords': 'build,error,32-bit', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: acb12c859ac7c36d6d7632280fd1e263188cb07f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: acb12c859ac7c36d6d7632280fd1e263188cb07f
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1700534201
  Commit Message:
    Merge branch 'verify-callbacks-as-if-they-are-called-unknown-number-of-times'

Eduard Zingerman says:

====================
verify callbacks as if they are called unknown number of times

This series updates verifier logic for callback functions handling.
Current master simulates callback body execution exactly once
  Parent Hashes: fcb905d831336ee0a67dd953837a904173cf7390 57e2a52deeb12ab84c15c6d0fb93638b5b94001b
  Refs: 
which leads to verifier not detecting unsafe programs like below:

    static int unsafe_on_zero_iter_cb(__u32 idx

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update verifier logic to handle callbacks as being called an unknown number of times.', 'keywords': 'verifier,callbacks,logic', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 57e2a52deeb12ab84c15c6d0fb93638b5b94001b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 57e2a52deeb12ab84c15c6d0fb93638b5b94001b
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1700534200
  Commit Message:
    selftests/bpf: check if max number of bpf_loop iterations is tracked

Check that even if bpf_loop() callback simulation does not converge to
a specific state
  Parent Hashes: bb124da69c47dd98d69361ec13244ece50bec63e
  Refs:  verification could proceed via "brute force"
simulation of maximal number of callback calls.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20231121020701.26440-12-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test to verify if the maximum number of bpf_loop iterations is correctly tracked in selftests.', 'keywords': 'bpf_loop,selftests,iterations', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bb124da69c47dd98d69361ec13244ece50bec63e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bb124da69c47dd98d69361ec13244ece50bec63e
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1700534200
  Commit Message:
    bpf: keep track of max number of bpf_loop callback iterations

In some cases verifier can't infer convergence of the bpf_loop()
iteration. E.g. for the following program:

    static int cb(__u32 idx
  Parent Hashes: 9f3330aa644d6d979eb064c46e85c62d4b4eac75
  Refs:  struct num_context* ctx)
    {
        ctx->i++;
        return 0;
    }

    SEC("?raw_tp")
    int prog(void *_)
    {
        struct num_context ctx = { .i = 0 };
        __u8 choice_arr[2] = { 0

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enhances the verifier to track the maximum number of iterations for bpf_loop callbacks.', 'keywords': 'bpf,verifier,loop', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9f3330aa644d6d979eb064c46e85c62d4b4eac75
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9f3330aa644d6d979eb064c46e85c62d4b4eac75
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1700534200
  Commit Message:
    selftests/bpf: test widening for iterating callbacks

A test case to verify that imprecise scalars widening is applied to
callback entering state
  Parent Hashes: cafe2c21508a38cdb3ed22708842e957b2572c3e
  Refs:  when callback call is simulated repeatedly.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20231121020701.26440-10-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a test case to ensure imprecise scalars are widened in callback entering states during repeated simulations.', 'keywords': 'test,widening,callback', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cafe2c21508a38cdb3ed22708842e957b2572c3e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cafe2c21508a38cdb3ed22708842e957b2572c3e
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1700534200
  Commit Message:
    bpf: widening for callback iterators

Callbacks are similar to open coded iterators
  Parent Hashes: 958465e217dbf5fc6677d42d8827fb3073d86afd
  Refs:  so add imprecise
widening logic for callback body processing. This makes callback based
loops behave identically to open coded iterators

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add imprecise widening logic for callback iterators in eBPF to match open coded iterators.', 'keywords': 'callback,iterators,widening', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 958465e217dbf5fc6677d42d8827fb3073d86afd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 958465e217dbf5fc6677d42d8827fb3073d86afd
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1700534200
  Commit Message:
    selftests/bpf: tests for iterating callbacks

A set of test cases to check behavior of callback handling logic
  Parent Hashes: ab5cfac139ab8576fb54630d4cca23c3e690ee90
  Refs: 
check if verifier catches the following situations:
- program not safe on second callback iteration;
- program not safe on zero callback iterations;
- infinite loop inside a callback.

Verify that callback logic works for bpf_loop

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds test cases for verifying callback handling logic in selftests for BPF.', 'keywords': 'test cases, callback, iteration', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ab5cfac139ab8576fb54630d4cca23c3e690ee90
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ab5cfac139ab8576fb54630d4cca23c3e690ee90
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1700534144
  Commit Message:
    bpf: verify callbacks as if they are called unknown number of times

Prior to this patch callbacks were handled as regular function calls
  Parent Hashes: 58124a98cb8eda69d248d7f1de954c8b2767c945
  Refs: 
execution of callback body was modeled exactly once.
This patch updates callbacks handling logic as follows:
- introduces a function push_callback_call() that schedules callback
  body verification in env->head stack;
- updates prepare_func_exit() to reschedule callback body verification
  upon BPF_EXIT;
- as calls to bpf_*_iter_next()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update callback handling in eBPF to verify as called unknown number of times.', 'keywords': 'callbacks, verification, bpf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 58124a98cb8eda69d248d7f1de954c8b2767c945
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 58124a98cb8eda69d248d7f1de954c8b2767c945
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1700534015
  Commit Message:
    bpf: extract setup_func_entry() utility function

Move code for simulated stack frame creation to a separate utility
function. This function would be used in the follow-up change for
callbacks handling.

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20231121020701.26440-6-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 683b96f9606ab7308ffb23c46ab43cecdef8a241
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors code by extracting simulated stack frame creation to a separate utility function setup_func_entry.', 'keywords': 'utility function, stack frame, refactoring', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 683b96f9606ab7308ffb23c46ab43cecdef8a241
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 683b96f9606ab7308ffb23c46ab43cecdef8a241
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1700534015
  Commit Message:
    bpf: extract __check_reg_arg() utility function

Split check_reg_arg() into two utility functions:
- check_reg_arg() operating on registers from current verifier state;
- __check_reg_arg() operating on a specific set of registers passed as
  a parameter;

The __check_reg_arg() function would be used by a follow-up change for
callbacks handling.

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20231121020701.26440-5-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: f40bfd1679446b22d321e64a1fa98b7d07d2be08
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactors check_reg_arg into two functions for better handling of register arguments in the eBPF verifier.', 'keywords': 'utility function,refactor,verifier', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f40bfd1679446b22d321e64a1fa98b7d07d2be08
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f40bfd1679446b22d321e64a1fa98b7d07d2be08
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1700534015
  Commit Message:
    selftests/bpf: fix bpf_loop_bench for new callback verification scheme

This is a preparatory change. A follow-up patch "bpf: verify callbacks
as if they are called unknown number of times" changes logic for
callbacks handling. While previously callbacks were verified as a
single function call
  Parent Hashes: 87eb0152bcc102ecbda866978f4e54db5a3be1ef
  Refs:  new scheme takes into account that callbacks
could be executed unknown number of times.

This has dire implications for bpf_loop_bench:

    SEC("fentry/" SYS_PREFIX "sys_getpgid")
    int benchmark(void *ctx)
    {
            for (int i = 0; i < 1000; i++) {
                    bpf_loop(nr_loops

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes bpf_loop_bench for the new callback verification mechanism in selftests.', 'keywords': 'selftests, bpf, callback', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 87eb0152bcc102ecbda866978f4e54db5a3be1ef
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 87eb0152bcc102ecbda866978f4e54db5a3be1ef
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1700534015
  Commit Message:
    selftests/bpf: track string payload offset as scalar in strobemeta

This change prepares strobemeta for update in callbacks verification
logic. To allow bpf_loop() verification converge when multiple
callback iterations are considered:
- track offset inside strobemeta_payload->payload directly as scalar
  value;
- at each iteration make sure that remaining
  strobemeta_payload->payload capacity is sufficient for execution of
  read_{map
  Parent Hashes: 977bc146d4eb7070118d8a974919b33bb52732b4
  Refs: str}_var functions;
- make sure that offset is tracked as unbound scalar between
  iterations

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Track scalar offset of string payload in strobemeta for bpf_loop() iteration verification.', 'keywords': 'strobemeta,scalar,offset', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 977bc146d4eb7070118d8a974919b33bb52732b4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 977bc146d4eb7070118d8a974919b33bb52732b4
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1700534015
  Commit Message:
    selftests/bpf: track tcp payload offset as scalar in xdp_synproxy

This change prepares syncookie_{tc
  Parent Hashes: fcb905d831336ee0a67dd953837a904173cf7390
  Refs: xdp} for update in callbakcs
verification logic. To allow bpf_loop() verification converge when
multiple callback itreations are considered:
- track offset inside TCP payload explicitly

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Track TCP payload offset as a scalar in xdp_synproxy to improve bpf_loop() verification logic.', 'keywords': 'tcp,payload,offset', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs', 'tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 57b97ecb40caeb116c22451bbdaaa9a1d12c0b43
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 57b97ecb40caeb116c22451bbdaaa9a1d12c0b43
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700513644
  Commit Message:
    selftests/bpf: reduce verboseness of reg_bounds selftest logs

Reduce verboseness of test_progs' output in reg_bounds set of tests with
two changes.

First
  Parent Hashes: 3e124aa6cb5e74308f5997f63ebd3e5badb5c4e7
  Refs:  instead of each different operator (<

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Reduce verbosity of reg_bounds selftest logs in bpf selftests.', 'keywords': 'reduce verbosity,selftests,reg_bounds', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fcb905d831336ee0a67dd953837a904173cf7390
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fcb905d831336ee0a67dd953837a904173cf7390
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1700504192
  Commit Message:
    Merge branch 'bpf_redirect_peer fixes'

Daniel Borkmann says:

====================
This fixes bpf_redirect_peer stats accounting for veth and netkit
  Parent Hashes: 76df934c6d5f5c93ba7a0112b1818620ddc10b19 adfeae2d243d9e5b83d094af481d189156b11779
  Refs: 
and adds tstats in the first place for the latter. Utilise indirect
call wrapper for bpf_redirect_peer

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes bpf_redirect_peer stats accounting and adds tstats for veth and netkit.', 'keywords': 'bpf_redirect_peer,veth,tstats', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: adfeae2d243d9e5b83d094af481d189156b11779
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: adfeae2d243d9e5b83d094af481d189156b11779
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1700504116
  Commit Message:
    selftests/bpf: Add netkit to tc_redirect selftest

Extend the existing tc_redirect selftest to also cover netkit devices
for exercising the bpf_redirect_peer() code paths
  Parent Hashes: eee82da79f036bb49ff80d3088b9530e3c2e57eb
  Refs:  so that we have both
veth as well as netkit covered

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extend tc_redirect selftest to include netkit devices for bpf_redirect_peer() path coverage.', 'keywords': 'tc_redirect,selftests,netkit', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: eee82da79f036bb49ff80d3088b9530e3c2e57eb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: eee82da79f036bb49ff80d3088b9530e3c2e57eb
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1700504116
  Commit Message:
    selftests/bpf: De-veth-ize the tc_redirect test case

No functional changes to the test case
  Parent Hashes: 2c225425704078282e152ba692649237f78b3d7a
  Refs:  but just renaming various functions

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Renamed functions in the tc_redirect test case without functional changes.', 'keywords': 'selftests,bpf,tc_redirect', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 2c225425704078282e152ba692649237f78b3d7a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2c225425704078282e152ba692649237f78b3d7a
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1700504116
  Commit Message:
    bpf
  Parent Hashes: 024ee930cb3c9ae49e4266aee89cfde0ebb407e1
  Refs:  netkit: Add indirect call wrapper for fetching peer dev

ndo_get_peer_dev is used in tcx BPF fast path

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add indirect call wrapper for fetching peer device in tcx BPF fast path.', 'keywords': 'indirect, call, peer', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 024ee930cb3c9ae49e4266aee89cfde0ebb407e1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 024ee930cb3c9ae49e4266aee89cfde0ebb407e1
  Author Name: Peilin Ye
  Author Email: peilin.ye@bytedance.com
  Commit Date: 1700504116
  Commit Message:
    bpf: Fix dev's rx stats for bpf_redirect_peer traffic

Traffic redirected by bpf_redirect_peer() (used by recent CNIs like Cilium)
is not accounted for in the RX stats of supported devices (that is
  Parent Hashes: 6f2684bf2b4460c84d0d34612a939f78b96b03fc
  Refs:  veth
and netkit)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes RX stats accounting for traffic redirected by bpf_redirect_peer on supported devices.', 'keywords': 'bpf_redirect_peer,RX stats,traffic', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 6f2684bf2b4460c84d0d34612a939f78b96b03fc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6f2684bf2b4460c84d0d34612a939f78b96b03fc
  Author Name: Peilin Ye
  Author Email: peilin.ye@bytedance.com
  Commit Date: 1700504116
  Commit Message:
    veth: Use tstats per-CPU traffic counters

Currently veth devices use the lstats per-CPU traffic counters
  Parent Hashes: ae1658272c6491a31ac968e39882fc569f312ac3
  Refs:  which only
cover TX traffic. veth_get_stats64() actually populates RX stats of a veth
device from its peer's TX counters

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve veth device traffic statistics by using tstats per-CPU counters for RX and TX.', 'keywords': 'veth, per-CPU, traffic', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 3e124aa6cb5e74308f5997f63ebd3e5badb5c4e7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3e124aa6cb5e74308f5997f63ebd3e5badb5c4e7
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1700423032
  Commit Message:
    Merge branch 'bpf-kernel-bpf-task_iter-c-don-t-abuse-next_thread'

Oleg Nesterov says:

====================
bpf: kernel/bpf/task_iter.c: don't abuse next_thread()

Compile tested.

Every lockless usage of next_thread() was wrong
  Parent Hashes: 16b3129e14bf2e7505512568b11c437c840a0c19 ac8148d957f50434411a0c15a2e4f352b5bb4ff2
  Refs:  bpf/task_iter.c is
the last user and is no exception.

====================

Link: https://lore.kernel.org/r/20231114163211.GA874@redhat.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes incorrect lockless usage of next_thread() in bpf/task_iter.c.', 'keywords': 'bpf,task_iter,next_thread', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ac8148d957f50434411a0c15a2e4f352b5bb4ff2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ac8148d957f50434411a0c15a2e4f352b5bb4ff2
  Author Name: Oleg Nesterov
  Author Email: oleg@redhat.com
  Commit Date: 1700423024
  Commit Message:
    bpf: bpf_iter_task_next: use next_task(kit->task) rather than next_task(kit->pos)

This looks more clear and simplifies the code. While at it
  Parent Hashes: 5a34f9dabd9aa567e2d37e1aa27a67f80acfaa1c
  Refs:  remove the
unnecessary initialization of pos/task at the start of bpf_iter_task_new().

Note that we can even kill kit->task

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Simplifies bpf_iter_task_next by using next_task(kit->task) and removing unnecessary initialization.', 'keywords': 'simplifies,next_task,initialization', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 5a34f9dabd9aa567e2d37e1aa27a67f80acfaa1c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5a34f9dabd9aa567e2d37e1aa27a67f80acfaa1c
  Author Name: Oleg Nesterov
  Author Email: oleg@redhat.com
  Commit Date: 1700423024
  Commit Message:
    bpf: bpf_iter_task_next: use __next_thread() rather than next_thread()

Lockless use of next_thread() should be avoided
  Parent Hashes: 2d1618054f25e11c44d189dbff4a60342a4cfb4b
  Refs:  kernel/bpf/task_iter.c
is the last user and the usage is wrong.

bpf_iter_task_next() can loop forever

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit replaces next_thread() with __next_thread() in bpf_iter_task_next to prevent infinite loops.', 'keywords': 'bpf_iter_task_next, next_thread, lockless', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2d1618054f25e11c44d189dbff4a60342a4cfb4b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2d1618054f25e11c44d189dbff4a60342a4cfb4b
  Author Name: Oleg Nesterov
  Author Email: oleg@redhat.com
  Commit Date: 1700423024
  Commit Message:
    bpf: task_group_seq_get_next: use __next_thread() rather than next_thread()

Lockless use of next_thread() should be avoided
  Parent Hashes: 16b3129e14bf2e7505512568b11c437c840a0c19
  Refs:  kernel/bpf/task_iter.c
is the last user and the usage is wrong.

task_group_seq_get_next() can return the group leader twice if it races
with mt-thread exec which changes the group->leader's pid.

Change the main loop to use __next_thread()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit changes task_group_seq_get_next to use __next_thread() for thread iterating in BPF task iterator.', 'keywords': 'next_thread, lockless, task_group_seq_get_next', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 16b3129e14bf2e7505512568b11c437c840a0c19
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 16b3129e14bf2e7505512568b11c437c840a0c19
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1700336400
  Commit Message:
    Merge branch 'bpf-verifier-log-improvements'

Andrii Nakryiko says:

====================
BPF verifier log improvements

This patch set moves a big chunk of verifier log related code from gigantic
verifier.c file into more focused kernel/bpf/log.c. This is not essential to
the rest of functionality in this patch set
  Parent Hashes: ff8867af01daa7ea770bebf5f91199b7434b74e5 46862ee854b4f5a315d63b677ca3af14a89aefeb
  Refs:  so I can undo it

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor verifier logs into separate log.c file for better code organization.', 'keywords': 'verifier, log, refactor', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 46862ee854b4f5a315d63b677ca3af14a89aefeb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 46862ee854b4f5a315d63b677ca3af14a89aefeb
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700336399
  Commit Message:
    bpf: emit frameno for PTR_TO_STACK regs if it differs from current one

It's possible to pass a pointer to parent's stack to child subprogs. In
such case verifier state output is ambiguous not showing whether
register container a pointer to "current" stack
  Parent Hashes: 0f8dbdbc641b45a5fa31d497f9fc83ffe1174fa3
  Refs:  belonging to current
subprog (frame)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Emit frame number for PTR_TO_STACK registers when it differs from the current frame in eBPF verifier.', 'keywords': 'PTR_TO_STACK,verifier,frame', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0f8dbdbc641b45a5fa31d497f9fc83ffe1174fa3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0f8dbdbc641b45a5fa31d497f9fc83ffe1174fa3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700336399
  Commit Message:
    bpf: smarter verifier log number printing logic

Instead of always printing numbers as either decimals (and in some
cases
  Parent Hashes: 1db747d75b1dbe17bf4283ed87bd3b7a92010f34
  Refs:  like for "imm=%llx"

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve verifier log number printing logic for better readability and understanding.', 'keywords': 'verifier,log,printing', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1db747d75b1dbe17bf4283ed87bd3b7a92010f34
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1db747d75b1dbe17bf4283ed87bd3b7a92010f34
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700336399
  Commit Message:
    bpf: omit default off=0 and imm=0 in register state log

Simplify BPF verifier log further by omitting default (and frequently
irrelevant) off=0 and imm=0 parts for non-SCALAR_VALUE registers. As can
be seen from fixed tests
  Parent Hashes: 0c95c9fdb696f35c7864785ba84cb9a50152daff
  Refs:  this is often a visual noise for PTR_TO_CTX
register and even for PTR_TO_PACKET registers.

Omitting default values follows the rest of register state logic: we
omit default values to keep verifier log succinct and to highlight
interesting state that deviates from default one. E.g.

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Simplified BPF verifier log by omitting default off=0 and imm=0 for non-SCALAR_VALUE registers.', 'keywords': 'BPF verifier, default, registers', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0c95c9fdb696f35c7864785ba84cb9a50152daff
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0c95c9fdb696f35c7864785ba84cb9a50152daff
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700336399
  Commit Message:
    bpf: emit map name in register state if applicable and available

In complicated real-world applications
  Parent Hashes: 67d43dfbb42d6575304daea67733c88fbf536a1c
  Refs:  whenever debugging some
verification error through verifier log

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Emit the map name in the register state for better debugging in verifier logs.', 'keywords': 'map name, register state, verifier', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 67d43dfbb42d6575304daea67733c88fbf536a1c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 67d43dfbb42d6575304daea67733c88fbf536a1c
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700336399
  Commit Message:
    bpf: print spilled register state in stack slot

Print the same register state representation when printing stack state
  Parent Hashes: 009f5465be3636e9ce795cfbd5d3109d8978774d
  Refs: 
as we do for normal registers. Note that if stack slot contains
subregister spill (1

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve stack slot state printing in bpf to match register state representation.', 'keywords': 'register, printing, stack', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 009f5465be3636e9ce795cfbd5d3109d8978774d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 009f5465be3636e9ce795cfbd5d3109d8978774d
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700336399
  Commit Message:
    bpf: extract register state printing

Extract printing register state representation logic into a separate
helper
  Parent Hashes: 42feb6620accded89cad5f455665e21281813d79
  Refs:  as we are going to reuse it for spilled register state printing
in the next patch. This also nicely reduces code nestedness.

No functional changes.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Stanislav Fomichev <sdf@google.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231118034623.3320920-4-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extract register state printing logic into a helper for reuse and code clarity.', 'keywords': 'printing, helper, state', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 42feb6620accded89cad5f455665e21281813d79
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 42feb6620accded89cad5f455665e21281813d79
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700336399
  Commit Message:
    bpf: move verifier state printing code to kernel/bpf/log.c

Move a good chunk of code from verifier.c to log.c: verifier state
verbose printing logic. This is an important and very much
logging/debugging oriented code. It fits the overlall log.c's focus on
verifier logging
  Parent Hashes: db840d389bad60ce6f3aadc1079da13e7e993a16
  Refs:  and moving it allows to keep growing it without
unnecessarily adding to verifier.c code that otherwise contains a core
verification logic.

There are not many shared dependencies between this code and the rest of
verifier.c code

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor verifier state verbose printing logic from verifier.c to log.c to improve focus on verifier logging without adding complexity.', 'keywords': 'verifier, logging, refactor', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: db840d389bad60ce6f3aadc1079da13e7e993a16
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: db840d389bad60ce6f3aadc1079da13e7e993a16
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700336398
  Commit Message:
    bpf: move verbose_linfo() into kernel/bpf/log.c

verifier.c is huge. Let's try to move out parts that are logging-related
into log.c
  Parent Hashes: ff8867af01daa7ea770bebf5f91199b7434b74e5
  Refs:  as we previously did with bpf_log() and other related stuff.
This patch moves line info verbose output routines: it's pretty
self-contained and isolated code

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Moved verbose logging functions from verifier.c to log.c to reduce file size.', 'keywords': 'verbose logging, log, bpf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ff8867af01daa7ea770bebf5f91199b7434b74e5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ff8867af01daa7ea770bebf5f91199b7434b74e5
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700245802
  Commit Message:
    bpf: rename BPF_F_TEST_SANITY_STRICT to BPF_F_TEST_REG_INVARIANTS

Rename verifier internal flag BPF_F_TEST_SANITY_STRICT to more neutral
BPF_F_TEST_REG_INVARIANTS. This is a follow up to [0].

A few selftests and veristat need to be adjusted in the same patch as
well.

  [0] https://patchwork.kernel.org/project/netdevbpf/patch/20231112010609.848406-5-andrii@kernel.org/

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231117171404.225508-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 5fa201f37c2ef58a0f821e656d794af89b3a1738
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit renames an internal verifier flag and updates related selftests and veristat.', 'keywords': 'rename, verifier, flag', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e9cdebbe23f1aa9a1caea169862f479ab3fa2773
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e9cdebbe23f1aa9a1caea169862f479ab3fa2773
  Author Name: Jordan Rife
  Author Email: jrife@google.com
  Commit Date: 1700157522
  Commit Message:
    dlm: use kernel_connect() and kernel_bind()

Recent changes to kernel_connect() and kernel_bind() ensure that
callers are insulated from changes to the address parameter made by BPF
SOCK_ADDR hooks. This patch wraps direct calls to ops->connect() and
ops->bind() with kernel_connect() and kernel_bind() to protect callers
in such cases.

Link: https://lore.kernel.org/netdev/9944248dba1bce861375fcce9de663934d933ba9.camel@redhat.com/
Fixes: d74bad4e74ee ("bpf: Hooks for sys_connect")
Fixes: 4fbac77d2d09 ("bpf: Hooks for sys_bind")
Cc: stable@vger.kernel.org
Signed-off-by: Jordan Rife <jrife@google.com>
Signed-off-by: David Teigland <teigland@redhat.com>

  Parent Hashes: b85ea95d086471afb4ad062012a4d73cd328fa86
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Wraps direct calls to connect and bind operations with kernel_connect and kernel_bind for address parameter protection.', 'keywords': 'kernel_connect,kernel_bind,BPF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7475e51b87969e01a6812eac713a1c8310372e8a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7475e51b87969e01a6812eac713a1c8310372e8a
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1700139086
  Commit Message:
    Merge tag 'net-6.7-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 "Including fixes from BPF and netfilter.

  Current release - regressions:

   - core: fix undefined behavior in netdev name allocation

   - bpf: do not allocate percpu memory at init stage

   - netfilter: nf_tables: split async and sync catchall in two
     functions

   - mptcp: fix possible NULL pointer dereference on close

  Current release - new code bugs:

   - eth: ice: dpll: fix initial lock status of dpll

  Previous releases - regressions:

   - bpf: fix precision backtracking instruction iteration

   - af_unix: fix use-after-free in unix_stream_read_actor()

   - tipc: fix kernel-infoleak due to uninitialized TLV value

   - eth: bonding: stop the device in bond_setup_by_slave()

   - eth: mlx5:
      - fix double free of encap_header
      - avoid referencing skb after free-ing in drop path

   - eth: hns3: fix VF reset

   - eth: mvneta: fix calls to page_pool_get_stats

  Previous releases - always broken:

   - core: set SOCK_RCU_FREE before inserting socket into hashtable

   - bpf: fix control-flow graph checking in privileged mode

   - eth: ppp: limit MRU to 64K

   - eth: stmmac: avoid rx queue overrun

   - eth: icssg-prueth: fix error cleanup on failing initialization

   - eth: hns3: fix out-of-bounds access may occur when coalesce info is
     read via debugfs

   - eth: cortina: handle large frames

  Misc:

   - selftests: gso: support CONFIG_MAX_SKB_FRAGS up to 45"

* tag 'net-6.7-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (78 commits)
  macvlan: Don't propagate promisc change to lower dev in passthru
  net: sched: do not offload flows with a helper in act_ct
  net/mlx5e: Check return value of snprintf writing to fw_version buffer for representors
  net/mlx5e: Check return value of snprintf writing to fw_version buffer
  net/mlx5e: Reduce the size of icosq_str
  net/mlx5: Increase size of irq name buffer
  net/mlx5e: Update doorbell for port timestamping CQ before the software counter
  net/mlx5e: Track xmit submission to PTP WQ after populating metadata map
  net/mlx5e: Avoid referencing skb after free-ing in drop path of mlx5e_sq_xmit_wqe
  net/mlx5e: Don't modify the peer sent-to-vport rules for IPSec offload
  net/mlx5e: Fix pedit endianness
  net/mlx5e: fix double free of encap_header in update funcs
  net/mlx5e: fix double free of encap_header
  net/mlx5: Decouple PHC .adjtime and .adjphase implementations
  net/mlx5: DR
  Parent Hashes: 6eb1acd9766a0dc9d85927843d85787408395e15 cff088d924df871296412e6b819823f42d1bb9a5
  Refs:  Allow old devices to use multi destination FTE
  net/mlx5: Free used cpus mask when an IRQ is released
  Revert "net/mlx5: DR

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges networking fixes including BPF, netfilter, and other network driver issues.', 'keywords': 'networking, fixes, BPF', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a6a6a0a9fdb03af10513b5bb48e5419563f54413
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a6a6a0a9fdb03af10513b5bb48e5419563f54413
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1700116082
  Commit Message:
    Merge https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Alexei Starovoitov says:

====================
pull-request: bpf 2023-11-15

We've added 7 non-merge commits during the last 6 day(s) which contain
a total of 9 files changed
  Parent Hashes: 674e318089468ece99aef4796eaef7add57f36b2 1fda5bb66ad8fb24ecb3858e61a13a6548428898
  Refs:  200 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge pull request integrating 7 non-merge commits into BPF tree.', 'keywords': 'merge,BPF,commits', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5fa201f37c2ef58a0f821e656d794af89b3a1738
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5fa201f37c2ef58a0f821e656d794af89b3a1738
  Author Name: Puranjay Mohan
  Author Email: puranjay12@gmail.com
  Commit Date: 1700081187
  Commit Message:
    bpf: Remove test for MOVSX32 with offset=32

MOVSX32 only supports sign extending 8-bit and 16-bit operands into 32
bit operands. The "ALU_MOVSX | BPF_W" test tries to sign extend a 32 bit
operand into a 32 bit operand which is equivalent to a normal BPF_MOV.

Remove this test as it tries to run an invalid instruction.

Fixes: daabb2b098e0 ("bpf/tests: add tests for cpuv4 instructions")
Signed-off-by: Puranjay Mohan <puranjay12@gmail.com>
Reported-by: kernel test robot <oliver.sang@intel.com>
Closes: https://lore.kernel.org/oe-lkp/202310111838.46ff5b6a-oliver.sang@intel.com
Acked-by: Stanislav Fomichev <sdf@google.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20231110175150.87803-1-puranjay12@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 9cea90c01f4bddfb4cea12a9c23eef6414714503
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed a test for an invalid MOVSX32 instruction with offset in BPF.', 'keywords': 'MOVSX32, test, invalid', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9cea90c01f4bddfb4cea12a9c23eef6414714503
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9cea90c01f4bddfb4cea12a9c23eef6414714503
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1700078623
  Commit Message:
    Merge branch 'bpf-register-bounds-range-vs-range-support'

Andrii Nakryiko says:

====================
BPF register bounds range vs range support

This patch set is a continuation of work started in [0]. It adds a big set of
manual
  Parent Hashes: 81427a62a22148cdc85db38a6fbe487d0d2044b6 882e3d873c2d8a2aebbc6c192aa1a2990b9d5b27
  Refs:  auto-generated

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merges changes related to BPF register bounds and range support.', 'keywords': 'register bounds,range support,merge', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 882e3d873c2d8a2aebbc6c192aa1a2990b9d5b27
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 882e3d873c2d8a2aebbc6c192aa1a2990b9d5b27
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700078623
  Commit Message:
    selftests/bpf: add iter test requiring range x range logic

Add a simple verifier test that requires deriving reg bounds for one
register from another register that's not a constant. This is
a realistic example of iterating elements of an array with fixed maximum
number of elements
  Parent Hashes: a5c57f81eb2b5d6de4f46e47fd85be50d179bfd8
  Refs:  but smaller actual number of elements.

This small example was an original motivation for doing this whole patch
set in the first place

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a verifier test for range x range logic in selftests for BPF.', 'keywords': 'verifier,test,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8c5677f8b31e92b57be7d5d0fbb1ac66eedf4f91
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8c5677f8b31e92b57be7d5d0fbb1ac66eedf4f91
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700078622
  Commit Message:
    selftests/bpf: set BPF_F_TEST_SANITY_SCRIPT by default

Make sure to set BPF_F_TEST_SANITY_STRICT program flag by default across
most verifier tests (and a bunch of others that set custom prog flags).

There are currently two tests that do fail validation
  Parent Hashes: dab16659c50e8c9c7c5d9584beacec28c769dcca
  Refs:  if enforced
strictly: verifier_bounds/crossing_64_bit_signed_boundary_2 and
verifier_bounds/crossing_32_bit_signed_boundary_2. To accommodate them

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Default BPF_F_TEST_SANITY_STRICT flag across most verifier tests, except for two specific cases.', 'keywords': 'verifier, tests, flag', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: dab16659c50e8c9c7c5d9584beacec28c769dcca
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dab16659c50e8c9c7c5d9584beacec28c769dcca
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700078622
  Commit Message:
    selftests/bpf: add randomized reg_bounds tests

Add random cases generation to reg_bounds.c and run them without
SLOW_TESTS=1 to increase a chance of BPF CI catching latent issues.

Suggested-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231112010609.848406-11-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 2b0d204e368b306d4db894749947ed591b667ec5
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add randomized test case generation to reg_bounds.c for better BPF CI coverage.', 'keywords': 'randomized,reg_bounds,tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2b0d204e368b306d4db894749947ed591b667ec5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2b0d204e368b306d4db894749947ed591b667ec5
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700078622
  Commit Message:
    selftests/bpf: add range x range test to reg_bounds

Now that verifier supports range vs range bounds adjustments
  Parent Hashes: 774f94c5e74d86d554c4fd1e97c517a1a7ee7fe0
  Refs:  validate
that by checking each generated range against every other generated
range

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a new range x range test case for reg_bounds in selftests to verify new verifier support.', 'keywords': 'range,test,verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 774f94c5e74d86d554c4fd1e97c517a1a7ee7fe0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 774f94c5e74d86d554c4fd1e97c517a1a7ee7fe0
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700078622
  Commit Message:
    selftests/bpf: adjust OP_EQ/OP_NE handling to use subranges for branch taken

Similar to kernel-side BPF verifier logic enhancements
  Parent Hashes: 8863238993e23ccc6d5a9d4ff9f1c043f88f692e
  Refs:  use 32-bit
subrange knowledge for is_branch_taken() logic in reg_bounds selftests.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20231112010609.848406-9-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adjusted BPF selftests to use subrange logic for branch conditions similar to kernel verifier.', 'keywords': 'BPF selftests, subrange logic, verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8863238993e23ccc6d5a9d4ff9f1c043f88f692e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8863238993e23ccc6d5a9d4ff9f1c043f88f692e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700078622
  Commit Message:
    selftests/bpf: BPF register range bounds tester

Add test to validate BPF verifier's register range bounds tracking logic.

The main bulk is a lot of auto-generated tests based on a small set of
seed values for lower and upper 32 bits of full 64-bit values.
Currently we validate only range vs const comparisons
  Parent Hashes: cf5fe3c71c5a34ac0108afc550407c672d0a032d
  Refs:  but the idea is
to start validating range over range comparisons in subsequent patch set.

When setting up initial register ranges we treat registers as one of
u64/s64/u32/s32 numeric types

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest for BPF verifier to test register range bounds logic.', 'keywords': 'selftests, BPF, verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cf5fe3c71c5a34ac0108afc550407c672d0a032d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cf5fe3c71c5a34ac0108afc550407c672d0a032d
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700078622
  Commit Message:
    bpf: make __reg{32
  Parent Hashes: 3cf98cf594ea923b8b1e0385b580d3d8aae68c06
  Refs: 64}_deduce_bounds logic more robust

This change doesn't seem to have any effect on selftests and production
BPF object files

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enhances the __reg{32, 64}_deduce_bounds logic for robustness without affecting existing tests and BPF object files.', 'keywords': 'robustness, deduction, logic', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3cf98cf594ea923b8b1e0385b580d3d8aae68c06
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3cf98cf594ea923b8b1e0385b580d3d8aae68c06
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700078622
  Commit Message:
    bpf: remove redundant s{32
  Parent Hashes: 5f99f312bd3bedb3b266b0d26376a8c500cdc97f
  Refs: 64} -> u{32

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes redundant code by replacing s32 with u32.', 'keywords': 'remove,redundant,replace', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 5f99f312bd3bedb3b266b0d26376a8c500cdc97f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5f99f312bd3bedb3b266b0d26376a8c500cdc97f
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700078622
  Commit Message:
    bpf: add register bounds sanity checks and sanitization

Add simple sanity checks that validate well-formed ranges (min <= max)
across u64
  Parent Hashes: be41a203bb9e0159099e189e510388fe61962eb8
  Refs:  s64

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add sanity checks for register bounds to ensure well-formed ranges in u64.', 'keywords': 'sanity, register, bounds', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: be41a203bb9e0159099e189e510388fe61962eb8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: be41a203bb9e0159099e189e510388fe61962eb8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700078622
  Commit Message:
    bpf: enhance BPF_JEQ/BPF_JNE is_branch_taken logic

Use 32-bit subranges to prune some 64-bit BPF_JEQ/BPF_JNE conditions
that otherwise would be "inconclusive" (i.e.
  Parent Hashes: 96381879a370425a30b810906946f64c0726450e
  Refs:  is_branch_taken() would
return -1). This can happen

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance the is_branch_taken logic for BPF_JEQ/BPF_JNE using 32-bit subranges to handle inconclusive conditions more effectively.', 'keywords': 'BPF_JEQ,subranges,inconclusive', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 96381879a370425a30b810906946f64c0726450e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 96381879a370425a30b810906946f64c0726450e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700078621
  Commit Message:
    bpf: generalize is_scalar_branch_taken() logic

Generalize is_branch_taken logic for SCALAR_VALUE register to handle
cases when both registers are not constants. Previously supported
<range> vs <scalar> cases are a natural subset of more generic <range>
vs <range> set of cases.

Generalized logic relies on straightforward segment intersection checks.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Link: https://lore.kernel.org/r/20231112010609.848406-3-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 67420501e8681ae18f9f0ea0a69cd2f432100e70
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Generalize SCALAR_VALUE branch logic to handle non-constant registers in the eBPF verifier.', 'keywords': 'generalize, SCALAR_VALUE, verifier', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 67420501e8681ae18f9f0ea0a69cd2f432100e70
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 67420501e8681ae18f9f0ea0a69cd2f432100e70
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1700078621
  Commit Message:
    bpf: generalize reg_set_min_max() to handle non-const register comparisons

Generalize bounds adjustment logic of reg_set_min_max() to handle not
just register vs constant case
  Parent Hashes: 81427a62a22148cdc85db38a6fbe487d0d2044b6
  Refs:  but in general any register vs any
register cases. For most of the operations it's trivial extension based
on range vs range comparison logic

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Generalize reg_set_min_max() to handle register comparisons beyond constant comparisons in BPF.', 'keywords': 'generalize, reg_set_min_max, register', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1fda5bb66ad8fb24ecb3858e61a13a6548428898
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1fda5bb66ad8fb24ecb3858e61a13a6548428898
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1700063466
  Commit Message:
    bpf: Do not allocate percpu memory at init stage

Kirill Shutemov reported significant percpu memory consumption increase after
booting in 288-cpu VM ([1]) due to commit 41a5db8d8161 ("bpf: Add support for
non-fix-size percpu mem allocation"). The percpu memory consumption is
increased from 111MB to 969MB. The number is from /proc/meminfo.

I tried to reproduce the issue with my local VM which at most supports upto
255 cpus. With 252 cpus
  Parent Hashes: e2e57d637aa5da0a2f49d83ad44e9febf95df7b4
  Refs:  without the above commit

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses excessive percpu memory usage by avoiding allocation at the initialization stage.', 'keywords': 'percpu, memory, optimization', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 81427a62a22148cdc85db38a6fbe487d0d2044b6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 81427a62a22148cdc85db38a6fbe487d0d2044b6
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1699981183
  Commit Message:
    Merge branch 'bpf-add-support-for-cgroup1-bpf-part'

Yafang Shao says:

====================
bpf: Add support for cgroup1
  Parent Hashes: 727a92d62fd6a382b4c5972008e45667e707b0e4 360769233cc9c921e90ae387d167ea3cd3cbb04c
  Refs:  BPF part

This is the BPF part of the series "bpf

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for cgroup1 in BPF subsystem.', 'keywords': 'support,cgroup1,BPF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 360769233cc9c921e90ae387d167ea3cd3cbb04c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 360769233cc9c921e90ae387d167ea3cd3cbb04c
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1699981163
  Commit Message:
    selftests/bpf: Add selftests for cgroup1 hierarchy

Add selftests for cgroup1 hierarchy.
The result as follows
  Parent Hashes: bf47300b186facc8ae66a0e2aa89073565f82bb3
  Refs: 

  $ tools/testing/selftests/bpf/test_progs --name=cgroup1_hierarchy
  #36/1    cgroup1_hierarchy/test_cgroup1_hierarchy:OK
  #36/2    cgroup1_hierarchy/test_root_cgid:OK
  #36/3    cgroup1_hierarchy/test_invalid_level:OK
  #36/4    cgroup1_hierarchy/test_invalid_cgid:OK
  #36/5    cgroup1_hierarchy/test_invalid_hid:OK
  #36/6    cgroup1_hierarchy/test_invalid_cgrp_name:OK
  #36/7    cgroup1_hierarchy/test_invalid_cgrp_name2:OK
  #36/8    cgroup1_hierarchy/test_sleepable_prog:OK
  #36      cgroup1_hierarchy:OK
  Summary: 1/8 PASSED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds selftests for the cgroup1 hierarchy in the BPF selftests.', 'keywords': 'selftests,cgroup1,hierarchy', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: bf47300b186facc8ae66a0e2aa89073565f82bb3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bf47300b186facc8ae66a0e2aa89073565f82bb3
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1699981016
  Commit Message:
    selftests/bpf: Add a new cgroup helper get_cgroup_hierarchy_id()

A new cgroup helper function
  Parent Hashes: c1dcc050aa648bb3b831030d547c3fcc1c68140c
  Refs:  get_cgroup1_hierarchy_id()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces a new cgroup helper function for obtaining cgroup hierarchy ID in selftests.', 'keywords': 'cgroup, helper function, selftests', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: c1dcc050aa648bb3b831030d547c3fcc1c68140c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c1dcc050aa648bb3b831030d547c3fcc1c68140c
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1699981016
  Commit Message:
    selftests/bpf: Add a new cgroup helper get_classid_cgroup_id()

Introduce a new helper function to retrieve the cgroup ID from a net_cls
cgroup directory.

Signed-off-by: Yafang Shao <laoar.shao@gmail.com>
Link: https://lore.kernel.org/r/20231111090034.4248-5-laoar.shao@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: f744d35ecf46f111bf9b54bfdbc89a28ee8b928a
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce a new helper function to retrieve the cgroup ID from a net_cls cgroup directory in selftests/bpf.', 'keywords': 'cgroup, helper, ID', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: f744d35ecf46f111bf9b54bfdbc89a28ee8b928a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f744d35ecf46f111bf9b54bfdbc89a28ee8b928a
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1699981016
  Commit Message:
    selftests/bpf: Add parallel support for classid

Include the current pid in the classid cgroup path. This way
  Parent Hashes: 4849775587844e44d215289c425bcd70f315efe7
  Refs:  different
testers relying on classid-based configurations will have distinct classid
cgroup directories

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add parallel support for classid by including current pid in cgroup path for distinct configurations.', 'keywords': 'parallel,classid,cgroup', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 4849775587844e44d215289c425bcd70f315efe7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4849775587844e44d215289c425bcd70f315efe7
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1699981016
  Commit Message:
    selftests/bpf: Fix issues in setup_classid_environment()

If the net_cls subsystem is already mounted
  Parent Hashes: fe977716b40cb98cf9c91a66454adf3dc2f8c59a
  Refs:  attempting to mount it again
in setup_classid_environment() will result in a failure with the error code
EBUSY. Despite this

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix issues in setup_classid_environment by handling EBUSY error when net_cls is already mounted in selftests.', 'keywords': 'selftests,bpf,setup_classid_environment', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: fe977716b40cb98cf9c91a66454adf3dc2f8c59a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fe977716b40cb98cf9c91a66454adf3dc2f8c59a
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1699981016
  Commit Message:
    bpf: Add a new kfunc for cgroup1 hierarchy

A new kfunc is added to acquire cgroup1 of a task:

- bpf_task_get_cgroup1
  Acquires the associated cgroup of a task whithin a specific cgroup1
  hierarchy. The cgroup1 hierarchy is identified by its hierarchy ID.

This new kfunc enables the tracing of tasks within a designated
container or cgroup directory in BPF programs.

Suggested-by: Tejun Heo <tj@kernel.org>
Signed-off-by: Yafang Shao <laoar.shao@gmail.com>
Acked-by: Tejun Heo <tj@kernel.org>
Link: https://lore.kernel.org/r/20231111090034.4248-2-laoar.shao@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 727a92d62fd6a382b4c5972008e45667e707b0e4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'A new kfunc for acquiring cgroup1 hierarchy of a task is added to BPF.', 'keywords': 'kfunc,cgroup1,task', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['tracepoints like programs', 'kprobe/uprobe/ftrace like programs', 'cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 727a92d62fd6a382b4c5972008e45667e707b0e4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 727a92d62fd6a382b4c5972008e45667e707b0e4
  Author Name: Jordan Rome
  Author Email: linux@jordanrome.com
  Commit Date: 1699929578
  Commit Message:
    selftests/bpf: Add assert for user stacks in test_task_stack

This is a follow up to:
commit b8e3a87a627b ("bpf: Add crosstask check to __bpf_get_stack").

This test ensures that the task iterator only gets a single
user stack (for the current task).

Signed-off-by: Jordan Rome <linux@jordanrome.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Stanislav Fomichev <sdf@google.com>
Link: https://lore.kernel.org/bpf/20231112023010.144675-1-linux@jordanrome.com

  Parent Hashes: 100888fb6d8a185866b1520031ee7e3182b173de
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add assertion for user stack checks in BPF selftests.', 'keywords': 'selftests, BPF, user stack', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 4eeee6636af819454d7c43702e77ec7857a63000
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4eeee6636af819454d7c43702e77ec7857a63000
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1699815488
  Commit Message:
    Merge tag 'loongarch-6.7' of git://git.kernel.org/pub/scm/linux/kernel/git/chenhuacai/linux-loongson

Pull LoongArch updates from Huacai Chen:

 - support PREEMPT_DYNAMIC with static keys

 - relax memory ordering for atomic operations

 - support BPF CPU v4 instructions for LoongArch

 - some build and runtime warning fixes

* tag 'loongarch-6.7' of git://git.kernel.org/pub/scm/linux/kernel/git/chenhuacai/linux-loongson:
  selftests/bpf: Enable cpu v4 tests for LoongArch
  LoongArch: BPF: Support signed mod instructions
  LoongArch: BPF: Support signed div instructions
  LoongArch: BPF: Support 32-bit offset jmp instructions
  LoongArch: BPF: Support unconditional bswap instructions
  LoongArch: BPF: Support sign-extension mov instructions
  LoongArch: BPF: Support sign-extension load instructions
  LoongArch: Add more instruction opcodes and emit_* helpers
  LoongArch/smp: Call rcutree_report_cpu_starting() earlier
  LoongArch: Relax memory ordering for atomic operations
  LoongArch: Mark __percpu functions as always inline
  LoongArch: Disable module from accessing external data directly
  LoongArch: Support PREEMPT_DYNAMIC with static keys

  Parent Hashes: 5dd2020f335a7a60c154375a168791a2b87f35b5 1d375d65466e5c8d7a9406826d80d475a22e8c6d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge LoongArch updates to support new BPF CPU instructions, PREEMPT_DYNAMIC with static keys, and fix build warnings.', 'keywords': 'LoongArch,BPF instructions,PREEMPT_DYNAMIC', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 100888fb6d8a185866b1520031ee7e3182b173de
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 100888fb6d8a185866b1520031ee7e3182b173de
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1699733890
  Commit Message:
    selftests/bpf: Fix pyperf180 compilation failure with clang18

With latest clang18 (main branch of llvm-project repo)
  Parent Hashes: b8e3a87a627b575896e448021e5c2f8a3bc19931
  Refs:  when building bpf selftests

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a compilation failure in BPF selftests with pyperf180 using clang18.', 'keywords': 'fix, pyperf180, clang18', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b8e3a87a627b575896e448021e5c2f8a3bc19931
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b8e3a87a627b575896e448021e5c2f8a3bc19931
  Author Name: Jordan Rome
  Author Email: jordalgo@meta.com
  Commit Date: 1699643170
  Commit Message:
    bpf: Add crosstask check to __bpf_get_stack

Currently get_perf_callchain only supports user stack walking for
the current task. Passing the correct *crosstask* param will return
0 frames if the task passed to __bpf_get_stack isn't the current
one instead of a single incorrect frame/address. This change
passes the correct *crosstask* param but also does a preemptive
check in __bpf_get_stack if the task is current and returns
-EOPNOTSUPP if it is not.

This issue was found using bpf_get_task_stack inside a BPF
iterator ("iter/task")
  Parent Hashes: 92411764e3106f38ac815d2fb1ae011e7bbe2abc
  Refs:  which iterates over all tasks.
bpf_get_task_stack works fine for fetching kernel stacks
but because get_perf_callchain relies on the caller to know
if the requested *task* is the current one (via *crosstask*)
it was failing in a confusing way.

It might be possible to get user stacks for all tasks utilizing
something like access_process_vm but that requires the bpf
program calling bpf_get_task_stack to be sleepable and would
therefore be a breaking change.

Fixes: fa28dcb82a38 ("bpf: Introduce helper bpf_get_task_stack()")
Signed-off-by: Jordan Rome <jordalgo@meta.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20231108112334.3433136-1-jordalgo@meta.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add crosstask parameter check to bpf_get_task_stack for accurate user stack walking.', 'keywords': 'crosstask, __bpf_get_stack, user stack', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 92411764e3106f38ac815d2fb1ae011e7bbe2abc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 92411764e3106f38ac815d2fb1ae011e7bbe2abc
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1699635733
  Commit Message:
    Merge branch 'for-6.8-bpf' of https://git.kernel.org/pub/scm/linux/kernel/git/tj/cgroup into bpf-next

Merge cgroup prerequisite patches.

Link: https://lore.kernel.org/bpf/20231029061438.4215-1-laoar.shao@gmail.com/

Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 689b097a06bafb461ec162fc3b3ecc9765cea67b aecd408b7e50742868b3305c24325a89024e2a30
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merged cgroup prerequisite patches from branch 'for-6.8-bpf'.", 'keywords': 'merge,cgroup,prerequisite', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 689b097a06bafb461ec162fc3b3ecc9765cea67b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 689b097a06bafb461ec162fc3b3ecc9765cea67b
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1699631599
  Commit Message:
    compiler-gcc: Suppress -Wmissing-prototypes warning for all supported GCC

The kernel supports a minimum GCC version of 5.1.0 for building. However
  Parent Hashes: 155addf0814a92d08fce26a11b27e3315cdba977
  Refs: 
the "__diag_ignore_all" directive only suppresses the
"-Wmissing-prototypes" warning for GCC versions >= 8.0.0. As a result

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Suppress -Wmissing-prototypes warning for all supported GCC versions in the kernel build system.', 'keywords': 'suppress, GCC, warnings', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 871019b22d1bcc9fab2d1feba1b9a564acbb6e99
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 871019b22d1bcc9fab2d1feba1b9a564acbb6e99
  Author Name: Stanislav Fomichev
  Author Email: sdf@google.com
  Commit Date: 1699605429
  Commit Message:
    net: set SOCK_RCU_FREE before inserting socket into hashtable

We've started to see the following kernel traces:

 WARNING: CPU: 83 PID: 0 at net/core/filter.c:6641 sk_lookup+0x1bd/0x1d0

 Call Trace:
  <IRQ>
  __bpf_skc_lookup+0x10d/0x120
  bpf_sk_lookup+0x48/0xd0
  bpf_sk_lookup_tcp+0x19/0x20
  bpf_prog_<redacted>+0x37c/0x16a3
  cls_bpf_classify+0x205/0x2e0
  tcf_classify+0x92/0x160
  __netif_receive_skb_core+0xe52/0xf10
  __netif_receive_skb_list_core+0x96/0x2b0
  napi_complete_done+0x7b5/0xb70
  <redacted>_poll+0x94/0xb0
  net_rx_action+0x163/0x1d70
  __do_softirq+0xdc/0x32e
  asm_call_irq_on_stack+0x12/0x20
  </IRQ>
  do_softirq_own_stack+0x36/0x50
  do_softirq+0x44/0x70

__inet_hash can race with lockless (rcu) readers on the other cpus:

  __inet_hash
    __sk_nulls_add_node_rcu
    <- (bpf triggers here)
    sock_set_flag(SOCK_RCU_FREE)

Let's move the SOCK_RCU_FREE part up a bit
  Parent Hashes: 8a4f030dbced6fc255cbe67b2d0a129947e18493
  Refs:  before we are inserting
the socket into hashtables. Note

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Set SOCK_RCU_FREE before inserting socket into hashtable to prevent kernel trace warnings.', 'keywords': 'SOCK_RCU_FREE, socket, hashtable', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: e2e57d637aa5da0a2f49d83ad44e9febf95df7b4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e2e57d637aa5da0a2f49d83ad44e9febf95df7b4
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699599445
  Commit Message:
    selftests/bpf: add more test cases for check_cfg()

Add a few more simple cases to validate proper privileged vs unprivileged
loop detection behavior. conditional_loop2 is the one reported by Hao
Sun that triggered this set of fixes.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Suggested-by: Hao Sun <sunhao.th@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231110061412.2995786-2-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 10e14e9652bf9e8104151bfd9200433083deae3d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add more test cases for privileged vs unprivileged loop detection in BPF selftests.', 'keywords': 'selftests,bpf,loop', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 10e14e9652bf9e8104151bfd9200433083deae3d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 10e14e9652bf9e8104151bfd9200433083deae3d
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699599444
  Commit Message:
    bpf: fix control-flow graph checking in privileged mode

When BPF program is verified in privileged mode
  Parent Hashes: 8c74b27f4b30cd896ccf387102410a65b4a35c25
  Refs:  BPF verifier allows
bounded loops. This means that from CFG point of view there are
definitely some back-edges. Original commit adjusted check_cfg() logic
to not detect back-edges in control flow graph if they are resulting
from conditional jumps

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes control-flow graph checking for BPF programs in privileged mode by adjusting treatment of back-edges from conditional jumps.', 'keywords': 'control-flow, privileged, back-edges', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8c74b27f4b30cd896ccf387102410a65b4a35c25
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8c74b27f4b30cd896ccf387102410a65b4a35c25
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1699589480
  Commit Message:
    Merge branch 'bpf-control-flow-graph-and-precision-backtrack-fixes'

Andrii Nakryiko says:

====================
BPF control flow graph and precision backtrack fixes

A small fix to BPF verifier's CFG logic around handling and reporting ldimm64
instructions. Patch #1 was previously submitted separately ([0])
  Parent Hashes: fe69a1b1b6ed9ffc2c578c63f526026a8ab74f0c 62ccdb11d3c63dc697dea1fd92b3496fe43dcc1e
  Refs:  and so this
patch set supersedes that patch.

Second patch is fixing obscure corner case in mark_chain_precise() logic. See
patch for details. Patch #3 adds a dedicated test

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit merges fixes for BPF verifier's control flow graph and precision backtracking logic.", 'keywords': 'BPF verifier, control flow, fixes', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 62ccdb11d3c63dc697dea1fd92b3496fe43dcc1e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 62ccdb11d3c63dc697dea1fd92b3496fe43dcc1e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699589480
  Commit Message:
    selftests/bpf: add edge case backtracking logic test

Add a dedicated selftests to try to set up conditions to have a state
with same first and last instruction index
  Parent Hashes: 4bb7ea946a370707315ab774432963ce47291946
  Refs:  but it actually is a loop
3->4->1->2->3. This confuses mark_chain_precision() if verifier doesn't
take into account jump history.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231110002638.4168352-4-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a selftest to verify edge case handling in eBPF verifier regarding jump history and state consistency.', 'keywords': 'selftest, edge case, verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4bb7ea946a370707315ab774432963ce47291946
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4bb7ea946a370707315ab774432963ce47291946
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699589480
  Commit Message:
    bpf: fix precision backtracking instruction iteration

Fix an edge case in __mark_chain_precision() which prematurely stops
backtracking instructions in a state if it happens that state's first
and last instruction indexes are the same. This situations doesn't
necessarily mean that there were no instructions simulated in a state
  Parent Hashes: 3feb263bb516ee7e1da0acd22b15afbb9a7daa19
  Refs: 
but rather that we starting from the instruction

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Fixes an edge case in the bpf verifier's precision backtracking logic.", 'keywords': 'precision, backtracking, edge case', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3feb263bb516ee7e1da0acd22b15afbb9a7daa19
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3feb263bb516ee7e1da0acd22b15afbb9a7daa19
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699589480
  Commit Message:
    bpf: handle ldimm64 properly in check_cfg()

ldimm64 instructions are 16-byte long
  Parent Hashes: fe69a1b1b6ed9ffc2c578c63f526026a8ab74f0c
  Refs:  and so have to be handled
appropriately in check_cfg()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix handling of ldimm64 instructions in check_cfg function for proper configuration checks.', 'keywords': 'ldimm64,check_cfg,instructions', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fe69a1b1b6ed9ffc2c578c63f526026a8ab74f0c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fe69a1b1b6ed9ffc2c578c63f526026a8ab74f0c
  Author Name: Anders Roxell
  Author Email: anders.roxell@linaro.org
  Commit Date: 1699586292
  Commit Message:
    selftests: bpf: xskxceiver: ksft_print_msg: fix format type error

Crossbuilding selftests/bpf for architecture arm64
  Parent Hashes: 89cdf9d556016a54ff6ddd62324aa5ec790c05cc
  Refs:  format specifies
type error show up like.

xskxceiver.c:912:34: error: format specifies type 'int' but the argument
has type '__u64' (aka 'unsigned long long') [-Werror

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a format type error in the ksft_print_msg function of the xskxceiver selftest for arm64 architecture.', 'keywords': 'format, ksft_print_msg, xskxceiver', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 155addf0814a92d08fce26a11b27e3315cdba977
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 155addf0814a92d08fce26a11b27e3315cdba977
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1699585672
  Commit Message:
    bpf: Use named fields for certain bpf uapi structs

Martin and Vadim reported a verifier failure with bpf_dynptr usage.
The issue is mentioned but Vadim workarounded the issue with source
change ([1]). The below describes what is the issue and why there
is a verification failure.

  int BPF_PROG(skb_crypto_setup) {
    struct bpf_dynptr algo
  Parent Hashes: 3f6d04d742d9fbd492a79e28e7cfe4e2a97c66e5
  Refs:  key;
    ...

    bpf_dynptr_from_mem(...

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a verifier failure by using named fields in certain bpf uapi structs.', 'keywords': 'verifier failure, bpf_dynptr, uapi structs', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3f6d04d742d9fbd492a79e28e7cfe4e2a97c66e5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3f6d04d742d9fbd492a79e28e7cfe4e2a97c66e5
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1699585672
  Commit Message:
    Merge branch 'allow-bpf_refcount_acquire-of-mapval-obtained-via-direct-ld'

Dave Marchevsky says:

====================
Allow bpf_refcount_acquire of mapval obtained via direct LD

Consider this BPF program:

  struct cgv_node {
    int d;
    struct bpf_refcount r;
    struct bpf_rb_node rb;
  };

  struct val_stash {
    struct cgv_node __kptr *v;
  };

  struct {
    __uint(type
  Parent Hashes: 82ce364c6087e31ff9837380a4641a856284064c e9ed8df7187cfdce1075d0ee591544ac15d072f1
  Refs:  BPF_MAP_TYPE_ARRAY);
    __type(key

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit merges changes to allow bpf_refcount_acquire of map values obtained via direct load.', 'keywords': 'bpf_refcount_acquire,mapval,direct LD', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 82ce364c6087e31ff9837380a4641a856284064c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 82ce364c6087e31ff9837380a4641a856284064c
  Author Name: Shung-Hsi Yu
  Author Email: shung-hsi.yu@suse.com
  Commit Date: 1699585671
  Commit Message:
    bpf: replace register_is_const() with is_reg_const()

The addition of is_reg_const() in commit 171de12646d2 ("bpf: generalize
is_branch_taken to handle all conditional jumps in one place") has made the
register_is_const() redundant. Give the former has more feature
  Parent Hashes: 27007fae704eb12547b9b5c7b1005e11640d4f19
  Refs:  plus the
fact the latter is only used in one place

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Replaced redundant register_is_const() with is_reg_const() for handling conditional jumps in eBPF.', 'keywords': 'register replacement redundancy', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e9ed8df7187cfdce1075d0ee591544ac15d072f1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e9ed8df7187cfdce1075d0ee591544ac15d072f1
  Author Name: Dave Marchevsky
  Author Email: davemarchevsky@fb.com
  Commit Date: 1699585671
  Commit Message:
    selftests/bpf: Test bpf_refcount_acquire of node obtained via direct ld

This patch demonstrates that verifier changes earlier in this series
result in bpf_refcount_acquire(mapval->stashed_kptr) passing
verification. The added test additionally validates that stashing a kptr
in mapval and - in a separate BPF program - refcount_acquiring the kptr
without unstashing works as expected at runtime.

Signed-off-by: Dave Marchevsky <davemarchevsky@fb.com>
Link: https://lore.kernel.org/r/20231107085639.3016113-7-davemarchevsky@fb.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 1b12171533a9bb23cf6fba7262b479028b65e1e8
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add test for verifier behavior with bpf_refcount_acquire on stashed kptr in selftests.', 'keywords': 'bpf_refcount_acquire,selftests,verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 27007fae704eb12547b9b5c7b1005e11640d4f19
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 27007fae704eb12547b9b5c7b1005e11640d4f19
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585671
  Commit Message:
    veristat: add ability to filter top N results

Add ability to filter top B results
  Parent Hashes: 5d4a7aaca1ebcc7c864caec13203662a061c4f4f
  Refs:  both in replay/verifier mode and
comparison mode. Just adding `-n10` will emit only first 10 rows

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added functionality to filter and display top N results in veristat.', 'keywords': 'veristat,filter,top', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 1b12171533a9bb23cf6fba7262b479028b65e1e8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1b12171533a9bb23cf6fba7262b479028b65e1e8
  Author Name: Dave Marchevsky
  Author Email: davemarchevsky@fb.com
  Commit Date: 1699585671
  Commit Message:
    bpf: Mark direct ld of stashed bpf_{rb
  Parent Hashes: 790ce3cfefb1b768dccd4eee324ddef0f0ce3db4
  Refs: list}_node as non-owning ref

This patch enables the following pattern:

  /* mapval contains a __kptr pointing to refcounted local kptr */
  mapval = bpf_map_lookup_elem(&map

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "This commit marks direct load of stashed bpf_map elements' node as non-owning references for eBPF programs.", 'keywords': 'direct ld, non-owning ref, bpf_map', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 790ce3cfefb1b768dccd4eee324ddef0f0ce3db4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 790ce3cfefb1b768dccd4eee324ddef0f0ce3db4
  Author Name: Dave Marchevsky
  Author Email: davemarchevsky@fb.com
  Commit Date: 1699585671
  Commit Message:
    bpf: Move GRAPH_{ROOT
  Parent Hashes: 649924b76ab151a96bdd22a97a993fb0421f134c
  Refs: NODE}_MASK macros into btf_field_type enum

This refactoring patch removes the unused BPF_GRAPH_NODE_OR_ROOT
btf_field_type and moves BPF_GRAPH_{NODE

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors the code by moving certain macros into the btf_field_type enum and removing unused types.', 'keywords': 'refactoring, macros, btf_field_type', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7f7c43693c1b46652cfafb7af67ba31726d6ec4e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7f7c43693c1b46652cfafb7af67ba31726d6ec4e
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1699585671
  Commit Message:
    libbpf: Fix potential uninitialized tail padding with LIBBPF_OPTS_RESET

Martin reported that there is a libbpf complaining of non-zero-value tail
padding with LIBBPF_OPTS_RESET macro if struct bpf_netkit_opts is modified
to have a 4-byte tail padding. This only happens to clang compiler.
The commend line is: ./test_progs -t tc_netkit_multi_links
Martin and I did some investigation and found this indeed the case and
the following are the investigation details.

Clang:
  clang version 18.0.0
  <I tried clang15/16/17 and they all have similar results>

tools/lib/bpf/libbpf_common.h:
  #define LIBBPF_OPTS_RESET(NAME
  Parent Hashes: b0d1c7294671af02369d7a4feaa5a9bb472372c6
  Refs:  ...)                                      \
        do {                                                                \
                memset(&NAME

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix uninitialized tail padding issue in libbpf when using LIBBPF_OPTS_RESET macro with clang compiler.', 'keywords': 'libbpf, uninitialized, clang', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 649924b76ab151a96bdd22a97a993fb0421f134c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 649924b76ab151a96bdd22a97a993fb0421f134c
  Author Name: Dave Marchevsky
  Author Email: davemarchevsky@fb.com
  Commit Date: 1699585671
  Commit Message:
    bpf: Use bpf_mem_free_rcu when bpf_obj_dropping non-refcounted nodes

The use of bpf_mem_free_rcu to free refcounted local kptrs was added
in commit 7e26cd12ad1c ("bpf: Use bpf_mem_free_rcu when
bpf_obj_dropping refcounted nodes"). In the cover letter for the
series containing that patch [0] I commented:

    Perhaps it makes sense to move to mem_free_rcu for _all_
    non-owning refs in the future
  Parent Hashes: f460e7bdb027d1da93f0c5090b239889cd46a33d
  Refs:  not just refcounted. This might
    allow custom non-owning ref lifetime + invalidation logic to be
    entirely subsumed by MEM_RCU handling. IMO this needs a bit more
    thought and should be tackled outside of a fix series

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Utilize bpf_mem_free_rcu for freeing non-refcounted nodes in bpf_obj_dropping to potentially streamline reference handling.', 'keywords': 'bpf_mem_free_rcu,non-refcounted,nodes', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f460e7bdb027d1da93f0c5090b239889cd46a33d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f460e7bdb027d1da93f0c5090b239889cd46a33d
  Author Name: Dave Marchevsky
  Author Email: davemarchevsky@fb.com
  Commit Date: 1699585671
  Commit Message:
    selftests/bpf: Add test passing MAYBE_NULL reg to bpf_refcount_acquire

The test added in this patch exercises the logic fixed in the previous
patch in this series. Before the previous patch's changes
  Parent Hashes: 1500a5d9f49cb66906d3ea1c9158df25cc41dd40
  Refs: 
bpf_refcount_acquire accepts MAYBE_NULL local kptrs; after the change
the verifier correctly rejects the such a call.

Signed-off-by: Dave Marchevsky <davemarchevsky@fb.com>
Link: https://lore.kernel.org/r/20231107085639.3016113-3-davemarchevsky@fb.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a selftest for bpf_refcount_acquire handling of MAYBE_NULL reg in eBPF.', 'keywords': 'selftest,bpf_refcount_acquire,MAYBE_NULL', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1500a5d9f49cb66906d3ea1c9158df25cc41dd40
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1500a5d9f49cb66906d3ea1c9158df25cc41dd40
  Author Name: Dave Marchevsky
  Author Email: davemarchevsky@fb.com
  Commit Date: 1699585671
  Commit Message:
    bpf: Add KF_RCU flag to bpf_refcount_acquire_impl

Refcounted local kptrs are kptrs to user-defined types with a
bpf_refcount field. Recent commits ([0]
  Parent Hashes: 82ce364c6087e31ff9837380a4641a856284064c
  Refs:  [1]) modified the lifetime of
refcounted local kptrs such that the underlying memory is not reused
until RCU grace period has elapsed.

Separately

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added KF_RCU flag to bpf_refcount_acquire_impl for refcounted local kptr memory handling.', 'keywords': 'KF_RCU, bpf_refcount, kptrs', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b0d1c7294671af02369d7a4feaa5a9bb472372c6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b0d1c7294671af02369d7a4feaa5a9bb472372c6
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585664
  Commit Message:
    Merge branch 'bpf: __bpf_dynptr_data* and __str annotation'

Song Liu says:

====================
This set contains the first 3 patches of set [1]. Currently
  Parent Hashes: 9b75dbeb36fcd9fc7ed51d370310d0518a387769 045edee19d591e59ed53772bf6dfc9b1ed9577eb
  Refs:  [1] is waiting
for [3] to be merged to bpf-next tree. So send these 3 patches first to
unblock other works

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merges initial set of patches related to __bpf_dynptr_data and __str annotation to unblock further developments.', 'keywords': '__bpf_dynptr_data, __str annotation, patches', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9b75dbeb36fcd9fc7ed51d370310d0518a387769
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9b75dbeb36fcd9fc7ed51d370310d0518a387769
  Author Name: Florian Lehner
  Author Email: dev@der-flo.net
  Commit Date: 1699585658
  Commit Message:
    bpf
  Parent Hashes: f2d2c7e1b7c9e8847478769d6e1f8a76b5e91952
  Refs:  lpm: Fix check prefixlen before walking trie

When looking up an element in LPM trie

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes prefix length check before traversing LPM trie in eBPF.', 'keywords': 'prefixlen, trie, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 045edee19d591e59ed53772bf6dfc9b1ed9577eb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 045edee19d591e59ed53772bf6dfc9b1ed9577eb
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1699585658
  Commit Message:
    bpf: Introduce KF_ARG_PTR_TO_CONST_STR

Similar to ARG_PTR_TO_CONST_STR for BPF helpers
  Parent Hashes: 0b51940729150e807fc4b7767164e6bb6cf4f7dd
  Refs:  KF_ARG_PTR_TO_CONST_STR
specifies kfunc args that point to const strings. Annotation "__str" is
used to specify kfunc arg of type KF_ARG_PTR_TO_CONST_STR. Also

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce KF_ARG_PTR_TO_CONST_STR for specifying kfunc args pointing to constant strings in BPF.', 'keywords': 'KF_ARG_PTR_TO_CONST_STR, kfunc, const strings', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f2d2c7e1b7c9e8847478769d6e1f8a76b5e91952
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f2d2c7e1b7c9e8847478769d6e1f8a76b5e91952
  Author Name: Anders Roxell
  Author Email: anders.roxell@linaro.org
  Commit Date: 1699585658
  Commit Message:
    selftests/bpf: Disable CONFIG_DEBUG_INFO_REDUCED in config.aarch64

Building an arm64 kernel and seftests/bpf with defconfig +
selftests/bpf/config and selftests/bpf/config.aarch64 the fragment
CONFIG_DEBUG_INFO_REDUCED is enabled in arm64's defconfig
  Parent Hashes: a46afaa03f6db8c65492302ffdafcb2e769e5667
  Refs:  it should be
disabled in file sefltests/bpf/config.aarch64 since if its not disabled
CONFIG_DEBUG_INFO_BTF wont be enabled.

Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20231103220912.333930-1-anders.roxell@linaro.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Disable CONFIG_DEBUG_INFO_REDUCED in config.aarch64 to ensure CONFIG_DEBUG_INFO_BTF can be enabled for selftests/bpf.', 'keywords': 'selftests, CONFIG_DEBUG_INFO, aarch64', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0b51940729150e807fc4b7767164e6bb6cf4f7dd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0b51940729150e807fc4b7767164e6bb6cf4f7dd
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1699585658
  Commit Message:
    bpf: Factor out helper check_reg_const_str()

ARG_PTR_TO_CONST_STR is used to specify constant string args for BPF
helpers. The logic that verifies a reg is ARG_PTR_TO_CONST_STR is
implemented in check_func_arg().

As we introduce kfuncs with constant string args
  Parent Hashes: 74523c06ae20b83c5508a98af62393ac34913362
  Refs:  it is necessary to
do the same check for kfuncs (in check_kfunc_args). Factor out the logic
for ARG_PTR_TO_CONST_STR to a new check_reg_const_str() so that it can be
reused.

check_func_arg() ensures check_reg_const_str() is only called with reg of
type PTR_TO_MAP_VALUE. Add a redundent type check in check_reg_const_str()
to avoid misuse in the future. Other than this redundent check

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit refactors code to introduce a reusable function for constant string argument verification in BPF helpers and kfuncs.', 'keywords': 'helper, check, refactor', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a46afaa03f6db8c65492302ffdafcb2e769e5667
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a46afaa03f6db8c65492302ffdafcb2e769e5667
  Author Name: Artem Savkov
  Author Email: asavkov@redhat.com
  Commit Date: 1699585658
  Commit Message:
    bpftool: Fix prog object type in manpage

bpftool's man page lists "program" as one of possible values for OBJECT
  Parent Hashes: b0cf0dcde8cae24571b1f382e81328229e475604
  Refs: 
while in fact bpftool accepts "prog" instead.

Reported-by: Jerry Snitselaar <jsnitsel@redhat.com>
Signed-off-by: Artem Savkov <asavkov@redhat.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Acked-by: Quentin Monnet <quentin@isovalent.com>
Link: https://lore.kernel.org/bpf/20231103081126.170034-1-asavkov@redhat.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Corrects the bpftool man page to reflect the correct object type "prog" instead of "program".', 'keywords': 'bpftool,manpage,prog', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 74523c06ae20b83c5508a98af62393ac34913362
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 74523c06ae20b83c5508a98af62393ac34913362
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1699585658
  Commit Message:
    bpf: Add __bpf_dynptr_data* for in kernel use

Different types of bpf dynptr have different internal data storage.
Specifically
  Parent Hashes: 9b75dbeb36fcd9fc7ed51d370310d0518a387769
  Refs:  SKB and XDP type of dynptr may have non-continuous data.
Therefore

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add __bpf_dynptr_data* function for internal kernel use to handle bpf dynptr with non-continuous data storage.', 'keywords': 'bpf,dynptr,kernel', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['xdp like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b0cf0dcde8cae24571b1f382e81328229e475604
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b0cf0dcde8cae24571b1f382e81328229e475604
  Author Name: Manu Bretelle
  Author Email: chantr4@gmail.com
  Commit Date: 1699585658
  Commit Message:
    selftests/bpf: Consolidate VIRTIO/9P configs in config.vm file

Those configs are needed to be able to run VM somewhat consistently.
For instance
  Parent Hashes: e3499962d836af085a621f005978fee20fc87276
  Refs:  ATM

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Consolidate VIRTIO and 9P configuration settings in the config.vm file for consistent VM execution.', 'keywords': 'configs, VM, VIRTIO', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e3499962d836af085a621f005978fee20fc87276
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e3499962d836af085a621f005978fee20fc87276
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585583
  Commit Message:
    Merge branch 'selftests/bpf: Fixes for map_percpu_stats test'

Hou Tao says:

====================
From: Hou Tao <houtao1@huawei.com>

Hi
  Parent Hashes: cd9c127069c040d6b022f1ff32fed4b52b9a4017 2f553b032cad4993969cab356b3b0e306fcd1cd1
  Refs: 

BPF CI failed due to map_percpu_stats_percpu_hash from time to time [1].
It seems that the failure reason is per-cpu bpf memory allocator may not
be able to allocate per-cpu pointer successfully and it can not refill
free llist timely

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes allocation issues in map_percpu_stats test to address BPF CI failures.', 'keywords': 'map_percpu_stats,test,allocation', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cd9c127069c040d6b022f1ff32fed4b52b9a4017
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cd9c127069c040d6b022f1ff32fed4b52b9a4017
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1699585120
  Commit Message:
    Merge branch 'bpf-register-bounds-logic-and-testing-improvements'

Andrii Nakryiko says:

====================
BPF register bounds logic and testing improvements

This patch set adds a big set of manual and auto-generated test cases
validating BPF verifier's register bounds tracking and deduction logic. See
details in the last patch.

We start with building a tester that validates existing <range> vs <scalar>
verifier logic for range bounds. To make all this work
  Parent Hashes: bf4a64b9323f181df8aba32d66cb37b9fa5df959 4621202adc5bc0d1006af37fe8b9aca131387d3c
  Refs:  BPF verifier's logic
needed a bunch of improvements to handle some cases that previously were not
covered. This had no implications as to correctness of verifier logic

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Improves BPF verifier's register bounds logic and adds extensive testing.", 'keywords': 'verifier,bounds,testing', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2f553b032cad4993969cab356b3b0e306fcd1cd1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2f553b032cad4993969cab356b3b0e306fcd1cd1
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1699585120
  Commit Message:
    selftsets/bpf: Retry map update for non-preallocated per-cpu map

BPF CI failed due to map_percpu_stats_percpu_hash from time to time [1].
It seems that the failure reason is per-cpu bpf memory allocator may not
be able to allocate per-cpu pointer successfully and it can not refill
free llist timely
  Parent Hashes: b9b79553163788d3fc42e25c2662c0a46dc9a3c5
  Refs:  and bpf_map_update_elem() will return -ENOMEM.

So mitigate the problem by retrying the update operation for
non-preallocated per-cpu map.

[1]: https://github.com/kernel-patches/bpf/actions/runs/6713177520/job/18244865326?pr=5909

Signed-off-by: Hou Tao <houtao1@huawei.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20231101032455.3808547-4-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Retry map update for non-preallocated per-cpu map to mitigate allocation failure issues.', 'keywords': 'non-preallocated,map update,retry', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4621202adc5bc0d1006af37fe8b9aca131387d3c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4621202adc5bc0d1006af37fe8b9aca131387d3c
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585120
  Commit Message:
    bpf: generalize reg_set_min_max() to handle two sets of two registers

Change reg_set_min_max() to take FALSE/TRUE sets of two registers each
  Parent Hashes: 811476e9cc578cb6c776627ac069dc45a8431791
  Refs: 
instead of assuming that we are always comparing to a constant. For now
we still assume that right-hand side registers are constants (and make
sure that's the case by swapping src/dst regs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance reg_set_min_max to handle two register sets instead of constants in BPF.', 'keywords': 'reg_set_min_max,registers,BPF', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b9b79553163788d3fc42e25c2662c0a46dc9a3c5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b9b79553163788d3fc42e25c2662c0a46dc9a3c5
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1699585120
  Commit Message:
    selftests/bpf: Export map_update_retriable()

Export map_update_retriable() to make it usable for other map_test
cases. These cases may only need retry for specific errno
  Parent Hashes: d79924ca579c647d5dc55f605899c98f7ea04d0f
  Refs:  so add
a new callback parameter to let map_update_retriable() decide whether or
not the errno is retriable.

Signed-off-by: Hou Tao <houtao1@huawei.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20231101032455.3808547-3-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Exported map_update_retriable() for use in other test cases with a new callback for custom errno retries.', 'keywords': 'map_update_retriable, export, errno', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 811476e9cc578cb6c776627ac069dc45a8431791
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 811476e9cc578cb6c776627ac069dc45a8431791
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585120
  Commit Message:
    bpf: prepare reg_set_min_max for second set of registers

Similarly to is_branch_taken()-related refactorings
  Parent Hashes: 4d345887d2e5a1915600cb5d37b16c4088c6ee1c
  Refs:  start preparing
reg_set_min_max() to handle more generic case of two non-const
registers. Start with renaming arguments to accommodate later addition
of second register as an input argument.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231102033759.2541186-17-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactoring reg_set_min_max function to accommodate handling two non-const registers.', 'keywords': 'refactoring, reg_set_min_max, registers', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d79924ca579c647d5dc55f605899c98f7ea04d0f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d79924ca579c647d5dc55f605899c98f7ea04d0f
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1699585120
  Commit Message:
    selftests/bpf: Use value with enough-size when updating per-cpu map

When updating per-cpu map in map_percpu_stats test
  Parent Hashes: cd9c127069c040d6b022f1ff32fed4b52b9a4017
  Refs:  patch_map_thread()
only passes 4-bytes-sized value to bpf_map_update_elem(). The expected
size of the value is 8 * num_possible_cpus()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes the update of per-cpu map with correct value size in selftests for bpf.', 'keywords': 'per-cpu map,bpf_map_update_elem,selftests', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 4d345887d2e5a1915600cb5d37b16c4088c6ee1c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4d345887d2e5a1915600cb5d37b16c4088c6ee1c
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585120
  Commit Message:
    bpf: unify 32-bit and 64-bit is_branch_taken logic

Combine 32-bit and 64-bit is_branch_taken logic for SCALAR_VALUE
registers. It makes it easier to see parallels between two domains
(32-bit and 64-bit)
  Parent Hashes: b74c2a842bba941945279027083fcee1e9aaa73f
  Refs:  and makes subsequent refactoring more
straightforward.

No functional changes.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231102033759.2541186-16-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Combine 32-bit and 64-bit is_branch_taken logic for SCALAR_VALUE registers.', 'keywords': 'unify, is_branch_taken, SCALAR_VALUE', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b74c2a842bba941945279027083fcee1e9aaa73f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b74c2a842bba941945279027083fcee1e9aaa73f
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585120
  Commit Message:
    bpf: generalize is_branch_taken to handle all conditional jumps in one place

Make is_branch_taken() a single entry point for branch pruning decision
making
  Parent Hashes: c697289efe4ef38bc5c62f119cb74433f784b826
  Refs:  handling both pointer vs pointer

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Generalized is_branch_taken function to handle all conditional jumps for branch pruning in BPF.', 'keywords': 'is_branch_taken, branch, conditional', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c697289efe4ef38bc5c62f119cb74433f784b826
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c697289efe4ef38bc5c62f119cb74433f784b826
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585119
  Commit Message:
    bpf: move is_branch_taken() down

Move is_branch_taken() slightly down. In subsequent patched we'll need
both flip_opcode() and is_pkt_ptr_branch_taken() for is_branch_taken()
  Parent Hashes: c31534267c180f7ed00288d239a501b554885300
  Refs: 
but instead of sprinkling forward declarations around

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor to move is_branch_taken() function down for improved code organization.', 'keywords': 'bpf,refactor,branching', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c31534267c180f7ed00288d239a501b554885300
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c31534267c180f7ed00288d239a501b554885300
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585119
  Commit Message:
    bpf: generalize is_branch_taken() to work with two registers

While still assuming that second register is a constant
  Parent Hashes: c2a3ab094683ddc154879a1364fc7cb0228f96a6
  Refs:  generalize
is_branch_taken-related code to accept two registers instead of register
plus explicit constant value. This also

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit generalizes the is_branch_taken() function to work with two registers instead of a register plus a constant.', 'keywords': 'generalize, is_branch_taken, registers', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c2a3ab094683ddc154879a1364fc7cb0228f96a6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c2a3ab094683ddc154879a1364fc7cb0228f96a6
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585119
  Commit Message:
    bpf: rename is_branch_taken reg arguments to prepare for the second one

Just taking mundane refactoring bits out into a separate patch. No
functional changes.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Link: https://lore.kernel.org/r/20231102033759.2541186-12-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 9e314f5d8682e1fe6ac214fb34580a238b6fd3c4
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor bpf function is_branch_taken by renaming register arguments for future enhancements.', 'keywords': 'refactor,bpf,function', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9e314f5d8682e1fe6ac214fb34580a238b6fd3c4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9e314f5d8682e1fe6ac214fb34580a238b6fd3c4
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585119
  Commit Message:
    bpf: drop knowledge-losing __reg_combine_{32
  Parent Hashes: d7f00873817129e62f8c70891cb13c8eafe9feef
  Refs: 64}_into_{64

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Removed unnecessary knowledge-losing reg combine functions in eBPF verifier.', 'keywords': 'knowledge-losing, reg combine, eBPF verifier', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d7f00873817129e62f8c70891cb13c8eafe9feef
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d7f00873817129e62f8c70891cb13c8eafe9feef
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585119
  Commit Message:
    bpf: try harder to deduce register bounds from different numeric domains

There are cases (caught by subsequent reg_bounds tests in selftests/bpf)
where performing one round of __reg_deduce_bounds() doesn't propagate
all the information from
  Parent Hashes: c51d5ad6543cc36334ef1fcd762d0df767a0bf7e
  Refs:  say

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve register bounds deduction in eBPF by enhancing boundary information propagation between numeric domains.', 'keywords': 'register,bounds,reg_deduce_bounds', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c51d5ad6543cc36334ef1fcd762d0df767a0bf7e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c51d5ad6543cc36334ef1fcd762d0df767a0bf7e
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585119
  Commit Message:
    bpf: improve deduction of 64-bit bounds from 32-bit bounds

Add a few interesting cases in which we can tighten 64-bit bounds based
on newly learnt information about 32-bit bounds. E.g.
  Parent Hashes: 6593f2e6741f03b49bffc9d55ddd4c1c47853c39
  Refs:  when full u64/s64
registers are used in BPF program

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit improves deduction of 64-bit bounds from 32-bit bounds in BPF programs.', 'keywords': 'bounds, 64-bit, 32-bit', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6593f2e6741f03b49bffc9d55ddd4c1c47853c39
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6593f2e6741f03b49bffc9d55ddd4c1c47853c39
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585119
  Commit Message:
    bpf: add special smin32/smax32 derivation from 64-bit bounds

Add a special case where we can derive valid s32 bounds from umin/umax
or smin/smax by stitching together negative s32 subrange and
non-negative s32 subrange. That requires upper 32 bits to form a [N
  Parent Hashes: c1efab6468fd5ef541d47d81dbb62cca27f8db3b
  Refs:  N+1]
range in u32 domain (taking into account wrap around

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces special handling to derive 32-bit bounds from 64-bit bounds using negative and non-negative subranges in the BPF verifier.', 'keywords': 'smin32,smax32,64-bit', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c1efab6468fd5ef541d47d81dbb62cca27f8db3b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c1efab6468fd5ef541d47d81dbb62cca27f8db3b
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585119
  Commit Message:
    bpf: derive subreg bounds from full bounds when upper 32 bits are constant

Comments in code try to explain the idea behind why this is correct.
Please check the code and comments.

Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Acked-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231102033759.2541186-6-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: d540517990a9d105bf0312760665964916ac044f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve subreg bounds derivation from full bounds when upper 32 bits are constant in BPF.', 'keywords': 'subreg, bounds, constant', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d540517990a9d105bf0312760665964916ac044f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d540517990a9d105bf0312760665964916ac044f
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585119
  Commit Message:
    bpf: derive smin32/smax32 from umin32/umax32 bounds

All the logic that applies to u64 vs s64
  Parent Hashes: 93f7378734b595fb61e89b802002fb7e3a1267d2
  Refs:  equally applies for u32 vs s32
relationships (just taken in a smaller 32-bit numeric space). So do the
same deduction of smin32/smax32 from umin32/umax32

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit derives smin32/smax32 bounds from umin32/umax32 for 32-bit calculations.', 'keywords': 'smin32, smax32, bounds', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 93f7378734b595fb61e89b802002fb7e3a1267d2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 93f7378734b595fb61e89b802002fb7e3a1267d2
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585119
  Commit Message:
    bpf: derive smin/smax from umin/max bounds

Add smin/smax derivation from appropriate umin/umax values. Previously the
logic was surprisingly asymmetric
  Parent Hashes: f4c7e887324f5776eef6e6e47a90e0ac8058a7a8
  Refs:  trying to derive umin/umax from smin/smax
(if possible)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit improves the logic for deriving signed minimum and maximum from unsigned bounds in eBPF verifier.', 'keywords': 'smin, smax, bounds', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bf4a64b9323f181df8aba32d66cb37b9fa5df959
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bf4a64b9323f181df8aba32d66cb37b9fa5df959
  Author Name: Yuran Pereira
  Author Email: yuran.pereira@hotmail.com
  Commit Date: 1699585118
  Commit Message:
    selftests/bpf: Add malloc failure checks in bpf_iter

Since some malloc calls in bpf_iter may at times fail
  Parent Hashes: fac85c291e141a67fce46bdce01f9ee33aafabfe
  Refs: 
this patch adds the appropriate fail checks

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds malloc failure checks to bpf_iter in selftests/bpf.', 'keywords': 'malloc,failure,bpf_iter', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f4c7e887324f5776eef6e6e47a90e0ac8058a7a8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f4c7e887324f5776eef6e6e47a90e0ac8058a7a8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585118
  Commit Message:
    selftests/bpf: satisfy compiler by having explicit return in btf test

Some compilers complain about get_pprint_mapv_size() not returning value
in some code paths. Fix with explicit return.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231102033759.2541186-3-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 2b62aa59d02ed281fa4fc218df3ca91b773e1e62
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added an explicit return statement in btf test to satisfy compiler requirements.', 'keywords': 'compiler, return, btf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fac85c291e141a67fce46bdce01f9ee33aafabfe
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fac85c291e141a67fce46bdce01f9ee33aafabfe
  Author Name: Yuran Pereira
  Author Email: yuran.pereira@hotmail.com
  Commit Date: 1699585118
  Commit Message:
    selftests/bpf: Convert CHECK macros to ASSERT_* macros in bpf_iter

As it was pointed out by Yonghong Song [1]
  Parent Hashes: 89cdf9d556016a54ff6ddd62324aa5ec790c05cc
  Refs:  in the bpf selftests the use
of the ASSERT_* series of macros is preferred over the CHECK macro.
This patch replaces all CHECK calls in bpf_iter with the appropriate
ASSERT_* macros.

[1] https://lore.kernel.org/lkml/0a142924-633c-44e6-9a92-2dc019656bf2@linux.dev

Suggested-by: Yonghong Song <yonghong.song@linux.dev>
Signed-off-by: Yuran Pereira <yuran.pereira@hotmail.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Acked-by: Kui-Feng Lee <thinker.li@gmail.com>
Link: https://lore.kernel.org/r/DB3PR10MB6835E9C8DFCA226DD6FEF914E8A3A@DB3PR10MB6835.EURPRD10.PROD.OUTLOOK.COM
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Convert CHECK macros to ASSERT_* macros in bpf_iter selftests.', 'keywords': 'selftests,bpf_iter,macros', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2b62aa59d02ed281fa4fc218df3ca91b773e1e62
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2b62aa59d02ed281fa4fc218df3ca91b773e1e62
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1699585118
  Commit Message:
    selftests/bpf: fix RELEASE=1 build for tc_opts

Compiler complains about malloc(). We also don't need to dynamically
allocate anything
  Parent Hashes: bf4a64b9323f181df8aba32d66cb37b9fa5df959
  Refs:  so make the life easier by using statically sized
buffer.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231102033759.2541186-2-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix static buffer allocation issue for tc_opts in bpf selftests to address malloc() compiler complaints.', 'keywords': 'selftests,bpf,static buffer', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 89cdf9d556016a54ff6ddd62324aa5ec790c05cc
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 89cdf9d556016a54ff6ddd62324aa5ec790c05cc
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1699578575
  Commit Message:
    Merge tag 'net-6.7-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 "Including fixes from netfilter and bpf.

  Current release - regressions:

   - sched: fix SKB_NOT_DROPPED_YET splat under debug config

  Current release - new code bugs:

   - tcp:
       - fix usec timestamps with TCP fastopen
       - fix possible out-of-bounds reads in tcp_hash_fail()
       - fix SYN option room calculation for TCP-AO

   - tcp_sigpool: fix some off by one bugs

   - bpf: fix compilation error without CGROUPS

   - ptp:
       - ptp_read() should not release queue
       - fix tsevqs corruption

  Previous releases - regressions:

   - llc: verify mac len before reading mac header

  Previous releases - always broken:

   - bpf:
       - fix check_stack_write_fixed_off() to correctly spill imm
       - fix precision tracking for BPF_ALU | BPF_TO_BE | BPF_END
       - check map->usercnt after timer->timer is assigned

   - dsa: lan9303: consequently nested-lock physical MDIO

   - dccp/tcp: call security_inet_conn_request() after setting IP addr

   - tg3: fix the TX ring stall due to incorrect full ring handling

   - phylink: initialize carrier state at creation

   - ice: fix direction of VF rules in switchdev mode

  Misc:

   - fill in a bunch of missing MODULE_DESCRIPTION()s
  Parent Hashes: 3b220413438184b352b297e7cf593fa56999b5b3 83b9dda8afa4e968d9cce253f390b01c0612a2a5
  Refs:  more to come"

* tag 'net-6.7-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (84 commits)
  net: ti: icss-iep: fix setting counter value
  ptp: fix corrupted list in ptp_open
  ptp: ptp_read should not release queue
  net_sched: sch_fq: better validate TCA_FQ_WEIGHTS and TCA_FQ_PRIOMAP
  net: kcm: fill in MODULE_DESCRIPTION()
  net/sched: act_ct: Always fill offloading tuple iifidx
  netfilter: nat: fix ipv6 nat redirect with mapped and scoped addresses
  netfilter: xt_recent: fix (increase) ipv6 literal buffer length
  ipvs: add missing module descriptions
  netfilter: nf_tables: remove catchall element in GC sync path
  netfilter: add missing module descriptions
  drivers/net/ppp: use standard array-copy-function
  net: enetc: shorten enetc_setup_xdp_prog() error message to fit NETLINK_MAX_FMTMSG_LEN
  virtio/vsock: Fix uninit-value in virtio_transport_recv_pkt()
  r8169: respect userspace disabling IFF_MULTICAST
  selftests/bpf: get trusted cgrp from bpf_iter__cgroup directly
  bpf: Let verifier consider {task

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes addressing regressions and bugs for netfilter, bpf, and tcp subsystems.', 'keywords': 'networking, fixes, bpf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0008454e8fd30ed0017a9a35b8dd708f168931b8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0008454e8fd30ed0017a9a35b8dd708f168931b8
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1699572347
  Commit Message:
    cgroup: Add annotation for holding namespace_sem in current_cgns_cgroup_from_root()

When I initially examined the function current_cgns_cgroup_from_root()
  Parent Hashes: 9067d90006df089b9a1da0d74f0cad232a5d726a
  Refs:  I
was perplexed by its lack of holding cgroup_mutex. However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added annotation for holding namespace_sem in the cgroup function current_cgns_cgroup_from_root().', 'keywords': 'annotation, cgroup, namespace_sem', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 6512b6aa237db36d881a81cc312db39668e61853
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6512b6aa237db36d881a81cc312db39668e61853
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1699548573
  Commit Message:
    perf bpf: Don't synthesize BPF events when disabled

If BPF sideband events are disabled on the command line
  Parent Hashes: 6aad765d10c5cd8a62b258c359bae643ab2d45da
  Refs:  don't
synthesize BPF events too.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Song Liu <song@kernel.org>
Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Andi Kleen <ak@linux.intel.com>
Cc: Athira Jajeev <atrajeev@linux.vnet.ibm.com>
Cc: Changbin Du <changbin.du@huawei.com>
Cc: Colin Ian King <colin.i.king@gmail.com>
Cc: Dmitrii Dolgov <9erthalion6@gmail.com>
Cc: German Gomez <german.gomez@arm.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: James Clark <james.clark@arm.com>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: K Prateek Nayak <kprateek.nayak@amd.com>
Cc: Kajol Jain <kjain@linux.ibm.com>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: Leo Yan <leo.yan@linaro.org>
Cc: Li Dong <lidong@vivo.com>
Cc: Liam Howlett <liam.howlett@oracle.com>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Masami Hiramatsu <mhiramat@kernel.org>
Cc: Miguel Ojeda <ojeda@kernel.org>
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Namhyung Kim <namhyung@kernel.org>
Cc: Nick Terrell <terrelln@fb.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Sandipan Das <sandipan.das@amd.com>
Cc: Sean Christopherson <seanjc@google.com>
Cc: Steinar H. Gunderson <sesse@google.com>
Cc: Vincent Whitchurch <vincent.whitchurch@axis.com>
Cc: Wenyu Liu <liuwenyu7@huawei.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Link: https://lore.kernel.org/r/20231102175735.2272696-13-irogers@google.com
Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Disable synthesis of BPF events in perf tool when sideband events are disabled via command line.', 'keywords': 'BPF,perf,events', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 942b8b38de3fd38de1476b2abca562e729caa03d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 942b8b38de3fd38de1476b2abca562e729caa03d
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1699494974
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf

Daniel Borkmann says:

====================
pull-request: bpf 2023-11-08

We've added 16 non-merge commits during the last 6 day(s) which contain
a total of 30 files changed
  Parent Hashes: 9bc64bd0cd765f696fcd40fc98909b1f7c73b2ba 8e1b802503bb630eafc3e97b2daf755368ec96e1
  Refs:  341 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "The commit merges the 'for-netdev' branch containing non-merge commits affecting 30 files into the main branch.", 'keywords': 'merge, for-netdev, files', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1d375d65466e5c8d7a9406826d80d475a22e8c6d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1d375d65466e5c8d7a9406826d80d475a22e8c6d
  Author Name: Hengqi Chen
  Author Email: hengqi.chen@gmail.com
  Commit Date: 1699423941
  Commit Message:
    selftests/bpf: Enable cpu v4 tests for LoongArch

Enable the cpu v4 tests for LoongArch. Currently
  Parent Hashes: 7b6b13d32965ad7f1eb889d1a7058868a88eb29f
  Refs:  we don't have BPF
trampoline in LoongArch JIT

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable cpu v4 tests for LoongArch in the BPF selftests.', 'keywords': 'cpu v4, LoongArch, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 8e1b802503bb630eafc3e97b2daf755368ec96e1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8e1b802503bb630eafc3e97b2daf755368ec96e1
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1699399686
  Commit Message:
    Merge branch 'Let BPF verifier consider {task
  Parent Hashes: d84b139f53e8fa8048f16814c6b2a53d7bc15c3d 3c5864ba9cf912ff9809f315d28f296f21563cce
  Refs: cgroup} is trusted in bpf_iter_reg'

Chuyi Zhou says:

====================
The patchset aims to let the BPF verivier consider
bpf_iter__cgroup->cgroup and bpf_iter__task->task is trusted suggested by
Alexei[1].

Please see individual patches for more details. And comments are always
welcome.

Link[1]:https://lore.kernel.org/bpf/20231022154527.229117-1-zhouchuyi@bytedance.com/T/#mb57725edc8ccdd50a1b165765c7619b4d65ed1b0

v2->v1:
 * Patch #1: Add Yonghong's ack and add description of similar case in
   log.
 * Patch #2: Add Yonghong's ack
====================

Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhances the BPF verifier to trust specific cgroup and task iterators in bpf_iter_reg.', 'keywords': 'BPF verifier, trusted, iterators', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3c5864ba9cf912ff9809f315d28f296f21563cce
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3c5864ba9cf912ff9809f315d28f296f21563cce
  Author Name: Chuyi Zhou
  Author Email: zhouchuyi@bytedance.com
  Commit Date: 1699399686
  Commit Message:
    selftests/bpf: get trusted cgrp from bpf_iter__cgroup directly

Commit f49843afde (selftests/bpf: Add tests for css_task iter combining
with cgroup iter) added a test which demonstrates how css_task iter can be
combined with cgroup iter. That test used bpf_cgroup_from_id() to convert
bpf_iter__cgroup->cgroup to a trusted ptr which is pointless now
  Parent Hashes: 0de4f50de25af79c2a46db55d70cdbd8f985c6d1
  Refs:  since
with the previous fix

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates the test to retrieve the trusted cgroup from bpf_iter__cgroup directly.', 'keywords': 'trusted cgroup, bpf_iter, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 0de4f50de25af79c2a46db55d70cdbd8f985c6d1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0de4f50de25af79c2a46db55d70cdbd8f985c6d1
  Author Name: Chuyi Zhou
  Author Email: zhouchuyi@bytedance.com
  Commit Date: 1699399465
  Commit Message:
    bpf: Let verifier consider {task
  Parent Hashes: d84b139f53e8fa8048f16814c6b2a53d7bc15c3d
  Refs: cgroup} is trusted in bpf_iter_reg

BTF_TYPE_SAFE_TRUSTED(struct bpf_iter__task) in verifier.c wanted to
teach BPF verifier that bpf_iter__task -> task is a trusted ptr. But it
doesn't work well.

The reason is

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix BPF verifier to correctly trust the task pointer in bpf_iter__task context.', 'keywords': 'BPF verifier, trusted pointer, bpf_iter__task', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 707df298cbde200b939c70be2577b20775fe3345
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 707df298cbde200b939c70be2577b20775fe3345
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1699042059
  Commit Message:
    Merge tag 'powerpc-6.7-1' of git://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux

Pull powerpc updates from Michael Ellerman:

 - Add support for KVM running as a nested hypervisor under development
   versions of PowerVM
  Parent Hashes: 6bdfe2d88b9ff8b0cce32ce87cd47c0e9d665f48 303d77a6e1707498f09c9d8ee91b1dc07ca315a5
  Refs:  using the new PAPR nested virtualisation API

 - Add support for the BPF prog pack allocator

 - A rework of the non-server MMU handling to support execute-only on
   all platforms

 - Some optimisations & cleanups for the powerpc qspinlock code

 - Various other small features and fixes

Thanks to Aboorva Devarajan

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges powerpc updates including nested KVM support, BPF prog pack allocator, MMU rework, and qspinlock optimizations.', 'keywords': 'nested KVM,BPF prog,optimizations', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 7ab89417ed235f56d84c7893d38d4905e38d2692
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7ab89417ed235f56d84c7893d38d4905e38d2692
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1699035458
  Commit Message:
    Merge tag 'perf-tools-for-v6.7-1-2023-11-01' of git://git.kernel.org/pub/scm/linux/kernel/git/perf/perf-tools

Pull perf tools updates from Namhyung Kim:
 "Build:

   - Compile BPF programs by default if clang (>= 12.0.1) is available
     to enable more features like kernel lock contention
  Parent Hashes: 31e5f934ff962820995c82a6953176a1c7d18ff5 fed3a1be6433e15833068c701bfde7b422d8b988
  Refs:  off-cpu
     profiling

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge updates to perf tools for enabling BPF program compilation with clang if available.', 'keywords': 'perf tools, BPF, clang', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['tracepoints like programs', 'profile like programs']}
--------------------
--------------------
Processing Commit ID: 851bbccf6b0c152d98ecf0ec83d75fc97aebf43c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 851bbccf6b0c152d98ecf0ec83d75fc97aebf43c
  Author Name: Arnaldo Carvalho de Melo
  Author Email: acme@redhat.com
  Commit Date: 1699025158
  Commit Message:
    perf build: Warn about missing libelf before warning about missing libbpf

As libelf is a requirement for libbpf if it is not available
  Parent Hashes: c8e3ade38bc6545faece71cc6c642ad744d4cea3
  Refs:  as in some
container build tests where NO_LIBELF=1 is used

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Update perf build script to warn about missing libelf before missing libbpf.', 'keywords': 'perf,libelf,libbpf', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: d84b139f53e8fa8048f16814c6b2a53d7bc15c3d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d84b139f53e8fa8048f16814c6b2a53d7bc15c3d
  Author Name: Björn Töpel
  Author Email: bjorn@rivosinc.com
  Commit Date: 1698937041
  Commit Message:
    selftests/bpf: Fix broken build where char is unsigned

There are architectures where char is not signed. If so
  Parent Hashes: 94e88b8a3e50d3e60c3ba6a5c316729587595210
  Refs:  the following
error is triggered:

  | xdp_hw_metadata.c:435:42: error: result of comparison of constant -1 \
  |   with expression of type 'char' is always true \
  |   [-Werror

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix build error in selftests/bpf due to unsigned char architecture issue.', 'keywords': 'selftests,bpf,unsigned', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs', 'other']}
--------------------
--------------------
Processing Commit ID: 94e88b8a3e50d3e60c3ba6a5c316729587595210
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 94e88b8a3e50d3e60c3ba6a5c316729587595210
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1698904468
  Commit Message:
    Merge branch 'bpf-fix-precision-tracking-for-bpf_alu-bpf_to_be-bpf_end'

Shung-Hsi Yu says:

====================
bpf: Fix precision tracking for BPF_ALU | BPF_TO_BE | BPF_END

Changes since v1:
- add test for negation and bswap (Alexei
  Parent Hashes: 698b8c5e3b5505ac00102caf9e4843b71192b586 3c41971550f58f2e006c58aa71e8c23ad312110f
  Refs:  Eduard)
- add test for BPF_TO_LE as well to cover all types of BPF_END opcode
- remove vals map and trigger backtracking with jump instead

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes precision tracking for BPF_ALU, BPF_TO_BE, BPF_END and adds relevant tests.', 'keywords': 'precision, BPF_ALU, BPF_END', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3c41971550f58f2e006c58aa71e8c23ad312110f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3c41971550f58f2e006c58aa71e8c23ad312110f
  Author Name: Shung-Hsi Yu
  Author Email: shung-hsi.yu@suse.com
  Commit Date: 1698904468
  Commit Message:
    selftests/bpf: precision tracking test for BPF_NEG and BPF_END

As seen from previous commit that fix backtracking for BPF_ALU | BPF_TO_BE
| BPF_END
  Parent Hashes: 291d044fd51f8484066300ee42afecf8c8db7b3a
  Refs:  both BPF_NEG and BPF_END require special handling. Add tests
written with inline assembly to check that the verifier does not incorrecly
use the src_reg field of BPF_NEG and BPF_END (including bswap added in v4).

Suggested-by: Eduard Zingerman <eddyz87@gmail.com>
Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Link: https://lore.kernel.org/r/20231102053913.12004-4-shung-hsi.yu@suse.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add tests for precision tracking of BPF_NEG and BPF_END handling in verifier.', 'keywords': 'precision tracking,test cases,BPF_NEG', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 291d044fd51f8484066300ee42afecf8c8db7b3a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 291d044fd51f8484066300ee42afecf8c8db7b3a
  Author Name: Shung-Hsi Yu
  Author Email: shung-hsi.yu@suse.com
  Commit Date: 1698904467
  Commit Message:
    bpf: Fix precision tracking for BPF_ALU | BPF_TO_BE | BPF_END

BPF_END and BPF_NEG has a different specification for the source bit in
the opcode compared to other ALU/ALU64 instructions
  Parent Hashes: 698b8c5e3b5505ac00102caf9e4843b71192b586
  Refs:  and is either
reserved or use to specify the byte swap endianness. In both cases the
source bit does not encode source operand location

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed precision tracking for BPF_ALU, BPF_TO_BE, and BPF_END instructions in eBPF.', 'keywords': 'precision tracking, BPF_ALU, BPF_END', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 698b8c5e3b5505ac00102caf9e4843b71192b586
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 698b8c5e3b5505ac00102caf9e4843b71192b586
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1698904160
  Commit Message:
    Merge branch 'relax-allowlist-for-open-coded-css_task-iter'

Chuyi Zhou says:

====================
Relax allowlist for open-coded css_task iter

Hi
  Parent Hashes: 9af3775962afa8b5cd0cc30c1e454405a650c1f3 d8234d47c4aa494d789b85562fa90e837b4575f9
  Refs: 
The patchset aims to relax the allowlist for open-coded css_task iter
suggested by Alexei[1].

Please see individual patches for more details. And comments are always
welcome.

Patch summary:
 * Patch #1: Relax the allowlist and let css_task iter can be used in
   bpf iters and any sleepable progs.
 * Patch #2: Add a test in cgroup_iters.c which demonstrates how
   css_task iters can be combined with cgroup iter.
 * Patch #3: Add a test to prove css_task iter can be used in normal
 * sleepable progs.
link[1]:https://lore.kernel.org/lkml/CAADnVQKafk_junRyE=-FVAik4hjTRDtThymYGEL8hGTuYoOGpA@mail.gmail.com/
---

Changes in v2:
 * Fix the incorrect logic in check_css_task_iter_allowlist. Use
   expected_attach_type to check whether we are using bpf_iters.
 * Link to v1:https://lore.kernel.org/bpf/20231022154527.229117-1-zhouchuyi@bytedance.com/T/#m946f9cde86b44a13265d9a44c5738a711eb578fd
Changes in v3:
 * Add a testcase to prove css_task can be used in fentry.s
 * Link to v2:https://lore.kernel.org/bpf/20231024024240.42790-1-zhouchuyi@bytedance.com/T/#m14a97041ff56c2df21bc0149449abd275b73f6a3
Changes in v4:
 * Add Yonghong's ack for patch #1 and patch #2.
 * Solve Yonghong's comments for patch #2
 * Move prog 'iter_css_task_for_each_sleep' from iters_task_failure.c to
   iters_css_task.c. Use RUN_TESTS to prove we can load this prog.
 * Link to v3:https://lore.kernel.org/bpf/20231025075914.30979-1-zhouchuyi@bytedance.com/T/#m3200d8ad29af4ffab97588e297361d0a45d7585d

---
====================

Link: https://lore.kernel.org/r/20231031050438.93297-1-zhouchuyi@bytedance.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit relaxes the allowlist for open-coded css_task iter in BPF iters and introduces associated tests.', 'keywords': 'allowlist, css_task, bpf iters', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['cgroup like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d8234d47c4aa494d789b85562fa90e837b4575f9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d8234d47c4aa494d789b85562fa90e837b4575f9
  Author Name: Chuyi Zhou
  Author Email: zhouchuyi@bytedance.com
  Commit Date: 1698904160
  Commit Message:
    selftests/bpf: Add test for using css_task iter in sleepable progs

This Patch add a test to prove css_task iter can be used in normal
sleepable progs.

Signed-off-by: Chuyi Zhou <zhouchuyi@bytedance.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20231031050438.93297-4-zhouchuyi@bytedance.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: f49843afde6771ef6ed5d021eacafacfc98a58bf
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Adds a test to validate the use of css_task iter in sleepable eBPF programs.', 'keywords': 'selftests, css_task, sleepable', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', "It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: f49843afde6771ef6ed5d021eacafacfc98a58bf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f49843afde6771ef6ed5d021eacafacfc98a58bf
  Author Name: Chuyi Zhou
  Author Email: zhouchuyi@bytedance.com
  Commit Date: 1698904160
  Commit Message:
    selftests/bpf: Add tests for css_task iter combining with cgroup iter

This patch adds a test which demonstrates how css_task iter can be combined
with cgroup iter and it won't cause deadlock
  Parent Hashes: 3091b667498b0a212e760e1033e5f9b8c33a948f
  Refs:  though cgroup iter is not
sleepable.

Signed-off-by: Chuyi Zhou <zhouchuyi@bytedance.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20231031050438.93297-3-zhouchuyi@bytedance.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests demonstrating the combination of css_task iter with cgroup iter to avoid deadlock.', 'keywords': 'css_task iter,cgroup iter,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 3091b667498b0a212e760e1033e5f9b8c33a948f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3091b667498b0a212e760e1033e5f9b8c33a948f
  Author Name: Chuyi Zhou
  Author Email: zhouchuyi@bytedance.com
  Commit Date: 1698904160
  Commit Message:
    bpf: Relax allowlist for css_task iter

The newly added open-coded css_task iter would try to hold the global
css_set_lock in bpf_iter_css_task_new
  Parent Hashes: 9af3775962afa8b5cd0cc30c1e454405a650c1f3
  Refs:  so the bpf side has to be careful in
where it allows to use this iter. The mainly concern is dead locking on
css_set_lock. check_css_task_iter_allowlist() in verifier enforced css_task
can only be used in bpf_lsm hooks and sleepable bpf_iter.

This patch relax the allowlist for css_task iter. Any lsm and any iter
(even non-sleepable) and any sleepable are safe since they would not hold
the css_set_lock before entering BPF progs context.

This patch also fixes the misused BPF_TRACE_ITER in
check_css_task_iter_allowlist which compared bpf_prog_type with
bpf_attach_type.

Fixes: 9c66dc94b62ae ("bpf: Introduce css_task open-coded iterator kfuncs")
Signed-off-by: Chuyi Zhou <zhouchuyi@bytedance.com>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20231031050438.93297-2-zhouchuyi@bytedance.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit relaxes the allowlist for css_task iterator to prevent deadlocks on css_set_lock in BPF programs.', 'keywords': 'relax allowlist css_task', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['LSM like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9af3775962afa8b5cd0cc30c1e454405a650c1f3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9af3775962afa8b5cd0cc30c1e454405a650c1f3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1698903758
  Commit Message:
    selftests/bpf: fix test_maps' use of bpf_map_create_opts

Use LIBBPF_OPTS() macro to properly initialize bpf_map_create_opts in
test_maps' tests.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Yonghong Song <yonghong.song@linux.dev>
Link: https://lore.kernel.org/r/20231029011509.2479232-1-andrii@kernel.org
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: fd381ce60a2d79cc967506208085336d3d268ae0
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes initialization of bpf_map_create_opts in selftests/bpf using LIBBPF_OPTS() macro.', 'keywords': 'selftests,bpf,LIBBPF_OPTS', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: fd381ce60a2d79cc967506208085336d3d268ae0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: fd381ce60a2d79cc967506208085336d3d268ae0
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1698903451
  Commit Message:
    bpf: Check map->usercnt after timer->timer is assigned

When there are concurrent uref release and bpf timer init operations
  Parent Hashes: 15fb6f2b6c4c3c129adc2412ae12ec15e60a6adb
  Refs: 
the following sequence diagram is possible. It will break the guarantee
provided by bpf_timer: bpf_timer will still be alive after userspace
application releases or unpins the map. It also will lead to kmemleak
for old kernel version which doesn't release bpf_timer when map is
released.

bpf program X:

bpf_timer_init()
  lock timer->lock
    read timer->timer as NULL
    read map->usercnt != 0

                process Y:

                close(map_fd)
                  // put last uref
                  bpf_map_put_uref()
                    atomic_dec_and_test(map->usercnt)
                      array_map_free_timers()
                        bpf_timer_cancel_and_free()
                          // just return
                          read timer->timer is NULL

    t = bpf_map_kmalloc_node()
    timer->timer = t
  unlock timer->lock

Fix the problem by checking map->usercnt after timer->timer is assigned

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a race condition between BPF timer initialization and user reference release leading to memory leak in bpf programs.', 'keywords': 'bpf,timer,map', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 15fb6f2b6c4c3c129adc2412ae12ec15e60a6adb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 15fb6f2b6c4c3c129adc2412ae12ec15e60a6adb
  Author Name: Dave Marchevsky
  Author Email: davemarchevsky@fb.com
  Commit Date: 1698903233
  Commit Message:
    bpf: Add __bpf_hook_{start
  Parent Hashes: 391145ba2accc48b596f3d438af1a6255b62a555
  Refs: end} macros

Not all uses of __diag_ignore_all(...) in BPF-related code in order to
suppress warnings are wrapping kfunc definitions. Some "hook point"
definitions - small functions meant to be used as attach points for
fentry and similar BPF progs - need to suppress -Wmissing-declarations.

We could use __bpf_kfunc_{start

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add macros for suppressing missing declaration warnings in BPF-related hook point definitions.', 'keywords': 'macros,suppress,warnings', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 391145ba2accc48b596f3d438af1a6255b62a555
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 391145ba2accc48b596f3d438af1a6255b62a555
  Author Name: Dave Marchevsky
  Author Email: davemarchevsky@fb.com
  Commit Date: 1698903233
  Commit Message:
    bpf: Add __bpf_kfunc_{start
  Parent Hashes: cd60f410ddc0cd663045d15936155421b6f708fd
  Refs: end}_defs macros

BPF kfuncs are meant to be called from BPF programs. Accordingly

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces macros for BPF kfunc definitions to support calling them from BPF programs.', 'keywords': 'kfuncs,macros,BPF', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cd60f410ddc0cd663045d15936155421b6f708fd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cd60f410ddc0cd663045d15936155421b6f708fd
  Author Name: Manu Bretelle
  Author Email: chantr4@gmail.com
  Commit Date: 1698903101
  Commit Message:
    selftests/bpf: fix test_bpffs

Currently this tests tries to umount /sys/kernel/debug (TDIR) but the
system it is running on may have mounts below.

For example
  Parent Hashes: b479d38ba959a8e3ffc4d9f760a9f2e4b9027e66
  Refs:  danobi/vmtest [0] VMs have
    mount -t tracefs tracefs /sys/kernel/debug/tracing
as part of their init.

This change instead creates a "random" directory under /tmp and uses this
as TDIR.
If the directory already exists

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes the test_bpffs by using a temporary directory instead of umounting /sys/kernel/debug.', 'keywords': 'selftests,bpf,test_bpffs', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b479d38ba959a8e3ffc4d9f760a9f2e4b9027e66
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b479d38ba959a8e3ffc4d9f760a9f2e4b9027e66
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1698903028
  Commit Message:
    Merge branch 'bpf-fix-incorrect-immediate-spill'

Hao Sun says:

====================
bpf: Fix incorrect immediate spill

Immediate is incorrectly cast to u32 before being spilled
  Parent Hashes: 05670f81d1287c40ec861186e4c4e3401013e7fb 85eb035e6cfd615071256592e1dbe72c1d99c24b
  Refs:  losing sign
information. The range information is incorrect after load again. Fix
immediate spill by remove the cast. The second patch add a test case
for this.

Signed-off-by: Hao Sun <sunhao.th@gmail.com>
---
Changes in v3:
- Change the expected log to fix the test case
- Link to v2: https://lore.kernel.org/r/20231101-fix-check-stack-write-v2-0-cb7c17b869b0@gmail.com

Changes in v2:
- Add fix and cc tags.
- Link to v1: https://lore.kernel.org/r/20231026-fix-check-stack-write-v1-0-6b325ef3ce7e@gmail.com

---
====================

Link: https://lore.kernel.org/r/20231101-fix-check-stack-write-v3-0-f05c2b1473d5@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes an issue with immediate value spill and adds a test case to validate the correction.', 'keywords': 'fix, immediate, spill', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 85eb035e6cfd615071256592e1dbe72c1d99c24b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 85eb035e6cfd615071256592e1dbe72c1d99c24b
  Author Name: Hao Sun
  Author Email: sunhao.th@gmail.com
  Commit Date: 1698903027
  Commit Message:
    selftests/bpf: Add test for immediate spilled to stack

Add a test to check if the verifier correctly reason about the sign
of an immediate spilled to stack by BPF_ST instruction.

Signed-off-by: Hao Sun <sunhao.th@gmail.com>
Link: https://lore.kernel.org/r/20231101-fix-check-stack-write-v3-2-f05c2b1473d5@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 811c363645b33e6e22658634329e95f383dfc705
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a test case to verify immediate spill to stack in eBPF selftests.', 'keywords': 'test, immediate, stack', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 811c363645b33e6e22658634329e95f383dfc705
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 811c363645b33e6e22658634329e95f383dfc705
  Author Name: Hao Sun
  Author Email: sunhao.th@gmail.com
  Commit Date: 1698903027
  Commit Message:
    bpf: Fix check_stack_write_fixed_off() to correctly spill imm

In check_stack_write_fixed_off()
  Parent Hashes: 05670f81d1287c40ec861186e4c4e3401013e7fb
  Refs:  imm value is cast to u32 before being
spilled to the stack. Therefore

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed the check_stack_write_fixed_off function to properly cast and spill imm values to the stack.', 'keywords': 'bpf, fix, spill', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 05670f81d1287c40ec861186e4c4e3401013e7fb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 05670f81d1287c40ec861186e4c4e3401013e7fb
  Author Name: Matthieu Baerts
  Author Email: matttbe@kernel.org
  Commit Date: 1698902905
  Commit Message:
    bpf: fix compilation error without CGROUPS

Our MPTCP CI complained [1] -- and KBuild too -- that it was no longer
possible to build the kernel without CONFIG_CGROUPS:

  kernel/bpf/task_iter.c: In function 'bpf_iter_css_task_new':
  kernel/bpf/task_iter.c:919:14: error: 'CSS_TASK_ITER_PROCS' undeclared (first use in this function)
    919 |         case CSS_TASK_ITER_PROCS | CSS_TASK_ITER_THREADED:
        |              ^~~~~~~~~~~~~~~~~~~
  kernel/bpf/task_iter.c:919:14: note: each undeclared identifier is reported only once for each function it appears in
  kernel/bpf/task_iter.c:919:36: error: 'CSS_TASK_ITER_THREADED' undeclared (first use in this function)
    919 |         case CSS_TASK_ITER_PROCS | CSS_TASK_ITER_THREADED:
        |                                    ^~~~~~~~~~~~~~~~~~~~~~
  kernel/bpf/task_iter.c:927:60: error: invalid application of 'sizeof' to incomplete type 'struct css_task_iter'
    927 |         kit->css_it = bpf_mem_alloc(&bpf_global_ma
  Parent Hashes: 2b7ac0c87d985c92e519995853c52b9649ea4b07
  Refs:  sizeof(struct css_task_iter));
        |                                                            ^~~~~~
  kernel/bpf/task_iter.c:930:9: error: implicit declaration of function 'css_task_iter_start'; did you mean 'task_seq_start'? [-Werror=implicit-function-declaration]
    930 |         css_task_iter_start(css

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix compilation error in BPF task iterator when CONFIG_CGROUPS is not enabled in kernel build.', 'keywords': 'BPF, compilation, CONFIG_CGROUPS', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f5277ad1e9768dbd05b1ae8dcdba690215d8c5b7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f5277ad1e9768dbd05b1ae8dcdba690215d8c5b7
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1698873394
  Commit Message:
    Merge tag 'for-6.7/io_uring-sockopt-2023-10-30' of git://git.kernel.dk/linux

Pull io_uring {get
  Parent Hashes: ffa059b262ba72571e7fefe7fa2b4ebb6776b277 b9ec913212e6e91efa5a0a612c4a8ec4cf5da896
  Refs: set}sockopt support from Jens Axboe:
 "This adds support for using getsockopt and setsockopt via io_uring.

  The main use cases for this is to enable use of direct descriptors

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge io_uring getsockopt and setsockopt support for direct descriptors.', 'keywords': 'io_uring, getsockopt, setsockopt', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a6bdc082ad1c91d389a6ba0c7a1945818f732114
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a6bdc082ad1c91d389a6ba0c7a1945818f732114
  Author Name: Huacai Chen
  Author Email: chenhuacai@loongson.cn
  Commit Date: 1698807300
  Commit Message:
    Merge 'bpf-next 2023-10-16' into loongarch-next

LoongArch architecture changes for 6.7 (BPF CPU v4 support) depend on
the bpf changes to fix conflictions in selftests and work
  Parent Hashes: ffc253263a1375a65fa6c9f62a893e9767fbebfa 99c9991f4e5d77328187187d0c921a3b62bfa998
  Refs:  so merge them
to create a base.


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge LoongArch architecture changes with bpf-next tree for conflict resolution in selftests.', 'keywords': 'Merge, LoongArch, selftests', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 89ed67ef126c4160349c1b96fdb775ea6170ac90
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 89ed67ef126c4160349c1b96fdb775ea6170ac90
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1698765011
  Commit Message:
    Merge tag 'net-next-6.7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next

Pull networking updates from Jakub Kicinski:
 "Core & protocols:

   - Support usec resolution of TCP timestamps
  Parent Hashes: 5a6a09e97199d6600d31383055f9d43fbbcbe86f f1c73396133cb3d913e2075298005644ee8dfade
  Refs:  enabled selectively by a
     route attribute.

   - Defer regular TCP ACK while processing socket backlog

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking updates including TCP timestamp resolution enhancements.', 'keywords': 'networking,TCP,updates', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 14ab6d425e80674b6a0145f05719b11e82e64824
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 14ab6d425e80674b6a0145f05719b11e82e64824
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1698695233
  Commit Message:
    Merge tag 'vfs-6.7.ctime' of gitolite.kernel.org:pub/scm/linux/kernel/git/vfs/vfs

Pull vfs inode time accessor updates from Christian Brauner:
 "This finishes the conversion of all inode time fields to accessor
  functions as discussed on list. Changing timestamps manually as we
  used to do before is error prone. Using accessors function makes this
  robust.

  It does not contain the switch of the time fields to discrete 64 bit
  integers to replace struct timespec and free up space in struct inode.
  But after this
  Parent Hashes: 7352a6765cf5d95888b3952ac89efbb817b4c3cf 12cd44023651666bd44baa36a5c999698890debb
  Refs:  the switch can be trivially made and the patch should
  only affect the vfs if we decide to do it"

* tag 'vfs-6.7.ctime' of gitolite.kernel.org:pub/scm/linux/kernel/git/vfs/vfs: (86 commits)
  fs: rename inode i_atime and i_mtime fields
  security: convert to new timestamp accessors
  selinux: convert to new timestamp accessors
  apparmor: convert to new timestamp accessors
  sunrpc: convert to new timestamp accessors
  mm: convert to new timestamp accessors
  bpf: convert to new timestamp accessors
  ipc: convert to new timestamp accessors
  linux: convert to new timestamp accessors
  zonefs: convert to new timestamp accessors
  xfs: convert to new timestamp accessors
  vboxsf: convert to new timestamp accessors
  ufs: convert to new timestamp accessors
  udf: convert to new timestamp accessors
  ubifs: convert to new timestamp accessors
  tracefs: convert to new timestamp accessors
  sysv: convert to new timestamp accessors
  squashfs: convert to new timestamp accessors
  server: convert to new timestamp accessors
  client: convert to new timestamp accessors
  ...


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This merge updates inode time fields to use accessor functions, enhancing robustness and reducing errors.', 'keywords': 'inode,timestamp,accessors', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1768d3a0144c7aae55b9cee66dabf94946eec01e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1768d3a0144c7aae55b9cee66dabf94946eec01e
  Author Name: Arnaldo Carvalho de Melo
  Author Email: acme@kernel.org
  Commit Date: 1698460053
  Commit Message:
    perf build: Disable BPF skeletons if clang version is < 12.0.1

While building on a wide range of distros and clang versions it was
noticed that at least version 12.0.1 (noticed on Alpine 3.15 with
"Alpine clang version 12.0.1") is needed to not fail with BTF generation
errors such as:

Debian:10

  Debian clang version 11.0.1-2~deb10u1:

    CLANG   /tmp/build/perf/util/bpf_skel/.tmp/sample_filter.bpf.o
  <SNIP>
    GENSKEL /tmp/build/perf/util/bpf_skel/sample_filter.skel.h
  libbpf: failed to find BTF for extern 'bpf_cast_to_kern_ctx' [21] section: -2
  Error: failed to open BPF object file: No such file or directory
  make[2]: *** [Makefile.perf:1121: /tmp/build/perf/util/bpf_skel/sample_filter.skel.h] Error 254
  make[2]: *** Deleting file '/tmp/build/perf/util/bpf_skel/sample_filter.skel.h'

Amazon Linux 2:

  clang version 11.1.0 (Amazon Linux 2 11.1.0-1.amzn2.0.2)

    GENSKEL /tmp/build/perf/util/bpf_skel/sample_filter.skel.h
  libbpf: elf: skipping unrecognized data section(18) .eh_frame
  libbpf: elf: skipping relo section(19) .rel.eh_frame for section(18) .eh_frame
  libbpf: failed to find BTF for extern 'bpf_cast_to_kern_ctx' [21] section: -2
  Error: failed to open BPF object file: No such file or directory
  make[2]: *** [/tmp/build/perf/util/bpf_skel/sample_filter.skel.h] Error 254
  make[2]: *** Deleting file `/tmp/build/perf/util/bpf_skel/sample_filter.skel.h'

Ubuntu 20.04:

  clang version 10.0.0-4ubuntu1

    CLANG   /tmp/build/perf/util/bpf_skel/.tmp/augmented_raw_syscalls.bpf.o
    GENSKEL /tmp/build/perf/util/bpf_skel/bench_uprobe.skel.h
    GENSKEL /tmp/build/perf/util/bpf_skel/bperf_leader.skel.h
  libbpf: sec '.reluprobe': corrupted symbol #27 pointing to invalid section #65522 for relo #0
    GENSKEL /tmp/build/perf/util/bpf_skel/bperf_follower.skel.h
  Error: failed to open BPF object file: BPF object format invalid
  make[2]: *** [Makefile.perf:1121: /tmp/build/perf/util/bpf_skel/bench_uprobe.skel.h] Error 95
  make[2]: *** Deleting file '/tmp/build/perf/util/bpf_skel/bench_uprobe.skel.h'

So check if the version is at least 12.0.1 otherwise disable building
BPF skels and provide a message about it
  Parent Hashes: ee40490dd7cdcda38ece6d081f63ecddd3fdbe25
  Refs:  continuing the build.

The message

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Disable building BPF skeletons in perf if using a clang version older than 12.0.1 to avoid BTF generation errors.', 'keywords': 'BPF skeletons, clang version, BTF errors', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 06497763c8f15d08c0e356e651a61f2930a8987c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 06497763c8f15d08c0e356e651a61f2930a8987c
  Author Name: Yonghong Song
  Author Email: yonghong.song@linux.dev
  Commit Date: 1698446488
  Commit Message:
    net: bpf: Use sockopt_lock_sock() in ip_sock_set_tos()

With latest sync from net-next tree
  Parent Hashes: f5247a6ed5b5bbaa609f97049de868974eb7a7c2
  Refs:  bpf-next has a bpf selftest failure:
  [root@arch-fb-vm1 bpf]# ./test_progs -t setget_sockopt
  ...
  [   76.194349] ============================================
  [   76.194682] WARNING: possible recursive locking detected
  [   76.195039] 6.6.0-rc7-g37884503df08-dirty #67 Tainted: G        W  OE
  [   76.195518] --------------------------------------------
  [   76.195852] new_name/154 is trying to acquire lock:
  [   76.196159] ffff8c3e06ad8d30 (sk_lock-AF_INET){+.+.}-{0:0}

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates the net bpf code to use sockopt_lock_sock in ip_sock_set_tos to avoid recursive locking issues.', 'keywords': 'sockopt_lock_sock, ip_sock_set_tos, recursive locking', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs', 'other']}
--------------------
--------------------
Processing Commit ID: c6f9b7138bf5c6b826175c9e0ad5f5dbfff4fa36
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c6f9b7138bf5c6b826175c9e0ad5f5dbfff4fa36
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1698375761
  Commit Message:
    Merge tag 'for-netdev' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2023-10-26

We've added 51 non-merge commits during the last 10 day(s) which contain
a total of 75 files changed
  Parent Hashes: cc33a80b816406f900a53c7f98a50f6eacdd2e31 ea41b880cc85f0a992571f66e4554a69f7806246
  Refs:  5037 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge commit integrating 51 non-merge commits from bpf-next branch.', 'keywords': 'merge, bpf-next, commits', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ea41b880cc85f0a992571f66e4554a69f7806246
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ea41b880cc85f0a992571f66e4554a69f7806246
  Author Name: Nikolay Aleksandrov
  Author Email: razor@blackwall.org
  Commit Date: 1698328719
  Commit Message:
    netkit: Remove explicit active/peer ptr initialization

Remove the explicit NULLing of active/peer pointers and rely on the
implicit one done at net device allocation.

Suggested-by: Jiri Pirko <jiri@resnulli.us>
Signed-off-by: Nikolay Aleksandrov <razor@blackwall.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Jiri Pirko <jiri@nvidia.com>
Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20231026094106.1505892-2-razor@blackwall.org

  Parent Hashes: 399f6185a1c02f39bcadb8749bc2d9d48685816f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit removes explicit pointer initialization and relies on implicit initialization during net device allocation.', 'keywords': 'pointer initialization, net device, implicit nulling', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 399f6185a1c02f39bcadb8749bc2d9d48685816f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 399f6185a1c02f39bcadb8749bc2d9d48685816f
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1698327723
  Commit Message:
    selftests/bpf: Fix selftests broken by mitigations=off

When we configure the kernel command line with 'mitigations=off' and set
the sysctl knob 'kernel.unprivileged_bpf_disabled' to 0
  Parent Hashes: 37db10bc247d5d0b448babd7ff386f092246e732
  Refs:  the commit
bc5bc309db45 ("bpf: Inherit system settings for CPU security mitigations")
causes issues in the execution of `test_progs -t verifier`. This is
because 'mitigations=off' bypasses Spectre v1 and Spectre v4 protections.

Currently

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Fixes broken eBPF selftests when kernel configured with 'mitigations=off' affecting test execution.", 'keywords': 'selftests, mitigations, verifier', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 37db10bc247d5d0b448babd7ff386f092246e732
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 37db10bc247d5d0b448babd7ff386f092246e732
  Author Name: Viktor Malik
  Author Email: vmalik@redhat.com
  Commit Date: 1698327133
  Commit Message:
    samples/bpf: Allow building with custom bpftool

samples/bpf build its own bpftool boostrap to generate vmlinux.h as well
as some BPF objects. This is a redundant step if bpftool has been
already built
  Parent Hashes: f56bcfadf7d6d56b099726df4fc262b76486b0e0
  Refs:  so update samples/bpf/Makefile such that it accepts a
path to bpftool passed via the BPFTOOL variable. The approach is
practically the same as tools/testing/selftests/bpf/Makefile uses.

Signed-off-by: Viktor Malik <vmalik@redhat.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/bd746954ac271b02468d8d951ff9f11e655d485b.1698213811.git.vmalik@redhat.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit allows samples/bpf to build with a custom bpftool by modifying the Makefile.', 'keywords': 'samples,bpf,Makefile', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: f56bcfadf7d6d56b099726df4fc262b76486b0e0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f56bcfadf7d6d56b099726df4fc262b76486b0e0
  Author Name: Viktor Malik
  Author Email: vmalik@redhat.com
  Commit Date: 1698327133
  Commit Message:
    samples/bpf: Fix passing LDFLAGS to libbpf

samples/bpf/Makefile passes LDFLAGS=$(TPROGS_LDFLAGS) to libbpf build
without surrounding quotes
  Parent Hashes: 870f09f1ba3014e2c157b14299c172b4bb716638
  Refs:  which may cause compilation errors when
passing custom TPROGS_USER_LDFLAGS.

For example:

    $ make -C samples/bpf/ TPROGS_USER_LDFLAGS="-Wl

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes LDFLAGS passing issue in samples/bpf Makefile to prevent compilation errors.', 'keywords': 'LDFLAGS, Makefile, compilation', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 870f09f1ba3014e2c157b14299c172b4bb716638
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 870f09f1ba3014e2c157b14299c172b4bb716638
  Author Name: Viktor Malik
  Author Email: vmalik@redhat.com
  Commit Date: 1698327132
  Commit Message:
    samples/bpf: Allow building with custom CFLAGS/LDFLAGS

Currently
  Parent Hashes: c421c12586b3f00fb96b5c9af15c9a051a9090b1
  Refs:  it is not possible to specify custom flags when building
samples/bpf. The flags are defined in TPROGS_CFLAGS/TPROGS_LDFLAGS
variables

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit allows building samples/bpf with custom CFLAGS/LDFLAGS.', 'keywords': 'custom CFLAGS LDFLAGS', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: c421c12586b3f00fb96b5c9af15c9a051a9090b1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c421c12586b3f00fb96b5c9af15c9a051a9090b1
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1698323013
  Commit Message:
    bpf: Add more WARN_ON_ONCE checks for mismatched alloc and free

There are two possible mismatched alloc and free cases in BPF memory
allocator:

1) allocate from cache X but free by cache Y with a different unit_size
2) allocate from per-cpu cache but free by kmalloc cache or vice versa

So add more WARN_ON_ONCE checks in free_bulk() and __free_by_rcu() to
spot these mismatched alloc and free early.

Signed-off-by: Hou Tao <houtao1@huawei.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20231021014959.3563841-1-houtao@huaweicloud.com

  Parent Hashes: 22360fad5889cbefe1eca695b0cc0273ab280b56
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add checks to detect mismatched allocation and freeing in the BPF memory allocator.', 'keywords': 'memory allocator checks', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e56808fef8f71a192b2740c0b6ea8be7ab865d54
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e56808fef8f71a192b2740c0b6ea8be7ab865d54
  Author Name: Roman Gushchin
  Author Email: roman.gushchin@linux.dev
  Commit Date: 1698277631
  Commit Message:
    mm: kmem: reimplement get_obj_cgroup_from_current()

Reimplement get_obj_cgroup_from_current() using current_obj_cgroup(). 
get_obj_cgroup_from_current() and current_obj_cgroup() share 80% of the
code
  Parent Hashes: c63b835d0eafc956c43b8c6605708240ac52b8cd
  Refs:  so the new implementation is almost trivial.

get_obj_cgroup_from_current() is a convenient function used by the
bpf subsystem

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Reimplemented get_obj_cgroup_from_current() using existing common code in current_obj_cgroup() to reduce redundancy.', 'keywords': 'reimplement, obj_cgroup, bpf', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b5711042a1c8cc88ed40a5ebf612b36e83a4e2e4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b5711042a1c8cc88ed40a5ebf612b36e83a4e2e4
  Author Name: Namhyung Kim
  Author Email: namhyung@kernel.org
  Commit Date: 1698253375
  Commit Message:
    perf lock contention: Use per-cpu array map for spinlocks

Currently lock contention timestamp is maintained in a hash map keyed by
pid.  That means it needs to get and release a map element (which is
proctected by spinlock!) on each contention begin and end pair.  This
can impact on performance if there are a lot of contention (usually from
spinlocks).

It used to go with task local storage but it had an issue on memory
allocation in some critical paths.  Although it's addressed in recent
kernels IIUC
  Parent Hashes: 6a070573f290f99a6129ac3e13b9df521a1a65de
  Refs:  the tool should support old kernels too.  So it cannot
simply switch to the task local storage at least for now.

As spinlocks create lots of contention and they disabled preemption
during the spinning

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimized lock contention handling by using per-cpu array map instead of hash map for spinlocks in perf tool.', 'keywords': 'lock contention, spinlocks, per-cpu', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6a070573f290f99a6129ac3e13b9df521a1a65de
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6a070573f290f99a6129ac3e13b9df521a1a65de
  Author Name: Namhyung Kim
  Author Email: namhyung@kernel.org
  Commit Date: 1698253367
  Commit Message:
    perf lock contention: Check race in tstamp elem creation

When pelem is NULL
  Parent Hashes: d99317f214ca3d381f7b17a75c41263885664e06
  Refs:  it'd create a new entry with zero data.  But it
might be preempted by IRQ/NMI just before calling bpf_map_update_elem()
then there's a chance to call it twice for the same pid.  So it'd be
better to use BPF_NOEXIST flag and check the return value to prevent
the race.

Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Acked-by: Ian Rogers <irogers@google.com>
Cc: Hao Luo <haoluo@google.com>
Cc: Song Liu <song@kernel.org>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231020204741.1869520-2-namhyung@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implement BPF_NOEXIST flag to prevent race conditions in perf lock contention element creation.', 'keywords': 'race, BPF_NOEXIST, contention', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: d99317f214ca3d381f7b17a75c41263885664e06
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d99317f214ca3d381f7b17a75c41263885664e06
  Author Name: Namhyung Kim
  Author Email: namhyung@kernel.org
  Commit Date: 1698253354
  Commit Message:
    perf lock contention: Clear lock addr after use

It checks the current lock to calculated the delta of contention time.
The address is saved in the tstamp map which is allocated at begining of
contention and released at end of contention.

But it's possible for bpf_map_delete_elem() to fail.  In that case
  Parent Hashes: e093a222d7cba1eb6c36887e58ce8a4ff249f1c6
  Refs:  the
element in the tstamp map kept for the current lock and it makes the
next contention for the same lock tracked incorrectly.  Specificially
the next contention begin will see the existing element for the task and
it'd just return.  Then the next contention end will see the element and
calculate the time using the timestamp for the previous begin.

This can result in a large value for two small contentions happened from
time to time.  Let's clear the lock address so that it can be updated
next time even if the bpf_map_delete_elem() failed.

Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Acked-by: Ian Rogers <irogers@google.com>
Cc: Hao Luo <haoluo@google.com>
Cc: Song Liu <song@kernel.org>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231020204741.1869520-1-namhyung@kernel.org


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix contention time tracking in perf lock by clearing lock address after use.', 'keywords': 'perf,lock,contention', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 22360fad5889cbefe1eca695b0cc0273ab280b56
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 22360fad5889cbefe1eca695b0cc0273ab280b56
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1698188868
  Commit Message:
    Merge branch 'Add bpf programmable net device'

Daniel Borkmann says:

====================
This work adds a BPF programmable device which can operate in L3 or L2
mode where the BPF program is part of the xmit routine. It's program
management is done via bpf_mprog and it comes with BPF link support.
For details see patch 1 and following. Thanks!

v3 -> v4:
  - Moved netkit_release_all() into ndo_uninit (Stan)
  - Two small commit msg corrections (Toke)
  - Added Acked/Reviewed-by
v2 -> v3:
  - Remove setting dev->min_mtu to ETH_MIN_MTU (Andrew)
  - Do not populate ethtool info->version (Andrew)
  - Populate netdev private data before register_netdevice (Andrew)
  - Use strscpy for ifname template (Jakub)
  - Use GFP_KERNEL_ACCOUNT for link kzalloc (Jakub)
  - Carry and dump link attach type for bpftool (Toke)
v1 -> v2:
  - Rename from meta (Toke
  Parent Hashes: 42d31dd601fa43b9afdf069d1ba410b2306a4c76 ace15f91e569172dac71ae0aeb3a2e76d1ce1b17
  Refs:  Andrii

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added a BPF programmable net device with L2/L3 mode and BPF link support via bpf_mprog.', 'keywords': 'BPF programmable, net device, bpf_mprog', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['xdp like programs', 'tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: ace15f91e569172dac71ae0aeb3a2e76d1ce1b17
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ace15f91e569172dac71ae0aeb3a2e76d1ce1b17
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1698188863
  Commit Message:
    selftests/bpf: Add selftests for netkit

Add a bigger batch of test coverage to assert correct operation of
netkit devices and their BPF program management:

  # ./test_progs -t tc_netkit
  [...]
  [    1.166267] bpf_testmod: loading out-of-tree module taints kernel.
  [    1.166831] bpf_testmod: module verification failed: signature and/or required key missing - tainting kernel
  [    1.270957] tsc: Refined TSC clocksource calibration: 3407.988 MHz
  [    1.272579] clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x311fc932722
  Parent Hashes: 51f1892b5289f0c09745d3bedb36493555d6d90c
  Refs:  max_idle_ns: 440795381586 ns
  [    1.275336] clocksource: Switched to clocksource tsc
  #257     tc_netkit_basic:OK
  #258     tc_netkit_device:OK
  #259     tc_netkit_multi_links:OK
  #260     tc_netkit_multi_opts:OK
  #261     tc_netkit_neigh_links:OK
  Summary: 5/0 PASSED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests to ensure netkit devices and BPF program management function correctly.', 'keywords': 'selftests, netkit, tc_netkit', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 51f1892b5289f0c09745d3bedb36493555d6d90c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 51f1892b5289f0c09745d3bedb36493555d6d90c
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1698188859
  Commit Message:
    selftests/bpf: Add netlink helper library

Add a minimal netlink helper library for the BPF selftests. This has been
taken and cut down and cleaned up from iproute2. This covers basics such
as netdevice creation which we need for BPF selftests / BPF CI given
iproute2 package cannot cover it yet.

Stanislav Fomichev suggested that this could be replaced in future by ynl
tool generated C code once it has RTNL support to create devices. Once we
get to this point the BPF CI would also need to add libmnl. If no further
extensions are needed
  Parent Hashes: bec981a4add6dd6a63065e54e2b2e67c2af6c3fa
  Refs:  a second option could be that we remove this code
again once iproute2 package has support.

Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Martin KaFai Lau <martin.lau@kernel.org>
Link: https://lore.kernel.org/r/20231024214904.29825-7-daniel@iogearbox.net
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds a minimal netlink helper library for BPF selftests, derived from iproute2, to support BPF CI.', 'keywords': 'netlink, helper library, selftests', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: bec981a4add6dd6a63065e54e2b2e67c2af6c3fa
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bec981a4add6dd6a63065e54e2b2e67c2af6c3fa
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1698188852
  Commit Message:
    bpftool: Extend net dump with netkit progs

Add support to dump BPF programs on netkit via bpftool. This includes both
the BPF link and attach ops programs. Dumped information contain the attach
location
  Parent Hashes: 92a85e18ad4705c66ace55a19f4f8301ef0eb59f
  Refs:  function entry name

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extend bpftool to support dumping BPF programs on netkit, including link and attach ops programs.', 'keywords': 'bpftool, netkit, dump', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 92a85e18ad4705c66ace55a19f4f8301ef0eb59f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 92a85e18ad4705c66ace55a19f4f8301ef0eb59f
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1698188844
  Commit Message:
    bpftool: Implement link show support for netkit

Add support to dump netkit link information to bpftool in similar way as
we have for XDP. The netkit link info only exposes the ifindex and the
attach_type.

Below shows an example link dump output
  Parent Hashes: 05c31b4ab20527c4d1695130aaecc54ef59a0e54
  Refs:  and a cgroup link is included for
comparison

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implement support for displaying netkit link information in bpftool.', 'keywords': 'bpftool, netkit, link', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['tracepoints like programs', 'cgroup like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 05c31b4ab20527c4d1695130aaecc54ef59a0e54
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 05c31b4ab20527c4d1695130aaecc54ef59a0e54
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1698188818
  Commit Message:
    libbpf: Add link-based API for netkit

This adds bpf_program__attach_netkit() API to libbpf. Overall it is very
similar to tcx. The API looks as following:

  LIBBPF_API struct bpf_link *
  bpf_program__attach_netkit(const struct bpf_program *prog
  Parent Hashes: 5c1b994de4be8a27afa3281be2ff58b38e8bc50c
  Refs:  int ifindex

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces a new link-based API, bpf_program__attach_netkit, to libbpf for attaching eBPF programs.', 'keywords': 'libbpf, link-based API, netkit', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 35dfaad7188cdc043fde31709c796f5a692ba2bd
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 35dfaad7188cdc043fde31709c796f5a692ba2bd
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1698188763
  Commit Message:
    netkit
  Parent Hashes: 42d31dd601fa43b9afdf069d1ba410b2306a4c76
  Refs:  bpf: Add bpf programmable net device

This work adds a new

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add a BPF programmable network device in the Linux kernel.', 'keywords': 'BPF, network, device', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['socket like programs', 'tc/netfilter like programs', 'other']}
--------------------
--------------------
Processing Commit ID: 42d31dd601fa43b9afdf069d1ba410b2306a4c76
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 42d31dd601fa43b9afdf069d1ba410b2306a4c76
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1698151551
  Commit Message:
    bpf: Improve JEQ/JNE branch taken logic

When determining if an if/else branch will always or never be taken
  Parent Hashes: 06646da01458682023321bdc7553b8140e95d077
  Refs:  use
signed range knowledge in addition to currently used unsigned range knowledge.
If either signed or unsigned range suggests that condition is always/never
taken

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit improves the logic for determining JEQ/JNE branch conditions using both signed and unsigned range knowledge.', 'keywords': 'JEQ,JNE,branch', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 06646da01458682023321bdc7553b8140e95d077
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 06646da01458682023321bdc7553b8140e95d077
  Author Name: Paul E. McKenney
  Author Email: paulmck@kernel.org
  Commit Date: 1698150367
  Commit Message:
    bpf: Fold smp_mb__before_atomic() into atomic_set_release()

The bpf_user_ringbuf_drain() BPF_CALL function uses an atomic_set()
immediately preceded by smp_mb__before_atomic() so as to order storing
of ring-buffer consumer and producer positions prior to the atomic_set()
call's clearing of the ->busy flag
  Parent Hashes: d35381aa73f7e1e8b25f3ed5283287a64d9ddff5
  Refs:  as follows:

        smp_mb__before_atomic();
        atomic_set(&rb->busy

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit folds smp_mb__before_atomic() into atomic_set_release() in bpf_user_ringbuf_drain() for ring-buffer ordering.', 'keywords': 'smp_mb_before_atomic,atomic_set_release,ring-buffer', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d35381aa73f7e1e8b25f3ed5283287a64d9ddff5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d35381aa73f7e1e8b25f3ed5283287a64d9ddff5
  Author Name: Song Liu
  Author Email: song@kernel.org
  Commit Date: 1698150355
  Commit Message:
    bpf: Fix unnecessary -EBUSY from htab_lock_bucket

htab_lock_bucket uses the following logic to avoid recursion:

1. preempt_disable();
2. check percpu counter htab->map_locked[hash] for recursion;
   2.1. if map_lock[hash] is already taken
  Parent Hashes: 99b29a499b5fdfb7ab274835b8e4d4c11df2f6d7
  Refs:  return -BUSY;
3. raw_spin_lock_irqsave();

However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes erroneous -EBUSY error from htab_lock_bucket in eBPF maps.', 'keywords': 'fix, htab_lock_bucket, eBPF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 99b29a499b5fdfb7ab274835b8e4d4c11df2f6d7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 99b29a499b5fdfb7ab274835b8e4d4c11df2f6d7
  Author Name: Albert Huang
  Author Email: huangjie.albert@bytedance.com
  Commit Date: 1698141336
  Commit Message:
    xsk: Avoid starving the xsk further down the list

In the previous implementation
  Parent Hashes: dedd6c894110371d3c218cf24ecca2f0730408ac
  Refs:  when multiple xsk sockets were
associated with a single xsk_buff_pool

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize XSK socket handling to prevent resource starvation in shared buffer pools.', 'keywords': 'xsk,starvation,buffer', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: dedd6c894110371d3c218cf24ecca2f0730408ac
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dedd6c894110371d3c218cf24ecca2f0730408ac
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1698122972
  Commit Message:
    Merge branch 'exact-states-comparison-for-iterator-convergence-checks'

Eduard Zingerman says:

====================
exact states comparison for iterator convergence checks

Iterator convergence logic in is_state_visited() uses state_equals()
for states with branches counter > 0 to check if iterator based loop
converges. This is not fully correct because state_equals() relies on
presence of read and precision marks on registers. These marks are not
guaranteed to be finalized while state has branches.
Commit message for patch #3 describes a program that exhibits such
behavior.

This patch-set aims to fix iterator convergence logic by adding notion
of exact states comparison. Exact comparison does not rely on presence
of read or precision marks and thus is more strict.
As explained in commit message for patch #3 exact comparisons require
addition of speculative register bounds widening. The end result for
BPF verifier users could be summarized as follows:

(!) After this update verifier would reject programs that conjure an
    imprecise value on the first loop iteration and use it as precise
    on the second (for iterator based loops).

I urge people to at least skim over the commit message for patch #3.

Patches are organized as follows:
- patches #1
  Parent Hashes: b63dadd6f97522513fe9497b5fde84a154e39a0b b4d8239534fddc036abe4a0fdbf474d9894d4641
  Refs: 2: moving/extracting utility functions;
- patch #3: introduces exact mode for states comparison and adds
  widening heuristic;
- patch #4: adds test-cases that demonstrate why the series is
  necessary;
- patch #5: extends patch #3 with a notion of state loop entries

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enhances iterator convergence checks in the BPF verifier by implementing exact states comparison.', 'keywords': 'iterator, convergence, verifier', 'commit_classification': "It's a bug fix.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b4d8239534fddc036abe4a0fdbf474d9894d4641
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b4d8239534fddc036abe4a0fdbf474d9894d4641
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1698122972
  Commit Message:
    bpf: print full verifier states on infinite loop detection

Additional logging in is_state_visited(): if infinite loop is detected
print full verifier state for both current and equivalent states.

Acked-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20231024000917.12153-8-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 64870feebecb7130291a55caf0ce839a87405a70
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add logging to print full verifier states when an infinite loop is detected in eBPF programs.', 'keywords': 'verifier,logging,infinite loop', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 64870feebecb7130291a55caf0ce839a87405a70
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 64870feebecb7130291a55caf0ce839a87405a70
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1698122972
  Commit Message:
    selftests/bpf: test if state loops are detected in a tricky case

A convoluted test case for iterators convergence logic that
demonstrates that states with branch count equal to 0 might still be
a part of not completely explored loop.

E.g. consider the following state diagram:

               initial     Here state 'succ' was processed first
  Parent Hashes: 2a0992829ea3864939d917a5c7b48be6629c6217
  Refs: 
                 |         it was eventually tracked to produce a
                 V         state identical to 'hdr'.
    .---------> hdr        All branches from 'succ' had been explored
    |            |         and thus 'succ' has its .branches == 0.
    |            V
    |    .------...        Suppose states 'cur' and 'succ' correspond
    |    |       |         to the same instruction + callsites.
    |    V       V         In such case it is necessary to check
    |   ...     ...        whether 'succ' and 'cur' are identical.
    |    |       |         If 'succ' and 'cur' are a part of the same loop
    |    V       V         they have to be compared exactly.
    |   succ <- cur
    |    |
    |    V
    |   ...
    |    |
    '----'

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20231024000917.12153-7-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds a test to ensure state loops are detected in complex cases within eBPF selftests.', 'keywords': 'state loops,test case,iterators', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2a0992829ea3864939d917a5c7b48be6629c6217
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2a0992829ea3864939d917a5c7b48be6629c6217
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1698122972
  Commit Message:
    bpf: correct loop detection for iterators convergence

It turns out that .branches > 0 in is_state_visited() is not a
sufficient condition to identify if two verifier states form a loop
when iterators convergence is computed. This commit adds logic to
distinguish situations like below:

 (I)            initial       (II)            initial
                  |                             |
                  V                             V
     .---------> hdr                           ..
     |            |                             |
     |            V                             V
     |    .------...                    .------..
     |    |       |                     |       |
     |    V       V                     V       V
     |   ...     ...               .-> hdr     ..
     |    |       |                |    |       |
     |    V       V                |    V       V
     |   succ <- cur               |   succ <- cur
     |    |                        |    |
     |    V                        |    V
     |   ...                       |   ...
     |    |                        |    |
     '----'                        '----'

For both (I) and (II) successor 'succ' of the current state 'cur' was
previously explored and has branches count at 0. However
  Parent Hashes: 389ede06c2974b2f878a7ebff6b0f4f707f9db74
  Refs:  loop entry
'hdr' corresponding to 'succ' might be a part of current DFS path.
If that is the case 'succ' and 'cur' are members of the same loop
and have to be compared exactly.

Co-developed-by: Andrii Nakryiko <andrii.nakryiko@gmail.com>
Co-developed-by: Alexei Starovoitov <alexei.starovoitov@gmail.com>
Reviewed-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20231024000917.12153-6-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Correct loop detection logic for iterators convergence in the eBPF verifier.', 'keywords': 'loop detection, iterators, verifier', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 389ede06c2974b2f878a7ebff6b0f4f707f9db74
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 389ede06c2974b2f878a7ebff6b0f4f707f9db74
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1698122971
  Commit Message:
    selftests/bpf: tests with delayed read/precision makrs in loop body

These test cases try to hide read and precision marks from loop
convergence logic: marks would only be assigned on subsequent loop
iterations or after exploring states pushed to env->head stack first.
Without verifier fix to use exact states comparison logic for
iterators convergence these tests (except 'triple_continue') would be
errorneously marked as safe.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20231024000917.12153-5-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 2793a8b015f7f1caadb9bce9c63dc659f7522676
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce selftests for BPF validating delayed read and precision marks in loop convergence logic.', 'keywords': 'selftests,loop,verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 2793a8b015f7f1caadb9bce9c63dc659f7522676
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2793a8b015f7f1caadb9bce9c63dc659f7522676
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1698122971
  Commit Message:
    bpf: exact states comparison for iterator convergence checks

Convergence for open coded iterators is computed in is_state_visited()
by examining states with branches count > 1 and using states_equal().
states_equal() computes sub-state relation using read and precision marks.
Read and precision marks are propagated from children states
  Parent Hashes: 4c97259abc9bc8df7712f76f58ce385581876857
  Refs: 
thus are not guaranteed to be complete inside a loop when branches
count > 1. This could be demonstrated using the following unsafe program:

     1. r7 = -16
     2. r6 = bpf_get_prandom_u32()
     3. while (bpf_iter_num_next(&fp[-8])) {
     4.   if (r6 != 42) {
     5.     r7 = -32
     6.     r6 = bpf_get_prandom_u32()
     7.     continue
     8.   }
     9.   r0 = r10
    10.   r0 += r7
    11.   r8 = *(u64 *)(r0 + 0)
    12.   r6 = bpf_get_prandom_u32()
    13. }

Here verifier would first visit path 1-3

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhanced state comparison for open coded iterator convergence checks in the BPF verifier.', 'keywords': 'exact state comparison, convergence, iterators', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4c97259abc9bc8df7712f76f58ce385581876857
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4c97259abc9bc8df7712f76f58ce385581876857
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1698122971
  Commit Message:
    bpf: extract same_callsites() as utility function

Extract same_callsites() from clean_live_states() as a utility function.
This function would be used by the next patch in the set.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20231024000917.12153-3-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 3c4e420cb6536026ddd50eaaff5f30e4f144200d
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Extracted same_callsites() as a utility function for reuse.', 'keywords': 'utility,function,extraction', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3c4e420cb6536026ddd50eaaff5f30e4f144200d
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3c4e420cb6536026ddd50eaaff5f30e4f144200d
  Author Name: Eduard Zingerman
  Author Email: eddyz87@gmail.com
  Commit Date: 1698122971
  Commit Message:
    bpf: move explored_state() closer to the beginning of verifier.c

Subsequent patches would make use of explored_state() function.
Move it up to avoid adding unnecessary prototype.

Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20231024000917.12153-2-eddyz87@gmail.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: b63dadd6f97522513fe9497b5fde84a154e39a0b
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The explored_state() function is moved to the beginning of verifier.c for upcoming patches.', 'keywords': 'explored_state, verifier, function', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: efb3e0e1649f944c032095e3f0533a235a7477d3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: efb3e0e1649f944c032095e3f0533a235a7477d3
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1698113691
  Commit Message:
    Merge branch 'introduce-page_pool_alloc-related-api'

Yunsheng Lin says:

====================
introduce page_pool_alloc() related API

In [1] & [2] & [3]
  Parent Hashes: f4dbc2bb7a54d3bff234a9f1915f1b7187bedb1f 2d0de67da51a90c6acf7bf08d7b0501f45408002
  Refs:  there are usecases for veth and virtio_net
to use frag support in page pool to reduce memory usage

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce page_pool_alloc related API to support fragmentation in page pool, optimizing memory usage.', 'keywords': 'page_pool_alloc, API, memory', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b63dadd6f97522513fe9497b5fde84a154e39a0b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b63dadd6f97522513fe9497b5fde84a154e39a0b
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1698098513
  Commit Message:
    bpf
  Parent Hashes: 69a19170303ff2f802049be94cfcf62f714002a3
  Refs:  tcx: Get rid of tcx_link_const

Small clean up to get rid of the extra tcx_link_const() and only retain
the tcx_link().

Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/r/20231023185015.21152-1-daniel@iogearbox.net
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove redundant tcx_link_const() to simplify code by retaining only tcx_link() usage.', 'keywords': 'cleanup, tcx_link, simplification', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 69a19170303ff2f802049be94cfcf62f714002a3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 69a19170303ff2f802049be94cfcf62f714002a3
  Author Name: Denys Zagorui
  Author Email: dzagorui@cisco.com
  Commit Date: 1698080295
  Commit Message:
    samples: bpf: Fix syscall_tp openat argument

This modification doesn't change behaviour of the syscall_tp
But such code is often used as a reference so it should be
correct anyway

Signed-off-by: Denys Zagorui <dzagorui@cisco.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20231019113521.4103825-1-dzagorui@cisco.com

  Parent Hashes: cf559a416f9bc061f3b96f8afc6ceae5eec9b2b0
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Corrected the syscall_tp openat argument in BPF samples for improved reference accuracy.', 'keywords': 'syscall_tp, openat, BPF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: 90d862f370b6e9de1b5d607843c5a2f9823990f3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 90d862f370b6e9de1b5d607843c5a2f9823990f3
  Author Name: Hari Bathini
  Author Email: hbathini@linux.ibm.com
  Commit Date: 1698053599
  Commit Message:
    powerpc/bpf: use bpf_jit_binary_pack_[alloc|finalize|free]

Use bpf_jit_binary_pack_alloc in powerpc jit. The jit engine first
writes the program to the rw buffer. When the jit is done
  Parent Hashes: de04e40600ae15fa5e484be242e74aad6de7418f
  Refs:  the program
is copied to the final location with bpf_jit_binary_pack_finalize.
With multiple jit_subprogs

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enable bpf_jit_binary_pack_usage in PowerPC JIT engine for enhanced program execution.', 'keywords': 'PowerPC,JIT,bpf_jit_binary_pack', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: de04e40600ae15fa5e484be242e74aad6de7418f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: de04e40600ae15fa5e484be242e74aad6de7418f
  Author Name: Hari Bathini
  Author Email: hbathini@linux.ibm.com
  Commit Date: 1698053599
  Commit Message:
    powerpc/bpf: rename powerpc64_jit_data to powerpc_jit_data

powerpc64_jit_data is a misnomer as it is meant for both ppc32 and
ppc64. Rename it to powerpc_jit_data.

Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
Acked-by: Song Liu <song@kernel.org>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20231020141358.643575-5-hbathini@linux.ibm.com


  Parent Hashes: 033ffaf0af1f974ecf401db3f70aae6fe1a90fc5
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit renames powerpc64_jit_data to powerpc_jit_data for consistency across ppc32 and ppc64.', 'keywords': 'renaming, powerpc, jit', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The JIT compiler', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 033ffaf0af1f974ecf401db3f70aae6fe1a90fc5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 033ffaf0af1f974ecf401db3f70aae6fe1a90fc5
  Author Name: Hari Bathini
  Author Email: hbathini@linux.ibm.com
  Commit Date: 1698053599
  Commit Message:
    powerpc/bpf: implement bpf_arch_text_invalidate for bpf_prog_pack

Implement bpf_arch_text_invalidate and use it to fill unused part of
the bpf_prog_pack with trap instructions when a BPF program is freed.

Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
Acked-by: Song Liu <song@kernel.org>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20231020141358.643575-4-hbathini@linux.ibm.com


  Parent Hashes: 6efc1675acb88eef45ef0156b93f95d66a8ee759
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implement bpf_arch_text_invalidate to manage unused areas in bpf_prog_pack for powerpc.', 'keywords': 'powerpc,bpf_arch_text_invalidate,bpf_prog_pack', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6efc1675acb88eef45ef0156b93f95d66a8ee759
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6efc1675acb88eef45ef0156b93f95d66a8ee759
  Author Name: Hari Bathini
  Author Email: hbathini@linux.ibm.com
  Commit Date: 1698053599
  Commit Message:
    powerpc/bpf: implement bpf_arch_text_copy

bpf_arch_text_copy is used to dump JITed binary to RX page
  Parent Hashes: 465cabc97b42405eb89380ea6ba8d8b03e4ae1a2
  Refs:  allowing
multiple BPF programs to share the same page. Use the newly introduced
patch_instructions() to implement it.

Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
Acked-by: Song Liu <song@kernel.org>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20231020141358.643575-3-hbathini@linux.ibm.com



- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Implement bpf_arch_text_copy for dumping JITed binary to RX page in powerpc architecture.', 'keywords': 'powerpc,JITed binary,bpf_arch_text_copy', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9c5d00cb7b6bbc5a7965d9ab7d223b5402d1f02c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9c5d00cb7b6bbc5a7965d9ab7d223b5402d1f02c
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1697838564
  Commit Message:
    Merge tag 'perf-tools-fixes-for-v6.6-2-2023-10-20' of git://git.kernel.org/pub/scm/linux/kernel/git/perf/perf-tools

Pull perf tools fixes from Arnaldo Carvalho de Melo:

 - Fix regression in reading scale and unit files from sysfs for PMU
   events
  Parent Hashes: 444ccf1b11a0dbc54e789d6d2634c2649dc27498 4fa008a2db484024a5cb52676a1b1534dc82330c
  Refs:  so that we can use that info to pretty print instead of
   printing raw numbers:

     # perf stat -e power/energy-ram/

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge perf tool fixes for improved PMU event parsing from sysfs to enhance pretty printing in perf stat outputs.', 'keywords': 'perf tools, regression, PMU', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: cf559a416f9bc061f3b96f8afc6ceae5eec9b2b0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cf559a416f9bc061f3b96f8afc6ceae5eec9b2b0
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1697836513
  Commit Message:
    Merge branch 'bpf-fixes-for-per-cpu-kptr'

Hou Tao says:

====================
bpf: Fixes for per-cpu kptr

From: Hou Tao <houtao1@huawei.com>

Hi
  Parent Hashes: da1055b673f3baac2249571c9882ce767a0aa746 d440ba91ca4d3004709876779d40713a99e21f6a
  Refs: 

The patchset aims to fix the problems found in the review of per-cpu
kptr patch-set [0]. Patch #1 moves pcpu_lock after the invocation of
pcpu_chunk_addr_search() and it is a micro-optimization for
free_percpu(). The reason includes it in the patch is that the same
logic is used in newly-added API pcpu_alloc_size(). Patch #2 introduces
pcpu_alloc_size() for dynamic per-cpu area. Patch #2 and #3 use
pcpu_alloc_size() to check whether or not unit_size matches with the
size of underlying per-cpu area and to select a matching bpf_mem_cache.
Patch #4 fixes the freeing of per-cpu kptr when these kptrs are freed by
map destruction. The last patch adds test cases for these problems.

Please see individual patches for details. And comments are always
welcome.

Change Log:
v3:
 * rebased on bpf-next
 * patch 2: update API document to note that pcpu_alloc_size() doesn't
            support statically allocated per-cpu area. (Dennis)
 * patch 1 & 2: add Acked-by from Dennis

v2: https://lore.kernel.org/bpf/20231018113343.2446300-1-houtao@huaweicloud.com/
  * add a new patch "don't acquire pcpu_lock for pcpu_chunk_addr_search()"
  * patch 2: change type of bit_off and end to unsigned long (Andrew)
  * patch 2: rename the new API as pcpu_alloc_size and follow 80-column convention (Dennis)
  * patch 5: move the common declaration into bpf.h (Stanislav

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit addresses fixes for per-cpu kptr handling in eBPF, including a micro-optimization and test cases addition.', 'keywords': 'per-cpu,kptr,fixed', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: d440ba91ca4d3004709876779d40713a99e21f6a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d440ba91ca4d3004709876779d40713a99e21f6a
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1697836513
  Commit Message:
    selftests/bpf: Add more test cases for bpf memory allocator

Add the following 3 test cases for bpf memory allocator:
1) Do allocation in bpf program and free through map free
2) Do batch per-cpu allocation and per-cpu free in bpf program
3) Do per-cpu allocation in bpf program and free through map free

For per-cpu allocation
  Parent Hashes: e383a45902337356d9ccad797094a27c6b2150f9
  Refs:  because per-cpu allocation can not refill timely
sometimes

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added test cases for memory allocation and management in bpf programs.', 'keywords': 'bpf,test cases,allocator', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e383a45902337356d9ccad797094a27c6b2150f9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e383a45902337356d9ccad797094a27c6b2150f9
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1697836513
  Commit Message:
    bpf: Use bpf_global_percpu_ma for per-cpu kptr in __bpf_obj_drop_impl()

The following warning was reported when running "./test_progs -t
test_bpf_ma/percpu_free_through_map_free":

  ------------[ cut here ]------------
  WARNING: CPU: 1 PID: 68 at kernel/bpf/memalloc.c:342
  CPU: 1 PID: 68 Comm: kworker/u16:2 Not tainted 6.6.0-rc2+ #222
  Hardware name: QEMU Standard PC (i440FX + PIIX
  Parent Hashes: e581a3461de3f129cfe888a67d9f31086328271f
  Refs:  1996)
  Workqueue: events_unbound bpf_map_free_deferred
  RIP: 0010:bpf_mem_refill+0x21c/0x2a0
  ......
  Call Trace:
   <IRQ>
   ? bpf_mem_refill+0x21c/0x2a0
   irq_work_single+0x27/0x70
   irq_work_run_list+0x2a/0x40
   irq_work_run+0x18/0x40
   __sysvec_irq_work+0x1c/0xc0
   sysvec_irq_work+0x73/0x90
   </IRQ>
   <TASK>
   asm_sysvec_irq_work+0x1b/0x20
  RIP: 0010:unit_free+0x50/0x80
   ......
   bpf_mem_free+0x46/0x60
   __bpf_obj_drop_impl+0x40/0x90
   bpf_obj_free_fields+0x17d/0x1a0
   array_map_free+0x6b/0x170
   bpf_map_free_deferred+0x54/0xa0
   process_scheduled_works+0xba/0x370
   worker_thread+0x16d/0x2e0
   kthread+0x105/0x140
   ret_from_fork+0x39/0x60
   ret_from_fork_asm+0x1b/0x30
   </TASK>
  ---[ end trace 0000000000000000 ]---

The reason is simple: __bpf_obj_drop_impl() does not know the freeing
field is a per-cpu pointer and it uses bpf_global_ma to free the
pointer. Because bpf_global_ma is not a per-cpu allocator

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes per-cpu kptr allocation issue in __bpf_obj_drop_impl related to bpf_global_percpu_ma.', 'keywords': 'per-cpu,kptr,bpf_global_percpu_ma', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: e581a3461de3f129cfe888a67d9f31086328271f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e581a3461de3f129cfe888a67d9f31086328271f
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1697836513
  Commit Message:
    bpf: Move the declaration of __bpf_obj_drop_impl() to bpf.h

both syscall.c and helpers.c have the declaration of
__bpf_obj_drop_impl()
  Parent Hashes: 3f2189e4f77b7a3e979d143dc4ff586488c7e8a5
  Refs:  so just move it to a common header file.

Signed-off-by: Hou Tao <houtao1@huawei.com>
Link: https://lore.kernel.org/r/20231020133202.4043247-6-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The declaration of __bpf_obj_drop_impl() is moved to a common header file bpf.h.', 'keywords': 'declaration, bpf_obj_drop_impl, header', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3f2189e4f77b7a3e979d143dc4ff586488c7e8a5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3f2189e4f77b7a3e979d143dc4ff586488c7e8a5
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1697836513
  Commit Message:
    bpf: Use pcpu_alloc_size() in bpf_mem_free{_rcu}()

For bpf_global_percpu_ma
  Parent Hashes: baa8fdecd87bb8751237b45e3bcb5a179e5a12ca
  Refs:  the pointer passed to bpf_mem_free_rcu() is
allocated by kmalloc() and its size is fixed (16-bytes on x86-64). So
no matter which cache allocates the dynamic per-cpu area

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Optimize memory allocation in bpf_mem_free_rcu using pcpu_alloc_size.', 'keywords': 'pcpu_alloc_size, bpf_mem_free_rcu, optimization', 'commit_classification': "It's a performance optimization.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: baa8fdecd87bb8751237b45e3bcb5a179e5a12ca
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: baa8fdecd87bb8751237b45e3bcb5a179e5a12ca
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1697836513
  Commit Message:
    bpf: Re-enable unit_size checking for global per-cpu allocator

With pcpu_alloc_size() in place
  Parent Hashes: b460bc8302f222d346f0c15bba980eb8c36d6278
  Refs:  check whether or not the size of
the dynamic per-cpu area is matched with unit_size.

Signed-off-by: Hou Tao <houtao1@huawei.com>
Link: https://lore.kernel.org/r/20231020133202.4043247-4-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Re-enable unit size checking for global per-cpu allocator in eBPF.', 'keywords': 'unit size, per-cpu allocator, checking', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF maps', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: b460bc8302f222d346f0c15bba980eb8c36d6278
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b460bc8302f222d346f0c15bba980eb8c36d6278
  Author Name: Hou Tao
  Author Email: houtao1@huawei.com
  Commit Date: 1697836506
  Commit Message:
    mm/percpu.c: introduce pcpu_alloc_size()

Introduce pcpu_alloc_size() to get the size of the dynamic per-cpu
area. It will be used by bpf memory allocator in the following patches.
BPF memory allocator maintains per-cpu area caches for multiple area
sizes and its free API only has the to-be-freed per-cpu pointer
  Parent Hashes: 394e6869f0185e89cb815db29bf819474df858ae
  Refs:  so it
needs the size of dynamic per-cpu area to select the corresponding cache
when bpf program frees the dynamic per-cpu pointer.

Acked-by: Dennis Zhou <dennis@kernel.org>
Signed-off-by: Hou Tao <houtao1@huawei.com>
Link: https://lore.kernel.org/r/20231020133202.4043247-3-houtao@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce pcpu_alloc_size() to assist BPF memory allocator in managing per-cpu area caches.', 'keywords': 'pcpu_alloc_size,dynamic,per-cpu', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: da1055b673f3baac2249571c9882ce767a0aa746
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: da1055b673f3baac2249571c9882ce767a0aa746
  Author Name: Kumar Kartikeya Dwivedi
  Author Email: memxor@gmail.com
  Commit Date: 1697819379
  Commit Message:
    selftests/bpf: Make linked_list failure test more robust

The linked list failure test 'pop_front_off' and 'pop_back_off'
currently rely on matching exact instruction and register values.  The
purpose of the test is to ensure the offset is correctly incremented for
the returned pointers from list pop helpers
  Parent Hashes: bab8ac3c5339d7ec5312dcd836cfa8645edb954f
  Refs:  which can then be used with
container_of to obtain the real object. Hence

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improved robustness of linked list failure test in selftests/bpf by ensuring accurate offset increment for list pop helpers.', 'keywords': 'linked list,test robustness,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 5069211e2f0b47e75119805e23ae6352d871e263
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 5069211e2f0b47e75119805e23ae6352d871e263
  Author Name: Thomas Richter
  Author Email: tmricht@linux.ibm.com
  Commit Date: 1697780506
  Commit Message:
    perf trace: Use the right bpf_probe_read(_str) variant for reading user data

Perf test case 111 Check open filename arg using perf trace + vfs_getname
fails on s390. This is caused by a failing function
bpf_probe_read() in file util/bpf_skel/augmented_raw_syscalls.bpf.c.

The root cause is the lookup by address. Function bpf_probe_read()
is used. This function works only for architectures
with ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE.

On s390 is not possible to determine from the address to which
address space the address belongs to (user or kernel space).

Replace bpf_probe_read() by bpf_probe_read_kernel()
and bpf_probe_read_str() by bpf_probe_read_user_str() to
explicity specify the address space the address refers to.

Output before:
 # ./perf trace -eopen
  Parent Hashes: 1f36b190ad2dea68e3a7e84b7b2f24ce8c4063ea
  Refs: openat -- touch /tmp/111
 libbpf: prog 'sys_enter': BPF program load failed: Invalid argument
 libbpf: prog 'sys_enter': -- BEGIN PROG LOAD LOG --
 reg type unsupported for arg#0 function sys_enter#75
 0: R1=ctx(off=0

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix bpf_probe_read variant usage for user data reading in perf tool on s390 architecture.', 'keywords': 'perf,bpf_probe_read,s390', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 4fa008a2db484024a5cb52676a1b1534dc82330c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4fa008a2db484024a5cb52676a1b1534dc82330c
  Author Name: Arnaldo Carvalho de Melo
  Author Email: acme@redhat.com
  Commit Date: 1697765638
  Commit Message:
    tools build: Fix llvm feature detection
  Parent Hashes: f38f547314b858b94d36aeb9a4401f0aade7d1af
  Refs:  still used by bpftool

When removing the BPF event for perf a feature test that checks if the
llvm devel files are availabe was removed but that is also used by
bpftool.

bpftool uses it to decide what kind of disassembly it will use: llvm or
binutils based.

Removing the tools/build/feature/test-llvm.cpp file made bpftool to
always fallback to binutils disassembly

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes llvm feature detection in tools build affecting bpftool disassembly selection.', 'keywords': 'llvm,bpftool,disassembly', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: bab8ac3c5339d7ec5312dcd836cfa8645edb954f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bab8ac3c5339d7ec5312dcd836cfa8645edb954f
  Author Name: Alexei Starovoitov
  Author Email: ast@kernel.org
  Commit Date: 1697760167
  Commit Message:
    Merge branch 'add-open-coded-task-css_task-and-css-iters'

Chuyi Zhou says:

====================
Add Open-coded task
  Parent Hashes: 6bd5e167af2e9d1aa79e4a1a2598abcdc8fafd59 130e0f7af9fc7388b90fb016ca13ff3840c48d4a
  Refs:  css_task and css iters

This is version 6 of task

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit merges changes introducing open-coded task iterations, adding new task and CSS iteration features.', 'keywords': 'open-coded, task, CSS', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 130e0f7af9fc7388b90fb016ca13ff3840c48d4a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 130e0f7af9fc7388b90fb016ca13ff3840c48d4a
  Author Name: Chuyi Zhou
  Author Email: zhouchuyi@bytedance.com
  Commit Date: 1697760167
  Commit Message:
    selftests/bpf: Add tests for open-coded task and css iter

This patch adds 4 subtests to demonstrate these patterns and validating
correctness.

subtest1:

1) We use task_iter to iterate all process in the system and search for the
current process with a given pid.

2) We create some threads in current process context
  Parent Hashes: ddab78cbb52f81f7f7598482602342955b2ff8b8
  Refs:  and use
BPF_TASK_ITER_PROC_THREADS to iterate all threads of current process. As
expected

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces four subtests for open-coded task and CSS iterator patterns in selftests for BPF.', 'keywords': 'tests,selftests,BPF', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ddab78cbb52f81f7f7598482602342955b2ff8b8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ddab78cbb52f81f7f7598482602342955b2ff8b8
  Author Name: Chuyi Zhou
  Author Email: zhouchuyi@bytedance.com
  Commit Date: 1697760167
  Commit Message:
    selftests/bpf: rename bpf_iter_task.c to bpf_iter_tasks.c

The newly-added struct bpf_iter_task has a name collision with a selftest
for the seq_file task iter's bpf skel
  Parent Hashes: cb3ecf7915a1d7ce5304402f4d8616d9fa5193f7
  Refs:  so the selftests/bpf/progs file is
renamed in order to avoid the collision.

Signed-off-by: Chuyi Zhou <zhouchuyi@bytedance.com>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/r/20231018061746.111364-8-zhouchuyi@bytedance.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Renamed bpf_iter_task.c to bpf_iter_tasks.c in selftests to avoid a name collision.', 'keywords': 'rename, selftests, collision', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs']}
--------------------
--------------------
Processing Commit ID: cb3ecf7915a1d7ce5304402f4d8616d9fa5193f7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cb3ecf7915a1d7ce5304402f4d8616d9fa5193f7
  Author Name: Chuyi Zhou
  Author Email: zhouchuyi@bytedance.com
  Commit Date: 1697760166
  Commit Message:
    bpf: Let bpf_iter_task_new accept null task ptr

When using task_iter to iterate all threads of a specific task
  Parent Hashes: dfab99df147b0d364f0c199f832ff2aedfb2265a
  Refs:  we enforce
that the user must pass a valid task pointer to ensure safety. However

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit allows bpf_iter_task_new to accept a null task pointer for iterating threads.', 'keywords': 'bpf, task_ptr, iter', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: dfab99df147b0d364f0c199f832ff2aedfb2265a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: dfab99df147b0d364f0c199f832ff2aedfb2265a
  Author Name: Chuyi Zhou
  Author Email: zhouchuyi@bytedance.com
  Commit Date: 1697760166
  Commit Message:
    bpf: teach the verifier to enforce css_iter and task_iter in RCU CS

css_iter and task_iter should be used in rcu section. Specifically
  Parent Hashes: 7251d0905e7518bcb990c8e9a3615b1bb23c78f2
  Refs:  in
sleepable progs explicit bpf_rcu_read_lock() is needed before use these
iters. In normal bpf progs that have implicit rcu_read_lock()

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit enforces css_iter and task_iter usage in RCU critical sections within BPF programs.', 'keywords': 'verifier,css_iter,RCU', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 7251d0905e7518bcb990c8e9a3615b1bb23c78f2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7251d0905e7518bcb990c8e9a3615b1bb23c78f2
  Author Name: Chuyi Zhou
  Author Email: zhouchuyi@bytedance.com
  Commit Date: 1697760166
  Commit Message:
    bpf: Introduce css open-coded iterator kfuncs

This Patch adds kfuncs bpf_iter_css_{new
  Parent Hashes: c68a78ffe2cb4207f64fd0f4262818c728c67be0
  Refs: next

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit introduces kfuncs for open-coded iterator in eBPF.', 'keywords': 'kfuncs, iterator, bpf', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: c68a78ffe2cb4207f64fd0f4262818c728c67be0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c68a78ffe2cb4207f64fd0f4262818c728c67be0
  Author Name: Chuyi Zhou
  Author Email: zhouchuyi@bytedance.com
  Commit Date: 1697760166
  Commit Message:
    bpf: Introduce task open coded iterator kfuncs

This patch adds kfuncs bpf_iter_task_{new
  Parent Hashes: 9c66dc94b62aef23300f05f63404afb8990920b4
  Refs: next

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces task open coded iterator kfuncs for eBPF.', 'keywords': 'bpf, task, kfuncs', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9c66dc94b62aef23300f05f63404afb8990920b4
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9c66dc94b62aef23300f05f63404afb8990920b4
  Author Name: Chuyi Zhou
  Author Email: zhouchuyi@bytedance.com
  Commit Date: 1697760166
  Commit Message:
    bpf: Introduce css_task open-coded iterator kfuncs

This patch adds kfuncs bpf_iter_css_task_{new
  Parent Hashes: 6da88306811b40a207c94c9da9faf07bdb20776e
  Refs: next

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduce open-coded iterator kfuncs for css_task in bpf.', 'keywords': 'bpf, kfuncs, iterator', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 6da88306811b40a207c94c9da9faf07bdb20776e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6da88306811b40a207c94c9da9faf07bdb20776e
  Author Name: Chuyi Zhou
  Author Email: zhouchuyi@bytedance.com
  Commit Date: 1697760166
  Commit Message:
    cgroup: Prepare for using css_task_iter_*() in BPF

This patch makes some preparations for using css_task_iter_*() in BPF
Program.

1. Flags CSS_TASK_ITER_* are #define-s and it's not easy for bpf prog to
use them. Convert them to enum so bpf prog can take them from vmlinux.h.

2. In the next patch we will add css_task_iter_*() in common kfuncs which
is not safe. Since css_task_iter_*() does spin_unlock_irq() which might
screw up irq flags depending on the context where bpf prog is running.
So we should use irqsave/irqrestore here and the switching is harmless.

Suggested-by: Alexei Starovoitov <ast@kernel.org>
Signed-off-by: Chuyi Zhou <zhouchuyi@bytedance.com>
Acked-by: Tejun Heo <tj@kernel.org>
Link: https://lore.kernel.org/r/20231018061746.111364-2-zhouchuyi@bytedance.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Parent Hashes: 6bd5e167af2e9d1aa79e4a1a2598abcdc8fafd59
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Prepare for using css_task_iter functions in BPF by converting defines to enums and addressing irq issues.', 'keywords': 'css_task_iter, BPF, preparation', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: b9ec913212e6e91efa5a0a612c4a8ec4cf5da896
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b9ec913212e6e91efa5a0a612c4a8ec4cf5da896
  Author Name: Breno Leitao
  Author Email: leitao@debian.org
  Commit Date: 1697755324
  Commit Message:
    selftests/bpf/sockopt: Add io_uring support

Expand the sockopt test to use also check for io_uring {g
  Parent Hashes: 4232c6e349f3a591fd0f432e6b858d32095adce6
  Refs: s}etsockopt
commands operations.

This patch starts by marking each test if they support io_uring support
or not.

Right now

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds io_uring support to the sockopt selftests for checking setsockopt commands operations.', 'keywords': 'io_uring,sockopt,selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: 7746a6adfc81e2e0386a85117d5e8fd824da367b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7746a6adfc81e2e0386a85117d5e8fd824da367b
  Author Name: Breno Leitao
  Author Email: leitao@debian.org
  Commit Date: 1697755323
  Commit Message:
    tools headers: Grab copy of io_uring.h

This file will be used by mini_uring.h and allow tests to run without
the need of installing liburing to run the tests.

This is needed to run io_uring tests in BPF
  Parent Hashes: 5fea44a6e05b86bf49019fbbf2ab30098d03e0dc
  Refs:  such as
(tools/testing/selftests/bpf/prog_tests/sockopt.c).

Signed-off-by: Breno Leitao <leitao@debian.org>
Link: https://lore.kernel.org/r/20231016134750.1381153-7-leitao@debian.org
Signed-off-by: Jens Axboe <axboe@kernel.dk>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit grabs a copy of io_uring.h for running io_uring tests without liburing installation.', 'keywords': 'io_uring,h,tests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 3f31e0d14d44ad491a81b7c1f83f32fbc300a867
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3f31e0d14d44ad491a81b7c1f83f32fbc300a867
  Author Name: Breno Leitao
  Author Email: leitao@debian.org
  Commit Date: 1697745937
  Commit Message:
    bpf: Add sockptr support for setsockopt

The whole network stack uses sockptr
  Parent Hashes: a615f67e1a426f35366b8398c11f31c148e7df48
  Refs:  and while it doesn't move to
something more modern

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add support for sockptr in the bpf setsockopt function.', 'keywords': 'sockptr, setsockopt, network', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: a615f67e1a426f35366b8398c11f31c148e7df48
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a615f67e1a426f35366b8398c11f31c148e7df48
  Author Name: Breno Leitao
  Author Email: leitao@debian.org
  Commit Date: 1697745928
  Commit Message:
    bpf: Add sockptr support for getsockopt

The whole network stack uses sockptr
  Parent Hashes: 6ce4a93dbb5bd93bc2bdf14da63f9360a4dcd6a1
  Refs:  and while it doesn't move to
something more modern

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit adds sockptr support for getsockopt in the BPF subsystem.', 'keywords': 'bpf,sockptr,getsockopt', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: ce55c22ec8b223a90ff3e084d842f73cfba35588
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ce55c22ec8b223a90ff3e084d842f73cfba35588
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1697742498
  Commit Message:
    Merge tag 'net-6.6-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Jakub Kicinski:
 "Including fixes from bluetooth
  Parent Hashes: 74e9347ebc5be452935fe4f3eddb150aa5a6f4fe 524515020f2552759a7ef1c9d03e7dac9b1ff3c2
  Refs:  netfilter

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge network-related fixes for the Linux kernel, including updates from bluetooth.', 'keywords': 'networking, fixes, bluetooth', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 6bd5e167af2e9d1aa79e4a1a2598abcdc8fafd59
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 6bd5e167af2e9d1aa79e4a1a2598abcdc8fafd59
  Author Name: Manu Bretelle
  Author Email: chantr4@gmail.com
  Commit Date: 1697725815
  Commit Message:
    bpftool: Wrap struct_ops dump in an array

When dumping a struct_ops
  Parent Hashes: 90704b4be0b0d6d0a7a9369d4b9aae6a579602c7
  Refs:  2 dictionaries are emitted.

When using `name`

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Wraps struct_ops dump in an array within bpftool utility.', 'keywords': 'bpftool,struct_ops,array', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 90704b4be0b0d6d0a7a9369d4b9aae6a579602c7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 90704b4be0b0d6d0a7a9369d4b9aae6a579602c7
  Author Name: Manu Bretelle
  Author Email: chantr4@gmail.com
  Commit Date: 1697725776
  Commit Message:
    bpftool: Fix printing of pointer value

When printing a pointer value
  Parent Hashes: 0e133a13370389d3894891eafe54fec2c44ad735
  Refs:  "%p" will either print the hexadecimal
value of the pointer (e.g `0x1234`)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes the way bpftool prints pointer values to display them in hexadecimal format.', 'keywords': 'bpftool,pointer printing,bug fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 68b54aeff804acceb02f228ea2e28419272c1fb9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 68b54aeff804acceb02f228ea2e28419272c1fb9
  Author Name: Paolo Abeni
  Author Email: pabeni@redhat.com
  Commit Date: 1697677771
  Commit Message:
    tcp_bpf: properly release resources on error paths

In the blamed commit below
  Parent Hashes: a13b67c9a015c4e21601ef9aa4ec9c5d972df1b4
  Refs:  I completely forgot to release the acquired
resources before erroring out in the TCP BPF code

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes resource release on error paths in the TCP BPF code.', 'keywords': 'TCP BPF,release,errorpaths', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['socket like programs']}
--------------------
--------------------
Processing Commit ID: bdcb37a5d8de3253da48b120e3f10863696fb654
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bdcb37a5d8de3253da48b120e3f10863696fb654
  Author Name: Arnd Bergmann
  Author Email: arnd@arndb.de
  Commit Date: 1697677677
  Commit Message:
    buildid: reduce header file dependencies for module

The vmlinux decompressor code intentionally has only a limited set of
included header files
  Parent Hashes: 6cb42f91aa6dfd10fd847c469caebe63b35141ff
  Refs:  but this started running into a build failure
because of the bitmap logic needing linux/errno.h:

In file included from include/linux/cpumask.h:12

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit reduces header file dependencies for the vmlinux decompressor module to fix build failures.', 'keywords': 'header, dependencies, module', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 0e133a13370389d3894891eafe54fec2c44ad735
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0e133a13370389d3894891eafe54fec2c44ad735
  Author Name: Dave Thaler
  Author Email: dthaler@microsoft.com
  Commit Date: 1697672172
  Commit Message:
    bpf
  Parent Hashes: bb6a88885fde24835afdaa1c5bb976a1bf5c5d71
  Refs:  docs: Define signed modulo as using truncated division

There's different mathematical definitions (truncated

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Clarified the definition of signed modulo using truncated division in documentation.', 'keywords': 'signed modulo, truncated division, documentation', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b5c532e90478e134b66b067c2b0487526ac4161e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b5c532e90478e134b66b067c2b0487526ac4161e
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1697668187
  Commit Message:
    tools/build: Fix -s detection code in tools/scripts/Makefile.include

As Dmitry described in [1] changelog the current way of detecting
-s option is broken for new make.

Changing the tools/build -s option detection the same way as it was
fixed for root Makefile in [1].

[1] 4bf73588165b ("kbuild: Port silent mode detection to future gnu make.")

Cc: Dmitry Goncharov <dgoncharov@users.sf.net>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Cc: KP Singh <kpsingh@chromium.org>
Cc: Martin KaFai Lau <kafai@fb.com>
Cc: Song Liu <songliubraving@fb.com>
Cc: Yonghong Song <yhs@fb.com>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: Hao Luo <haoluo@google.com>
Cc: Ian Rogers <irogers@google.com>
Cc: Stanislav Fomichev <sdf@google.com>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Quentin Monnet <quentin@isovalent.com>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Ingo Molnar <mingo@kernel.org>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: bpf@vger.kernel.org
Cc: linux-perf-users@vger.kernel.org
Link: https://lore.kernel.org/r/20231008212251.236023-3-jolsa@kernel.org
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: d9997f7ffb137447aa2f820c26cb1e6f5890d978
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix detection of the -s option in Makefile for compatibility with new versions of GNU make.', 'keywords': 'detection, Makefile, compatibility', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: d9997f7ffb137447aa2f820c26cb1e6f5890d978
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d9997f7ffb137447aa2f820c26cb1e6f5890d978
  Author Name: Jiri Olsa
  Author Email: jolsa@kernel.org
  Commit Date: 1697668175
  Commit Message:
    tools/build: Fix -s detection code in tools/build/Makefile.build

As Dmitry described in [1] changelog the current way of detecting
-s option is broken for new make.

Changing the tools/build -s option detection the same way as it was
fixed for root Makefile in [1].

[1] 4bf73588165b ("kbuild: Port silent mode detection to future gnu make.")

Cc: Dmitry Goncharov <dgoncharov@users.sf.net>
Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Cc: KP Singh <kpsingh@chromium.org>
Cc: Martin KaFai Lau <kafai@fb.com>
Cc: Song Liu <songliubraving@fb.com>
Cc: Yonghong Song <yhs@fb.com>
Cc: John Fastabend <john.fastabend@gmail.com>
Cc: Hao Luo <haoluo@google.com>
Cc: Ian Rogers <irogers@google.com>
Cc: Stanislav Fomichev <sdf@google.com>
Cc: Daniel Borkmann <daniel@iogearbox.net>
Cc: Quentin Monnet <quentin@isovalent.com>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Andrii Nakryiko <andrii@kernel.org>
Cc: Alexei Starovoitov <ast@kernel.org>
Cc: Ingo Molnar <mingo@kernel.org>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: bpf@vger.kernel.org
Cc: linux-perf-users@vger.kernel.org
Link: https://lore.kernel.org/r/20231008212251.236023-2-jolsa@kernel.org
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: 9a13ee457a6e7a850ac1d145b0731b1d729b8f42
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix the -s option detection in tools/build/Makefile.build for compatibility with new make versions.', 'keywords': 'Fix, Makefile, tools', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 71ca5ee18708c1f9f086e20ac0a657009bcfe43a
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 71ca5ee18708c1f9f086e20ac0a657009bcfe43a
  Author Name: Joe Perches
  Author Email: joe@perches.com
  Commit Date: 1697665402
  Commit Message:
    get_maintainer: add --keywords-in-file option

There were some recent attempts [1] [2] to make the K: field less noisy
and its behavior more obvious.  Ultimately
  Parent Hashes: ead5a727739fa63b94ccd281d848a503032444ee
  Refs:  a shift in the default
behavior and an associated command line flag is the best choice.

Currently

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added an option to get_maintainer for filtering with keywords in the file.', 'keywords': 'get_maintainer, keywords, filtering', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 1bc628a756d93a7bed2f80914b15821bb9a4369c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1bc628a756d93a7bed2f80914b15821bb9a4369c
  Author Name: Jeff Layton
  Author Email: jlayton@kernel.org
  Commit Date: 1697630910
  Commit Message:
    bpf: convert to new timestamp accessors

Convert to using the new inode timestamp accessor functions.

Signed-off-by: Jeff Layton <jlayton@kernel.org>
Link: https://lore.kernel.org/r/20231004185347.80880-79-jlayton@kernel.org
Signed-off-by: Christian Brauner <brauner@kernel.org>

  Parent Hashes: d162a3cf6ee1a64417e11693c1410d79878c9917
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates BPF code to use new inode timestamp accessors.', 'keywords': 'bpf, timestamp, accessors', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4b47b0fa4b15e0de916e7dd93cd787fdab208ff2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4b47b0fa4b15e0de916e7dd93cd787fdab208ff2
  Author Name: Muhammad Muzammil
  Author Email: m.muzzammilashraf@gmail.com
  Commit Date: 1697628420
  Commit Message:
    powerpc/bpf: Fixed 'instead' typo in bpf_jit_build_body()

Fixed 'instead' typo.

Signed-off-by: Muhammad Muzammil <m.muzzammilashraf@gmail.com>
Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://msgid.link/20231013053118.11221-1-m.muzzammilashraf@gmail.com


  Parent Hashes: 1c7b4bc375c2a235e3dcb53c46111883df838e42
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Corrected a typo in the bpf_jit_build_body function for PowerPC architecture.', 'keywords': 'typo, bpf, PowerPC', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The JIT compiler', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: bb6a88885fde24835afdaa1c5bb976a1bf5c5d71
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: bb6a88885fde24835afdaa1c5bb976a1bf5c5d71
  Author Name: Larysa Zaremba
  Author Email: larysa.zaremba@intel.com
  Commit Date: 1697616508
  Commit Message:
    selftests/bpf: Add options and frags to xdp_hw_metadata

This is a follow-up to the commit 9b2b86332a9b ("bpf: Allow to use kfunc
XDP hints and frags together").

The are some possible implementations problems that may arise when providing
metadata specifically for multi-buffer packets
  Parent Hashes: 24516309e330cd592c04d0467313d885584af4e8
  Refs:  therefore there must be a
possibility to test such option separately.

Add an option to use multi-buffer AF_XDP xdp_hw_metadata and mark used XDP
program as capable to use frags.

As for now

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add an option to test XDP hardware metadata with multi-buffer and frags support in selftests.', 'keywords': 'XDP, metadata, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 24516309e330cd592c04d0467313d885584af4e8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 24516309e330cd592c04d0467313d885584af4e8
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1697572663
  Commit Message:
    selftests/bpf: Add additional mprog query test coverage

Add several new test cases which assert corner cases on the mprog query
mechanism
  Parent Hashes: 44cb03f19b38c11cfc5bf76ea6d6885da210ded2
  Refs:  for example

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add new test cases for mprog query to cover corner cases in selftests for BPF.', 'keywords': 'selftests, mprog, query', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: eff65ee26ed73f3ca635bac13c386a4538a608d8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: eff65ee26ed73f3ca635bac13c386a4538a608d8
  Author Name: Athira Rajeev
  Author Email: atrajeev@linux.vnet.ibm.com
  Commit Date: 1697571651
  Commit Message:
    perf tests: Fix shellcheck warning in record_sideband.sh

Running shellcheck on record_sideband.sh throws below
warning:

	In tests/shell/record_sideband.sh line 25:
	  if ! perf record -o ${perfdata} -BN --no-bpf-event -C $1 true 2>&1 >/dev/null
	    ^--^ SC2069: To redirect stdout+stderr
  Parent Hashes: 47f5693c4ce9b2bf2364303a531423e43278d3b6
  Refs:  2>&1 must be last (or use '{ cmd > file; } 2>&1' to clarify).

This shows shellcheck warning SC2069 where the redirection
order needs to be fixed. Use "cmd > /dev/null 2>&1" to fix
the redirection of perf record output

Fixes: 23b97c7ee963 ("perf test: Add test case for record sideband events")
Signed-off-by: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Reviewed-by: Kajol Jain <kjain@linux.ibm.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: disgoel@linux.vnet.ibm.com
Link: https://lore.kernel.org/r/20231013073021.99794-3-atrajeev@linux.vnet.ibm.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes shellcheck warnings by correcting stdout and stderr redirection in record_sideband.sh script.', 'keywords': 'shellcheck, redirection, record_sideband.sh', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 44cb03f19b38c11cfc5bf76ea6d6885da210ded2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 44cb03f19b38c11cfc5bf76ea6d6885da210ded2
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1697560287
  Commit Message:
    selftests/bpf: Add selftest for bpf_task_under_cgroup() in sleepable prog

The result is as follows:

  $ tools/testing/selftests/bpf/test_progs --name=task_under_cgroup
  #237     task_under_cgroup:OK
  Summary: 1/0 PASSED
  Parent Hashes: 29a7e00ffadddd8d68eff311de1bf12ae10687bb
  Refs:  0 SKIPPED

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Added selftest for the bpf_task_under_cgroup function in sleepable program.', 'keywords': 'selftest,bpf_task_under_cgroup,sleepable', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 29a7e00ffadddd8d68eff311de1bf12ae10687bb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 29a7e00ffadddd8d68eff311de1bf12ae10687bb
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1697560061
  Commit Message:
    bpf: Fix missed rcu read lock in bpf_task_under_cgroup()

When employed within a sleepable program not under RCU protection
  Parent Hashes: 9a675ba55a96a45a9fb69e6a5c43f80c6682e541
  Refs:  the
use of 'bpf_task_under_cgroup()' may trigger a warning in the kernel log

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a missing RCU read lock in bpf_task_under_cgroup for sleepable programs.', 'keywords': 'RCU, bpf_task_under_cgroup, fix', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The helper and kfuncs', 'program_types_related': ['cgroup like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 9a675ba55a96a45a9fb69e6a5c43f80c6682e541
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9a675ba55a96a45a9fb69e6a5c43f80c6682e541
  Author Name: Sebastian Andrzej Siewior
  Author Email: bigeasy@linutronix.de
  Commit Date: 1697547723
  Commit Message:
    net
  Parent Hashes: 137df1189d128a6b5dee2f653e054b40ef36b94c
  Refs:  bpf: Add a warning if NAPI cb missed xdp_do_flush().

A few drivers were missing a xdp_do_flush() invocation after
XDP_REDIRECT.

Add three helper functions each for one of the per-CPU lists. Return
true if the per-CPU list is non-empty and flush the list.

Add xdp_do_check_flushed() which invokes each helper functions and
creates a warning if one of the functions had a non-empty list.

Hide everything behind CONFIG_DEBUG_NET.

Suggested-by: Jesper Dangaard Brouer <hawk@kernel.org>
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Reviewed-by: Toke Høiland-Jørgensen <toke@redhat.com>
Acked-by: Jakub Kicinski <kuba@kernel.org>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20231016125738.Yt79p1uF@linutronix.de


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add warning for missed xdp_do_flush invocation in NAPI callbacks for XDP_REDIRECT.', 'keywords': 'xdp_do_flush,NAPI,warning', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['xdp like programs']}
--------------------
--------------------
Processing Commit ID: 137df1189d128a6b5dee2f653e054b40ef36b94c
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 137df1189d128a6b5dee2f653e054b40ef36b94c
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1697535800
  Commit Message:
    libbpf: Don't assume SHT_GNU_verdef presence for SHT_GNU_versym section

Fix too eager assumption that SHT_GNU_verdef ELF section is going to be
present whenever binary has SHT_GNU_versym section. It seems like either
SHT_GNU_verdef or SHT_GNU_verneed can be used
  Parent Hashes: a3c2dd96487f1dd734c9443a3472c8dafa689813
  Refs:  so failing on missing
SHT_GNU_verdef actually breaks use cases in production.

One specific reported issue

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix assumption regarding SHT_GNU_verdef and SHT_GNU_versym ELF sections in libbpf.', 'keywords': 'SHT_GNU_verdef,SHT_GNU_versym,libbpf', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The libbpf library', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: a3c2dd96487f1dd734c9443a3472c8dafa689813
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: a3c2dd96487f1dd734c9443a3472c8dafa689813
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1697515533
  Commit Message:
    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next

Daniel Borkmann says:

====================
pull-request: bpf-next 2023-10-16

We've added 90 non-merge commits during the last 25 day(s) which contain
a total of 120 files changed
  Parent Hashes: 90de47f020db086f7929e09f64efd0cf627d6869 99c9991f4e5d77328187187d0c921a3b62bfa998
  Refs:  3519 insertions(+)

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Merged 90 non-merge commits from the 'bpf-next' branch containing 120 files changed.", 'keywords': 'merge,bpf-next,files', 'commit_classification': "It's other type of commit.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 54a59aed395ce0f4177b5212e5746a6462de3ad9
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 54a59aed395ce0f4177b5212e5746a6462de3ad9
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1697476056
  Commit Message:
    net
  Parent Hashes: dccce1d7c04051bc25d3abbe7716d0ae7af9c28a
  Refs:  sched: Make tc-related drop reason more flexible

Currently

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Refactor tc-related drop reasons for increased flexibility in network scheduling.', 'keywords': 'tc drop flexible', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['tc/netfilter like programs']}
--------------------
--------------------
Processing Commit ID: 99c9991f4e5d77328187187d0c921a3b62bfa998
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 99c9991f4e5d77328187187d0c921a3b62bfa998
  Author Name: Daniel Borkmann
  Author Email: daniel@iogearbox.net
  Commit Date: 1697456981
  Commit Message:
    Merge branch 'bpf-log-improvements'

Andrii Nakryiko says:

====================
This patch set fixes ambiguity in BPF verifier log output of SCALAR register
in the parts that emit umin/umax
  Parent Hashes: 0e10fd4b7a6dd03cf6d1da293d5d50082917f0e0 1a8a315f008a58f54fecb012b928aa6a494435b3
  Refs:  smin/smax

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improves BPF verifier log output for scalar register to fix umin/umax ambiguity.', 'keywords': 'BPF verifier, log, scalar', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 1a8a315f008a58f54fecb012b928aa6a494435b3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1a8a315f008a58f54fecb012b928aa6a494435b3
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1697456958
  Commit Message:
    bpf: Ensure proper register state printing for cond jumps

Verifier emits relevant register state involved in any given instruction
next to it after `;` to the right
  Parent Hashes: 72f8a1de4a7ecb23393a920dface58d5a96f42d8
  Refs:  if possible. Or

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Ensure correct register state printing for conditional jumps in the eBPF verifier.', 'keywords': 'register, verifier, cond jumps', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 72f8a1de4a7ecb23393a920dface58d5a96f42d8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 72f8a1de4a7ecb23393a920dface58d5a96f42d8
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1697456958
  Commit Message:
    bpf: Disambiguate SCALAR register state output in verifier logs

Currently the way that verifier prints SCALAR_VALUE register state (and
PTR_TO_PACKET
  Parent Hashes: cde785142885e1fc62a9ae92e7aae90285ed3d79
  Refs:  which can have var_off and ranges info as well) is very
ambiguous.

In the name of brevity we are trying to eliminate "unnecessary" output
of umin/umax

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improve the clarity of SCALAR register state outputs in bpf verifier logs.', 'keywords': 'verifier, SCALAR, disambiguate', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF verifier', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: cde785142885e1fc62a9ae92e7aae90285ed3d79
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: cde785142885e1fc62a9ae92e7aae90285ed3d79
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1697456958
  Commit Message:
    selftests/bpf: Make align selftests more robust

Align subtest is very specific and finicky about expected verifier log
output and format. This is often completely unnecessary as in a bunch of
situations test actually cares about var_off part of register state. But
given how exact it is right now
  Parent Hashes: 08a7078feacf419305d86d36b974c48347f3abb0
  Refs:  any tiny verifier log changes can lead
to align tests failures

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improves robustness of align selftests by focusing on var_off part of register state in verifier logs.', 'keywords': 'selftests, align, verifier', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 08a7078feacf419305d86d36b974c48347f3abb0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 08a7078feacf419305d86d36b974c48347f3abb0
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1697456958
  Commit Message:
    selftests/bpf: Improve missed_kprobe_recursion test robustness

Given missed_kprobe_recursion is non-serial and uses common testing
kfuncs to count number of recursion misses it's possible that some other
parallel test can trigger extraneous recursion misses. So we can't
expect exactly 1 miss. Relax conditions and expect at least one.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: Jiri Olsa <jolsa@kernel.org>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20231011223728.3188086-3-andrii@kernel.org

  Parent Hashes: 2d78928c9cf7bee08c3e2344e6e1755412855448
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Improves robustness of missed_kprobe_recursion test by relaxing conditions on recursion misses.', 'keywords': 'robustness,test,recursion', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['kprobe/uprobe/ftrace like programs']}
--------------------
--------------------
Processing Commit ID: 2d78928c9cf7bee08c3e2344e6e1755412855448
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 2d78928c9cf7bee08c3e2344e6e1755412855448
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1697456958
  Commit Message:
    selftests/bpf: Improve percpu_alloc test robustness

Make these non-serial tests filter BPF programs by intended PID of
a test runner process. This makes it isolated from other parallel tests
that might interfere accidentally.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Acked-by: John Fastabend <john.fastabend@gmail.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/bpf/20231011223728.3188086-2-andrii@kernel.org

  Parent Hashes: 0e10fd4b7a6dd03cf6d1da293d5d50082917f0e0
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit improves robustness of the percpu_alloc test by isolating BPF programs using intended PID to avoid interference.', 'keywords': 'percpu_alloc, BPF programs, robustness', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 0e10fd4b7a6dd03cf6d1da293d5d50082917f0e0
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0e10fd4b7a6dd03cf6d1da293d5d50082917f0e0
  Author Name: Andrii Nakryiko
  Author Email: andrii@kernel.org
  Commit Date: 1697237369
  Commit Message:
    Merge branch 'Open-coded task_vma iter'

Dave Marchevsky says:

====================
At Meta we have a profiling daemon which periodically collects
information on many hosts. This collection usually involves grabbing
stacks (user and kernel) using perf_event BPF progs and later symbolicating
them. For user stacks we try to use BPF_F_USER_BUILD_ID and rely on
remote symbolication
  Parent Hashes: ba8ea72388a192c10f1ee5f5a4a32332e7cced76 e0e1a7a5fc377d54bd792c6368a375d41fc316ef
  Refs:  but BPF_F_USER_BUILD_ID doesn't always succeed. In
those cases we must fall back to digging around in /proc/PID/maps to map
virtual address to (binary

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': "Integration of 'Open-coded task_vma iter' for improved profiling with perf_event BPF programs.", 'keywords': 'profiling, perf_event, task_vma', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['profile like programs']}
--------------------
--------------------
Processing Commit ID: e0e1a7a5fc377d54bd792c6368a375d41fc316ef
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e0e1a7a5fc377d54bd792c6368a375d41fc316ef
  Author Name: Dave Marchevsky
  Author Email: davemarchevsky@fb.com
  Commit Date: 1697237338
  Commit Message:
    selftests/bpf: Add tests for open-coded task_vma iter

The open-coded task_vma iter added earlier in this series allows for
natural iteration over a task's vmas using existing open-coded iter
infrastructure
  Parent Hashes: 4ac4546821584736798aaa9e97da9f6eaf689ea3
  Refs:  specifically bpf_for_each.

This patch adds a test demonstrating this pattern and validating
correctness. The vma->vm_start and vma->vm_end addresses of the first
1000 vmas are recorded and compared to /proc/PID/maps output. As
expected

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds tests for open-coded task_vma iterator in selftests/bpf.', 'keywords': 'task_vma, iterator, selftests', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['tracepoints like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 4ac4546821584736798aaa9e97da9f6eaf689ea3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 4ac4546821584736798aaa9e97da9f6eaf689ea3
  Author Name: Dave Marchevsky
  Author Email: davemarchevsky@fb.com
  Commit Date: 1697237338
  Commit Message:
    bpf: Introduce task_vma open-coded iterator kfuncs

This patch adds kfuncs bpf_iter_task_vma_{new
  Parent Hashes: 45b38941c81f16bb2e9b0115f03e164a3576ea8b
  Refs: next

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Introduces task_vma open-coded iterator kernel functions for BPF.', 'keywords': 'task_vma, iterator, kfuncs', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: 45b38941c81f16bb2e9b0115f03e164a3576ea8b
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 45b38941c81f16bb2e9b0115f03e164a3576ea8b
  Author Name: Dave Marchevsky
  Author Email: davemarchevsky@fb.com
  Commit Date: 1697237338
  Commit Message:
    selftests/bpf: Rename bpf_iter_task_vma.c to bpf_iter_task_vmas.c

Further patches in this series will add a struct bpf_iter_task_vma
  Parent Hashes: f10ca5da5bd71e5cefed7995e75a7c873ce3816e
  Refs: 
which will result in a name collision with the selftest prog renamed in
this patch. Rename the selftest to avoid the collision.

Signed-off-by: Dave Marchevsky <davemarchevsky@fb.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20231013204426.1074286-3-davemarchevsky@fb.com


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Rename bpf_iter_task_vma.c to bpf_iter_task_vmas.c to avoid name collision with future patches in selftests.', 'keywords': 'rename,selftests,collision', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: f10ca5da5bd71e5cefed7995e75a7c873ce3816e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: f10ca5da5bd71e5cefed7995e75a7c873ce3816e
  Author Name: Dave Marchevsky
  Author Email: davemarchevsky@fb.com
  Commit Date: 1697237338
  Commit Message:
    bpf: Don't explicitly emit BTF for struct btf_iter_num

Commit 6018e1f407cc ("bpf: implement numbers iterator") added the
BTF_TYPE_EMIT line that this patch is modifying. The struct btf_iter_num
doesn't exist
  Parent Hashes: ba8ea72388a192c10f1ee5f5a4a32332e7cced76
  Refs:  so only a forward declaration is emitted in BTF:

  FWD 'btf_iter_num' fwd_kind=struct

That commit was probably hoping to ensure that struct bpf_iter_num is
emitted in vmlinux BTF. A previous version of this patch changed the
line to emit the correct type

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit modifies BTF emission for struct btf_iter_num to only emit a forward declaration.', 'keywords': 'BTF, emit, forward declaration', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The BPF Type Format (BTF)', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: ba8ea72388a192c10f1ee5f5a4a32332e7cced76
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ba8ea72388a192c10f1ee5f5a4a32332e7cced76
  Author Name: Artem Savkov
  Author Email: asavkov@redhat.com
  Commit Date: 1697225976
  Commit Message:
    bpf: Change syscall_nr type to int in struct syscall_tp_t

linux-rt-devel tree contains a patch (b1773eac3f29c ("sched: Add support
for lazy preemption")) that adds an extra member to struct trace_entry.
This causes the offset of args field in struct trace_event_raw_sys_enter
be different from the one in struct syscall_trace_enter:

struct trace_event_raw_sys_enter {
        struct trace_entry         ent;                  /*     0    12 */

        /* XXX last struct has 3 bytes of padding */
        /* XXX 4 bytes hole
  Parent Hashes: 9c1292eca243821249fa99f40175b0660d9329e3
  Refs:  try to pack */

        long int                   id;                   /*    16     8 */
        long unsigned int          args[6];              /*    24    48 */
        /* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
        char                       __data[];             /*    72     0 */

        /* size: 72

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit changes the syscall_nr type to int in struct syscall_tp_t to ensure compatibility with trace_event_raw_sys_enter.', 'keywords': 'syscall_nr,type,trace_event', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The syscall interface', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 9c1292eca243821249fa99f40175b0660d9329e3
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9c1292eca243821249fa99f40175b0660d9329e3
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1697225743
  Commit Message:
    net/bpf: Avoid unused "sin_addr_len" warning when CONFIG_CGROUP_BPF is not set

It was reported that there is a compiler warning on the unused variable
"sin_addr_len" in af_inet.c when CONFIG_CGROUP_BPF is not set.
This patch is to address it similar to the ipv6 counterpart
in inet6_getname(). It is to "return sin_addr_len;"
instead of "return sizeof(*sin);".

Fixes: fefba7d1ae19 ("bpf: Propagate modified uaddrlen from cgroup sockaddr programs")
Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
Link: https://lore.kernel.org/bpf/20231013185702.3993710-1-martin.lau@linux.dev

Closes: https://lore.kernel.org/bpf/20231013114007.2fb09691@canb.auug.org.au/

  Parent Hashes: 236334aeec0f93217cf9235f2004e61a0a1a5985
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes unused variable warning in net/bpf related to CONFIG_CGROUP_BPF.', 'keywords': 'warning, sin_addr_len, CONFIG_CGROUP_BPF', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The eBPF maps', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 236334aeec0f93217cf9235f2004e61a0a1a5985
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 236334aeec0f93217cf9235f2004e61a0a1a5985
  Author Name: Yafang Shao
  Author Email: laoar.shao@gmail.com
  Commit Date: 1697225601
  Commit Message:
    bpf: Avoid unnecessary audit log for CPU security mitigations

Check cpu_mitigations_off() first to avoid calling capable() if it is off.
This can avoid unnecessary audit log.

Fixes: bc5bc309db45 ("bpf: Inherit system settings for CPU security mitigations")
Suggested-by: Andrii Nakryiko <andrii.nakryiko@gmail.com>
Signed-off-by: Yafang Shao <laoar.shao@gmail.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/CAEf4Bza6UVUWqcWQ-66weZ-nMDr+TFU3Mtq=dumZFD-pSqU7Ow@mail.gmail.com/
Link: https://lore.kernel.org/bpf/20231013083916.4199-1-laoar.shao@gmail.com

  Parent Hashes: d2dc885b8c9ddb6fc374d93a87f8f2d1b97d2caf
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit prevents unnecessary audit logs by checking cpu_mitigations_off() before calling capable() for CPU security mitigations.', 'keywords': 'audit log, CPU security, mitigations', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 0e6bb5b7f4c8e6665e76bdafce37ad4a8daf83c5
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 0e6bb5b7f4c8e6665e76bdafce37ad4a8daf83c5
  Author Name: Jakub Kicinski
  Author Email: kuba@kernel.org
  Commit Date: 1697155654
  Commit Message:
    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Cross-merge networking fixes after downstream PR.

No conflicts.

Adjacent changes:

kernel/bpf/verifier.c
  829955981c55 ("bpf: Fix verifier log for async callback return values")
  a923819fb2c5 ("bpf: Treat first argument as return value for bpf_throw")

Signed-off-by: Jakub Kicinski <kuba@kernel.org>

  Parent Hashes: 2f0968a030f2a5dd4897a0151c8395bf5babe5b0 e8c127b0576660da9195504fe8393fe9da3de9ce
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes from upstream into the current branch without conflicts.', 'keywords': 'networking, fixes, merge', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: e8c127b0576660da9195504fe8393fe9da3de9ce
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e8c127b0576660da9195504fe8393fe9da3de9ce
  Author Name: Linus Torvalds
  Author Email: torvalds@linux-foundation.org
  Commit Date: 1697141220
  Commit Message:
    Merge tag 'net-6.6-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net

Pull networking fixes from Paolo Abeni:
 "Including fixes from CAN and BPF.

  We have a regression in TC currently under investigation
  Parent Hashes: 9a5a14948574ee09f339990cab69b4ab997d2f7d b91e8403373cab79375a65f5cf3495e2cd0bbdfa
  Refs:  otherwise
  the things that stand off most are probably the TCP and AF_PACKET
  fixes

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Merge networking fixes for CAN, BPF, and address regression in TC subsystem.', 'keywords': 'networking, CAN, BPF', 'commit_classification': "It's other type of commit.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['tc/netfilter like programs', 'It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).', "It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 3fec323339a4a9801a54e8b282eb571965b67b23
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3fec323339a4a9801a54e8b282eb571965b67b23
  Author Name: Alexandre Ghiti
  Author Email: alexghiti@rivosinc.com
  Commit Date: 1697136395
  Commit Message:
    drivers: perf: Fix panic in riscv SBI mmap support

The following panic can happen when mmap is called before the pmu add
callback which sets the hardware counter index: this happens for example
with the following command `perf record --no-bpf-event -n kill`.

[   99.461486] CPU: 1 PID: 1259 Comm: perf Tainted: G            E      6.6.0-rc4ubuntu-defconfig #2
[   99.461669] Hardware name: riscv-virtio
  Parent Hashes: a87e7d3e8832271ecb7d5eaaabc5b49fe25a469b
  Refs: qemu (DT)
[   99.461748] epc : pmu_sbi_set_scounteren+0x42/0x44
[   99.462337]  ra : smp_call_function_many_cond+0x126/0x5b0
[   99.462369] epc : ffffffff809f9d24 ra : ffffffff800f93e0 sp : ff60000082153aa0
[   99.462407]  gp : ffffffff82395c98 tp : ff6000009a218040 t0 : ff6000009ab3a4f0
[   99.462425]  t1 : 0000000000000004 t2 : 0000000000000100 s0 : ff60000082153ab0
[   99.462459]  s1 : 0000000000000000 a0 : ff60000098869528 a1 : 0000000000000000
[   99.462473]  a2 : 000000000000001f a3 : 0000000000f00000 a4 : fffffffffffffff8
[   99.462488]  a5 : 00000000000000cc a6 : 0000000000000000 a7 : 0000000000735049
[   99.462502]  s2 : 0000000000000001 s3 : ffffffff809f9ce2 s4 : ff60000098869528
[   99.462516]  s5 : 0000000000000002 s6 : 0000000000000004 s7 : 0000000000000001
[   99.462530]  s8 : ff600003fec98bc0 s9 : ffffffff826c5890 s10: ff600003fecfcde0
[   99.462544]  s11: ff600003fec98bc0 t3 : ffffffff819e2558 t4 : ff1c000004623840
[   99.462557]  t5 : 0000000000000901 t6 : ff6000008feeb890
[   99.462570] status: 0000000200000100 badaddr: 0000000000000000 cause: 0000000000000003
[   99.462658] [<ffffffff809f9d24>] pmu_sbi_set_scounteren+0x42/0x44
[   99.462979] Code: 1060 4785 97bb 00d7 8fd9 9073 1067 6422 0141 8082 (9002) 0013
[   99.463335] Kernel BUG [#2]

To circumvent this

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit fixes a panic in the RISC-V SBI mmap support by addressing a hardware counter index issue.', 'keywords': 'panic,RISC-V,mmap', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b84b3f47921568a8172bec77d0370268e9fc62a2
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b84b3f47921568a8172bec77d0370268e9fc62a2
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130117
  Commit Message:
    perf bpf_counter: Fix a few memory leaks

Memory leaks were detected by clang-tidy.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-20-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: 105254501770c8952e50c71618fca6a8b63890f1
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix memory leaks in the perf bpf_counter component.', 'keywords': 'memory leaks, perf, bpf_counter', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['It improves the overall eBPF infrastructure (e.g., verifier, runtime, etc.).']}
--------------------
--------------------
Processing Commit ID: 105254501770c8952e50c71618fca6a8b63890f1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 105254501770c8952e50c71618fca6a8b63890f1
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130117
  Commit Message:
    perf header: Fix various error path memory leaks

Memory leaks were detected by clang-tidy.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-19-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: 97fe038374bdf43fd025ac0e7aebf8bfbdd6d54f
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes memory leaks in perf header error paths identified by clang-tidy.', 'keywords': 'memory leaks, clang-tidy, perf header', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 97fe038374bdf43fd025ac0e7aebf8bfbdd6d54f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 97fe038374bdf43fd025ac0e7aebf8bfbdd6d54f
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130117
  Commit Message:
    perf trace-event-info: Avoid passing NULL value to closedir

If opendir failed then closedir was passed NULL which is
erroneous. Caught by clang-tidy.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-18-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: c4b5140c6eac2f757d9706c6c783b60554c48cb7
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixed erroneous passing of NULL value to closedir in perf trace-event-info.', 'keywords': 'NULL,closedir,clang-tidy', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: c4b5140c6eac2f757d9706c6c783b60554c48cb7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: c4b5140c6eac2f757d9706c6c783b60554c48cb7
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130117
  Commit Message:
    tools api: Avoid potential double free

io__getline will free the line on error but it doesn't clear the out
argument. This may lead to the line being freed twice
  Parent Hashes: 7875c72c8b0566590c888a2420d7e8fc12f67154
  Refs:  like in
tools/perf/util/srcline.c as detected by clang-tidy.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-17-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a potential double free issue in tools API related to error handling in io__getline function.', 'keywords': 'double free,error,io__getline', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 7875c72c8b0566590c888a2420d7e8fc12f67154
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 7875c72c8b0566590c888a2420d7e8fc12f67154
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130117
  Commit Message:
    perf parse-events: Fix unlikely memory leak when cloning terms

Add missing free on an error path as detected by clang-tidy.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-16-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: 1370406d35b45457aae295a6cfce9fae2bbd785e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix a memory leak in perf parse-events by adding a missing free on an error path.', 'keywords': 'memory leak, perf, free', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 1370406d35b45457aae295a6cfce9fae2bbd785e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 1370406d35b45457aae295a6cfce9fae2bbd785e
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130117
  Commit Message:
    perf lock: Fix a memory leak on an error path

If a memory allocation fails then the strdup-ed string needs
freeing. Detected by clang-tidy.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-15-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: 63d471979e49148e59eae0b33a57c12d535e20c6
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes a memory leak in perf lock by freeing strdup-ed string on error path.', 'keywords': 'memory leak, error path, strdup', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 63d471979e49148e59eae0b33a57c12d535e20c6
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 63d471979e49148e59eae0b33a57c12d535e20c6
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130116
  Commit Message:
    perf svghelper: Avoid memory leak

On success path the sib_core and sib_thr values weren't being
freed. Detected by clang-tidy.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-14-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: ef1aec6000a7364a6c1ef0a6f9cbf8b98b685255
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses a memory leak in the perf svghelper by ensuring sib_core and sib_thr values are freed.', 'keywords': 'perf,memory leak,clang-tidy', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: ef1aec6000a7364a6c1ef0a6f9cbf8b98b685255
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: ef1aec6000a7364a6c1ef0a6f9cbf8b98b685255
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130116
  Commit Message:
    perf hists browser: Avoid potential NULL dereference

On other code paths browser->he_selection is NULL checked
  Parent Hashes: 51e9ea99f9bfe6a9c283d041dbc2c1c0be9c3a0f
  Refs:  add a
missing case reported by clang-tidy.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-13-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit fixes a potential NULL dereference in the perf hists browser code.', 'keywords': 'NULL dereference, perf, browser', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 51e9ea99f9bfe6a9c283d041dbc2c1c0be9c3a0f
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 51e9ea99f9bfe6a9c283d041dbc2c1c0be9c3a0f
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130116
  Commit Message:
    perf hists browser: Reorder variables to reduce padding

Address clang-tidy warning:
```
tools/perf/ui/browsers/hists.c:2416:8: warning: Excessive padding in 'struct popup_action' (8 padding bytes
  Parent Hashes: 52a5ad12f2147506899ee83e680ea2a1d763adeb
  Refs:  where 0 is optimal).
Optimal fields order:
time

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit reorders variables in perf hists browser to address a clang-tidy padding warning.', 'keywords': 'variable reordering, clang-tidy, padding', 'commit_classification': "It's a cleanup or refactoring in the code.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 52a5ad12f2147506899ee83e680ea2a1d763adeb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 52a5ad12f2147506899ee83e680ea2a1d763adeb
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130116
  Commit Message:
    perf dlfilter: Be defensive against potential NULL dereference

In the unlikely case of having a symbol without a mapping
  Parent Hashes: 85f73c377b2ac9988a204b119aebb33ca5c60083
  Refs:  avoid a
NULL dereference that clang-tidy warns about.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-11-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit addresses a NULL dereference issue in perf dlfilter to improve stability and avoid clang-tidy warnings.', 'keywords': 'NULL dereference, perf dlfilter, clang-tidy', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 85f73c377b2ac9988a204b119aebb33ca5c60083
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 85f73c377b2ac9988a204b119aebb33ca5c60083
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130116
  Commit Message:
    perf mem-events: Avoid uninitialized read

pmu should be initialized to NULL before perf_pmus__scan loop. Fix and
shrink the scope of pmu at the same time. Issue detected by clang-tidy.

Fixes: 5752c20f3787 ("perf mem: Scan all PMUs instead of just core ones")
Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-10-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: b3aa09ee78defd3d2e5f7debb5279f8a92b69749
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Initialize pmu to NULL to prevent uninitialized read in perf mem-events and reduce its scope.', 'keywords': 'uninitialized read, clang-tidy, pmu', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: b3aa09ee78defd3d2e5f7debb5279f8a92b69749
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b3aa09ee78defd3d2e5f7debb5279f8a92b69749
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130116
  Commit Message:
    perf jitdump: Avoid memory leak

jit_repipe_unwinding_info is called in a loop by jit_process_dump
  Parent Hashes: e2372136700d460276ca7ff07da523e8f61b69c7
  Refs: 
avoid leaking unwinding_data by free-ing before overwriting. Error
detected by clang-tidy.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-9-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix memory leak in perf jitdump by freeing unwinding_data before overwriting it, as identified by clang-tidy.', 'keywords': 'perf,jitdump,memory leak', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: e2372136700d460276ca7ff07da523e8f61b69c7
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: e2372136700d460276ca7ff07da523e8f61b69c7
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130116
  Commit Message:
    perf env: Remove unnecessary NULL tests

clang-tidy was warning:
```
util/env.c:334:23: warning: Access to field 'nr_pmu_mappings' results in a dereference of a null pointer (loaded from variable 'env') [clang-analyzer-core.NullDereference]
        env->nr_pmu_mappings = pmu_num;
```

As functions are called potentially when !env was true. This condition
could never be true as it would produce a segv
  Parent Hashes: 319d459898ce507dba58c28c17610314d16b7beb
  Refs:  so remove the
unnecessary NULL tests and silence clang-tidy.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-8-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Remove unnecessary NULL pointer checks in perf environment code to prevent segfaults and silence clang-tidy warnings.', 'keywords': 'NULL tests, clang-tidy, segfault', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The bpftool utility', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 319d459898ce507dba58c28c17610314d16b7beb
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 319d459898ce507dba58c28c17610314d16b7beb
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130116
  Commit Message:
    perf buildid-cache: Fix use of uninitialized value

The buildid filename is first determined and then from this the
buildid read. If getting the filename fails then the buildid will be
used for a later memcmp uninitialized. Detected by clang-tidy.

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-7-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: da0c884b0756fc97a1c15f4cdb81e0a8490a6d7e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fix uninitialized value usage in perf buildid-cache to prevent memcmp issues.', 'keywords': 'uninitialized value, buildid-cache, memcmp', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: da0c884b0756fc97a1c15f4cdb81e0a8490a6d7e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: da0c884b0756fc97a1c15f4cdb81e0a8490a6d7e
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130115
  Commit Message:
    perf bench uprobe: Fix potential use of memory after free

Found by clang-tidy:
```
bench/uprobe.c:98:3: warning: Use of memory after it is freed [clang-analyzer-unix.Malloc]
                bench_uprobe_bpf__destroy(skel);
```

Signed-off-by: Ian Rogers <irogers@google.com>
Acked-by: Namhyung Kim <namhyung@kernel.org>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Nick Desaulniers <ndesaulniers@google.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-6-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: b24520ffa9695c7249bdd181cf10bc0a3e365019
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Fixes use-after-free issue in uprobe benchmarking tool detected by clang-tidy.', 'keywords': 'memory leak, clang-tidy, uprobe', 'commit_classification': "It's a bug fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ['other']}
--------------------
--------------------
Processing Commit ID: b24520ffa9695c7249bdd181cf10bc0a3e365019
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: b24520ffa9695c7249bdd181cf10bc0a3e365019
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130115
  Commit Message:
    run-clang-tools: Add pass through checks and and header-filter arguments

Add a -checks argument to allow the checks passed to the clang-tool to
be set on the command line.

Add a pass through -header-filter option.

Don't run analysis on non-C or CPP files.

Signed-off-by: Ian Rogers <irogers@google.com>
Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Cc: linux-perf-users@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-4-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: 9e56d3be4bfd2ec6433a7c44195bd1e687b8ed2e
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Enhance run-clang-tools with command-line options for checks and header filtering, excluding non-C/CPP files.', 'keywords': 'clang-tools, header-filter, checks', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': "It's not related to any of the above, it's not related to bpf subsystem in Linux kernel, may be wrong data.", 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 9e56d3be4bfd2ec6433a7c44195bd1e687b8ed2e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 9e56d3be4bfd2ec6433a7c44195bd1e687b8ed2e
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130115
  Commit Message:
    gen_compile_commands: Sort output compile commands by file name

Make the output more stable and deterministic.

Signed-off-by: Ian Rogers <irogers@google.com>
Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Cc: linux-perf-users@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-3-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>

  Parent Hashes: 52c15e7e792857c42b4a926e45228e981c5a5f13
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates gen_compile_commands to sort output compile commands by file name for stability and determinism.', 'keywords': 'gen_compile_commands, sort, stability', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 52c15e7e792857c42b4a926e45228e981c5a5f13
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 52c15e7e792857c42b4a926e45228e981c5a5f13
  Author Name: Ian Rogers
  Author Email: irogers@google.com
  Commit Date: 1697130115
  Commit Message:
    gen_compile_commands: Allow the line prefix to still be cmd_

Builds in tools still use the cmd_ prefix in .cmd files
  Parent Hashes: b20576fd7fe39554b212095c3c0d7a3dff512515
  Refs:  so don't
require the saved part. Name the groups in the line pattern match so
that changing the regular expression is more robust and works with the
addition of a new match group.

Signed-off-by: Ian Rogers <irogers@google.com>
Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
Cc: Ravi Bangoria <ravi.bangoria@amd.com>
Cc: Mark Rutland <mark.rutland@arm.com>
Cc: Yang Jihong <yangjihong1@huawei.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Adrian Hunter <adrian.hunter@intel.com>
Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
Cc: Huacai Chen <chenhuacai@kernel.org>
Cc: Jiri Olsa <jolsa@kernel.org>
Cc: Nathan Chancellor <nathan@kernel.org>
Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: llvm@lists.linux.dev
Cc: Ming Wang <wangming01@loongson.cn>
Cc: Ingo Molnar <mingo@redhat.com>
Cc: Tom Rix <trix@redhat.com>
Cc: bpf@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Cc: linux-perf-users@vger.kernel.org
Link: https://lore.kernel.org/r/20231009183920.200859-2-irogers@google.com
Signed-off-by: Namhyung Kim <namhyung@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit allows the gen_compile_commands to maintain the cmd_ prefix for robustness with new match groups.', 'keywords': 'gen_compile_commands, cmd_prefix, robustness', 'commit_classification': "It's a build system or CI/CD change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: d2dc885b8c9ddb6fc374d93a87f8f2d1b97d2caf
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: d2dc885b8c9ddb6fc374d93a87f8f2d1b97d2caf
  Author Name: Martin KaFai Lau
  Author Email: martin.lau@kernel.org
  Commit Date: 1697070476
  Commit Message:
    Merge branch 'Add cgroup sockaddr hooks for unix sockets'

Daan De Meyer says:

====================
Changes since v10:

* Removed extra check from bpf_sock_addr_set_sun_path() again in favor of
  calling unix_validate_addr() everywhere in af_unix.c before calling the hooks.

Changes since v9:

* Renamed bpf_sock_addr_set_unix_addr() to bpf_sock_addr_set_sun_path() and
  rennamed arguments to match the new name.
* Added an extra check to bpf_sock_addr_set_sun_path() to disallow changing the
  address of an unnamed unix socket.
* Removed unnecessary NULL check on uaddrlen in
  __cgroup_bpf_run_filter_sock_addr().

Changes since v8:

* Added missing test programs to last patch

Changes since v7:

* Fixed formatting nit in comment
* Renamed from cgroup/connectun to cgroup/connect_unix (and similar for all
  other hooks)

Changes since v6:

* Actually removed bpf_bind() helper for AF_UNIX hooks.
* Fixed merge conflict
* Updated comment to mention uaddrlen is read-only for AF_INET[6]
* Removed unnecessary forward declaration of struct sock_addr_test
* Removed unused BPF_CGROUP_RUN_PROG_UNIX_CONNECT()
* Fixed formatting nit reported by checkpatch
* Added more information to commit message about recvmsg() on connected socket

Changes since v5:

* Fixed kernel version in bpftool documentation (6.3 => 6.7).
* Added connection mode socket recvmsg() test.
* Removed bpf_bind() helper for AF_UNIX hooks.
* Added missing getpeernameun and getsocknameun BPF test programs.
* Added note for bind() test being unused currently.

Changes since v4:

* Dropped support for intercepting bind() as when using bind() with unix sockets
  and a pathname sockaddr
  Parent Hashes: 1ef09e1281a1add0a86ecd594f748d7fb8bfd78e 82ab6b505e8199cc4537f00025a7391973c3847e
  Refs:  bind() will create an inode in the filesystem that
  needs to be cleaned up. If the address is rewritten

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds cgroup sockaddr hooks for Unix sockets and includes various fixes and renamings from previous versions.', 'keywords': 'cgroup, unix sockets, hooks', 'commit_classification': "It's a new feature.", 'commit_complexity': "Complex, needs expert knowledge or significant changes to existing systems. Like adding a completely new subsystem support or a completely new program type don't exist before.", 'Major related component': 'The attach events and bpf link. e.g. perf events, tracepoints, etc.', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 82ab6b505e8199cc4537f00025a7391973c3847e
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 82ab6b505e8199cc4537f00025a7391973c3847e
  Author Name: Daan De Meyer
  Author Email: daan.j.demeyer@gmail.com
  Commit Date: 1697070475
  Commit Message:
    selftests/bpf: Add tests for cgroup unix socket address hooks

These selftests are written in prog_tests style instead of adding
them to the existing test_sock_addr tests. Migrating the existing
sock addr tests to prog_tests style is left for future work. This
commit adds support for testing bind() sockaddr hooks
  Parent Hashes: af2752ed450e71fc0bd596d0b4b9b805a64ae2c1
  Refs:  even though
there's no unix socket sockaddr hook for bind(). We leave this code
intact for when the INET and INET6 tests are migrated in the future
which do support intercepting bind().

Signed-off-by: Daan De Meyer <daan.j.demeyer@gmail.com>
Link: https://lore.kernel.org/r/20231011185113.140426-10-daan.j.demeyer@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>


- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Add selftests for cgroup unix socket address hooks in prog_tests style.', 'keywords': 'selftests,cgroup,socket', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ['socket like programs', 'cgroup like programs']}
--------------------
--------------------
Processing Commit ID: af2752ed450e71fc0bd596d0b4b9b805a64ae2c1
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: af2752ed450e71fc0bd596d0b4b9b805a64ae2c1
  Author Name: Daan De Meyer
  Author Email: daan.j.demeyer@gmail.com
  Commit Date: 1697070475
  Commit Message:
    selftests/bpf: Make sure mount directory exists

The mount directory for the selftests cgroup tree might
not exist so let's make sure it does exist by creating
it ourselves if it doesn't exist.

Signed-off-by: Daan De Meyer <daan.j.demeyer@gmail.com>
Link: https://lore.kernel.org/r/20231011185113.140426-9-daan.j.demeyer@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 3243fef6a4c0db2dbb01ee3cf30bd787e65b8d56
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'Ensure selftests create necessary mount directories for cgroup trees if not present.', 'keywords': 'selftests, cgroup, directory', 'commit_classification': "It's a test case or test infrastructure change.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'The test cases and makefiles', 'program_types_related': ["It's not related to any of the above."]}
--------------------
--------------------
Processing Commit ID: 3243fef6a4c0db2dbb01ee3cf30bd787e65b8d56
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 3243fef6a4c0db2dbb01ee3cf30bd787e65b8d56
  Author Name: Daan De Meyer
  Author Email: daan.j.demeyer@gmail.com
  Commit Date: 1697070475
  Commit Message:
    documentation/bpf: Document cgroup unix socket address hooks

Update the documentation to mention the new cgroup unix sockaddr
hooks.

Signed-off-by: Daan De Meyer <daan.j.demeyer@gmail.com>
Link: https://lore.kernel.org/r/20231011185113.140426-8-daan.j.demeyer@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: 8b3cba987e6d9464bb533d957de923f891b57bf8
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'The commit updates documentation to include cgroup unix socket address hooks.', 'keywords': 'documentation,cgroup,socket', 'commit_classification': "It's a documentation change or typo fix.", 'commit_complexity': 'Simple, can be used without much configuration. For example, a simple helper function.', 'Major related component': 'Other component related to eBPF but not listed above.', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: 8b3cba987e6d9464bb533d957de923f891b57bf8
Survey Title: Commit Classification Survey


Description: A survey about the type, use cases and summary of commit in Linux eBPF.

Commit Details:
  Commit ID: 8b3cba987e6d9464bb533d957de923f891b57bf8
  Author Name: Daan De Meyer
  Author Email: daan.j.demeyer@gmail.com
  Commit Date: 1697070475
  Commit Message:
    bpftool: Add support for cgroup unix socket address hooks

Add the necessary plumbing to hook up the new cgroup unix sockaddr
hooks into bpftool.

Signed-off-by: Daan De Meyer <daan.j.demeyer@gmail.com>
Acked-by: Quentin Monnet <quentin@isovalent.com>
Link: https://lore.kernel.org/r/20231011185113.140426-7-daan.j.demeyer@gmail.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>

  Parent Hashes: bf90438c78df885c17a3474276ed39abb4a7c026
  Refs: 

- Please provide a summary of the commit in one short sentence not longer than 30 words. Only output one sentence.

- Please extract no more than 3 keywords from the commit. Only output 3 keywords, without any special characters.

- What may be the main type of the commit?

- What is the estimated complexity of implementing this commit?

- What major component that the commit is related to?

- What eBPF program(s) may the commit relate to and designed for?

{'summary': 'This commit adds support for cgroup unix socket address hooks into bpftool.', 'keywords': 'bpftool,cgroup,unix', 'commit_classification': "It's a new feature.", 'commit_complexity': 'Moderate, requires some setup or understanding of the system. For example, a new map type or a new link type.', 'Major related component': 'The bpftool utility', 'program_types_related': ['cgroup like programs']}
--------------------
--------------------
Processing Commit ID: bf90438c78df885c17a3474276ed39abb4a7c026
